<Type Name="MetaModel" FullName="System.Web.DynamicData.MetaModel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cd08fc9b4ac563dbe2a6b53b40f2cfd014d38e50" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73395519" /></Metadata><TypeSignature Language="C#" Value="public class MetaModel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MetaModel extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.MetaModel" />
  <TypeSignature Language="VB.NET" Value="Public Class MetaModel" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetaModel" />
  <TypeSignature Language="F#" Value="type MetaModel = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="69666-101">ASP.NET Dynamic Data で使用する 1 つまたは複数のデータベースを表します。</span><span class="sxs-lookup"><span data-stu-id="69666-101">Represents one or multiple databases that are used by ASP.NET Dynamic Data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-102"><xref:System.Web.DynamicData.MetaModel> の種類を使用すると、動的データ Web アプリケーションに1つまたは複数のデータコンテキストを登録できます。</span><span class="sxs-lookup"><span data-stu-id="69666-102">The <xref:System.Web.DynamicData.MetaModel> type lets you register one or multiple data contexts for a Dynamic Data Web application.</span></span>  
  
 <span data-ttu-id="69666-103">データコンテキストは、データベース接続を表すオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="69666-103">A data context is an object that represents a database connection.</span></span> <span data-ttu-id="69666-104">データコンテキストは、その接続を介して使用可能なデータベースを表す1つのデータモデルにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="69666-104">A data context has access to one data model which represents a database that is available through that connection.</span></span> <span data-ttu-id="69666-105">データモデルは、CLR 型としてデータベースのデータエンティティを表すオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="69666-105">A data model is an object that represents a database's data entities as CLR types.</span></span> <span data-ttu-id="69666-106">動的データでは、LINQ to SQL と ADO.NET Entity Framework に基づくデータモデルがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="69666-106">Dynamic Data supports data models based on LINQ to SQL and on the ADO.NET Entity Framework.</span></span>  
  
 <span data-ttu-id="69666-107">Visual Studio では、 **LINQ to SQL クラス**テンプレートまたは**ADO.NET Entity Data Model**テンプレートを使用して、データモデルの型を生成できます。</span><span class="sxs-lookup"><span data-stu-id="69666-107">In Visual Studio, you can generate data-model types by using the **LINQ to SQL Classes** template or the **ADO.NET Entity Data Model** template.</span></span> <span data-ttu-id="69666-108">これらのテンプレートは、LINQ to SQL モデルのオブジェクトリレーショナルデザイナー (O/R デザイナー)、または Entity Framework モデルの ADO.NET Entity Data Model デザイナー (Entity Designer) を使用します。</span><span class="sxs-lookup"><span data-stu-id="69666-108">These templates use the Object Relational Designer (O/R Designer) for the LINQ to SQL model, or the ADO.NET Entity Data Model Designer (Entity Designer) for the Entity Framework model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="69666-109">次の例は、ASP.NET Web サイトで自動スキャフォールディングを使用するために、<xref:System.Web.DynamicData.MetaModel> 型を使用して次のタスクを実行する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="69666-109">The following example shows how to use <xref:System.Web.DynamicData.MetaModel> type to perform the following tasks in order to use automatic scaffolding in an ASP.NET Web site:</span></span>  
  
-   <span data-ttu-id="69666-110">既定のデータコンテキストのデータモデルを取得します。</span><span class="sxs-lookup"><span data-stu-id="69666-110">Get the data model for the default data context.</span></span>  
  
-   <span data-ttu-id="69666-111">指定されたデータコンテキストのデータモデルを取得します。</span><span class="sxs-lookup"><span data-stu-id="69666-111">Get the data model for a specified data context.</span></span>  
  
-   <span data-ttu-id="69666-112">指定されたテーブルのルーティングパス (URL を確認) を評価します。</span><span class="sxs-lookup"><span data-stu-id="69666-112">Evaluate the routing path (determine the URL) for a specified table.</span></span>  
  
 <span data-ttu-id="69666-113">この例は、ページとその分離コードファイルで構成されています。</span><span class="sxs-lookup"><span data-stu-id="69666-113">The example consists of a page and its code-behind file.</span></span>  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/PlaceHolder.cs#1)]
 [!code-aspx-csharp[System.Web.DynamicData.MetaModel#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/PathModel.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.MetaModel#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/PathModel.aspx#1)]
 [!code-vb[System.Web.DynamicData.MetaModel#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/PlaceHolder.vb#1)]  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/PathModel.aspx.cs#2)]
 [!code-vb[System.Web.DynamicData.MetaModel#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/PathModel.aspx.vb#2)]  
  
 <span data-ttu-id="69666-114">この例をコンパイルするには、次のものが必要です。</span><span class="sxs-lookup"><span data-stu-id="69666-114">To compile the example, you need the following:</span></span>  
  
-   [!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)] <span data-ttu-id="69666-115">または [!INCLUDE[vwd_exp_dev10_long](~/includes/vwd-exp-dev10-long-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="69666-115">or [!INCLUDE[vwd_exp_dev10_long](~/includes/vwd-exp-dev10-long-md.md)].</span></span>  
  
-   <span data-ttu-id="69666-116">動的データの Web サイト。</span><span class="sxs-lookup"><span data-stu-id="69666-116">A Dynamic Data Web site.</span></span> <span data-ttu-id="69666-117">詳細については、「[チュートリアル: スキャフォールディングを使用して新しい動的データ Web サイトを作成](https://msdn.microsoft.com/library/1564aef2-9103-436a-9806-c8ad7abd616a)する」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="69666-117">For more information, see [Walkthrough: Creating a New Dynamic Data Web Site Using Scaffolding](https://msdn.microsoft.com/library/1564aef2-9103-436a-9806-c8ad7abd616a).</span></span>  
  
 <span data-ttu-id="69666-118">この機能の実行時のコード例については、「 [run](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.MetaModel)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="69666-118">See a run-time code example of this feature: [Run](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.MetaModel).</span></span>  
  
 ]]></format>
    </remarks>
    <exception cref="T:System.InvalidOperationException"><span data-ttu-id="69666-119">データ コンテキスト登録エラーがあった場合に、メソッドによってスローされます。</span><span class="sxs-lookup"><span data-stu-id="69666-119">Can be thrown by any method if there has been a data context registration error.</span></span></exception>
    <related type="Article" href="https://msdn.microsoft.com/library/ee5dd2fb-5bb8-4bd7-a13d-d0a2659c3870"><span data-ttu-id="69666-120">ASP.NET 動的データモデルのカスタマイズ</span><span class="sxs-lookup"><span data-stu-id="69666-120">ASP.NET Dynamic Data Model Customization</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/45e477c0-5c6b-41f9-b2d0-2808fb4f6537"><span data-ttu-id="69666-121">オブジェクト リレーショナル デザイナー (O/R デザイナー)</span><span class="sxs-lookup"><span data-stu-id="69666-121">Object Relational Designer (O/R Designer)</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655"><span data-ttu-id="69666-122">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="69666-122">LINQ to SQL</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/200fe812-d0a6-4531-b9b4-cfc4ee83a678"><span data-ttu-id="69666-123">方法: ルートを定義する</span><span class="sxs-lookup"><span data-stu-id="69666-123">How to: Define a Route</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="69666-124"><see cref="T:System.Web.DynamicData.MetaModel" /> クラスの新しいインスタンスを生成します。</span><span class="sxs-lookup"><span data-stu-id="69666-124">Instantiates a new instance of the <see cref="T:System.Web.DynamicData.MetaModel" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetaModel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MetaModel();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="69666-125"><see cref="T:System.Web.DynamicData.MetaModel" /> クラスの新しいインスタンスを生成します。</span><span class="sxs-lookup"><span data-stu-id="69666-125">Instantiates a new instance of the <see cref="T:System.Web.DynamicData.MetaModel" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-126">通常は、global.asax ファイルの `Application_Start` メソッドで <xref:System.Web.DynamicData.MetaModel.%23ctor%2A> コンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="69666-126">You typically call the <xref:System.Web.DynamicData.MetaModel.%23ctor%2A> constructor in the `Application_Start` method of the Global.asax file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="69666-127">次の例では、<xref:System.Web.DynamicData.MetaModel.%23ctor%2A> コンストラクターを使用して、次のタスクを実行する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="69666-127">The following example shows how to use the <xref:System.Web.DynamicData.MetaModel.%23ctor%2A> constructor to perform the following tasks:</span></span>  
  
-   <span data-ttu-id="69666-128"><xref:System.Web.DynamicData.MetaModel> クラスをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="69666-128">Instantiate the <xref:System.Web.DynamicData.MetaModel> class.</span></span>  
  
-   <span data-ttu-id="69666-129"><xref:System.Web.DynamicData.MetaModel> インスタンスを初期化して登録します。</span><span class="sxs-lookup"><span data-stu-id="69666-129">Initialize and register the <xref:System.Web.DynamicData.MetaModel> instance.</span></span>  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#99](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/global.asax.cs#99)]
 [!code-vb[System.Web.DynamicData.MetaModel#99](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/global.asax.vb#99)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetaModel (bool registerGlobally);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool registerGlobally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (registerGlobally As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MetaModel(bool registerGlobally);" />
      <MemberSignature Language="F#" Value="new System.Web.DynamicData.MetaModel : bool -&gt; System.Web.DynamicData.MetaModel" Usage="new System.Web.DynamicData.MetaModel registerGlobally" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="registerGlobally" Type="System.Boolean" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="registerGlobally"><span data-ttu-id="69666-130">モデルがグローバルに登録されたことを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="69666-130"><see langword="true" /> to indicate that the model is registered globally; otherwise <see langword="false" />.</span></span> <span data-ttu-id="69666-131">既定値は、<see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="69666-131">The default is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="69666-132"><see cref="T:System.Web.DynamicData.MetaModel" /> クラスの新しいインスタンスを生成します。</span><span class="sxs-lookup"><span data-stu-id="69666-132">Instantiates a new instance of the <see cref="T:System.Web.DynamicData.MetaModel" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-133">このコンストラクターは、データモデルがグローバルに登録されているかどうかを判断し、<xref:System.Web.DynamicData.MetaModel.GetModel%2A> メソッドを使用して取得できるようにします。</span><span class="sxs-lookup"><span data-stu-id="69666-133">This constructor determines whether the data model is registered globally so that it can be retrieved using the <xref:System.Web.DynamicData.MetaModel.GetModel%2A> method.</span></span> <span data-ttu-id="69666-134">これにより、複数のモデルを作成し、同じエンティティ型を使用して、型の競合を回避することができます。</span><span class="sxs-lookup"><span data-stu-id="69666-134">It enables you to create multiple models and use the same entity types while avoiding type conflicts.</span></span>  
  
 <span data-ttu-id="69666-135">通常は、global.asax ファイルの `Application_Start` メソッドで <xref:System.Web.DynamicData.MetaModel.%23ctor%2A> コンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="69666-135">You typically call the <xref:System.Web.DynamicData.MetaModel.%23ctor%2A> constructor in the `Application_Start` method of the Global.asax file.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTable">
      <MemberSignature Language="C#" Value="protected virtual System.Web.DynamicData.MetaTable CreateTable (System.Web.DynamicData.ModelProviders.TableProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.DynamicData.MetaTable CreateTable(class System.Web.DynamicData.ModelProviders.TableProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.CreateTable(System.Web.DynamicData.ModelProviders.TableProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateTable (provider As TableProvider) As MetaTable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::DynamicData::MetaTable ^ CreateTable(System::Web::DynamicData::ModelProviders::TableProvider ^ provider);" />
      <MemberSignature Language="F#" Value="abstract member CreateTable : System.Web.DynamicData.ModelProviders.TableProvider -&gt; System.Web.DynamicData.MetaTable&#xA;override this.CreateTable : System.Web.DynamicData.ModelProviders.TableProvider -&gt; System.Web.DynamicData.MetaTable" Usage="metaModel.CreateTable provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.DynamicData.ModelProviders.TableProvider" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="69666-136">テーブルのプロバイダー。</span><span class="sxs-lookup"><span data-stu-id="69666-136">The provider for the table.</span></span></param>
        <summary><span data-ttu-id="69666-137"><see cref="T:System.Web.DynamicData.MetaTable" /> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="69666-137">Instantiates a <see cref="T:System.Web.DynamicData.MetaTable" /> object.</span></span></summary>
        <returns><span data-ttu-id="69666-138">テーブルの新しいインスタンス。</span><span class="sxs-lookup"><span data-stu-id="69666-138">A new instance of the table.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-139"><xref:System.Web.DynamicData.MetaModel.CreateTable%2A> メソッドは、派生型をインスタンス化するためにオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="69666-139">The <xref:System.Web.DynamicData.MetaModel.CreateTable%2A> method can be overridden to instantiate a derived type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.DynamicData.MetaTable" />
        <altmember cref="T:System.Web.DynamicData.ModelProviders.TableProvider" />
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.DynamicData.MetaModel Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.DynamicData.MetaModel Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.MetaModel.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As MetaModel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::DynamicData::MetaModel ^ Default { System::Web::DynamicData::MetaModel ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Web.DynamicData.MetaModel" Usage="System.Web.DynamicData.MetaModel.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="69666-140">アプリケーションで作成されるデータ モデルの最初のインスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="69666-140">Gets the first instance of a data model that is created by the application.</span></span></summary>
        <value><span data-ttu-id="69666-141">データ モデルのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="69666-141">The data-model instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-142">このプロパティは、既定のデータモデルインスタンスを参照する簡単な方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="69666-142">This property provides a simple way to reference the default data-model instance.</span></span> <span data-ttu-id="69666-143">アプリケーションで複数のモデルを使用する場合は、追加のデータモデルへの参照を格納するための独自の方法を用意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="69666-143">If the application uses multiple models, you must provide your own way to store references to the additional data models.</span></span> <span data-ttu-id="69666-144">特定のデータモデルを検索するには、<xref:System.Web.DynamicData.MetaModel.GetModel%2A?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="69666-144">To find a specific data model, call the <xref:System.Web.DynamicData.MetaModel.GetModel%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="69666-145">次の例は、<xref:System.Web.DynamicData.MetaModel.GetModel%2A> メソッドの <xref:System.Web.DynamicData.MetaModel.Default%2A> プロパティを使用して、既定のデータモデルを取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="69666-145">The following example shows how to use the <xref:System.Web.DynamicData.MetaModel.Default%2A> property in the <xref:System.Web.DynamicData.MetaModel.GetModel%2A> method to get the default data model.</span></span>  
  
 <span data-ttu-id="69666-146">完全な例については、「<xref:System.Web.DynamicData.MetaModel> クラスの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="69666-146">For a complete example, see the <xref:System.Web.DynamicData.MetaModel> class overview.</span></span>  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#22](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/PathModel.aspx.cs#22)]
 [!code-vb[System.Web.DynamicData.MetaModel#22](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/PathModel.aspx.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DynamicDataFolderVirtualPath">
      <MemberSignature Language="C#" Value="public string DynamicDataFolderVirtualPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DynamicDataFolderVirtualPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.MetaModel.DynamicDataFolderVirtualPath" />
      <MemberSignature Language="VB.NET" Value="Public Property DynamicDataFolderVirtualPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DynamicDataFolderVirtualPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DynamicDataFolderVirtualPath : string with get, set" Usage="System.Web.DynamicData.MetaModel.DynamicDataFolderVirtualPath" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IMetaModel.DynamicDataFolderVirtualPath</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="69666-147">Web サイトの DynamicData フォルダーの仮想パスを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="69666-147">Gets or sets the virtual path of the DynamicData folder in the Web site.</span></span></summary>
        <value><span data-ttu-id="69666-148">DynamicData フォルダーの仮想パス。</span><span class="sxs-lookup"><span data-stu-id="69666-148">The virtual path of the DynamicData folder.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-149">このプロパティを使用すると、DynamicData フォルダーの仮想パスを変更できます。</span><span class="sxs-lookup"><span data-stu-id="69666-149">This property enables you to change the virtual path of the DynamicData folder.</span></span> <span data-ttu-id="69666-150">既定値は "~/DynamicData" です。</span><span class="sxs-lookup"><span data-stu-id="69666-150">The default value is "~/DynamicData".</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityTemplateFactory">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.EntityTemplateFactory EntityTemplateFactory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.EntityTemplateFactory EntityTemplateFactory" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.MetaModel.EntityTemplateFactory" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityTemplateFactory As EntityTemplateFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::EntityTemplateFactory ^ EntityTemplateFactory { System::Web::DynamicData::EntityTemplateFactory ^ get(); void set(System::Web::DynamicData::EntityTemplateFactory ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EntityTemplateFactory : System.Web.DynamicData.EntityTemplateFactory with get, set" Usage="System.Web.DynamicData.MetaModel.EntityTemplateFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.EntityTemplateFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="69666-151">モデルに関連付けられている <see cref="T:System.Web.DynamicData.EntityTemplateFactory" /> オブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="69666-151">Gets or sets the <see cref="T:System.Web.DynamicData.EntityTemplateFactory" /> object that is associated with the model.</span></span></summary>
        <value><span data-ttu-id="69666-152">モデルに関連付けられている <see cref="T:System.Web.DynamicData.EntityTemplateFactory" /> オブジェクトのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="69666-152">An instance of the <see cref="T:System.Web.DynamicData.EntityTemplateFactory" /> object that is associated with the model.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldTemplateFactory">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.IFieldTemplateFactory FieldTemplateFactory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.IFieldTemplateFactory FieldTemplateFactory" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.MetaModel.FieldTemplateFactory" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldTemplateFactory As IFieldTemplateFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::IFieldTemplateFactory ^ FieldTemplateFactory { System::Web::DynamicData::IFieldTemplateFactory ^ get(); void set(System::Web::DynamicData::IFieldTemplateFactory ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FieldTemplateFactory : System.Web.DynamicData.IFieldTemplateFactory with get, set" Usage="System.Web.DynamicData.MetaModel.FieldTemplateFactory" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IMetaModel.FieldTemplateFactory</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.IFieldTemplateFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="69666-153">カスタム <see cref="T:System.Web.DynamicData.IFieldTemplateFactory" /> インターフェイスを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="69666-153">Gets or sets a custom <see cref="T:System.Web.DynamicData.IFieldTemplateFactory" /> interface.</span></span></summary>
        <value><span data-ttu-id="69666-154"><see cref="T:System.Web.DynamicData.IFieldTemplateFactory" /> インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="69666-154">The <see cref="T:System.Web.DynamicData.IFieldTemplateFactory" /> interface.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-155"><xref:System.Web.DynamicData.IFieldTemplateFactory> インターフェイスを使用すると、テーブルの列に対して作成するフィールドテンプレートを指定できます。</span><span class="sxs-lookup"><span data-stu-id="69666-155">The <xref:System.Web.DynamicData.IFieldTemplateFactory> interface lets you specify which field templates are created for the table columns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterFactory">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.FilterFactory FilterFactory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.FilterFactory FilterFactory" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.MetaModel.FilterFactory" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterFactory As FilterFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::FilterFactory ^ FilterFactory { System::Web::DynamicData::FilterFactory ^ get(); void set(System::Web::DynamicData::FilterFactory ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterFactory : System.Web.DynamicData.FilterFactory with get, set" Usage="System.Web.DynamicData.MetaModel.FilterFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.FilterFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="69666-156">モデルに関連付けられている <see cref="T:System.Web.DynamicData.FilterFactory" /> オブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="69666-156">Gets or sets the <see cref="T:System.Web.DynamicData.FilterFactory" /> object that is associated with the model.</span></span></summary>
        <value><span data-ttu-id="69666-157">モデルに関連付けられている <see cref="T:System.Web.DynamicData.FilterFactory" /> オブジェクトのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="69666-157">An instance of the <see cref="T:System.Web.DynamicData.FilterFactory" /> object that is associated with the model.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionPath">
      <MemberSignature Language="C#" Value="public string GetActionPath (string tableName, string action, object row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetActionPath(string tableName, string action, object row) cil managed" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.GetActionPath(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetActionPath (tableName As String, action As String, row As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetActionPath(System::String ^ tableName, System::String ^ action, System::Object ^ row);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.GetActionPath : string * string * obj -&gt; string" Usage="metaModel.GetActionPath (tableName, action, row)" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetActionPath(string tableName, string action, object row) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetActionPath(System::String ^ tableName, System::String ^ action, System::Object ^ row);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member GetActionPath : string * string * obj -&gt; string&#xA;override this.GetActionPath : string * string * obj -&gt; string" Usage="metaModel.GetActionPath (tableName, action, row)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IMetaModel.GetActionPath(System.String,System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableName" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
        <Parameter Name="row" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="tableName"><span data-ttu-id="69666-158">アクションが適用されるテーブルの名前。</span><span class="sxs-lookup"><span data-stu-id="69666-158">The name of the table that the action applies to.</span></span></param>
        <param name="action"><span data-ttu-id="69666-159">テーブルに対して適用するアクション。</span><span class="sxs-lookup"><span data-stu-id="69666-159">The action to apply to the table.</span></span></param>
        <param name="row"><span data-ttu-id="69666-160">テーブルの単一行のデータを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="69666-160">An object that represents a single row of data in a table.</span></span> <span data-ttu-id="69666-161"><paramref name="row" /> は、クエリ文字列パラメーターの値を指定するために使用します。</span><span class="sxs-lookup"><span data-stu-id="69666-161"><paramref name="row" /> is used to provide values for query-string parameters.</span></span></param>
        <summary><span data-ttu-id="69666-162">指定されたテーブルに関連付けられたアクション パスを返します。</span><span class="sxs-lookup"><span data-stu-id="69666-162">Returns the action path that is associated with a specific table.</span></span></summary>
        <returns><span data-ttu-id="69666-163">ルートに関連付けられている URL。</span><span class="sxs-lookup"><span data-stu-id="69666-163">The URL that is associated with the route.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-164">ルートは、テーブル名とアクションの組み合わせによって決まります。</span><span class="sxs-lookup"><span data-stu-id="69666-164">The route is determined by the combination of the table name and action.</span></span>  
  
 <span data-ttu-id="69666-165">この機能のオンラインの例を[実行](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.MetaModel&spage=PathModel.aspx)します。</span><span class="sxs-lookup"><span data-stu-id="69666-165">[Run](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.MetaModel&spage=PathModel.aspx) an online example of this feature.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="69666-166">次の例では、<xref:System.Web.DynamicData.MetaModel.GetActionPath%28System.String%2CSystem.String%2CSystem.Object%29> メソッドを使用して、指定されたテーブルのルーティングパス (URL の決定) を評価する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="69666-166">The following example shows how to use the <xref:System.Web.DynamicData.MetaModel.GetActionPath%28System.String%2CSystem.String%2CSystem.Object%29> method to evaluate the routing path (determine the URL) for a specified table.</span></span> <span data-ttu-id="69666-167">コード例全体については、「<xref:System.Web.DynamicData.MetaModel>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="69666-167">For a complete example, see <xref:System.Web.DynamicData.MetaModel>.</span></span>  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#23](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/PathModel.aspx.cs#23)]
 [!code-vb[System.Web.DynamicData.MetaModel#23](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/PathModel.aspx.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModel">
      <MemberSignature Language="C#" Value="public static System.Web.DynamicData.MetaModel GetModel (Type contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.DynamicData.MetaModel GetModel(class System.Type contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.GetModel(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetModel (contextType As Type) As MetaModel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::DynamicData::MetaModel ^ GetModel(Type ^ contextType);" />
      <MemberSignature Language="F#" Value="static member GetModel : Type -&gt; System.Web.DynamicData.MetaModel" Usage="System.Web.DynamicData.MetaModel.GetModel contextType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="contextType"><span data-ttu-id="69666-168">データ モデルに定義されているデータ コンテキストの型。</span><span class="sxs-lookup"><span data-stu-id="69666-168">The type of the data context as defined in the data model.</span></span></param>
        <summary><span data-ttu-id="69666-169">指定されたコンテキストのデータ モデル インスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="69666-169">Returns the data-model instance for the specified context.</span></span></summary>
        <returns><span data-ttu-id="69666-170">指定されたコンテキスト型に関連付けられたデータ モデル。</span><span class="sxs-lookup"><span data-stu-id="69666-170">The data model that is associated with the specified context type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="69666-171">次の例では、<xref:System.Web.DynamicData.MetaModel.GetModel%28System.Type%29> メソッドを使用して、次のタスクを実行する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="69666-171">The following example shows how to use the <xref:System.Web.DynamicData.MetaModel.GetModel%28System.Type%29> method to perform the following tasks:</span></span>  
  
-   <span data-ttu-id="69666-172">既定のデータモデルを取得しています。</span><span class="sxs-lookup"><span data-stu-id="69666-172">Getting the default data model.</span></span>  
  
-   <span data-ttu-id="69666-173">渡されたコンテキスト型によって指定されたデータモデルを取得しています。</span><span class="sxs-lookup"><span data-stu-id="69666-173">Getting the data model specified by the passed context type.</span></span>  
  
 <span data-ttu-id="69666-174">完全な例については、「<xref:System.Web.DynamicData.MetaModel> クラスの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="69666-174">For a complete example, see the <xref:System.Web.DynamicData.MetaModel> class overview.</span></span>  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#22](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/PathModel.aspx.cs#22)]
 [!code-vb[System.Web.DynamicData.MetaModel#22](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/PathModel.aspx.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTable">
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="69666-175">テーブルが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="69666-175">The table was not found.</span></span></exception>
        <summary><span data-ttu-id="69666-176">データ モデルのテーブルを表すメタデータを返します。</span><span class="sxs-lookup"><span data-stu-id="69666-176">Returns the metadata that describes a data model table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-177">オーバーロードされたメソッドによって返される <xref:System.Web.DynamicData.MetaTable> オブジェクトには、指定したテーブルに関連付けられているメタデータ情報が含まれます。</span><span class="sxs-lookup"><span data-stu-id="69666-177">The <xref:System.Web.DynamicData.MetaTable> object that is returned by the overloaded methods contains the metadata information that is associated with the specified table.</span></span>  
  
 <span data-ttu-id="69666-178">この機能のオンラインの例を[実行](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.MetaModel&spage=GetTable.aspx)します。</span><span class="sxs-lookup"><span data-stu-id="69666-178">[Run](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.MetaModel&spage=GetTable.aspx) an online example of this feature.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="69666-179">次の例は、<xref:System.Web.DynamicData.MetaModel.GetTable%2A> オーバーロードされたメソッドを使用して、次のタスクを実行する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="69666-179">The following example shows how to use the <xref:System.Web.DynamicData.MetaModel.GetTable%2A> overloaded methods to perform the following tasks:</span></span>  
  
-   <span data-ttu-id="69666-180">指定されたテーブルの <xref:System.Web.DynamicData.MetaTable> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="69666-180">Get the <xref:System.Web.DynamicData.MetaTable> object for the specified table.</span></span>  
  
-   <span data-ttu-id="69666-181"><xref:System.Web.DynamicData.MetaTable> オブジェクトに含まれるメタデータ情報にアクセスします。</span><span class="sxs-lookup"><span data-stu-id="69666-181">Access the metadata information that is contained by the <xref:System.Web.DynamicData.MetaTable> object.</span></span>  
  
 <span data-ttu-id="69666-182">この例は、ページとその分離コードファイルで構成されています。</span><span class="sxs-lookup"><span data-stu-id="69666-182">The example consists of a page and its code-behind file.</span></span>  
  
 [!code-aspx-csharp[System.Web.DynamicData.MetaModel#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/GetTable.aspx#3)] -->
 [!code-aspx-vb[System.Web.DynamicData.MetaModel#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/GetTable.aspx#3)] --> 
  
 [!code-csharp[System.Web.DynamicData.MetaModel#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/GetTable.aspx.cs#4)]
 [!code-vb[System.Web.DynamicData.MetaModel#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/gettable.aspx.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.DynamicData.MetaTable" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTable">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaTable GetTable (string uniqueTableName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.DynamicData.MetaTable GetTable(string uniqueTableName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.GetTable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTable (uniqueTableName As String) As MetaTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::DynamicData::MetaTable ^ GetTable(System::String ^ uniqueTableName);" />
      <MemberSignature Language="F#" Value="member this.GetTable : string -&gt; System.Web.DynamicData.MetaTable" Usage="metaModel.GetTable uniqueTableName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueTableName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueTableName"><span data-ttu-id="69666-183">データ モデルのテーブルを識別する名前。</span><span class="sxs-lookup"><span data-stu-id="69666-183">The name that identifies the table in the data model.</span></span></param>
        <summary><span data-ttu-id="69666-184">指定されたテーブルに関連付けられたメタデータを返します。</span><span class="sxs-lookup"><span data-stu-id="69666-184">Returns the metadata that is associated with the specified table.</span></span></summary>
        <returns><span data-ttu-id="69666-185">指定されたテーブルを表すメタデータ。</span><span class="sxs-lookup"><span data-stu-id="69666-185">The metadata that describes the specified table.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-186">この名前は、データモデル内のテーブルを一意に識別するものであり、ルーティング用に関連する URL を生成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="69666-186">The name uniquely identifies a table in the data model and is used to generate the related URL for routing.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="69666-187">次の例では、<xref:System.Web.DynamicData.MetaModel.GetTable%28System.String%29> メソッドを使用して、指定されたテーブルのメタデータを取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="69666-187">The following example shows how to use the <xref:System.Web.DynamicData.MetaModel.GetTable%28System.String%29> method to obtain the metadata for the specified table.</span></span> <span data-ttu-id="69666-188">コード例全体については、「<xref:System.Web.DynamicData.MetaModel.GetTable%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="69666-188">For a complete example, see <xref:System.Web.DynamicData.MetaModel.GetTable%2A>.</span></span>  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#42](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/GetTable.aspx.cs#42)]
 [!code-vb[System.Web.DynamicData.MetaModel#42](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/gettable.aspx.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="69666-189">データ モデルに名前が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="69666-189">The name was not found in the data model.</span></span></exception>
        <altmember cref="T:System.Web.DynamicData.MetaTable" />
      </Docs>
    </Member>
    <Member MemberName="GetTable">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaTable GetTable (Type entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.DynamicData.MetaTable GetTable(class System.Type entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.GetTable(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTable (entityType As Type) As MetaTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::DynamicData::MetaTable ^ GetTable(Type ^ entityType);" />
      <MemberSignature Language="F#" Value="member this.GetTable : Type -&gt; System.Web.DynamicData.MetaTable" Usage="metaModel.GetTable entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="entityType"><span data-ttu-id="69666-190">データ モデルのテーブルを識別する型。</span><span class="sxs-lookup"><span data-stu-id="69666-190">The type that identifies the table in the data model.</span></span></param>
        <summary><span data-ttu-id="69666-191">指定されたテーブルを表すメタデータを返します。</span><span class="sxs-lookup"><span data-stu-id="69666-191">Returns the metadata that describes the specified table.</span></span></summary>
        <returns><span data-ttu-id="69666-192">指定されたテーブルを表すメタデータ。</span><span class="sxs-lookup"><span data-stu-id="69666-192">The metadata that describes the specified table.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="69666-193">次の例では、<xref:System.Web.DynamicData.MetaModel.GetTable%28System.Type%29> メソッドを使用して、指定されたテーブルのメタデータを取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="69666-193">The following example shows how to use the <xref:System.Web.DynamicData.MetaModel.GetTable%28System.Type%29> method to obtain the metadata for the specified table.</span></span> <span data-ttu-id="69666-194">コード例全体については、「<xref:System.Web.DynamicData.MetaModel.GetTable%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="69666-194">For a complete example, see <xref:System.Web.DynamicData.MetaModel.GetTable%2A>.</span></span>  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#41](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/GetTable.aspx.cs#41)]
 [!code-vb[System.Web.DynamicData.MetaModel#41](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/gettable.aspx.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="69666-195">データ モデルに型が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="69666-195">The type was not found in the data model.</span></span></exception>
        <altmember cref="T:System.Web.DynamicData.MetaTable" />
      </Docs>
    </Member>
    <Member MemberName="GetTable">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaTable GetTable (string tableName, Type contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.DynamicData.MetaTable GetTable(string tableName, class System.Type contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.GetTable(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTable (tableName As String, contextType As Type) As MetaTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::DynamicData::MetaTable ^ GetTable(System::String ^ tableName, Type ^ contextType);" />
      <MemberSignature Language="F#" Value="member this.GetTable : string * Type -&gt; System.Web.DynamicData.MetaTable" Usage="metaModel.GetTable (tableName, contextType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableName" Type="System.String" />
        <Parameter Name="contextType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="tableName"><span data-ttu-id="69666-196">テーブルの名前。</span><span class="sxs-lookup"><span data-stu-id="69666-196">The name of the table.</span></span></param>
        <param name="contextType"><span data-ttu-id="69666-197">テーブルの検索の対象となるデータ コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="69666-197">The data context to search for the table.</span></span></param>
        <summary><span data-ttu-id="69666-198">指定されたテーブルを表すメタデータを返します。</span><span class="sxs-lookup"><span data-stu-id="69666-198">Returns the metadata that describes the specified table.</span></span></summary>
        <returns><span data-ttu-id="69666-199">指定されたテーブルを表すメタデータ。</span><span class="sxs-lookup"><span data-stu-id="69666-199">The metadata that describes the specified table.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="69666-200">次の例では、<xref:System.Web.DynamicData.MetaModel.GetTable%28System.String%2CSystem.Type%29> メソッドを使用して、指定されたテーブルのメタデータを取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="69666-200">The following example shows how to use the <xref:System.Web.DynamicData.MetaModel.GetTable%28System.String%2CSystem.Type%29> method to obtain the metadata for the specified table.</span></span> <span data-ttu-id="69666-201">コード例全体については、「<xref:System.Web.DynamicData.MetaModel.GetTable%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="69666-201">For a complete example, see <xref:System.Web.DynamicData.MetaModel.GetTable%2A>.</span></span>  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#43](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/GetTable.aspx.cs#43)]
 [!code-vb[System.Web.DynamicData.MetaModel#43](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/gettable.aspx.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="69666-202"><paramref name="tablename" /> または <paramref name="contextType" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="69666-202"><paramref name="tablename" /> or <paramref name="contextType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="69666-203">コンテキストが登録されていないか、データ コンテキストにテーブルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="69666-203">The context is not registered or the table does not exist in the data context.</span></span></exception>
        <altmember cref="T:System.Web.DynamicData.MetaTable" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterContext">
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="69666-204">データ コンテキストを登録します。</span><span class="sxs-lookup"><span data-stu-id="69666-204">Registers the data context.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-205"><xref:System.Web.DynamicData.ContextConfiguration> クラスのプロパティを使用して、データコンテキストの初期化情報を定義できます。</span><span class="sxs-lookup"><span data-stu-id="69666-205">You can define data-context initialization information by using the properties of the <xref:System.Web.DynamicData.ContextConfiguration> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public void RegisterContext (Func&lt;object&gt; contextFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterContext(class System.Func`1&lt;object&gt; contextFactory) cil managed" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.RegisterContext(System.Func{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterContext (contextFactory As Func(Of Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterContext(Func&lt;System::Object ^&gt; ^ contextFactory);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.RegisterContext : Func&lt;obj&gt; -&gt; unit" Usage="metaModel.RegisterContext contextFactory" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Func`1&lt;object&gt; contextFactory) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterContext(Func&lt;System::Object ^&gt; ^ contextFactory);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member RegisterContext : Func&lt;obj&gt; -&gt; unit&#xA;override this.RegisterContext : Func&lt;obj&gt; -&gt; unit" Usage="metaModel.RegisterContext contextFactory" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IMetaModel.RegisterContext(System.Func{System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextFactory" Type="System.Func&lt;System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="contextFactory"><span data-ttu-id="69666-206">データ コンテキストのインスタンス化に使用するファクトリ。</span><span class="sxs-lookup"><span data-stu-id="69666-206">The factory for instantiating the data context.</span></span></param>
        <summary><span data-ttu-id="69666-207">コンテキスト ファクトリで指定されるデータ コンテキストを登録します。</span><span class="sxs-lookup"><span data-stu-id="69666-207">Registers the data context that is specified by a context factory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-208">このメソッドは、<xref:System.Web.DynamicData.ContextConfiguration> クラスによって定義された既定のコンテキスト情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="69666-208">This method uses the default context information that is defined by the <xref:System.Web.DynamicData.ContextConfiguration> class.</span></span> <span data-ttu-id="69666-209">これにより、独自のコンストラクターを使用してデータコンテキストをインスタンス化できます。</span><span class="sxs-lookup"><span data-stu-id="69666-209">It enables you to instantiate the data context by using your own constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public void RegisterContext (Type contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterContext(class System.Type contextType) cil managed" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.RegisterContext(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterContext (contextType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterContext(Type ^ contextType);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.RegisterContext : Type -&gt; unit" Usage="metaModel.RegisterContext contextType" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Type contextType) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterContext(Type ^ contextType);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member RegisterContext : Type -&gt; unit&#xA;override this.RegisterContext : Type -&gt; unit" Usage="metaModel.RegisterContext contextType" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IMetaModel.RegisterContext(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="contextType"><span data-ttu-id="69666-210">データ モデルに定義されているデータ コンテキストの型。</span><span class="sxs-lookup"><span data-stu-id="69666-210">The type of the data context as defined in the data model.</span></span></param>
        <summary><span data-ttu-id="69666-211">データ コンテキストのインスタンスを登録します。</span><span class="sxs-lookup"><span data-stu-id="69666-211">Registers a data-context instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-212">このメソッドは、<xref:System.Web.DynamicData.ContextConfiguration> クラスで定義されている既定のコンテキスト情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="69666-212">This method uses the default context information as defined by the <xref:System.Web.DynamicData.ContextConfiguration> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public void RegisterContext (System.Web.DynamicData.ModelProviders.DataModelProvider dataModelProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterContext(class System.Web.DynamicData.ModelProviders.DataModelProvider dataModelProvider) cil managed" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.RegisterContext(System.Web.DynamicData.ModelProviders.DataModelProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterContext(System::Web::DynamicData::ModelProviders::DataModelProvider ^ dataModelProvider);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.RegisterContext : System.Web.DynamicData.ModelProviders.DataModelProvider -&gt; unit" Usage="metaModel.RegisterContext dataModelProvider" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Web.DynamicData.ModelProviders.DataModelProvider dataModelProvider) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterContext(System::Web::DynamicData::ModelProviders::DataModelProvider ^ dataModelProvider);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member RegisterContext : System.Web.DynamicData.ModelProviders.DataModelProvider -&gt; unit&#xA;override this.RegisterContext : System.Web.DynamicData.ModelProviders.DataModelProvider -&gt; unit" Usage="metaModel.RegisterContext dataModelProvider" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IMetaModel.RegisterContext(System.Web.DynamicData.ModelProviders.DataModelProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataModelProvider" Type="System.Web.DynamicData.ModelProviders.DataModelProvider" />
      </Parameters>
      <Docs>
        <param name="dataModelProvider"><span data-ttu-id="69666-213">データ モデルのプロバイダー。</span><span class="sxs-lookup"><span data-stu-id="69666-213">A provider for the data model.</span></span></param>
        <summary><span data-ttu-id="69666-214">データ モデル プロバイダーを使用してデータ コンテキスト インスタンスを登録します。</span><span class="sxs-lookup"><span data-stu-id="69666-214">Registers a data context instance by using a data-model provider.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public void RegisterContext (Func&lt;object&gt; contextFactory, System.Web.DynamicData.ContextConfiguration configuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterContext(class System.Func`1&lt;object&gt; contextFactory, class System.Web.DynamicData.ContextConfiguration configuration) cil managed" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.RegisterContext(System.Func{System.Object},System.Web.DynamicData.ContextConfiguration)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterContext (contextFactory As Func(Of Object), configuration As ContextConfiguration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterContext(Func&lt;System::Object ^&gt; ^ contextFactory, System::Web::DynamicData::ContextConfiguration ^ configuration);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.RegisterContext : Func&lt;obj&gt; * System.Web.DynamicData.ContextConfiguration -&gt; unit" Usage="metaModel.RegisterContext (contextFactory, configuration)" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Func`1&lt;object&gt; contextFactory, class System.Web.DynamicData.ContextConfiguration configuration) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterContext(Func&lt;System::Object ^&gt; ^ contextFactory, System::Web::DynamicData::ContextConfiguration ^ configuration);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member RegisterContext : Func&lt;obj&gt; * System.Web.DynamicData.ContextConfiguration -&gt; unit&#xA;override this.RegisterContext : Func&lt;obj&gt; * System.Web.DynamicData.ContextConfiguration -&gt; unit" Usage="metaModel.RegisterContext (contextFactory, configuration)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IMetaModel.RegisterContext(System.Func{System.Object},System.Web.DynamicData.ContextConfiguration)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextFactory" Type="System.Func&lt;System.Object&gt;" />
        <Parameter Name="configuration" Type="System.Web.DynamicData.ContextConfiguration" />
      </Parameters>
      <Docs>
        <param name="contextFactory"><span data-ttu-id="69666-215">データ モデル コンテキストのインスタンス化に使用するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="69666-215">A delegate that is used to instantiate the data model context.</span></span></param>
        <param name="configuration"><span data-ttu-id="69666-216"><see cref="T:System.Web.DynamicData.ContextConfiguration" /> クラスで定義されるコンテキスト情報。</span><span class="sxs-lookup"><span data-stu-id="69666-216">The context information as defined by the <see cref="T:System.Web.DynamicData.ContextConfiguration" /> class.</span></span></param>
        <summary><span data-ttu-id="69666-217">指定されたコンテキスト構成を使用し、カスタム コンストラクターを有効にして、データ コンテキスト インスタンスを登録します。</span><span class="sxs-lookup"><span data-stu-id="69666-217">Registers a data-context instance by using the specified context configuration and by enabling a custom constructor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-218">このメソッドのコンテキストファクトリを使用すると、カスタムコンストラクターを使用してデータモデルコンテキストをインスタンス化できます。</span><span class="sxs-lookup"><span data-stu-id="69666-218">The context factory in this method enables you to instantiate a data model context by using a custom constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="69666-219"><paramref name="contextFactory" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="69666-219"><paramref name="contextFactory" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="69666-220"><paramref name="contextType" /> でインスタンス化された <paramref name="contextFactory" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="69666-220">The <paramref name="contextType" /> that is instantiated by <paramref name="contextFactory" /> is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public void RegisterContext (Type contextType, System.Web.DynamicData.ContextConfiguration configuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterContext(class System.Type contextType, class System.Web.DynamicData.ContextConfiguration configuration) cil managed" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.RegisterContext(System.Type,System.Web.DynamicData.ContextConfiguration)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterContext (contextType As Type, configuration As ContextConfiguration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterContext(Type ^ contextType, System::Web::DynamicData::ContextConfiguration ^ configuration);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.RegisterContext : Type * System.Web.DynamicData.ContextConfiguration -&gt; unit" Usage="metaModel.RegisterContext (contextType, configuration)" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Type contextType, class System.Web.DynamicData.ContextConfiguration configuration) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterContext(Type ^ contextType, System::Web::DynamicData::ContextConfiguration ^ configuration);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member RegisterContext : Type * System.Web.DynamicData.ContextConfiguration -&gt; unit&#xA;override this.RegisterContext : Type * System.Web.DynamicData.ContextConfiguration -&gt; unit" Usage="metaModel.RegisterContext (contextType, configuration)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IMetaModel.RegisterContext(System.Type,System.Web.DynamicData.ContextConfiguration)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextType" Type="System.Type" />
        <Parameter Name="configuration" Type="System.Web.DynamicData.ContextConfiguration" />
      </Parameters>
      <Docs>
        <param name="contextType"><span data-ttu-id="69666-221">データ モデルに定義されているデータ コンテキストの型。</span><span class="sxs-lookup"><span data-stu-id="69666-221">The type of the data context as defined in the data model.</span></span></param>
        <param name="configuration"><span data-ttu-id="69666-222"><see cref="T:System.Web.DynamicData.ContextConfiguration" /> クラスで定義される、コンテキストの構成情報。</span><span class="sxs-lookup"><span data-stu-id="69666-222">The configuration information for the context, as defined by the <see cref="T:System.Web.DynamicData.ContextConfiguration" /> class.</span></span></param>
        <summary><span data-ttu-id="69666-223">指定されたコンテキスト構成を使用してデータ コンテキスト インスタンスを登録します。</span><span class="sxs-lookup"><span data-stu-id="69666-223">Registers a data-context instance by using the specified context configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="69666-224">次の例では、`configuration` パラメーターによって指定されたように、<xref:System.Web.DynamicData.MetaModel.RegisterContext%28System.Type%2CSystem.Web.DynamicData.ContextConfiguration%29> メソッドを使用して、スキャフォールディングが有効になっているデータコンテキストを登録する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="69666-224">The following example shows how to use the <xref:System.Web.DynamicData.MetaModel.RegisterContext%28System.Type%2CSystem.Web.DynamicData.ContextConfiguration%29> method to register a data context with scaffolding enabled, as specified by the `configuration` parameter.</span></span>  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#99](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/global.asax.cs#99)]
 [!code-vb[System.Web.DynamicData.MetaModel#99](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/global.asax.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="69666-225"><paramref name="contextType" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="69666-225"><paramref name="contextType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public void RegisterContext (System.Web.DynamicData.ModelProviders.DataModelProvider dataModelProvider, System.Web.DynamicData.ContextConfiguration configuration);" FrameworkAlternate="netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterContext(class System.Web.DynamicData.ModelProviders.DataModelProvider dataModelProvider, class System.Web.DynamicData.ContextConfiguration configuration) cil managed" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.RegisterContext(System.Web.DynamicData.ModelProviders.DataModelProvider,System.Web.DynamicData.ContextConfiguration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterContext(System::Web::DynamicData::ModelProviders::DataModelProvider ^ dataModelProvider, System::Web::DynamicData::ContextConfiguration ^ configuration);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.RegisterContext : System.Web.DynamicData.ModelProviders.DataModelProvider * System.Web.DynamicData.ContextConfiguration -&gt; unit" Usage="metaModel.RegisterContext (dataModelProvider, configuration)" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Web.DynamicData.ModelProviders.DataModelProvider dataModelProvider, class System.Web.DynamicData.ContextConfiguration configuration) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterContext(System::Web::DynamicData::ModelProviders::DataModelProvider ^ dataModelProvider, System::Web::DynamicData::ContextConfiguration ^ configuration);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member RegisterContext : System.Web.DynamicData.ModelProviders.DataModelProvider * System.Web.DynamicData.ContextConfiguration -&gt; unit&#xA;override this.RegisterContext : System.Web.DynamicData.ModelProviders.DataModelProvider * System.Web.DynamicData.ContextConfiguration -&gt; unit" Usage="metaModel.RegisterContext (dataModelProvider, configuration)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public virtual void RegisterContext (System.Web.DynamicData.ModelProviders.DataModelProvider dataModelProvider, System.Web.DynamicData.ContextConfiguration configuration);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IMetaModel.RegisterContext(System.Web.DynamicData.ModelProviders.DataModelProvider,System.Web.DynamicData.ContextConfiguration)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataModelProvider" Type="System.Web.DynamicData.ModelProviders.DataModelProvider" />
        <Parameter Name="configuration" Type="System.Web.DynamicData.ContextConfiguration" />
      </Parameters>
      <Docs>
        <param name="dataModelProvider"><span data-ttu-id="69666-226">データ モデルのプロバイダー。</span><span class="sxs-lookup"><span data-stu-id="69666-226">A provider for the data model.</span></span></param>
        <param name="configuration"><span data-ttu-id="69666-227"><see cref="T:System.Web.DynamicData.ContextConfiguration" /> クラスで定義されるコンテキスト情報。</span><span class="sxs-lookup"><span data-stu-id="69666-227">The context information as defined by the <see cref="T:System.Web.DynamicData.ContextConfiguration" /> class.</span></span></param>
        <summary><span data-ttu-id="69666-228">指定されたコンテキスト構成を使用し、データ モデル プロバイダーを有効にして、データ コンテキスト インスタンスを登録します。</span><span class="sxs-lookup"><span data-stu-id="69666-228">Registers a data-context instance by using the specified context configuration and by enabling a data-model provider.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="69666-229"><paramref name="dataModelProvider" /> または <paramref name="configuration" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="69666-229"><paramref name="dataModelProvider" /> or <paramref name="configuration" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="69666-230"><paramref name="contextType" /> は既に登録されています。</span><span class="sxs-lookup"><span data-stu-id="69666-230"><paramref name="contextType" /> is already registered.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ResetRegistrationException">
      <MemberSignature Language="C#" Value="public static void ResetRegistrationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetRegistrationException() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.ResetRegistrationException" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ResetRegistrationException ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ResetRegistrationException();" />
      <MemberSignature Language="F#" Value="static member ResetRegistrationException : unit -&gt; unit" Usage="System.Web.DynamicData.MetaModel.ResetRegistrationException " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="69666-231">以前に発生したコンテキスト登録エラーをリセットします。</span><span class="sxs-lookup"><span data-stu-id="69666-231">Resets any previous context registration error that might have occurred.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-232">データコンテキストの登録中にエラーが発生すると、その例外はキャッシュされ、後続のすべての操作でスローされます。</span><span class="sxs-lookup"><span data-stu-id="69666-232">When an error occurs during data-context registration, the exception is cached and thrown on all subsequent operations.</span></span> <span data-ttu-id="69666-233">たとえば、アプリケーションの起動時にエラーが発生した場合、すべての要求に対してエラーがスローされます。</span><span class="sxs-lookup"><span data-stu-id="69666-233">For example, if an error occurs at application start, it is thrown on every request.</span></span> <span data-ttu-id="69666-234">このメソッドを呼び出して、エラーをクリアし、新しいコンテキスト登録を実行できるようにします。</span><span class="sxs-lookup"><span data-stu-id="69666-234">Call this method to clear the error and to enable a new context registration to be performed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tables">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.DynamicData.MetaTable&gt; Tables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.DynamicData.MetaTable&gt; Tables" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.MetaModel.Tables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tables As ReadOnlyCollection(Of MetaTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::DynamicData::MetaTable ^&gt; ^ Tables { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::DynamicData::MetaTable ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Tables : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.DynamicData.MetaTable&gt;" Usage="System.Web.DynamicData.MetaModel.Tables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.DynamicData.MetaTable&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="69666-235">データ モデルの一部を構成するすべてのテーブルのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="69666-235">Gets a collection of all the tables that are part of the data model.</span></span></summary>
        <value><span data-ttu-id="69666-236">データ モデルに属するすべてのテーブルを格納しているコレクション。</span><span class="sxs-lookup"><span data-stu-id="69666-236">A collection that contains the tables that belong to the data model.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-237">コレクションには、データモデル内のすべてのテーブルが含まれています。このテーブルには、表示されないテーブル (動的データスキャフォールディングの一部ではありません) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="69666-237">The collection contains all the tables in the data model, which includes the tables that are not visible (are not part of Dynamic Data scaffolding).</span></span>  
  
 <span data-ttu-id="69666-238">この機能のオンラインの例を[実行](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.MetaModel&spage=TablesMenu.aspx)します。</span><span class="sxs-lookup"><span data-stu-id="69666-238">[Run](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.MetaModel&spage=TablesMenu.aspx) an online example of this feature.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="69666-239">次の例は、<xref:System.Web.DynamicData.MetaModel.Tables%2A> と <xref:System.Web.DynamicData.MetaModel.VisibleTables%2A> の各プロパティを使用して、次のタスクを実行する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="69666-239">The following example shows how to use the <xref:System.Web.DynamicData.MetaModel.Tables%2A> and <xref:System.Web.DynamicData.MetaModel.VisibleTables%2A> properties to perform the following tasks:</span></span>  
  
-   <span data-ttu-id="69666-240">データモデル内のすべてのテーブルのコレクションを取得し、それらを `GridView` コントロールに表示します。</span><span class="sxs-lookup"><span data-stu-id="69666-240">Get a collection of all the tables in a data model and show them in a `GridView` control.</span></span>  
  
-   <span data-ttu-id="69666-241">データモデル内の表示可能なテーブルのコレクションを取得し、それらを `GridView` コントロールに表示します。</span><span class="sxs-lookup"><span data-stu-id="69666-241">Get a collection of the visible tables in a data model and show them in a `GridView` control.</span></span>  
  
 <span data-ttu-id="69666-242">この例は、ページとその分離コードファイルで構成されています。</span><span class="sxs-lookup"><span data-stu-id="69666-242">The example consists of a page and its code-behind file.</span></span>  
  
 [!code-aspx-csharp[System.Web.DynamicData.MetaModel#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/TablesMenu.aspx#5)]
 [!code-aspx-vb[System.Web.DynamicData.MetaModel#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/TablesMenu.aspx#5)]  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/TablesMenu.aspx.cs#6)]
 [!code-vb[System.Web.DynamicData.MetaModel#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/TablesMenu.aspx.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryGetTable">
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="69666-243">指定されたテーブルに関連付けられたメタデータの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="69666-243">Attempts to get the metadata that is associated with the specified table.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryGetTable">
      <MemberSignature Language="C#" Value="public bool TryGetTable (string uniqueTableName, out System.Web.DynamicData.MetaTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetTable(string uniqueTableName, [out] class System.Web.DynamicData.MetaTable&amp; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.TryGetTable(System.String,System.Web.DynamicData.MetaTable@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetTable (uniqueTableName As String, ByRef table As MetaTable) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetTable(System::String ^ uniqueTableName, [Runtime::InteropServices::Out] System::Web::DynamicData::MetaTable ^ % table);" />
      <MemberSignature Language="F#" Value="member this.TryGetTable : string * MetaTable -&gt; bool" Usage="metaModel.TryGetTable (uniqueTableName, table)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueTableName" Type="System.String" />
        <Parameter Name="table" Type="System.Web.DynamicData.MetaTable" RefType="out" />
      </Parameters>
      <Docs>
        <param name="uniqueTableName"><span data-ttu-id="69666-244">テーブルを一意に識別する名前。</span><span class="sxs-lookup"><span data-stu-id="69666-244">The name that uniquely identifies the table.</span></span></param>
        <param name="table"><span data-ttu-id="69666-245">このメソッドから制御が戻るときに、要求されたテーブルが見つかった場合は、そのテーブルのメタデータが格納されます。</span><span class="sxs-lookup"><span data-stu-id="69666-245">When this method returns, and if it has found the requested table, contains the metadata for that table.</span></span> <span data-ttu-id="69666-246">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="69666-246">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="69666-247">指定されたテーブルに関連付けられたメタデータの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="69666-247">Attempts to get the metadata that is associated with the specified table.</span></span></summary>
        <returns><span data-ttu-id="69666-248">テーブルのメタデータが見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="69666-248"><see langword="true" /> if the table metadata is found; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-249">このメソッドは、指定されたテーブルに関連付けられているメタデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="69666-249">This method gets the metadata that is associated with the specified table.</span></span> <span data-ttu-id="69666-250">テーブルが見つからない場合、このメソッドは `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="69666-250">If the table is not found, this method returns `false`.</span></span> <span data-ttu-id="69666-251">これは、テーブルが見つからない場合に例外をスローする <xref:System.Web.DynamicData.MetaModel.GetTable%2A> メソッドとは異なります。</span><span class="sxs-lookup"><span data-stu-id="69666-251">This differs from the <xref:System.Web.DynamicData.MetaModel.GetTable%2A> method, which throws an exception if the table is not found.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="69666-252"><paramref name="uniqueTableName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="69666-252"><paramref name="uniqueTableName" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetTable">
      <MemberSignature Language="C#" Value="public bool TryGetTable (Type entityType, out System.Web.DynamicData.MetaTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetTable(class System.Type entityType, [out] class System.Web.DynamicData.MetaTable&amp; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.TryGetTable(System.Type,System.Web.DynamicData.MetaTable@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetTable (entityType As Type, ByRef table As MetaTable) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetTable(Type ^ entityType, [Runtime::InteropServices::Out] System::Web::DynamicData::MetaTable ^ % table);" />
      <MemberSignature Language="F#" Value="member this.TryGetTable : Type * MetaTable -&gt; bool" Usage="metaModel.TryGetTable (entityType, table)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="table" Type="System.Web.DynamicData.MetaTable" RefType="out" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="entityType"><span data-ttu-id="69666-253">テーブルの型。</span><span class="sxs-lookup"><span data-stu-id="69666-253">The table type.</span></span></param>
        <param name="table"><span data-ttu-id="69666-254">このメソッドから制御が戻るときに、要求されたテーブルが見つかった場合は、指定されたテーブルのメタデータが格納されます。</span><span class="sxs-lookup"><span data-stu-id="69666-254">When this method returns, and if the requested table has been found, contains the metadata for the specified table.</span></span> <span data-ttu-id="69666-255">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="69666-255">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="69666-256">指定されたテーブルに関連付けられたメタデータの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="69666-256">Attempts to get the metadata that is associated with the specified table.</span></span></summary>
        <returns><span data-ttu-id="69666-257">テーブル メタデータが見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="69666-257"><see langword="true" /> if the table metadata is found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69666-258">このメソッドは、指定されたテーブルに関連付けられているメタデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="69666-258">This method gets the metadata that is associated with the specified table.</span></span> <span data-ttu-id="69666-259">テーブルが見つからない場合、このメソッドは `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="69666-259">If the table is not found, this method returns `false`.</span></span> <span data-ttu-id="69666-260">これは、テーブルが見つからない場合に例外をスローする <xref:System.Web.DynamicData.MetaModel.GetTable%2A> メソッドとは異なります。</span><span class="sxs-lookup"><span data-stu-id="69666-260">This differs from the <xref:System.Web.DynamicData.MetaModel.GetTable%2A> method, which throws an exception if the table is not found.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="69666-261"><paramref name="entityType" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="69666-261"><paramref name="entityType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VisibleTables">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;System.Web.DynamicData.MetaTable&gt; VisibleTables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;class System.Web.DynamicData.MetaTable&gt; VisibleTables" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.MetaModel.VisibleTables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisibleTables As List(Of MetaTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::List&lt;System::Web::DynamicData::MetaTable ^&gt; ^ VisibleTables { System::Collections::Generic::List&lt;System::Web::DynamicData::MetaTable ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.VisibleTables : System.Collections.Generic.List&lt;System.Web.DynamicData.MetaTable&gt;" Usage="System.Web.DynamicData.MetaModel.VisibleTables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.Web.DynamicData.MetaTable&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="69666-262">データ モデルの可視テーブルのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="69666-262">Gets a collection of the visible tables in the data model.</span></span></summary>
        <value><span data-ttu-id="69666-263">可視テーブルとは、スキャフォールディングが有効なテーブルを指します。</span><span class="sxs-lookup"><span data-stu-id="69666-263">A visible table refers to a table that has scaffolding enabled.</span></span> <span data-ttu-id="69666-264">つまり、List.aspx ページが存在するテーブルです。</span><span class="sxs-lookup"><span data-stu-id="69666-264">This means that it is a table for which a List.aspx page exists.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="69666-265">次の例では、<xref:System.Web.DynamicData.MetaModel.VisibleTables%2A> プロパティを使用して、データモデル内の表示可能なテーブルのコレクションを取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="69666-265">The following example shows how to use the <xref:System.Web.DynamicData.MetaModel.VisibleTables%2A> property to get a collection of the visible tables in the data model.</span></span> <span data-ttu-id="69666-266">完全な例については、「<xref:System.Web.DynamicData.MetaModel> クラスの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="69666-266">For a complete example, see the <xref:System.Web.DynamicData.MetaModel> class overview.</span></span>  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#62](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/TablesMenu.aspx.cs#62)]
 [!code-vb[System.Web.DynamicData.MetaModel#62](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/TablesMenu.aspx.vb#62)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
