<Type Name="ListDictionary" FullName="System.Collections.Specialized.ListDictionary">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a5778b2bf91f11189e882f59e62156287bfd63b2" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82494890" /></Metadata><TypeSignature Language="C#" Value="public class ListDictionary : System.Collections.IDictionary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListDictionary extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Specialized.ListDictionary" />
  <TypeSignature Language="VB.NET" Value="Public Class ListDictionary&#xA;Implements IDictionary" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListDictionary : System::Collections::IDictionary" />
  <TypeSignature Language="F#" Value="type ListDictionary = class&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface IDictionary" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ListDictionary extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type ListDictionary = class&#xA;    interface IDictionary&#xA;    interface ICollection&#xA;    interface IEnumerable" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Specialized</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a6623-101">シングルリンク リストを使用して <see langword="IDictionary" /> を実装します。</span><span class="sxs-lookup"><span data-stu-id="a6623-101">Implements <see langword="IDictionary" /> using a singly linked list.</span></span> <span data-ttu-id="a6623-102">おおむね 10 個未満の項目を格納するコレクションでの使用をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a6623-102">Recommended for collections that typically include fewer than 10 items.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-103">これは、単一のリンクリストを使用した <xref:System.Collections.IDictionary> の単純な実装です。</span><span class="sxs-lookup"><span data-stu-id="a6623-103">This is a simple implementation of <xref:System.Collections.IDictionary> using a singly linked list.</span></span> <span data-ttu-id="a6623-104">要素の数が10以下の場合は、<xref:System.Collections.Hashtable> よりもサイズが小さく、高速になります。</span><span class="sxs-lookup"><span data-stu-id="a6623-104">It is smaller and faster than a <xref:System.Collections.Hashtable> if the number of elements is 10 or less.</span></span> <span data-ttu-id="a6623-105">多数の要素に対してパフォーマンスが重要な場合は、この値を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="a6623-105">This should not be used if performance is important for large numbers of elements.</span></span>  
  
 <span data-ttu-id="a6623-106"><xref:System.Collections.Specialized.ListDictionary> 内の項目は保証された順序ではありません。コードは現在の順序に依存しないようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="a6623-106">Items in a <xref:System.Collections.Specialized.ListDictionary> are not in any guaranteed order; code should not depend on the current order.</span></span> <span data-ttu-id="a6623-107"><xref:System.Collections.Specialized.ListDictionary> は、キーを高速に取得するために実装されています。実際の項目の内部順序は実装に依存しており、製品の将来のバージョンで変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a6623-107">The <xref:System.Collections.Specialized.ListDictionary> is implemented for fast keyed retrieval; the actual internal order of items is implementation-dependent and could change in future versions of the product.</span></span>  
  
 <span data-ttu-id="a6623-108"><xref:System.Collections.Specialized.ListDictionary.Item%2A>、<xref:System.Collections.Specialized.ListDictionary.Add%2A>、<xref:System.Collections.Specialized.ListDictionary.Remove%2A>、<xref:System.Collections.Specialized.ListDictionary.Contains%2A> などのメンバーは O (`n`) 操作であり、`n` は <xref:System.Collections.Specialized.ListDictionary.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="a6623-108">Members, such as <xref:System.Collections.Specialized.ListDictionary.Item%2A>, <xref:System.Collections.Specialized.ListDictionary.Add%2A>, <xref:System.Collections.Specialized.ListDictionary.Remove%2A>, and <xref:System.Collections.Specialized.ListDictionary.Contains%2A> are O(`n`) operations, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
 <span data-ttu-id="a6623-109">キーを `null`することはできませんが、値を指定することはできます。</span><span class="sxs-lookup"><span data-stu-id="a6623-109">A key cannot be `null`, but a value can.</span></span>  
  
 <span data-ttu-id="a6623-110">C#言語の `foreach` ステートメント (Visual Basic で`for each`) は、コレクション内の要素の型のオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a6623-110">The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="a6623-111"><xref:System.Collections.Specialized.ListDictionary> の各要素はキーと値のペアであるため、要素型はキーの型でも、値の型でもありません。</span><span class="sxs-lookup"><span data-stu-id="a6623-111">Since each element of the <xref:System.Collections.Specialized.ListDictionary> is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="a6623-112">代わりに、要素の型は <xref:System.Collections.DictionaryEntry>になります。</span><span class="sxs-lookup"><span data-stu-id="a6623-112">Instead, the element type is <xref:System.Collections.DictionaryEntry>.</span></span> <span data-ttu-id="a6623-113">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="a6623-113">For example:</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#3)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#3)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#3)]  
  
 <span data-ttu-id="a6623-114">`foreach` ステートメントは、列挙子のラッパーであり、コレクションへの書き込みではなく読み取りのみが許可されます。</span><span class="sxs-lookup"><span data-stu-id="a6623-114">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6623-115">次のコード例は、<xref:System.Collections.Specialized.ListDictionary>のプロパティとメソッドのいくつかを示しています。</span><span class="sxs-lookup"><span data-stu-id="a6623-115">The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/listdictionary.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/listdictionary.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/listdictionary.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="a6623-116">パブリック静的 (Visual Basic では<see langword="Shared" />) なこの型のメンバーはスレッド セーフです</span><span class="sxs-lookup"><span data-stu-id="a6623-116">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="a6623-117">インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="a6623-117">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="a6623-118">この実装では、<see cref="T:System.Collections.Specialized.ListDictionary" />に対して同期された (スレッドセーフな) ラッパーは提供されませんが、派生クラスは <see cref="P:System.Collections.Specialized.ListDictionary.SyncRoot" /> プロパティを使用して、独自に同期されたバージョンの <see cref="T:System.Collections.Specialized.ListDictionary" /> を作成できます。</span><span class="sxs-lookup"><span data-stu-id="a6623-118">This implementation does not provide a synchronized (thread safe) wrapper for a <see cref="T:System.Collections.Specialized.ListDictionary" />, but derived classes can create their own synchronized versions of the <see cref="T:System.Collections.Specialized.ListDictionary" /> using the <see cref="P:System.Collections.Specialized.ListDictionary.SyncRoot" /> property.</span></span>  
  
<span data-ttu-id="a6623-119">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="a6623-119">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="a6623-120">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="a6623-120">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="a6623-121">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="a6623-121">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
    <altmember cref="T:System.Collections.IDictionary" />
    <altmember cref="T:System.Collections.Hashtable" />
    <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md"><span data-ttu-id="a6623-122">カルチャを認識しない文字列操作の実行</span><span class="sxs-lookup"><span data-stu-id="a6623-122">Performing Culture-Insensitive String Operations</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a6623-123"><see cref="T:System.Collections.Specialized.ListDictionary" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="a6623-123">Initializes a new instance of the <see cref="T:System.Collections.Specialized.ListDictionary" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListDictionary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListDictionary();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6623-124">既定の比較子を使用して空の <see cref="T:System.Collections.Specialized.ListDictionary" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="a6623-124">Creates an empty <see cref="T:System.Collections.Specialized.ListDictionary" /> using the default comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-125">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="a6623-125">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="a6623-126"><xref:System.Collections.Specialized.ListDictionary> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="a6623-126">Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique.</span></span> <span data-ttu-id="a6623-127">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="a6623-127">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="a6623-128">このコンストラクターは O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a6623-128">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6623-129">次のコード例は、<xref:System.Collections.Specialized.ListDictionary>のプロパティとメソッドのいくつかを示しています。</span><span class="sxs-lookup"><span data-stu-id="a6623-129">The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/listdictionary.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/listdictionary.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/listdictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md"><span data-ttu-id="a6623-130">カルチャを認識しない文字列操作の実行</span><span class="sxs-lookup"><span data-stu-id="a6623-130">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListDictionary (System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListDictionary(System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Specialized.ListDictionary : System.Collections.IComparer -&gt; System.Collections.Specialized.ListDictionary" Usage="new System.Collections.Specialized.ListDictionary comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="a6623-131">2 つのキーが等しいかどうかを判断するために使用する <see cref="T:System.Collections.IComparer" />。</span><span class="sxs-lookup"><span data-stu-id="a6623-131">The <see cref="T:System.Collections.IComparer" /> to use to determine whether two keys are equal.</span></span>  
  
<span data-ttu-id="a6623-132">- または -</span><span class="sxs-lookup"><span data-stu-id="a6623-132">-or-</span></span> 
 <span data-ttu-id="a6623-133">各キーの <see cref="M:System.Object.Equals(System.Object)" /> の実装である既定の比較子を使用する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a6623-133"><see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="a6623-134">指定した比較子を使用して空の <see cref="T:System.Collections.Specialized.ListDictionary" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="a6623-134">Creates an empty <see cref="T:System.Collections.Specialized.ListDictionary" /> using the specified comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-135">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="a6623-135">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="a6623-136"><xref:System.Collections.Specialized.ListDictionary> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="a6623-136">Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique.</span></span> <span data-ttu-id="a6623-137">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="a6623-137">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="a6623-138">カスタム比較子を使用すると、大文字と小文字を区別しない文字列で参照を実行するようなシナリオが可能になります。</span><span class="sxs-lookup"><span data-stu-id="a6623-138">The custom comparer enables such scenarios as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="a6623-139">このコンストラクターは O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a6623-139">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md"><span data-ttu-id="a6623-140">カルチャを認識しない文字列操作の実行</span><span class="sxs-lookup"><span data-stu-id="a6623-140">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Add : obj * obj -&gt; unit&#xA;override this.Add : obj * obj -&gt; unit" Usage="listDictionary.Add (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="a6623-141">追加するエントリのキー。</span><span class="sxs-lookup"><span data-stu-id="a6623-141">The key of the entry to add.</span></span></param>
        <param name="value"><span data-ttu-id="a6623-142">追加するエントリの値。</span><span class="sxs-lookup"><span data-stu-id="a6623-142">The value of the entry to add.</span></span> <span data-ttu-id="a6623-143">値として <see langword="null" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="a6623-143">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="a6623-144">指定したキーおよび値を持つエントリを <see cref="T:System.Collections.Specialized.ListDictionary" /> に追加します。</span><span class="sxs-lookup"><span data-stu-id="a6623-144">Adds an entry with the specified key and value into the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-145">その状態とそのハッシュコード値の間に相関関係がないオブジェクトは、通常、キーとして使用されません。</span><span class="sxs-lookup"><span data-stu-id="a6623-145">An object that has no correlation between its state and its hash code value should typically not be used as the key.</span></span> <span data-ttu-id="a6623-146">たとえば、文字列オブジェクトは、キーとして使用する StringBuilder オブジェクトよりも優れています。</span><span class="sxs-lookup"><span data-stu-id="a6623-146">For example, String objects are better than StringBuilder objects for use as keys.</span></span>  
  
 <span data-ttu-id="a6623-147">また、<xref:System.Collections.Specialized.ListDictionary.Item%2A> プロパティを使用して、<xref:System.Collections.Specialized.ListDictionary>に存在しないキーの値を設定することにより、新しい要素を追加することもできます。たとえば、`myCollection["myNonexistentKey"] = myValue`のようにします。</span><span class="sxs-lookup"><span data-stu-id="a6623-147">You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="a6623-148">ただし、指定したキーが既に <xref:System.Collections.Specialized.ListDictionary>に存在する場合は、<xref:System.Collections.Specialized.ListDictionary.Item%2A> プロパティを設定すると古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="a6623-148">However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="a6623-149">これに対し、<xref:System.Collections.Specialized.ListDictionary.Add%2A> メソッドでは、既存の要素は変更されません。</span><span class="sxs-lookup"><span data-stu-id="a6623-149">In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="a6623-150">このメソッドは O(`n`) 操作です。`n`は <xref:System.Collections.Specialized.ListDictionary.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="a6623-150">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6623-151">次のコード例では、<xref:System.Collections.Specialized.ListDictionary>にを追加し、要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="a6623-151">The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CPP/listdictionary_addremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CS/listdictionary_addremove.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/VB/listdictionary_addremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a6623-152"><paramref name="key" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="a6623-152"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a6623-153">同じキーを持つエントリが、<see cref="T:System.Collections.Specialized.ListDictionary" /> に既に存在します。</span><span class="sxs-lookup"><span data-stu-id="a6623-153">An entry with the same key already exists in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></exception>
        <altmember cref="M:System.Collections.Specialized.ListDictionary.Remove(System.Object)" />
        <altmember cref="P:System.Collections.Specialized.ListDictionary.Item(System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="listDictionary.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6623-154"><see cref="T:System.Collections.Specialized.ListDictionary" /> からすべてのエントリを削除します。</span><span class="sxs-lookup"><span data-stu-id="a6623-154">Removes all entries from the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-155"><xref:System.Collections.Specialized.ListDictionary.Count%2A> がゼロに設定され、コレクションの要素から他のオブジェクトへの参照も解放されます。</span><span class="sxs-lookup"><span data-stu-id="a6623-155"><xref:System.Collections.Specialized.ListDictionary.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="a6623-156">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a6623-156">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6623-157">次のコード例では、<xref:System.Collections.Specialized.ListDictionary>にを追加し、要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="a6623-157">The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CPP/listdictionary_addremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CS/listdictionary_addremove.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/VB/listdictionary_addremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.IDictionary.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool&#xA;override this.Contains : obj -&gt; bool" Usage="listDictionary.Contains key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="a6623-158"><see cref="T:System.Collections.Specialized.ListDictionary" /> 内で検索されるキー。</span><span class="sxs-lookup"><span data-stu-id="a6623-158">The key to locate in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></param>
        <summary><span data-ttu-id="a6623-159"><see cref="T:System.Collections.Specialized.ListDictionary" /> に特定のキーが格納されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="a6623-159">Determines whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> contains a specific key.</span></span></summary>
        <returns><span data-ttu-id="a6623-160">指定したキーを持つエントリが <see cref="T:System.Collections.Specialized.ListDictionary" /> に格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a6623-160"><see langword="true" /> if the <see cref="T:System.Collections.Specialized.ListDictionary" /> contains an entry with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-161">このメソッドは O(`n`) 操作です。`n`は <xref:System.Collections.Specialized.ListDictionary.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="a6623-161">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
 <span data-ttu-id="a6623-162">.NET Framework 2.0 以降では、このメソッドは `key` でコレクションのオブジェクトの <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> メソッドを使用して、`item` が存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="a6623-162">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `key` to determine whether `item` exists.</span></span> <span data-ttu-id="a6623-163">以前のバージョンの .NET Framework では、この決定は、コレクション内のオブジェクトの `item` パラメーターの <xref:System.Object.Equals%2A> メソッドと <xref:System.IComparable.CompareTo%2A> メソッドを使用して行われていました。</span><span class="sxs-lookup"><span data-stu-id="a6623-163">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6623-164">次のコード例では、<xref:System.Collections.Specialized.ListDictionary>内の要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="a6623-164">The following code example searches for an element in a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Contains#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Contains/CPP/listdictionary_contains.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Contains/CS/listdictionary_contains.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Contains/VB/listdictionary_contains.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a6623-165"><paramref name="key" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="a6623-165"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md"><span data-ttu-id="a6623-166">カルチャを認識しない文字列操作の実行</span><span class="sxs-lookup"><span data-stu-id="a6623-166">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="listDictionary.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="a6623-167"><see cref="T:System.Array" /> から <see cref="T:System.Collections.DictionaryEntry" /> オブジェクトがコピーされる 1 次元の <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="a6623-167">The one-dimensional <see cref="T:System.Array" /> that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span> <span data-ttu-id="a6623-168"><see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span><span class="sxs-lookup"><span data-stu-id="a6623-168">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="a6623-169">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</span><span class="sxs-lookup"><span data-stu-id="a6623-169">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="a6623-170">1 次元の <see cref="T:System.Array" /> インスタンスの指定したインデックスに <see cref="T:System.Collections.Specialized.ListDictionary" /> のエントリをコピーします。</span><span class="sxs-lookup"><span data-stu-id="a6623-170">Copies the <see cref="T:System.Collections.Specialized.ListDictionary" /> entries to a one-dimensional <see cref="T:System.Array" /> instance at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-171">要素は、列挙子が <xref:System.Collections.Specialized.ListDictionary>を反復処理するのと同じ順序で <xref:System.Array> にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="a6623-171">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 <span data-ttu-id="a6623-172"><xref:System.Collections.Specialized.ListDictionary>内のキーのみをコピーするには、`ListDictionary.Keys.CopyTo`を使用します。</span><span class="sxs-lookup"><span data-stu-id="a6623-172">To copy only the keys in the <xref:System.Collections.Specialized.ListDictionary>, use `ListDictionary.Keys.CopyTo`.</span></span>  
  
 <span data-ttu-id="a6623-173"><xref:System.Collections.Specialized.ListDictionary>内の値のみをコピーするには、`ListDictionary.Values.CopyTo`を使用します。</span><span class="sxs-lookup"><span data-stu-id="a6623-173">To copy only the values in the <xref:System.Collections.Specialized.ListDictionary>, use `ListDictionary.Values.CopyTo`.</span></span>  
  
 <span data-ttu-id="a6623-174">このメソッドは O(`n`) 操作です。`n`は <xref:System.Collections.Specialized.ListDictionary.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="a6623-174">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6623-175">次のコード例では、<xref:System.Collections.Specialized.ListDictionary> の要素を配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="a6623-175">The following code example copies the elements of a <xref:System.Collections.Specialized.ListDictionary> to an array.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_CopyTo/CPP/listdictionary_copyto.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_CopyTo/CS/listdictionary_copyto.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_CopyTo/VB/listdictionary_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a6623-176"><paramref name="array" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="a6623-176"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a6623-177"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="a6623-177"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a6623-178"><paramref name="array" /> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="a6623-178"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="a6623-179">- または -</span><span class="sxs-lookup"><span data-stu-id="a6623-179">-or-</span></span> 
<span data-ttu-id="a6623-180">コピー元の <see cref="T:System.Collections.Specialized.ListDictionary" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</span><span class="sxs-lookup"><span data-stu-id="a6623-180">The number of elements in the source <see cref="T:System.Collections.Specialized.ListDictionary" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="a6623-181">コピー元の <see cref="T:System.Collections.Specialized.ListDictionary" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</span><span class="sxs-lookup"><span data-stu-id="a6623-181">The type of the source <see cref="T:System.Collections.Specialized.ListDictionary" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="M:System.Collections.Specialized.ListDictionary.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Specialized.ListDictionary.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6623-182"><see cref="T:System.Collections.Specialized.ListDictionary" /> に格納されているキー/値ペアの数を取得します。</span><span class="sxs-lookup"><span data-stu-id="a6623-182">Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <value><span data-ttu-id="a6623-183"><see cref="T:System.Collections.Specialized.ListDictionary" /> に格納されているキー/値ペアの数。</span><span class="sxs-lookup"><span data-stu-id="a6623-183">The number of key/value pairs contained in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-184">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a6623-184">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6623-185">次のコード例では、<xref:System.Collections.Specialized.ListDictionary>の要素を列挙します。</span><span class="sxs-lookup"><span data-stu-id="a6623-185">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="listDictionary.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6623-186"><see cref="T:System.Collections.Specialized.ListDictionary" /> を反復処理する <see cref="T:System.Collections.IDictionaryEnumerator" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="a6623-186">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that iterates through the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <returns><span data-ttu-id="a6623-187"><see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="a6623-187">An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-188">C# 言語の `foreach` ステートメント (Visual Basic の場合は `for each`) を使用することで列挙子の複雑さを回避できます。</span><span class="sxs-lookup"><span data-stu-id="a6623-188">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="a6623-189">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a6623-189">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="a6623-190">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="a6623-190">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="a6623-191">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="a6623-191">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="a6623-192"><xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。</span><span class="sxs-lookup"><span data-stu-id="a6623-192"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="a6623-193">この位置では、<xref:System.Collections.IEnumerator.Current%2A> は未定義です。</span><span class="sxs-lookup"><span data-stu-id="a6623-193">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="a6623-194">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a6623-194">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="a6623-195"><xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a6623-195"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="a6623-196"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="a6623-196"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="a6623-197"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="a6623-197">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="a6623-198">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="a6623-198">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="a6623-199"><xref:System.Collections.IEnumerator.MoveNext%2A> の最後の呼び出しが `false`を返した場合、<xref:System.Collections.IEnumerator.Current%2A> は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="a6623-199">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="a6623-200"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a6623-200">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="a6623-201">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="a6623-201">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="a6623-202">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="a6623-202">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="a6623-203">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="a6623-203">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="a6623-204">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="a6623-204">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="a6623-205">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a6623-205">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="a6623-206">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a6623-206">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6623-207">次のコード例では、<xref:System.Collections.Specialized.ListDictionary>の要素を列挙します。</span><span class="sxs-lookup"><span data-stu-id="a6623-207">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.IsFixedSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFixedSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFixedSize : bool" Usage="System.Collections.Specialized.ListDictionary.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6623-208"><see cref="T:System.Collections.Specialized.ListDictionary" /> が固定サイズかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="a6623-208">Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="a6623-209">このプロパティは常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="a6623-209">This property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-210"><xref:System.Collections.IDictionary?displayProperty=nameWithType> インターフェイスで必要とされるため、<xref:System.Collections.Specialized.ListDictionary> は <xref:System.Collections.Specialized.ListDictionary.IsFixedSize%2A> プロパティを実装します。</span><span class="sxs-lookup"><span data-stu-id="a6623-210"><xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsFixedSize%2A> property because it is required by the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="a6623-211">固定サイズのコレクションでは、コレクションの作成後に要素の追加または削除はできませんが、既存の要素の変更はできます。</span><span class="sxs-lookup"><span data-stu-id="a6623-211">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="a6623-212">固定サイズのコレクションは、要素の追加と削除を防ぐラッパーを持つ単純なコレクションです。したがって、要素の追加や削除など、基になるコレクションに変更が加えられた場合、固定サイズのコレクションにはこれらの変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="a6623-212">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="a6623-213">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a6623-213">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Collections.Specialized.ListDictionary.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6623-214"><see cref="T:System.Collections.Specialized.ListDictionary" /> が読み取り専用かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="a6623-214">Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="a6623-215">このプロパティは常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="a6623-215">This property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-216"><xref:System.Collections.IDictionary?displayProperty=nameWithType> インターフェイスで必要とされるため、<xref:System.Collections.Specialized.ListDictionary> は <xref:System.Collections.Specialized.ListDictionary.IsReadOnly%2A> プロパティを実装します。</span><span class="sxs-lookup"><span data-stu-id="a6623-216"><xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsReadOnly%2A> property because it is required by the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="a6623-217">読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。</span><span class="sxs-lookup"><span data-stu-id="a6623-217">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="a6623-218">読み取り専用のコレクションは、単純にコレクションを変更できないようにするラッパーを含むコレクションです。したがって、基になるコレクションに変更が加えられた場合、読み取り専用コレクションにはこれらの変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="a6623-218">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="a6623-219">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a6623-219">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Collections.Specialized.ListDictionary.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6623-220"><see cref="T:System.Collections.Specialized.ListDictionary" /> が同期されている (スレッド セーフである) かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="a6623-220">Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="a6623-221">このプロパティは常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="a6623-221">This property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-222"><xref:System.Collections.ICollection?displayProperty=nameWithType> インターフェイスで必要とされるため、<xref:System.Collections.Specialized.ListDictionary> は <xref:System.Collections.Specialized.ListDictionary.IsSynchronized%2A> プロパティを実装します。</span><span class="sxs-lookup"><span data-stu-id="a6623-222"><xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsSynchronized%2A> property because it is required by the <xref:System.Collections.ICollection?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="a6623-223">派生クラスは、<xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> プロパティを使用して、同期されたバージョンの <xref:System.Collections.Specialized.ListDictionary> を提供できます。</span><span class="sxs-lookup"><span data-stu-id="a6623-223">Derived classes can provide a synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property.</span></span>  
  
 <span data-ttu-id="a6623-224">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="a6623-224">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="a6623-225">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="a6623-225">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="a6623-226">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="a6623-226">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6623-227">次のコード例は、列挙体全体で <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> を使用してコレクションをロックする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a6623-227">The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> during the entire enumeration.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#2)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#2)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#2)]  
  
 <span data-ttu-id="a6623-228">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a6623-228">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Specialized.ListDictionary.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Collections.Specialized.ListDictionary.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="a6623-229">値を取得または設定する対象のキー。</span><span class="sxs-lookup"><span data-stu-id="a6623-229">The key whose value to get or set.</span></span></param>
        <summary><span data-ttu-id="a6623-230">指定されたキーに関連付けられている値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="a6623-230">Gets or sets the value associated with the specified key.</span></span></summary>
        <value><span data-ttu-id="a6623-231">指定されたキーに関連付けられている値。</span><span class="sxs-lookup"><span data-stu-id="a6623-231">The value associated with the specified key.</span></span> <span data-ttu-id="a6623-232">指定したキーが見つからない場合、そのキーを取得しようとした場合は <see langword="null" /> が返され、そのキーを設定しようとした場合は、指定したキーを使用して新しいエントリが作成されます。</span><span class="sxs-lookup"><span data-stu-id="a6623-232">If the specified key is not found, attempting to get it returns <see langword="null" />, and attempting to set it creates a new entry using the specified key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-233">このプロパティでは、`myCollection[key]` という構文を使用して、コレクション内の特定の要素にアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="a6623-233">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="a6623-234">また、<xref:System.Collections.Specialized.ListDictionary.Item%2A> プロパティを使用して、<xref:System.Collections.Specialized.ListDictionary>に存在しないキーの値を設定することにより、新しい要素を追加することもできます。たとえば、`myCollection["myNonexistentKey"] = myValue`のようにします。</span><span class="sxs-lookup"><span data-stu-id="a6623-234">You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="a6623-235">ただし、指定したキーが既に <xref:System.Collections.Specialized.ListDictionary>に存在する場合は、<xref:System.Collections.Specialized.ListDictionary.Item%2A> プロパティを設定すると古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="a6623-235">However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="a6623-236">これに対し、<xref:System.Collections.Specialized.ListDictionary.Add%2A> メソッドでは、既存の要素は変更されません。</span><span class="sxs-lookup"><span data-stu-id="a6623-236">In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="a6623-237">キーを `null`することはできませんが、値を指定することはできます。</span><span class="sxs-lookup"><span data-stu-id="a6623-237">A key cannot be `null`, but a value can.</span></span> <span data-ttu-id="a6623-238">指定されたキーが見つからず、指定されたキーの値が `null`ために返される `null` で返される `null` を区別するには、<xref:System.Collections.Specialized.ListDictionary.Contains%2A> メソッドを使用して、キーがリストに存在するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="a6623-238">To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Specialized.ListDictionary.Contains%2A> method to determine if the key exists in the list.</span></span>  
  
 <span data-ttu-id="a6623-239">このC#言語では、<xref:System.Collections.Specialized.ListDictionary.Item%2A> プロパティを実装する代わりに、 [this](~/docs/csharp/language-reference/keywords/this.md)キーワードを使用してインデクサーを定義します。</span><span class="sxs-lookup"><span data-stu-id="a6623-239">The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property.</span></span> <span data-ttu-id="a6623-240">Visual Basic は、<xref:System.Collections.Specialized.ListDictionary.Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="a6623-240">Visual Basic implements <xref:System.Collections.Specialized.ListDictionary.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="a6623-241">このメソッドは O(`n`) 操作です。`n`は <xref:System.Collections.Specialized.ListDictionary.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="a6623-241">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6623-242">次のコード例では、<xref:System.Collections.Specialized.ListDictionary>の要素を列挙します。</span><span class="sxs-lookup"><span data-stu-id="a6623-242">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a6623-243"><paramref name="key" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="a6623-243"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md"><span data-ttu-id="a6623-244">カルチャを認識しない文字列操作の実行</span><span class="sxs-lookup"><span data-stu-id="a6623-244">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ICollection ^ Keys { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.ICollection" Usage="System.Collections.Specialized.ListDictionary.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6623-245"><see cref="T:System.Collections.Specialized.ListDictionary" /> 内のキーを格納している <see cref="T:System.Collections.ICollection" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="a6623-245">Gets an <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <value><span data-ttu-id="a6623-246"><see cref="T:System.Collections.ICollection" /> 内のキーを格納している <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="a6623-246">An <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-247"><xref:System.Collections.ICollection> 内の値の順序は指定されていませんが、<xref:System.Collections.Specialized.ListDictionary.Values%2A> メソッドによって返される <xref:System.Collections.ICollection> 内の関連付けられた値と同じ順序になります。</span><span class="sxs-lookup"><span data-stu-id="a6623-247">The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Values%2A> method.</span></span>  
  
 <span data-ttu-id="a6623-248">返された <xref:System.Collections.ICollection> が静的コピーではありません。代わりに、<xref:System.Collections.ICollection> によって元の <xref:System.Collections.Specialized.ListDictionary>のキーが参照されます。</span><span class="sxs-lookup"><span data-stu-id="a6623-248">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Specialized.ListDictionary>.</span></span> <span data-ttu-id="a6623-249">したがって、<xref:System.Collections.Specialized.ListDictionary> への変更は、引き続き <xref:System.Collections.ICollection>に反映されます。</span><span class="sxs-lookup"><span data-stu-id="a6623-249">Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="a6623-250">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a6623-250">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6623-251">次のコード例では、<xref:System.Collections.Specialized.ListDictionary>の要素を列挙します。</span><span class="sxs-lookup"><span data-stu-id="a6623-251">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Specialized.ListDictionary.Values" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (key As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit&#xA;override this.Remove : obj -&gt; unit" Usage="listDictionary.Remove key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="a6623-252">削除するエントリのキー。</span><span class="sxs-lookup"><span data-stu-id="a6623-252">The key of the entry to remove.</span></span></param>
        <summary><span data-ttu-id="a6623-253">指定したキーを持つエントリを <see cref="T:System.Collections.Specialized.ListDictionary" /> から削除します。</span><span class="sxs-lookup"><span data-stu-id="a6623-253">Removes the entry with the specified key from the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-254">指定したキーを持つ要素が <xref:System.Collections.Specialized.ListDictionary> に含まれていない場合、<xref:System.Collections.Specialized.ListDictionary> は変更されません。</span><span class="sxs-lookup"><span data-stu-id="a6623-254">If the <xref:System.Collections.Specialized.ListDictionary> does not contain an element with the specified key, the <xref:System.Collections.Specialized.ListDictionary> remains unchanged.</span></span> <span data-ttu-id="a6623-255">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="a6623-255">No exception is thrown.</span></span>  
  
 <span data-ttu-id="a6623-256">このメソッドは O(`n`) 操作です。`n`は <xref:System.Collections.Specialized.ListDictionary.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="a6623-256">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6623-257">次のコード例では、<xref:System.Collections.Specialized.ListDictionary>にを追加し、要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="a6623-257">The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CPP/listdictionary_addremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CS/listdictionary_addremove.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/VB/listdictionary_addremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a6623-258"><paramref name="key" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="a6623-258"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Remove(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md"><span data-ttu-id="a6623-259">カルチャを認識しない文字列操作の実行</span><span class="sxs-lookup"><span data-stu-id="a6623-259">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Collections.Specialized.ListDictionary.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6623-260"><see cref="T:System.Collections.Specialized.ListDictionary" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="a6623-260">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <value><span data-ttu-id="a6623-261"><see cref="T:System.Collections.Specialized.ListDictionary" /> へのアクセスを同期するために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a6623-261">An object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-262">派生クラスは、<xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> プロパティを使用して、独自に同期されたバージョンの <xref:System.Collections.Specialized.ListDictionary> を提供できます。</span><span class="sxs-lookup"><span data-stu-id="a6623-262">Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property.</span></span> <span data-ttu-id="a6623-263">同期コードは、<xref:System.Collections.Specialized.ListDictionary>上で直接ではなく、<xref:System.Collections.Specialized.ListDictionary>の <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> に対して操作を実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a6623-263">The synchronizing code must perform operations on the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> of the <xref:System.Collections.Specialized.ListDictionary>, not directly on the <xref:System.Collections.Specialized.ListDictionary>.</span></span> <span data-ttu-id="a6623-264">これにより、他のオブジェクトから派生したコレクションを適切に操作できるようになります。</span><span class="sxs-lookup"><span data-stu-id="a6623-264">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="a6623-265">具体的には、<xref:System.Collections.Specialized.ListDictionary> オブジェクトを同時に変更している可能性のある他のスレッドとの適切な同期を維持します。</span><span class="sxs-lookup"><span data-stu-id="a6623-265">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.ListDictionary> object.</span></span>  
  
 <span data-ttu-id="a6623-266">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="a6623-266">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="a6623-267">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="a6623-267">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="a6623-268">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="a6623-268">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6623-269">次のコード例は、列挙体全体で <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> を使用してコレクションをロックする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a6623-269">The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> during the entire enumeration.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#2)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#2)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#2)]  
  
 <span data-ttu-id="a6623-270">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a6623-270">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Specialized.ListDictionary.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="listDictionary.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6623-271"><see cref="T:System.Collections.Specialized.ListDictionary" /> を反復処理する <see cref="T:System.Collections.IEnumerator" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="a6623-271">Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <returns><span data-ttu-id="a6623-272"><see cref="T:System.Collections.IEnumerator" /> の <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="a6623-272">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-273">C# 言語の `foreach` ステートメント (Visual Basic の場合は `for each`) を使用することで列挙子の複雑さを回避できます。</span><span class="sxs-lookup"><span data-stu-id="a6623-273">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="a6623-274">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a6623-274">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="a6623-275">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="a6623-275">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="a6623-276">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="a6623-276">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="a6623-277"><xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。</span><span class="sxs-lookup"><span data-stu-id="a6623-277"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="a6623-278">この位置で <xref:System.Collections.IEnumerator.Current%2A> を呼び出すと、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="a6623-278">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="a6623-279">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a6623-279">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="a6623-280"><xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a6623-280"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="a6623-281"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="a6623-281"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="a6623-282"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="a6623-282">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="a6623-283">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="a6623-283">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="a6623-284">前回 <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出して `false` が返された場合に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出すと例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="a6623-284">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="a6623-285"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a6623-285">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="a6623-286">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="a6623-286">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="a6623-287">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに無効になり、次に <xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> を呼び出すと <xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="a6623-287">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="a6623-288"><xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出してから <xref:System.Collections.IEnumerator.Current%2A> を呼び出すまでの間にコレクションが変更された場合、列挙子が既に無効になっていても、<xref:System.Collections.IEnumerator.Current%2A> は、設定されている要素を返します。</span><span class="sxs-lookup"><span data-stu-id="a6623-288">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="a6623-289">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="a6623-289">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="a6623-290">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="a6623-290">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="a6623-291">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="a6623-291">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="a6623-292">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a6623-292">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6623-293">次のコード例では、<xref:System.Collections.Specialized.ListDictionary>の要素を列挙します。</span><span class="sxs-lookup"><span data-stu-id="a6623-293">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ICollection ^ Values { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.ICollection" Usage="System.Collections.Specialized.ListDictionary.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6623-294"><see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.Specialized.ListDictionary" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="a6623-294">Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></summary>
        <value><span data-ttu-id="a6623-295"><see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.Specialized.ListDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="a6623-295">An <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6623-296"><xref:System.Collections.ICollection> 内の値の順序は指定されていませんが、<xref:System.Collections.Specialized.ListDictionary.Keys%2A> メソッドによって返される <xref:System.Collections.ICollection> 内の関連付けられているキーと同じ順序です。</span><span class="sxs-lookup"><span data-stu-id="a6623-296">The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Keys%2A> method.</span></span>  
  
 <span data-ttu-id="a6623-297">返された <xref:System.Collections.ICollection> が静的コピーではありません。代わりに、<xref:System.Collections.ICollection> は元の <xref:System.Collections.Specialized.ListDictionary>の値を参照します。</span><span class="sxs-lookup"><span data-stu-id="a6623-297">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Specialized.ListDictionary>.</span></span> <span data-ttu-id="a6623-298">したがって、<xref:System.Collections.Specialized.ListDictionary> への変更は、引き続き <xref:System.Collections.ICollection>に反映されます。</span><span class="sxs-lookup"><span data-stu-id="a6623-298">Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="a6623-299">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a6623-299">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6623-300">次のコード例では、<xref:System.Collections.Specialized.ListDictionary>の要素を列挙します。</span><span class="sxs-lookup"><span data-stu-id="a6623-300">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Specialized.ListDictionary.Keys" />
      </Docs>
    </Member>
  </Members>
</Type>
