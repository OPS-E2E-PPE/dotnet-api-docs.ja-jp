<Type Name="OrderablePartitioner&lt;TSource&gt;" FullName="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="591361e127e79d60b47bdbed886c852617e681b1" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78719596" /></Metadata><TypeSignature Language="C#" Value="public abstract class OrderablePartitioner&lt;TSource&gt; : System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit OrderablePartitioner`1&lt;TSource&gt; extends System.Collections.Concurrent.Partitioner`1&lt;!TSource&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Concurrent.OrderablePartitioner`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class OrderablePartitioner(Of TSource)&#xA;Inherits Partitioner(Of TSource)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TSource&gt;&#xA;public ref class OrderablePartitioner abstract : System::Collections::Concurrent::Partitioner&lt;TSource&gt;" />
  <TypeSignature Language="F#" Value="type OrderablePartitioner&lt;'Source&gt; = class&#xA;    inherit Partitioner&lt;'Source&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Concurrent</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.14.0</AssemblyVersion>
    <AssemblyVersion>4.0.15.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Collections.Concurrent" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Collections.Concurrent" FromVersion="4.0.0.0" To="mscorlib" ToVersion="4.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="TSource" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.Concurrent.Partitioner&lt;TSource&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TSource">TSource</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TSource">コレクション内の要素の型。</typeparam>
    <summary>並べ替え可能なデータ ソースを複数のパーティションに分割する特定の方法を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生クラスの実装は、適切な方法で要素をキーと値のペアに並べ替える役割を担います。 詳細については、「[Custom Partitioners for PLINQ and TPL (PLINQ および TPL 用のカスタム パーティショナー)](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)」を参照してください。  
  
   
  
## Examples  
 次の例は、一度に1つの要素を返す順序付け可能なパーティショナーを実装する方法を示しています。  
  
 [!code-csharp[System.Collections.Concurrent.OrderablePartitioner#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.orderablepartitioner/cs/orderablepartitioner.cs#1)]
 [!code-vb[System.Collections.Concurrent.OrderablePartitioner#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.orderablepartitioner/vb/orderablepartitioner.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> のすべてのパブリックメンバーはスレッドセーフであり、複数のスレッドから同時に呼び出すことができます。</threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/how-to-speed-up-small-loop-bodies.md">方法: 小さいループ本体を高速化する</related>
    <related type="Article" href="~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md">方法: 動的パーティションを実装する</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OrderablePartitioner (bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (keysOrderedInEachPartition As Boolean, keysOrderedAcrossPartitions As Boolean, keysNormalized As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OrderablePartitioner(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized);" />
      <MemberSignature Language="F#" Value="new System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; : bool * bool * bool -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;" Usage="new System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; (keysOrderedInEachPartition, keysOrderedAcrossPartitions, keysNormalized)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keysOrderedInEachPartition" Type="System.Boolean" />
        <Parameter Name="keysOrderedAcrossPartitions" Type="System.Boolean" />
        <Parameter Name="keysNormalized" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="keysOrderedInEachPartition">各パーティション内の要素のキーが昇順になるかどうかを示します。</param>
        <param name="keysOrderedAcrossPartitions">前にあるパーティション内の要素の順序が、後にあるパーティション内の要素よりも常に前になるかどうかを示します。 true の場合、パーティション 0 の各要素の順序キーは、パーティション 1 のどの要素よりも小さくなり、パーティション 1 の各要素の順序キーは、パーティション 2 のどの要素よりも小さくなります。以降も同様です。</param>
        <param name="keysNormalized">キーを正規化するかどうかを示します。 true の場合、順序キーはすべて [0 . numberOfElements-1] の範囲内の一意の整数になります。 false の場合も順序キーは一意である必要がありますが、相対的な順序だけが考慮され、それぞれの絶対値は考慮されません。</param>
        <summary>インデックス キーに関する制約を指定して <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> クラスを初期化するために、派生クラスのコンストラクターから呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細については、「[Custom Partitioners for PLINQ and TPL (PLINQ および TPL 用のカスタム パーティショナー)](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/96153688-9a01-47c4-8430-909cee9a2887">PLINQ および TPL 用のカスタム パーティショナー</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-speed-up-small-loop-bodies.md">方法: 小さいループ本体を高速化する</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning.md">方法: 静的な数のパーティションを持つパーティショナーを実装する</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md">方法: 動的パーティションを実装する</related>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicPartitions">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;TSource&gt; GetDynamicPartitions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;!TSource&gt; GetDynamicPartitions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDynamicPartitions () As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ GetDynamicPartitions();" />
      <MemberSignature Language="F#" Value="override this.GetDynamicPartitions : unit -&gt; seq&lt;'Source&gt;" Usage="orderablePartitioner.GetDynamicPartitions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>基になるコレクションを可変個のパーティションに分割できるオブジェクトを作成します。</summary>
        <returns>基になるデータ ソースのパーティションを作成できるオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返されたオブジェクトは、<xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> インターフェイスを実装します。 オブジェクトの <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> を呼び出すと、シーケンスに対して別のパーティションが作成されます。  
  
 既定の実装では、返されるパーティションのセットが要素のキーを提供しない点を除いて、<xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> と同じ動作を提供します。  
  
 <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetDynamicPartitions%2A> メソッドは、<xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> プロパティが true を返す場合にのみサポートされます。  
  
 詳細については、「[Custom Partitioners for PLINQ and TPL (PLINQ および TPL 用のカスタム パーティショナー)](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">動的パーティションは、基本クラスでサポートされていません。 派生クラスで実装されている必要があります。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/96153688-9a01-47c4-8430-909cee9a2887">PLINQ および TPL 用のカスタム パーティショナー</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-speed-up-small-loop-bodies.md">方法: 小さいループ本体を高速化する</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning.md">方法: 静的な数のパーティションを持つパーティショナーを実装する</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md">方法: 動的パーティションを実装する</related>
      </Docs>
    </Member>
    <Member MemberName="GetOrderableDynamicPartitions">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;long,TSource&gt;&gt; GetOrderableDynamicPartitions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;int64, !TSource&gt;&gt; GetOrderableDynamicPartitions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrderableDynamicPartitions () As IEnumerable(Of KeyValuePair(Of Long, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;long, TSource&gt;&gt; ^ GetOrderableDynamicPartitions();" />
      <MemberSignature Language="F#" Value="abstract member GetOrderableDynamicPartitions : unit -&gt; seq&lt;System.Collections.Generic.KeyValuePair&lt;int64, 'Source&gt;&gt;&#xA;override this.GetOrderableDynamicPartitions : unit -&gt; seq&lt;System.Collections.Generic.KeyValuePair&lt;int64, 'Source&gt;&gt;" Usage="orderablePartitioner.GetOrderableDynamicPartitions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.Int64,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>基になるコレクションを可変個のパーティションに分割できるオブジェクトを作成します。</summary>
        <returns>基になるデータ ソースのパーティションを作成できるオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返されたオブジェクトは、<xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> インターフェイスを実装します。 オブジェクトの <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> を呼び出すと、シーケンスに対して別のパーティションが作成されます。  
  
 各パーティションは、キーと値のペアに対する列挙子として表されます。 ペアの値は要素自体で、キーは、この要素と他の要素との相対的な順序を決定する整数です。  
  
 <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> メソッドは、<xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> プロパティが true を返す場合にのみサポートされます。  
  
 詳細については、「[Custom Partitioners for PLINQ and TPL (PLINQ および TPL 用のカスタム パーティショナー)](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">動的パーティションは、このパーティショナーでサポートされていません。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/96153688-9a01-47c4-8430-909cee9a2887">PLINQ および TPL 用のカスタム パーティショナー</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-speed-up-small-loop-bodies.md">方法: 小さいループ本体を高速化する</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning.md">方法: 静的な数のパーティションを持つパーティショナーを実装する</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md">方法: 動的パーティションを実装する</related>
      </Docs>
    </Member>
    <Member MemberName="GetOrderablePartitions">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;long,TSource&gt;&gt;&gt; GetOrderablePartitions (int partitionCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;int64, !TSource&gt;&gt;&gt; GetOrderablePartitions(int32 partitionCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetOrderablePartitions (partitionCount As Integer) As IList(Of IEnumerator(Of KeyValuePair(Of Long, TSource)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IList&lt;System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;long, TSource&gt;&gt; ^&gt; ^ GetOrderablePartitions(int partitionCount);" />
      <MemberSignature Language="F#" Value="abstract member GetOrderablePartitions : int -&gt; System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;int64, 'Source&gt;&gt;&gt;" Usage="orderablePartitioner.GetOrderablePartitions partitionCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.Int64,TSource&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="partitionCount">作成するパーティションの数。</param>
        <summary>基になるコレクションを、指定した数の順序付け可能なパーティションに分割します。</summary>
        <returns><paramref name="partitionCount" /> 列挙子を格納するリスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 各パーティションは、キーと値のペアに対する列挙子として表されます。  
  
 ペアの値は要素自体で、キーは、データソース内の他の要素に対するこの要素の相対的な順序を決定する整数です。  
  
 詳細については、「[Custom Partitioners for PLINQ and TPL (PLINQ および TPL 用のカスタム パーティショナー)](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/96153688-9a01-47c4-8430-909cee9a2887">PLINQ および TPL 用のカスタム パーティショナー</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-speed-up-small-loop-bodies.md">方法: 小さいループ本体を高速化する</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning.md">方法: 静的な数のパーティションを持つパーティショナーを実装する</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md">方法: 動的パーティションを実装する</related>
      </Docs>
    </Member>
    <Member MemberName="GetPartitions">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;TSource&gt;&gt; GetPartitions (int partitionCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IList`1&lt;class System.Collections.Generic.IEnumerator`1&lt;!TSource&gt;&gt; GetPartitions(int32 partitionCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPartitions (partitionCount As Integer) As IList(Of IEnumerator(Of TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IList&lt;System::Collections::Generic::IEnumerator&lt;TSource&gt; ^&gt; ^ GetPartitions(int partitionCount);" />
      <MemberSignature Language="F#" Value="override this.GetPartitions : int -&gt; System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;'Source&gt;&gt;" Usage="orderablePartitioner.GetPartitions partitionCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="partitionCount">作成するパーティションの数。</param>
        <summary>基になるコレクションを、指定した数の順序付きのパーティションに分割します。</summary>
        <returns><paramref name="partitionCount" /> 列挙子を格納するリスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定の実装では、返されるパーティションのセットが要素のキーを提供しない点を除いて、<xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderablePartitions%2A> と同じ動作を提供します。  
  
 詳細については、「[Custom Partitioners for PLINQ and TPL (PLINQ および TPL 用のカスタム パーティショナー)](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/96153688-9a01-47c4-8430-909cee9a2887">PLINQ および TPL 用のカスタム パーティショナー</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-speed-up-small-loop-bodies.md">方法: 小さいループ本体を高速化する</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning.md">方法: 静的な数のパーティションを持つパーティショナーを実装する</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md">方法: 動的パーティションを実装する</related>
      </Docs>
    </Member>
    <Member MemberName="KeysNormalized">
      <MemberSignature Language="C#" Value="public bool KeysNormalized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeysNormalized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeysNormalized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeysNormalized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeysNormalized : bool" Usage="System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;.KeysNormalized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>順序キーが正規化されるかどうかを取得します。</summary>
        <value>キーが正規化されているかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysNormalized%2A> が true を返す場合、すべての order キーは [0.. numberOfElements-1] の範囲内の一意の整数になります。 プロパティが false を返す場合、順序キーは一意である必要がありますが、相対的な順序だけが考慮され、それらの絶対値は考慮されません。  
  
 詳細については、「[Custom Partitioners for PLINQ and TPL (PLINQ および TPL 用のカスタム パーティショナー)](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeysOrderedAcrossPartitions">
      <MemberSignature Language="C#" Value="public bool KeysOrderedAcrossPartitions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeysOrderedAcrossPartitions" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeysOrderedAcrossPartitions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeysOrderedAcrossPartitions { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeysOrderedAcrossPartitions : bool" Usage="System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;.KeysOrderedAcrossPartitions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>前にあるパーティション内の要素の順序が、後にあるパーティション内の要素よりも常に前になるかどうかを取得します。</summary>
        <value>以前のパーティションの要素が、常に後のパーティションの要素の前にあるかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysOrderedAcrossPartitions%2A> が true を返す場合、パーティション0の各要素は、パーティション1のどの要素よりも小さい順序キーを持っています。パーティション1の各要素は、パーティション2のどの要素よりも小さい順序キーを持っています。  
  
 詳細については、「[Custom Partitioners for PLINQ and TPL (PLINQ および TPL 用のカスタム パーティショナー)](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/96153688-9a01-47c4-8430-909cee9a2887">PLINQ および TPL 用のカスタム パーティショナー</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-speed-up-small-loop-bodies.md">方法: 小さいループ本体を高速化する</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning.md">方法: 静的な数のパーティションを持つパーティショナーを実装する</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md">方法: 動的パーティションを実装する</related>
      </Docs>
    </Member>
    <Member MemberName="KeysOrderedInEachPartition">
      <MemberSignature Language="C#" Value="public bool KeysOrderedInEachPartition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeysOrderedInEachPartition" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeysOrderedInEachPartition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeysOrderedInEachPartition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeysOrderedInEachPartition : bool" Usage="System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;.KeysOrderedInEachPartition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>各パーティション内の要素のキーが昇順になるかどうかを取得します。</summary>
        <value>各パーティション内の要素が、キーが増加した順序で生成されるかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細については、「[Custom Partitioners for PLINQ and TPL (PLINQ および TPL 用のカスタム パーティショナー)](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/96153688-9a01-47c4-8430-909cee9a2887">PLINQ および TPL 用のカスタム パーティショナー</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-speed-up-small-loop-bodies.md">方法: 小さいループ本体を高速化する</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning.md">方法: 静的な数のパーティションを持つパーティショナーを実装する</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md">方法: 動的パーティションを実装する</related>
      </Docs>
    </Member>
  </Members>
</Type>
