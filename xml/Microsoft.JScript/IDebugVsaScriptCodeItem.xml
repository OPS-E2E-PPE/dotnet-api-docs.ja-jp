<Type Name="IDebugVsaScriptCodeItem" FullName="Microsoft.JScript.IDebugVsaScriptCodeItem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2fe07c8263f541a0eb4bb2ed09f55dabaaa85caa" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73379177" /></Metadata><TypeSignature Language="C#" Value="public interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDebugVsaScriptCodeItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.JScript.IDebugVsaScriptCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDebugVsaScriptCodeItem" />
  <TypeSignature Language="F#" Value="type IDebugVsaScriptCodeItem = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("6DFE759A-CB8B-4ca0-A973-1D04E0BF0B53")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>式の評価および文字列の解析を行うメソッドを定義します。 このインターフェイスは、通常、コード ブロックを表すオブジェクトによって実装され、デバッガーによって呼び出されます。 このインターフェイスは、IActiveScript ホストで必要な追加の機能を提供します。</summary>
    <remarks>To be added.</remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public object Evaluate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Evaluate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate" />
      <MemberSignature Language="VB.NET" Value="Public Function Evaluate () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Evaluate();" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : unit -&gt; obj" Usage="iDebugVsaScriptCodeItem.Evaluate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クラスで実装される場合には、コード項目で表現されるブロック、式、またはステートメントを評価し、値を返します。 一般にこれは、ウォッチ ウィンドウ内などで、式の評価が必要になるデバッガーによって呼び出されます。 式の場合、この値はその式の戻り値になります。 ブロックとステートメントの場合、結果の式はそのブロックまたはステートメントで計算された最終的な式になります。</summary>
        <returns>ステートメント、式、またはブロックの評価結果を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate%2A> メソッドは、機能的には <xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> メソッドと同じであることに注意してください。 マーシャリング属性のみが異なります。 このバージョンのインターフェイスを使用すると、アンマネージデバッガーは、`VARIANT`ではなく `IUnknown` ポインターとして戻り値を取得できます。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ParseNamedBreakPoint">
      <MemberSignature Language="C#" Value="public bool ParseNamedBreakPoint (string input, out string functionName, out int nargs, out string arguments, out string returnType, out ulong offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ParseNamedBreakPoint(string input, [out] string&amp; functionName, [out] int32&amp; nargs, [out] string&amp; arguments, [out] string&amp; returnType, [out] unsigned int64&amp; offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ParseNamedBreakPoint (input As String, ByRef functionName As String, ByRef nargs As Integer, ByRef arguments As String, ByRef returnType As String, ByRef offset As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ParseNamedBreakPoint(System::String ^ input, [Runtime::InteropServices::Out] System::String ^ % functionName, [Runtime::InteropServices::Out] int % nargs, [Runtime::InteropServices::Out] System::String ^ % arguments, [Runtime::InteropServices::Out] System::String ^ % returnType, [Runtime::InteropServices::Out] System::UInt64 % offset);" />
      <MemberSignature Language="F#" Value="abstract member ParseNamedBreakPoint : string * string * int * string * string * uint64 -&gt; bool" Usage="iDebugVsaScriptCodeItem.ParseNamedBreakPoint (input, functionName, nargs, arguments, returnType, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="functionName" Type="System.String" RefType="out" />
        <Parameter Name="nargs" Type="System.Int32" RefType="out" />
        <Parameter Name="arguments" Type="System.String" RefType="out" />
        <Parameter Name="returnType" Type="System.String" RefType="out" />
        <Parameter Name="offset" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">関数、省略可能な引数リスト、および省略可能な IL オフセットを指定する、整形式の名前付きブレークポイント文字列。</param>
        <param name="functionName">入力文字列を解析した結果の関数の名前を返すか、または入力文字列が整形式でない場合に空の文字列を返す出力パラメーター。</param>
        <param name="nargs">省略可能な引数リスト内の引数の数を返す出力パラメーター。 引数リストがないかまたは文字列が整形式でない場合は 0 を返します。</param>
        <param name="arguments">引数リスト内にあるすべての引数の型名をスペースで区切ったリストとして返す出力パラメーター。引数リストが見つからないか入力文字列が整形式でない場合は空の文字列を返します。</param>
        <param name="returnType">入力で指定された関数の戻り値の型が含まれた文字列を返す出力パラメーター。戻り値の型が見つからないか入力文字列が整形式でない場合は空の文字列を返します。</param>
        <param name="offset">入力文字列から IL オフセットを指定する符号なしの長整数。IL オフセットがないか文字列が整形式でない場合は 0 を指定します。</param>
        <summary>クラスで実装される場合、文字列を解析し、解析された出力情報を返します。 一般にこのメソッドは、<see langword="string" /> として表現されるブレークポイントについての情報を解析する必要があるデバッガーによって呼び出されます。 デバッガーには、ユーザーが *functionname-arguments-ILoffset* の形式で入力したブレークポイントが設定されている場合があります。 名前付きブレークポイント文字は、<c>F.B(C.D[], int, arg : double ) : C.Abc + 123 のような複雑な形式にすることができます。</c> パラメーター一覧は、IL オフセットと同様に、オプションです。</summary>
        <returns>名前付きブレークポイントが正常に解析される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>
