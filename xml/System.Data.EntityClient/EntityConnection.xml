<Type Name="EntityConnection" FullName="System.Data.EntityClient.EntityConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6f466559aa0c48e5235196704e5f88c7cb5fb1cf" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78815046" /></Metadata><TypeSignature Language="C#" Value="public sealed class EntityConnection : System.Data.Common.DbConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EntityConnection extends System.Data.Common.DbConnection" />
  <TypeSignature Language="DocId" Value="T:System.Data.EntityClient.EntityConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityConnection&#xA;Inherits DbConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class EntityConnection sealed : System::Data::Common::DbConnection" />
  <TypeSignature Language="F#" Value="type EntityConnection = class&#xA;    inherit DbConnection" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbConnection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>概念モデルおよびデータ ソース接続への参照が含まれます。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Common.CommandTrees> や <xref:System.Data.Objects.ObjectContext> などのオブジェクトが不注意でメタデータと同期しなくなるのを防ぐため、<xref:System.Data.EntityClient.EntityConnection> でそのメタデータをロックする必要があります。 メタデータがロックされると、接続文字列に変更を加えることができなくなります。 メタデータがロックされる 2 つのシナリオを次に示します。

-   <xref:System.Data.EntityClient.EntityConnection> インスタンスは、パラメーターなしのコンストラクター、または接続文字列を受け入れる <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> コンストラクターを使用して構築されます。 いずれの場合も、接続が開かれる前に接続文字列が複数回変更される可能性があります。 <xref:System.Data.EntityClient.EntityConnection.Open%2A> または <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> を呼び出すと、メタデータがロックされます。

-   <xref:System.Data.EntityClient.EntityConnection> と <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> を受け入れる <xref:System.Data.Metadata.Edm.MetadataWorkspace> コンストラクターによって、<xref:System.Data.Common.DbConnection> インスタンスが構築された場合。 この場合、メタデータは構築時にロックされます。 接続文字列に変更を加えることはできません。

 メタデータが読み込まれると、<xref:System.Data.EntityClient.EntityConnection> は、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します。

 コード例については、「 [EntityClient の使用](https://docs.microsoft.com/previous-versions/bb738679(v=vs.90))」を参照してください。

 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/data/adonet/ef/entityclient-provider-for-the-entity-framework.md">Entity Framework 用の EntityClient プロバイダー</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/bb738679(v=vs.90)">EntityClient の使用</related>
    <related type="Article" href="~/docs/framework/data/adonet/ef/connection-strings.md">接続文字列</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Data.EntityClient.EntityConnection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Common.CommandTrees> や <xref:System.Data.Objects.ObjectContext> などのオブジェクトが不注意でメタデータと同期しなくなるのを防ぐため、<xref:System.Data.EntityClient.EntityConnection> でそのメタデータをロックする必要があります。 メタデータがロックされると、接続文字列に変更を加えることができなくなります。 メタデータがロックされる 2 つのシナリオを次に示します。

-   <xref:System.Data.EntityClient.EntityConnection> インスタンスは、パラメーターなしのコンストラクター、または接続文字列を受け入れる <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> コンストラクターを使用して構築されます。 いずれの場合も、接続が開かれる前に接続文字列が複数回変更される可能性があります。 <xref:System.Data.EntityClient.EntityConnection.Open%2A> または <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> を呼び出すと、メタデータがロックされます。

-   <xref:System.Data.EntityClient.EntityConnection> と <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> を受け入れる <xref:System.Data.Metadata.Edm.MetadataWorkspace> コンストラクターによって、<xref:System.Data.Common.DbConnection> インスタンスが構築された場合。 この場合、メタデータは構築時にロックされます。 接続文字列に変更を加えることはできません。

 メタデータが読み込まれると、<xref:System.Data.EntityClient.EntityConnection> は、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します。

 コード例については、「 [EntityClient の使用](https://docs.microsoft.com/previous-versions/bb738679(v=vs.90))」を参照してください。

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.EntityClient.EntityConnection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Common.CommandTrees> や <xref:System.Data.Objects.ObjectContext> などのオブジェクトが不注意でメタデータと同期しなくなるのを防ぐため、<xref:System.Data.EntityClient.EntityConnection> でそのメタデータをロックする必要があります。 メタデータがロックされると、接続文字列に変更を加えることができなくなります。 メタデータがロックされる 2 つのシナリオを次に示します。

-   <xref:System.Data.EntityClient.EntityConnection> インスタンスは、パラメーターなしのコンストラクター、または接続文字列を受け入れる <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> コンストラクターを使用して構築されます。 いずれの場合も、接続が開かれる前に接続文字列が複数回変更される可能性があります。 <xref:System.Data.EntityClient.EntityConnection.Open%2A> または <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> を呼び出すと、メタデータがロックされます。

-   <xref:System.Data.EntityClient.EntityConnection> と <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> を受け入れる <xref:System.Data.Metadata.Edm.MetadataWorkspace> コンストラクターによって、<xref:System.Data.Common.DbConnection> インスタンスが構築された場合。 この場合、メタデータは構築時にロックされます。 接続文字列に変更を加えることはできません。

 メタデータが読み込まれると、<xref:System.Data.EntityClient.EntityConnection> は、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します。

 コード例については、「 [EntityClient の使用](https://docs.microsoft.com/previous-versions/bb738679(v=vs.90))」を参照してください。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.EntityClient.EntityConnection : string -&gt; System.Data.EntityClient.EntityConnection" Usage="new System.Data.EntityClient.EntityConnection connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">プロバイダー固有の接続文字列。</param>
        <summary>接続文字列に基づいて、<see cref="T:System.Data.EntityClient.EntityConnection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 [Entity Data Model ツール](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb399249(v=vs.100))は、アプリケーションの構成ファイルに格納されている名前付き接続文字列を生成します。 この名前付き接続文字列は、<xref:System.Data.EntityClient.EntityConnection> クラスをインスタンス化するときに、`connectionString` パラメーターの代わりに指定できます。

 <xref:System.Data.Common.CommandTrees> および <xref:System.Data.Objects.ObjectContext> のオブジェクトが不注意でメタデータと同期しなくなるのを防ぐため、<xref:System.Data.EntityClient.EntityConnection> でそのメタデータをロックする必要があります。 メタデータがロックされると、接続文字列に変更を加えることができなくなります。 メタデータがロックされる 2 つのシナリオを次に示します。

-   <xref:System.Data.EntityClient.EntityConnection> インスタンスは、パラメーターなしのコンストラクター、または接続文字列を受け入れるこのコンストラクター (<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>) を使用して構築されます。 いずれの場合も、接続が開かれる前に接続文字列が複数回変更される可能性があります。 <xref:System.Data.EntityClient.EntityConnection.Open%2A> または <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> を呼び出すと、メタデータがロックされます。

-   <xref:System.Data.EntityClient.EntityConnection> と <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> を受け入れる <xref:System.Data.Metadata.Edm.MetadataWorkspace> コンストラクターによって、<xref:System.Data.Common.DbConnection> インスタンスが構築された場合。 この場合、メタデータは構築時にロックされます。 接続文字列に変更を加えることはできません。

 メタデータが読み込まれると、<xref:System.Data.EntityClient.EntityConnection> は、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します。

 コード例については、「 [EntityClient の使用](https://docs.microsoft.com/previous-versions/bb738679(v=vs.90))」を参照してください。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">無効な接続文字列キーワードが指定されたか、必要な接続文字列キーワードが指定されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection (System.Data.Metadata.Edm.MetadataWorkspace workspace, System.Data.Common.DbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.Metadata.Edm.MetadataWorkspace workspace, class System.Data.Common.DbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workspace As MetadataWorkspace, connection As DbConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection(System::Data::Metadata::Edm::MetadataWorkspace ^ workspace, System::Data::Common::DbConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.EntityClient.EntityConnection : System.Data.Metadata.Edm.MetadataWorkspace * System.Data.Common.DbConnection -&gt; System.Data.EntityClient.EntityConnection" Usage="new System.Data.EntityClient.EntityConnection (workspace, connection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workspace" Type="System.Data.Metadata.Edm.MetadataWorkspace" />
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="workspace">この <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> に関連付けられた <see cref="T:System.Data.EntityClient.EntityConnection" />。</param>
        <param name="connection">この <see cref="T:System.Data.EntityClient.EntityConnection" /> オブジェクトの基になるデータ ソース接続。</param>
        <summary>指定した <see cref="T:System.Data.EntityClient.EntityConnection" /> および <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> を使用して、<see cref="T:System.Data.Common.DbConnection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 このコンストラクターを使用すると、ディスク上のファイル、またはアセンブリの埋め込みリソースからではないメタデータから <xref:System.Data.EntityClient.EntityConnection> を作成できます。

 <xref:System.Data.Common.CommandTrees> や <xref:System.Data.Objects.ObjectContext> などのオブジェクトが不注意でメタデータと同期しなくなるのを防ぐため、<xref:System.Data.EntityClient.EntityConnection> でそのメタデータをロックする必要があります。 メタデータがロックされると、接続文字列に変更を加えることができなくなります。 メタデータがロックされる 2 つのシナリオを次に示します。

-   <xref:System.Data.EntityClient.EntityConnection> インスタンスは、パラメーターなしのコンストラクター、または接続文字列を受け入れる <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> コンストラクターを使用して構築されます。 いずれの場合も、接続が開かれる前に接続文字列が複数回変更される可能性があります。 <xref:System.Data.EntityClient.EntityConnection.Open%2A> または <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> を呼び出すと、メタデータがロックされます。

-   <xref:System.Data.EntityClient.EntityConnection> と <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> を受け入れるこのコンストラクター (<xref:System.Data.Metadata.Edm.MetadataWorkspace>) によって、<xref:System.Data.Common.DbConnection> インスタンスが構築された場合。 この場合、メタデータは構築時にロックされます。 接続文字列に変更を加えることはできません。

 メタデータが読み込まれると、<xref:System.Data.EntityClient.EntityConnection> は、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="workspace" /> パラメーターまたは <paramref name="connection" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">概念モデルがワークスペースから見つかりません。

または

マッピング ファイルがワークスペースから見つかりません。

または

ストレージ モデルがワークスペースから見つかりません。

または

<paramref name="connection" /> が閉じた状態ではありません。</exception>
        <exception cref="T:System.Data.ProviderIncompatibleException"><paramref name="connection" /> が ADO.NET Entity Framework 互換のプロバイダーからのものではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginDbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbTransaction BeginDbTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function BeginDbTransaction (isolationLevel As IsolationLevel) As DbTransaction" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbTransaction ^ BeginDbTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberSignature Language="F#" Value="override this.BeginDbTransaction : System.Data.IsolationLevel -&gt; System.Data.Common.DbTransaction" Usage="entityConnection.BeginDbTransaction isolationLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データベース トランザクションを開始します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityTransaction BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityTransaction BeginTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction () As EntityTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityTransaction ^ BeginTransaction();" />
      <MemberSignature Language="F#" Value="override this.BeginTransaction : unit -&gt; System.Data.EntityClient.EntityTransaction" Usage="entityConnection.BeginTransaction " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>基になるプロバイダーを使用してトランザクションを開始します。</summary>
        <returns>新しい <see cref="T:System.Data.EntityClient.EntityTransaction" />。 返される <see cref="T:System.Data.EntityClient.EntityTransaction" /> インスタンスを後で <see cref="T:System.Data.EntityClient.EntityCommand" /> と関連付けて、そのトランザクション内でコマンドを実行することができます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> メソッドは <xref:System.Data.IsolationLevel.Unspecified> トランザクション分離レベルを使用します。 別の分離レベルを指定する場合は、<xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> を呼び出します。 この値は、基になるプロバイダーが変わると異なって解釈されることがあります。 複数のプロバイダーでアプリケーションを移植可能にするには、<xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> を呼び出して、トランザクション分離レベルを明示的に指定する必要があります。

 いつでも、<xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> で作成されたアクティブなトランザクションが 2 つ以上存在することはできません。 現在トランザクションが存在する <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> に対して <xref:System.Data.EntityClient.EntityConnection> オーバーロードを呼び出そうとすると、<xref:System.InvalidOperationException> が発生します。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基になるプロバイダーが不明です。

または

<see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> に対する呼び出しが、既に現在のトランザクションが存在する <see cref="T:System.Data.EntityClient.EntityConnection" /> に対して行われました。

または

<see cref="T:System.Data.EntityClient.EntityConnection" /> の状態が <see cref="F:System.Data.ConnectionState.Open" /> ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityTransaction BeginTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction (isolationLevel As IsolationLevel) As EntityTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityTransaction ^ BeginTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberSignature Language="F#" Value="override this.BeginTransaction : System.Data.IsolationLevel -&gt; System.Data.EntityClient.EntityTransaction" Usage="entityConnection.BeginTransaction isolationLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">トランザクションの分離レベルです。</param>
        <summary>基になるプロバイダーを使用して、指定の分離レベルでトランザクションを開始します。</summary>
        <returns>新しい <see cref="T:System.Data.EntityClient.EntityTransaction" />。 返される <see cref="T:System.Data.EntityClient.EntityTransaction" /> インスタンスを後で <see cref="T:System.Data.EntityClient.EntityCommand" /> と関連付けて、そのトランザクション内でコマンドを実行することができます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 いつでも、<xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> で作成されたアクティブなトランザクションが 2 つ以上存在することはできません。 現在トランザクションが存在する <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> に対して <xref:System.Data.EntityClient.EntityConnection> オーバーロードを呼び出そうとすると、<xref:System.InvalidOperationException> が発生します。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基になるプロバイダーが不明です。

または

<see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> に対する呼び出しが、既に現在のトランザクションが存在する <see cref="T:System.Data.EntityClient.EntityConnection" /> に対して行われました。

または

<see cref="T:System.Data.EntityClient.EntityConnection" /> の状態が <see cref="F:System.Data.ConnectionState.Open" /> ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeDatabase">
      <MemberSignature Language="C#" Value="public override void ChangeDatabase (string databaseName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ChangeDatabase(string databaseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ChangeDatabase (databaseName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ChangeDatabase(System::String ^ databaseName);" />
      <MemberSignature Language="F#" Value="override this.ChangeDatabase : string -&gt; unit" Usage="entityConnection.ChangeDatabase databaseName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="databaseName">サポートされていません。</param>
        <summary>サポートされていません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.EntityClient.EntityConnection.ChangeDatabase%2A> メソッドは、<xref:System.Data.Common.DbConnection>から派生する場合に必要です。 このメソッドはサポートされていないため、<xref:System.NotSupportedException>が発生します。

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">メソッドが呼び出された場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="entityConnection.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>データベースへの接続を閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 基になるデータ プロバイダーが不明の場合、<xref:System.Data.EntityClient.EntityConnection.Close%2A> を呼び出しても何も行われません。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続を閉じるときにエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public override string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionString : string with get, set" Usage="System.Data.EntityClient.EntityConnection.ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.EntityClient.EntityConnection" /> 接続文字列を取得または設定します。</summary>
        <value>データ ソースへの初期接続を確立するために必要な接続文字列。 既定値は空の文字列です。 閉じている接続では、現在の設定値が返されます。 値が設定されていない場合は、空の文字列が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 `EntityClient` 接続文字列は、セミコロンで区切られた一連のキーワードと値のパラメーターのペアで構成されます。 それぞれのキーワードと値の関連付けには、等号 (=) が使用されます。 <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> のキーワード値に有効な名前を次の表に示します。

|Keyword|Description|
|-------------|-----------------|
|`Provider`|`Name` キーワードが指定されていない場合に必要です。 基になるプロバイダーの <xref:System.Data.Common.DbProviderFactory> オブジェクトを取得するために使用されるプロバイダー名です。 この値は定数です。<br /><br /> `Name` キーワードが接続文字列に含まれていない場合は、`Provider` キーワードに空でない値が必要です。 このキーワードは `Name` キーワードと同時に指定できません。|
|`Provider Connection String`|省略可能。 基になるデータ ソースに渡される、プロバイダー固有の接続文字列を指定します。 この接続文字列は、データ プロバイダーの有効なキーワード/値ペアを使用して表されます。 無効な `Provider Connection String` がデータ ソースによって評価されると、ランタイム エラーが発生します。<br /><br /> このキーワードは `Name` キーワードと同時に指定できません。<br /><br /> `Provider Connection String` の値は、引用符で囲む必要があります。 以下に例を示します。<br /><br /> `Provider Connection String ="Server=serverName; User ID = userID";`<br /><br /> 次に誤った例を示します。<br /><br /> `Provider Connection String =Server=serverName; User ID = userID`|
|`Metadata`|`Name` キーワードが指定されていない場合に必要です。 モデルとマッピングの情報を検索するディレクトリ、ファイル、およびリソースの場所の、パイプで区切られたリスト。 以下に例を示します。<br /><br /> `Metadata=`<br /><br /> `c:\model &#124; c:\model\sql\mapping.msl;`<br /><br /> パイプ区切り記号の両側の空白は無視されます。<br /><br /> このキーワードは `Name` キーワードと同時に指定できません。|
|`Name`|アプリケーションは、オプションで、必要なキーワード/値接続文字列値を提供する接続名をアプリケーション構成ファイル内で指定できます。 その場合は、接続文字列内に値を直接記述することはできません。 `Name` キーワードは、構成ファイル内で使用できません。<br /><br /> `Name` キーワードが接続文字列に含まれていない場合、Provider キーワードの空でない値が必要になります。<br /><br /> このキーワードは他のすべての接続文字列キーワードと同時に指定できません。|

 アプリケーションでは、キーワード/値を <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> プロパティに直接指定することも、`Name` キーワードの値を指定することもできます。 `Name` キーワードを指定すると、次のように、アプリケーション構成ファイルから接続文字列のキーワード/値が取得されます。

 `Name=AdventureWorksEntities;`

 `Name` キーワードが <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> プロパティで使用されている場合、他のキーワードは使用できません。 `Name` キーワードは、次の例に示すように、アプリケーション構成ファイルの `connectionStrings` セクションに格納されている名前付き接続文字列を参照します。 `Provider`、`Metadata`、および `Provider Connection String` の値は、実行時に構成ファイルから取得されます。



 また、キーワード/値ペアは、次の例に示すように、<xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> プロパティで直接指定することもできます。 この場合、`Name` キーワードは使用されません。

```
"Provider=System.Data.SqlClient;
Metadata=c:\metadata|c:\Metadata\Sql;
Provider Connection String= 'Data Source=localhost;
    Initial Catalog=AdventureWorks;Integrated Security=True;Connection Timeout=60' "
```

 <xref:System.Data.Common.CommandTrees> や <xref:System.Data.Objects.ObjectContext> などのオブジェクトが不注意でメタデータと同期しなくなるのを防ぐため、<xref:System.Data.EntityClient.EntityConnection> でそのメタデータをロックする必要があります。 メタデータがロックされると、接続文字列に変更を加えることができなくなります。 メタデータがロックされる 2 つのシナリオを次に示します。

-   <xref:System.Data.EntityClient.EntityConnection> インスタンスは、パラメーターなしのコンストラクター、または接続文字列を受け入れる <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> コンストラクターを使用して構築されます。 いずれの場合も、接続が開かれる前に接続文字列が複数回変更される可能性があります。 <xref:System.Data.EntityClient.EntityConnection.Open%2A> または <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> を呼び出すと、メタデータがロックされます。

-   <xref:System.Data.EntityClient.EntityConnection> と <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> を受け入れる <xref:System.Data.Metadata.Edm.MetadataWorkspace> コンストラクターによって、<xref:System.Data.Common.DbConnection> インスタンスが構築された場合。 この場合、メタデータは構築時にロックされます。 接続文字列に変更を加えることはできません。

 メタデータが読み込まれると、<xref:System.Data.EntityClient.EntityConnection> は、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します。



## Examples
 次の例では、<xref:System.Data.EntityClient.EntityConnectionStringBuilder> と <xref:System.Data.SqlClient.SqlConnectionStringBuilder> を組み合わせて使用しています。 このコードでは、`SqlConnectionStringBuilder` のプロパティを設定して、基になるプロバイダー接続文字列の一部を提供する <xref:System.Data.SqlClient.SqlConnection> 文字列を作成します。 `SqlConnectionStringBuilder`を使用して `Provider` 名を設定することはできません。有効な `SqlConnection` 構文が使用されていないためです。 このコードは `EntityConnectionStringBuilder` プロパティを設定して、<xref:System.Data.EntityClient.EntityConnection> 文字列を作成します。

 [!code-csharp[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/samples/snippets/csharp/VS_Snippets_Data/eSQLBasicExamples/CS/Program.cs#buildingconnectionstringwithentitycommand)]
 [!code-vb[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/samples/snippets/visualbasic/VS_Snippets_Data/eSQLBasicExamples/VB/Program.vb#buildingconnectionstringwithentitycommand)]

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Data.EntityClient.EntityConnection.ConnectionString" /> の <see cref="T:System.Data.EntityClient.EntityConnection" /> を初期化した後に、<see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> プロパティを設定しようとしました。 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> が初期化されるのは、<see cref="T:System.Data.EntityClient.EntityConnection" /> をパラメーターに取るオーバーロードから <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> インスタンスを構築した場合か、または <see cref="T:System.Data.EntityClient.EntityConnection" /> インスタンスが開かれた場合のいずれかです。</exception>
        <exception cref="T:System.ArgumentException">無効な接続文字列キーワードが指定されたか、必要な接続文字列キーワードが指定されていません。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/connection-strings.md">接続文字列</related>
        <related type="Article" href="~/docs/framework/data/adonet/ef/connection-strings.md">接続文字列 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeout">
      <MemberSignature Language="C#" Value="public override int ConnectionTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ConnectionTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ConnectionTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ConnectionTimeout { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionTimeout : int" Usage="System.Data.EntityClient.EntityConnection.ConnectionTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続を確立する際、試行を終了してエラーを生成するまでに待機する秒数を取得します。</summary>
        <value>接続が開くのを待機する時間 (秒単位) です。 既定値は、基になるデータ プロバイダーの既定のタイムアウト値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 基になるデータ プロバイダーが不明の場合は 0 を返します。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">0 より小さい値が設定されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityCommand CreateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityCommand CreateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.CreateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCommand () As EntityCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityCommand ^ CreateCommand();" />
      <MemberSignature Language="F#" Value="override this.CreateCommand : unit -&gt; System.Data.EntityClient.EntityCommand" Usage="entityConnection.CreateCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.EntityClient.EntityCommand" /> をこの <see cref="P:System.Data.EntityClient.EntityCommand.Connection" /> に設定して、<see cref="T:System.Data.EntityClient.EntityConnection" /> の新しいインスタンスを作成します。</summary>
        <returns><see cref="T:System.Data.EntityClient.EntityCommand" /> オブジェクトです。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">基になるデータ プロバイダーの名前が不明です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand CreateDbCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.CreateDbCommand" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbCommand () As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbCommand ^ CreateDbCommand();" />
      <MemberSignature Language="F#" Value="override this.CreateDbCommand : unit -&gt; System.Data.Common.DbCommand" Usage="entityConnection.CreateDbCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public override string Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Database" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.Database" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Database As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Database { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Database : string" Usage="System.Data.EntityClient.EntityConnection.Database" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のデータベースの名前、または接続が開かれた後に使用されるデータベースの名前を取得します。</summary>
        <value>基になるデータ プロバイダーの <see langword="Database" /> プロパティの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.EntityClient.EntityConnection.Database%2A> プロパティにマップされる、`Database`などの特定のキーワード値については、基になるデータプロバイダーのドキュメントを参照してください。 SQL Server 同等のキーワードについては、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A?displayProperty=nameWithType> プロパティのドキュメントを参照してください。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基になるデータ プロバイダーが不明です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public override string DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DataSource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataSource { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSource : string" Usage="System.Data.EntityClient.EntityConnection.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続先のデータ ソースの名前またはネットワーク アドレスを取得します。</summary>
        <value>データ ソースの名前です。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.EntityClient.EntityConnection.DataSource%2A> プロパティにマップされる、`DataSource`などの特定のキーワード値については、基になるデータプロバイダーのドキュメントを参照してください。 SQL Server 同等のキーワードについては、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A?displayProperty=nameWithType> プロパティのドキュメントを参照してください。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基になるデータ プロバイダーが不明です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DbProviderFactory">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbProviderFactory DbProviderFactory" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.DbProviderFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbProviderFactory As DbProviderFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbProviderFactory ^ DbProviderFactory { System::Data::Common::DbProviderFactory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DbProviderFactory : System.Data.Common.DbProviderFactory" Usage="System.Data.EntityClient.EntityConnection.DbProviderFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="entityConnection.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistTransaction">
      <MemberSignature Language="C#" Value="public override void EnlistTransaction (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnlistTransaction(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EnlistTransaction (transaction As Transaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EnlistTransaction(System::Transactions::Transaction ^ transaction);" />
      <MemberSignature Language="F#" Value="override this.EnlistTransaction : System.Transactions.Transaction -&gt; unit" Usage="entityConnection.EnlistTransaction transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">登録先のトランザクション オブジェクト。</param>
        <summary>この <see cref="T:System.Data.EntityClient.EntityConnection" /> を指定されたトランザクションに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 このメソッドは、データ ソース接続呼び出しを転送して、渡される <xref:System.Transactions.Transaction> に明示的に参加させます。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.EntityClient.EntityConnection" /> の状態が <see cref="F:System.Data.ConnectionState.Open" /> ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataWorkspace">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadataWorkspace () As MetadataWorkspace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Metadata::Edm::MetadataWorkspace ^ GetMetadataWorkspace();" />
      <MemberSignature Language="F#" Value="member this.GetMetadataWorkspace : unit -&gt; System.Data.Metadata.Edm.MetadataWorkspace" Usage="entityConnection.GetMetadataWorkspace " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.MetadataWorkspace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> に関連付けられている <see cref="T:System.Data.EntityClient.EntityConnection" /> を返します。</summary>
        <returns>この <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> に関連付けられている <see cref="T:System.Data.EntityClient.EntityConnection" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Metadata.Edm.MetadataWorkspace> クラスが作成されると、<xref:System.Data.EntityClient.EntityConnection> が自動的に作成されます。 作成プロセスで、メタデータ固有の例外がスローされることがあります。 メタデータがメモリに読み込まれると、Entity Data Model (EDM) アプリケーションは、そのメタデータを使用して、基になるデータ ソースに関する情報にアクセスします。 詳細については、「 [ADO.NET Metadata](https://docs.microsoft.com/previous-versions/bb399207(v=vs.90))」を参照してください。

 <xref:System.Data.Common.CommandTrees> や <xref:System.Data.Objects.ObjectContext> などのオブジェクトが不注意でメタデータと同期しなくなるのを防ぐため、<xref:System.Data.EntityClient.EntityConnection> でそのメタデータをロックする必要があります。 メタデータがロックされると、接続文字列に変更を加えることができなくなります。 メタデータがロックされる 2 つのシナリオを次に示します。

-   <xref:System.Data.EntityClient.EntityConnection> インスタンスは、パラメーターなしのコンストラクター、または接続文字列を受け入れる <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> コンストラクターを使用して構築されます。 いずれの場合も、接続が開かれる前に接続文字列が複数回変更される可能性があります。 <xref:System.Data.EntityClient.EntityConnection.Open%2A> または <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> では、メタデータがロックされます。

-   <xref:System.Data.EntityClient.EntityConnection> と <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> を受け入れる <xref:System.Data.Metadata.Edm.MetadataWorkspace> コンストラクターによって、<xref:System.Data.Common.DbConnection> インスタンスが構築された場合。 この場合、メタデータは構築時にロックされます。 接続文字列に変更を加えることはできません。

 メタデータが読み込まれると、<xref:System.Data.EntityClient.EntityConnection> は、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します。

 ]]></format>
        </remarks>
        <exception cref="T:System.Data.MetadataException">インライン接続文字列に無効な <see langword="Metadata" /> キーワード値が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public override void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Open" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Open();" />
      <MemberSignature Language="F#" Value="override this.Open : unit -&gt; unit" Usage="entityConnection.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>基になるデータ プロバイダーの <see langword="Open" /> メソッドを呼び出して、データ ソースへの接続を確立します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Common.CommandTrees> や <xref:System.Data.Objects.ObjectContext> などのオブジェクトが不注意でメタデータと同期しなくなるのを防ぐため、<xref:System.Data.EntityClient.EntityConnection> でそのメタデータをロックする必要があります。 メタデータがロックされると、接続文字列に変更を加えることができなくなります。 メタデータがロックされる 2 つのシナリオを次に示します。

-   <xref:System.Data.EntityClient.EntityConnection> インスタンスは、パラメーターなしのコンストラクター、または接続文字列を受け入れる <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> コンストラクターを使用して構築されます。 いずれの場合も、接続が開かれる前に接続文字列が複数回変更される可能性があります。 <xref:System.Data.EntityClient.EntityConnection.Open%2A> または <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> を呼び出すと、メタデータがロックされます。

-   <xref:System.Data.EntityClient.EntityConnection> と <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> を受け入れる <xref:System.Data.Metadata.Edm.MetadataWorkspace> コンストラクターによって、<xref:System.Data.Common.DbConnection> インスタンスが構築された場合。 この場合、メタデータは構築時にロックされます。 接続文字列に変更を加えることはできません。

 メタデータが読み込まれると、<xref:System.Data.EntityClient.EntityConnection> は、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が開いたときにエラーが発生したか、基になるデータ プロバイダーの名前が不明です。</exception>
        <exception cref="T:System.Data.MetadataException">インライン接続文字列に無効な <see langword="Metadata" /> キーワード値が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ServerVersion">
      <MemberSignature Language="C#" Value="public override string ServerVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ServerVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ServerVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ServerVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServerVersion : string" Usage="System.Data.EntityClient.EntityConnection.ServerVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントが接続されているデータ ソースのバージョンを含む文字列を取得します。</summary>
        <value>プロバイダー接続文字列に含まれるデータ ソースのバージョン。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Data.ConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ConnectionState State" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.State" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property State As ConnectionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::ConnectionState State { System::Data::ConnectionState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Data.ConnectionState" Usage="System.Data.EntityClient.EntityConnection.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.ConnectionState" /> が開いている場合は、基になるプロバイダーの <see cref="T:System.Data.EntityClient.EntityConnection" /> プロパティを取得します。 それ以外の場合は、 <see cref="F:System.Data.ConnectionState.Closed" />を返します。</summary>
        <value><see cref="F:System.Data.ConnectionState.Open" />、<see cref="T:System.Data.EntityClient.EntityConnection" />の内部状態と基になるプロバイダーの <see cref="T:System.Data.ConnectionState" /> の両方が開いている場合にのみ表示されます。 <see cref="T:System.Data.EntityClient.EntityConnection" />の状態が open で、プロバイダーの <see cref="T:System.Data.ConnectionState" /> が閉じている場合、このプロパティは <see cref="F:System.Data.ConnectionState.Broken" />を返します。 それ以外の場合は <see cref="F:System.Data.ConnectionState.Closed" />を返します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreConnection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection StoreConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection StoreConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.StoreConnection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StoreConnection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbConnection ^ StoreConnection { System::Data::Common::DbConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StoreConnection : System.Data.Common.DbConnection" Usage="System.Data.EntityClient.EntityConnection.StoreConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.EntityClient.EntityConnection" /> オブジェクトで使用される、基になるデータ ソース接続へのアクセスを提供します。</summary>
        <value>データ ソース接続の <see cref="T:System.Data.Common.DbConnection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.EntityClient.EntityConnection> オブジェクトが閉じている場合、返されるデータ ソース接続は閉じられます。 開いている場合は、開いているデータ ソース接続が返されます。 データ ソース接続情報を設定すると、返される値は常に null 以外になります。 データソース接続情報がない場合 (たとえば、パラメーターなしのコンストラクターが使用され、その後に接続文字列が設定されていない場合)、null 参照が返されます。

 Entity Framework で使用された同一のデータ ソース接続は、アプリケーションの他の部分と共有できます。 データ ソース接続は、<xref:System.Data.Common.DbConnection> の <xref:System.Data.Objects.ObjectContext.Connection%2A> プロパティ、または <xref:System.Data.Objects.ObjectContext> の <xref:System.Data.EntityClient.EntityConnection.StoreConnection%2A> プロパティからの <xref:System.Data.EntityClient.EntityConnection> オブジェクトとして返されます。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
