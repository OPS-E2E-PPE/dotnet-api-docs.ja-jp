<Type Name="InertiaProcessor2D" FullName="System.Windows.Input.Manipulations.InertiaProcessor2D">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ce2683bf3df8650b0cba5659d42cff9b64a8bdbc" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73399830" /></Metadata><TypeSignature Language="C#" Value="public class InertiaProcessor2D" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InertiaProcessor2D extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Manipulations.InertiaProcessor2D" />
  <TypeSignature Language="VB.NET" Value="Public Class InertiaProcessor2D" />
  <TypeSignature Language="C++ CLI" Value="public ref class InertiaProcessor2D" />
  <TypeSignature Language="F#" Value="type InertiaProcessor2D = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>操作の位置、方向、および平均半径の外挿を実装します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.Manipulations.InertiaProcessor2D> オブジェクトを使用すると、実際の動作をシミュレートすることによって、アプリケーションで要素の位置、向き、その他のプロパティを推定できます。  
  
 たとえば、ユーザーが要素を移動してから解放した場合、要素は移動、減速、および徐々に停止することができます。 慣性プロセッサは、この動作を実装します。これにより、アフィン2-d 値 (原点、スケール、変換、および回転) が、指定された減速率で指定した時間にわたって変化します。  
  
 慣性プロセッサ自体では、要素の移動や減速は行われません。 アプリケーションは慣性プロセッサから情報を受け取り、必要に応じて、アプリケーション固有の要素に値を適用します。 通常、アプリケーションは、慣性プロセッサから受け取った情報を使用して、要素の位置、サイズ、または向きを変更します。  
  
 慣性の処理は通常、操作の処理と組み合わせて使用されます。 詳細については、<xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> クラスを参照してください。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InertiaProcessor2D ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InertiaProcessor2D();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Input.Manipulations.InertiaProcessor2D" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete (long timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complete(int64 timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete (timestamp As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Complete(long timestamp);" />
      <MemberSignature Language="F#" Value="member this.Complete : int64 -&gt; unit" Usage="inertiaProcessor2D.Complete timestamp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timestamp">100 ナノ秒タイマー刻み単位での推定を完了するためのタイムスタンプ。</param>
        <summary>指定したタイムスタンプを使用して最終的な推定を完了し、<see cref="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 タイムスタンプは100ナノ秒単位です。  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=nameWithType> イベントのイベントハンドラーが、慣性処理が実行されているかどうかを確認し、存在する場合は、<xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete%2A> メソッドを呼び出して停止します。  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationStarted](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationstarted)]  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_Timestamp](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_timestamp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">タイムスタンプ パラメーターは最初または前のタイムスタンプより小さいです。</exception>
      </Docs>
    </Member>
    <Member MemberName="Completed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; Completed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; Completed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Completed As EventHandler(Of Manipulation2DCompletedEventArgs) " FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::Manipulations::Manipulation2DCompletedEventArgs ^&gt; ^ Completed;" />
      <MemberSignature Language="F#" Value="member this.Completed : EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; " Usage="member this.Completed : System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event Completed As EventHandler(Of Manipulation2DCompletedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>外挿の完了時に発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; Delta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; Delta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Delta As EventHandler(Of Manipulation2DDeltaEventArgs) " FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::Manipulations::Manipulation2DDeltaEventArgs ^&gt; ^ Delta;" />
      <MemberSignature Language="F#" Value="member this.Delta : EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; " Usage="member this.Delta : System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event Delta As EventHandler(Of Manipulation2DDeltaEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>外挿の起点が変更された場合や、変換、拡大と縮小、または回転が行われた場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta?displayProperty=nameWithType> イベントと <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=nameWithType> イベントは同じ型です。 通常、両方のイベントに同じイベントハンドラーを使用できます。  
  
   
  
## Examples  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationOrInertiaDelta](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationorinertiadelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpansionBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaExpansionBehavior2D ExpansionBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaExpansionBehavior2D ExpansionBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property ExpansionBehavior As InertiaExpansionBehavior2D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Manipulations::InertiaExpansionBehavior2D ^ ExpansionBehavior { System::Windows::Input::Manipulations::InertiaExpansionBehavior2D ^ get(); void set(System::Windows::Input::Manipulations::InertiaExpansionBehavior2D ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExpansionBehavior : System.Windows.Input.Manipulations.InertiaExpansionBehavior2D with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaExpansionBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>慣性プロセッサの展開動作を取得または設定します。</summary>
        <value>慣性プロセッサの展開動作。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialOriginX">
      <MemberSignature Language="C#" Value="public float InitialOriginX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 InitialOriginX" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialOriginX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float InitialOriginX { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.InitialOriginX : single with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最初の起点の x 座標を座標単位で取得または設定します。</summary>
        <value>最初の起点の x 座標 (座標単位)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> プロパティと <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> プロパティによって表される起点ポイントは、要素に関連付けられているすべてのマニピュレーターの平均位置です。  
  
 <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> の有効な値は、有限数です。 既定値は 0.0 です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialOriginY">
      <MemberSignature Language="C#" Value="public float InitialOriginY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 InitialOriginY" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialOriginY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float InitialOriginY { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.InitialOriginY : single with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最初の起点の y 座標を座標単位で取得または設定します。</summary>
        <value>最初の起点の y 座標 (座標単位)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> プロパティと <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> プロパティによって表される起点ポイントは、要素に関連付けられているすべてのマニピュレーターの平均位置です。  
  
 <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> の有効な値は、有限数です。 既定値は 0.0 です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunning : bool" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>慣性が現在処理中かどうかを取得します。</summary>
        <value>慣性が現在処理中かどうかを示すブール値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=nameWithType> イベントのイベントハンドラーが、慣性処理が実行されているかどうかを確認し、存在する場合は <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed> メソッドを呼び出して停止します。  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationStarted](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationstarted)]  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_Timestamp](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_timestamp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature Language="C#" Value="public bool Process (long timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Process(int64 timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Process(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Process (timestamp As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Process(long timestamp);" />
      <MemberSignature Language="F#" Value="member this.Process : int64 -&gt; bool" Usage="inertiaProcessor2D.Process timestamp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timestamp">100 ナノ秒タイマー刻み単位での推定を行うためのタイムスタンプ。</param>
        <summary>指定された時間に、操作の位置、向き、および平均半径を推定します。</summary>
        <returns>指定された時間に操作の位置、方向、および平均半径。 外挿が処理中の場合は <see langword="true" />。それ以外の場合、外挿が完了している場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 タイムスタンプは100ナノ秒単位です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">タイムスタンプ パラメーターは最初または前のタイムスタンプより小さいです。</exception>
      </Docs>
    </Member>
    <Member MemberName="RotationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaRotationBehavior2D RotationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaRotationBehavior2D RotationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property RotationBehavior As InertiaRotationBehavior2D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Manipulations::InertiaRotationBehavior2D ^ RotationBehavior { System::Windows::Input::Manipulations::InertiaRotationBehavior2D ^ get(); void set(System::Windows::Input::Manipulations::InertiaRotationBehavior2D ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RotationBehavior : System.Windows.Input.Manipulations.InertiaRotationBehavior2D with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaRotationBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>慣性プロセッサの回転動作を取得または設定します。</summary>
        <value>慣性プロセッサの回転動作。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.DesiredRotation%2A> プロパティを使用して、慣性処理によってオブジェクトを開始方向から3回と-1 回回転できるように設定されています。  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_SetDesiredRotation](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_setdesiredrotation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public void SetParameters (System.Windows.Input.Manipulations.InertiaParameters2D parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParameters(class System.Windows.Input.Manipulations.InertiaParameters2D parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.SetParameters(System.Windows.Input.Manipulations.InertiaParameters2D)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetParameters (parameters As InertiaParameters2D)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetParameters(System::Windows::Input::Manipulations::InertiaParameters2D ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.SetParameters : System.Windows.Input.Manipulations.InertiaParameters2D -&gt; unit" Usage="inertiaProcessor2D.SetParameters parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Windows.Input.Manipulations.InertiaParameters2D" />
      </Parameters>
      <Docs>
        <param name="parameters">設定するパラメーター。</param>
        <summary>慣性プロセッサのパラメーターを設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaTranslationBehavior2D TranslationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaTranslationBehavior2D TranslationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property TranslationBehavior As InertiaTranslationBehavior2D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Manipulations::InertiaTranslationBehavior2D ^ TranslationBehavior { System::Windows::Input::Manipulations::InertiaTranslationBehavior2D ^ get(); void set(System::Windows::Input::Manipulations::InertiaTranslationBehavior2D ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TranslationBehavior : System.Windows.Input.Manipulations.InertiaTranslationBehavior2D with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaTranslationBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>慣性プロセッサの変換動作を取得または設定します。</summary>
        <value>慣性プロセッサの変換動作。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
