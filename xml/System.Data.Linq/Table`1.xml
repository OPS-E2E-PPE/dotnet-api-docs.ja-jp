<Type Name="Table&lt;TEntity&gt;" FullName="System.Data.Linq.Table&lt;TEntity&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3c65261e5f0cb12cdc98a9fb15fa0563b8ca9894" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83965445" /></Metadata><TypeSignature Language="C#" Value="public sealed class Table&lt;TEntity&gt; : System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource, System.Data.Linq.ITable, System.Linq.IQueryable&lt;TEntity&gt;, System.Linq.IQueryProvider where TEntity : class" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Table`1&lt;class TEntity&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Data.Linq.ITable, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;, class System.Linq.IQueryProvider" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Table`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Table(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IListSource, IQueryable(Of TEntity), IQueryProvider, ITable" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class Table sealed : System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource, System::Data::Linq::ITable, System::Linq::IQueryable&lt;TEntity&gt;, System::Linq::IQueryProvider" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Table&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryProvider&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface ITable&#xA;    interface IQueryable&#xA;    interface IEnumerable&#xA;    interface IListSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="C#" Value="public sealed class Table&lt;TEntity&gt; : System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource, System.Data.Linq.ITable, System.Data.Linq.ITable&lt;TEntity&gt;, System.Linq.IQueryable&lt;TEntity&gt;, System.Linq.IQueryProvider where TEntity : class" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Table`1&lt;class TEntity&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Data.Linq.ITable, class System.Data.Linq.ITable`1&lt;!TEntity&gt;, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;, class System.Linq.IQueryProvider" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Table(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IListSource, IQueryable(Of TEntity), IQueryProvider, ITable, ITable(Of TEntity)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class Table sealed : System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource, System::Data::Linq::ITable, System::Data::Linq::ITable&lt;TEntity&gt;, System::Linq::IQueryable&lt;TEntity&gt;, System::Linq::IQueryProvider" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type Table&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface IQueryProvider&#xA;    interface ITable&#xA;    interface IListSource&#xA;    interface ITable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="F#" Value="type Table&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&#xA;    interface IQueryProvider&#xA;    interface ITable&#xA;    interface IListSource&#xA;    interface ITable&lt;'Entity (requires 'Entity : null)&gt;" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type Table&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface ITable&#xA;    interface IQueryProvider&#xA;    interface IListSource&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryable" FrameworkAlternate="xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Linq.ITable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity"><span data-ttu-id="24fee-101">テーブル内のデータの型。</span><span class="sxs-lookup"><span data-stu-id="24fee-101">The type of the data in the table.</span></span></typeparam>
    <summary><span data-ttu-id="24fee-102">基になるデータベース内の特定の型のテーブルを表します。</span><span class="sxs-lookup"><span data-stu-id="24fee-102">Represents a table for a particular type in the underlying database.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-103">このクラスを使用すると、テーブルに対してクエリを実行し、オブジェクトを追加、削除、およびアタッチすることができます。</span><span class="sxs-lookup"><span data-stu-id="24fee-103">This class enables you to query over the table and add, remove, and attach objects.</span></span>  
  
 <span data-ttu-id="24fee-104">アプリケーションは、<xref:System.Data.Linq.DataContext.GetTable%2A> を使用するか、厳密に型指定された <xref:System.Data.Linq.DataContext>の厳密に型指定されたプロパティを使用して、<xref:System.Data.Linq.Table%601> インスタンスにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="24fee-104">An application can access a <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> or by using a strongly typed property for the strongly typed <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="24fee-105">つまり、デザイナーが DataContext オブジェクトを生成すると、各テーブルを表すプロパティが生成されます。</span><span class="sxs-lookup"><span data-stu-id="24fee-105">That is, when the designer generates a DataContext object, it generates properties to represent each Table.</span></span> <span data-ttu-id="24fee-106">例 :</span><span class="sxs-lookup"><span data-stu-id="24fee-106">For example:</span></span>  
  
```csharp
[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SignOffTool")]  
public partial class DataClasses1DataContext : System.Data.Linq.DataContext 
{
    public System.Data.Linq.Table<User> Users
    {
        get
        {
            return this.GetTable<User>();
        }
    }
}
```
  
 <span data-ttu-id="24fee-107">この厳密に型指定された DataContext では、Users プロパティにアクセスして `Table<User>`を取得できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-107">For this strongly typed DataContext, you can access the Users property to get `Table<User>`.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="24fee-108"><see cref="T:System.Data.Linq.DataContext" /> にエンティティをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="24fee-108">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-109">`Attach` メソッドは、1つの <xref:System.Data.Linq.DataContext>で作成され、クライアントにシリアル化された後、逆シリアル化された (更新操作または削除操作を実行することを意図した) エンティティで使用します。</span><span class="sxs-lookup"><span data-stu-id="24fee-109">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back (with the intention to perform an update or delete operation).</span></span> <span data-ttu-id="24fee-110">詳細については、「[N 層アプリケーションでのデータ取得および CUD 操作 (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="24fee-110">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications).</span></span>  
  
 <span data-ttu-id="24fee-111">シリアル化によってデタッチされていないエンティティを `Attach` しないでください。</span><span class="sxs-lookup"><span data-stu-id="24fee-111">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="24fee-112">シリアル化されていないエンティティは、そのエンティティが2番目のデータコンテキストによって追跡された場合に予期しない結果になる可能性のある遅延ローダーとの関連付けを維持します。</span><span class="sxs-lookup"><span data-stu-id="24fee-112">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 <span data-ttu-id="24fee-113">新しいエンティティがアタッチされると、子コレクション (たとえば、関連付けられたテーブルのエンティティの `EntitySet` コレクション) の遅延ローダーが初期化されます。</span><span class="sxs-lookup"><span data-stu-id="24fee-113">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="24fee-114"><xref:System.Data.Linq.DataContext.SubmitChanges%2A> を呼び出すと、子コレクションのメンバーが `Unmodified` 状態になります。</span><span class="sxs-lookup"><span data-stu-id="24fee-114">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="24fee-115">子コレクションのメンバーを更新するには、明示的に `Attach` を呼び出して、そのエンティティを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-115">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="24fee-116">`Attach` は、指定されたオブジェクトのオブジェクトグラフ内のすべてのエンティティをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="24fee-116">`Attach` attaches all entities in the object graph of the provided object.</span></span> <span data-ttu-id="24fee-117">例 :</span><span class="sxs-lookup"><span data-stu-id="24fee-117">For example:</span></span>
  
```csharp
using (var db = new SampleDataContext())
{  
    var employee = new Employee { employeeId = 1 };  
  
    var master = new Master();  
    master.Employee = employee;  
  
    var child = new Child();  
    child.Employee = employee;  
  
    db.Employees.Attach(employee);  
  
    master.Child = child;  
  
    db.Masters.InsertOnSubmit(master);  
  
    db.SubmitChanges();  
} 
```  

```vb
Using db As New SampleDataContext()
    Dim employee As New Employee With { .employeeId = 1 }
  
    Dim master As New Master()  
    master.Employee = employee  
  
    Dim child As New Child()  
    child.Employee = employee  
  
    db.Employees.Attach(employee)  
  
    master.Child = child  
  
    db.Masters.InsertOnSubmit(master)  
  
    db.SubmitChanges()  
  
End Using  
```  
  
 <span data-ttu-id="24fee-118">`Employee` には master と child の両方のリレーションシップがあるため、`Employee` で `Attach` を呼び出すと、employee、master、および child がアタッチされます。</span><span class="sxs-lookup"><span data-stu-id="24fee-118">Calling `Attach` on `Employee` attaches employee, master, and child, because the `Employee` has relationships to both master and child.</span></span> <span data-ttu-id="24fee-119">`InsertOnSubmit` を明示的に呼び出して、状態を添付型から挿入済みに変更する必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-119">You must explicitly call `InsertOnSubmit` to change the state from attached to inserted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity -&gt; unit" Usage="table.Attach entity" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(!TEntity entity) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Attach(TEntity entity);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member Attach : 'Entity -&gt; unit&#xA;override this.Attach : 'Entity -&gt; unit" Usage="table.Attach entity" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable`1.Attach(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="24fee-120">アタッチするエンティティの元の値。</span><span class="sxs-lookup"><span data-stu-id="24fee-120">The original values of the entity to be attached.</span></span></param>
        <summary><span data-ttu-id="24fee-121">オプティミスティック コンカレンシー チェックで元の値が必要なときに、接続解除されたエンティティまたは "デタッチ" されたエンティティを新しい <see cref="T:System.Data.Linq.DataContext" /> にアタッチします。</span><span class="sxs-lookup"><span data-stu-id="24fee-121">Attaches a disconnected or "detached" entity to a new <see cref="T:System.Data.Linq.DataContext" /> when original values are required for optimistic concurrency checks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-122">`Attach` メソッドを1つの <xref:System.Data.Linq.DataContext>で作成し、クライアントにシリアル化した後、逆シリアル化して更新操作または削除操作を実行するエンティティを使用します。</span><span class="sxs-lookup"><span data-stu-id="24fee-122">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back to perform an update or delete operation.</span></span> <span data-ttu-id="24fee-123">新しい <xref:System.Data.Linq.DataContext> には、接続されていないエンティティの元の値を追跡する手段がないため、クライアントはこれらの値を提供する役割を担います。</span><span class="sxs-lookup"><span data-stu-id="24fee-123">Because the new <xref:System.Data.Linq.DataContext> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values.</span></span> <span data-ttu-id="24fee-124">このバージョンの <xref:System.Data.Linq.Table%601.Attach%2A>では、エンティティは元の値の状態であると見なされます。</span><span class="sxs-lookup"><span data-stu-id="24fee-124">In this version of <xref:System.Data.Linq.Table%601.Attach%2A>, the entity is assumed to be in its original value state.</span></span> <span data-ttu-id="24fee-125">このメソッドを呼び出した後、たとえば、クライアントから送信された追加データを使用して、フィールドを更新できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-125">After calling this method, you can then update its fields, for example with additional data sent from the client.</span></span>  
  
 <span data-ttu-id="24fee-126">新しいエンティティがアタッチされると、子コレクション (たとえば、関連付けられたテーブルのエンティティの `EntitySet` コレクション) の遅延ローダーが初期化されます。</span><span class="sxs-lookup"><span data-stu-id="24fee-126">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="24fee-127"><xref:System.Data.Linq.DataContext.SubmitChanges%2A> を呼び出すと、子コレクションのメンバーが `Unmodified` 状態になります。</span><span class="sxs-lookup"><span data-stu-id="24fee-127">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="24fee-128">子コレクションのメンバーを更新するには、明示的に `Attach` を呼び出して、そのエンティティを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-128">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="24fee-129">詳細については、「[N 層アプリケーションでのデータ取得および CUD 操作 (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="24fee-129">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications).</span></span>  
  
 <span data-ttu-id="24fee-130">シリアル化によってデタッチされていないエンティティを `Attach` しないでください。</span><span class="sxs-lookup"><span data-stu-id="24fee-130">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="24fee-131">シリアル化されていないエンティティは、そのエンティティが2番目のデータコンテキストによって追跡された場合に予期しない結果になる可能性のある遅延ローダーとの関連付けを維持します。</span><span class="sxs-lookup"><span data-stu-id="24fee-131">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * bool -&gt; unit" Usage="table.Attach (entity, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="24fee-132">アタッチするエンティティ。</span><span class="sxs-lookup"><span data-stu-id="24fee-132">The entity to be attached.</span></span></param>
        <param name="asModified"><span data-ttu-id="24fee-133">エンティティを変更されたとしてアタッチする場合は <see langword="true" />。エンティティを変更されていないとしてアタッチする場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="24fee-133"><see langword="true" /> to attach the entity as modified; <see langword="false" /> to attach the entity as unmodified.</span></span></param>
        <summary><span data-ttu-id="24fee-134">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にエンティティをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="24fee-134">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-135">アタッチ*済みとして*アタッチする場合、エンティティはバージョンメンバーを宣言するか、更新の競合チェックに関与しない必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-135">If attaching *as modified*, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="24fee-136">新しいエンティティがアタッチされると、子コレクション (たとえば、関連付けられたテーブルのエンティティの `EntitySet` コレクション) の遅延ローダーが初期化されます。</span><span class="sxs-lookup"><span data-stu-id="24fee-136">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="24fee-137"><xref:System.Data.Linq.DataContext.SubmitChanges%2A> を呼び出すと、子コレクションのメンバーが `Unmodified` 状態になります。</span><span class="sxs-lookup"><span data-stu-id="24fee-137">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="24fee-138">子コレクションのメンバーを更新するには、明示的に `Attach` を呼び出して、そのエンティティを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-138">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, TEntity original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, !TEntity original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, original As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, TEntity original);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * 'Entity -&gt; unit" Usage="table.Attach (entity, original)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="original" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="24fee-139">アタッチするエンティティ。</span><span class="sxs-lookup"><span data-stu-id="24fee-139">The entity to be attached.</span></span></param>
        <param name="original"><span data-ttu-id="24fee-140">元の状態を格納しているデータ メンバーと同じ種類のエンティティのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="24fee-140">An instance of the same entity type with data members that contain the original values.</span></span></param>
        <summary><span data-ttu-id="24fee-141">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> に、エンティティおよびその元の状態を指定して、エンティティをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="24fee-141">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-142">次の例では、`Customer` オブジェクトが既に正しく構成されています。</span><span class="sxs-lookup"><span data-stu-id="24fee-142">In the following example, the `Customer` object is already correctly configured.</span></span> <span data-ttu-id="24fee-143">更新プログラムを再生せずに `Attach` を呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="24fee-143">You can call `Attach` without having to replay the updates.</span></span>  
  
 <span data-ttu-id="24fee-144">新しいエンティティがアタッチされると、子コレクション (たとえば、関連付けられたテーブルのエンティティの `EntitySet` コレクション) の遅延ローダーが初期化されます。</span><span class="sxs-lookup"><span data-stu-id="24fee-144">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="24fee-145"><xref:System.Data.Linq.DataContext.SubmitChanges%2A> を呼び出すと、子コレクションのメンバーが `Unmodified` 状態になります。</span><span class="sxs-lookup"><span data-stu-id="24fee-145">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="24fee-146">子コレクションのメンバーを更新するには、明示的に `Attach` を呼び出して、そのエンティティを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-146">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 [!code-csharp[DLinqNTier#4](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#4)]
 [!code-vb[DLinqNTier#4](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AttachAll&lt;TSubEntity&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="24fee-147">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="24fee-147">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-148">アタッチ済みとしてアタッチする場合、エンティティはバージョンメンバーを宣言するか、更新の競合チェックに関与しない必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-148">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span>  
  
 <span data-ttu-id="24fee-149">新しいエンティティがアタッチされると、子コレクション (たとえば、関連付けられたテーブルのエンティティの `EntitySet` コレクション) の遅延ローダーが初期化されます。</span><span class="sxs-lookup"><span data-stu-id="24fee-149">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="24fee-150"><xref:System.Data.Linq.DataContext.SubmitChanges%2A> を呼び出すと、子コレクションのメンバーが `Unmodified` 状態になります。</span><span class="sxs-lookup"><span data-stu-id="24fee-150">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="24fee-151">子コレクションのメンバーを更新するには、明示的に `Attach` を呼び出して、そのエンティティを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-151">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="24fee-152">詳細については、「[N 層アプリケーションでのデータ取得および CUD 操作 (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="24fee-152">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.AttachAll entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="24fee-153">アタッチするエンティティの型。</span><span class="sxs-lookup"><span data-stu-id="24fee-153">The type of entities to attach.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="24fee-154">エンティティのコレクション。</span><span class="sxs-lookup"><span data-stu-id="24fee-154">The collection of entities.</span></span></param>
        <summary><span data-ttu-id="24fee-155">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="24fee-155">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-156">このメソッドは、コレクションのすべてのエンティティを新しい <xref:System.Data.Linq.DataContext>にアタッチします。</span><span class="sxs-lookup"><span data-stu-id="24fee-156">This method attaches all entities of a collection to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="24fee-157">新しいエンティティがアタッチされると、子コレクション (たとえば、関連付けられたテーブルのエンティティの `EntitySet` コレクション) の遅延ローダーが初期化されます。</span><span class="sxs-lookup"><span data-stu-id="24fee-157">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="24fee-158"><xref:System.Data.Linq.DataContext.SubmitChanges%2A> を呼び出すと、子コレクションのメンバーが `Unmodified` 状態になります。</span><span class="sxs-lookup"><span data-stu-id="24fee-158">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="24fee-159">子コレクションのメンバーを更新するには、明示的に `Attach` を呼び出して、そのエンティティを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-159">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="24fee-160">詳細については、「[N 層アプリケーションでのデータ取得および CUD 操作 (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="24fee-160">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities, bool asModified) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity), asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; * bool -&gt; unit" Usage="table.AttachAll (entities, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="24fee-161">アタッチするエンティティの型。</span><span class="sxs-lookup"><span data-stu-id="24fee-161">The type of entities to attach.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="24fee-162">エンティティのコレクション。</span><span class="sxs-lookup"><span data-stu-id="24fee-162">The collection of entities.</span></span></param>
        <param name="asModified"><span data-ttu-id="24fee-163">オブジェクトにタイムスタンプまたは RowVersion メンバーが含まれている場合は <see langword="true" />、元の値がオプティミスティック コンカレンシー チェックで使用されている場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="24fee-163"><see langword="true" /> if the object has a timestamp or RowVersion member; <see langword="false" /> if original values are being used for the optimistic concurrency check.</span></span></param>
        <summary><span data-ttu-id="24fee-164">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="24fee-164">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-165">このメソッドは、変更され*た状態また*は*変更*されていない状態の <xref:System.Data.Linq.DataContext> にコレクションのすべてのエンティティをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="24fee-165">This method attaches all entities of a collection to the <xref:System.Data.Linq.DataContext> in either a *modified* or *unmodified* state.</span></span> <span data-ttu-id="24fee-166">アタッチ済みとしてアタッチする場合、エンティティはバージョンメンバーを宣言するか、更新の競合チェックに関与しない必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-166">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="24fee-167">未変更のままアタッチする場合、エンティティは元の値を表すものと見なされます。</span><span class="sxs-lookup"><span data-stu-id="24fee-167">If attaching as unmodified, the entity is assumed to represent the original value.</span></span> <span data-ttu-id="24fee-168">このメソッドを呼び出した後、<xref:System.Data.Linq.DataContext.SubmitChanges%2A> が呼び出される前に、エンティティのフィールドをクライアントからの他の情報で変更できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-168">After calling this method, the entity's fields can be modified with other information from the client before <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="24fee-169">詳細については、「[N 層アプリケーションでのデータ取得および CUD 操作 (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="24fee-169">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications).</span></span>  
  
 <span data-ttu-id="24fee-170">新しいエンティティがアタッチされると、子コレクション (たとえば、関連付けられたテーブルのエンティティの `EntitySet` コレクション) の遅延ローダーが初期化されます。</span><span class="sxs-lookup"><span data-stu-id="24fee-170">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="24fee-171"><xref:System.Data.Linq.DataContext.SubmitChanges%2A> を呼び出すと、子コレクションのメンバーが `Unmodified` 状態になります。</span><span class="sxs-lookup"><span data-stu-id="24fee-171">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="24fee-172">子コレクションのメンバーを更新するには、明示的に `Attach` を呼び出して、そのエンティティを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-172">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24fee-173">次の例は、別の <xref:System.Data.Linq.DataContext> インスタンスの `Order` オブジェクトを更新する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="24fee-173">The following example shows how you can update an `Order` object on a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="24fee-174">この例では、データベースへの接続があり、そのデータベースの [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] ファイル (この場合は Northwind サンプルデータベース) を作成していることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="24fee-174">The example assumes that you have a connection to a database and have made a [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] file for it (in this case, the Northwind sample database).</span></span>  
  
 [!code-csharp[DLinqNTier#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#1)]
 [!code-vb[DLinqNTier#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#1)]  
  
 <span data-ttu-id="24fee-175">次の例では、アタッチするエンティティオブジェクトが別のオブジェクトとの外部キーの関係を持ち、キャッシュに格納されていますが、アタッチされていません。</span><span class="sxs-lookup"><span data-stu-id="24fee-175">In the following example, an entity object to be attached has a foreign key relation with another object and is stored in the cache but not attached.</span></span> <span data-ttu-id="24fee-176"><xref:System.Data.Linq.DataContext.SubmitChanges%2A>を呼び出すと、すべての外部キーオブジェクトの `Insert` 操作が `ChangeProcessor` によって追加されます。</span><span class="sxs-lookup"><span data-stu-id="24fee-176">When you call <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, the `ChangeProcessor` adds an `Insert` operation for all the foreign key objects.</span></span> <span data-ttu-id="24fee-177">これは、別の <xref:System.Data.Linq.DataContext> インスタンスでエンティティインスタンスを再利用した場合の副作用です。</span><span class="sxs-lookup"><span data-stu-id="24fee-177">This is a side-effect when an entity instance is re-used in a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="24fee-178">このため、[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] はオブジェクトの再利用をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="24fee-178">For this reason, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support re-use of objects.</span></span>  
  
 [!code-csharp[DlinqNTier#7](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#7)]
 [!code-vb[DlinqNTier#7](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#7)]  
  
 <span data-ttu-id="24fee-179">次の例は、顧客 A がすべての注文を取り消し、顧客 B がそれらの所有権を取得した場合のシナリオを示しています。</span><span class="sxs-lookup"><span data-stu-id="24fee-179">The following example shows a scenario in which Customer A has canceled all orders and Customer B has taken ownership of them.</span></span> <span data-ttu-id="24fee-180">顧客 A のすべての注文を同時にアタッチすることができます。</span><span class="sxs-lookup"><span data-stu-id="24fee-180">You can attach all orders of Customer A at the same time.</span></span>  
  
 [!code-csharp[DlinqNTier#3](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#3)]
 [!code-vb[DlinqNTier#3](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As DataContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataContext ^ Context { System::Data::Linq::DataContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Data.Linq.DataContext" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.Context" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Linq.ITable.Context</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="24fee-181">この <see cref="T:System.Data.Linq.DataContext" /> を取得するために使用されている <see cref="T:System.Data.Linq.Table`1" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="24fee-181">Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.Table`1" />.</span></span></summary>
        <value><span data-ttu-id="24fee-182">このテーブルを取得するために使用したデータ コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="24fee-182">The data context that has been used to retrieve this table.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void DeleteAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void DeleteAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.DeleteAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.DeleteAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="24fee-183">削除する要素の型。</span><span class="sxs-lookup"><span data-stu-id="24fee-183">The type of the elements to delete.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="24fee-184">削除するエンティティ。</span><span class="sxs-lookup"><span data-stu-id="24fee-184">The entities to delete.</span></span></param>
        <summary><span data-ttu-id="24fee-185">コレクションのすべてのエンティティを <see langword="pending delete" /> 状態にします。</span><span class="sxs-lookup"><span data-stu-id="24fee-185">Puts all entities from the collection into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-186">このメソッドを使用して保留中の削除状態になっているエンティティは、<xref:System.Data.Linq.DataContext.SubmitChanges%2A> が呼び出されるまで、クエリ結果からは消えません。</span><span class="sxs-lookup"><span data-stu-id="24fee-186">Entities that are put into the pending delete state with this method do not disappear from query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="24fee-187">切断されたエンティティは、削除する前にアタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-187">Disconnected entities must be attached before they can be deleted.</span></span> <span data-ttu-id="24fee-188">詳細については、「[N 層アプリケーションでのデータ取得および CUD 操作 (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="24fee-188">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications).</span></span>  
  
## Examples

<span data-ttu-id="24fee-189">次の例は、このメソッドの1つの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="24fee-189">The following example shows one use for this method:</span></span>
  
```csharp
IEnumerable<Customer> customersWithoutOrders = (from c in db.Customers  
   where c.Orders.Count == 0  
   select c).ToList();  

db.Customers.DeleteAllOnSubmit(customersWithoutOrders);  
db.SubmitChanges();  
```  
  
```vb
Dim customersWithoutOrders As IEnumerable(Of Customer) = (From c In db.Customers _   
    Where c.Orders.Count = 0 _   
    Select c).ToList()  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders)  
db.SubmitChanges()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteOnSubmit(!TEntity entity) cil managed" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteOnSubmit(TEntity entity);" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.DeleteOnSubmit : 'Entity -&gt; unit" Usage="table.DeleteOnSubmit entity" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteOnSubmit(!TEntity entity) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DeleteOnSubmit(TEntity entity);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member DeleteOnSubmit : 'Entity -&gt; unit&#xA;override this.DeleteOnSubmit : 'Entity -&gt; unit" Usage="table.DeleteOnSubmit entity" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable`1.DeleteOnSubmit(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="24fee-190">削除するエンティティ。</span><span class="sxs-lookup"><span data-stu-id="24fee-190">The entity to be deleted.</span></span></param>
        <summary><span data-ttu-id="24fee-191">このテーブルのエンティティを <see langword="pending delete" /> 状態にします。</span><span class="sxs-lookup"><span data-stu-id="24fee-191">Puts an entity from this table into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-192">削除されたエンティティは、<xref:System.Data.Linq.DataContext.SubmitChanges%2A> が呼び出されるまで、クエリ結果からは消えません。</span><span class="sxs-lookup"><span data-stu-id="24fee-192">The removed entity does not disappear from the query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="24fee-193">切断されたエンティティは、削除する前にアタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-193">Disconnected entities must first be attached before they can be deleted.</span></span> <span data-ttu-id="24fee-194">詳細については、「[N 層アプリケーションでのデータ取得および CUD 操作 (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="24fee-194">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications).</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] <span data-ttu-id="24fee-195">は連鎖削除操作をサポートせず、認識もしません。</span><span class="sxs-lookup"><span data-stu-id="24fee-195">does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="24fee-196">制約を持つテーブルの行を削除するには、データベース内の外部キー制約で `ON DELETE CASCADE` 規則を設定するか、独自のコードを使用して、親オブジェクトの削除を妨げる子オブジェクトを最初に削除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-196">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="24fee-197">それ以外の場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="24fee-197">Otherwise, an exception is thrown.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#3](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#3)]
 [!code-vb[System.Data.Linq.Table#3](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="table.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="24fee-198">コレクションを反復処理する列挙子を取得します。</span><span class="sxs-lookup"><span data-stu-id="24fee-198">Gets an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="24fee-199">コレクションの繰り返し処理に使用できる列挙子です。</span><span class="sxs-lookup"><span data-stu-id="24fee-199">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiedMembers">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModifiedMembers (entity As TEntity) As ModifiedMemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ GetModifiedMembers(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetModifiedMembers : 'Entity -&gt; System.Data.Linq.ModifiedMemberInfo[]" Usage="table.GetModifiedMembers entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="24fee-200">配列の取得元となるエンティティ。</span><span class="sxs-lookup"><span data-stu-id="24fee-200">The entity from which to get the array.</span></span></param>
        <summary><span data-ttu-id="24fee-201">現在の値と元の値が格納されている変更されたメンバーの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="24fee-201">Returns an array of modified members that contain their current and original values.</span></span></summary>
        <returns><span data-ttu-id="24fee-202">現在の値と元の値が格納されている変更されたメンバーの配列。</span><span class="sxs-lookup"><span data-stu-id="24fee-202">An array of modified members that contain their current and original values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNewBindingList">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IBindingList GetNewBindingList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.IBindingList GetNewBindingList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetNewBindingList" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNewBindingList () As IBindingList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::IBindingList ^ GetNewBindingList();" />
      <MemberSignature Language="F#" Value="member this.GetNewBindingList : unit -&gt; System.ComponentModel.IBindingList" Usage="table.GetNewBindingList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IBindingList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="24fee-203">データ ソースへのバインドのための新しいリストを作成します。</span><span class="sxs-lookup"><span data-stu-id="24fee-203">Creates a new list for binding to a data source.</span></span></summary>
        <returns><span data-ttu-id="24fee-204">データ ソースへのバインドのための新しい <see cref="T:System.ComponentModel.IBindingList" />。</span><span class="sxs-lookup"><span data-stu-id="24fee-204">A new <see cref="T:System.ComponentModel.IBindingList" /> for binding to a data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-205">返される一覧は、追加、削除、挿入、更新などの標準的な操作をサポートしますが、保存はプログラマが明示的に管理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-205">The returned list supports standard operations, such as additions, deletions, insertions, and updates, but saves must be explicitly managed by the programmer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalEntityState">
      <MemberSignature Language="C#" Value="public TEntity GetOriginalEntityState (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TEntity GetOriginalEntityState(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalEntityState (entity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TEntity GetOriginalEntityState(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetOriginalEntityState : 'Entity -&gt; 'Entity" Usage="table.GetOriginalEntityState entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="24fee-206">元の状態を返す対象のエンティティ。</span><span class="sxs-lookup"><span data-stu-id="24fee-206">The entity whose original state is to be returned.</span></span></param>
        <summary><span data-ttu-id="24fee-207">エンティティの元の状態を格納している <see cref="T:System.Data.Linq.Table`1" /> インスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="24fee-207">Returns a <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span></span></summary>
        <returns><span data-ttu-id="24fee-208">エンティティの元の状態を格納している <see cref="T:System.Data.Linq.Table`1" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="24fee-208">A <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-209">このメソッドは、エンティティの元の状態を返します。これは、エンティティが作成されたか、現在の <xref:System.Data.Linq.DataContext>にアタッチされたためです。</span><span class="sxs-lookup"><span data-stu-id="24fee-209">This method returns the original state of an entity since it was either created or attached to the current <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="24fee-210">シリアル化および逆シリアル化されたエンティティの元の状態は、独立した追跡メカニズムによって提供され、エンティティが新しい <xref:System.Data.Linq.DataContext>にアタッチされるときに指定される必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-210">The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="24fee-211">詳細については、「[N 層アプリケーションでのデータ取得および CUD 操作 (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="24fee-211">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](/dotnet/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void InsertAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void InsertAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.InsertAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.InsertAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="24fee-212">挿入する要素の型。</span><span class="sxs-lookup"><span data-stu-id="24fee-212">The type of the elements to insert.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="24fee-213">追加するエンティティ。</span><span class="sxs-lookup"><span data-stu-id="24fee-213">The entities to add.</span></span></param>
        <summary><span data-ttu-id="24fee-214"><see langword="pending insert" /> 状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティを追加します。</span><span class="sxs-lookup"><span data-stu-id="24fee-214">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a <see langword="pending insert" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-215">追加されたエンティティは、<xref:System.Data.Linq.DataContext.SubmitChanges%2A> が呼び出されるまで、クエリ結果には含まれません。</span><span class="sxs-lookup"><span data-stu-id="24fee-215">The added entities will not be in query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertOnSubmit(!TEntity entity) cil managed" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertOnSubmit(TEntity entity);" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.InsertOnSubmit : 'Entity -&gt; unit" Usage="table.InsertOnSubmit entity" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOnSubmit(!TEntity entity) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void InsertOnSubmit(TEntity entity);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member InsertOnSubmit : 'Entity -&gt; unit&#xA;override this.InsertOnSubmit : 'Entity -&gt; unit" Usage="table.InsertOnSubmit entity" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable`1.InsertOnSubmit(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="24fee-216">追加するエンティティ。</span><span class="sxs-lookup"><span data-stu-id="24fee-216">The entity to be added.</span></span></param>
        <summary><span data-ttu-id="24fee-217"><see langword="pending insert" /> 状態のエンティティをこの <see cref="T:System.Data.Linq.Table`1" /> に追加します。</span><span class="sxs-lookup"><span data-stu-id="24fee-217">Adds an entity in a <see langword="pending insert" /> state to this <see cref="T:System.Data.Linq.Table`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-218">追加されたエンティティは、<xref:System.Data.Linq.DataContext.SubmitChanges%2A> が呼び出されるまで、このテーブルのクエリ結果には表示されません。</span><span class="sxs-lookup"><span data-stu-id="24fee-218">The added entity will not appear in query results from this table until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.Table#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Linq.ITable.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="24fee-219">この <see cref="T:System.Data.Linq.Table`1" /> インスタンスに含まれているエンティティの型に主キーがあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="24fee-219">Gets a value that indicates whether the type of the entities contained in this <see cref="T:System.Data.Linq.Table`1" /> instance has a primary key.</span></span></summary>
        <value><span data-ttu-id="24fee-220">エンティティ型に主キーがない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="24fee-220"><see langword="true" /> if the entity type does not have a primary key; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;TEntity&gt; IEnumerable&lt;TEntity&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable&lt;TEntity&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of TEntity) Implements IEnumerable(Of TEntity).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;TEntity&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="table.System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="24fee-221">コレクションを反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="24fee-221">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="24fee-222">コレクションの繰り返し処理に使用できる列挙子です。</span><span class="sxs-lookup"><span data-stu-id="24fee-222">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="table.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="24fee-223">コレクションを反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="24fee-223">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="24fee-224">コレクションの繰り返し処理に使用できる列挙子です。</span><span class="sxs-lookup"><span data-stu-id="24fee-224">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-225">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-225">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-226">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Collections.Generic.IEnumerable%601> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-226">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.ComponentModel.IListSource.ContainsListCollection : bool" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="24fee-227">コレクションが <see cref="T:System.Collections.IList" /> オブジェクトのコレクションかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="24fee-227">Gets a value that indicates whether the collection is a collection of <see cref="T:System.Collections.IList" /> objects.</span></span></summary>
        <value><span data-ttu-id="24fee-228">コレクションが <see cref="T:System.Collections.IList" /> オブジェクトのコレクションである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="24fee-228"><see langword="true" /> if the collection is a collection of <see cref="T:System.Collections.IList" /> objects; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-229">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-229">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-230">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.ComponentModel.IListSource> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-230">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberSignature Language="F#" Value="abstract member System.ComponentModel.IListSource.GetList : unit -&gt; System.Collections.IList&#xA;override this.System.ComponentModel.IListSource.GetList : unit -&gt; System.Collections.IList" Usage="table.System.ComponentModel.IListSource.GetList " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="24fee-231">それ自体は <see cref="T:System.Collections.IList" /> を実装していないオブジェクトから、データ ソースに連結できる <see cref="T:System.Collections.IList" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="24fee-231">Returns an <see cref="T:System.Collections.IList" /> that can be bound to a data source from an object that does not implement an <see cref="T:System.Collections.IList" /> itself.</span></span></summary>
        <returns><span data-ttu-id="24fee-232">データ ソースにバインドできる <see cref="T:System.Collections.IList" />。</span><span class="sxs-lookup"><span data-stu-id="24fee-232">An <see cref="T:System.Collections.IList" /> that can be bound to a data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-233">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-233">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-234">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.ComponentModel.IListSource> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-234">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="24fee-235">逆シリアル化されたエンティティを、データベースで更新または削除できるように <see cref="T:System.Data.Linq.DataContext" /> の新しいインスタンスに関連付けることができます。</span><span class="sxs-lookup"><span data-stu-id="24fee-235">Allows deserialized entities to be associated with a new instance of a <see cref="T:System.Data.Linq.DataContext" /> so that they can be updated or deleted from the database.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity) = System::Data::Linq::ITable::Attach;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.Attach : obj -&gt; unit&#xA;override this.System.Data.Linq.ITable.Attach : obj -&gt; unit" Usage="table.System.Data.Linq.ITable.Attach entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="24fee-236">アタッチするエンティティ。</span><span class="sxs-lookup"><span data-stu-id="24fee-236">The entity to be attached.</span></span></param>
        <summary><span data-ttu-id="24fee-237">変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にエンティティをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="24fee-237">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-238">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-238">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-239">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-239">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, asModified As Boolean) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, bool asModified) = System::Data::Linq::ITable::Attach;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.Attach : obj * bool -&gt; unit&#xA;override this.System.Data.Linq.ITable.Attach : obj * bool -&gt; unit" Usage="table.System.Data.Linq.ITable.Attach (entity, asModified)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="24fee-240">アタッチするエンティティ。</span><span class="sxs-lookup"><span data-stu-id="24fee-240">The entity to be attached.</span></span></param>
        <param name="asModified"><span data-ttu-id="24fee-241">エンティティを変更されたとしてアタッチする場合は <see langword="true" />。エンティティを変更されていないとしてアタッチする場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="24fee-241"><see langword="true" /> to attach the entity as modified; <see langword="false" /> to attached the entity as unmodified.</span></span></param>
        <summary><span data-ttu-id="24fee-242">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="24fee-242">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-243">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-243">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-244">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-244">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, object original);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, object original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, original As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, System::Object ^ original) = System::Data::Linq::ITable::Attach;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.Attach : obj * obj -&gt; unit&#xA;override this.System.Data.Linq.ITable.Attach : obj * obj -&gt; unit" Usage="table.System.Data.Linq.ITable.Attach (entity, original)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="original" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="24fee-245">アタッチするエンティティ。</span><span class="sxs-lookup"><span data-stu-id="24fee-245">The entity to be attached.</span></span></param>
        <param name="original"><span data-ttu-id="24fee-246">元の状態を格納しているデータ メンバーと同じ種類のエンティティのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="24fee-246">An instance of the same entity type with data members that contain the original values.</span></span></param>
        <summary><span data-ttu-id="24fee-247">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> に、エンティティおよびその元の状態を指定して、エンティティをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="24fee-247">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-248">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-248">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-249">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-249">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.AttachAll">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="24fee-250">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="24fee-250">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::AttachAll;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.AttachAll : System.Collections.IEnumerable -&gt; unit&#xA;override this.System.Data.Linq.ITable.AttachAll : System.Collections.IEnumerable -&gt; unit" Usage="table.System.Data.Linq.ITable.AttachAll entities" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="24fee-251">アタッチされるエンティティのコレクション。</span><span class="sxs-lookup"><span data-stu-id="24fee-251">The collection of entities to be attached.</span></span></param>
        <summary><span data-ttu-id="24fee-252">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="24fee-252">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-253">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-253">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-254">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-254">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable, asModified As Boolean) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities, bool asModified) = System::Data::Linq::ITable::AttachAll;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.AttachAll : System.Collections.IEnumerable * bool -&gt; unit&#xA;override this.System.Data.Linq.ITable.AttachAll : System.Collections.IEnumerable * bool -&gt; unit" Usage="table.System.Data.Linq.ITable.AttachAll (entities, asModified)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="24fee-255">アタッチされるエンティティのコレクション。</span><span class="sxs-lookup"><span data-stu-id="24fee-255">The collection of entities to be attached.</span></span></param>
        <param name="asModified"><span data-ttu-id="24fee-256">エンティティを変更されたとしてアタッチする場合は <see langword="true" />。エンティティを変更されていないとしてアタッチする場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="24fee-256"><see langword="true" /> to attach the entities as modified; <see langword="false" /> to attach the entities as unmodified.</span></span></param>
        <summary><span data-ttu-id="24fee-257">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="24fee-257">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-258">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-258">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-259">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-259">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteAllOnSubmit (entities As IEnumerable) Implements ITable.DeleteAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::DeleteAllOnSubmit;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.DeleteAllOnSubmit : System.Collections.IEnumerable -&gt; unit&#xA;override this.System.Data.Linq.ITable.DeleteAllOnSubmit : System.Collections.IEnumerable -&gt; unit" Usage="table.System.Data.Linq.ITable.DeleteAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="24fee-260">削除されるエンティティ。</span><span class="sxs-lookup"><span data-stu-id="24fee-260">The entities being removed.</span></span></param>
        <summary><span data-ttu-id="24fee-261">コレクションのすべてのエンティティを <see langword="pending delete" /> 状態にします。</span><span class="sxs-lookup"><span data-stu-id="24fee-261">Puts all entities from the collection into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-262">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-262">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-263">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-263">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteOnSubmit (entity As Object) Implements ITable.DeleteOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::DeleteOnSubmit;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.DeleteOnSubmit : obj -&gt; unit&#xA;override this.System.Data.Linq.ITable.DeleteOnSubmit : obj -&gt; unit" Usage="table.System.Data.Linq.ITable.DeleteOnSubmit entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="24fee-264">削除するエンティティ。</span><span class="sxs-lookup"><span data-stu-id="24fee-264">The entity to be removed.</span></span></param>
        <summary><span data-ttu-id="24fee-265">このテーブルのエンティティを <see langword="pending delete" /> 状態にします。</span><span class="sxs-lookup"><span data-stu-id="24fee-265">Puts an entity from this table into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-266">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-266">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-267">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-267">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] <span data-ttu-id="24fee-268">は連鎖削除操作をサポートせず、認識もしません。</span><span class="sxs-lookup"><span data-stu-id="24fee-268">does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="24fee-269">制約を持つテーブルの行を削除するには、データベース内の外部キー制約で `ON DELETE CASCADE` 規則を設定するか、独自のコードを使用して、親オブジェクトの削除を妨げる子オブジェクトを最初に削除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="24fee-269">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="24fee-270">それ以外の場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="24fee-270">Otherwise, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetModifiedMembers">
      <MemberSignature Language="C#" Value="System.Data.Linq.ModifiedMemberInfo[] ITable.GetModifiedMembers (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Data.Linq.ModifiedMemberInfo[] System.Data.Linq.ITable.GetModifiedMembers(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetModifiedMembers (entity As Object) As ModifiedMemberInfo() Implements ITable.GetModifiedMembers" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ System.Data.Linq.ITable.GetModifiedMembers(System::Object ^ entity) = System::Data::Linq::ITable::GetModifiedMembers;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.GetModifiedMembers : obj -&gt; System.Data.Linq.ModifiedMemberInfo[]&#xA;override this.System.Data.Linq.ITable.GetModifiedMembers : obj -&gt; System.Data.Linq.ModifiedMemberInfo[]" Usage="table.System.Data.Linq.ITable.GetModifiedMembers entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="24fee-271">変更されたメンバーの取得元となるエンティティ。</span><span class="sxs-lookup"><span data-stu-id="24fee-271">The entity from which to obtain the modified members.</span></span></param>
        <summary><span data-ttu-id="24fee-272">現在の値と元の値が格納されている変更されたメンバーの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="24fee-272">Returns an array of modified members that contain their current and original values.</span></span></summary>
        <returns><span data-ttu-id="24fee-273">変更されたメンバーの配列。</span><span class="sxs-lookup"><span data-stu-id="24fee-273">An array of modified members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-274">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-274">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-275">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-275">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetOriginalEntityState">
      <MemberSignature Language="C#" Value="object ITable.GetOriginalEntityState (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Data.Linq.ITable.GetOriginalEntityState(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetOriginalEntityState (entity As Object) As Object Implements ITable.GetOriginalEntityState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Data.Linq.ITable.GetOriginalEntityState(System::Object ^ entity) = System::Data::Linq::ITable::GetOriginalEntityState;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.GetOriginalEntityState : obj -&gt; obj&#xA;override this.System.Data.Linq.ITable.GetOriginalEntityState : obj -&gt; obj" Usage="table.System.Data.Linq.ITable.GetOriginalEntityState entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="24fee-276">アクセスする元の状態を持つエンティティ。</span><span class="sxs-lookup"><span data-stu-id="24fee-276">The entity whose original state is to be accessed.</span></span></param>
        <summary><span data-ttu-id="24fee-277">特定のエンティティの元の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="24fee-277">Retrieves original values of a given entity.</span></span></summary>
        <returns><span data-ttu-id="24fee-278">元のエンティティのコピー。</span><span class="sxs-lookup"><span data-stu-id="24fee-278">A copy of the original entity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-279">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-279">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-280">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-280">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertAllOnSubmit (entities As IEnumerable) Implements ITable.InsertAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::InsertAllOnSubmit;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.InsertAllOnSubmit : System.Collections.IEnumerable -&gt; unit&#xA;override this.System.Data.Linq.ITable.InsertAllOnSubmit : System.Collections.IEnumerable -&gt; unit" Usage="table.System.Data.Linq.ITable.InsertAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="24fee-281">追加されるエンティティのコレクション。</span><span class="sxs-lookup"><span data-stu-id="24fee-281">The collection of entities to be added.</span></span></param>
        <summary><span data-ttu-id="24fee-282"><see langword="pending insert" /> 状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティを追加します。</span><span class="sxs-lookup"><span data-stu-id="24fee-282">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in an <see langword="pending insert" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-283">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-283">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-284">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-284">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertOnSubmit (entity As Object) Implements ITable.InsertOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::InsertOnSubmit;" />
      <MemberSignature Language="F#" Value="abstract member System.Data.Linq.ITable.InsertOnSubmit : obj -&gt; unit&#xA;override this.System.Data.Linq.ITable.InsertOnSubmit : obj -&gt; unit" Usage="table.System.Data.Linq.ITable.InsertOnSubmit entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="24fee-285">追加するエンティティ。</span><span class="sxs-lookup"><span data-stu-id="24fee-285">The entity to add.</span></span></param>
        <summary><span data-ttu-id="24fee-286"><see langword="pending insert" /> 状態のエンティティをこのテーブルに追加します。</span><span class="sxs-lookup"><span data-stu-id="24fee-286">Adds an entity in a <see langword="pending insert" /> state to this table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-287">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-287">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-288">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-288">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.ElementType">
      <MemberSignature Language="C#" Value="Type System.Linq.IQueryable.ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Linq.IQueryable.ElementType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ElementType As Type Implements IQueryable.ElementType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System::Linq::IQueryable::ElementType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Linq.IQueryable.ElementType : Type" Usage="System.Linq.IQueryable.ElementType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.ElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="24fee-289">このオブジェクトに関連付けられた式ツリーが実行されたときに返される要素の型を取得します。</span><span class="sxs-lookup"><span data-stu-id="24fee-289">Gets the type of the element(s) that are returned when the expression tree associated with this object is executed.</span></span></summary>
        <value><span data-ttu-id="24fee-290">このオブジェクトに関連付けられた式ツリーが実行されたときに返される要素の型。</span><span class="sxs-lookup"><span data-stu-id="24fee-290">The type of the element(s) that are returned when the expression tree associated with this object is executed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-291">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-291">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-292">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Linq.IQueryable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-292">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Expression">
      <MemberSignature Language="C#" Value="System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression System.Linq.IQueryable.Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Expression As Expression Implements IQueryable.Expression" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::Expressions::Expression ^ System::Linq::IQueryable::Expression { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Linq.IQueryable.Expression : System.Linq.Expressions.Expression" Usage="System.Linq.IQueryable.Expression" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.Expression</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="24fee-293"><see cref="T:System.Linq.IQueryable" /> のこのインスタンスに関連付けられている式ツリーを取得します。</span><span class="sxs-lookup"><span data-stu-id="24fee-293">Gets the expression tree that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span></span></summary>
        <value><span data-ttu-id="24fee-294"><see cref="T:System.Linq.Expressions.Expression" /> のこのインスタンスに関連付けられている <see cref="T:System.Linq.IQueryable" />。</span><span class="sxs-lookup"><span data-stu-id="24fee-294">The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-295">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-295">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-296">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Linq.IQueryable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-296">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Provider">
      <MemberSignature Language="C#" Value="System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider System.Linq.IQueryable.Provider" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Provider As IQueryProvider Implements IQueryable.Provider" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::IQueryProvider ^ System::Linq::IQueryable::Provider { System::Linq::IQueryProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Linq.IQueryable.Provider : System.Linq.IQueryProvider" Usage="System.Linq.IQueryable.Provider" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.Provider</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="24fee-297">このデータ ソースに関連付けられたクエリ プロバイダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="24fee-297">Gets the query provider that is associated with this data source.</span></span></summary>
        <value><span data-ttu-id="24fee-298">このデータ ソースに関連付けられた <see cref="T:System.Linq.IQueryProvider" />。</span><span class="sxs-lookup"><span data-stu-id="24fee-298">The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-299">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-299">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-300">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Linq.IQueryable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-300">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IQueryProvider.CreateQuery (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Linq.IQueryProvider.CreateQuery(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Function CreateQuery (expression As Expression) As IQueryable Implements IQueryProvider.CreateQuery" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberSignature Language="F#" Value="abstract member System.Linq.IQueryProvider.CreateQuery : System.Linq.Expressions.Expression -&gt; System.Linq.IQueryable&#xA;override this.System.Linq.IQueryProvider.CreateQuery : System.Linq.Expressions.Expression -&gt; System.Linq.IQueryable" Usage="table.System.Linq.IQueryProvider.CreateQuery expression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="24fee-301">評価を実行するためのクエリ式。</span><span class="sxs-lookup"><span data-stu-id="24fee-301">The query expression from which the evaluation is performed.</span></span></param>
        <summary><span data-ttu-id="24fee-302">指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable" /> オブジェクトを構築します。</span><span class="sxs-lookup"><span data-stu-id="24fee-302">Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="24fee-303">指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable" />。</span><span class="sxs-lookup"><span data-stu-id="24fee-303">An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-304">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-304">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-305">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Linq.IQueryProvider> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-305">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable&lt;TResult&gt; IQueryProvider.CreateQuery&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!TResult&gt; System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Function CreateQuery(Of TResult) (expression As Expression) As IQueryable(Of TResult) Implements IQueryProvider.CreateQuery" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual System::Linq::IQueryable&lt;TResult&gt; ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member System.Linq.IQueryProvider.CreateQuery : System.Linq.Expressions.Expression -&gt; System.Linq.IQueryable&lt;'Result&gt;&#xA;override this.System.Linq.IQueryProvider.CreateQuery : System.Linq.Expressions.Expression -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="table.System.Linq.IQueryProvider.CreateQuery expression" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="24fee-306">テーブル内のデータの型。</span><span class="sxs-lookup"><span data-stu-id="24fee-306">The type of the data in the table.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="24fee-307">評価を実行するためのクエリ式。</span><span class="sxs-lookup"><span data-stu-id="24fee-307">The query expression from which the evaluation is performed.</span></span></param>
        <summary><span data-ttu-id="24fee-308">指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable`1" /> オブジェクトを構築します。</span><span class="sxs-lookup"><span data-stu-id="24fee-308">Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="24fee-309">指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable`1" />。</span><span class="sxs-lookup"><span data-stu-id="24fee-309">An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-310">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-310">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-311">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Linq.IQueryProvider> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-311">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute">
      <MemberSignature Language="C#" Value="object IQueryProvider.Execute (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Linq.IQueryProvider.Execute(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Function Execute (expression As Expression) As Object Implements IQueryProvider.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberSignature Language="F#" Value="abstract member System.Linq.IQueryProvider.Execute : System.Linq.Expressions.Expression -&gt; obj&#xA;override this.System.Linq.IQueryProvider.Execute : System.Linq.Expressions.Expression -&gt; obj" Usage="table.System.Linq.IQueryProvider.Execute expression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="24fee-312">実行するクエリ式。</span><span class="sxs-lookup"><span data-stu-id="24fee-312">The query expression to execute.</span></span></param>
        <summary><span data-ttu-id="24fee-313">指定した式ツリーによって表されるクエリを実行します。</span><span class="sxs-lookup"><span data-stu-id="24fee-313">Executes the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="24fee-314">指定したクエリの実行結果の値。</span><span class="sxs-lookup"><span data-stu-id="24fee-314">The value that results from executing the specified query.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-315">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-315">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-316">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Linq.IQueryProvider> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-316">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="TResult IQueryProvider.Execute&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !!TResult System.Linq.IQueryProvider.Execute&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Function Execute(Of TResult) (expression As Expression) As TResult Implements IQueryProvider.Execute" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual TResult System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member System.Linq.IQueryProvider.Execute : System.Linq.Expressions.Expression -&gt; 'Result&#xA;override this.System.Linq.IQueryProvider.Execute : System.Linq.Expressions.Expression -&gt; 'Result" Usage="table.System.Linq.IQueryProvider.Execute expression" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="24fee-317">テーブル内のデータの型。</span><span class="sxs-lookup"><span data-stu-id="24fee-317">The type of the data in the table.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="24fee-318">実行するクエリ式。</span><span class="sxs-lookup"><span data-stu-id="24fee-318">The query expression to execute.</span></span></param>
        <summary><span data-ttu-id="24fee-319">指定した式ツリーによって表される、厳密に型指定されたクエリを実行します。</span><span class="sxs-lookup"><span data-stu-id="24fee-319">Executes the strongly-typed query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="24fee-320">指定したクエリの実行結果の値。</span><span class="sxs-lookup"><span data-stu-id="24fee-320">The value that results from executing the specified query.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24fee-321">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="24fee-321">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="24fee-322">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Linq.IQueryProvider> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="24fee-322">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="table.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="24fee-323">テーブルを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="24fee-323">Returns a string that represents the table.</span></span></summary>
        <returns><span data-ttu-id="24fee-324">テーブルの文字列表現。</span><span class="sxs-lookup"><span data-stu-id="24fee-324">A string representation of the table.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
