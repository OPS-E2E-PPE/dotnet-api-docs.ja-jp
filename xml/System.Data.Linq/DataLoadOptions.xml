<Type Name="DataLoadOptions" FullName="System.Data.Linq.DataLoadOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="72d660f8470f5e7cca019a9f65faf91310a47c7e" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73347085" /></Metadata><TypeSignature Language="C#" Value="public sealed class DataLoadOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataLoadOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.DataLoadOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataLoadOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataLoadOptions sealed" />
  <TypeSignature Language="F#" Value="type DataLoadOptions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="faea2-101">関連データの即時読み込みおよびフィルター処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="faea2-101">Provides for immediate loading and filtering of related data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="general"></a><span data-ttu-id="faea2-102">全般</span><span class="sxs-lookup"><span data-stu-id="faea2-102">General</span></span>  
 <span data-ttu-id="faea2-103">オブジェクトに対してクエリを実行すると、要求したオブジェクトだけが実際に取得されます。</span><span class="sxs-lookup"><span data-stu-id="faea2-103">When you query for an object, you actually retrieve only the object you requested.</span></span> <span data-ttu-id="faea2-104">*関連*オブジェクトが自動で同時に取得されることはありません。</span><span class="sxs-lookup"><span data-stu-id="faea2-104">The *related* objects are not automatically fetched at the same time.</span></span> <span data-ttu-id="faea2-105">(詳細については、「[リレーションシップ間のクエリ](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="faea2-105">(For more information, see [Querying Across Relationships](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md).)</span></span>  
  
 <span data-ttu-id="faea2-106"><xref:System.Data.Linq.DataLoadOptions> クラスには、指定された関連データをすぐに読み込むための2つのメソッドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="faea2-106">The <xref:System.Data.Linq.DataLoadOptions> class provides two methods to achieve immediate loading of specified related data.</span></span> <span data-ttu-id="faea2-107"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> メソッドを使用すると、メインターゲットに関連するデータを即時に読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="faea2-107">The <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> method allows for immediate loading of data related to the main target.</span></span> <span data-ttu-id="faea2-108"><xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> メソッドを使用すると、関連するオブジェクトをフィルター処理できます。</span><span class="sxs-lookup"><span data-stu-id="faea2-108">The <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> method allows for filtering related objects.</span></span>  
  
## <a name="rules"></a><span data-ttu-id="faea2-109">ルール</span><span class="sxs-lookup"><span data-stu-id="faea2-109">Rules</span></span>  
 <span data-ttu-id="faea2-110"><xref:System.Data.Linq.DataLoadOptions> の使用状況に関する次の規則に注意してください。</span><span class="sxs-lookup"><span data-stu-id="faea2-110">Note the following rules regarding <xref:System.Data.Linq.DataLoadOptions> usage:</span></span>  
  
-   <span data-ttu-id="faea2-111">最初のクエリの実行後に <xref:System.Data.Linq.DataContext> に <xref:System.Data.Linq.DataLoadOptions> を割り当てると、例外が生成されます。</span><span class="sxs-lookup"><span data-stu-id="faea2-111">Assigning a <xref:System.Data.Linq.DataLoadOptions> to a <xref:System.Data.Linq.DataContext> after the first query has been executed generates an exception.</span></span>  
  
-   <span data-ttu-id="faea2-112"><xref:System.Data.Linq.DataContext> に割り当てられた後に <xref:System.Data.Linq.DataLoadOptions> を変更すると、例外が生成される</span><span class="sxs-lookup"><span data-stu-id="faea2-112">Modifying a <xref:System.Data.Linq.DataLoadOptions> after it has been assigned to a <xref:System.Data.Linq.DataContext> generates an exception</span></span>  
  
## <a name="cycle-handling"></a><span data-ttu-id="faea2-113">サイクルの処理</span><span class="sxs-lookup"><span data-stu-id="faea2-113">Cycle Handling</span></span>  
 <span data-ttu-id="faea2-114"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> ディレクティブと <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> ディレクティブでサイクルを作成することはできません。</span><span class="sxs-lookup"><span data-stu-id="faea2-114"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> and <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> directives must not create cycles.</span></span> <span data-ttu-id="faea2-115">このようなグラフの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="faea2-115">The following represent examples of such graphs:</span></span>  
  
-   <span data-ttu-id="faea2-116">例 1: 自己再帰的</span><span class="sxs-lookup"><span data-stu-id="faea2-116">Example 1: Self recursive</span></span>  
  
    -   `dlo.LoadWith<Employee>(e => e.Reports);`  
  
-   <span data-ttu-id="faea2-117">例 2: バックポインター</span><span class="sxs-lookup"><span data-stu-id="faea2-117">Example 2: Back-pointers</span></span>  
  
    -   `dlo.LoadWith <Customer>(c => C.Orders);`  
  
    -   `dlo.LoadWith <Order>(o => o.Customer);`  
  
-   <span data-ttu-id="faea2-118">例 3: 長いサイクル</span><span class="sxs-lookup"><span data-stu-id="faea2-118">Example 3: Longer cycles</span></span>  
  
     <span data-ttu-id="faea2-119">これは、適切に正規化されたモデルでは発生しませんが、可能です。</span><span class="sxs-lookup"><span data-stu-id="faea2-119">Although this should not occur in a well-normalized model, it is possible.</span></span>  
  
    -   `dlo.LoadWith <A>(a => a.Bs);`  
  
    -   `dlo.LoadWith <B>(b => b.Cs);`  
  
    -   `dlo.LoadWith <C>(c => c.As);`  
  
-   <span data-ttu-id="faea2-120">例 4: 自己再帰的サブクエリ</span><span class="sxs-lookup"><span data-stu-id="faea2-120">Example 4: Self recursive subQueries</span></span>  
  
    -   `dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));`  
  
-   <span data-ttu-id="faea2-121">例 5: 再帰的なサブクエリを長くする</span><span class="sxs-lookup"><span data-stu-id="faea2-121">Example 5: Longer recursive subqueries</span></span>  
  
    -   `dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`  
  
    -   `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));`  
  
 <span data-ttu-id="faea2-122">これらのシナリオで何が起こるかを理解するのに役立つ一般的な規則を次に示します。</span><span class="sxs-lookup"><span data-stu-id="faea2-122">The following are some general rules that help you understand what occurs in these scenarios.</span></span>  
  
 <span data-ttu-id="faea2-123">**LoadWith**<xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> を呼び出すたびに、グラフに循環が導入されたかどうかがチェックされます。</span><span class="sxs-lookup"><span data-stu-id="faea2-123">**LoadWith** Each call to <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> checks whether cycles have been introduced into the graph.</span></span> <span data-ttu-id="faea2-124">(例1、2、3など) がある場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="faea2-124">If there are, as in Examples 1, 2, and 3, an exception is thrown.</span></span>  
  
 <span data-ttu-id="faea2-125">**AssociateWith**実行時のエンジンは、既存のサブクエリ句を式内のリレーションシップに適用しません。</span><span class="sxs-lookup"><span data-stu-id="faea2-125">**AssociateWith** The engine at run time does not apply the existing SubQuery clauses to the relationship inside the expression.</span></span>  
  
-   <span data-ttu-id="faea2-126">例4では、`Where` 句は、サブクエリ式自体によってサブフィルターされたものだけでなく、再帰的であるため、すべての `A`に対して実行されます。</span><span class="sxs-lookup"><span data-stu-id="faea2-126">In Example 4, the `Where` clause is executed against all `A`, not just the ones sub-filtered by the SubQuery expression itself (because that would be recursive)</span></span>  
  
-   <span data-ttu-id="faea2-127">例5では、`B`にサブクエリがある場合でも、最初の `Where` 句がすべての `B`に適用されます。</span><span class="sxs-lookup"><span data-stu-id="faea2-127">In Example 5, the first `Where` clause is applied to all the `B`s, even though there are subqueries on `B`.</span></span> <span data-ttu-id="faea2-128">2番目の `Where` 句は、`A`にサブクエリがある場合でも、すべての `A`に適用されます。</span><span class="sxs-lookup"><span data-stu-id="faea2-128">The second `Where` clause is applied to all the `A`s even though there are subqueries on `A`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="faea2-129">Northwind サンプルデータベースから `Customers` を取得する場合は、<xref:System.Data.Linq.DataLoadOptions> を使用して、`Orders` も取得するように指定できます。</span><span class="sxs-lookup"><span data-stu-id="faea2-129">When you retrieve `Customers` from the Northwind sample database, you can use <xref:System.Data.Linq.DataLoadOptions> to specify that `Orders` is also to be retrieved.</span></span> <span data-ttu-id="faea2-130">取得する `Orders` のサブセットを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="faea2-130">You can even specify which subset of `Orders` to retrieve.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLoadOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataLoadOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="faea2-131"><see cref="T:System.Data.Linq.DataLoadOptions" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="faea2-131">Initializes a new instance of the <see cref="T:System.Data.Linq.DataLoadOptions" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith">
      <MemberSignature Language="C#" Value="public void AssociateWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssociateWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberSignature Language="F#" Value="member this.AssociateWith : System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="dataLoadOptions.AssociateWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="faea2-132">特定の一対多のフィールドまたは一対多のプロパティで使用するクエリを識別します。</span><span class="sxs-lookup"><span data-stu-id="faea2-132">Identifies the query to be used on a particular one-to-many field or property.</span></span> <span data-ttu-id="faea2-133">次の点に注意してください。</span><span class="sxs-lookup"><span data-stu-id="faea2-133">Note the following:</span></span>  
  
 <span data-ttu-id="faea2-134">式の先頭が一対多のリレーションシップを表すフィールドまたはプロパティでない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="faea2-134">If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</span></span>  
  
 <span data-ttu-id="faea2-135">式に有効な演算子ではない演算子がある場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="faea2-135">If an operator other than a valid operator appears in the expression, an exception is thrown.</span></span> <span data-ttu-id="faea2-136">有効な演算子は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="faea2-136">Valid operators are as follows:</span></span>  
  
 <span data-ttu-id="faea2-137">Where</span><span class="sxs-lookup"><span data-stu-id="faea2-137">Where</span></span>  
  
 <span data-ttu-id="faea2-138">OrderBy</span><span class="sxs-lookup"><span data-stu-id="faea2-138">OrderBy</span></span>  
  
 <span data-ttu-id="faea2-139">ThenBy</span><span class="sxs-lookup"><span data-stu-id="faea2-139">ThenBy</span></span>  
  
 <span data-ttu-id="faea2-140">OrderByDescending</span><span class="sxs-lookup"><span data-stu-id="faea2-140">OrderByDescending</span></span>  
  
 <span data-ttu-id="faea2-141">ThenByDescending</span><span class="sxs-lookup"><span data-stu-id="faea2-141">ThenByDescending</span></span>  
  
 <span data-ttu-id="faea2-142">Take</span><span class="sxs-lookup"><span data-stu-id="faea2-142">Take</span></span></param>
        <summary><span data-ttu-id="faea2-143">特定のリレーションシップについて取得するオブジェクトをフィルター処理します。</span><span class="sxs-lookup"><span data-stu-id="faea2-143">Filters the objects retrieved for a particular relationship.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faea2-144">次の例では、内側のループは、現在出荷されていない `Orders` に対してのみ反復処理を行います。</span><span class="sxs-lookup"><span data-stu-id="faea2-144">In the following example, the inner loop iterates only over those `Orders` that have not been shipped today.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AssociateWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void AssociateWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="member this.AssociateWith : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; unit" Usage="dataLoadOptions.AssociateWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="faea2-145">クエリする型。</span><span class="sxs-lookup"><span data-stu-id="faea2-145">The type that is queried against.</span></span>  
  
 <span data-ttu-id="faea2-146">型が割り当てられていない場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="faea2-146">If the type is unmapped, an exception is thrown.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="faea2-147">特定の一対多のフィールドまたは一対多のプロパティで使用するクエリを識別します。</span><span class="sxs-lookup"><span data-stu-id="faea2-147">Identifies the query to be used on a particular one-to-many field or property.</span></span> <span data-ttu-id="faea2-148">次の点に注意してください。</span><span class="sxs-lookup"><span data-stu-id="faea2-148">Note the following:</span></span>  
  
 <span data-ttu-id="faea2-149">式の先頭が一対多のリレーションシップを表すフィールドまたはプロパティでない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="faea2-149">If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</span></span>  
  
 <span data-ttu-id="faea2-150">式に有効な演算子ではない演算子がある場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="faea2-150">If an operator other than a valid operator appears in the expression, an exception is thrown.</span></span> <span data-ttu-id="faea2-151">有効な演算子は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="faea2-151">Valid operators are as follows:</span></span>  
  
 <span data-ttu-id="faea2-152">Where</span><span class="sxs-lookup"><span data-stu-id="faea2-152">Where</span></span>  
  
 <span data-ttu-id="faea2-153">OrderBy</span><span class="sxs-lookup"><span data-stu-id="faea2-153">OrderBy</span></span>  
  
 <span data-ttu-id="faea2-154">ThenBy</span><span class="sxs-lookup"><span data-stu-id="faea2-154">ThenBy</span></span>  
  
 <span data-ttu-id="faea2-155">OrderByDescending</span><span class="sxs-lookup"><span data-stu-id="faea2-155">OrderByDescending</span></span>  
  
 <span data-ttu-id="faea2-156">ThenByDescending</span><span class="sxs-lookup"><span data-stu-id="faea2-156">ThenByDescending</span></span>  
  
 <span data-ttu-id="faea2-157">Take</span><span class="sxs-lookup"><span data-stu-id="faea2-157">Take</span></span></param>
        <summary><span data-ttu-id="faea2-158">特定のリレーションシップについて取得するオブジェクトをフィルター処理します。</span><span class="sxs-lookup"><span data-stu-id="faea2-158">Filters objects retrieved for a particular relationship.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faea2-159">サイクルを回避する方法の詳細については、「<xref:System.Data.Linq.DataLoadOptions>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="faea2-159">For information about how to avoid cycles, see <xref:System.Data.Linq.DataLoadOptions>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="faea2-160">次の例では、内側のループは、現在出荷されていない `Orders` に対してのみ反復処理を行います。</span><span class="sxs-lookup"><span data-stu-id="faea2-160">In the following example, the inner loop iterates only over those `Orders` that have not been shipped today.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssociationCriteria">
      <MemberSignature Language="C#" Value="public bool GetAssociationCriteria (System.Reflection.MemberInfo memberInfo, out System.Linq.Expressions.LambdaExpression associationCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetAssociationCriteria(class System.Reflection.MemberInfo memberInfo, [out] class System.Linq.Expressions.LambdaExpression&amp; associationCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.GetAssociationCriteria(System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetAssociationCriteria(System::Reflection::MemberInfo ^ memberInfo, [Runtime::InteropServices::Out] System::Linq::Expressions::LambdaExpression ^ % associationCriteria);" />
      <MemberSignature Language="F#" Value="member this.GetAssociationCriteria : System.Reflection.MemberInfo * LambdaExpression -&gt; bool" Usage="dataLoadOptions.GetAssociationCriteria (memberInfo, associationCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="associationCriteria" Type="System.Linq.Expressions.LambdaExpression" RefType="out" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="associationCriteria">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImmediate">
      <MemberSignature Language="C#" Value="public bool IsImmediate (System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsImmediate(class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.IsImmediate(System.Reflection.MemberInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsImmediate(System::Reflection::MemberInfo ^ memberInfo);" />
      <MemberSignature Language="F#" Value="member this.IsImmediate : System.Reflection.MemberInfo -&gt; bool" Usage="dataLoadOptions.IsImmediate memberInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith">
      <MemberSignature Language="C#" Value="public void LoadWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberSignature Language="F#" Value="member this.LoadWith : System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="dataLoadOptions.LoadWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="faea2-161">関連する素材を識別するラムダ式。</span><span class="sxs-lookup"><span data-stu-id="faea2-161">A lambda expression that identifies the related material.</span></span></param>
        <summary><span data-ttu-id="faea2-162">ラムダ式を使用して、メイン ターゲットに関連する指定したデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="faea2-162">Retrieves specified data related to the main target by using a lambda expression.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faea2-163">次の例では、クエリを実行すると、ロンドンに住んでいるすべての `Orders` のすべての `Customers` が取得されます。</span><span class="sxs-lookup"><span data-stu-id="faea2-163">In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed.</span></span> <span data-ttu-id="faea2-164">その結果、それ以降 `Orders` オブジェクトの `Customer` プロパティにアクセスしても、新しいデータベース クエリは実行されません。</span><span class="sxs-lookup"><span data-stu-id="faea2-164">As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void LoadWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void LoadWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="member this.LoadWith : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; unit" Usage="dataLoadOptions.LoadWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="faea2-165">クエリする型。</span><span class="sxs-lookup"><span data-stu-id="faea2-165">Type that is queried against.</span></span>  
  
 <span data-ttu-id="faea2-166">この型が割り当てられていない場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="faea2-166">If this type is unmapped, an exception is thrown.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="faea2-167">取得するフィールドまたはプロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="faea2-167">Identifies the field or property to be retrieved.</span></span>  
  
 <span data-ttu-id="faea2-168">一対一または一対多のリレーションシップを表すフィールドまたはプロパティが式で識別されない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="faea2-168">If the expression does not identify a field or property that represents a one-to-one or one-to-many relationship, an exception is thrown.</span></span></param>
        <summary><span data-ttu-id="faea2-169">T 型のオブジェクトにクエリが送信されるときに取得するサブオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="faea2-169">Specifies which sub-objects to retrieve when a query is submitted for an object of type T.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faea2-170">2つのレベルのリレーションシップ (`Orders.OrderDetails`など) の読み込みを指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="faea2-170">You cannot specify the loading of two levels of relationships (for example, `Orders.OrderDetails`).</span></span> <span data-ttu-id="faea2-171">これらのシナリオでは、2つの異なる <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> メソッドを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="faea2-171">In these scenarios you must specify two separate <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> methods.</span></span>  
  
 <span data-ttu-id="faea2-172">サイクルを回避するには、<xref:System.Data.Linq.DataLoadOptions>の「解説」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="faea2-172">To avoid cycling, see Remarks section in <xref:System.Data.Linq.DataLoadOptions>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="faea2-173">次の例では、クエリを実行すると、ロンドンに住んでいるすべての `Orders` のすべての `Customers` が取得されます。</span><span class="sxs-lookup"><span data-stu-id="faea2-173">In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed.</span></span> <span data-ttu-id="faea2-174">その結果、それ以降 `Orders` オブジェクトの `Customer` プロパティにアクセスしても、新しいデータベース クエリは実行されません。</span><span class="sxs-lookup"><span data-stu-id="faea2-174">As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
