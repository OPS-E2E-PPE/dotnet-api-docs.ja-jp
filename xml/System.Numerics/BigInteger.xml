<Type Name="BigInteger" FullName="System.Numerics.BigInteger">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7781275790d767e13f9141ec64b2e3ee6b689c8e" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83449178" /></Metadata><TypeSignature Language="C#" Value="public struct BigInteger : IComparable, IComparable&lt;System.Numerics.BigInteger&gt;, IEquatable&lt;System.Numerics.BigInteger&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit BigInteger extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IEquatable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IFormattable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.BigInteger" />
  <TypeSignature Language="VB.NET" Value="Public Structure BigInteger&#xA;Implements IComparable, IComparable(Of BigInteger), IEquatable(Of BigInteger), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class BigInteger : IComparable, IComparable&lt;System::Numerics::BigInteger&gt;, IEquatable&lt;System::Numerics::BigInteger&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type BigInteger = struct&#xA;    interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit BigInteger extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IEquatable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IFormattable" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Numerics</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Numerics</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Numerics" FromVersion="4.0.0.0" To="System.Runtime.Numerics" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.Numerics" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Numerics.BigInteger&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Numerics.BigInteger&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="67038-101">任意の大きさを持つ符号付き整数を表します。</span><span class="sxs-lookup"><span data-stu-id="67038-101">Represents an arbitrarily large signed integer.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-102"><xref:System.Numerics.BigInteger> 型は、理論上の値が上限または下限を持たない、任意の大きい整数を表す不変の型です。</span><span class="sxs-lookup"><span data-stu-id="67038-102">The <xref:System.Numerics.BigInteger> type is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds.</span></span> <span data-ttu-id="67038-103"><xref:System.Numerics.BigInteger> 型のメンバーは、他の整数型 (<xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.Int64>、<xref:System.SByte>、<xref:System.UInt16>、<xref:System.UInt32>、<xref:System.UInt64> 型) のメンバーと密接に連携しています。</span><span class="sxs-lookup"><span data-stu-id="67038-103">The members of the <xref:System.Numerics.BigInteger> type closely parallel those of other integral types (the <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, and <xref:System.UInt64> types).</span></span> <span data-ttu-id="67038-104">この型は、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]内の他の整数型とは異なり、`MinValue` と `MaxValue` プロパティによって指定された範囲を持ちます。</span><span class="sxs-lookup"><span data-stu-id="67038-104">This type differs from the other integral types in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], which have a range indicated by their `MinValue` and `MaxValue` properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67038-105"><xref:System.Numerics.BigInteger> 型は不変であるため (「変更性[と BigInteger 構造体](#mutability)」を参照してください)、上限または下限がないため、<xref:System.Numerics.BigInteger> 値の増加を引き起こすすべての操作に対して <xref:System.OutOfMemoryException> をスローすることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-105">Because the <xref:System.Numerics.BigInteger> type is immutable (see [Mutability and the BigInteger Structure](#mutability)) and because it has no upper or lower bounds, an <xref:System.OutOfMemoryException> can be thrown for any operation that causes a <xref:System.Numerics.BigInteger> value to grow too large.</span></span>  
  
## <a name="instantiating-a-biginteger-object"></a><span data-ttu-id="67038-106">BigInteger オブジェクトのインスタンス化</span><span class="sxs-lookup"><span data-stu-id="67038-106">Instantiating a BigInteger Object</span></span>  
 <span data-ttu-id="67038-107"><xref:System.Numerics.BigInteger> オブジェクトは、次のいくつかの方法でインスタンス化できます。</span><span class="sxs-lookup"><span data-stu-id="67038-107">You can instantiate a <xref:System.Numerics.BigInteger> object in several ways:</span></span>  
  
-   <span data-ttu-id="67038-108">`new` キーワードを使用して、整数または浮動小数点値をパラメーターとして <xref:System.Numerics.BigInteger> コンストラクターに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-108">You can use the `new` keyword and provide any integral or floating-point value as a parameter to the <xref:System.Numerics.BigInteger> constructor.</span></span> <span data-ttu-id="67038-109">(浮動小数点値は、<xref:System.Numerics.BigInteger>に割り当てられる前に切り捨てられます)。次の例は、`new` キーワードを使用して <xref:System.Numerics.BigInteger> 値をインスタンス化する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-109">(Floating-point values are truncated before they are assigned to the <xref:System.Numerics.BigInteger>.) The following example illustrates how to use the `new` keyword to instantiate <xref:System.Numerics.BigInteger> values.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#1)]
     [!code-vb[System.Numerics.BigInteger.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#1)]  
  
-   <span data-ttu-id="67038-110"><xref:System.Numerics.BigInteger> 変数を宣言し、その値が整数型である限り、数値型と同様に値を割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-110">You can declare a <xref:System.Numerics.BigInteger> variable and assign it a value just as you would any numeric type, as long as that value is an integral type.</span></span> <span data-ttu-id="67038-111">次の例では、割り当てを使用して、<xref:System.Int64>から <xref:System.Numerics.BigInteger> 値を作成します。</span><span class="sxs-lookup"><span data-stu-id="67038-111">The following example uses assignment to create a <xref:System.Numerics.BigInteger> value from an <xref:System.Int64>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#2)]
     [!code-vb[System.Numerics.BigInteger.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#2)]  
  
-   <span data-ttu-id="67038-112">値をキャストするか、最初に変換する場合は、<xref:System.Numerics.BigInteger> オブジェクトに10進数または浮動小数点値を割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-112">You can assign a decimal or floating-point value to a <xref:System.Numerics.BigInteger> object if you cast the value or convert it first.</span></span> <span data-ttu-id="67038-113">次の例では、<xref:System.Double> C#と <xref:System.Decimal> 値を明示的にキャスト (Visual Basic) するか、<xref:System.Numerics.BigInteger>に変換します。</span><span class="sxs-lookup"><span data-stu-id="67038-113">The following example explicitly casts (in C#) or converts (in Visual Basic) a <xref:System.Double> and a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#3)]
     [!code-vb[System.Numerics.BigInteger.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#3)]  
  
 <span data-ttu-id="67038-114">これらのメソッドを使用すると、既存の数値型のいずれかの範囲内にある値を持つ <xref:System.Numerics.BigInteger> オブジェクトをインスタンス化できます。</span><span class="sxs-lookup"><span data-stu-id="67038-114">These methods enable you to instantiate a <xref:System.Numerics.BigInteger> object whose value is in the range of one of the existing numeric types only.</span></span> <span data-ttu-id="67038-115">次の3つの方法のいずれかで、既存の数値型の範囲を超える値を持つ <xref:System.Numerics.BigInteger> オブジェクトをインスタンス化できます。</span><span class="sxs-lookup"><span data-stu-id="67038-115">You can instantiate a <xref:System.Numerics.BigInteger> object whose value can exceed the range of the existing numeric types in one of three ways:</span></span>  
  
-   <span data-ttu-id="67038-116">`new` キーワードを使用して、任意のサイズのバイト配列を <xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=nameWithType> コンストラクターに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-116">You can use the `new` keyword and provide a byte array of any size to the <xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="67038-117">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="67038-117">For example:</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#4)]
     [!code-vb[System.Numerics.BigInteger.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#4)]  
  
-   <span data-ttu-id="67038-118"><xref:System.Numerics.BigInteger.Parse%2A> または <xref:System.Numerics.BigInteger.TryParse%2A> メソッドを呼び出して、数値の文字列形式を <xref:System.Numerics.BigInteger>に変換することができます。</span><span class="sxs-lookup"><span data-stu-id="67038-118">You can call the <xref:System.Numerics.BigInteger.Parse%2A> or <xref:System.Numerics.BigInteger.TryParse%2A> methods to convert the string representation of a number to a <xref:System.Numerics.BigInteger>.</span></span> <span data-ttu-id="67038-119">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="67038-119">For example:</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#5)]
     [!code-vb[System.Numerics.BigInteger.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#5)]  
  
-   <span data-ttu-id="67038-120">数値式に対して何らかの操作を実行し、計算された <xref:System.Numerics.BigInteger> 結果を返す `static` (Visual Basic で`Shared`) <xref:System.Numerics.BigInteger> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-120">You can call a `static` (`Shared` in Visual Basic) <xref:System.Numerics.BigInteger> method that performs some operation on a numeric expression and returns a calculated <xref:System.Numerics.BigInteger> result.</span></span> <span data-ttu-id="67038-121">次の例では、<xref:System.UInt64.MaxValue?displayProperty=nameWithType> し、結果を <xref:System.Numerics.BigInteger>に割り当てています。</span><span class="sxs-lookup"><span data-stu-id="67038-121">The following example does this by cubing <xref:System.UInt64.MaxValue?displayProperty=nameWithType> and assigning the result to a <xref:System.Numerics.BigInteger>.</span></span>  
  
     [!code-csharp[System.Numerics.BigInteger.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#6)]
     [!code-vb[System.Numerics.BigInteger.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#6)]  
  
 <span data-ttu-id="67038-122"><xref:System.Numerics.BigInteger> の初期化されていない値は <xref:System.Numerics.BigInteger.Zero%2A>です。</span><span class="sxs-lookup"><span data-stu-id="67038-122">The uninitialized value of a <xref:System.Numerics.BigInteger> is <xref:System.Numerics.BigInteger.Zero%2A>.</span></span>  
  
## <a name="performing-operations-on-biginteger-values"></a><span data-ttu-id="67038-123">BigInteger 値に対する操作の実行</span><span class="sxs-lookup"><span data-stu-id="67038-123">Performing Operations on BigInteger Values</span></span>  
 <span data-ttu-id="67038-124">他の整数型を使用する場合と同様に、<xref:System.Numerics.BigInteger> インスタンスを使用できます。</span><span class="sxs-lookup"><span data-stu-id="67038-124">You can use a <xref:System.Numerics.BigInteger> instance as you would use any other integral type.</span></span> <span data-ttu-id="67038-125"><xref:System.Numerics.BigInteger> は、標準の数値演算子をオーバーロードして、加算、減算、除算、乗算、減算、否定、単項否定などの基本的な算術演算を実行できるようにします。</span><span class="sxs-lookup"><span data-stu-id="67038-125"><xref:System.Numerics.BigInteger> overloads the standard numeric operators to enable you to perform basic mathematical operations such as addition, subtraction, division, multiplication, subtraction, negation, and unary negation.</span></span> <span data-ttu-id="67038-126">標準の数値演算子を使用して、2つの <xref:System.Numerics.BigInteger> 値を相互に比較することもできます。</span><span class="sxs-lookup"><span data-stu-id="67038-126">You can also use the standard numeric operators to compare two <xref:System.Numerics.BigInteger> values with each other.</span></span> <span data-ttu-id="67038-127">他の整数型と同様に <xref:System.Numerics.BigInteger> では、ビットごとの `And`、`Or`、`XOr`、左シフト、右シフト演算子もサポートされています。</span><span class="sxs-lookup"><span data-stu-id="67038-127">Like the other integral types, <xref:System.Numerics.BigInteger> also supports the bitwise `And`, `Or`, `XOr`, left shift, and right shift operators.</span></span> <span data-ttu-id="67038-128">カスタム演算子をサポートしていない言語の場合、<xref:System.Numerics.BigInteger> 構造体には、数値演算を実行するための同等のメソッドも用意されています。</span><span class="sxs-lookup"><span data-stu-id="67038-128">For languages that do not support custom operators, the <xref:System.Numerics.BigInteger> structure also provides equivalent methods for performing mathematical operations.</span></span> <span data-ttu-id="67038-129">これには、<xref:System.Numerics.BigInteger.Add%2A>、<xref:System.Numerics.BigInteger.Divide%2A>、<xref:System.Numerics.BigInteger.Multiply%2A>、<xref:System.Numerics.BigInteger.Negate%2A>、<xref:System.Numerics.BigInteger.Subtract%2A>などが含まれます。</span><span class="sxs-lookup"><span data-stu-id="67038-129">These include <xref:System.Numerics.BigInteger.Add%2A>, <xref:System.Numerics.BigInteger.Divide%2A>, <xref:System.Numerics.BigInteger.Multiply%2A>, <xref:System.Numerics.BigInteger.Negate%2A>, <xref:System.Numerics.BigInteger.Subtract%2A>, and several others.</span></span>  
  
 <span data-ttu-id="67038-130"><xref:System.Numerics.BigInteger> 構造体の多くのメンバーは、他の整数型のメンバーに直接対応しています。</span><span class="sxs-lookup"><span data-stu-id="67038-130">Many members of the <xref:System.Numerics.BigInteger> structure correspond directly to members of the other integral types.</span></span> <span data-ttu-id="67038-131">さらに、<xref:System.Numerics.BigInteger> は次のようなメンバーを追加します。</span><span class="sxs-lookup"><span data-stu-id="67038-131">In addition, <xref:System.Numerics.BigInteger> adds members such as the following:</span></span>  
  
-   <span data-ttu-id="67038-132"><xref:System.Numerics.BigInteger.Sign%2A>。 <xref:System.Numerics.BigInteger> 値の符号を示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-132"><xref:System.Numerics.BigInteger.Sign%2A>, which returns a value that indicates the sign of a <xref:System.Numerics.BigInteger> value.</span></span>  
  
-   <span data-ttu-id="67038-133"><xref:System.Numerics.BigInteger.Abs%2A>、<xref:System.Numerics.BigInteger> 値の絶対値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-133"><xref:System.Numerics.BigInteger.Abs%2A>, which returns the absolute value of a <xref:System.Numerics.BigInteger> value.</span></span>  
  
-   <span data-ttu-id="67038-134">除算演算の商と剰余の両方を返す <xref:System.Numerics.BigInteger.DivRem%2A>。</span><span class="sxs-lookup"><span data-stu-id="67038-134"><xref:System.Numerics.BigInteger.DivRem%2A>, which returns both the quotient and remainder of a division operation.</span></span>  
  
-   <span data-ttu-id="67038-135"><xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>、2つの <xref:System.Numerics.BigInteger> 値の最大公約数を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-135"><xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>, which returns the greatest common divisor of two <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="67038-136">これらの追加メンバーの多くは、プリミティブ数値型を操作するための機能を提供する <xref:System.Math> クラスのメンバーに対応しています。</span><span class="sxs-lookup"><span data-stu-id="67038-136">Many of these additional members correspond to the members of the <xref:System.Math> class, which provides the functionality to work with the primitive numeric types.</span></span>  
  
<a name="mutability"></a>   
## <a name="mutability-and-the-biginteger-structure"></a><span data-ttu-id="67038-137">可能性と BigInteger 構造体</span><span class="sxs-lookup"><span data-stu-id="67038-137">Mutability and the BigInteger Structure</span></span>  
 <span data-ttu-id="67038-138">次の例では、<xref:System.Numerics.BigInteger> オブジェクトをインスタンス化し、その値を1つインクリメントします。</span><span class="sxs-lookup"><span data-stu-id="67038-138">The following example instantiates a <xref:System.Numerics.BigInteger> object and then increments its value by one.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#1)]  
  
 <span data-ttu-id="67038-139">この例では、既存のオブジェクトの値を変更するように見えますが、これは当てはまりません。</span><span class="sxs-lookup"><span data-stu-id="67038-139">Although this example appears to modify the value of the existing object, this is not the case.</span></span> <span data-ttu-id="67038-140"><xref:System.Numerics.BigInteger> オブジェクトは不変です。つまり、内部的には、共通言語ランタイムによって新しい <xref:System.Numerics.BigInteger> オブジェクトが作成され、その前の値より1つ大きい値が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="67038-140"><xref:System.Numerics.BigInteger> objects are immutable, which means that internally, the common language runtime actually creates a new <xref:System.Numerics.BigInteger> object and assigns it a value one greater than its previous value.</span></span> <span data-ttu-id="67038-141">この新しいオブジェクトが呼び出し元に返されます。</span><span class="sxs-lookup"><span data-stu-id="67038-141">This new object is then returned to the caller.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67038-142">.NET Framework 内のその他の数値型も変更できません。</span><span class="sxs-lookup"><span data-stu-id="67038-142">The other numeric types in the .NET Framework are also immutable.</span></span> <span data-ttu-id="67038-143">ただし、<xref:System.Numerics.BigInteger> の型には上限や下限がないため、その値は非常に大きくなり、パフォーマンスに大きな影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="67038-143">However, because the <xref:System.Numerics.BigInteger> type has no upper or lower bounds, its values can grow extremely large and have a measurable impact on performance.</span></span>  
  
 <span data-ttu-id="67038-144">このプロセスは呼び出し元に対して透過的ですが、パフォーマンスが低下します。</span><span class="sxs-lookup"><span data-stu-id="67038-144">Although this process is transparent to the caller, it does incur a performance penalty.</span></span> <span data-ttu-id="67038-145">場合によっては、<xref:System.Numerics.BigInteger> 値が非常に大きい場合にループで繰り返し操作を実行すると、パフォーマンスが著しく低下することがあります。</span><span class="sxs-lookup"><span data-stu-id="67038-145">In some cases, especially when repeated operations are performed in a loop on very large <xref:System.Numerics.BigInteger> values, that performance penalty can be significant.</span></span> <span data-ttu-id="67038-146">たとえば、次の例では、1回の操作で繰り返し実行され、<xref:System.Numerics.BigInteger> 値は、操作が成功するたびに1ずつ増加します。</span><span class="sxs-lookup"><span data-stu-id="67038-146">For example, in the following example, an operation is performed repetitively up to a million times, and a <xref:System.Numerics.BigInteger> value is incremented by one every time the operation succeeds.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#12)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#12)]  
  
 <span data-ttu-id="67038-147">このような場合は、<xref:System.Int32> 変数に対するすべての中間割り当てを実行することで、パフォーマンスを向上させることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-147">In such a case, you can improve performance by performing all intermediate assignments to an <xref:System.Int32> variable.</span></span> <span data-ttu-id="67038-148">変数の最終的な値は、ループが終了したときに <xref:System.Numerics.BigInteger> オブジェクトに割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-148">The final value of the variable can then be assigned to the <xref:System.Numerics.BigInteger> object when the loop exits.</span></span> <span data-ttu-id="67038-149">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="67038-149">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#3)]  
  
## <a name="working-with-byte-arrays-and-hexadecimal-strings"></a><span data-ttu-id="67038-150">バイト配列と16進文字列の使用</span><span class="sxs-lookup"><span data-stu-id="67038-150">Working with Byte Arrays and Hexadecimal Strings</span></span>  
 <span data-ttu-id="67038-151"><xref:System.Numerics.BigInteger> 値をバイト配列に変換する場合、またはバイト配列を <xref:System.Numerics.BigInteger> 値に変換する場合は、バイトの順序を考慮する必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-151">If you convert <xref:System.Numerics.BigInteger> values to byte arrays, or if you convert byte arrays to <xref:System.Numerics.BigInteger> values, you must consider the order of bytes.</span></span> <span data-ttu-id="67038-152"><xref:System.Numerics.BigInteger> 構造体では、バイト配列内の個々のバイトがリトルエンディアン順に表示されることを想定しています (つまり、値の下位バイトが上位バイトの前に置かれます)。</span><span class="sxs-lookup"><span data-stu-id="67038-152">The <xref:System.Numerics.BigInteger> structure expects the individual bytes in a byte array to appear in little-endian order (that is, the lower-order bytes of the value precede the higher-order bytes).</span></span> <span data-ttu-id="67038-153">次の例に示すように、<xref:System.Numerics.BigInteger.ToByteArray%2A> メソッドを呼び出し、結果のバイト配列を <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> コンストラクターに渡すことによって、<xref:System.Numerics.BigInteger> の値をラウンドトリップできます。</span><span class="sxs-lookup"><span data-stu-id="67038-153">You can round-trip a <xref:System.Numerics.BigInteger> value by calling the <xref:System.Numerics.BigInteger.ToByteArray%2A> method and then passing the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#1)]  
  
 <span data-ttu-id="67038-154">他の整数型の値を表すバイト配列から <xref:System.Numerics.BigInteger> 値をインスタンス化するには、<xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> メソッドに整数値を渡し、結果のバイト配列を <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> コンストラクターに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-154">To instantiate a <xref:System.Numerics.BigInteger> value from a byte array that represents a value of some other integral type, you can pass the integral value to the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method, and then pass the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span> <span data-ttu-id="67038-155">次の例では、<xref:System.Int16> 値を表すバイト配列から <xref:System.Numerics.BigInteger> 値をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="67038-155">The following example instantiates a <xref:System.Numerics.BigInteger> value from a byte array that represents an <xref:System.Int16> value.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#2)]  
  
 <span data-ttu-id="67038-156"><xref:System.Numerics.BigInteger> 構造体は、2の補数表現を使用して負の値が格納されることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="67038-156">The <xref:System.Numerics.BigInteger> structure assumes that negative values are stored by using two's complement representation.</span></span> <span data-ttu-id="67038-157"><xref:System.Numerics.BigInteger> 構造体は固定長のない数値を表すため、<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> コンストラクターは常に、配列内の最後のバイトの最上位ビットを符号ビットとして解釈します。</span><span class="sxs-lookup"><span data-stu-id="67038-157">Because the <xref:System.Numerics.BigInteger> structure represents a numeric value with no fixed length, the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor always interprets the most significant bit of the last byte in the array as a sign bit.</span></span> <span data-ttu-id="67038-158"><xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> コンストラクターが負の値の2つの補数表現を、正の値の符号と大きさの表現で混同しないようにするため、通常、バイト配列の最後のバイトの最上位ビットには、値が0である追加のバイトが含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-158">To prevent the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor from confusing the two's complement representation of a negative value with the sign and magnitude representation of a positive value, positive values in which the most significant bit of the last byte in the byte array would ordinarily be set should include an additional byte whose value is 0.</span></span> <span data-ttu-id="67038-159">たとえば、0xC0 0xBD 0Xbd 0xFF は、-100万または4293967296のリトルエンディアン16進数表現です。</span><span class="sxs-lookup"><span data-stu-id="67038-159">For example, 0xC0 0xBD 0xF0 0xFF is the little-endian hexadecimal representation of either -1,000,000 or 4,293,967,296.</span></span> <span data-ttu-id="67038-160">この配列の最後のバイトの最上位ビットがオンになっているため、バイト配列の値は、<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> コンストラクターによって-100万として解釈されます。</span><span class="sxs-lookup"><span data-stu-id="67038-160">Because the most significant bit of the last byte in this array is on, the value of the byte array would be interpreted by the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor as -1,000,000.</span></span> <span data-ttu-id="67038-161">値が正である <xref:System.Numerics.BigInteger> をインスタンス化するには、0xC0 0xBD 0Xbd 0xFF 0x00 という要素を持つバイト配列をコンストラクターに渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-161">To instantiate a <xref:System.Numerics.BigInteger> whose value is positive, a byte array whose elements are 0xC0 0xBD 0xF0 0xFF 0x00 must be passed to the constructor.</span></span> <span data-ttu-id="67038-162">次の例を使って説明します。</span><span class="sxs-lookup"><span data-stu-id="67038-162">The following example illustrates this.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#3)]  
  
 <span data-ttu-id="67038-163">正の値から <xref:System.Numerics.BigInteger.ToByteArray%2A> メソッドによって作成されたバイト配列には、この追加のゼロ値バイトが含まれます。</span><span class="sxs-lookup"><span data-stu-id="67038-163">Byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method from positive values include this extra zero-value byte.</span></span> <span data-ttu-id="67038-164">したがって、<xref:System.Numerics.BigInteger> 構造体は、次の例に示すように、値をバイト配列に割り当ててから復元することによって、値のラウンドトリップを正常に行うことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-164">Therefore, the <xref:System.Numerics.BigInteger> structure can successfully round-trip values by assigning them to, and then restoring them from, byte arrays, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#4)]  
  
 <span data-ttu-id="67038-165">ただし、この追加のゼロ値バイトは、開発者によって動的に作成されるバイト配列に追加する必要があります。または、符号なし整数をバイト配列に変換するメソッド (<xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=nameWithType>、<xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=nameWithType>、<xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=nameWithType>など) によって返されるバイト配列に追加することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="67038-165">However, you may need to add this additional zero-value byte to byte arrays that are created dynamically by the developer or that are returned by methods that convert unsigned integers to byte arrays (such as <xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=nameWithType>, <xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=nameWithType>, and <xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=nameWithType>).</span></span>  
  
 <span data-ttu-id="67038-166">16進数の文字列を解析する場合、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> および <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドでは、文字列内の最初のバイトの最上位ビットが設定されている場合、または文字列の最初の16進数字がバイト値の下位4ビットを表している場合に、2の補数表現を使用して値が表されると想定されます。</span><span class="sxs-lookup"><span data-stu-id="67038-166">When parsing a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> and <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> methods assume that if the most significant bit of the first byte in the string is set, or if the first hexadecimal digit of the string represents the lower four bits of a byte value, the value is represented by using two's complement representation.</span></span> <span data-ttu-id="67038-167">たとえば、"FF01" と "F01" は両方とも10進値-255 を表します。</span><span class="sxs-lookup"><span data-stu-id="67038-167">For example, both "FF01" and "F01" represent the decimal value -255.</span></span> <span data-ttu-id="67038-168">負の値との正を区別するには、正の値に先行ゼロを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-168">To differentiate positive from negative values, positive values should include a leading zero.</span></span> <span data-ttu-id="67038-169"><xref:System.Numerics.BigInteger.ToString%2A> メソッドの関連するオーバーロードには、"X" 書式指定文字列が渡されたときに、正の値に対して返された16進数文字列に先頭のゼロを追加します。</span><span class="sxs-lookup"><span data-stu-id="67038-169">The relevant overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, when they are passed the "X" format string, add a leading zero to the returned hexadecimal string for positive values.</span></span> <span data-ttu-id="67038-170">これにより、次の例に示すように、<xref:System.Numerics.BigInteger.ToString%2A> メソッドと <xref:System.Numerics.BigInteger.Parse%2A> メソッドを使用して <xref:System.Numerics.BigInteger> の値をラウンドトリップさせることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-170">This makes it possible to round-trip <xref:System.Numerics.BigInteger> values by using the <xref:System.Numerics.BigInteger.ToString%2A> and <xref:System.Numerics.BigInteger.Parse%2A> methods, as the following example shows.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#5)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#5)]  
  
 <span data-ttu-id="67038-171">ただし、他の整数型の `ToString` メソッドを呼び出すことによって作成される16進数文字列、または `toBase` パラメーターを含む <xref:System.Convert.ToString%2A> メソッドのオーバーロードは、16進数文字列の派生元の値またはソースデータ型の符号を示しません。</span><span class="sxs-lookup"><span data-stu-id="67038-171">However, the hexadecimal strings created by calling the `ToString` methods of the other integral types or the overloads of the <xref:System.Convert.ToString%2A> method that include a `toBase` parameter do not indicate the sign of the value or the source data type from which the hexadecimal string was derived.</span></span> <span data-ttu-id="67038-172">このような文字列から <xref:System.Numerics.BigInteger> 値を正常にインスタンス化するには、追加のロジックが必要です。</span><span class="sxs-lookup"><span data-stu-id="67038-172">Successfully instantiating a <xref:System.Numerics.BigInteger> value from such a string requires some additional logic.</span></span> <span data-ttu-id="67038-173">次の例では、考えられる1つの実装を示します。</span><span class="sxs-lookup"><span data-stu-id="67038-173">The following example provides one possible implementation.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples2.cs#6)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples2.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67038-174"><see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="67038-174">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(cli::array &lt;System::Byte&gt; ^ value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : byte[] -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-175">リトル エンディアン順に格納されたバイト値の配列。</span><span class="sxs-lookup"><span data-stu-id="67038-175">An array of byte values in little-endian order.</span></span></param>
        <summary><span data-ttu-id="67038-176">バイト配列の値を使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="67038-176">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using the values in a byte array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-177">`value` 配列内の個々のバイトは、最下位バイトから上位バイトまでのリトルエンディアン順にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-177">The individual bytes in the `value` array should be in little-endian order, from lowest-order byte to highest-order byte.</span></span> <span data-ttu-id="67038-178">たとえば、数値1兆は、次の表に示すように表されます。</span><span class="sxs-lookup"><span data-stu-id="67038-178">For example, the numeric value 1,000,000,000,000 is represented as shown in the following table:</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67038-179">16 進数文字列</span><span class="sxs-lookup"><span data-stu-id="67038-179">Hexadecimal string</span></span>|<span data-ttu-id="67038-180">E8D4A51000</span><span class="sxs-lookup"><span data-stu-id="67038-180">E8D4A51000</span></span>|  
|<span data-ttu-id="67038-181">バイト配列 (最初に最も小さいインデックス)</span><span class="sxs-lookup"><span data-stu-id="67038-181">Byte array (lowest index first)</span></span>|<span data-ttu-id="67038-182">00 10 A5 D4 E8 00</span><span class="sxs-lookup"><span data-stu-id="67038-182">00 10 A5 D4 E8 00</span></span>|  
  
 <span data-ttu-id="67038-183">数値を <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> や <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>などのバイト配列に変換するほとんどのメソッドでは、リトルエンディアン順にバイト配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="67038-183">Most methods that convert numeric values to byte arrays, such as <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> and <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>, return byte arrays in little-endian order.</span></span>  
  
 <span data-ttu-id="67038-184">コンストラクターは、符号と絶対値の表現を使用するためにバイト配列内の正の値を必要とし、負の値は2の補数表現を使用します。</span><span class="sxs-lookup"><span data-stu-id="67038-184">The constructor expects positive values in the byte array to use sign-and-magnitude representation, and negative values to use two's complement representation.</span></span> <span data-ttu-id="67038-185">つまり、`value` の最上位バイトの最上位ビットが設定されている場合、結果の <xref:System.Numerics.BigInteger> 値は負になります。</span><span class="sxs-lookup"><span data-stu-id="67038-185">In other words, if the highest-order bit of the highest-order byte in `value` is set, the resulting <xref:System.Numerics.BigInteger> value is negative.</span></span> <span data-ttu-id="67038-186">バイト配列のソースによっては、正の値が誤って負の値として解釈される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="67038-186">Depending on the source of the byte array, this may cause a positive value to be misinterpreted as a negative value.</span></span> <span data-ttu-id="67038-187">通常、バイト配列は次の方法で生成されます。</span><span class="sxs-lookup"><span data-stu-id="67038-187">Byte arrays are typically generated in the following ways:</span></span>  
  
-   <span data-ttu-id="67038-188"><xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-188">By calling the <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="67038-189">このメソッドは、正の値に対して配列の最上位バイトの最上位ビットを0に設定したバイト配列を返すため、正の値を負の値として解釈することはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-189">Because this method returns a byte array with the highest-order bit of the highest-order byte in the array set to zero for positive values, there is no chance of misinterpreting a positive value as negative.</span></span> <span data-ttu-id="67038-190"><xref:System.Numerics.BigInteger.ToByteArray%2A> メソッドによって作成された未変更のバイト配列は、<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> コンストラクターに渡されたときに常にラウンドトリップします。</span><span class="sxs-lookup"><span data-stu-id="67038-190">Unmodified byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method always successfully round-trip when they are passed to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span>  
  
-   <span data-ttu-id="67038-191"><xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> メソッドを呼び出し、パラメーターとして符号付き整数を渡す。</span><span class="sxs-lookup"><span data-stu-id="67038-191">By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method and passing it a signed integer as a parameter.</span></span> <span data-ttu-id="67038-192">符号付き整数は、符号と大きさの表現と2つの補数表現の両方を処理するため、正の値を負の値として解釈することはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-192">Because signed integers handle both sign-and-magnitude representation and two's complement representation, there is no chance of misinterpreting a positive value as negative.</span></span>  
  
-   <span data-ttu-id="67038-193"><xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> メソッドを呼び出し、パラメーターとして符号なし整数を渡します。</span><span class="sxs-lookup"><span data-stu-id="67038-193">By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> method and passing it an unsigned integer as a parameter.</span></span> <span data-ttu-id="67038-194">符号なし整数はその大きさだけで表されるため、正の値は誤って負の値として解釈される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="67038-194">Because unsigned integers are represented by their magnitude only, positive values can be misinterpreted as negative values.</span></span> <span data-ttu-id="67038-195">このような解釈が行われないようにするには、配列の末尾にゼロバイト値を追加します。</span><span class="sxs-lookup"><span data-stu-id="67038-195">To prevent this misinterpretation, you can add a zero-byte value to the end of the array.</span></span> <span data-ttu-id="67038-196">次のセクションの例では、図を示します。</span><span class="sxs-lookup"><span data-stu-id="67038-196">The example in the next section provides an illustration.</span></span>  
  
-   <span data-ttu-id="67038-197">前のいずれかのメソッドを呼び出すことなく、または既存のバイト配列を変更することによって、バイト配列を動的または静的に作成する。</span><span class="sxs-lookup"><span data-stu-id="67038-197">By creating a byte array either dynamically or statically without necessarily calling any of the previous methods, or by modifying an existing byte array.</span></span> <span data-ttu-id="67038-198">正の値が誤って負の値として解釈されないようにするには、配列の末尾にゼロバイトの値を追加します。</span><span class="sxs-lookup"><span data-stu-id="67038-198">To prevent positive values from being misinterpreted as negative values, you can add a zero-byte value to the end of the array.</span></span>  
  
 <span data-ttu-id="67038-199">`value` が空の <xref:System.Byte> 配列の場合、新しい <xref:System.Numerics.BigInteger> オブジェクトは <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>の値に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="67038-199">If `value` is an empty <xref:System.Byte> array, the new <xref:System.Numerics.BigInteger> object is initialized to a value of <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67038-200">`value` が `null`場合、コンストラクターは <xref:System.ArgumentNullException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="67038-200">If `value` is `null`, the constructor throws an <xref:System.ArgumentNullException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-201">次の例では、値が {5, 4, 3, 2, 1} である5要素のバイト配列から <xref:System.Numerics.BigInteger> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="67038-201">The following example instantiates a <xref:System.Numerics.BigInteger> object from a 5-element byte array whose value is {5, 4, 3, 2, 1}.</span></span> <span data-ttu-id="67038-202">次に、10進数と16進数の両方で表される <xref:System.Numerics.BigInteger> 値がコンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-202">It then displays the <xref:System.Numerics.BigInteger> value, represented as both decimal and hexadecimal numbers, to the console.</span></span> <span data-ttu-id="67038-203">入力配列とテキスト出力の比較により、<xref:System.Numerics.BigInteger> クラスコンストラクターのこのオーバーロードが、値が 4328719365 (または 0x102030405) の <xref:System.Numerics.BigInteger> オブジェクトを作成する理由がわかります。</span><span class="sxs-lookup"><span data-stu-id="67038-203">A comparison of the input array with the text output makes it clear why this overload of the <xref:System.Numerics.BigInteger> class constructor creates a <xref:System.Numerics.BigInteger> object whose value is 4328719365 (or 0x102030405).</span></span> <span data-ttu-id="67038-204">バイト配列の最初の要素である値が5である場合、<xref:System.Numerics.BigInteger> オブジェクトの最下位バイトの値が定義されます。これは、0x05 です。</span><span class="sxs-lookup"><span data-stu-id="67038-204">The first element of the byte array, whose value is 5, defines the value of the lowest-order byte of the <xref:System.Numerics.BigInteger> object, which is 0x05.</span></span> <span data-ttu-id="67038-205">バイト配列の2番目の要素 (値が 4) は、<xref:System.Numerics.BigInteger> オブジェクトの2番目のバイトの値 (0x04 など) を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-205">The second element of the byte array, whose value is 4, defines the value of the second byte of the <xref:System.Numerics.BigInteger> object, which is 0x04, and so on.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ctors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#1)]  
  
 <span data-ttu-id="67038-206">次の例では、正の値と負の <xref:System.Numerics.BigInteger> 値をインスタンス化し、<xref:System.Numerics.BigInteger.ToByteArray%2A> メソッドに渡してから、結果のバイト配列から元の <xref:System.Numerics.BigInteger> 値を復元します。</span><span class="sxs-lookup"><span data-stu-id="67038-206">The following example instantiates a positive and a negative <xref:System.Numerics.BigInteger> value, passes them to the <xref:System.Numerics.BigInteger.ToByteArray%2A> method, and then restores the original <xref:System.Numerics.BigInteger> values from the resulting byte array.</span></span> <span data-ttu-id="67038-207">2つの値は、同一のバイト配列で表されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="67038-207">Note that the two values are represented by identical byte arrays.</span></span> <span data-ttu-id="67038-208">これらの違いは、バイト配列の最後の要素の最上位ビットのみです。</span><span class="sxs-lookup"><span data-stu-id="67038-208">The only difference between them is in the most significant bit of the last element in the byte array.</span></span> <span data-ttu-id="67038-209">配列が負の <xref:System.Numerics.BigInteger> 値から作成された場合、このビットは (バイトの値は 0xFF) に設定されます。</span><span class="sxs-lookup"><span data-stu-id="67038-209">This bit is set (the value of the byte is 0xFF) if the array is created from a negative <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="67038-210">配列が正の <xref:System.Numerics.BigInteger> 値から作成された場合、ビットは設定されません (バイトの値はゼロです)。</span><span class="sxs-lookup"><span data-stu-id="67038-210">The bit is not set (the value of the byte is zero), if the array is created from a positive <xref:System.Numerics.BigInteger> value.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.ctors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#2)]  
  
 <span data-ttu-id="67038-211">次の例は、値が0のバイトを配列の末尾に追加することによって、正の値が誤って負の値としてインスタンス化されないようにする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-211">The following example illustrates how to make sure that a positive value is not incorrectly instantiated as a negative value by adding a byte whose value is zero to the end of the array.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.ctors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="67038-212"><paramref name="value" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="67038-212"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.ToByteArray" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::Decimal value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : decimal -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-213">10 進数。</span><span class="sxs-lookup"><span data-stu-id="67038-213">A decimal number.</span></span></param>
        <summary><span data-ttu-id="67038-214"><see cref="T:System.Decimal" /> 値を使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="67038-214">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a <see cref="T:System.Decimal" /> value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-215">このコンストラクターを呼び出した結果は、<xref:System.Decimal> 値を <xref:System.Numerics.BigInteger> 変数に明示的に代入することと同じです。</span><span class="sxs-lookup"><span data-stu-id="67038-215">The result of calling this constructor is identical to explicitly assigning a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger> variable.</span></span>  
  
 <span data-ttu-id="67038-216">このコンストラクターを呼び出すと、データが失われる可能性があります。`value` の小数部分は、<xref:System.Numerics.BigInteger> オブジェクトをインスタンス化するときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="67038-216">Calling this constructor can cause data loss; any fractional part of `value` is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-217">次の例は、<xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> コンストラクターを使用して <xref:System.Numerics.BigInteger> オブジェクトをインスタンス化する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-217">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="67038-218"><xref:System.Decimal> 値の配列を定義し、各値を <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> コンストラクターに渡します。</span><span class="sxs-lookup"><span data-stu-id="67038-218">It defines an array of <xref:System.Decimal> values, and then passes each value to the <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructor.</span></span> <span data-ttu-id="67038-219"><xref:System.Numerics.BigInteger> オブジェクトに割り当てられている場合、<xref:System.Decimal> 値は丸められずに切り捨てられることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="67038-219">Note that the <xref:System.Decimal> value is truncated instead of rounded when it is assigned to the <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#4)]
 [!code-vb[System.Numerics.BigInteger.ctors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(double value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : double -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-220">倍精度浮動小数点値です。</span><span class="sxs-lookup"><span data-stu-id="67038-220">A double-precision floating-point value.</span></span></param>
        <summary><span data-ttu-id="67038-221">倍精度浮動小数点値を使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="67038-221">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a double-precision floating-point value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-222">`value` パラメーターの小数部分は、<xref:System.Numerics.BigInteger> オブジェクトをインスタンス化するときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="67038-222">Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="67038-223"><xref:System.Double> データ型の有効桁数が不足しているため、このコンストラクターを呼び出すと、データが失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="67038-223">Because of the lack of precision of the <xref:System.Double> data type, calling this constructor can cause data loss.</span></span>  
  
 <span data-ttu-id="67038-224">このコンストラクターを呼び出した結果として得られる <xref:System.Numerics.BigInteger> 値は、<xref:System.Double> の値を <xref:System.Numerics.BigInteger>に明示的に代入した結果と同じ値になります。</span><span class="sxs-lookup"><span data-stu-id="67038-224">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Double> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-225">次の例は、<xref:System.Numerics.BigInteger.%23ctor%28System.Double%29> コンストラクターを使用して <xref:System.Numerics.BigInteger> オブジェクトをインスタンス化する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-225">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="67038-226">また、<xref:System.Double> データ型を使用する場合に発生する可能性のある有効桁数の損失についても説明します。</span><span class="sxs-lookup"><span data-stu-id="67038-226">It also illustrates the loss of precision that may occur when you use the <xref:System.Double> data type.</span></span> <span data-ttu-id="67038-227"><xref:System.Double> に大きな値が割り当てられ、その値が <xref:System.Numerics.BigInteger> オブジェクトに割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="67038-227">A <xref:System.Double> is assigned a large value, which is then assigned to a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="67038-228">出力に示されているように、この割り当てには精度の低下が伴います。</span><span class="sxs-lookup"><span data-stu-id="67038-228">As the output shows, this assignment involves a loss of precision.</span></span> <span data-ttu-id="67038-229">両方の値が1ずつインクリメントされます。</span><span class="sxs-lookup"><span data-stu-id="67038-229">Both values are then incremented by one.</span></span> <span data-ttu-id="67038-230">出力は、<xref:System.Numerics.BigInteger> オブジェクトに変更された値が反映されているのに対し、<xref:System.Double> オブジェクトには反映されていないことを示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-230">The output shows that the <xref:System.Numerics.BigInteger> object reflects the changed value, whereas the <xref:System.Double> object does not.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#5)]
 [!code-vb[System.Numerics.BigInteger.ctors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="67038-231"><paramref name="value" /> が <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" />、または <see cref="F:System.Double.PositiveInfinity" /> です。</span><span class="sxs-lookup"><span data-stu-id="67038-231"><paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(int value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : int -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-232">32 ビットの符号付き整数です。</span><span class="sxs-lookup"><span data-stu-id="67038-232">A 32-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="67038-233">32 ビット符号付き整数値を使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="67038-233">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 32-bit signed integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-234">このコンストラクターを使用して <xref:System.Numerics.BigInteger> オブジェクトをインスタンス化する場合、有効桁数は失われません。</span><span class="sxs-lookup"><span data-stu-id="67038-234">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.</span></span>  
  
 <span data-ttu-id="67038-235">このコンストラクターを呼び出した結果として得られる <xref:System.Numerics.BigInteger> 値は、<xref:System.Int32> の値を <xref:System.Numerics.BigInteger>に割り当てることによって得られる値と同じです。</span><span class="sxs-lookup"><span data-stu-id="67038-235">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int32> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
 <span data-ttu-id="67038-236"><xref:System.Numerics.BigInteger> 構造体には、<xref:System.Byte>、<xref:System.Int16>、<xref:System.SByte>、または <xref:System.UInt16>型のパラメーターを持つコンストラクターは含まれません。</span><span class="sxs-lookup"><span data-stu-id="67038-236">The <xref:System.Numerics.BigInteger> structure does not include constructors with a parameter of type <xref:System.Byte>, <xref:System.Int16>, <xref:System.SByte>, or <xref:System.UInt16>.</span></span> <span data-ttu-id="67038-237">ただし、<xref:System.Int32> 型では、8ビットおよび16ビット符号付き整数と符号なし整数の符号付き32ビット整数への暗黙的な変換がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="67038-237">However, the <xref:System.Int32> type supports the implicit conversion of 8-bit and 16-bit signed and unsigned integers to signed 32-bit integers.</span></span> <span data-ttu-id="67038-238">その結果、このコンストラクターは、`value` がこれら4つの整数型のいずれかである場合に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="67038-238">As a result, this constructor is called if `value` is any one of these four integral types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-239">次の例では、<xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29> コンストラクターを呼び出して、32ビット整数の配列から <xref:System.Numerics.BigInteger> 値をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="67038-239">The following example calls the <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29> constructor to instantiate <xref:System.Numerics.BigInteger> values from an array of 32-bit integers.</span></span> <span data-ttu-id="67038-240">また、暗黙的な変換を使用して、32ビット整数値を <xref:System.Numerics.BigInteger> 変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="67038-240">It also uses implicit conversion to assign each 32-bit integer value to a <xref:System.Numerics.BigInteger> variable.</span></span> <span data-ttu-id="67038-241">次に、2つの値を比較して、結果として得られる <xref:System.Numerics.BigInteger> 値が同じであることを確立します。</span><span class="sxs-lookup"><span data-stu-id="67038-241">It then compares the two values to establish that the resulting <xref:System.Numerics.BigInteger> values are the same.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#6)]
 [!code-vb[System.Numerics.BigInteger.ctors#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(long value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : int64 -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-242">64 ビットの符号付き整数です。</span><span class="sxs-lookup"><span data-stu-id="67038-242">A 64-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="67038-243">64 ビット符号付き整数値を使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="67038-243">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 64-bit signed integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-244">このコンストラクターを使用して <xref:System.Numerics.BigInteger> オブジェクトをインスタンス化する場合、有効桁数は失われません。</span><span class="sxs-lookup"><span data-stu-id="67038-244">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.</span></span>  
  
 <span data-ttu-id="67038-245">このコンストラクターを呼び出した結果として得られる <xref:System.Numerics.BigInteger> 値は、<xref:System.Int64> の値を <xref:System.Numerics.BigInteger>に割り当てることによって得られる値と同じです。</span><span class="sxs-lookup"><span data-stu-id="67038-245">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int64> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-246">次の例では、<xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29> コンストラクターを呼び出して、64ビット整数の配列から <xref:System.Numerics.BigInteger> 値をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="67038-246">The following example calls the <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29> constructor to instantiate <xref:System.Numerics.BigInteger> values from an array of 64-bit integers.</span></span> <span data-ttu-id="67038-247">また、暗黙的な変換を使用して、64ビット整数値を <xref:System.Numerics.BigInteger> 変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="67038-247">It also uses implicit conversion to assign each 64-bit integer value to a <xref:System.Numerics.BigInteger> variable.</span></span> <span data-ttu-id="67038-248">次に、2つの値を比較して、結果として得られる <xref:System.Numerics.BigInteger> 値が同じであることを確立します。</span><span class="sxs-lookup"><span data-stu-id="67038-248">It then compares the two values to establish that the resulting <xref:System.Numerics.BigInteger> values are the same.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#7)]
 [!code-vb[System.Numerics.BigInteger.ctors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(float value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : single -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-249">単精度浮動小数点値です。</span><span class="sxs-lookup"><span data-stu-id="67038-249">A single-precision floating-point value.</span></span></param>
        <summary><span data-ttu-id="67038-250">単精度浮動小数点値を使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="67038-250">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a single-precision floating-point value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-251">`value` パラメーターの小数部分は、<xref:System.Numerics.BigInteger> オブジェクトをインスタンス化するときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="67038-251">Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="67038-252"><xref:System.Single> データ型の有効桁数がないため、このコンストラクターを呼び出すと、データが失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="67038-252">Because of the lack of precision of the <xref:System.Single> data type, calling this constructor can result in data loss.</span></span>  
  
 <span data-ttu-id="67038-253">このコンストラクターを呼び出した結果として得られる <xref:System.Numerics.BigInteger> 値は、<xref:System.Single> の値を <xref:System.Numerics.BigInteger>に明示的に代入した結果と同じ値になります。</span><span class="sxs-lookup"><span data-stu-id="67038-253">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Single> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-254">次の例は、<xref:System.Numerics.BigInteger.%23ctor%28System.Single%29> コンストラクターを使用して <xref:System.Numerics.BigInteger> オブジェクトをインスタンス化する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-254">The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="67038-255">また、<xref:System.Single> データ型を使用する場合に発生する可能性のある有効桁数の損失についても説明します。</span><span class="sxs-lookup"><span data-stu-id="67038-255">It also illustrates the loss of precision that may occur when you use the <xref:System.Single> data type.</span></span> <span data-ttu-id="67038-256"><xref:System.Single> には、大きな負の値が割り当てられます。この値は、<xref:System.Numerics.BigInteger> オブジェクトに割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="67038-256">A <xref:System.Single> is assigned a large negative value, which is then assigned to a <xref:System.Numerics.BigInteger> object.</span></span> <span data-ttu-id="67038-257">出力に示されているように、この割り当てには精度の低下が伴います。</span><span class="sxs-lookup"><span data-stu-id="67038-257">As the output shows, this assignment involves a loss of precision.</span></span> <span data-ttu-id="67038-258">両方の値が1ずつインクリメントされます。</span><span class="sxs-lookup"><span data-stu-id="67038-258">Both values are then incremented by one.</span></span> <span data-ttu-id="67038-259">出力は、<xref:System.Numerics.BigInteger> オブジェクトに変更された値が反映されているのに対し、<xref:System.Single> オブジェクトには反映されていないことを示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-259">The output shows that the <xref:System.Numerics.BigInteger> object reflects the changed value, whereas the <xref:System.Single> object does not.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#8)]
 [!code-vb[System.Numerics.BigInteger.ctors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="67038-260"><paramref name="value" /> が <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" />、または <see cref="F:System.Single.PositiveInfinity" /> です。</span><span class="sxs-lookup"><span data-stu-id="67038-260"><paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />, or <see cref="F:System.Single.PositiveInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : uint32 -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-261">32 ビットの符号なし整数値。</span><span class="sxs-lookup"><span data-stu-id="67038-261">An unsigned 32-bit integer value.</span></span></param>
        <summary><span data-ttu-id="67038-262">32 ビット符号なし整数値を使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="67038-262">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using an unsigned 32-bit integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-263">このコンストラクターを使用して <xref:System.Numerics.BigInteger> をインスタンス化する場合、精度は失われません。</span><span class="sxs-lookup"><span data-stu-id="67038-263">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.</span></span>  
  
 <span data-ttu-id="67038-264">このコンストラクターを呼び出した結果として得られる <xref:System.Numerics.BigInteger> 値は、<xref:System.UInt32> の値を <xref:System.Numerics.BigInteger>に割り当てることによって得られる値と同じです。</span><span class="sxs-lookup"><span data-stu-id="67038-264">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-265">次の例では、<xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29> コンストラクターと代入ステートメントを使用して、符号なし32ビット整数の配列から <xref:System.Numerics.BigInteger> 値を初期化します。</span><span class="sxs-lookup"><span data-stu-id="67038-265">The following example uses the <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29> constructor and an assignment statement to initialize <xref:System.Numerics.BigInteger> values from an array of unsigned 32-bit integers.</span></span> <span data-ttu-id="67038-266">次に、2つの値を比較して、<xref:System.Numerics.BigInteger> 値を初期化する2つのメソッドが同じ結果を生成することを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-266">It then compares the two values to demonstrate that the two methods of initializing a <xref:System.Numerics.BigInteger> value produce identical results.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#9)]
 [!code-vb[System.Numerics.BigInteger.ctors#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#9)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BigInteger(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : uint64 -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-267">符号なし 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="67038-267">An unsigned 64-bit integer.</span></span></param>
        <summary><span data-ttu-id="67038-268">64 ビット符号なし整数値を使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="67038-268">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure with an unsigned 64-bit integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-269">このコンストラクターを使用して <xref:System.Numerics.BigInteger> をインスタンス化する場合、精度は失われません。</span><span class="sxs-lookup"><span data-stu-id="67038-269">There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.</span></span>  
  
 <span data-ttu-id="67038-270">このコンストラクターを呼び出した結果として得られる <xref:System.Numerics.BigInteger> 値は、<xref:System.UInt64> の値を <xref:System.Numerics.BigInteger>に割り当てることによって得られる値と同じです。</span><span class="sxs-lookup"><span data-stu-id="67038-270">The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-271">次の例では、<xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29> コンストラクターを使用して、値が <xref:System.UInt64.MaxValue>に等しい <xref:System.Numerics.BigInteger> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="67038-271">The following example uses the <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object whose value is equal to <xref:System.UInt64.MaxValue>.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ctors#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#10)]
 [!code-vb[System.Numerics.BigInteger.ctors#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (ReadOnlySpan&lt;byte&gt; value, bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value, bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ReadOnlySpan(Of Byte), Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false)" />
      <MemberSignature Language="F#" Value="new System.Numerics.BigInteger : ReadOnlySpan&lt;byte&gt; * bool * bool -&gt; System.Numerics.BigInteger" Usage="new System.Numerics.BigInteger (value, isUnsigned, isBigEndian)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="isUnsigned" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="isBigEndian" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-272">多倍長整数を表すバイトの読み取り専用のスパン。</span><span class="sxs-lookup"><span data-stu-id="67038-272">A read-only span of bytes representing the big integer.</span></span></param>
        <param name="isUnsigned"><span data-ttu-id="67038-273"><paramref name="value" /> で符号なしのエンコードを使用することを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" /> (既定値)。</span><span class="sxs-lookup"><span data-stu-id="67038-273"><see langword="true" /> to indicate <paramref name="value" /> uses unsigned encoding; otherwise, <see langword="false" /> (the default value).</span></span></param>
        <param name="isBigEndian"><span data-ttu-id="67038-274"><paramref name="value" /> がビッグ エンディアンのバイト順であることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" /> (既定値)。</span><span class="sxs-lookup"><span data-stu-id="67038-274"><see langword="true" /> to indicate <paramref name="value" /> is in big-endian byte order; otherwise, <see langword="false" />  (the default value).</span></span></param>
        <summary><span data-ttu-id="67038-275">バイトの読み取り専用スパンを使用して、<see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。任意で、符号付きエンコードとエンディアンのバイト順を示します。</span><span class="sxs-lookup"><span data-stu-id="67038-275">Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using the values in a read-only span of bytes, and optionally indicating the signing encoding and the endianness byte order.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Abs (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Abs(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Abs(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Abs : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-276">数字。</span><span class="sxs-lookup"><span data-stu-id="67038-276">A number.</span></span></param>
        <summary><span data-ttu-id="67038-277"><see cref="T:System.Numerics.BigInteger" /> オブジェクトの絶対値を取得します。</span><span class="sxs-lookup"><span data-stu-id="67038-277">Gets the absolute value of a <see cref="T:System.Numerics.BigInteger" /> object.</span></span></summary>
        <returns><span data-ttu-id="67038-278"><paramref name="value" /> の絶対値。</span><span class="sxs-lookup"><span data-stu-id="67038-278">The absolute value of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-279">数値の絶対値は、次の表に示すように、符号なしの数値になります。</span><span class="sxs-lookup"><span data-stu-id="67038-279">The absolute value of a number is that number without its sign, as shown in the following table.</span></span>  
  
|<span data-ttu-id="67038-280">`value` パラメーター</span><span class="sxs-lookup"><span data-stu-id="67038-280">`value` parameter</span></span>|<span data-ttu-id="67038-281">戻り値</span><span class="sxs-lookup"><span data-stu-id="67038-281">Return value</span></span>|  
|-----------------------|------------------|  
|<span data-ttu-id="67038-282">`value` > = 0</span><span class="sxs-lookup"><span data-stu-id="67038-282">`value` >= 0</span></span>|`value`|  
|<span data-ttu-id="67038-283">`value` < 0</span><span class="sxs-lookup"><span data-stu-id="67038-283">`value` < 0</span></span>|<span data-ttu-id="67038-284">`value` \* -1</span><span class="sxs-lookup"><span data-stu-id="67038-284">`value` \* -1</span></span>|  
  
 <span data-ttu-id="67038-285"><xref:System.Numerics.BigInteger.Abs%2A> メソッドは、プリミティブな数値型の <xref:System.Math.Abs%2A?displayProperty=nameWithType> メソッドに相当します。</span><span class="sxs-lookup"><span data-stu-id="67038-285">The <xref:System.Numerics.BigInteger.Abs%2A> method is equivalent to the <xref:System.Math.Abs%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-286">次の例では、<xref:System.Numerics.BigInteger.Abs%2A> メソッドを使用して、2の補数表現の <xref:System.Numerics.BigInteger> 値を、ファイルにシリアル化する前に、符号と大きさの表現に変換します。</span><span class="sxs-lookup"><span data-stu-id="67038-286">The following example uses the <xref:System.Numerics.BigInteger.Abs%2A> method to convert a <xref:System.Numerics.BigInteger> value from two's complement representation to sign-and-magnitude representation before serializing it to a file.</span></span> <span data-ttu-id="67038-287">その後、ファイル内のデータが逆シリアル化され、新しい <xref:System.Numerics.BigInteger> オブジェクトに割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="67038-287">Data in the file is then deserialized and assigned to a new <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/cs/Abs1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/vb/Abs1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Abs(System.SByte)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Add (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Add(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Add(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-288">加算する 1 番目の値。</span><span class="sxs-lookup"><span data-stu-id="67038-288">The first value to add.</span></span></param>
        <param name="right"><span data-ttu-id="67038-289">加算する 2 番目の値。</span><span class="sxs-lookup"><span data-stu-id="67038-289">The second value to add.</span></span></param>
        <summary><span data-ttu-id="67038-290">2 つの <see cref="T:System.Numerics.BigInteger" /> 値を加算し、その結果を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-290">Adds two <see cref="T:System.Numerics.BigInteger" /> values and returns the result.</span></span></summary>
        <returns><span data-ttu-id="67038-291"><paramref name="left" /> と <paramref name="right" /> の合計。</span><span class="sxs-lookup"><span data-stu-id="67038-291">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-292">演算子のオーバーロードまたはカスタム演算子をサポートしない言語では、<xref:System.Numerics.BigInteger.Add%2A> メソッドを使用して <xref:System.Numerics.BigInteger> 値を使用して加算を実行できます。</span><span class="sxs-lookup"><span data-stu-id="67038-292">Languages that do not support operator overloading or custom operators can use the <xref:System.Numerics.BigInteger.Add%2A> method to perform addition using <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="67038-293"><xref:System.Numerics.BigInteger.Add%2A> メソッドは、次の例に示すように、加算によって得られる合計を割り当てることによって <xref:System.Numerics.BigInteger> 変数をインスタンス化するときに加算演算子の代替として使用できます。</span><span class="sxs-lookup"><span data-stu-id="67038-293">The <xref:System.Numerics.BigInteger.Add%2A> method is a useful substitute for the addition operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a sum that results from addition, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (left As BigInteger, right As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Compare : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; int" Usage="System.Numerics.BigInteger.Compare (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-294">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-294">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-295">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-295">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-296">2 つの <see cref="T:System.Numerics.BigInteger" /> 値を比較し、1 番目の値が 2 番目の値よりも小さいか、同じか、または大きいかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-296">Compares two <see cref="T:System.Numerics.BigInteger" /> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.</span></span></summary>
        <returns><span data-ttu-id="67038-297"><paramref name="left" /> と <paramref name="right" /> の相対値を示す符号付き整数。次の表を参照してください。</span><span class="sxs-lookup"><span data-stu-id="67038-297">A signed integer that indicates the relative values of <paramref name="left" /> and <paramref name="right" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="67038-298">値</span><span class="sxs-lookup"><span data-stu-id="67038-298">Value</span></span> 
 </term><description> <span data-ttu-id="67038-299">条件</span><span class="sxs-lookup"><span data-stu-id="67038-299">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="67038-300">ゼロより小さい</span><span class="sxs-lookup"><span data-stu-id="67038-300">Less than zero</span></span> 
 </term><description><span data-ttu-id="67038-301"><paramref name="left" /> は <paramref name="right" /> より小さい値です。</span><span class="sxs-lookup"><span data-stu-id="67038-301"><paramref name="left" /> is less than <paramref name="right" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="67038-302">ゼロ</span><span class="sxs-lookup"><span data-stu-id="67038-302">Zero</span></span> 
 </term><description><span data-ttu-id="67038-303"><paramref name="left" /> と <paramref name="right" /> は等しい。</span><span class="sxs-lookup"><span data-stu-id="67038-303"><paramref name="left" /> equals <paramref name="right" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="67038-304">ゼロより大きい</span><span class="sxs-lookup"><span data-stu-id="67038-304">Greater than zero</span></span> 
 </term><description><span data-ttu-id="67038-305"><paramref name="left" /> が <paramref name="right" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="67038-305"><paramref name="left" /> is greater than <paramref name="right" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-306"><xref:System.Numerics.BigInteger> の型には固定の範囲がありませんが、<xref:System.Numerics.BigInteger> 値の比較は、浮動小数点数の比較を特徴付ける精度がないことによって特徴付けられません。</span><span class="sxs-lookup"><span data-stu-id="67038-306">Although the <xref:System.Numerics.BigInteger> type has no fixed range, comparisons of <xref:System.Numerics.BigInteger> values are not characterized by the lack of precision that characterizes the comparison of floating-point numbers.</span></span> <span data-ttu-id="67038-307">次の例では、2つの <xref:System.Numerics.BigInteger> 値が異なっていて、それぞれが1896の数字を持つ2つの値を比較しています。</span><span class="sxs-lookup"><span data-stu-id="67038-307">The following example compares two <xref:System.Numerics.BigInteger> values that differ by one and that each have 1,896 digits.</span></span> <span data-ttu-id="67038-308"><xref:System.Numerics.BigInteger.Compare%2A> メソッドは、2つの値が等しくないことを正しく報告します。</span><span class="sxs-lookup"><span data-stu-id="67038-308">The <xref:System.Numerics.BigInteger.Compare%2A> method correctly reports that the two values are not equal.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/cs/Compare1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/vb/Compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.CompareTo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67038-309">このインスタンスの値と別の値を比較し、このインスタンスの値がもう一方の値よりも小さいか、同じか、または大きいかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-309">Compares the value of this instance with another value and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the other value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (long other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(long other);" />
      <MemberSignature Language="F#" Value="member this.CompareTo : int64 -&gt; int" Usage="bigInteger.CompareTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="67038-310">比較する符号付き 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="67038-310">The signed 64-bit integer to compare.</span></span></param>
        <summary><span data-ttu-id="67038-311">このインスタンスと符号付き 64 ビット整数を比較し、このインスタンスの値が符号付き 64 ビット整数の値よりも小さいか、同じか、または大きいかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-311">Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.</span></span></summary>
        <returns><span data-ttu-id="67038-312">このインスタンスと <paramref name="other" /> の関係を示す符号付き整数値 (次の表を参照)。</span><span class="sxs-lookup"><span data-stu-id="67038-312">A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="67038-313">戻り値</span><span class="sxs-lookup"><span data-stu-id="67038-313">Return value</span></span> 
 </term><description> <span data-ttu-id="67038-314">説明</span><span class="sxs-lookup"><span data-stu-id="67038-314">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="67038-315">ゼロより小さい</span><span class="sxs-lookup"><span data-stu-id="67038-315">Less than zero</span></span> 
 </term><description> <span data-ttu-id="67038-316">現在のインスタンスは <paramref name="other" /> より小さい。</span><span class="sxs-lookup"><span data-stu-id="67038-316">The current instance is less than <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="67038-317">ゼロ</span><span class="sxs-lookup"><span data-stu-id="67038-317">Zero</span></span> 
 </term><description> <span data-ttu-id="67038-318">現在のインスタンスと <paramref name="other" /> は等しい。</span><span class="sxs-lookup"><span data-stu-id="67038-318">The current instance equals <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="67038-319">ゼロより大きい</span><span class="sxs-lookup"><span data-stu-id="67038-319">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="67038-320">現在のインスタンスは <paramref name="other" /> より大きい。</span><span class="sxs-lookup"><span data-stu-id="67038-320">The current instance is greater than <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-321">`other` が <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>、または <xref:System.UInt32> の値の場合、<xref:System.Int64> メソッドが呼び出されると、暗黙的に <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> 値に変換されます。</span><span class="sxs-lookup"><span data-stu-id="67038-321">If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-322">次の例は、整数値を使用して <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> メソッドを呼び出した結果を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-322">The following example illustrates the result of calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method with integral values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#3)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.Numerics.BigInteger other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.Numerics.BigInteger other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Numerics::BigInteger other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : System.Numerics.BigInteger -&gt; int&#xA;override this.CompareTo : System.Numerics.BigInteger -&gt; int" Usage="bigInteger.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="67038-323">比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-323">The object to compare.</span></span></param>
        <summary><span data-ttu-id="67038-324">このインスタンスともう 1 つの <see cref="T:System.Numerics.BigInteger" /> を比較し、このインスタンスの値が指定されたオブジェクトの値よりも小さいか、同じか、または大きいかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-324">Compares this instance to a second <see cref="T:System.Numerics.BigInteger" /> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span></span></summary>
        <returns><span data-ttu-id="67038-325">このインスタンスと <paramref name="other" /> の関係を示す符号付き整数値 (次の表を参照)。</span><span class="sxs-lookup"><span data-stu-id="67038-325">A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="67038-326">戻り値</span><span class="sxs-lookup"><span data-stu-id="67038-326">Return value</span></span> 
 </term><description> <span data-ttu-id="67038-327">説明</span><span class="sxs-lookup"><span data-stu-id="67038-327">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="67038-328">ゼロより小さい</span><span class="sxs-lookup"><span data-stu-id="67038-328">Less than zero</span></span> 
 </term><description> <span data-ttu-id="67038-329">現在のインスタンスは <paramref name="other" /> より小さい。</span><span class="sxs-lookup"><span data-stu-id="67038-329">The current instance is less than <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="67038-330">ゼロ</span><span class="sxs-lookup"><span data-stu-id="67038-330">Zero</span></span> 
 </term><description> <span data-ttu-id="67038-331">現在のインスタンスと <paramref name="other" /> は等しい。</span><span class="sxs-lookup"><span data-stu-id="67038-331">The current instance equals <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="67038-332">ゼロより大きい</span><span class="sxs-lookup"><span data-stu-id="67038-332">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="67038-333">現在のインスタンスは <paramref name="other" /> より大きい。</span><span class="sxs-lookup"><span data-stu-id="67038-333">The current instance is greater than <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-334"><xref:System.Numerics.BigInteger.CompareTo%2A> メソッドのこのオーバーロードは、<xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="67038-334">This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="67038-335">コレクション内の項目を並べ替えるために、ジェネリックコレクションオブジェクトによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="67038-335">It is used by generic collection objects to order the items in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-336">次の例は、<xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29> メソッドを使用して `StarInfo` オブジェクトの一覧を並べ替える方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-336">The following example illustrates the use of the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29> method to order a list of `StarInfo` objects.</span></span> <span data-ttu-id="67038-337">各 `StarInfo` オブジェクトは、星の名前と地球からの距離 (マイル単位) に関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="67038-337">Each `StarInfo` object provides information about a star's name and its distance from the Earth in miles.</span></span> <span data-ttu-id="67038-338">`StarInfo` は、<xref:System.IComparable%601> インターフェイスを実装します。これにより、`StarInfo` オブジェクトをジェネリックコレクションクラスによって並べ替えることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-338">`StarInfo` implements the <xref:System.IComparable%601> interface, which enables `StarInfo` objects to be sorted by generic collection classes.</span></span> <span data-ttu-id="67038-339"><xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> の実装は、<xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>の呼び出しをラップするだけです。</span><span class="sxs-lookup"><span data-stu-id="67038-339">Its <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> implementation just wraps a call to <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#1)]  
  
 <span data-ttu-id="67038-340">次のコードは、4つの `StarInfo` オブジェクトをインスタンス化し、ジェネリック <xref:System.Collections.Generic.List%601> オブジェクトに格納します。</span><span class="sxs-lookup"><span data-stu-id="67038-340">The following code then instantiates four `StarInfo` objects and stores them in a generic <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="67038-341"><xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType> メソッドが呼び出されると、`StarInfo` オブジェクトが地球からの距離順に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-341">After the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType> method is called, `StarInfo` objects are displayed in order of their distance from the Earth.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="bigInteger.CompareTo obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="67038-342">比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-342">The object to compare.</span></span></param>
        <summary><span data-ttu-id="67038-343">このインスタンスと指定したオブジェクトを比較し、このインスタンスの値が指定したオブジェクトの値よりも小さいか、同じか、または大きいかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-343">Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span></span></summary>
        <returns><span data-ttu-id="67038-344">現在のインスタンスと <paramref name="obj" /> パラメーターの関係を示す符号付き整数 (次の表を参照)。</span><span class="sxs-lookup"><span data-stu-id="67038-344">A signed integer that indicates the relationship of the current instance to the <paramref name="obj" /> parameter, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="67038-345">戻り値</span><span class="sxs-lookup"><span data-stu-id="67038-345">Return value</span></span> 
 </term><description> <span data-ttu-id="67038-346">説明</span><span class="sxs-lookup"><span data-stu-id="67038-346">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="67038-347">ゼロより小さい</span><span class="sxs-lookup"><span data-stu-id="67038-347">Less than zero</span></span> 
 </term><description> <span data-ttu-id="67038-348">現在のインスタンスは <paramref name="obj" /> より小さい。</span><span class="sxs-lookup"><span data-stu-id="67038-348">The current instance is less than <paramref name="obj" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="67038-349">ゼロ</span><span class="sxs-lookup"><span data-stu-id="67038-349">Zero</span></span> 
 </term><description> <span data-ttu-id="67038-350">現在のインスタンスと <paramref name="obj" /> は等しい。</span><span class="sxs-lookup"><span data-stu-id="67038-350">The current instance equals <paramref name="obj" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="67038-351">ゼロより大きい</span><span class="sxs-lookup"><span data-stu-id="67038-351">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="67038-352">現在のインスタンスは <paramref name="obj" /> より大きい、または <paramref name="obj" /> パラメーターが <see langword="null" /> である。</span><span class="sxs-lookup"><span data-stu-id="67038-352">The current instance is greater than <paramref name="obj" />, or the <paramref name="obj" /> parameter is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-353"><xref:System.Numerics.BigInteger.CompareTo%2A> メソッドのこのオーバーロードは、<xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="67038-353">This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="67038-354">これは、非ジェネリックコレクションオブジェクトがコレクション内の項目を並べ替えるために使用されます。</span><span class="sxs-lookup"><span data-stu-id="67038-354">It is used by non-generic collection objects to order the items in the collection.</span></span>  
  
 <span data-ttu-id="67038-355">`obj` パラメーターは、次のいずれかである必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-355">The `obj` parameter must be one of the following:</span></span>  
  
-   <span data-ttu-id="67038-356">実行時の型が <xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-356">An object whose run-time type is <xref:System.Numerics.BigInteger>.</span></span>  
  
-   <span data-ttu-id="67038-357">値が `null`<xref:System.Object> 変数。</span><span class="sxs-lookup"><span data-stu-id="67038-357">An <xref:System.Object> variable whose value is `null`.</span></span> <span data-ttu-id="67038-358">`obj` パラメーターの値が `null`の場合、メソッドは1を返します。これは、現在のインスタンスが `obj`より大きいことを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-358">If the value of the `obj` parameter is `null`, the method returns 1, which indicates that the current instance is greater than `obj`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-359">次の例では、<xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> メソッドを呼び出して、<xref:System.Numerics.BigInteger> 値とオブジェクト配列の各要素を比較しています。</span><span class="sxs-lookup"><span data-stu-id="67038-359">The following example calls the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method to compare a <xref:System.Numerics.BigInteger> value with each element in an object array:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#4)]
 [!code-vb[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="67038-360"><paramref name="obj" /> が <see cref="T:System.Numerics.BigInteger" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="67038-360"><paramref name="obj" /> is not a <see cref="T:System.Numerics.BigInteger" />.</span></span></exception>
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (ulong other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(unsigned int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::UInt64 other);" />
      <MemberSignature Language="F#" Value="member this.CompareTo : uint64 -&gt; int" Usage="bigInteger.CompareTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="67038-361">比較する符号なし 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="67038-361">The unsigned 64-bit integer to compare.</span></span></param>
        <summary><span data-ttu-id="67038-362">このインスタンスと符号なし 64 ビット整数を比較し、このインスタンスの値が符号なし 64 ビット整数の値よりも小さいか、同じか、または大きいかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-362">Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.</span></span></summary>
        <returns><span data-ttu-id="67038-363">このインスタンスと <paramref name="other" /> の相対的な値を示す符号付き整数値です (次の表を参照)。</span><span class="sxs-lookup"><span data-stu-id="67038-363">A signed integer that indicates the relative value of this instance and <paramref name="other" />, as shown in the following table.</span></span>
          <list type="table"><listheader><term><span data-ttu-id="67038-364">戻り値</span><span class="sxs-lookup"><span data-stu-id="67038-364">Return value</span></span></term><description><span data-ttu-id="67038-365">説明</span><span class="sxs-lookup"><span data-stu-id="67038-365">Description</span></span></description></listheader><item><term><span data-ttu-id="67038-366">ゼロより小さい</span><span class="sxs-lookup"><span data-stu-id="67038-366">Less than zero</span></span></term><description><span data-ttu-id="67038-367">現在のインスタンスは <paramref name="other" /> より小さい。</span><span class="sxs-lookup"><span data-stu-id="67038-367">The current instance is less than <paramref name="other" />.</span></span></description></item><item><term><span data-ttu-id="67038-368">ゼロ</span><span class="sxs-lookup"><span data-stu-id="67038-368">Zero</span></span></term><description><span data-ttu-id="67038-369">現在のインスタンスと <paramref name="other" /> は等しい。</span><span class="sxs-lookup"><span data-stu-id="67038-369">The current instance equals <paramref name="other" />.</span></span></description></item><item><term><span data-ttu-id="67038-370">ゼロより大きい</span><span class="sxs-lookup"><span data-stu-id="67038-370">Greater than zero</span></span></term><description><span data-ttu-id="67038-371">現在のインスタンスは <paramref name="other" /> より大きい。</span><span class="sxs-lookup"><span data-stu-id="67038-371">The current instance is greater than <paramref name="other" />.</span></span></description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Divide (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Divide(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Divide(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Divide (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="67038-372">被除数。</span><span class="sxs-lookup"><span data-stu-id="67038-372">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="67038-373">除数。</span><span class="sxs-lookup"><span data-stu-id="67038-373">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="67038-374">一方の <see cref="T:System.Numerics.BigInteger" /> 値をもう一方の値で除算し、その結果を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-374">Divides one <see cref="T:System.Numerics.BigInteger" /> value by another and returns the result.</span></span></summary>
        <returns><span data-ttu-id="67038-375">除算の商。</span><span class="sxs-lookup"><span data-stu-id="67038-375">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-376"><xref:System.Numerics.BigInteger.Divide%2A> メソッドは整数除算を実行します。除算の結果は破棄されます。</span><span class="sxs-lookup"><span data-stu-id="67038-376">The <xref:System.Numerics.BigInteger.Divide%2A> method performs integer division; any remainder that results from the division is discarded.</span></span> <span data-ttu-id="67038-377">剰余を維持しながら整数除算を実行するには、<xref:System.Numerics.BigInteger.DivRem%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-377">To perform integer division while preserving the remainder, call the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span> <span data-ttu-id="67038-378">残りの部分のみを取得するには、<xref:System.Numerics.BigInteger.Remainder%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-378">To retrieve only the remainder, call the <xref:System.Numerics.BigInteger.Remainder%2A> method.</span></span>  
  
 <span data-ttu-id="67038-379"><xref:System.Numerics.BigInteger.Divide%2A> メソッドは、演算子のオーバーロードをサポートしていない言語で使用できます。</span><span class="sxs-lookup"><span data-stu-id="67038-379">The <xref:System.Numerics.BigInteger.Divide%2A> method can be used by languages that do not support operator overloading.</span></span> <span data-ttu-id="67038-380">この動作は、除算演算子を使用した除算と同じです。</span><span class="sxs-lookup"><span data-stu-id="67038-380">Its behavior is identical to division using the division operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-381">次の例では、<xref:System.Numerics.BigInteger> 値の配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="67038-381">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-382">次に、<xref:System.Numerics.BigInteger.Divide%2A> メソッド、除算演算子 (/)、および <xref:System.Numerics.BigInteger.DivRem%2A> メソッドを使用する除算演算で、各要素を商として使用します。</span><span class="sxs-lookup"><span data-stu-id="67038-382">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="67038-383"><paramref name="divisor" /> が 0 (ゼロ) です。</span><span class="sxs-lookup"><span data-stu-id="67038-383"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
        <altmember cref="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger DivRem (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor, out System.Numerics.BigInteger remainder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger DivRem(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor, [out] valuetype System.Numerics.BigInteger&amp; remainder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (dividend As BigInteger, divisor As BigInteger, ByRef remainder As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger DivRem(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor, [Runtime::InteropServices::Out] System::Numerics::BigInteger % remainder);" />
      <MemberSignature Language="F#" Value="static member DivRem : System.Numerics.BigInteger * System.Numerics.BigInteger * BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.DivRem (dividend, divisor, remainder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
        <Parameter Name="remainder" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="67038-384">被除数。</span><span class="sxs-lookup"><span data-stu-id="67038-384">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="67038-385">除数。</span><span class="sxs-lookup"><span data-stu-id="67038-385">The value to divide by.</span></span></param>
        <param name="remainder"><span data-ttu-id="67038-386">このメソッドから制御が戻るときに、除算の剰余を表す　<see cref="T:System.Numerics.BigInteger" /> 値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="67038-386">When this method returns, contains a <see cref="T:System.Numerics.BigInteger" /> value that represents the remainder from the division.</span></span> <span data-ttu-id="67038-387">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="67038-387">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="67038-388">ある <see cref="T:System.Numerics.BigInteger" /> 値を別の値で除算し、その結果を返します。剰余は出力パラメーターとして返されます。</span><span class="sxs-lookup"><span data-stu-id="67038-388">Divides one <see cref="T:System.Numerics.BigInteger" /> value by another, returns the result, and returns the remainder in an output parameter.</span></span></summary>
        <returns><span data-ttu-id="67038-389">除算の商。</span><span class="sxs-lookup"><span data-stu-id="67038-389">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-390">このメソッドは、整数除算によって得られる商と剰余の両方を保持します。</span><span class="sxs-lookup"><span data-stu-id="67038-390">This method preserves both the quotient and the remainder that results from integer division.</span></span> <span data-ttu-id="67038-391">残りの部分に関心がない場合は、<xref:System.Numerics.BigInteger.Divide%2A> メソッドまたは除算演算子を使用します。残りの部分のみに関心がある場合は、<xref:System.Numerics.BigInteger.Remainder%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="67038-391">If you are not interested in the remainder, use the <xref:System.Numerics.BigInteger.Divide%2A> method or the division operator; if you are only interested in the remainder, use the <xref:System.Numerics.BigInteger.Remainder%2A> method.</span></span>  
  
 <span data-ttu-id="67038-392">返された `remainder` 値の符号は、`dividend` パラメーターの符号と同じです。</span><span class="sxs-lookup"><span data-stu-id="67038-392">The sign of the returned `remainder` value is the same as the sign of the `dividend` parameter.</span></span>  
  
 <span data-ttu-id="67038-393"><xref:System.Numerics.BigInteger.DivRem%2A> メソッドの動作は、<xref:System.Math.DivRem%2A?displayProperty=nameWithType> メソッドの動作と同じです。</span><span class="sxs-lookup"><span data-stu-id="67038-393">The behavior of the <xref:System.Numerics.BigInteger.DivRem%2A> method is identical to that of the <xref:System.Math.DivRem%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-394">次の例では、<xref:System.Numerics.BigInteger> 値の配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="67038-394">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-395">次に、<xref:System.Numerics.BigInteger.Divide%2A> メソッド、除算演算子 (/)、および <xref:System.Numerics.BigInteger.DivRem%2A> メソッドを使用する除算演算で、各要素を商として使用します。</span><span class="sxs-lookup"><span data-stu-id="67038-395">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="67038-396"><paramref name="divisor" /> が 0 (ゼロ) です。</span><span class="sxs-lookup"><span data-stu-id="67038-396"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67038-397">2 つの数値が等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-397">Returns a value that indicates whether two numeric values are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (long other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(long other);" />
      <MemberSignature Language="F#" Value="override this.Equals : int64 -&gt; bool" Usage="bigInteger.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="67038-398">比較する符号付き 64 ビット整数値。</span><span class="sxs-lookup"><span data-stu-id="67038-398">The signed 64-bit integer value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-399">現在のインスタンスの値と符号付き 64 ビット整数の値が等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-399">Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.</span></span></summary>
        <returns><span data-ttu-id="67038-400">符号付き 64 ビット整数の値と現在のインスタンスの値が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-400"><see langword="true" /> if the signed 64-bit integer and the current instance have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-401">`other` が <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>、または <xref:System.UInt32> 値の場合、メソッドが呼び出されると、暗黙的に <xref:System.Int64> 値に変換されます。</span><span class="sxs-lookup"><span data-stu-id="67038-401">If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the method is called.</span></span>  
  
 <span data-ttu-id="67038-402">等しいかどうかをテストするだけでなく、2つのオブジェクト間の関係を確認するには、<xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-402">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-403">次の例では、<xref:System.UInt64>を除く各整数型から <xref:System.Numerics.BigInteger> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="67038-403">The following example instantiates a <xref:System.Numerics.BigInteger> object from each integral type except <xref:System.UInt64>.</span></span> <span data-ttu-id="67038-404">次に、<xref:System.Numerics.BigInteger.Equals%28System.Int64%29> メソッドを呼び出して、<xref:System.Numerics.BigInteger> の値を <xref:System.Numerics.BigInteger> コンストラクターに渡された元の整数値と比較します。</span><span class="sxs-lookup"><span data-stu-id="67038-404">It then calls the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29> method to compare the <xref:System.Numerics.BigInteger> value with the original integer value that was passed to the <xref:System.Numerics.BigInteger> constructor.</span></span> <span data-ttu-id="67038-405">出力に示されているように、それぞれの値は等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="67038-405">As the output shows, the values are equal in each case.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals.cpp#1)]
 [!code-csharp[System.Numerics.BigInteger.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Numerics.BigInteger other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Numerics.BigInteger other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Numerics::BigInteger other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Numerics.BigInteger -&gt; bool" Usage="bigInteger.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="67038-406">比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-406">The object to compare.</span></span></param>
        <summary><span data-ttu-id="67038-407">現在のインスタンスの値と指定された <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-407">Returns a value that indicates whether the current instance and a specified <see cref="T:System.Numerics.BigInteger" /> object have the same value.</span></span></summary>
        <returns><span data-ttu-id="67038-408">この <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値と <paramref name="other" /> の値が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-408"><see langword="true" /> if this <see cref="T:System.Numerics.BigInteger" /> object and <paramref name="other" /> have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-409">このメソッドは、<xref:System.IEquatable%601> インターフェイスを実装し、`other` パラメーターを <xref:System.Numerics.BigInteger> オブジェクトに変換する必要がないため、<xref:System.Numerics.BigInteger.Equals%28System.Object%29> より少しのパフォーマンスを発揮します。</span><span class="sxs-lookup"><span data-stu-id="67038-409">This method implements the <xref:System.IEquatable%601> interface and performs slightly better than <xref:System.Numerics.BigInteger.Equals%28System.Object%29> because it does not have to convert the `other` parameter to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 <span data-ttu-id="67038-410">等しいかどうかをテストするだけでなく、2つの <xref:System.Numerics.BigInteger> オブジェクト間の関係を確認するには、<xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-410">To determine the relationship between the two <xref:System.Numerics.BigInteger> objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-411">次の例では、地球からの2つの星のおおよその距離を比較して、地球からのイプシロンが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="67038-411">The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal.</span></span> <span data-ttu-id="67038-412">この例では、<xref:System.Numerics.BigInteger.Equals%2A> メソッドの各オーバーロードを使用して、等しいかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="67038-412">The example uses each overload of the <xref:System.Numerics.BigInteger.Equals%2A> method to test for equality.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]
 [!code-csharp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="bigInteger.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="67038-413">比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-413">The object to compare.</span></span></param>
        <summary><span data-ttu-id="67038-414">現在のインスタンスの値と指定されたオブジェクトの値が等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-414">Returns a value that indicates whether the current instance and a specified object have the same value.</span></span></summary>
        <returns><span data-ttu-id="67038-415"><paramref name="obj" /> 引数が <see cref="T:System.Numerics.BigInteger" /> オブジェクトで、その値が現在の <see cref="T:System.Numerics.BigInteger" /> インスタンスの値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-415"><see langword="true" /> if the <paramref name="obj" /> argument is a <see cref="T:System.Numerics.BigInteger" /> object, and its value is equal to the value of the current <see cref="T:System.Numerics.BigInteger" /> instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-416">`obj` 引数が <xref:System.Numerics.BigInteger> 値でない場合、メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-416">If the `obj` argument is not a <xref:System.Numerics.BigInteger> value, the method returns `false`.</span></span> <span data-ttu-id="67038-417">このメソッドは、`obj` が現在のインスタンスと等しい値を持つ <xref:System.Numerics.BigInteger> インスタンスである場合にのみ `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-417">The method returns `true` only if `obj` is a <xref:System.Numerics.BigInteger> instance whose value is equal to the current instance.</span></span>  
  
 <span data-ttu-id="67038-418">等しいかどうかをテストするだけでなく、2つのオブジェクト間の関係を確認するには、<xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-418">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-419">次の例では、並列 <xref:System.Object> と <xref:System.Numerics.BigInteger> 配列を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-419">The following example defines parallel <xref:System.Object> and <xref:System.Numerics.BigInteger> arrays.</span></span> <span data-ttu-id="67038-420">1つの配列の各要素は、2番目の配列の対応する要素と同じ値を持ちます。</span><span class="sxs-lookup"><span data-stu-id="67038-420">Each element of one array has the same value as the corresponding element of the second array.</span></span> <span data-ttu-id="67038-421">この例の出力に示すように、<xref:System.Numerics.BigInteger> 配列内のインスタンスは、後者が <xref:System.Numerics.BigInteger> であり、その値が等しい場合にのみ、<xref:System.Object> 配列内のインスタンスと等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="67038-421">As the output from the example shows, the instance in the <xref:System.Numerics.BigInteger> array is considered to be equal to the instance in the <xref:System.Object> array only if the latter is a <xref:System.Numerics.BigInteger> and their values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/Equals_Obj1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/Equals_Obj1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (ulong other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(unsigned int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::UInt64 other);" />
      <MemberSignature Language="F#" Value="override this.Equals : uint64 -&gt; bool" Usage="bigInteger.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="67038-422">比較する符号なし 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="67038-422">The unsigned 64-bit integer to compare.</span></span></param>
        <summary><span data-ttu-id="67038-423">現在のインスタンスの値と符号なし 64 ビット整数の値が等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-423">Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.</span></span></summary>
        <returns><span data-ttu-id="67038-424">現在のインスタンスの値と符号なし 64 ビット整数の値が等しい場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-424"><see langword="true" /> if the current instance and the unsigned 64-bit integer have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-425">等しいかどうかをテストするだけでなく、2つのオブジェクト間の関係を確認するには、<xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-425">To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-426">次の例では、地球からの2つの星のおおよその距離を比較して、地球からのイプシロンが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="67038-426">The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal.</span></span> <span data-ttu-id="67038-427">この例では、<xref:System.Numerics.BigInteger.Equals%2A> メソッドの各オーバーロードを使用して、等しいかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="67038-427">The example uses each overload of the <xref:System.Numerics.BigInteger.Equals%2A> method to test for equality.</span></span>  
  
 [!code-cpp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]
 [!code-csharp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public int GetByteCount (bool isUnsigned = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetByteCount(bool isUnsigned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GetByteCount(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteCount (Optional isUnsigned As Boolean = false) As Integer" />
      <MemberSignature Language="F#" Value="member this.GetByteCount : bool -&gt; int" Usage="bigInteger.GetByteCount isUnsigned" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isUnsigned" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="isUnsigned"><span data-ttu-id="67038-428">符号なしのエンコードを使用するには <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-428"><see langword="true" /> to use unsigned encoding; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="67038-429"><see cref="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" /> と <see cref="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" /> によって出力されるバイト数を取得します。</span><span class="sxs-lookup"><span data-stu-id="67038-429">Gets the number of bytes that will be output by <see cref="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" /> and <see cref="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" />.</span></span></summary>
        <returns><span data-ttu-id="67038-430">バイト数です。</span><span class="sxs-lookup"><span data-stu-id="67038-430">The number of bytes.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="bigInteger.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67038-431">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-431">Returns the hash code for the current <see cref="T:System.Numerics.BigInteger" /> object.</span></span></summary>
        <returns><span data-ttu-id="67038-432">32 ビットの符号付き整数のハッシュ コードです。</span><span class="sxs-lookup"><span data-stu-id="67038-432">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreatestCommonDivisor">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger GreatestCommonDivisor (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger GreatestCommonDivisor(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreatestCommonDivisor (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger GreatestCommonDivisor(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member GreatestCommonDivisor : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.GreatestCommonDivisor (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-433">最初の値。</span><span class="sxs-lookup"><span data-stu-id="67038-433">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="67038-434">秒の値。</span><span class="sxs-lookup"><span data-stu-id="67038-434">The second value.</span></span></param>
        <summary><span data-ttu-id="67038-435">2 つの <see cref="T:System.Numerics.BigInteger" /> 値の最大公約数を求めます。</span><span class="sxs-lookup"><span data-stu-id="67038-435">Finds the greatest common divisor of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="67038-436"><paramref name="left" /> と <paramref name="right" /> の最大公約数。</span><span class="sxs-lookup"><span data-stu-id="67038-436">The greatest common divisor of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-437">最も一般的な除数は、剰余を返さずに2つの <xref:System.Numerics.BigInteger> 値を分割できる最大数です。</span><span class="sxs-lookup"><span data-stu-id="67038-437">The greatest common divisor is the largest number into which the two <xref:System.Numerics.BigInteger> values can be divided without returning a remainder.</span></span>  
  
 <span data-ttu-id="67038-438">`left` パラメーターと `right` パラメーターが0以外の数値の場合、すべての数値を1で割ることができるため、メソッドは常に少なくとも1の値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-438">If the `left` and `right` parameters are non-zero numbers, the method always returns at least a value of 1 because all numbers can be divided by 1.</span></span> <span data-ttu-id="67038-439">どちらかのパラメーターがゼロの場合、メソッドはゼロ以外のパラメーターの絶対値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-439">If either parameter is zero, the method returns the absolute value of the non-zero parameter.</span></span> <span data-ttu-id="67038-440">両方の値が0の場合、メソッドは0を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-440">If both values are zero, the method returns zero.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67038-441">`left` と `right` の非常に大きな値の最大公約数を計算すると、非常に時間がかかる操作になることがあります。</span><span class="sxs-lookup"><span data-stu-id="67038-441">Computing the greatest common divisor of very large values of `left` and `right` can be a very time-consuming operation.</span></span>  
  
 <span data-ttu-id="67038-442"><xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> メソッドによって返される値は、`left` と `right` パラメーターの符号に関係なく、常に正になります。</span><span class="sxs-lookup"><span data-stu-id="67038-442">The value returned by the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method is always positive regardless of the sign of the `left` and `right` parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-443">次の例は、<xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> メソッドの呼び出しと、<xref:System.ArgumentOutOfRangeException>に関する有益な情報を提供するために必要な例外処理を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-443">The following example illustrates a call to the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method and the exception handling necessary to provide useful information about an <xref:System.ArgumentOutOfRangeException>.</span></span> <span data-ttu-id="67038-444">結果は、この2つの数値の最も一般的な除数が1であることを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-444">The result indicates that the greatest common divisor of these two numbers is 1.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#10)]
 [!code-vb[System.Numeric.BigInteger.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEven" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsEven" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEven As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEven { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEven : bool" Usage="System.Numerics.BigInteger.IsEven" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67038-445">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が偶数かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-445">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is an even number.</span></span></summary>
        <value><span data-ttu-id="67038-446"><see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が偶数の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-446"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is an even number; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-447">このプロパティは、<xref:System.Numerics.BigInteger> 値が2で均等に割り切れるかどうかを示す便利な機能です。</span><span class="sxs-lookup"><span data-stu-id="67038-447">This property is a convenience feature that indicates whether a <xref:System.Numerics.BigInteger> value is evenly divisible by two.</span></span> <span data-ttu-id="67038-448">これは、次の式と同じです。</span><span class="sxs-lookup"><span data-stu-id="67038-448">It is equivalent to the following expression:</span></span>  
  
```csharp   
value % 2 == 0;  
```  
  
```vb  
value Mod 2 = 0  
```  
  
 <span data-ttu-id="67038-449">現在の <xref:System.Numerics.BigInteger> オブジェクトの値が <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>場合、プロパティは `true`を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-449">If the value of the current <xref:System.Numerics.BigInteger> object is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>, the property returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOne">
      <MemberSignature Language="C#" Value="public bool IsOne { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOne" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsOne" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOne As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOne { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOne : bool" Usage="System.Numerics.BigInteger.IsOne" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67038-450">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が <see cref="P:System.Numerics.BigInteger.One" /> かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-450">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />.</span></span></summary>
        <value><span data-ttu-id="67038-451"><see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が <see cref="P:System.Numerics.BigInteger.One" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-451"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-452">このプロパティは、`thisBigInteger.Equals(BigInteger.One)`など、他の比較よりもはるかに優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="67038-452">This property offers significantly better performance than other comparisons with one, such as `thisBigInteger.Equals(BigInteger.One)`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.One" />
      </Docs>
    </Member>
    <Member MemberName="IsPowerOfTwo">
      <MemberSignature Language="C#" Value="public bool IsPowerOfTwo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPowerOfTwo" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsPowerOfTwo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPowerOfTwo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPowerOfTwo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPowerOfTwo : bool" Usage="System.Numerics.BigInteger.IsPowerOfTwo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67038-453">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が 2 の累乗かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-453">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is a power of two.</span></span></summary>
        <value><span data-ttu-id="67038-454"><see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が 2 の累乗の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-454"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is a power of two; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-455">このプロパティは、<xref:System.Numerics.BigInteger> の値に0以外のビットが1つだけ設定されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="67038-455">This property determines whether a <xref:System.Numerics.BigInteger> value has a single non-zero bit set.</span></span> <span data-ttu-id="67038-456">つまり、現在の <xref:System.Numerics.BigInteger> オブジェクトの値が 1 (つまり、2<sup>0</sup>) またはそれより大きい2の累乗の場合、`true` を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-456">This means that it returns `true` if the value of the current <xref:System.Numerics.BigInteger> object is 1 (that is, 2<sup>0</sup>) or any greater power of two.</span></span> <span data-ttu-id="67038-457">現在の <xref:System.Numerics.BigInteger> オブジェクトの値が0の場合は、`false` を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-457">It returns `false` if the value of the current <xref:System.Numerics.BigInteger> object is 0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsZero">
      <MemberSignature Language="C#" Value="public bool IsZero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsZero" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsZero" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsZero As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsZero { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsZero : bool" Usage="System.Numerics.BigInteger.IsZero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67038-458">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が <see cref="P:System.Numerics.BigInteger.Zero" /> かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-458">Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />.</span></span></summary>
        <value><span data-ttu-id="67038-459"><see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が <see cref="P:System.Numerics.BigInteger.Zero" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-459"><see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-460">このプロパティは `BigInteger.Equals(BigInteger.Zero)`よりもはるかに優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="67038-460">This property offers significantly better performance than `BigInteger.Equals(BigInteger.Zero)`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.Zero" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67038-461">指定した数の対数を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-461">Returns the logarithm of a specified number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.BigInteger -&gt; double" Usage="System.Numerics.BigInteger.Log value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-462">対数を求める対象の数値。</span><span class="sxs-lookup"><span data-stu-id="67038-462">The number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="67038-463">指定した数の自然 (底 <see langword="e" />) 対数を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-463">Returns the natural (base <see langword="e" />) logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="67038-464"><paramref name="value" /> の自然対数 (<see langword="e" /> を底とする対数)。「解説」の表を参照してください。</span><span class="sxs-lookup"><span data-stu-id="67038-464">The natural (base <see langword="e" />) logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-465">`value` パラメーターは、10進数値として指定されます。</span><span class="sxs-lookup"><span data-stu-id="67038-465">The `value` parameter is specified as a base 10 number.</span></span>  
  
 <span data-ttu-id="67038-466">このメソッドの正確な戻り値は、次の表に示すように、`value`の符号によって異なります。</span><span class="sxs-lookup"><span data-stu-id="67038-466">The precise return value of this method depends on the sign of `value`, as the following table shows.</span></span>  
  
|<span data-ttu-id="67038-467">`value` パラメーターの符号</span><span class="sxs-lookup"><span data-stu-id="67038-467">Sign of `value` parameter</span></span>|<span data-ttu-id="67038-468">戻り値</span><span class="sxs-lookup"><span data-stu-id="67038-468">Return value</span></span>|  
|-------------------------------|------------------|  
|<span data-ttu-id="67038-469">Positive</span><span class="sxs-lookup"><span data-stu-id="67038-469">Positive</span></span>|<span data-ttu-id="67038-470">`value`の自然対数。つまり、ln `value`、または log e`value`です。</span><span class="sxs-lookup"><span data-stu-id="67038-470">The natural logarithm of `value`; that is, ln `value`, or log e`value`.</span></span>|  
|<span data-ttu-id="67038-471">ゼロ</span><span class="sxs-lookup"><span data-stu-id="67038-471">Zero</span></span>|<span data-ttu-id="67038-472">[https://login.microsoftonline.com/consumers/](<xref:System.Double.NegativeInfinity>)</span><span class="sxs-lookup"><span data-stu-id="67038-472"><xref:System.Double.NegativeInfinity>.</span></span>|  
|<span data-ttu-id="67038-473">Negative</span><span class="sxs-lookup"><span data-stu-id="67038-473">Negative</span></span>|<span data-ttu-id="67038-474">[https://login.microsoftonline.com/consumers/](<xref:System.Double.NaN>)</span><span class="sxs-lookup"><span data-stu-id="67038-474"><xref:System.Double.NaN>.</span></span>|  
  
 <span data-ttu-id="67038-475"><xref:System.Numerics.BigInteger> 値の10を底とする対数を計算するには、<xref:System.Numerics.BigInteger.Log10%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-475">To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method.</span></span> <span data-ttu-id="67038-476">別の基数の数値の対数を計算するには、<xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-476">To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29> method.</span></span>  
  
 <span data-ttu-id="67038-477"><xref:System.Math.Exp%2A?displayProperty=nameWithType> メソッドと共に <xref:System.Numerics.BigInteger.Log%2A> メソッドを呼び出すことによって、数値の平方根を見つけることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-477">You can find the square root of a number by calling the <xref:System.Numerics.BigInteger.Log%2A> method along with the <xref:System.Math.Exp%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="67038-478">結果が <xref:System.Double.MaxValue?displayProperty=nameWithType>よりも大きい場合は、結果が <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> ことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="67038-478">Note that the result is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> if the result is greater than <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67038-479">次の例では、<xref:System.Numerics.BigInteger> 値の配列内の各要素の平方根を計算します。</span><span class="sxs-lookup"><span data-stu-id="67038-479">The following example calculates the square root of each element in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.biginteger.log/cs/log1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.biginteger.log/vb/log1.vb#1)]
  
 <span data-ttu-id="67038-480">このメソッドは、プリミティブな数値型の <xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="67038-480">This method corresponds to the <xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="67038-481"><paramref name="value" /> の自然対数が、<see cref="T:System.Double" /> データ型の範囲外です。</span><span class="sxs-lookup"><span data-stu-id="67038-481">The natural log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (System.Numerics.BigInteger value, double baseValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(valuetype System.Numerics.BigInteger value, float64 baseValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As BigInteger, baseValue As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(System::Numerics::BigInteger value, double baseValue);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.BigInteger * double -&gt; double" Usage="System.Numerics.BigInteger.Log (value, baseValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="baseValue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-482">対数を検索する対象の数値。</span><span class="sxs-lookup"><span data-stu-id="67038-482">A number whose logarithm is to be found.</span></span></param>
        <param name="baseValue"><span data-ttu-id="67038-483">対数の底。</span><span class="sxs-lookup"><span data-stu-id="67038-483">The base of the logarithm.</span></span></param>
        <summary><span data-ttu-id="67038-484">指定した数値の指定した底での対数を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-484">Returns the logarithm of a specified number in a specified base.</span></span></summary>
        <returns><span data-ttu-id="67038-485"><paramref name="baseValue" /> を底とする <paramref name="value" /> の対数。「解説」の表を参照してください。</span><span class="sxs-lookup"><span data-stu-id="67038-485">The base <paramref name="baseValue" /> logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-486">`value` パラメーターと `baseValue` パラメーターは、10進数値として指定されます。</span><span class="sxs-lookup"><span data-stu-id="67038-486">The `value` and `baseValue` parameters are specified as base 10 numbers.</span></span>  
  
 <span data-ttu-id="67038-487">メソッドの正確な戻り値は、次の表に示すように、`value` の符号と `baseValue`の符号と値によって異なります。</span><span class="sxs-lookup"><span data-stu-id="67038-487">The precise return value of the method depends on the sign of `value` and on the sign and value of `baseValue`, as the following table shows.</span></span>  
  
|<span data-ttu-id="67038-488">`value` パラメーター</span><span class="sxs-lookup"><span data-stu-id="67038-488">`value` parameter</span></span>|<span data-ttu-id="67038-489">`baseValue` パラメーター</span><span class="sxs-lookup"><span data-stu-id="67038-489">`baseValue` parameter</span></span>|<span data-ttu-id="67038-490">戻り値</span><span class="sxs-lookup"><span data-stu-id="67038-490">Return value</span></span>|  
|-----------------------|---------------------------|------------------|  
|<span data-ttu-id="67038-491">`value` > 0</span><span class="sxs-lookup"><span data-stu-id="67038-491">`value` > 0</span></span>|<span data-ttu-id="67038-492">(0 < `baseValue` < 1)-または-(`baseValue` > 1)</span><span class="sxs-lookup"><span data-stu-id="67038-492">(0 < `baseValue` < 1) -or-(`baseValue` > 1)</span></span>|<span data-ttu-id="67038-493">logbaseValue (`value`)</span><span class="sxs-lookup"><span data-stu-id="67038-493">logbaseValue(`value`)</span></span>|  
|<span data-ttu-id="67038-494">`value` < 0</span><span class="sxs-lookup"><span data-stu-id="67038-494">`value` < 0</span></span>|<span data-ttu-id="67038-495">(任意の値)</span><span class="sxs-lookup"><span data-stu-id="67038-495">(any value)</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="67038-496">(任意の値)</span><span class="sxs-lookup"><span data-stu-id="67038-496">(any value)</span></span>|<span data-ttu-id="67038-497">`baseValue` < 0</span><span class="sxs-lookup"><span data-stu-id="67038-497">`baseValue` < 0</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="67038-498">`value` != 1</span><span class="sxs-lookup"><span data-stu-id="67038-498">`value` != 1</span></span>|<span data-ttu-id="67038-499">`baseValue` = 0</span><span class="sxs-lookup"><span data-stu-id="67038-499">`baseValue` = 0</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="67038-500">`value` != 1</span><span class="sxs-lookup"><span data-stu-id="67038-500">`value` != 1</span></span>|`baseValue` = <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="67038-501">(任意の値)</span><span class="sxs-lookup"><span data-stu-id="67038-501">(any value)</span></span>|`baseValue` = <xref:System.Double.NaN?displayProperty=nameWithType>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="67038-502">(任意の値)</span><span class="sxs-lookup"><span data-stu-id="67038-502">(any value)</span></span>|<span data-ttu-id="67038-503">`baseValue` = 1</span><span class="sxs-lookup"><span data-stu-id="67038-503">`baseValue` = 1</span></span>|<xref:System.Double.NaN?displayProperty=nameWithType>|  
|<span data-ttu-id="67038-504">`value` = 0</span><span class="sxs-lookup"><span data-stu-id="67038-504">`value` = 0</span></span>|<span data-ttu-id="67038-505">0 < `baseValue` < 1</span><span class="sxs-lookup"><span data-stu-id="67038-505">0 < `baseValue` < 1</span></span>|<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|  
|<span data-ttu-id="67038-506">`value` = 0</span><span class="sxs-lookup"><span data-stu-id="67038-506">`value` = 0</span></span>|<span data-ttu-id="67038-507">`baseValue` > 1</span><span class="sxs-lookup"><span data-stu-id="67038-507">`baseValue` > 1</span></span>|<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|  
|<span data-ttu-id="67038-508">`value` = 1</span><span class="sxs-lookup"><span data-stu-id="67038-508">`value` = 1</span></span>|<span data-ttu-id="67038-509">`baseValue` = 0</span><span class="sxs-lookup"><span data-stu-id="67038-509">`baseValue` = 0</span></span>|<span data-ttu-id="67038-510">0</span><span class="sxs-lookup"><span data-stu-id="67038-510">0</span></span>|  
|<span data-ttu-id="67038-511">`value` = 1</span><span class="sxs-lookup"><span data-stu-id="67038-511">`value` = 1</span></span>|`baseValue` = <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>|<span data-ttu-id="67038-512">0</span><span class="sxs-lookup"><span data-stu-id="67038-512">0</span></span>|  
  
 <span data-ttu-id="67038-513"><xref:System.Numerics.BigInteger> 値の10を底とする対数を計算するには、<xref:System.Numerics.BigInteger.Log10%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-513">To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method.</span></span> <span data-ttu-id="67038-514">数値の自然対数を計算するには、<xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-514">To calculate the natural logarithm of a number, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29> method.</span></span>  
  
 <span data-ttu-id="67038-515">このメソッドは、プリミティブな数値型の <xref:System.Math.Log%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="67038-515">This method corresponds to the <xref:System.Math.Log%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="67038-516"><paramref name="value" /> の対数が、<see cref="T:System.Double" /> データ型の範囲外です。</span><span class="sxs-lookup"><span data-stu-id="67038-516">The log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static double Log10 (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log10(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log10(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Log10 : System.Numerics.BigInteger -&gt; double" Usage="System.Numerics.BigInteger.Log10 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-517">対数を検索する対象の数値。</span><span class="sxs-lookup"><span data-stu-id="67038-517">A number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="67038-518">指定した数の底 10 の対数を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-518">Returns the base 10 logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="67038-519">10 を底とする <paramref name="value" /> の対数。「解説」の表を参照してください。</span><span class="sxs-lookup"><span data-stu-id="67038-519">The base 10 logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-520">`value` パラメーターは、10進数値として指定されます。</span><span class="sxs-lookup"><span data-stu-id="67038-520">The `value` parameter is specified as a base 10 number.</span></span>  
  
 <span data-ttu-id="67038-521">メソッドの正確な戻り値は、次の表に示すように、`value`の符号によって異なります。</span><span class="sxs-lookup"><span data-stu-id="67038-521">The precise return value of the method depends on the sign of `value`, as the following table shows.</span></span>  
  
|<span data-ttu-id="67038-522">値パラメーターの符号</span><span class="sxs-lookup"><span data-stu-id="67038-522">Sign of value parameter</span></span>|<span data-ttu-id="67038-523">戻り値</span><span class="sxs-lookup"><span data-stu-id="67038-523">Return value</span></span>|  
|-----------------------------|------------------|  
|<span data-ttu-id="67038-524">Positive</span><span class="sxs-lookup"><span data-stu-id="67038-524">Positive</span></span>|<span data-ttu-id="67038-525">`value`の底10のログつまり、log10`value`です。</span><span class="sxs-lookup"><span data-stu-id="67038-525">The base 10 log of `value`; that is, log10`value`.</span></span>|  
|<span data-ttu-id="67038-526">ゼロ</span><span class="sxs-lookup"><span data-stu-id="67038-526">Zero</span></span>|<span data-ttu-id="67038-527">[https://login.microsoftonline.com/consumers/](<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="67038-527"><xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>|  
|<span data-ttu-id="67038-528">Negative</span><span class="sxs-lookup"><span data-stu-id="67038-528">Negative</span></span>|<span data-ttu-id="67038-529">[https://login.microsoftonline.com/consumers/](<xref:System.Double.NaN?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="67038-529"><xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>|  
  
 <span data-ttu-id="67038-530"><xref:System.Numerics.BigInteger> 値の自然対数を計算するには、<xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-530">To calculate the natural logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="67038-531">別の基数の数値の対数を計算するには、<xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-531">To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="67038-532">このメソッドは、プリミティブな数値型の <xref:System.Math.Log10%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="67038-532">This method corresponds to the <xref:System.Math.Log10%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="67038-533">10 を底とする <paramref name="value" /> の対数が、<see cref="T:System.Double" /> データ型の範囲外です。</span><span class="sxs-lookup"><span data-stu-id="67038-533">The base 10 log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Max (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Max(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Max(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Max : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Max (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-534">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-534">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-535">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-535">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-536">2 つの <see cref="T:System.Numerics.BigInteger" /> 値のうち　大きい方の値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-536">Returns the larger of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="67038-537"><paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターのいずれか大きい方。</span><span class="sxs-lookup"><span data-stu-id="67038-537">The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-538">このメソッドは、プリミティブな数値型の <xref:System.Math.Max%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="67038-538">This method corresponds to the <xref:System.Math.Max%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-539">次の例では、<xref:System.Numerics.BigInteger.Max%2A> メソッドを使用して、<xref:System.Numerics.BigInteger> 値の配列内の最大の数値を選択します。</span><span class="sxs-lookup"><span data-stu-id="67038-539">The following example uses the <xref:System.Numerics.BigInteger.Max%2A> method to select the largest number in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/cs/Max1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/vb/Max1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Min (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Min(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Min(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Min : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Min (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-540">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-540">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-541">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-541">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-542">2 つの <see cref="T:System.Numerics.BigInteger" /> 値のうち小さい方の値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-542">Returns the smaller of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="67038-543"><paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターのいずれか小さい方。</span><span class="sxs-lookup"><span data-stu-id="67038-543">The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-544">このメソッドは、プリミティブな数値型の <xref:System.Math.Min%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="67038-544">This method corresponds to the <xref:System.Math.Min%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-545">次の例では、<xref:System.Numerics.BigInteger.Min%2A> メソッドを使用して、<xref:System.Numerics.BigInteger> 値の配列内の最小の数値を選択します。</span><span class="sxs-lookup"><span data-stu-id="67038-545">The following example uses the <xref:System.Numerics.BigInteger.Min%2A> method to select the smallest number in an array of <xref:System.Numerics.BigInteger> values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/cs/Min1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/vb/Min1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="MinusOne">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger MinusOne { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger MinusOne" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.MinusOne" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinusOne As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger MinusOne { System::Numerics::BigInteger get(); };" />
      <MemberSignature Language="F#" Value="member this.MinusOne : System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.MinusOne" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67038-546">負の 1 (-1) を表す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="67038-546">Gets a value that represents the number negative one (-1).</span></span></summary>
        <value><span data-ttu-id="67038-547">値が負の 1 (-1) である整数。</span><span class="sxs-lookup"><span data-stu-id="67038-547">An integer whose value is negative one (-1).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-548"><xref:System.Numerics.BigInteger.MinusOne%2A> プロパティは、<xref:System.Numerics.BigInteger> 値を-1 と比較したり、-1 を <xref:System.Numerics.BigInteger> オブジェクトに割り当てたりするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="67038-548">The <xref:System.Numerics.BigInteger.MinusOne%2A> property is used to compare a <xref:System.Numerics.BigInteger> value to -1 or to assign -1 to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.One" />
        <altmember cref="P:System.Numerics.BigInteger.IsOne" />
      </Docs>
    </Member>
    <Member MemberName="ModPow">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger ModPow (System.Numerics.BigInteger value, System.Numerics.BigInteger exponent, System.Numerics.BigInteger modulus);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger ModPow(valuetype System.Numerics.BigInteger value, valuetype System.Numerics.BigInteger exponent, valuetype System.Numerics.BigInteger modulus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModPow (value As BigInteger, exponent As BigInteger, modulus As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger ModPow(System::Numerics::BigInteger value, System::Numerics::BigInteger exponent, System::Numerics::BigInteger modulus);" />
      <MemberSignature Language="F#" Value="static member ModPow : System.Numerics.BigInteger * System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.ModPow (value, exponent, modulus)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="exponent" Type="System.Numerics.BigInteger" />
        <Parameter Name="modulus" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-549">指数 <paramref name="exponent" /> で累乗する数値。</span><span class="sxs-lookup"><span data-stu-id="67038-549">The number to raise to the <paramref name="exponent" /> power.</span></span></param>
        <param name="exponent"><span data-ttu-id="67038-550"><paramref name="value" /> の指数。</span><span class="sxs-lookup"><span data-stu-id="67038-550">The exponent to raise <paramref name="value" /> by.</span></span></param>
        <param name="modulus"><span data-ttu-id="67038-551"><paramref name="value" /> で累乗した <paramref name="exponent" /> の除算に使用する除数。</span><span class="sxs-lookup"><span data-stu-id="67038-551">The number by which to divide <paramref name="value" /> raised to the <paramref name="exponent" /> power.</span></span></param>
        <summary><span data-ttu-id="67038-552">ある数値を別の数値で累乗し、それをさらに別の数値で割った結果生じた剰余を求めます。</span><span class="sxs-lookup"><span data-stu-id="67038-552">Performs modulus division on a number raised to the power of another number.</span></span></summary>
        <returns><span data-ttu-id="67038-553"><paramref name="value" /><sup> 指数 </sup> を <paramref name="modulus" /> で割った結果生じた剰余。</span><span class="sxs-lookup"><span data-stu-id="67038-553">The remainder after dividing <paramref name="value" /><sup>exponent</sup> by <paramref name="modulus" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-554"><xref:System.Numerics.BigInteger.ModPow%2A> メソッドは、次の式を評価します。</span><span class="sxs-lookup"><span data-stu-id="67038-554">The <xref:System.Numerics.BigInteger.ModPow%2A> method evaluates the following expression:</span></span>  
  
 <span data-ttu-id="67038-555">(baseValue ^ 指数)Mod 剰余</span><span class="sxs-lookup"><span data-stu-id="67038-555">(baseValue ^ exponent) Mod modulus</span></span>  
  
 <span data-ttu-id="67038-556">剰余除算のない <xref:System.Numerics.BigInteger> 値に対して指数演算を実行するには、<xref:System.Numerics.BigInteger.Pow%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="67038-556">To perform exponentiation on <xref:System.Numerics.BigInteger> values without modulus division, use the <xref:System.Numerics.BigInteger.Pow%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-557">次の例では、<xref:System.Numerics.BigInteger.ModPow%2A> メソッドの呼び出しを簡単に説明します。</span><span class="sxs-lookup"><span data-stu-id="67038-557">The following example provides a simple illustration of calling the <xref:System.Numerics.BigInteger.ModPow%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ModPow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/cs/ModPow1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ModPow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/vb/ModPow1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="67038-558"><paramref name="modulus" /> が 0 です。</span><span class="sxs-lookup"><span data-stu-id="67038-558"><paramref name="modulus" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="67038-559"><paramref name="exponent" /> は負の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-559"><paramref name="exponent" /> is negative.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Multiply (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Multiply(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Multiply(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-560">乗算対象の最初の数。</span><span class="sxs-lookup"><span data-stu-id="67038-560">The first number to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="67038-561">乗算対象の 2 番目の数。</span><span class="sxs-lookup"><span data-stu-id="67038-561">The second number to multiply.</span></span></param>
        <summary><span data-ttu-id="67038-562">2 つの <see cref="T:System.Numerics.BigInteger" /> 値の積を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-562">Returns the product of two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="67038-563"><paramref name="left" /> と <paramref name="right" /> の 2 つのパラメーターの積。</span><span class="sxs-lookup"><span data-stu-id="67038-563">The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-564"><xref:System.Numerics.BigInteger.Multiply%2A> メソッドは、演算子のオーバーロードをサポートしていない言語に対して実装されます。</span><span class="sxs-lookup"><span data-stu-id="67038-564">The <xref:System.Numerics.BigInteger.Multiply%2A> method is implemented for languages that do not support operator overloading.</span></span> <span data-ttu-id="67038-565">その動作は、乗算演算子を使用した乗算と同じです。</span><span class="sxs-lookup"><span data-stu-id="67038-565">Its behavior is identical to multiplication using the multiplication operator.</span></span> <span data-ttu-id="67038-566">さらに、次の例に示すように、<xref:System.Numerics.BigInteger.Multiply%2A> メソッドは、乗算によって得られる製品を割り当てることによって <xref:System.Numerics.BigInteger> 変数をインスタンス化するときに、乗算演算子の代替として使用できます。</span><span class="sxs-lookup"><span data-stu-id="67038-566">In addition, the <xref:System.Numerics.BigInteger.Multiply%2A> method is a useful substitute for the multiplication operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a product that results from multiplication, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#1)]  
  
 <span data-ttu-id="67038-567">必要に応じて、このメソッドは、他の整数型から <xref:System.Numerics.BigInteger> オブジェクトへの暗黙的な変換を自動的に実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-567">If necessary, this method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="67038-568">次のセクションの例では、<xref:System.Numerics.BigInteger.Multiply%2A> メソッドに2つの <xref:System.Int64> 値が渡されています。</span><span class="sxs-lookup"><span data-stu-id="67038-568">This is illustrated in the example in the next section, where the <xref:System.Numerics.BigInteger.Multiply%2A> method is passed two <xref:System.Int64> values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-569">次の例では、2つの long 整数を使用して乗算を実行しようとしています。</span><span class="sxs-lookup"><span data-stu-id="67038-569">The following example tries to perform multiplication with two long integers.</span></span> <span data-ttu-id="67038-570">結果は長整数の範囲を超えているため、<xref:System.OverflowException> がスローされ、乗算を処理するために <xref:System.Numerics.BigInteger.Multiply%2A> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="67038-570">Because the result exceeds the range of a long integer, an <xref:System.OverflowException> is thrown, and the <xref:System.Numerics.BigInteger.Multiply%2A> method is called to handle the multiplication.</span></span> <span data-ttu-id="67038-571">ではC# 、`checked` キーワード (この例では) または `/checked+` コンパイラオプションのいずれかを使用して、数値のオーバーフロー時に例外がスローされるようにする必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="67038-571">Note that C# requires that you use either the `checked` keyword (as in this example) or the `/checked+` compiler option to make sure an exception is thrown on a numeric overflow.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#7)]
 [!code-vb[System.Numeric.BigInteger.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Negate (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Negate(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Negate (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Negate(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Negate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-572">否定する値。</span><span class="sxs-lookup"><span data-stu-id="67038-572">The value to negate.</span></span></param>
        <summary><span data-ttu-id="67038-573">指定された <see cref="T:System.Numerics.BigInteger" /> 値を否定 (負数化) します。</span><span class="sxs-lookup"><span data-stu-id="67038-573">Negates a specified <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-574"><paramref name="value" /> パラメーターに -1 を乗算した結果。</span><span class="sxs-lookup"><span data-stu-id="67038-574">The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-575">否定は、数値の加法逆を取得します。</span><span class="sxs-lookup"><span data-stu-id="67038-575">Negation obtains the additive inverse of a number.</span></span> <span data-ttu-id="67038-576">数値の加法逆の値は、元の数値に加算されるときに値0が生成される数値です。</span><span class="sxs-lookup"><span data-stu-id="67038-576">The additive inverse of a number is a number that produces a value of zero when it is added to the original number.</span></span>  
  
 <span data-ttu-id="67038-577"><xref:System.Numerics.BigInteger.Negate%2A> メソッドは、カスタム演算子をサポートしない言語に対して実装されます。</span><span class="sxs-lookup"><span data-stu-id="67038-577">The <xref:System.Numerics.BigInteger.Negate%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="67038-578">その動作は、単項否定演算子を使用した否定と同じです。</span><span class="sxs-lookup"><span data-stu-id="67038-578">Its behavior is identical to negation using the unary negation operator.</span></span> <span data-ttu-id="67038-579">また、次の例に示すように、<xref:System.Numerics.BigInteger.Negate%2A> メソッドは、<xref:System.Numerics.BigInteger> 変数をインスタンス化するときに、否定演算子の代替として使用できます。</span><span class="sxs-lookup"><span data-stu-id="67038-579">In addition, the <xref:System.Numerics.BigInteger.Negate%2A> method is a useful substitute for the negation operator when instantiating a <xref:System.Numerics.BigInteger> variable, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="67038-580">次の例は、<xref:System.Numerics.BigInteger> オブジェクトの値を否定する3つの方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-580">The following example illustrates three ways to negate the value of a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]
 [!code-vb[System.Numeric.BigInteger.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="One">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger One { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger One" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.One" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property One As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger One { System::Numerics::BigInteger get(); };" />
      <MemberSignature Language="F#" Value="member this.One : System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.One" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67038-581">正の 1 (1) を表す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="67038-581">Gets a value that represents the number one (1).</span></span></summary>
        <value><span data-ttu-id="67038-582">値が正の 1 (1) であるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-582">An object whose value is one (1).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-583"><xref:System.Numerics.BigInteger.One%2A> プロパティは、通常、<xref:System.Numerics.BigInteger> 値を1に比較したり、1を <xref:System.Numerics.BigInteger> オブジェクトに割り当てたりするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="67038-583">The <xref:System.Numerics.BigInteger.One%2A> property is usually used to compare a <xref:System.Numerics.BigInteger> value to 1 or to assign 1 to a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.IsOne" />
        <altmember cref="P:System.Numerics.BigInteger.MinusOne" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator + (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Addition(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator +(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left + right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-584">加算する 1 番目の値。</span><span class="sxs-lookup"><span data-stu-id="67038-584">The first value to add.</span></span></param>
        <param name="right"><span data-ttu-id="67038-585">加算する 2 番目の値。</span><span class="sxs-lookup"><span data-stu-id="67038-585">The second value to add.</span></span></param>
        <summary><span data-ttu-id="67038-586">指定された 2 つの <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値を加算します。</span><span class="sxs-lookup"><span data-stu-id="67038-586">Adds the values of two specified <see cref="T:System.Numerics.BigInteger" /> objects.</span></span></summary>
        <returns><span data-ttu-id="67038-587"><paramref name="left" /> と <paramref name="right" /> の合計。</span><span class="sxs-lookup"><span data-stu-id="67038-587">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-588"><xref:System.Numerics.BigInteger.op_Addition%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の加算演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-588">The <xref:System.Numerics.BigInteger.op_Addition%2A> method defines the addition operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-589">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-589">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#12)]
 [!code-vb[System.Numeric.BigInteger.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#12)]  
  
 <span data-ttu-id="67038-590">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.Add%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-590">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Add%2A> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseAnd">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &amp; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_BitwiseAnd(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator And (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &amp;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &amp;&amp;&amp; ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left &amp;&amp;&amp; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-591">最初の値。</span><span class="sxs-lookup"><span data-stu-id="67038-591">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="67038-592">秒の値。</span><span class="sxs-lookup"><span data-stu-id="67038-592">The second value.</span></span></param>
        <summary><span data-ttu-id="67038-593">2 つの <see cref="T:System.Numerics.BigInteger" /> 値に対し、ビットごとの <see langword="And" /> 演算を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-593">Performs a bitwise <see langword="And" /> operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="67038-594">ビットごとの <see langword="And" /> 演算の結果。</span><span class="sxs-lookup"><span data-stu-id="67038-594">The result of the bitwise <see langword="And" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-595"><xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> メソッドは <xref:System.Numerics.BigInteger> 値のビットごとの `And` 演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-595">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method defines the bitwise `And` operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-596">ビットごとの `And` 操作は、次の表に示すように、`left` と `right` 内の対応するビットも設定されている場合にのみ、結果ビットを設定します。</span><span class="sxs-lookup"><span data-stu-id="67038-596">The bitwise `And` operation sets a result bit only if the corresponding bits in `left` and `right` are also set, as shown in the following table.</span></span>  
  
|<span data-ttu-id="67038-597">`left` のビット</span><span class="sxs-lookup"><span data-stu-id="67038-597">Bit in `left`</span></span>|<span data-ttu-id="67038-598">`right` のビット</span><span class="sxs-lookup"><span data-stu-id="67038-598">Bit in `right`</span></span>|<span data-ttu-id="67038-599">ビットの結果</span><span class="sxs-lookup"><span data-stu-id="67038-599">Bit in result</span></span>|  
|-------------------|--------------------|-------------------|  
|<span data-ttu-id="67038-600">0</span><span class="sxs-lookup"><span data-stu-id="67038-600">0</span></span>|<span data-ttu-id="67038-601">0</span><span class="sxs-lookup"><span data-stu-id="67038-601">0</span></span>|<span data-ttu-id="67038-602">0</span><span class="sxs-lookup"><span data-stu-id="67038-602">0</span></span>|  
|<span data-ttu-id="67038-603">1</span><span class="sxs-lookup"><span data-stu-id="67038-603">1</span></span>|<span data-ttu-id="67038-604">0</span><span class="sxs-lookup"><span data-stu-id="67038-604">0</span></span>|<span data-ttu-id="67038-605">0</span><span class="sxs-lookup"><span data-stu-id="67038-605">0</span></span>|  
|<span data-ttu-id="67038-606">1</span><span class="sxs-lookup"><span data-stu-id="67038-606">1</span></span>|<span data-ttu-id="67038-607">1</span><span class="sxs-lookup"><span data-stu-id="67038-607">1</span></span>|<span data-ttu-id="67038-608">1</span><span class="sxs-lookup"><span data-stu-id="67038-608">1</span></span>|  
|<span data-ttu-id="67038-609">0</span><span class="sxs-lookup"><span data-stu-id="67038-609">0</span></span>|<span data-ttu-id="67038-610">1</span><span class="sxs-lookup"><span data-stu-id="67038-610">1</span></span>|<span data-ttu-id="67038-611">0</span><span class="sxs-lookup"><span data-stu-id="67038-611">0</span></span>|  
  
 <span data-ttu-id="67038-612"><xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> メソッドは、次のようなコードを有効にします。</span><span class="sxs-lookup"><span data-stu-id="67038-612">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#1)]  
  
 <span data-ttu-id="67038-613"><xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> メソッドは、2つの <xref:System.Numerics.BigInteger> 値に対してビットごとの `And` 演算を実行します。これらの値は両方とも、仮想署名拡張機能を持つ2つの補数表現になります。</span><span class="sxs-lookup"><span data-stu-id="67038-613">The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method performs the bitwise `And` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseOr">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator | (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_BitwiseOr(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Or (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator |(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( ||| ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left ||| right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-614">最初の値。</span><span class="sxs-lookup"><span data-stu-id="67038-614">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="67038-615">秒の値。</span><span class="sxs-lookup"><span data-stu-id="67038-615">The second value.</span></span></param>
        <summary><span data-ttu-id="67038-616">2 つの <see cref="T:System.Numerics.BigInteger" /> 値に対し、ビットごとの <see langword="Or" /> 演算を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-616">Performs a bitwise <see langword="Or" /> operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="67038-617">ビットごとの <see langword="Or" /> 演算の結果。</span><span class="sxs-lookup"><span data-stu-id="67038-617">The result of the bitwise <see langword="Or" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-618"><xref:System.Numerics.BigInteger.op_BitwiseOr%2A> メソッドは <xref:System.Numerics.BigInteger> 値のビットごとの `Or` 演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-618">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method defines the bitwise `Or` operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-619">ビットごとの `Or` 操作は、次の表に示すように、`left` と `right` 内の対応するビットのいずれかまたは両方が設定されている場合にのみ、結果ビットを設定します。</span><span class="sxs-lookup"><span data-stu-id="67038-619">The bitwise `Or` operation sets a result bit only if either or both of the corresponding bits in `left` and `right` are set, as shown in the following table.</span></span>  
  
|<span data-ttu-id="67038-620">`left` のビット</span><span class="sxs-lookup"><span data-stu-id="67038-620">Bit in `left`</span></span>|<span data-ttu-id="67038-621">`right` のビット</span><span class="sxs-lookup"><span data-stu-id="67038-621">Bit in `right`</span></span>|<span data-ttu-id="67038-622">ビットの結果</span><span class="sxs-lookup"><span data-stu-id="67038-622">Bit in result</span></span>|  
|-------------------|--------------------|-------------------|  
|<span data-ttu-id="67038-623">0</span><span class="sxs-lookup"><span data-stu-id="67038-623">0</span></span>|<span data-ttu-id="67038-624">0</span><span class="sxs-lookup"><span data-stu-id="67038-624">0</span></span>|<span data-ttu-id="67038-625">0</span><span class="sxs-lookup"><span data-stu-id="67038-625">0</span></span>|  
|<span data-ttu-id="67038-626">1</span><span class="sxs-lookup"><span data-stu-id="67038-626">1</span></span>|<span data-ttu-id="67038-627">0</span><span class="sxs-lookup"><span data-stu-id="67038-627">0</span></span>|<span data-ttu-id="67038-628">1</span><span class="sxs-lookup"><span data-stu-id="67038-628">1</span></span>|  
|<span data-ttu-id="67038-629">1</span><span class="sxs-lookup"><span data-stu-id="67038-629">1</span></span>|<span data-ttu-id="67038-630">1</span><span class="sxs-lookup"><span data-stu-id="67038-630">1</span></span>|<span data-ttu-id="67038-631">1</span><span class="sxs-lookup"><span data-stu-id="67038-631">1</span></span>|  
|<span data-ttu-id="67038-632">0</span><span class="sxs-lookup"><span data-stu-id="67038-632">0</span></span>|<span data-ttu-id="67038-633">1</span><span class="sxs-lookup"><span data-stu-id="67038-633">1</span></span>|<span data-ttu-id="67038-634">1</span><span class="sxs-lookup"><span data-stu-id="67038-634">1</span></span>|  
  
 <span data-ttu-id="67038-635"><xref:System.Numerics.BigInteger.op_BitwiseOr%2A> メソッドは、次のようなコードを有効にします。</span><span class="sxs-lookup"><span data-stu-id="67038-635">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#2)]  
  
 <span data-ttu-id="67038-636"><xref:System.Numerics.BigInteger.op_BitwiseOr%2A> メソッドは、2つの <xref:System.Numerics.BigInteger> 値に対してビットごとの `Or` 演算を実行します。これらの値は両方とも、仮想署名拡張機能を持つ2つの補数表現になります。</span><span class="sxs-lookup"><span data-stu-id="67038-636">The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method performs the bitwise `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator -- (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Decrement(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_Decrement (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator --(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Decrement : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Decrement value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-637">デクリメントする値。</span><span class="sxs-lookup"><span data-stu-id="67038-637">The value to decrement.</span></span></param>
        <summary><span data-ttu-id="67038-638"><see cref="T:System.Numerics.BigInteger" /> 値を 1 だけデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="67038-638">Decrements a <see cref="T:System.Numerics.BigInteger" /> value by 1.</span></span></summary>
        <returns><span data-ttu-id="67038-639"><paramref name="value" /> パラメーターの値を 1 だけデクリメントした値。</span><span class="sxs-lookup"><span data-stu-id="67038-639">The value of the <paramref name="value" /> parameter decremented by 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-640"><xref:System.Numerics.BigInteger.op_Decrement%2A> メソッドは、<xref:System.Numerics.BigInteger> 値のデクリメント演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-640">The <xref:System.Numerics.BigInteger.op_Decrement%2A> method defines the decrement operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-641">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-641">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#17)]  
  
 <span data-ttu-id="67038-642">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.Subtract%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-642">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A> method instead.</span></span> <span data-ttu-id="67038-643">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="67038-643">For example:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#3)]  
  
 <span data-ttu-id="67038-644"><xref:System.Numerics.BigInteger> オブジェクトは不変であるため、<xref:System.Numerics.BigInteger.op_Decrement%2A> 演算子は、値が `value`によって表される <xref:System.Numerics.BigInteger> オブジェクトより1小さいオブジェクトを新しい <xref:System.Numerics.BigInteger> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="67038-644">Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Decrement%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one less than the <xref:System.Numerics.BigInteger> object represented by `value`.</span></span> <span data-ttu-id="67038-645">これは、<xref:System.Numerics.BigInteger.op_Decrement%2A> を繰り返し呼び出すと負荷がかかる可能性があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="67038-645">This means that repeated calls to <xref:System.Numerics.BigInteger.op_Decrement%2A> may be expensive.</span></span>  
  
 <span data-ttu-id="67038-646">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-646">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator / (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Division(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator /(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="dividend / divisor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="67038-647">被除数。</span><span class="sxs-lookup"><span data-stu-id="67038-647">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="67038-648">除数。</span><span class="sxs-lookup"><span data-stu-id="67038-648">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="67038-649">整数除算を使用して、指定された <see cref="T:System.Numerics.BigInteger" /> 値をもう 1 つの指定された <see cref="T:System.Numerics.BigInteger" /> 値で除算します。</span><span class="sxs-lookup"><span data-stu-id="67038-649">Divides a specified <see cref="T:System.Numerics.BigInteger" /> value by another specified <see cref="T:System.Numerics.BigInteger" /> value by using integer division.</span></span></summary>
        <returns><span data-ttu-id="67038-650">除算の結果 (整数)。</span><span class="sxs-lookup"><span data-stu-id="67038-650">The integral result of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-651"><xref:System.Numerics.BigInteger.op_Division%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の除算演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-651">The <xref:System.Numerics.BigInteger.op_Division%2A> method defines the division operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-652">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-652">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#13)]
 [!code-vb[System.Numeric.BigInteger.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#13)]  
  
 <span data-ttu-id="67038-653">カスタム演算子と演算子のオーバーロードをサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.Divide%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-653">Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.BigInteger.Divide%2A> method instead.</span></span>  
  
 <span data-ttu-id="67038-654">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="67038-654">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="67038-655">次の例では、<xref:System.Numerics.BigInteger> 値の配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="67038-655">The following example creates an array of <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-656">次に、<xref:System.Numerics.BigInteger.Divide%2A> メソッド、除算演算子 (/)、および <xref:System.Numerics.BigInteger.DivRem%2A> メソッドを使用する除算演算で、各要素を商として使用します。</span><span class="sxs-lookup"><span data-stu-id="67038-656">It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="67038-657"><paramref name="divisor" /> が 0 (ゼロ) です。</span><span class="sxs-lookup"><span data-stu-id="67038-657"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Equality">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67038-658">指定された 2 つの値が等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-658">Returns a value that indicates whether two values are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-659">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-659">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-660">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-660">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-661">符号付き長整数値と <see cref="T:System.Numerics.BigInteger" /> 値が等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-661">Returns a value that indicates whether a signed long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</span></span></summary>
        <returns><span data-ttu-id="67038-662"><paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターが同じ値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-662"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-663"><xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29> メソッドは、<xref:System.Numerics.BigInteger> 値の等値比較演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-663">The <xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-664">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-664">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#4)]  
  
 <span data-ttu-id="67038-665">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> インスタンスメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-665">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="67038-666">`left` が <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>、または <xref:System.UInt32> の値の場合、操作の実行時に暗黙的に <xref:System.Int64> 値に変換されます。</span><span class="sxs-lookup"><span data-stu-id="67038-666">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="67038-667">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-667">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-668">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-668">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-669">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-669">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-670"><see cref="T:System.Numerics.BigInteger" /> 値と符号付き長整数値が等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-670">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a signed long integer value are equal.</span></span></summary>
        <returns><span data-ttu-id="67038-671"><paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターが同じ値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-671"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-672"><xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29> メソッドは、<xref:System.Numerics.BigInteger> 値の等値比較演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-672">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-673">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-673">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#5)]
 [!code-vb[System.Numerics.BigInteger.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#5)]  
  
 <span data-ttu-id="67038-674">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> インスタンスメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-674">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="67038-675">`right` が <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>、または <xref:System.UInt32> の値の場合、操作の実行時に暗黙的に <xref:System.Int64> 値に変換されます。</span><span class="sxs-lookup"><span data-stu-id="67038-675">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="67038-676">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-676">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-677">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-677">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-678">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-678">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-679">2 つの <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-679">Returns a value that indicates whether the values of two <see cref="T:System.Numerics.BigInteger" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="67038-680"><paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターが同じ値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-680"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-681"><xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> メソッドは、<xref:System.Numerics.BigInteger> 値の等値演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-681">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method defines the operation of the equality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-682">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-682">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#19)]
 [!code-vb[System.Numeric.BigInteger.Class#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#19)]  
  
 <span data-ttu-id="67038-683">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> インスタンスメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-683">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 <span data-ttu-id="67038-684">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-684">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.Equals" />
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-685">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-685">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-686">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-686">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-687"><see cref="T:System.Numerics.BigInteger" /> 値と符号なし長整数値が等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-687">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and an unsigned long integer value are equal.</span></span></summary>
        <returns><span data-ttu-id="67038-688"><paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターが同じ値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-688"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-689"><xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29> メソッドは、<xref:System.Numerics.BigInteger> 値の等値比較演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-689">The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-690">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-690">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#6)]
 [!code-vb[System.Numerics.BigInteger.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#6)]  
  
 <span data-ttu-id="67038-691">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> インスタンスメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-691">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-692">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-692">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-693">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-693">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-694">符号なし長整数値と <see cref="T:System.Numerics.BigInteger" /> 値と等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-694">Returns a value that indicates whether an unsigned long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</span></span></summary>
        <returns><span data-ttu-id="67038-695"><paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターが同じ値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-695"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-696"><xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29> メソッドは、<xref:System.Numerics.BigInteger> 値の等値比較演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-696">The <xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-697">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-697">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#7)]
 [!code-vb[System.Numerics.BigInteger.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#7)]  
  
 <span data-ttu-id="67038-698">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> インスタンスメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-698">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> instance method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ^ (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_ExclusiveOr(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Xor (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ^(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( ^^^ ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left ^^^ right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-699">最初の値。</span><span class="sxs-lookup"><span data-stu-id="67038-699">The first value.</span></span></param>
        <param name="right"><span data-ttu-id="67038-700">秒の値。</span><span class="sxs-lookup"><span data-stu-id="67038-700">The second value.</span></span></param>
        <summary><span data-ttu-id="67038-701">2 つの <see cref="T:System.Numerics.BigInteger" /> 値に対し、ビットごとの排他的 <see langword="Or" /> (<see langword="XOr" />) 演算を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-701">Performs a bitwise exclusive <see langword="Or" /> (<see langword="XOr" />) operation on two <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="67038-702">ビットごとの <see langword="Or" /> 演算の結果。</span><span class="sxs-lookup"><span data-stu-id="67038-702">The result of the bitwise <see langword="Or" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-703">2つのビットの値が異なる場合は、ビットごとの排他的 `Or` 演算の結果が `true` ます。それ以外の場合は、`false`ます。</span><span class="sxs-lookup"><span data-stu-id="67038-703">The result of a bitwise exclusive `Or` operation is `true` if the values of the two bits are different; otherwise, it is `false`.</span></span> <span data-ttu-id="67038-704">次の表は、排他 `Or` 操作を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-704">The following table illustrates the exclusive `Or` operation.</span></span>  
  
|<span data-ttu-id="67038-705">`left` のビット x</span><span class="sxs-lookup"><span data-stu-id="67038-705">Bit x in `left`</span></span>|<span data-ttu-id="67038-706">`right` のビット x</span><span class="sxs-lookup"><span data-stu-id="67038-706">Bit x in `right`</span></span>|<span data-ttu-id="67038-707">戻り値</span><span class="sxs-lookup"><span data-stu-id="67038-707">Return value</span></span>|  
|---------------------|----------------------|------------------|  
|<span data-ttu-id="67038-708">0</span><span class="sxs-lookup"><span data-stu-id="67038-708">0</span></span>|<span data-ttu-id="67038-709">0</span><span class="sxs-lookup"><span data-stu-id="67038-709">0</span></span>|<span data-ttu-id="67038-710">0</span><span class="sxs-lookup"><span data-stu-id="67038-710">0</span></span>|  
|<span data-ttu-id="67038-711">0</span><span class="sxs-lookup"><span data-stu-id="67038-711">0</span></span>|<span data-ttu-id="67038-712">1</span><span class="sxs-lookup"><span data-stu-id="67038-712">1</span></span>|<span data-ttu-id="67038-713">1</span><span class="sxs-lookup"><span data-stu-id="67038-713">1</span></span>|  
|<span data-ttu-id="67038-714">1</span><span class="sxs-lookup"><span data-stu-id="67038-714">1</span></span>|<span data-ttu-id="67038-715">0</span><span class="sxs-lookup"><span data-stu-id="67038-715">0</span></span>|<span data-ttu-id="67038-716">1</span><span class="sxs-lookup"><span data-stu-id="67038-716">1</span></span>|  
|<span data-ttu-id="67038-717">1</span><span class="sxs-lookup"><span data-stu-id="67038-717">1</span></span>|<span data-ttu-id="67038-718">1</span><span class="sxs-lookup"><span data-stu-id="67038-718">1</span></span>|<span data-ttu-id="67038-719">0</span><span class="sxs-lookup"><span data-stu-id="67038-719">0</span></span>|  
  
 <span data-ttu-id="67038-720"><xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> メソッドは、次のようなコードを有効にします。</span><span class="sxs-lookup"><span data-stu-id="67038-720">The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#8)]
 [!code-vb[System.Numerics.BigInteger.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#8)]  
  
 <span data-ttu-id="67038-721"><xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> メソッドは、2つの <xref:System.Numerics.BigInteger> 値に対してビットごとの排他的 `Or` 演算を実行します。これは、両方とも仮想署名拡張機能を持つ2つの補数表現であるかのように行われます。</span><span class="sxs-lookup"><span data-stu-id="67038-721">The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method performs the bitwise exclusive `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67038-722"><see cref="T:System.Numerics.BigInteger" /> オブジェクトと別の型の間の明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-722">Defines an explicit conversion between a <see cref="T:System.Numerics.BigInteger" /> object and another type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Decimal) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : decimal -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-723"><see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-723">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="67038-724"><see cref="T:System.Decimal" /> オブジェクトから <see cref="T:System.Numerics.BigInteger" /> 値への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-724">Defines an explicit conversion of a <see cref="T:System.Decimal" /> object to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-725"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-725">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-726">`value` パラメーターの小数部分は、変換前に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="67038-726">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="67038-727"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> メソッドのオーバーロードは、<xref:System.Numerics.BigInteger> オブジェクトの変換元となる型またはその元となる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-727">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="67038-728"><xref:System.Decimal> から <xref:System.Numerics.BigInteger> への変換では `value`の小数部分が切り捨てられることがあるため、言語コンパイラでは、この変換は自動的には実行されません。</span><span class="sxs-lookup"><span data-stu-id="67038-728">Because the conversion from <xref:System.Decimal> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="67038-729">代わりに、キャスト演算子 (でC#は) または変換関数 (Visual Basic の `CType` など) が使用されている場合にのみ、変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-729">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="67038-730">それ以外の場合は、コンパイラエラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-730">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="67038-731">カスタム演算子をサポートしていない言語の場合、代替方法は <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-731">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="67038-732">次の例では、<xref:System.Decimal> 値の配列内の個々の要素を <xref:System.Numerics.BigInteger> のオブジェクトに変換し、各変換の結果を表示します。</span><span class="sxs-lookup"><span data-stu-id="67038-732">The following example converts the individual elements in an array of <xref:System.Decimal> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="67038-733"><xref:System.Decimal> 値の小数部分は、変換中に切り捨てられることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="67038-733">Note that any fractional part of a <xref:System.Decimal> value is truncated during the conversion.</span></span>   

 [!code-csharp[System.Numerics.BigInteger.Explicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#1)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Double) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(double value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : double -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-734"><see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-734">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="67038-735"><see cref="T:System.Double" /> 値から <see cref="T:System.Numerics.BigInteger" /> 値への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-735">Defines an explicit conversion of a <see cref="T:System.Double" /> value to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-736"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-736">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-737">`value` パラメーターの小数部分は、変換前に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="67038-737">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="67038-738"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> メソッドのオーバーロードは、<xref:System.Numerics.BigInteger> オブジェクトの変換元となる型またはその元となる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-738">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="67038-739"><xref:System.Double> から <xref:System.Numerics.BigInteger> への変換では `value`の小数部分が切り捨てられることがあるため、言語コンパイラでは、この変換は自動的には実行されません。</span><span class="sxs-lookup"><span data-stu-id="67038-739">Because the conversion from <xref:System.Double> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="67038-740">代わりに、キャスト演算子 (でC#は) または変換関数 (Visual Basic の `CType` など) が使用されている場合にのみ、変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-740">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="67038-741">それ以外の場合は、コンパイラエラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-741">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="67038-742">カスタム演算子をサポートしていない言語の場合、代替方法は <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-742">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="67038-743">次の例では、<xref:System.Double> 値の配列内の個々の要素を <xref:System.Numerics.BigInteger> のオブジェクトに変換し、各変換の結果を表示します。</span><span class="sxs-lookup"><span data-stu-id="67038-743">The following example converts the individual elements in an array of <xref:System.Double> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="67038-744"><xref:System.Double> 値の小数部分は、変換中に切り捨てられることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="67038-744">Note that any fractional part of a <xref:System.Double> value is truncated during the conversion.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#2)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#2)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="67038-745"><paramref name="value" /> が <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" />、または <see cref="F:System.Double.NegativeInfinity" /> です。</span><span class="sxs-lookup"><span data-stu-id="67038-745"><paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator byte (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int8 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Byte(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; byte" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-746"><see cref="T:System.Byte" /> へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-746">The value to convert to a <see cref="T:System.Byte" />.</span></span></param>
        <summary><span data-ttu-id="67038-747"><see cref="T:System.Numerics.BigInteger" /> オブジェクトから符号なしバイト値への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-747">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned byte value.</span></span></summary>
        <returns><span data-ttu-id="67038-748"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-748">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-749"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> メソッドのオーバーロードは、<xref:System.Numerics.BigInteger> オブジェクトの変換元となる型またはその元となる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-749">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="67038-750">言語コンパイラでは、データが失われる可能性があるため、この変換は自動的には実行されません。</span><span class="sxs-lookup"><span data-stu-id="67038-750">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="67038-751">代わりに、キャスト演算子 (でC#は) または変換関数 (`CType` や Visual Basic の `CByte` など) が使用されている場合にのみ変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-751">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CByte` in Visual Basic) is used.</span></span> <span data-ttu-id="67038-752">それ以外の場合は、コンパイラエラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-752">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="67038-753">この操作は縮小変換を定義するので、<xref:System.Numerics.BigInteger> 値が <xref:System.Byte> データ型の範囲外にある場合は、実行時に <xref:System.OverflowException> をスローすることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-753">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Byte> data type.</span></span> <span data-ttu-id="67038-754">変換が成功した場合、結果の <xref:System.Byte> 値に精度が失われることはありません。</span><span class="sxs-lookup"><span data-stu-id="67038-754">There is no loss of precision in the resulting <xref:System.Byte> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="67038-755">次の例は、<xref:System.Numerics.BigInteger> を <xref:System.Byte> 値に変換する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-755">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Byte> values.</span></span> <span data-ttu-id="67038-756">また、<xref:System.Numerics.BigInteger> 値が <xref:System.Byte> データ型の範囲外であるためにスローされる <xref:System.OverflowException> も処理します。</span><span class="sxs-lookup"><span data-stu-id="67038-756">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Byte> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#1)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#1)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="67038-757"><paramref name="value" /> が <see cref="F:System.Byte.MinValue" /> 未満であるか、<see cref="F:System.Byte.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="67038-757"><paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator decimal (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Decimal(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; decimal" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-758"><see cref="T:System.Decimal" /> へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-758">The value to convert to a <see cref="T:System.Decimal" />.</span></span></param>
        <summary><span data-ttu-id="67038-759"><see cref="T:System.Numerics.BigInteger" /> オブジェクトから <see cref="T:System.Decimal" /> 値への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-759">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-760"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-760">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-761"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> メソッドのオーバーロードは、<xref:System.Numerics.BigInteger> オブジェクトの変換元となる型またはその元となる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-761">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="67038-762">言語コンパイラでは、データが失われる可能性があるため、この変換は自動的には実行されません。</span><span class="sxs-lookup"><span data-stu-id="67038-762">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="67038-763">代わりに、キャスト演算子 (でC#は) または変換関数 (`CType` や Visual Basic の `CDec` など) が使用されている場合にのみ変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-763">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CDec` in Visual Basic) is used.</span></span>   

 <span data-ttu-id="67038-764">この操作は縮小変換を定義するので、<xref:System.Numerics.BigInteger> 値が <xref:System.Decimal> データ型の範囲外にある場合は、実行時に <xref:System.OverflowException> をスローすることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-764">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Decimal> data type.</span></span> 

## Examples
 <span data-ttu-id="67038-765">次の例は、<xref:System.Numerics.BigInteger> を <xref:System.Decimal> 値に変換する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-765">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Decimal> values.</span></span> <span data-ttu-id="67038-766">また、<xref:System.Numerics.BigInteger> 値が <xref:System.Decimal> データ型の範囲外であるためにスローされる <xref:System.OverflowException> も処理します。</span><span class="sxs-lookup"><span data-stu-id="67038-766">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Decimal> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#2)]
 [!code-vb[System.Numeric.BigInteger.Explicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#2)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="67038-767"><paramref name="value" /> が <see cref="F:System.Decimal.MinValue" /> 未満であるか、<see cref="F:System.Decimal.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="67038-767"><paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator double (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator double(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; double" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-768"><see cref="T:System.Double" /> へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-768">The value to convert to a <see cref="T:System.Double" />.</span></span></param>
        <summary><span data-ttu-id="67038-769"><see cref="T:System.Numerics.BigInteger" /> オブジェクトから <see cref="T:System.Double" /> 値への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-769">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-770"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-770">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-771"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> メソッドのオーバーロードは、<xref:System.Numerics.BigInteger> オブジェクトの変換元となる型またはその元となる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-771">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="67038-772">言語コンパイラでは、データが失われる可能性があるため、この変換は自動的には実行されません。</span><span class="sxs-lookup"><span data-stu-id="67038-772">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="67038-773">代わりに、キャスト演算子 (でC#は) または変換関数 (`CType` や Visual Basic の `CDbl` など) が使用されている場合にのみ変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-773">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CDbl` in Visual Basic) is used.</span></span>   

 <span data-ttu-id="67038-774"><xref:System.Numerics.BigInteger> 値は <xref:System.Double> データ型の範囲外になる可能性があるため、この操作は縮小変換です。</span><span class="sxs-lookup"><span data-stu-id="67038-774">Because the <xref:System.Numerics.BigInteger> value can be outside the range of the <xref:System.Double> data type, this operation is a narrowing conversion.</span></span> <span data-ttu-id="67038-775">変換に失敗した場合、<xref:System.OverflowException>はスローされません。</span><span class="sxs-lookup"><span data-stu-id="67038-775">If the conversion is unsuccessful, it does not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="67038-776">代わりに、<xref:System.Numerics.BigInteger> の値が <xref:System.Double.MinValue?displayProperty=nameWithType>未満の場合、結果の <xref:System.Double> 値は <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>になります。</span><span class="sxs-lookup"><span data-stu-id="67038-776">Instead, if the <xref:System.Numerics.BigInteger> value is less than <xref:System.Double.MinValue?displayProperty=nameWithType>, the resulting <xref:System.Double> value is <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67038-777"><xref:System.Numerics.BigInteger> 値が <xref:System.Double.MaxValue?displayProperty=nameWithType>より大きい場合、結果として得られる <xref:System.Double> 値は <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>になります。</span><span class="sxs-lookup"><span data-stu-id="67038-777">If the <xref:System.Numerics.BigInteger> value is greater than <xref:System.Double.MaxValue?displayProperty=nameWithType>, the resulting <xref:System.Double> value is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>
 
 <span data-ttu-id="67038-778"><xref:System.Double> への <xref:System.Numerics.BigInteger> の変換には、精度の低下が伴います。</span><span class="sxs-lookup"><span data-stu-id="67038-778">The conversion of a <xref:System.Numerics.BigInteger> to a <xref:System.Double> may involve a loss of precision.</span></span> <span data-ttu-id="67038-779">場合によっては、有効桁数が失われると、<xref:System.Numerics.BigInteger> 値が <xref:System.Double> データ型の範囲外にある場合でも、キャストまたは変換操作が成功する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="67038-779">In some cases, the loss of precision may cause the casting or conversion operation to succeed even if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Double> data type.</span></span> <span data-ttu-id="67038-780">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="67038-780">The following example provides an illustration.</span></span> <span data-ttu-id="67038-781"><xref:System.Double> の最大値が2つの <xref:System.Numerics.BigInteger> 変数に割り当てられ、1つの <xref:System.Numerics.BigInteger> 変数が 9.999 e291 によってインクリメントされ、2つの変数が等しいかどうかがテストされます。</span><span class="sxs-lookup"><span data-stu-id="67038-781">It assigns the maximum value of a <xref:System.Double> to two <xref:System.Numerics.BigInteger> variables, increments one <xref:System.Numerics.BigInteger> variable by 9.999e291, and tests the two variables for equality.</span></span> <span data-ttu-id="67038-782">予想どおり、<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> メソッドを呼び出すと、それらが等しくないことが示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-782">As expected, the call to the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method shows that they are unequal.</span></span> <span data-ttu-id="67038-783">ただし、大きい <xref:System.Numerics.BigInteger> 値から <xref:System.Double> への変換は成功しますが、<xref:System.Numerics.BigInteger> 値は <xref:System.Double.MaxValue?displayProperty=nameWithType>を超えています。</span><span class="sxs-lookup"><span data-stu-id="67038-783">However, the conversion of the larger <xref:System.Numerics.BigInteger> value back to a <xref:System.Double> succeeds, although the <xref:System.Numerics.BigInteger> value now exceeds <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#4)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#4)]   



## Examples
 <span data-ttu-id="67038-784">次の例は、<xref:System.Numerics.BigInteger> を <xref:System.Double> 値に変換する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-784">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Double> values.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#3)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#3)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator short (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int16 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator short(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; int16" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-785">16 ビット符号付き整数へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-785">The value to convert to a 16-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="67038-786"><see cref="T:System.Numerics.BigInteger" /> オブジェクトから 16 ビット符号付き整数値への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-786">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 16-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="67038-787"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-787">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-788"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> メソッドのオーバーロードは、<xref:System.Numerics.BigInteger> オブジェクトの変換元となる型またはその元となる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-788">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="67038-789">言語コンパイラでは、データが失われる可能性があるため、この変換は自動的には実行されません。</span><span class="sxs-lookup"><span data-stu-id="67038-789">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="67038-790">代わりに、キャスト演算子 (でC#は) または変換関数 (`CType` や Visual Basic の `CShort` など) が使用されている場合にのみ変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-790">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CShort` in Visual Basic) is used.</span></span> <span data-ttu-id="67038-791">それ以外の場合は、コンパイラエラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-791">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="67038-792">この操作は縮小変換を定義するので、<xref:System.Numerics.BigInteger> 値が <xref:System.Int16> データ型の範囲外にある場合は、実行時に <xref:System.OverflowException> をスローすることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-792">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int16> data type.</span></span> <span data-ttu-id="67038-793">変換が成功した場合、結果の <xref:System.Int16> 値に精度が失われることはありません。</span><span class="sxs-lookup"><span data-stu-id="67038-793">There is no loss of precision in the resulting <xref:System.Int16> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="67038-794">次の例は、<xref:System.Numerics.BigInteger> を <xref:System.Int16> 値に変換する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-794">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int16> values.</span></span> <span data-ttu-id="67038-795">また、<xref:System.Numerics.BigInteger> 値が <xref:System.Int16> データ型の範囲外であるためにスローされる <xref:System.OverflowException> も処理します。</span><span class="sxs-lookup"><span data-stu-id="67038-795">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int16> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#4)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#4)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="67038-796"><paramref name="value" /> が <see cref="F:System.Int16.MinValue" /> より小さいか <see cref="F:System.Int16.MaxValue" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="67038-796"><paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or is greater than <see cref="F:System.Int16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; int" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-797">32 ビット符号付き整数に変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-797">The value to convert to a 32-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="67038-798"><see cref="T:System.Numerics.BigInteger" /> オブジェクトから 32 ビット符号付き整数値への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-798">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 32-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="67038-799"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-799">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-800"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> メソッドのオーバーロードは、<xref:System.Numerics.BigInteger> オブジェクトの変換元となる型またはその元となる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-800">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="67038-801">言語コンパイラでは、データが失われる可能性があるため、この変換は自動的には実行されません。</span><span class="sxs-lookup"><span data-stu-id="67038-801">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="67038-802">代わりに、キャスト演算子 (でC#は) または変換関数 (`CType` や Visual Basic の `CInt` など) が使用されている場合にのみ変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-802">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CInt` in Visual Basic) is used.</span></span> <span data-ttu-id="67038-803">それ以外の場合は、コンパイラエラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-803">Otherwise, they display a compiler error.</span></span>   

 <span data-ttu-id="67038-804">この操作は縮小変換を定義するので、<xref:System.Numerics.BigInteger> 値が <xref:System.Int32> データ型の範囲外にある場合は、実行時に <xref:System.OverflowException> をスローすることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-804">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int32> data type.</span></span> <span data-ttu-id="67038-805">変換が成功した場合、結果の <xref:System.Int32> 値に精度が失われることはありません。</span><span class="sxs-lookup"><span data-stu-id="67038-805">There is no loss of precision in the resulting <xref:System.Int32> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="67038-806">次の例は、<xref:System.Numerics.BigInteger> を <xref:System.Int32> 値に変換する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-806">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int32> values.</span></span> <span data-ttu-id="67038-807">また、<xref:System.Numerics.BigInteger> 値が <xref:System.Int32> データ型の範囲外であるためにスローされる <xref:System.OverflowException> も処理します。</span><span class="sxs-lookup"><span data-stu-id="67038-807">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int32> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#5)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#5)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="67038-808"><paramref name="value" /> が <see cref="F:System.Int32.MinValue" /> より小さいか <see cref="F:System.Int32.MaxValue" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="67038-808"><paramref name="value" /> is less than <see cref="F:System.Int32.MinValue" /> or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; int64" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-809">64 ビット符号付き整数へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-809">The value to convert to a 64-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="67038-810"><see cref="T:System.Numerics.BigInteger" /> オブジェクトから 64 ビット符号付き整数値への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-810">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 64-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="67038-811"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-811">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-812"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> メソッドのオーバーロードは、<xref:System.Numerics.BigInteger> オブジェクトの変換元となる型またはその元となる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-812">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="67038-813">言語コンパイラでは、データが失われる可能性があるため、この変換は自動的には実行されません。</span><span class="sxs-lookup"><span data-stu-id="67038-813">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="67038-814">代わりに、キャスト演算子 (でC#は) または変換関数 (`CType` や Visual Basic の `CLng` など) が使用されている場合にのみ変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-814">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CLng` in Visual Basic) is used.</span></span> <span data-ttu-id="67038-815">それ以外の場合は、コンパイラエラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-815">Otherwise, they display a compiler error.</span></span>  

 <span data-ttu-id="67038-816">この操作は縮小変換を定義するので、<xref:System.Numerics.BigInteger> 値が <xref:System.Int64> データ型の範囲外にある場合は、実行時に <xref:System.OverflowException> をスローすることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-816">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int64> data type.</span></span> 

## Examples
 <span data-ttu-id="67038-817">次の例は、<xref:System.Numerics.BigInteger> を <xref:System.Int64> 値に変換する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-817">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Int64> values.</span></span> <span data-ttu-id="67038-818">また、<xref:System.Numerics.BigInteger> 値が <xref:System.Int64> データ型の範囲外であるためにスローされる <xref:System.OverflowException> も処理します。</span><span class="sxs-lookup"><span data-stu-id="67038-818">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Int64> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#6)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#6)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="67038-819"><paramref name="value" /> が <see cref="F:System.Int64.MinValue" /> より小さいか <see cref="F:System.Int64.MaxValue" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="67038-819"><paramref name="value" /> is less than <see cref="F:System.Int64.MinValue" /> or is greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator sbyte (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int8 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::SByte(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; sbyte" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-820">符号付き 8 ビット値へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-820">The value to convert to a signed 8-bit value.</span></span></param>
        <summary><span data-ttu-id="67038-821"><see cref="T:System.Numerics.BigInteger" /> オブジェクトから符号付き 8 ビット値への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-821">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a signed 8-bit value.</span></span>  
  
<span data-ttu-id="67038-822">この API は、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="67038-822">This API is not CLS-compliant.</span></span> <span data-ttu-id="67038-823">準拠している代替として <see cref="T:System.Int16" />.を使用できます。</span><span class="sxs-lookup"><span data-stu-id="67038-823">The compliant alternative is <see cref="T:System.Int16" />.</span></span></summary>
        <returns><span data-ttu-id="67038-824"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-824">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-825"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> メソッドのオーバーロードは、<xref:System.Numerics.BigInteger> オブジェクトの変換元となる型またはその元となる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-825">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="67038-826">言語コンパイラでは、データが失われる可能性があるため、この変換は自動的には実行されません。</span><span class="sxs-lookup"><span data-stu-id="67038-826">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="67038-827">代わりに、キャスト演算子 (でC#は) または変換関数 (`CType` や Visual Basic の `CSByte` など) が使用されている場合にのみ変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-827">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CSByte` in Visual Basic) is used.</span></span> <span data-ttu-id="67038-828">それ以外の場合は、コンパイラエラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-828">Otherwise, they display a compiler error.</span></span>  

 <span data-ttu-id="67038-829">この操作は縮小変換を定義するので、<xref:System.Numerics.BigInteger> 値が <xref:System.SByte> データ型の範囲外にある場合は、実行時に <xref:System.OverflowException> をスローすることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-829">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.SByte> data type.</span></span> <span data-ttu-id="67038-830">変換が成功した場合、結果の <xref:System.SByte> 値に精度が失われることはありません。</span><span class="sxs-lookup"><span data-stu-id="67038-830">There is no loss of precision in the resulting <xref:System.SByte> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="67038-831">次の例は、<xref:System.Numerics.BigInteger> を <xref:System.SByte> 値に変換する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-831">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.SByte> values.</span></span> <span data-ttu-id="67038-832">また、<xref:System.Numerics.BigInteger> 値が <xref:System.SByte> データ型の範囲外であるためにスローされる <xref:System.OverflowException> も処理します。</span><span class="sxs-lookup"><span data-stu-id="67038-832">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.SByte> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#7)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#7)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="67038-833"><paramref name="value" /> が <see cref="F:System.SByte.MinValue" /> より小さいか <see cref="F:System.SByte.MaxValue" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="67038-833"><paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or is greater than <see cref="F:System.SByte.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Int16" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; single" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-834">単精度浮動小数点値へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-834">The value to convert to a single-precision floating-point value.</span></span></param>
        <summary><span data-ttu-id="67038-835"><see cref="T:System.Numerics.BigInteger" /> オブジェクトから単精度浮動小数点値への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-835">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a single-precision floating-point value.</span></span></summary>
        <returns><span data-ttu-id="67038-836"><paramref name="value" /> パラメーターの値にできるだけ近い値となるように変換したオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-836">An object that contains the closest possible representation of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-837"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> メソッドのオーバーロードは、<xref:System.Numerics.BigInteger> オブジェクトの変換元となる型またはその元となる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-837">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="67038-838">言語コンパイラでは、データの損失や精度の低下が伴う可能性があるため、この変換は自動的には実行されません。</span><span class="sxs-lookup"><span data-stu-id="67038-838">Language compilers do not perform this conversion automatically because it can involve data loss or a loss of precision.</span></span> <span data-ttu-id="67038-839">代わりに、キャスト演算子 (でC#は) または変換関数 (`CType` や Visual Basic の `CSng` など) が使用されている場合にのみ変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-839">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CSng` in Visual Basic) is used.</span></span> <span data-ttu-id="67038-840">それ以外の場合は、コンパイラエラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-840">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="67038-841"><xref:System.Numerics.BigInteger> 値は <xref:System.Single> データ型の範囲外になる可能性があるため、この操作は縮小変換です。</span><span class="sxs-lookup"><span data-stu-id="67038-841">Because the <xref:System.Numerics.BigInteger> value can be outside the range of the <xref:System.Single> data type, this operation is a narrowing conversion.</span></span> <span data-ttu-id="67038-842">変換に失敗した場合、<xref:System.OverflowException>はスローされません。</span><span class="sxs-lookup"><span data-stu-id="67038-842">If the conversion is unsuccessful, it does not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="67038-843">代わりに、<xref:System.Numerics.BigInteger> の値が <xref:System.Single.MinValue?displayProperty=nameWithType>未満の場合、結果の <xref:System.Single> 値は <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>になります。</span><span class="sxs-lookup"><span data-stu-id="67038-843">Instead, if the <xref:System.Numerics.BigInteger> value is less than <xref:System.Single.MinValue?displayProperty=nameWithType>, the resulting <xref:System.Single> value is <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67038-844"><xref:System.Numerics.BigInteger> 値が <xref:System.Single.MaxValue?displayProperty=nameWithType>より大きい場合、結果として得られる <xref:System.Single> 値は <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>になります。</span><span class="sxs-lookup"><span data-stu-id="67038-844">If the <xref:System.Numerics.BigInteger> value is greater than <xref:System.Single.MaxValue?displayProperty=nameWithType>, the resulting <xref:System.Single> value is <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="67038-845"><xref:System.Single> への <xref:System.Numerics.BigInteger> の変換には、精度の低下が伴います。</span><span class="sxs-lookup"><span data-stu-id="67038-845">The conversion of a <xref:System.Numerics.BigInteger> to a <xref:System.Single> may involve a loss of precision.</span></span> <span data-ttu-id="67038-846">場合によっては、有効桁数が失われると、<xref:System.Numerics.BigInteger> 値が <xref:System.Single> データ型の範囲外にある場合でも、キャストまたは変換操作が成功する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="67038-846">In some cases, the loss of precision may cause the casting or conversion operation to succeed even if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.Single> data type.</span></span> <span data-ttu-id="67038-847">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="67038-847">The following example provides an illustration.</span></span> <span data-ttu-id="67038-848"><xref:System.Single> の最大値が2つの <xref:System.Numerics.BigInteger> 変数に割り当てられ、1つの <xref:System.Numerics.BigInteger> 変数が 9.999 e291 によってインクリメントされ、2つの変数が等しいかどうかがテストされます。</span><span class="sxs-lookup"><span data-stu-id="67038-848">It assigns the maximum value of a <xref:System.Single> to two <xref:System.Numerics.BigInteger> variables, increments one <xref:System.Numerics.BigInteger> variable by 9.999e291, and tests the two variables for equality.</span></span> <span data-ttu-id="67038-849">予想どおり、<xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> メソッドを呼び出すと、それらが等しくないことが示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-849">As expected, the call to the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method shows that they are unequal.</span></span> <span data-ttu-id="67038-850">ただし、大きい <xref:System.Numerics.BigInteger> 値から <xref:System.Single> への変換は成功しますが、<xref:System.Numerics.BigInteger> 値は <xref:System.Single.MaxValue?displayProperty=nameWithType>を超えています。</span><span class="sxs-lookup"><span data-stu-id="67038-850">However, the conversion of the larger <xref:System.Numerics.BigInteger> value back to a <xref:System.Single> succeeds, although the <xref:System.Numerics.BigInteger> value now exceeds <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span></span>   
    
 [!code-csharp[System.Numerics.BigInteger.Explicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#5)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#5)]   



## Examples
 <span data-ttu-id="67038-851">次の例は、<xref:System.Numerics.BigInteger> を <xref:System.Single> 値に変換する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-851">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.Single> values.</span></span>   
     
 [!code-csharp[System.Numeric.BigInteger.Explicit#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#8)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#8)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ushort (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int16 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt16(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; uint16" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-852">符号なし 16 ビット整数へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-852">The value to convert to an unsigned 16-bit integer.</span></span></param>
        <summary><span data-ttu-id="67038-853"><see cref="T:System.Numerics.BigInteger" /> オブジェクトから符号なし 16 ビット整数値への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-853">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 16-bit integer value.</span></span>  
  
<span data-ttu-id="67038-854">この API は、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="67038-854">This API is not CLS-compliant.</span></span> <span data-ttu-id="67038-855">準拠している代替として <see cref="T:System.Int32" />.を使用できます。</span><span class="sxs-lookup"><span data-stu-id="67038-855">The compliant alternative is <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="67038-856"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-856">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-857"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> メソッドのオーバーロードは、<xref:System.Numerics.BigInteger> オブジェクトの変換元となる型またはその元となる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-857">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="67038-858">言語コンパイラでは、データが失われる可能性があるため、この変換は自動的には実行されません。</span><span class="sxs-lookup"><span data-stu-id="67038-858">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="67038-859">代わりに、キャスト演算子 (でC#は) または変換関数 (`CType` や Visual Basic の `CUShort` など) が使用されている場合にのみ変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-859">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CUShort` in Visual Basic) is used.</span></span> <span data-ttu-id="67038-860">それ以外の場合は、コンパイラエラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-860">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="67038-861">この操作は縮小変換を定義するので、<xref:System.Numerics.BigInteger> 値が <xref:System.UInt16> データ型の範囲外にある場合は、実行時に <xref:System.OverflowException> をスローすることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-861">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt16> data type.</span></span> <span data-ttu-id="67038-862">変換が成功した場合、結果の <xref:System.UInt16> 値に精度が失われることはありません。</span><span class="sxs-lookup"><span data-stu-id="67038-862">There is no loss of precision in the resulting <xref:System.UInt16> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="67038-863">次の例は、<xref:System.Numerics.BigInteger> を <xref:System.UInt16> 値に変換する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-863">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt16> values.</span></span> <span data-ttu-id="67038-864">また、<xref:System.Numerics.BigInteger> 値が <xref:System.UInt16> データ型の範囲外であるためにスローされる <xref:System.OverflowException> も処理します。</span><span class="sxs-lookup"><span data-stu-id="67038-864">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt16> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#9)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#9)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="67038-865"><paramref name="value" /> が <see cref="F:System.UInt16.MinValue" /> より小さいか <see cref="F:System.UInt16.MaxValue" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="67038-865"><paramref name="value" /> is less than <see cref="F:System.UInt16.MinValue" /> or is greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator uint (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt32(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; uint32" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-866">符号なし 32 ビット整数へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-866">The value to convert to an unsigned 32-bit integer.</span></span></param>
        <summary><span data-ttu-id="67038-867"><see cref="T:System.Numerics.BigInteger" /> オブジェクトから符号なし 32 ビット整数値への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-867">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 32-bit integer value.</span></span>  
  
<span data-ttu-id="67038-868">この API は、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="67038-868">This API is not CLS-compliant.</span></span> <span data-ttu-id="67038-869">準拠している代替として <see cref="T:System.Int64" />.を使用できます。</span><span class="sxs-lookup"><span data-stu-id="67038-869">The compliant alternative is <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="67038-870"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-870">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-871"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> メソッドのオーバーロードは、<xref:System.Numerics.BigInteger> オブジェクトの変換元となる型またはその元となる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-871">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="67038-872">言語コンパイラでは、データが失われる可能性があるため、この変換は自動的には実行されません。</span><span class="sxs-lookup"><span data-stu-id="67038-872">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="67038-873">代わりに、キャスト演算子 (でC#は) または変換関数 (`CType` や Visual Basic の `CUInt` など) が使用されている場合にのみ変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-873">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CUInt` in Visual Basic) is used.</span></span> <span data-ttu-id="67038-874">それ以外の場合は、コンパイラエラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-874">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="67038-875">この操作は縮小変換を定義するので、<xref:System.Numerics.BigInteger> 値が <xref:System.UInt32> データ型の範囲外にある場合は、実行時に <xref:System.OverflowException> をスローすることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-875">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt32> data type.</span></span> <span data-ttu-id="67038-876">変換が成功した場合、結果の <xref:System.UInt32> 値に精度が失われることはありません。</span><span class="sxs-lookup"><span data-stu-id="67038-876">There is no loss of precision in the resulting <xref:System.UInt32> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="67038-877">次の例は、<xref:System.Numerics.BigInteger> を <xref:System.UInt32> 値に変換する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-877">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt32> values.</span></span> <span data-ttu-id="67038-878">また、<xref:System.Numerics.BigInteger> 値が <xref:System.UInt32> データ型の範囲外であるためにスローされる <xref:System.OverflowException> も処理します。</span><span class="sxs-lookup"><span data-stu-id="67038-878">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt32> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#10)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#10)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="67038-879"><paramref name="value" /> が <see cref="F:System.UInt32.MinValue" /> より小さいか <see cref="F:System.UInt32.MaxValue" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="67038-879"><paramref name="value" /> is less than <see cref="F:System.UInt32.MinValue" /> or is greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ulong (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt64(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; uint64" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-880">符号なし 64 ビット整数へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-880">The value to convert to an unsigned 64-bit integer.</span></span></param>
        <summary><span data-ttu-id="67038-881"><see cref="T:System.Numerics.BigInteger" /> オブジェクトから符号なし 64 ビット整数値への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-881">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 64-bit integer value.</span></span>  
  
<span data-ttu-id="67038-882">この API は、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="67038-882">This API is not CLS-compliant.</span></span> <span data-ttu-id="67038-883">準拠している代替として <see cref="T:System.Double" />.を使用できます。</span><span class="sxs-lookup"><span data-stu-id="67038-883">The compliant alternative is <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="67038-884"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-884">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-885"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> メソッドのオーバーロードは、<xref:System.Numerics.BigInteger> オブジェクトの変換元となる型またはその元となる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-885">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="67038-886">言語コンパイラでは、データが失われる可能性があるため、この変換は自動的には実行されません。</span><span class="sxs-lookup"><span data-stu-id="67038-886">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="67038-887">代わりに、キャスト演算子 (でC#は) または変換関数 (`CType` や Visual Basic の `CULng` など) が使用されている場合にのみ変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-887">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` or `CULng` in Visual Basic) is used.</span></span> <span data-ttu-id="67038-888">それ以外の場合は、コンパイラエラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-888">Otherwise, they display a compiler error.</span></span>    

 <span data-ttu-id="67038-889">この操作は縮小変換を定義するので、<xref:System.Numerics.BigInteger> 値が <xref:System.UInt64> データ型の範囲外にある場合は、実行時に <xref:System.OverflowException> をスローすることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-889">Because this operation defines a narrowing conversion, it can throw an <xref:System.OverflowException> at run time if the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt64> data type.</span></span> <span data-ttu-id="67038-890">変換が成功した場合、結果の <xref:System.UInt64> 値に精度が失われることはありません。</span><span class="sxs-lookup"><span data-stu-id="67038-890">There is no loss of precision in the resulting <xref:System.UInt64> value if the conversion is successful.</span></span>

## Examples
 <span data-ttu-id="67038-891">次の例は、<xref:System.Numerics.BigInteger> を <xref:System.UInt64> 値に変換する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-891">The following example illustrates the conversion of <xref:System.Numerics.BigInteger> to <xref:System.UInt64> values.</span></span> <span data-ttu-id="67038-892">また、<xref:System.Numerics.BigInteger> 値が <xref:System.UInt64> データ型の範囲外であるためにスローされる <xref:System.OverflowException> も処理します。</span><span class="sxs-lookup"><span data-stu-id="67038-892">It also handles an <xref:System.OverflowException> that is thrown because the <xref:System.Numerics.BigInteger> value is outside the range of the <xref:System.UInt64> data type.</span></span>   
    
 [!code-csharp[System.Numeric.BigInteger.Explicit#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#11)]   
 [!code-vb[System.Numeric.BigInteger.Explicit#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#11)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="67038-893"><paramref name="value" /> が <see cref="F:System.UInt64.MinValue" /> より小さいか <see cref="F:System.UInt64.MaxValue" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="67038-893"><paramref name="value" /> is less than <see cref="F:System.UInt64.MinValue" /> or is greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
        <altCompliant cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.BigInteger (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Single) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::BigInteger(float value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : single -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-894"><see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-894">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="67038-895"><see cref="T:System.Single" /> 値から <see cref="T:System.Numerics.BigInteger" /> 値への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-895">Defines an explicit conversion of a <see cref="T:System.Single" /> value to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-896"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-896">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-897">`value` パラメーターの小数部分は、変換前に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="67038-897">Any fractional part of the `value` parameter is truncated before conversion.</span></span>
 
 <span data-ttu-id="67038-898"><xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> メソッドのオーバーロードは、<xref:System.Numerics.BigInteger> オブジェクトの変換元となる型またはその元となる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-898">The overloads of the <xref:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger> method define the types to which or from which a <xref:System.Numerics.BigInteger> object can be converted.</span></span> <span data-ttu-id="67038-899"><xref:System.Single> から <xref:System.Numerics.BigInteger> への変換では `value`の小数部分が切り捨てられることがあるため、言語コンパイラでは、この変換は自動的には実行されません。</span><span class="sxs-lookup"><span data-stu-id="67038-899">Because the conversion from <xref:System.Single> to <xref:System.Numerics.BigInteger> can involve truncating any fractional part of `value`, language compilers do not perform this conversion automatically.</span></span> <span data-ttu-id="67038-900">代わりに、キャスト演算子 (でC#は) または変換関数 (Visual Basic の `CType` など) が使用されている場合にのみ、変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-900">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="67038-901">それ以外の場合は、コンパイラエラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-901">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="67038-902">カスタム演算子をサポートしていない言語の場合、代替方法は <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-902">For languages that do not support custom operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29?displayProperty=nameWithType>.</span></span>


## Examples
 <span data-ttu-id="67038-903">次の例では、<xref:System.Single> 値の配列内の個々の要素を <xref:System.Numerics.BigInteger> のオブジェクトに変換し、各変換の結果を表示します。</span><span class="sxs-lookup"><span data-stu-id="67038-903">The following example converts the individual elements in an array of <xref:System.Single> values to <xref:System.Numerics.BigInteger> objects, and then displays the result of each conversion.</span></span> <span data-ttu-id="67038-904"><xref:System.Single> 値の小数部分は、変換中に切り捨てられることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="67038-904">Note that any fractional part of a <xref:System.Single> value is truncated during the conversion.</span></span>
 
 [!code-csharp[System.Numerics.BigInteger.Explicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#3)]   
 [!code-vb[System.Numerics.BigInteger.Explicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#3)]   

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="67038-905"><paramref name="value" /> が <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.PositiveInfinity" />、または <see cref="F:System.Single.NegativeInfinity" /> です。</span><span class="sxs-lookup"><span data-stu-id="67038-905"><paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_GreaterThan">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67038-906">指定された値がもう 1 つの指定された値より大きいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-906">Returns a value that indicates whether a specified value is greater than another specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-907">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-907">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-908">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-908">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-909">64 ビット符号付き整数が <see cref="T:System.Numerics.BigInteger" /> 値より大きいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-909">Returns a value that indicates whether a 64-bit signed integer is greater than a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-910"><see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-910"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-911"><xref:System.Numerics.BigInteger.op_GreaterThan%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の大なり演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-911">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-912">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-912">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#9)]
 [!code-vb[System.Numerics.BigInteger.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#9)]  
  
 <span data-ttu-id="67038-913">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> インスタンスメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-913">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> instance method instead.</span></span> <span data-ttu-id="67038-914">次の例に示すように、一部の言語では、<xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-914">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#10)]  
  
 <span data-ttu-id="67038-915">`left` が <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>、または <xref:System.UInt32> の値の場合、操作の実行時に暗黙的に <xref:System.Int64> 値に変換されます。</span><span class="sxs-lookup"><span data-stu-id="67038-915">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="67038-916">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-916">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-917">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-917">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-918">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-918">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-919"><see cref="T:System.Numerics.BigInteger" /> が 64 ビット符号付き整数値より大きいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-919">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> is greater than a 64-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="67038-920"><see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-920"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-921"><xref:System.Numerics.BigInteger.op_GreaterThan%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の大なり演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-921">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-922">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-922">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#11)]
 [!code-vb[System.Numerics.BigInteger.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#11)]  
  
 <span data-ttu-id="67038-923">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-923">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-924">次の例に示すように、一部の言語では、<xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-924">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#12)]  
  
 <span data-ttu-id="67038-925">`right` が <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>、または <xref:System.UInt32> の値の場合、操作の実行時に暗黙的に <xref:System.Int64> 値に変換されます。</span><span class="sxs-lookup"><span data-stu-id="67038-925">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="67038-926">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-926">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-927">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-927">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-928">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-928">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-929"><see cref="T:System.Numerics.BigInteger" /> 値がもう 1 つの <see cref="T:System.Numerics.BigInteger" /> 値より大きいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-929">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-930"><see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-930"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-931"><xref:System.Numerics.BigInteger.op_GreaterThan%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の大なり演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-931">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-932">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-932">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#20)]
 [!code-vb[System.Numeric.BigInteger.Class#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#20)]  
  
 <span data-ttu-id="67038-933">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-933">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-934">また、次の例に示すように、<xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-934">They can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#21)]  
  
 <span data-ttu-id="67038-935">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-935">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-936">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-936">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-937">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-937">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-938"><see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号なし整数より大きいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-938">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="67038-939"><see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-939"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-940"><xref:System.Numerics.BigInteger.op_GreaterThan%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の大なり演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-940">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-941">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-941">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#13)]
 [!code-vb[System.Numerics.BigInteger.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#13)]  
  
 <span data-ttu-id="67038-942">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-942">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-943">次の例に示すように、一部の言語では、<xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-943">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-944">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-944">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-945">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-945">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-946"><see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号なし整数より大きいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-946">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="67038-947"><see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-947"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-948"><xref:System.Numerics.BigInteger.op_GreaterThan%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の大なり演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-948">The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-949">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-949">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#15)]
 [!code-vb[System.Numerics.BigInteger.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#15)]  
  
 <span data-ttu-id="67038-950">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-950">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-951">次の例に示すように、一部の言語では、<xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-951">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67038-952">指定された値がもう 1 つの指定された値以上かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-952">Returns a value that indicates whether a specified value is greater than or equal to another specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-953">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-953">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-954">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-954">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-955">64 ビット符号付き整数が <see cref="T:System.Numerics.BigInteger" /> 値以上かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-955">Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-956"><see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-956"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-957"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の "以上" 演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-957">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-958">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-958">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#17)]
 [!code-vb[System.Numerics.BigInteger.Operators#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#17)]  
  
 <span data-ttu-id="67038-959">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-959">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-960">次の例に示すように、一部の言語では、<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-960">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#18)]  
  
 <span data-ttu-id="67038-961">`left` が <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>、または <xref:System.UInt32> の値の場合、操作の実行時に暗黙的に <xref:System.Int64> 値に変換されます。</span><span class="sxs-lookup"><span data-stu-id="67038-961">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="67038-962">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-962">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-963">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-963">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-964">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-964">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-965"><see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号付き整数値以上かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-965">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit signed integer value.</span></span></summary>
        <returns><span data-ttu-id="67038-966"><see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-966"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-967"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の "以上" 演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-967">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-968">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-968">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#19)]
 [!code-vb[System.Numerics.BigInteger.Operators#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#19)]  
  
 <span data-ttu-id="67038-969">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-969">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-970">次の例に示すように、一部の言語では、<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-970">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#20)]  
  
 <span data-ttu-id="67038-971">`right` が <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>、または <xref:System.UInt32> の値の場合、操作の実行時に暗黙的に <xref:System.Int64> 値に変換されます。</span><span class="sxs-lookup"><span data-stu-id="67038-971">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="67038-972">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-972">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-973">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-973">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-974">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-974">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-975"><see cref="T:System.Numerics.BigInteger" /> 値がもう 1 つの <see cref="T:System.Numerics.BigInteger" /> 値以上かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-975">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-976"><see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-976"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-977"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の "以上" 演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-977">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-978">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-978">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#22)]
 [!code-vb[System.Numeric.BigInteger.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#22)]  
  
 <span data-ttu-id="67038-979">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-979">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-980">次の例に示すように、一部の言語では、<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-980">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#23)]  
  
 <span data-ttu-id="67038-981">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-981">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-982">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-982">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-983">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-983">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-984"><see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号なし整数値以上かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-984">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit unsigned integer value.</span></span></summary>
        <returns><span data-ttu-id="67038-985"><see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-985"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-986"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の "以上" 演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-986">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-987">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-987">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#21)]
 [!code-vb[System.Numerics.BigInteger.Operators#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#21)]  
  
 <span data-ttu-id="67038-988">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-988">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-989">次の例に示すように、一部の言語では、<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-989">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#22)]  
  
 <span data-ttu-id="67038-990">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-990">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-991">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-991">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-992">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-992">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-993">64 ビット符号なし整数が <see cref="T:System.Numerics.BigInteger" /> 値以上かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-993">Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-994"><see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-994"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-995"><xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の "以上" 演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-995">The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-996">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-996">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#23)]
 [!code-vb[System.Numerics.BigInteger.Operators#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#23)]  
  
 <span data-ttu-id="67038-997">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-997">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-998">次の例に示すように、一部の言語では、<xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-998">Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#24)]  
  
 <span data-ttu-id="67038-999">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-999">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67038-1000"><see cref="T:System.Numerics.BigInteger" /> オブジェクトと別の型との間の暗黙的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1000">Defines an implicit conversion between a <see cref="T:System.Numerics.BigInteger" /> object and another type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Byte) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : byte -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1001"><see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-1001">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="67038-1002">符号なしバイト値から <see cref="T:System.Numerics.BigInteger" /> 値への暗示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1002">Defines an implicit conversion of an unsigned byte to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-1003"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1003">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1004">`value` パラメーターの小数部分は、変換前に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="67038-1004">Any fractional part of the `value` parameter is truncated before conversion.</span></span>

 <span data-ttu-id="67038-1005">暗黙的な演算子をサポートしていない言語の場合、代替方法は <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1005">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="67038-1006"><xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> メソッドのオーバーロードは、コンパイラが明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、<xref:System.Numerics.BigInteger> 値を自動的に変換するために使用する型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1006">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="67038-1007">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="67038-1007">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="67038-1008">このオーバーロードは、次の例に示すように、コンパイラが <xref:System.Byte> 値から <xref:System.Numerics.BigInteger> 値への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="67038-1008">This overload lets the compiler handle conversions from a <xref:System.Byte> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#1)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Short) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(short value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int16 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1009"><see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-1009">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="67038-1010">符号付き 16 ビット整数値から <see cref="T:System.Numerics.BigInteger" /> 値への暗黙的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1010">Defines an implicit conversion of a signed 16-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-1011"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1011">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1012">暗黙的な演算子をサポートしていない言語の場合、代替方法は <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1012">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="67038-1013"><xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> メソッドのオーバーロードは、コンパイラが明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、<xref:System.Numerics.BigInteger> 値を自動的に変換するために使用する型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1013">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="67038-1014">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="67038-1014">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="67038-1015">このオーバーロードは、次の例に示すように、コンパイラが <xref:System.Int16> 値から <xref:System.Numerics.BigInteger> 値への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="67038-1015">This overload lets the compiler handle conversions from a <xref:System.Int16> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#2)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#2)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(int value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1016"><see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-1016">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="67038-1017">符号付き 32 ビット整数値から <see cref="T:System.Numerics.BigInteger" /> 値への暗黙的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1017">Defines an implicit conversion of a signed 32-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-1018"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1018">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1019">暗黙的な演算子をサポートしていない言語の場合、代替方法は <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1019">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>  

 <span data-ttu-id="67038-1020"><xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> メソッドのオーバーロードは、コンパイラが明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、<xref:System.Numerics.BigInteger> 値を自動的に変換するために使用する型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1020">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="67038-1021">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="67038-1021">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="67038-1022">このオーバーロードは、次の例に示すように、コンパイラが <xref:System.Int32> 値から <xref:System.Numerics.BigInteger> 値への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="67038-1022">This overload lets the compiler handle conversions from a <xref:System.Int32> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#3)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#3)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Long) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(long value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int64 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1023"><see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-1023">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="67038-1024">符号付き 64 ビット整数値から <see cref="T:System.Numerics.BigInteger" /> 値への暗黙的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1024">Defines an implicit conversion of a signed 64-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-1025"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1025">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1026">暗黙的な演算子をサポートしていない言語の場合、代替方法は <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1026">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29?displayProperty=nameWithType>.</span></span>   
 
 <span data-ttu-id="67038-1027"><xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> メソッドのオーバーロードは、コンパイラが明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、<xref:System.Numerics.BigInteger> 値を自動的に変換するために使用する型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1027">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="67038-1028">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="67038-1028">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="67038-1029">このオーバーロードは、次の例に示すように、コンパイラが <xref:System.Int64> 値から <xref:System.Numerics.BigInteger> 値への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="67038-1029">This overload lets the compiler handle conversions from a <xref:System.Int64> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#4)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#4)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As SByte) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : sbyte -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1030"><see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-1030">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="67038-1031">8 ビット符号付き整数値から <see cref="T:System.Numerics.BigInteger" /> 値への暗黙的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1031">Defines an implicit conversion of an 8-bit signed integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
<span data-ttu-id="67038-1032">この API は、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="67038-1032">This API is not CLS-compliant.</span></span> <span data-ttu-id="67038-1033">準拠している代替として <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />.を使用できます。</span><span class="sxs-lookup"><span data-stu-id="67038-1033">The compliant alternative is <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />.</span></span></summary>
        <returns><span data-ttu-id="67038-1034"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1034">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1035">暗黙的な演算子をサポートしていない言語の場合、代替方法は <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1035">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="67038-1036"><xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> メソッドのオーバーロードは、コンパイラが明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、<xref:System.Numerics.BigInteger> 値を自動的に変換するために使用する型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1036">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="67038-1037">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="67038-1037">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="67038-1038">このオーバーロードは、次の例に示すように、コンパイラが <xref:System.SByte> 値から <xref:System.Numerics.BigInteger> 値への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="67038-1038">This overload lets the compiler handle conversions from a <xref:System.SByte> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#5)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#5)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UShort) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint16 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1039"><see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-1039">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="67038-1040">16 ビット符号なし整数値から <see cref="T:System.Numerics.BigInteger" /> 値への暗黙的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1040">Defines an implicit conversion of a 16-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
<span data-ttu-id="67038-1041">この API は、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="67038-1041">This API is not CLS-compliant.</span></span> <span data-ttu-id="67038-1042">準拠している代替として <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />.を使用できます。</span><span class="sxs-lookup"><span data-stu-id="67038-1042">The compliant alternative is <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />.</span></span></summary>
        <returns><span data-ttu-id="67038-1043"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1043">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1044">暗黙的な演算子をサポートしていない言語の場合、代替方法は <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1044">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="67038-1045"><xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> メソッドのオーバーロードは、コンパイラが明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、<xref:System.Numerics.BigInteger> 値を自動的に変換するために使用する型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1045">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="67038-1046">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="67038-1046">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="67038-1047">このオーバーロードは、次の例に示すように、コンパイラが <xref:System.UInt16> 値から <xref:System.Numerics.BigInteger> 値への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="67038-1047">This overload lets the compiler handle conversions from a <xref:System.UInt16> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#6)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#6)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint32 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1048"><see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-1048">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="67038-1049">32 ビット符号なし整数値から <see cref="T:System.Numerics.BigInteger" /> 値への暗黙的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1049">Defines an implicit conversion of a 32-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
<span data-ttu-id="67038-1050">この API は、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="67038-1050">This API is not CLS-compliant.</span></span> <span data-ttu-id="67038-1051">準拠している代替として <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />.を使用できます。</span><span class="sxs-lookup"><span data-stu-id="67038-1051">The compliant alternative is <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />.</span></span></summary>
        <returns><span data-ttu-id="67038-1052"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1052">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1053">暗黙的な演算子をサポートしていない言語の場合、代替方法は <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1053">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="67038-1054"><xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> メソッドのオーバーロードは、コンパイラが明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、<xref:System.Numerics.BigInteger> 値を自動的に変換するために使用する型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1054">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="67038-1055">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="67038-1055">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="67038-1056">このオーバーロードは、次の例に示すように、コンパイラが <xref:System.UInt32> 値から <xref:System.Numerics.BigInteger> 値への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="67038-1056">This overload lets the compiler handle conversions from a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#7)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#7)]   

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.BigInteger (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As ULong) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::BigInteger(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint64 -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1057"><see cref="T:System.Numerics.BigInteger" /> へと変換する値。</span><span class="sxs-lookup"><span data-stu-id="67038-1057">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</span></span></param>
        <summary><span data-ttu-id="67038-1058">64 ビット符号なし整数値から <see cref="T:System.Numerics.BigInteger" /> 値への暗黙的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1058">Defines an implicit conversion of a 64-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span>  
  
<span data-ttu-id="67038-1059">この API は、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="67038-1059">This API is not CLS-compliant.</span></span> <span data-ttu-id="67038-1060">準拠している代替として <see cref="T:System.Double" />.を使用できます。</span><span class="sxs-lookup"><span data-stu-id="67038-1060">The compliant alternative is <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="67038-1061"><paramref name="value" /> パラメーターの値を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1061">An object that contains the value of the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1062">暗黙的な演算子をサポートしていない言語の場合、代替方法は <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1062">For languages that do not support implicit operators, the alternative method is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29?displayProperty=nameWithType>.</span></span>   

 <span data-ttu-id="67038-1063"><xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> メソッドのオーバーロードは、コンパイラが明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、<xref:System.Numerics.BigInteger> 値を自動的に変換するために使用する型を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1063">The overloads of the <xref:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger> method define the types to which or from which a compiler can automatically convert a <xref:System.Numerics.BigInteger> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="67038-1064">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="67038-1064">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="67038-1065">このオーバーロードは、次の例に示すように、コンパイラが <xref:System.UInt64> 値から <xref:System.Numerics.BigInteger> 値への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="67038-1065">This overload lets the compiler handle conversions from a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger> value, as the following example shows.</span></span>   
   
 [!code-csharp[System.Numeric.BigInteger.Implicit#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#8)]   
 [!code-vb[System.Numeric.BigInteger.Implicit#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#8)]   

 ]]></format>
        </remarks>
        <altCompliant cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ++ (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Increment(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_Increment (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ++(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Increment : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_Increment value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1066">インクリメントする値。</span><span class="sxs-lookup"><span data-stu-id="67038-1066">The value to increment.</span></span></param>
        <summary><span data-ttu-id="67038-1067"><see cref="T:System.Numerics.BigInteger" /> 値を 1 だけインクリメントします。</span><span class="sxs-lookup"><span data-stu-id="67038-1067">Increments a <see cref="T:System.Numerics.BigInteger" /> value by 1.</span></span></summary>
        <returns><span data-ttu-id="67038-1068"><paramref name="value" /> パラメーターの値を 1 だけインクリメントした値。</span><span class="sxs-lookup"><span data-stu-id="67038-1068">The value of the <paramref name="value" /> parameter incremented by 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1069"><xref:System.Numerics.BigInteger.op_Increment%2A> メソッドは、<xref:System.Numerics.BigInteger> 値のインクリメント演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1069">The <xref:System.Numerics.BigInteger.op_Increment%2A> method defines the increment operation for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1070">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1070">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#24)]  
  
 <span data-ttu-id="67038-1071">インクリメント演算子がないか、演算子のオーバーロードをサポートしていない一部の言語 (Visual Basic など) では、次の例に示すように、<xref:System.Numerics.BigInteger.op_Increment%2A> メソッドを直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1071">Some languages (such as Visual Basic) that lack an increment operator or do not support operator overloading can call the <xref:System.Numerics.BigInteger.op_Increment%2A> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#25)]  
  
 <span data-ttu-id="67038-1072"><xref:System.Numerics.BigInteger> オブジェクトは不変であるため、<xref:System.Numerics.BigInteger.op_Increment%2A> 演算子は、値が `value`によって表される <xref:System.Numerics.BigInteger> オブジェクトよりも1つ大きい値を持つ新しい <xref:System.Numerics.BigInteger> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="67038-1072">Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Increment%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one more than the <xref:System.Numerics.BigInteger> object represented by `value`.</span></span> <span data-ttu-id="67038-1073">そのため、<xref:System.Numerics.BigInteger.op_Increment%2A> を繰り返し呼び出すと、コストがかかる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1073">Therefore, repeated calls to <xref:System.Numerics.BigInteger.op_Increment%2A> may be expensive.</span></span>  
  
 <span data-ttu-id="67038-1074">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1074">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Inequality">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67038-1075">2 つの数値が等しくないかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1075">Returns a value that indicates whether two numeric values are not equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : int64 * System.Numerics.BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1076">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1076">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-1077">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1077">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-1078">64 ビット符号付き整数値と <see cref="T:System.Numerics.BigInteger" /> 値が等しくないかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1078">Returns a value that indicates whether a 64-bit signed integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</span></span></summary>
        <returns><span data-ttu-id="67038-1079"><paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1079"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1080"><xref:System.Numerics.BigInteger.op_Inequality%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の非等値演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1080">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1081">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1081">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#25)]
 [!code-vb[System.Numerics.BigInteger.Operators#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#25)]  
  
 <span data-ttu-id="67038-1082">カスタム演算子をサポートしない言語では、次の方法のいずれかを使用して、非等値をテストできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1082">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="67038-1083"><xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> インスタンスメソッドを呼び出します。このメソッドは、<xref:System.Numerics.BigInteger> と符号付き長整数値の間のリレーションシップを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1083">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> instance method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.</span></span>  
  
-   <span data-ttu-id="67038-1084"><xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> インスタンスメソッドを呼び出し、その値を逆にします。</span><span class="sxs-lookup"><span data-stu-id="67038-1084">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> instance method and reversing its value.</span></span>  
  
 <span data-ttu-id="67038-1085">`left` が <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>、または <xref:System.UInt32> の値の場合、操作の実行時に暗黙的に <xref:System.Int64> 値に変換されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1085">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.BigInteger * int64 -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1086">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1086">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-1087">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1087">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-1088"><see cref="T:System.Numerics.BigInteger" /> 値と 64 ビット符号付き整数値が等しくないかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1088">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit signed integer are not equal.</span></span></summary>
        <returns><span data-ttu-id="67038-1089"><paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1089"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1090"><xref:System.Numerics.BigInteger.op_Inequality%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の非等値演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1090">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1091">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1091">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#26)]
 [!code-vb[System.Numerics.BigInteger.Operators#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#26)]  
  
 <span data-ttu-id="67038-1092">カスタム演算子をサポートしない言語では、次の方法のいずれかを使用して、非等値をテストできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1092">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="67038-1093"><xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> メソッドを呼び出します。このメソッドは、<xref:System.Numerics.BigInteger> と符号付き長整数値の間のリレーションシップを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1093">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.</span></span>  
  
-   <span data-ttu-id="67038-1094"><xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> メソッドを呼び出し、その値を逆にします。</span><span class="sxs-lookup"><span data-stu-id="67038-1094">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 <span data-ttu-id="67038-1095">`right` が <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>、または <xref:System.UInt32> の値の場合、操作の実行時に暗黙的に <xref:System.Int64> 値に変換されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1095">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="67038-1096">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1096">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1097">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1097">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-1098">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1098">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-1099">2 つの <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が異なるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1099">Returns a value that indicates whether two <see cref="T:System.Numerics.BigInteger" /> objects have different values.</span></span></summary>
        <returns><span data-ttu-id="67038-1100"><paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1100"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1101"><xref:System.Numerics.BigInteger.op_Inequality%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の非等値演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1101">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1102">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1102">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#26)]
 [!code-vb[System.Numeric.BigInteger.Class#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#26)]  
  
 <span data-ttu-id="67038-1103">カスタム演算子をサポートしない言語では、次の方法のいずれかを使用して、非等値をテストできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1103">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="67038-1104"><xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> メソッドを呼び出します。このメソッドは、2つの <xref:System.Numerics.BigInteger> オブジェクト間のリレーションシップを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1104">Calling the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method, which indicates the relationship between two <xref:System.Numerics.BigInteger> objects.</span></span>  
  
-   <span data-ttu-id="67038-1105"><xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> メソッドを呼び出し、その値を逆にします。</span><span class="sxs-lookup"><span data-stu-id="67038-1105">Calling the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 <span data-ttu-id="67038-1106">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1106">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1107">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1107">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-1108">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1108">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-1109"><see cref="T:System.Numerics.BigInteger" /> 値と 64 ビット符号なし整数値が等しくないかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1109">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit unsigned integer are not equal.</span></span></summary>
        <returns><span data-ttu-id="67038-1110"><paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1110"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1111"><xref:System.Numerics.BigInteger.op_Inequality%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の非等値演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1111">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1112">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1112">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#27)]
 [!code-vb[System.Numerics.BigInteger.Operators#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#27)]  
  
 <span data-ttu-id="67038-1113">カスタム演算子をサポートしない言語では、次の方法のいずれかを使用して、非等値をテストできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1113">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="67038-1114"><xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> メソッドを呼び出します。このメソッドは、<xref:System.Numerics.BigInteger> と符号なし長整数値の間のリレーションシップを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1114">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.</span></span>  
  
-   <span data-ttu-id="67038-1115"><xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> メソッドを呼び出し、その値を逆にします。</span><span class="sxs-lookup"><span data-stu-id="67038-1115">Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1116">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1116">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-1117">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1117">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-1118">64 ビット符号なし整数値と <see cref="T:System.Numerics.BigInteger" /> 値が等しくないかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1118">Returns a value that indicates whether a 64-bit unsigned integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</span></span></summary>
        <returns><span data-ttu-id="67038-1119"><paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1119"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1120"><xref:System.Numerics.BigInteger.op_Inequality%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の非等値演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1120">The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1121">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1121">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#28)]
 [!code-vb[System.Numerics.BigInteger.Operators#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#28)]  
  
 <span data-ttu-id="67038-1122">カスタム演算子をサポートしない言語では、次の方法のいずれかを使用して、非等値をテストできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1122">Languages that do not support custom operators can test for inequality by using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="67038-1123"><xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> メソッドを呼び出します。このメソッドは、<xref:System.Numerics.BigInteger> と符号なし長整数値の間のリレーションシップを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1123">Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.</span></span>  
  
-   <span data-ttu-id="67038-1124"><xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> メソッドを呼び出し、その値を逆にします。</span><span class="sxs-lookup"><span data-stu-id="67038-1124">Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=nameWithType> method and reversing its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_LeftShift">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &lt;&lt; (System.Numerics.BigInteger value, int shift);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_LeftShift(valuetype System.Numerics.BigInteger value, int32 shift) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;&lt; (value As BigInteger, shift As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &lt;&lt;(System::Numerics::BigInteger value, int shift);" />
      <MemberSignature Language="F#" Value="static member ( &lt;&lt;&lt; ) : System.Numerics.BigInteger * int -&gt; System.Numerics.BigInteger" Usage="value &lt;&lt;&lt; shift" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="shift" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1125">ビットをシフトする対象の値。</span><span class="sxs-lookup"><span data-stu-id="67038-1125">The value whose bits are to be shifted.</span></span></param>
        <param name="shift"><span data-ttu-id="67038-1126"><paramref name="value" /> を左にシフトするビット数です。</span><span class="sxs-lookup"><span data-stu-id="67038-1126">The number of bits to shift <paramref name="value" /> to the left.</span></span></param>
        <summary><span data-ttu-id="67038-1127">指定されたビット数だけ <see cref="T:System.Numerics.BigInteger" /> 値を左にシフトします。</span><span class="sxs-lookup"><span data-stu-id="67038-1127">Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the left.</span></span></summary>
        <returns><span data-ttu-id="67038-1128">指定されたビット数だけ左にシフトされた値。</span><span class="sxs-lookup"><span data-stu-id="67038-1128">A value that has been shifted to the left by the specified number of bits.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1129"><xref:System.Numerics.BigInteger.op_LeftShift%2A> メソッドは、<xref:System.Numerics.BigInteger> 値のビットごとの左シフト演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1129">The <xref:System.Numerics.BigInteger.op_LeftShift%2A> method defines the operation of the bitwise left-shift operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1130">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1130">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#29)]
 [!code-vb[System.Numerics.BigInteger.Operators#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#29)]  
  
> [!NOTE]
>  <span data-ttu-id="67038-1131">整数プリミティブのビットごとの左シフト演算とは異なり、<xref:System.Numerics.BigInteger.op_LeftShift%2A> メソッドは元の <xref:System.Numerics.BigInteger> 値の符号を保持します。</span><span class="sxs-lookup"><span data-stu-id="67038-1131">Unlike the bitwise left-shift operation with integer primitives, the <xref:System.Numerics.BigInteger.op_LeftShift%2A> method preserves the sign of the original <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="67038-1132">カスタム演算子をサポートしない言語では、`BigInteger.Pow(2, shift)`によって `value` を乗算することで、ビットごとの左シフト演算を実行できます。</span><span class="sxs-lookup"><span data-stu-id="67038-1132">Languages that do not support custom operators can perform a bitwise left-shift operation by multiplying `value` by `BigInteger.Pow(2, shift)`.</span></span> <span data-ttu-id="67038-1133">次の例は、結果がこの演算子を使用した結果と同一であることを示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-1133">The following example shows that the results are identical to the results of using this operator.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#30)]
 [!code-vb[System.Numerics.BigInteger.Operators#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_LessThan">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67038-1134">指定された値がもう 1 つの指定された値より小さいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1134">Returns a value that indicates whether a specified value is less than a second specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1135">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1135">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-1136">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1136">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-1137">64 ビット符号付き整数が <see cref="T:System.Numerics.BigInteger" /> 値より小さいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1137">Returns a value that indicates whether a 64-bit signed integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-1138"><paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1138"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1139"><xref:System.Numerics.BigInteger.op_LessThan%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の小なり演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1139">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1140">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1140">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#31)]
 [!code-vb[System.Numerics.BigInteger.Operators#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#31)]  
  
 <span data-ttu-id="67038-1141">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1141">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-1142">次の例に示すように、一部の言語では、<xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1142">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#32)]  
  
 <span data-ttu-id="67038-1143">`left` が <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>、または <xref:System.UInt32> の値の場合、操作の実行時に暗黙的に <xref:System.Int64> 値に変換されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1143">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="67038-1144">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1144">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1145">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1145">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-1146">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1146">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-1147"><see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号付き整数より小さいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1147">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="67038-1148"><paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1148"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1149"><xref:System.Numerics.BigInteger.op_LessThan%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の小なり演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1149">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1150">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1150">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#33)]
 [!code-vb[System.Numerics.BigInteger.Operators#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#33)]  
  
 <span data-ttu-id="67038-1151">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1151">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-1152">次の例に示すように、一部の言語では、<xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1152">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#34)]  
  
 <span data-ttu-id="67038-1153">`right` が <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>、または <xref:System.UInt32> の値の場合、操作の実行時に暗黙的に <xref:System.Int64> 値に変換されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1153">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="67038-1154">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1154">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1155">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1155">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-1156">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1156">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-1157"><see cref="T:System.Numerics.BigInteger" /> 値がもう 1 つの <see cref="T:System.Numerics.BigInteger" /> 値より小さいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1157">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-1158"><paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1158"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1159"><xref:System.Numerics.BigInteger.op_LessThan%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の小なり演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1159">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1160">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1160">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#27)]
 [!code-vb[System.Numeric.BigInteger.Class#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#27)]  
  
 <span data-ttu-id="67038-1161">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1161">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-1162">次の例に示すように、一部の言語では、<xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1162">Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#28)]  
  
 <span data-ttu-id="67038-1163">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1163">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1164">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1164">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-1165">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1165">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-1166"><see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号なし整数より小さいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1166">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="67038-1167"><paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1167"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1168"><xref:System.Numerics.BigInteger.op_LessThan%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の小なり演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1168">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1169">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1169">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#35)]
 [!code-vb[System.Numerics.BigInteger.Operators#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#35)]  
  
 <span data-ttu-id="67038-1170">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1170">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-1171">また、次の例に示すように、<xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1171">They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#36)]  
  
 <span data-ttu-id="67038-1172">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1172">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1173">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1173">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-1174">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1174">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-1175">64 ビット符号なし整数が <see cref="T:System.Numerics.BigInteger" /> 値より小さいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1175">Returns a value that indicates whether a 64-bit unsigned integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-1176"><paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1176"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1177"><xref:System.Numerics.BigInteger.op_LessThan%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の小なり演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1177">The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1178">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1178">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#37)]
 [!code-vb[System.Numerics.BigInteger.Operators#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#37)]  
  
 <span data-ttu-id="67038-1179">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1179">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-1180">また、次の例に示すように、<xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1180">They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#38)]  
  
 <span data-ttu-id="67038-1181">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1181">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67038-1182">指定された値がもう 1 つの指定された値以下かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1182">Returns a value that indicates whether a specified value is less than or equal to another specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Long, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(long left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : int64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1183">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1183">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-1184">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1184">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-1185">64 ビット符号付き整数が <see cref="T:System.Numerics.BigInteger" /> 値以下かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1185">Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-1186"><paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1186"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1187"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> メソッドは、<xref:System.Numerics.BigInteger> 値に対して、以下演算子の操作を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1187">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1188">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1188">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#39)]
 [!code-vb[System.Numerics.BigInteger.Operators#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#39)]  
  
 <span data-ttu-id="67038-1189">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1189">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-1190">また、次の例に示すように、<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1190">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#40)]  
  
 <span data-ttu-id="67038-1191">`left` が <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>、または <xref:System.UInt32> の値の場合、操作の実行時に暗黙的に <xref:System.Int64> 値に変換されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1191">If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="67038-1192">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1192">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, long right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Numerics.BigInteger * int64 -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1193">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1193">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-1194">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1194">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-1195"><see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号付き整数以下かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1195">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="67038-1196"><paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1196"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1197"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> メソッドは、<xref:System.Numerics.BigInteger> 値に対して、以下演算子の操作を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1197">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1198">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1198">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#41)]
 [!code-vb[System.Numerics.BigInteger.Operators#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#41)]  
  
 <span data-ttu-id="67038-1199">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1199">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-1200">また、次の例に示すように、<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1200">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#42)]  
  
 <span data-ttu-id="67038-1201">`right` が <xref:System.Byte>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.SByte>、<xref:System.UInt16>、または <xref:System.UInt32> の値の場合、操作の実行時に暗黙的に <xref:System.Int64> 値に変換されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1201">If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.</span></span>  
  
 <span data-ttu-id="67038-1202">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1202">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1203">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1203">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-1204">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1204">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-1205"><see cref="T:System.Numerics.BigInteger" /> 値がもう 1 つの <see cref="T:System.Numerics.BigInteger" /> 値以下かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1205">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-1206"><paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1206"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1207"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> メソッドは、<xref:System.Numerics.BigInteger> 値に対して、以下演算子の操作を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1207">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1208">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1208">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#29)]
 [!code-vb[System.Numeric.BigInteger.Class#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#29)]  
  
 <span data-ttu-id="67038-1209">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.Compare%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1209">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A> method instead.</span></span> <span data-ttu-id="67038-1210">また、次の例に示すように、<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1210">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numeric.BigInteger.Class#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#30)]  
  
 <span data-ttu-id="67038-1211">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1211">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As BigInteger, right As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Numerics::BigInteger left, System::UInt64 right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Numerics.BigInteger * uint64 -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1212">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1212">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-1213">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1213">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-1214"><see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号なし整数以下かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1214">Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="67038-1215"><paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1215"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1216"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> メソッドは、<xref:System.Numerics.BigInteger> 値に対して、以下演算子の操作を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1216">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1217">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1217">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#43)]
 [!code-vb[System.Numerics.BigInteger.Operators#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#43)]  
  
 <span data-ttu-id="67038-1218">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1218">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-1219">また、次の例に示すように、<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1219">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#44)]  
  
 <span data-ttu-id="67038-1220">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1220">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As ULong, right As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::UInt64 left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : uint64 * System.Numerics.BigInteger -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1221">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1221">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="67038-1222">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1222">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="67038-1223">64 ビット符号なし整数が <see cref="T:System.Numerics.BigInteger" /> 値以下かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1223">Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-1224"><paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1224"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1225"><xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> メソッドは、<xref:System.Numerics.BigInteger> 値に対して、以下演算子の操作を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1225">The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1226">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1226">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#45)]
 [!code-vb[System.Numerics.BigInteger.Operators#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#45)]  
  
 <span data-ttu-id="67038-1227">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1227">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="67038-1228">また、次の例に示すように、<xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> メソッドを直接呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1228">They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.Operators#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#46)]  
  
 <span data-ttu-id="67038-1229">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1229">The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_Modulus">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator % (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Modulus(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Mod (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator %(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member ( % ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="dividend % divisor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="67038-1230">被除数。</span><span class="sxs-lookup"><span data-stu-id="67038-1230">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="67038-1231">除数。</span><span class="sxs-lookup"><span data-stu-id="67038-1231">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="67038-1232">指定された 2 つの <see cref="T:System.Numerics.BigInteger" /> 値の除算の結果生じた剰余を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1232">Returns the remainder that results from division with two specified <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="67038-1233">除算の結果生じた剰余。</span><span class="sxs-lookup"><span data-stu-id="67038-1233">The remainder that results from the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1234"><xref:System.Numerics.BigInteger.op_Modulus%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の剰余演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1234">The <xref:System.Numerics.BigInteger.op_Modulus%2A> method defines the operation of the modulus operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1235">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1235">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#31)]
 [!code-vb[System.Numeric.BigInteger.Class#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#31)]  
  
 <span data-ttu-id="67038-1236">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1236">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=nameWithType> method instead.</span></span>  
  
 <span data-ttu-id="67038-1237">剰余演算によって返される値の符号は、`dividend`の符号に依存します。 `dividend` が正の場合、剰余演算は正の結果を返します。負の値の場合、剰余演算は負の結果を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1237">The sign of the value returned by the modulus operation depends on the sign of `dividend`: If `dividend` is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result.</span></span> <span data-ttu-id="67038-1238"><xref:System.Numerics.BigInteger> 値を持つ剰余演算の動作は、他の整数型の剰余演算と同じです。</span><span class="sxs-lookup"><span data-stu-id="67038-1238">The behavior of the modulus operation with <xref:System.Numerics.BigInteger> values is identical to the modulus operation with other integral types.</span></span>  
  
 <span data-ttu-id="67038-1239">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1239">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="67038-1240"><paramref name="divisor" /> が 0 (ゼロ) です。</span><span class="sxs-lookup"><span data-stu-id="67038-1240"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator * (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Multiply(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator *(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left * right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1241">乗算する 1 番目の値。</span><span class="sxs-lookup"><span data-stu-id="67038-1241">The first value to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="67038-1242">乗算する 2 番目の値。</span><span class="sxs-lookup"><span data-stu-id="67038-1242">The second value to multiply.</span></span></param>
        <summary><span data-ttu-id="67038-1243">指定された 2 つの <see cref="T:System.Numerics.BigInteger" /> 値を乗算します。</span><span class="sxs-lookup"><span data-stu-id="67038-1243">Multiplies two specified <see cref="T:System.Numerics.BigInteger" /> values.</span></span></summary>
        <returns><span data-ttu-id="67038-1244"><paramref name="left" /> と <paramref name="right" /> の積。</span><span class="sxs-lookup"><span data-stu-id="67038-1244">The product of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1245"><xref:System.Numerics.BigInteger.op_Multiply%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の乗算演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1245">The <xref:System.Numerics.BigInteger.op_Multiply%2A> method defines the operation of the multiplication operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1246">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1246">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#11)]
 [!code-vb[System.Numeric.BigInteger.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#11)]  
  
 <span data-ttu-id="67038-1247">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1247">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator ~ (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_OnesComplement(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Not (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator ~(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_OnesComplement : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.op_OnesComplement value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1248">整数値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1248">An integer value.</span></span></param>
        <summary><span data-ttu-id="67038-1249"><see cref="T:System.Numerics.BigInteger" /> 値のビットごとの 1 の補数を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1249">Returns the bitwise one's complement of a <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-1250"><paramref name="value" /> のビットごとの 1 の補数。</span><span class="sxs-lookup"><span data-stu-id="67038-1250">The bitwise one's complement of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1251"><xref:System.Numerics.BigInteger.op_OnesComplement%2A> メソッドは、<xref:System.Numerics.BigInteger> 値のビットごとの1の補数演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1251">The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method defines the operation of the bitwise one's complement operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1252">ビットごとの1の補数演算子は、数値の各ビットを反転します。</span><span class="sxs-lookup"><span data-stu-id="67038-1252">The bitwise one's complement operator reverses each bit in a numeric value.</span></span> <span data-ttu-id="67038-1253">つまり、結果で0に設定された `value` のビットは1に設定され、結果では1であるビットが0に設定されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1253">That is, bits in `value` that are 0 are set to 1 in the result, and bits that are 1 are set to 0 in the result.</span></span> <span data-ttu-id="67038-1254"><xref:System.Numerics.BigInteger.op_OnesComplement%2A> メソッドは、次のようなコードを有効にします。</span><span class="sxs-lookup"><span data-stu-id="67038-1254">The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/cs/OnesComplement1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/OnesComplement1.vb#1)]  
  
 <span data-ttu-id="67038-1255">カスタム演算子をサポートしない言語では、<xref:System.Numerics.BigInteger.op_OnesComplement%2A> メソッドを直接呼び出して、ビットごとの1の補数演算を実行できる場合があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1255">Languages that do not support custom operators may be able to call the <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method directly to perform a bitwise one's complement operation.</span></span> <span data-ttu-id="67038-1256">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1256">For example:</span></span>  
  
 [!code-vb[System.Numerics.BigInteger.OnesComplement#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/onescomplement2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_RightShift">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator &gt;&gt; (System.Numerics.BigInteger value, int shift);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_RightShift(valuetype System.Numerics.BigInteger value, int32 shift) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;&gt; (value As BigInteger, shift As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator &gt;&gt;(System::Numerics::BigInteger value, int shift);" />
      <MemberSignature Language="F#" Value="static member ( &gt;&gt;&gt; ) : System.Numerics.BigInteger * int -&gt; System.Numerics.BigInteger" Usage="value &gt;&gt;&gt; shift" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="shift" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1257">ビットをシフトする対象の値。</span><span class="sxs-lookup"><span data-stu-id="67038-1257">The value whose bits are to be shifted.</span></span></param>
        <param name="shift"><span data-ttu-id="67038-1258"><paramref name="value" /> を右にシフトするビット数。</span><span class="sxs-lookup"><span data-stu-id="67038-1258">The number of bits to shift <paramref name="value" /> to the right.</span></span></param>
        <summary><span data-ttu-id="67038-1259">指定されたビット数だけ <see cref="T:System.Numerics.BigInteger" /> 値を右にシフトします。</span><span class="sxs-lookup"><span data-stu-id="67038-1259">Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the right.</span></span></summary>
        <returns><span data-ttu-id="67038-1260">指定されたビット数だけ右にシフトされた値。</span><span class="sxs-lookup"><span data-stu-id="67038-1260">A value that has been shifted to the right by the specified number of bits.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1261"><xref:System.Numerics.BigInteger.op_RightShift%2A> メソッドは、<xref:System.Numerics.BigInteger> 値のビットごとの右シフト演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1261">The <xref:System.Numerics.BigInteger.op_RightShift%2A> method defines the operation of the bitwise right-shift operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1262">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1262">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#47)]
 [!code-vb[System.Numerics.BigInteger.Operators#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#47)]  
  
 <span data-ttu-id="67038-1263">カスタム演算子をサポートしていない言語では、`value` を `BigInteger.Pow(2, shift)` で除算し、負の値に対して1回 `shift` を減算することで、ビットごとの右シフト演算を実行できます。</span><span class="sxs-lookup"><span data-stu-id="67038-1263">Languages that do not support custom operators can perform a bitwise right-shift operation by dividing `value` by `BigInteger.Pow(2, shift)` and subtracting 1 times `shift` for negative values.</span></span> <span data-ttu-id="67038-1264">次の例は、結果がこの演算子を使用した結果と同一であることを示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-1264">The following example shows that the results are identical to the results of using this operator.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Operators#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#48)]
 [!code-vb[System.Numerics.BigInteger.Operators#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#48)]  
  
 <span data-ttu-id="67038-1265">`shift` が正の <xref:System.Numerics.BigInteger> 値のビット数以上である場合、右シフト演算の結果は <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>ますが、</span><span class="sxs-lookup"><span data-stu-id="67038-1265">If `shift` is greater than or equal to the number of bits in a positive <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67038-1266">`shift` が負の <xref:System.Numerics.BigInteger> 値のビット数より大きい場合、右シフト演算の結果は <xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=nameWithType>ます。</span><span class="sxs-lookup"><span data-stu-id="67038-1266">If `shift` is greater than the number of bits in a negative <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator - (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Subtraction(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator -(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1267">減算される値 (被減数)。</span><span class="sxs-lookup"><span data-stu-id="67038-1267">The value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="67038-1268">減算する値 (減数)。</span><span class="sxs-lookup"><span data-stu-id="67038-1268">The value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="67038-1269"><see cref="T:System.Numerics.BigInteger" /> 値をもう 1 つの <see cref="T:System.Numerics.BigInteger" /> 値から減算します。</span><span class="sxs-lookup"><span data-stu-id="67038-1269">Subtracts a <see cref="T:System.Numerics.BigInteger" /> value from another <see cref="T:System.Numerics.BigInteger" /> value.</span></span></summary>
        <returns><span data-ttu-id="67038-1270"><paramref name="right" /> から <paramref name="left" /> を減算した結果。</span><span class="sxs-lookup"><span data-stu-id="67038-1270">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1271"><xref:System.Numerics.BigInteger.op_Subtraction%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の減算演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1271">The <xref:System.Numerics.BigInteger.op_Subtraction%2A> method defines the operation of the subtraction operator for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1272">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="67038-1272">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#14)]
 [!code-vb[System.Numeric.BigInteger.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#14)]  
  
 <span data-ttu-id="67038-1273">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1273">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=nameWithType> method instead.</span></span>  
  
 <span data-ttu-id="67038-1274">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="67038-1274">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator - (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_UnaryNegation(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator -(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="- value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1275">否定する値。</span><span class="sxs-lookup"><span data-stu-id="67038-1275">The value to negate.</span></span></param>
        <summary><span data-ttu-id="67038-1276">指定された BigInteger 値を否定 (負数化) します。</span><span class="sxs-lookup"><span data-stu-id="67038-1276">Negates a specified BigInteger value.</span></span></summary>
        <returns><span data-ttu-id="67038-1277"><paramref name="value" /> パラメーターに -1 を乗算した結果。</span><span class="sxs-lookup"><span data-stu-id="67038-1277">The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1278"><xref:System.Numerics.BigInteger.op_UnaryNegation%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の単項否定演算子 (または加法逆演算子) の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1278">The <xref:System.Numerics.BigInteger.op_UnaryNegation%2A> method defines the operation of the unary negation operator (or the additive inverse operator) for <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1279">この操作では、元の数値に 0 (ゼロ) が追加されると、結果が0になる値が生成されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1279">The operation produces a value that results in 0 (zero) when it is added to the original number.</span></span> <span data-ttu-id="67038-1280">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.BigInteger.Negate%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1280">Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Negate%2A> method instead.</span></span>  
  
 <span data-ttu-id="67038-1281">この演算子の同等のメソッドは <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="67038-1281">The equivalent method for this operator is <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="67038-1282">次の例は、<xref:System.Numerics.BigInteger> オブジェクトの値を否定する3種類の方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-1282">The following example illustrates three different ways to negate the value of a <xref:System.Numerics.BigInteger> object.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]
 [!code-vb[System.Numeric.BigInteger.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger operator + (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_UnaryPlus(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (value As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger operator +(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member ( ~+ ) : System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="+ value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1283">整数値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1283">An integer value.</span></span></param>
        <summary><span data-ttu-id="67038-1284"><see cref="T:System.Numerics.BigInteger" /> オペランドの値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1284">Returns the value of the <see cref="T:System.Numerics.BigInteger" /> operand.</span></span> <span data-ttu-id="67038-1285">オペランドの符号は変更されません。</span><span class="sxs-lookup"><span data-stu-id="67038-1285">(The sign of the operand is unchanged.)</span></span></summary>
        <returns><span data-ttu-id="67038-1286"><paramref name="value" /> オペランドの値。</span><span class="sxs-lookup"><span data-stu-id="67038-1286">The value of the <paramref name="value" /> operand.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1287"><xref:System.Numerics.BigInteger.op_UnaryPlus%2A> メソッドは、<xref:System.Numerics.BigInteger> 値の単項プラス演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1287">The <xref:System.Numerics.BigInteger.op_UnaryPlus%2A> method defines the operation of the unary positive operator for <xref:System.Numerics.BigInteger> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67038-1288">数値の文字列形式を、それと等価の <see cref="T:System.Numerics.BigInteger" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="67038-1288">Converts the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1289">変換する数値を含んだ文字列。</span><span class="sxs-lookup"><span data-stu-id="67038-1289">A string that contains the number to convert.</span></span></param>
        <summary><span data-ttu-id="67038-1290">数値の文字列形式を、それと等価の <see cref="T:System.Numerics.BigInteger" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="67038-1290">Converts the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="67038-1291"><paramref name="value" /> パラメーターで指定されている数値と等価の値。</span><span class="sxs-lookup"><span data-stu-id="67038-1291">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1292">`value` パラメーターは、次の形式の数値の文字列形式である必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1292">The `value` parameter should be the string representation of a number in the following form.</span></span>  
  
 <span data-ttu-id="67038-1293">[*ws*][*sign*]*数字*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="67038-1293">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="67038-1294">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="67038-1294">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="67038-1295">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="67038-1295">The following table describes each element.</span></span>  
  
|<span data-ttu-id="67038-1296">要素</span><span class="sxs-lookup"><span data-stu-id="67038-1296">Element</span></span>|<span data-ttu-id="67038-1297">説明</span><span class="sxs-lookup"><span data-stu-id="67038-1297">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="67038-1298">*ws*</span><span class="sxs-lookup"><span data-stu-id="67038-1298">*ws*</span></span>|<span data-ttu-id="67038-1299">省略可能な空白。</span><span class="sxs-lookup"><span data-stu-id="67038-1299">Optional white space.</span></span>|  
|<span data-ttu-id="67038-1300">*sign*</span><span class="sxs-lookup"><span data-stu-id="67038-1300">*sign*</span></span>|<span data-ttu-id="67038-1301">省略可能な符号。</span><span class="sxs-lookup"><span data-stu-id="67038-1301">An optional sign.</span></span> <span data-ttu-id="67038-1302">有効な符号文字は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> および <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> プロパティによって決定されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1302">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the current culture.</span></span>|  
|<span data-ttu-id="67038-1303">*数字*</span><span class="sxs-lookup"><span data-stu-id="67038-1303">*digits*</span></span>|<span data-ttu-id="67038-1304">0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="67038-1304">A sequence of digits ranging from 0 to 9.</span></span> <span data-ttu-id="67038-1305">先頭の0は無視されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1305">Any leading zeros are ignored.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="67038-1306">`value` パラメーターによって指定された文字列は、<xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> スタイルを使用して解釈されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1306">The string specified by the `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="67038-1307">これには、桁区切り記号や小数点を含めることはできません。また、小数点を含めることもできません。</span><span class="sxs-lookup"><span data-stu-id="67038-1307">It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
 <span data-ttu-id="67038-1308">`value` パラメーターは、現在のシステムカルチャに対して初期化された <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> オブジェクトの書式情報を使用して解析されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1308">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> object that is initialized for the current system culture.</span></span> <span data-ttu-id="67038-1309">詳細については、<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="67038-1309">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67038-1310">特定のカルチャの書式情報を使用して文字列を解析するには、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="67038-1310">To parse a string by using the formatting information of a specific culture, use the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="67038-1311"><xref:System.Numerics.BigInteger.Parse%2A> メソッドを使用して、<xref:System.Numerics.BigInteger.ToString%2A> メソッドによって出力された <xref:System.Numerics.BigInteger> 値の文字列形式をラウンドトリップする場合は、"R" 書式指定子と共に <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> メソッドを使用して、<xref:System.Numerics.BigInteger> 値の文字列形式を生成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1311">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="67038-1312">それ以外の場合、<xref:System.Numerics.BigInteger> の文字列形式では、元の値の50の最上位の桁のみが保持され、<xref:System.Numerics.BigInteger.Parse%2A> メソッドを使用して <xref:System.Numerics.BigInteger> 値を復元すると、データが失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1312">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-1313">次の例では、<xref:System.Numerics.BigInteger.Parse%28System.String%29> メソッドを使用して、2つの <xref:System.Numerics.BigInteger> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="67038-1313">The following example uses the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method to instantiate two <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="67038-1314">各オブジェクトを別の数値で乗算し、<xref:System.Numerics.BigInteger.Compare%2A> メソッドを呼び出して、2つの値の間のリレーションシップを決定します。</span><span class="sxs-lookup"><span data-stu-id="67038-1314">It multiplies each object by another number and then calls the <xref:System.Numerics.BigInteger.Compare%2A> method to determine the relationship between the two values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="67038-1315"><paramref name="value" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="67038-1315"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="67038-1316"><paramref name="value" /> が正しい形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="67038-1316"><paramref name="value" /> is not in the correct format.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, style As NumberStyles) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, System::Globalization::NumberStyles style);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1317">変換する数値を含んだ文字列。</span><span class="sxs-lookup"><span data-stu-id="67038-1317">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="67038-1318"><paramref name="value" /> に許可されている書式を指定する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="67038-1318">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="67038-1319">指定のスタイルで表現された数値の文字列形式を、それと等価な <see cref="T:System.Numerics.BigInteger" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="67038-1319">Converts the string representation of a number in a specified style to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="67038-1320"><paramref name="value" /> パラメーターで指定されている数値と等価の値。</span><span class="sxs-lookup"><span data-stu-id="67038-1320">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1321">`style` パラメーターは、解析操作を成功させるために、`value` パラメーターで使用できるスタイル要素 (空白、正または負の記号、桁区切り記号、桁区切り記号、小数点の記号など) を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1321">The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="67038-1322">`styles` は、<xref:System.Globalization.NumberStyles> 列挙のビットフラグの組み合わせである必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1322">`styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="67038-1323">`style` パラメーターを使用すると、`value` に16進値の文字列形式が含まれている場合、`value` で表される数値システム (10 進数または16進数) が実行時にのみ認識される場合、または `value`で空白または符号を許可しない場合に、このメソッドのオーバーロードが役立ちます。</span><span class="sxs-lookup"><span data-stu-id="67038-1323">The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.</span></span>  
  
 <span data-ttu-id="67038-1324">`style`の値に応じて、`value` パラメーターには次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1324">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="67038-1325">[*ws*][*$*][*sign*][*数字*,]*数字*[。*fractional_digits*] [E [*sign*]*exponential_digits*] [*ws*]</span><span class="sxs-lookup"><span data-stu-id="67038-1325">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="67038-1326">`style` に <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>が含まれている場合、`value` パラメーターには次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1326">If `style` includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, the `value` parameter may contain the following elements:</span></span>  
  
 <span data-ttu-id="67038-1327">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="67038-1327">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="67038-1328">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="67038-1328">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="67038-1329">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="67038-1329">The following table describes each element.</span></span>  
  
|<span data-ttu-id="67038-1330">要素</span><span class="sxs-lookup"><span data-stu-id="67038-1330">Element</span></span>|<span data-ttu-id="67038-1331">説明</span><span class="sxs-lookup"><span data-stu-id="67038-1331">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="67038-1332">*ws*</span><span class="sxs-lookup"><span data-stu-id="67038-1332">*ws*</span></span>|<span data-ttu-id="67038-1333">省略可能な空白。</span><span class="sxs-lookup"><span data-stu-id="67038-1333">Optional white space.</span></span> <span data-ttu-id="67038-1334">`style` に <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> フラグが含まれている場合、`value` の先頭に空白が表示され、`style` に <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> フラグが含まれている場合は `value` の最後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1334">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="67038-1335">カルチャ固有の通貨記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1335">A culture-specific currency symbol.</span></span> <span data-ttu-id="67038-1336">文字列内での位置は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> および <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> プロパティによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1336">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="67038-1337">現在のカルチャの通貨記号は、`style` に <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> フラグが含まれている場合に `value` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1337">The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="67038-1338">*sign*</span><span class="sxs-lookup"><span data-stu-id="67038-1338">*sign*</span></span>|<span data-ttu-id="67038-1339">省略可能な符号。</span><span class="sxs-lookup"><span data-stu-id="67038-1339">An optional sign.</span></span> <span data-ttu-id="67038-1340"><xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> フラグが `style` に含まれている場合、`value` の先頭に符号が表示されます。また、`style` に <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> フラグが含まれている場合は、`value` の最後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1340">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="67038-1341"><xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> フラグが `style` 含まれている場合は、`value` でかっこを使用して負の値を示すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1341">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="67038-1342">*数字*</span><span class="sxs-lookup"><span data-stu-id="67038-1342">*digits*</span></span><br /><br /> <span data-ttu-id="67038-1343">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="67038-1343">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="67038-1344">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="67038-1344">*exponential_digits*</span></span>|<span data-ttu-id="67038-1345">0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="67038-1345">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="67038-1346">*Fractional_digits*の場合は、数字0のみが有効です。</span><span class="sxs-lookup"><span data-stu-id="67038-1346">For *fractional_digits*, only the digit 0 is valid.</span></span>|  
|<span data-ttu-id="67038-1347">*、*</span><span class="sxs-lookup"><span data-stu-id="67038-1347">*,*</span></span>|<span data-ttu-id="67038-1348">カルチャ固有のグループ区切り記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1348">A culture-specific group separator symbol.</span></span> <span data-ttu-id="67038-1349">現在のカルチャの区切り記号は、`style` に <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> フラグが含まれている場合に `value` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1349">The current culture's group separator can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="67038-1350">*」を参照してください。*</span><span class="sxs-lookup"><span data-stu-id="67038-1350">*.*</span></span>|<span data-ttu-id="67038-1351">カルチャ固有の小数点の記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1351">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="67038-1352">現在のカルチャの小数点の記号は、`style` に <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> フラグが含まれている場合に `value` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1352">The current culture's decimal point symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="67038-1353">解析操作が成功するためには、数字0のみが小数点の数字として表示されます。*fractional_digits*に他の数字が含まれている場合は、<xref:System.FormatException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="67038-1353">Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.</span></span>|  
|<span data-ttu-id="67038-1354">E</span><span class="sxs-lookup"><span data-stu-id="67038-1354">E</span></span>|<span data-ttu-id="67038-1355">"E" または "E" 文字。値が指数 (科学的) 表記で表されることを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1355">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="67038-1356">`value` パラメーターは、`style` に <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> フラグが含まれている場合に指数表記で数値を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1356">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="67038-1357">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="67038-1357">*hexdigits*</span></span>|<span data-ttu-id="67038-1358">0から f、または0から F までの16進数のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="67038-1358">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="67038-1359">`s` 内の終端の NUL (U + 0000) 文字は、`style` 引数の値に関係なく、解析操作によって無視されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1359">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="67038-1360">数字のみを含む文字列 (<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> スタイルに対応) は、常に正常に解析されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1360">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="67038-1361">残りの <xref:System.Globalization.NumberStyles> メンバーのほとんどは、入力文字列に存在する必要があるが必須ではない要素を制御します。</span><span class="sxs-lookup"><span data-stu-id="67038-1361">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="67038-1362">次の表は、個々の <xref:System.Globalization.NumberStyles> メンバーが `value`に存在する可能性のある要素にどのように影響するかを示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-1362">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="67038-1363">`NumberStyles` 値</span><span class="sxs-lookup"><span data-stu-id="67038-1363">`NumberStyles` value</span></span>|<span data-ttu-id="67038-1364">数字に加えて `value` で許可される要素</span><span class="sxs-lookup"><span data-stu-id="67038-1364">Elements permitted in `value` in addition to digits</span></span>|  
|--------------------------|---------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="67038-1365">*Digits*要素のみ。</span><span class="sxs-lookup"><span data-stu-id="67038-1365">The *digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="67038-1366">小数点 (.) と*小数部の桁*の要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1366">The decimal point (.) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="67038-1367">*Exponential_digits*と共に指数表記を示す "e" または "e" 文字。</span><span class="sxs-lookup"><span data-stu-id="67038-1367">The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="67038-1368">`value`の先頭にある*ws*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1368">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="67038-1369">`value`の末尾の*ws*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1369">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="67038-1370">`value`の先頭にある*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1370">The *sign* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="67038-1371">`value`の末尾の*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1371">The *sign* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="67038-1372">数値を囲むかっこ形式の*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1372">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="67038-1373">桁区切り記号 (,) 要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1373">The group separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="67038-1374">Currency ($) 要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1374">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="67038-1375">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1375">All elements.</span></span> <span data-ttu-id="67038-1376">ただし、`value` は、16進数または指数表記の数値を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-1376">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="67038-1377">`value`の先頭または末尾にある*ws*要素、`value`の先頭に*符号*、小数点 (*.*) 記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1377">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol.</span></span> <span data-ttu-id="67038-1378">`value` パラメーターでは、指数表記を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1378">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="67038-1379">`ws`、`sign`、桁区切り記号 (*,*)、および小数点 (*.*) 要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1379">The `ws`, `sign`, group separator (*,*), and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="67038-1380">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1380">All elements.</span></span> <span data-ttu-id="67038-1381">ただし、`value` は16進数を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-1381">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="67038-1382"><xref:System.Numerics.BigInteger.Parse%2A> メソッドを使用して、<xref:System.Numerics.BigInteger.ToString%2A> メソッドによって出力された <xref:System.Numerics.BigInteger> 値の文字列形式をラウンドトリップする場合は、"R" 書式指定子と共に <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> メソッドを使用して、<xref:System.Numerics.BigInteger> 値の文字列形式を生成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1382">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="67038-1383">それ以外の場合、<xref:System.Numerics.BigInteger> の文字列形式では、元の値の50の最上位の桁のみが保持され、<xref:System.Numerics.BigInteger.Parse%2A> メソッドを使用して <xref:System.Numerics.BigInteger> 値を復元すると、データが失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1383">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="67038-1384">`value`に特定のスタイル要素があるかどうかを指定できる他の <xref:System.Globalization.NumberStyles> 値とは異なり、<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> スタイル値は、`value` 内の個々の数字が常に16進数として解釈されることを意味します。</span><span class="sxs-lookup"><span data-stu-id="67038-1384">Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for, but do not require, the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters.</span></span> <span data-ttu-id="67038-1385">有効な16進文字は、0-9、A-F、a-f です。</span><span class="sxs-lookup"><span data-stu-id="67038-1385">Valid hexadecimal characters are 0-9, A-F, and a-f.</span></span> <span data-ttu-id="67038-1386">`style` パラメーターと組み合わせることができるフラグは、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> と <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>だけです。</span><span class="sxs-lookup"><span data-stu-id="67038-1386">The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67038-1387">(<xref:System.Globalization.NumberStyles> 列挙体には、2つの空白フラグを含む複合数値スタイル <xref:System.Globalization.NumberStyles.HexNumber>が含まれています)。</span><span class="sxs-lookup"><span data-stu-id="67038-1387">(The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67038-1388">`value` が16進数の文字列表現である場合、16進数と区別する装飾 (`0x` や `&h`など) を前に付けることはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-1388">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="67038-1389">これにより、変換は失敗します。</span><span class="sxs-lookup"><span data-stu-id="67038-1389">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="67038-1390">`value` が16進数の文字列の場合、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> メソッドは `value` を2の補数表現を使用して格納された負の数値として解釈します (最初の2桁の16進数が `0x80`以上の場合)。</span><span class="sxs-lookup"><span data-stu-id="67038-1390">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="67038-1391">つまり、メソッドは、`value` の最初のバイトの最上位ビットを符号ビットとして解釈します。</span><span class="sxs-lookup"><span data-stu-id="67038-1391">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="67038-1392">16進数文字列が正の数値として正しく解釈されるようにするには、`value` の最初の桁の値が0である必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1392">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="67038-1393">たとえば、メソッドは `0x80` を負の値として解釈しますが、`0x080` または `0x0080` を正の値として解釈します。</span><span class="sxs-lookup"><span data-stu-id="67038-1393">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="67038-1394">次の例は、負の値と正の値を表す16進文字列の違いを示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-1394">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  
  
 <span data-ttu-id="67038-1395">`value` パラメーターは、現在のシステムカルチャに対して初期化された <xref:System.Globalization.NumberFormatInfo> オブジェクトの書式情報を使用して解析されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1395">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="67038-1396">解析操作に使用する書式設定情報を持つカルチャを指定するには、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> オーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-1396">To specify the culture whose formatting information is used for the parse operation, call the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-1397">次の例では、`style` パラメーターに使用できるいくつかの値を使用して <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> メソッドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1397">The following example illustrates calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method with several possible values for the `style` parameter.</span></span> <span data-ttu-id="67038-1398">ここでは、文字列を16進値として解釈する方法と、スペースを許可せずにシンボルを署名する方法について説明します。</span><span class="sxs-lookup"><span data-stu-id="67038-1398">It illustrates how to interpret a string as a hexadecimal value, and how to disallow spaces and sign symbols.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#5)]
 [!code-vb[System.Numeric.BigInteger.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="67038-1399"><paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="67038-1399"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="67038-1400">または</span><span class="sxs-lookup"><span data-stu-id="67038-1400">-or-</span></span> 
 <span data-ttu-id="67038-1401"><paramref name="style" /> には、別の値と共に <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> または <see cref="F:System.Globalization.NumberStyles.HexNumber" /> フラグが含まれます。</span><span class="sxs-lookup"><span data-stu-id="67038-1401"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="67038-1402"><paramref name="value" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="67038-1402"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="67038-1403"><paramref name="value" /> は、<see cref="T:System.Globalization.NumberStyles" /> によって指定された入力パターンに従っていません。</span><span class="sxs-lookup"><span data-stu-id="67038-1403"><paramref name="value" /> does not comply with the input pattern specified by <see cref="T:System.Globalization.NumberStyles" />.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, provider As IFormatProvider) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1404">変換する数値を含んだ文字列。</span><span class="sxs-lookup"><span data-stu-id="67038-1404">A string that contains a number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="67038-1405"><paramref name="value" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1405">An object that provides culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="67038-1406">指定されたカルチャ固有の書式で表現された文字列形式の数値を、それと等価の <see cref="T:System.Numerics.BigInteger" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="67038-1406">Converts the string representation of a number in a specified culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="67038-1407"><paramref name="value" /> パラメーターで指定されている数値と等価の値。</span><span class="sxs-lookup"><span data-stu-id="67038-1407">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1408">`value` パラメーターは、次の形式の数値の文字列形式である必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1408">The `value` parameter should be the string representation of a number in the following form:</span></span>  
  
 <span data-ttu-id="67038-1409">[*ws*][*sign*]*数字*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="67038-1409">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="67038-1410">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="67038-1410">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="67038-1411">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="67038-1411">The following table describes each element.</span></span>  
  
|<span data-ttu-id="67038-1412">要素</span><span class="sxs-lookup"><span data-stu-id="67038-1412">Element</span></span>|<span data-ttu-id="67038-1413">説明</span><span class="sxs-lookup"><span data-stu-id="67038-1413">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="67038-1414">*ws*</span><span class="sxs-lookup"><span data-stu-id="67038-1414">*ws*</span></span>|<span data-ttu-id="67038-1415">省略可能な空白。</span><span class="sxs-lookup"><span data-stu-id="67038-1415">Optional white space.</span></span>|  
|<span data-ttu-id="67038-1416">*sign*</span><span class="sxs-lookup"><span data-stu-id="67038-1416">*sign*</span></span>|<span data-ttu-id="67038-1417">省略可能な符号。</span><span class="sxs-lookup"><span data-stu-id="67038-1417">An optional sign.</span></span> <span data-ttu-id="67038-1418">有効な符号文字は、`provider` オブジェクトの <xref:System.IFormatProvider.GetFormat%2A> メソッドによって返される <xref:System.Globalization.NumberFormatInfo> オブジェクトの <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> および <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> プロパティによって決定されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1418">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the <xref:System.Globalization.NumberFormatInfo> object that is returned by the `provider` object's <xref:System.IFormatProvider.GetFormat%2A> method.</span></span>|  
|<span data-ttu-id="67038-1419">*数字*</span><span class="sxs-lookup"><span data-stu-id="67038-1419">*digits*</span></span>|<span data-ttu-id="67038-1420">0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="67038-1420">A sequence of digits ranging from 0 to 9.</span></span> <span data-ttu-id="67038-1421">先頭の0は無視されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1421">Any leading zeros are ignored.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="67038-1422">`value` パラメーターによって指定された文字列は、<xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> スタイルを使用して解釈されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1422">The string specified by the `value` parameter is interpreted using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="67038-1423">これには、桁区切り記号や小数点を含めることはできません。また、小数点を含めることもできません。</span><span class="sxs-lookup"><span data-stu-id="67038-1423">It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="67038-1424"><xref:System.Numerics.BigInteger.Parse%2A> メソッドを使用して、<xref:System.Numerics.BigInteger.ToString%2A> メソッドによって出力された <xref:System.Numerics.BigInteger> 値の文字列形式をラウンドトリップする場合は、"R" 書式指定子と共に <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> メソッドを使用して、<xref:System.Numerics.BigInteger> 値の文字列形式を生成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1424">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="67038-1425">それ以外の場合、<xref:System.Numerics.BigInteger> の文字列形式では、元の値の50の最上位の桁のみが保持され、<xref:System.Numerics.BigInteger.Parse%2A> メソッドを使用して <xref:System.Numerics.BigInteger> 値を復元すると、データが失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1425">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="67038-1426">`provider` パラメーターは、<xref:System.IFormatProvider.GetFormat%2A> メソッドがカルチャ固有の書式情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返す <xref:System.IFormatProvider> の実装です。</span><span class="sxs-lookup"><span data-stu-id="67038-1426">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information.</span></span> <span data-ttu-id="67038-1427"><xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> メソッドが呼び出されると、`provider` パラメーターの <xref:System.IFormatProvider.GetFormat%2A> メソッドを呼び出し、<xref:System.Globalization.NumberFormatInfo> 型を表す <xref:System.Type> オブジェクトに渡します。</span><span class="sxs-lookup"><span data-stu-id="67038-1427">When the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="67038-1428"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、`value` パラメーターの形式に関する情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1428">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `value` parameter.</span></span> <span data-ttu-id="67038-1429">`provider` パラメーターを使用して、解析操作にカスタム書式情報を提供するには、次の3つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1429">There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:</span></span>  
  
-   <span data-ttu-id="67038-1430">書式設定情報を提供するカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1430">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="67038-1431"><xref:System.Globalization.CultureInfo.GetFormat%2A> メソッドは、そのカルチャの数値書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1431">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="67038-1432">数値の書式設定情報を提供する実際の <xref:System.Globalization.NumberFormatInfo> オブジェクトを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1432">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="67038-1433">(<xref:System.Globalization.NumberFormatInfo.GetFormat%2A> の実装では、それ自体が返されます)。</span><span class="sxs-lookup"><span data-stu-id="67038-1433">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="67038-1434"><xref:System.IFormatProvider>を実装するカスタムオブジェクトを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1434">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="67038-1435"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトをインスタンス化して返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1435">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="67038-1436">`provider` が `null`場合、`value` の書式設定は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトに基づいて解釈されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1436">If `provider` is `null`, the formatting of `value` is interpreted based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-1437">次の例では、<xref:System.Numerics.BigInteger> 値の書式設定のために、チルダ (~) を負の符号として定義する2つの方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-1437">The following examples show two ways to define the tilde (~) as a negative sign for formatting <xref:System.Numerics.BigInteger> values.</span></span> <span data-ttu-id="67038-1438"><xref:System.Numerics.BigInteger> の値を元の文字列と同じ形式で表示するには、コードで <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> メソッドを呼び出し、書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトに渡す必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="67038-1438">Note that to display the <xref:System.Numerics.BigInteger> values in the same format as the original strings, your code must call the <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> method and pass it the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="67038-1439">最初の例では、<xref:System.IFormatProvider> を実装するクラスを定義し、<xref:System.IFormatProvider.GetFormat%2A> メソッドを使用して、書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1439">The first example defines a class that implements <xref:System.IFormatProvider> and uses the <xref:System.IFormatProvider.GetFormat%2A> method to return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#2)]
 [!code-vb[System.Numeric.BigInteger.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#2)]  
  
 <span data-ttu-id="67038-1440"><xref:System.Numerics.BigInteger> オブジェクトは、次のコードを使用してインスタンス化できます。</span><span class="sxs-lookup"><span data-stu-id="67038-1440">A <xref:System.Numerics.BigInteger> object can then be instantiated with the following code:</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#3)]
 [!code-vb[System.Numeric.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#3)]  
  
 <span data-ttu-id="67038-1441">2番目の例はより簡単です。</span><span class="sxs-lookup"><span data-stu-id="67038-1441">The second example is more straightforward.</span></span> <span data-ttu-id="67038-1442">このメソッドは、書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを `provider` パラメーターに渡します。</span><span class="sxs-lookup"><span data-stu-id="67038-1442">It passes the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information to the `provider` parameter.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#4)]
 [!code-vb[System.Numeric.BigInteger.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="67038-1443"><paramref name="value" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="67038-1443"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="67038-1444"><paramref name="value" /> が正しい形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="67038-1444"><paramref name="value" /> is not in the correct format.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (ReadOnlySpan&lt;char&gt; value, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.Integer, IFormatProvider provider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = null) As BigInteger" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1445">変換する番号を含む文字の読み取り専用のスパン。</span><span class="sxs-lookup"><span data-stu-id="67038-1445">A read-only span of characters that contains the number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="67038-1446"><paramref name="value" /> に許可されている書式を指定する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="67038-1446">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value" />.</span></span></param>
        <param name="provider"><span data-ttu-id="67038-1447"><paramref name="value" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1447">An object that provides culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="67038-1448">指定の文字の読み取り専用のスパンに含まれている、指定のスタイルで表現された数値を、それと等価な <see cref="T:System.Numerics.BigInteger" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="67038-1448">Converts the representation of a number, contained in the specified read-only span of characters, in a specified style to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="67038-1449"><paramref name="value" /> パラメーターで指定されている数値と等価の値。</span><span class="sxs-lookup"><span data-stu-id="67038-1449">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="67038-1450">`style` パラメーターは、解析操作を成功させるために、`value` パラメーターで使用できるスタイル要素 (空白、正または負の記号、桁区切り記号、桁区切り記号、小数点の記号など) を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1450">The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="67038-1451">`styles` は、<xref:System.Globalization.NumberStyles> 列挙のビットフラグの組み合わせである必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1451">`styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="67038-1452">`style` パラメーターを使用すると、`value` に16進値の表現が含まれている場合、`value` によって表される数値システム (10 進数または16進数) が実行時にのみ認識される場合、または `value`で空白または記号を許可しない場合に、このメソッドのオーバーロードが役立ちます。</span><span class="sxs-lookup"><span data-stu-id="67038-1452">The `style` parameter makes this method overload useful when `value` contains the representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.</span></span>

<span data-ttu-id="67038-1453">`style`の値に応じて、`value` パラメーターには次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1453">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>

<span data-ttu-id="67038-1454">[*ws*][*$*][*sign*][*数字*,]*数字*[*. Fractional_digits*] [E [*sign*]*exponential_digits*] [*ws*]</span><span class="sxs-lookup"><span data-stu-id="67038-1454">[*ws*][*$*][*sign*][*digits*,]*digits*[*.fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>

<span data-ttu-id="67038-1455">`style` に <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>が含まれている場合、`value` パラメーターには次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1455">If `style` includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, the `value` parameter may include the following elements:</span></span>

<span data-ttu-id="67038-1456">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="67038-1456">[*ws*]*hexdigits*[*ws*]</span></span>

<span data-ttu-id="67038-1457">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="67038-1457">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="67038-1458">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="67038-1458">The following table describes each element.</span></span>

|<span data-ttu-id="67038-1459">要素</span><span class="sxs-lookup"><span data-stu-id="67038-1459">Element</span></span>|<span data-ttu-id="67038-1460">説明</span><span class="sxs-lookup"><span data-stu-id="67038-1460">Description</span></span>|
|-------------|-----------------|
|<span data-ttu-id="67038-1461">*ws*</span><span class="sxs-lookup"><span data-stu-id="67038-1461">*ws*</span></span>|<span data-ttu-id="67038-1462">省略可能な空白。</span><span class="sxs-lookup"><span data-stu-id="67038-1462">Optional white space.</span></span> <span data-ttu-id="67038-1463">`style` に <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> フラグが含まれている場合、`value` の先頭に空白が表示され、`style` に <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> フラグが含まれている場合は `value` の最後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1463">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|
|*$*|<span data-ttu-id="67038-1464">カルチャ固有の通貨記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1464">A culture-specific currency symbol.</span></span> <span data-ttu-id="67038-1465">`value` 内の位置は、`provider` パラメーターによって示されるカルチャの <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> および <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> プロパティによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1465">Its position in `value` is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the culture indicated by the `provider` parameter.</span></span> <span data-ttu-id="67038-1466">現在のカルチャの通貨記号は、`style` に <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> フラグが含まれている場合に `value` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1466">The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="67038-1467">*sign*</span><span class="sxs-lookup"><span data-stu-id="67038-1467">*sign*</span></span>|<span data-ttu-id="67038-1468">省略可能な符号。</span><span class="sxs-lookup"><span data-stu-id="67038-1468">An optional sign.</span></span> <span data-ttu-id="67038-1469"><xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> フラグが `style` に含まれている場合、`value` の先頭に符号が表示されます。また、`style` に <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> フラグが含まれている場合は、`value` の最後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1469">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="67038-1470"><xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> フラグが `style` 含まれている場合は、`value` でかっこを使用して負の値を示すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1470">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="67038-1471">*数字*</span><span class="sxs-lookup"><span data-stu-id="67038-1471">*digits*</span></span><br /><br /> <span data-ttu-id="67038-1472">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="67038-1472">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="67038-1473">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="67038-1473">*exponential_digits*</span></span>|<span data-ttu-id="67038-1474">0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="67038-1474">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="67038-1475">*Fractional_digits*の場合は、数字0のみが有効です。</span><span class="sxs-lookup"><span data-stu-id="67038-1475">For *fractional_digits*, only the digit 0 is valid.</span></span>|
|<span data-ttu-id="67038-1476">*、*</span><span class="sxs-lookup"><span data-stu-id="67038-1476">*,*</span></span>|<span data-ttu-id="67038-1477">カルチャ固有のグループ区切り記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1477">A culture-specific group separator symbol.</span></span> <span data-ttu-id="67038-1478">`provider` によって指定されたカルチャの桁区切り記号は、`style` に <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> フラグが含まれている場合に `value` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1478">The group separator symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="67038-1479">*」を参照してください。*</span><span class="sxs-lookup"><span data-stu-id="67038-1479">*.*</span></span>|<span data-ttu-id="67038-1480">カルチャ固有の小数点の記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1480">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="67038-1481">`provider` によって指定されたカルチャの小数点記号は、`style` に <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> フラグが含まれている場合に `value` で使用できます。</span><span class="sxs-lookup"><span data-stu-id="67038-1481">The decimal point symbol of the culture designated by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="67038-1482">解析操作が成功するためには、数字0のみが小数点の数字として表示されます。*fractional_digits*に他の数字が含まれている場合は、<xref:System.FormatException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="67038-1482">Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.</span></span>|
|<span data-ttu-id="67038-1483">E</span><span class="sxs-lookup"><span data-stu-id="67038-1483">E</span></span>|<span data-ttu-id="67038-1484">"E" または "E" 文字。値が指数 (科学的) 表記で表されることを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1484">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="67038-1485">`value` パラメーターは、`style` に <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> フラグが含まれている場合に指数表記で数値を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1485">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="67038-1486">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="67038-1486">*hexdigits*</span></span>|<span data-ttu-id="67038-1487">0から f、または0から F までの16進数のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="67038-1487">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|

> [!NOTE]
> <span data-ttu-id="67038-1488">`s` 内の終端の NUL (U + 0000) 文字は、`style` 引数の値に関係なく、解析操作によって無視されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1488">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

<span data-ttu-id="67038-1489">数字のみを含む `value` (<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> スタイルに対応) は、常に正常に解析されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1489">A `value` with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="67038-1490">残りの <xref:System.Globalization.NumberStyles> メンバーのほとんどは、`value`に存在する必要があるが必須ではない要素を制御します。</span><span class="sxs-lookup"><span data-stu-id="67038-1490">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in `value`.</span></span> <span data-ttu-id="67038-1491">次の表は、個々の <xref:System.Globalization.NumberStyles> メンバーが `value`に存在する可能性のある要素にどのように影響するかを示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-1491">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>

|<span data-ttu-id="67038-1492">NumberStyles 値</span><span class="sxs-lookup"><span data-stu-id="67038-1492">NumberStyles value</span></span>|<span data-ttu-id="67038-1493">数字に加えて許容される要素</span><span class="sxs-lookup"><span data-stu-id="67038-1493">Elements permitted in value in addition to digits</span></span>|
|------------------------|-------------------------------------------------------|
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="67038-1494">*Digits*要素のみ。</span><span class="sxs-lookup"><span data-stu-id="67038-1494">The *digits* element only.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="67038-1495">小数点 (.) と*小数部の桁*の要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1495">The decimal point (.) and *fractional-digits* elements.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="67038-1496">指数表記を示す "e" または "E" 文字。</span><span class="sxs-lookup"><span data-stu-id="67038-1496">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="67038-1497">*exponential_digits*と共に使用します。</span><span class="sxs-lookup"><span data-stu-id="67038-1497">along with *exponential_digits*.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="67038-1498">`value`の先頭にある*ws*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1498">The *ws* element at the start of `value`.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="67038-1499">`value`の末尾の*ws*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1499">The *ws* element at the end of `value`.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="67038-1500">`value`の先頭にある*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1500">The *sign* element at the start of `value`.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="67038-1501">`value`の末尾の*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1501">The *sign* element at the end of `value`.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="67038-1502">数値を囲むかっこ形式の*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1502">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="67038-1503">桁区切り記号 (,) 要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1503">The group separator (,) element.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="67038-1504">Currency ($) 要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1504">The currency ($) element.</span></span>|
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="67038-1505">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1505">All elements.</span></span> <span data-ttu-id="67038-1506">ただし、`value` は、16進数または指数表記の数値を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-1506">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="67038-1507">`value`の先頭または末尾にある*ws*要素、`value`の先頭に*符号*、小数点 (.) 記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1507">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="67038-1508">`value` パラメーターでは、指数表記を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1508">The `value` parameter can also use exponential notation.</span></span>|
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="67038-1509">`ws`、`sign`、桁区切り記号 (,)、および小数点 (.) 要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1509">The `ws`, `sign`, group separator (,), and decimal point (.) elements.</span></span>|
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="67038-1510">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1510">All elements.</span></span> <span data-ttu-id="67038-1511">ただし、`value` は16進数を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-1511">However, `value` cannot represent a hexadecimal number.</span></span>|

<span data-ttu-id="67038-1512">`value`に特定のスタイル要素が存在することを必要としない一方の <xref:System.Globalization.NumberStyles> 値とは異なり、<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> スタイル値は、`value` 内の個々の数字が常に16進文字として解釈されることを意味します。</span><span class="sxs-lookup"><span data-stu-id="67038-1512">Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for but do not require the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters.</span></span> <span data-ttu-id="67038-1513">有効な16進文字は、0-9、A-F、a-f です。</span><span class="sxs-lookup"><span data-stu-id="67038-1513">Valid hexadecimal characters are 0-9, A-F, and a-f.</span></span> <span data-ttu-id="67038-1514">`style` パラメーターと組み合わせることができるフラグは、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> と <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>だけです。</span><span class="sxs-lookup"><span data-stu-id="67038-1514">The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67038-1515">(<xref:System.Globalization.NumberStyles> 列挙体には、2つの空白フラグを含む複合数値スタイル <xref:System.Globalization.NumberStyles.HexNumber>が含まれています)。</span><span class="sxs-lookup"><span data-stu-id="67038-1515">(The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>


<span data-ttu-id="67038-1516">`provider` パラメーターは、<xref:System.IFormatProvider> の実装です。</span><span class="sxs-lookup"><span data-stu-id="67038-1516">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="67038-1517"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、`value`の書式に関するカルチャ固有の情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1517">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="67038-1518">通常、`provider` は次のいずれかになります。</span><span class="sxs-lookup"><span data-stu-id="67038-1518">Typically, `provider` can be any one of the following:</span></span>

-   <span data-ttu-id="67038-1519">数値の書式設定情報を提供するカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1519">A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information.</span></span> <span data-ttu-id="67038-1520"><xref:System.Globalization.CultureInfo.GetFormat%2A> メソッドは、数値の書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1520">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span>

-   <span data-ttu-id="67038-1521">書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1521">A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span> <span data-ttu-id="67038-1522">(<xref:System.Globalization.NumberFormatInfo.GetFormat%2A> の実装では、それ自体が返されます)。</span><span class="sxs-lookup"><span data-stu-id="67038-1522">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>

-   <span data-ttu-id="67038-1523"><xref:System.IFormatProvider> を実装し、<xref:System.Globalization.NumberFormatInfo.GetFormat%2A> メソッドを使用して、書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトをインスタンス化して返すカスタムオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1523">A custom object that implements <xref:System.IFormatProvider> and uses the <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> method to instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>

<span data-ttu-id="67038-1524">`provider` が `null`場合は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトが使用されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1524">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="67038-1525"><paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="67038-1525"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="67038-1526">または</span><span class="sxs-lookup"><span data-stu-id="67038-1526">-or-</span></span> 
 <span data-ttu-id="67038-1527"><paramref name="style" /> には、別の値と共に <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> または <see cref="F:System.Globalization.NumberStyles.HexNumber" /> フラグが含まれます。</span><span class="sxs-lookup"><span data-stu-id="67038-1527"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="67038-1528"><paramref name="value" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="67038-1528"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="67038-1529"><paramref name="value" /> は、<paramref name="style" /> によって指定された入力パターンに従っていません。</span><span class="sxs-lookup"><span data-stu-id="67038-1529"><paramref name="value" /> does not comply with the input pattern specified by <paramref name="style" />.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (value As String, style As NumberStyles, provider As IFormatProvider) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Parse(System::String ^ value, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles * IFormatProvider -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Parse (value, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1530">変換する数値を含んだ文字列。</span><span class="sxs-lookup"><span data-stu-id="67038-1530">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="67038-1531"><paramref name="value" /> に許可されている書式を指定する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="67038-1531">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value" />.</span></span></param>
        <param name="provider"><span data-ttu-id="67038-1532"><paramref name="value" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1532">An object that provides culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="67038-1533">指定したスタイルおよびカルチャ固有の書式の数値の文字列形式を、それと等価の <see cref="T:System.Numerics.BigInteger" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="67038-1533">Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</span></span></summary>
        <returns><span data-ttu-id="67038-1534"><paramref name="value" /> パラメーターで指定されている数値と等価の値。</span><span class="sxs-lookup"><span data-stu-id="67038-1534">A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1535">`style` パラメーターは、解析操作を成功させるために、`value` パラメーターで使用できるスタイル要素 (空白、正または負の記号、桁区切り記号、桁区切り記号、小数点の記号など) を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1535">The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="67038-1536">`styles` は、<xref:System.Globalization.NumberStyles> 列挙のビットフラグの組み合わせである必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1536">`styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="67038-1537">`style` パラメーターを使用すると、`value` に16進値の文字列形式が含まれている場合、`value` で表される数値システム (10 進数または16進数) が実行時にのみ認識される場合、または `value`で空白または符号を許可しない場合に、このメソッドのオーバーロードが役立ちます。</span><span class="sxs-lookup"><span data-stu-id="67038-1537">The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.</span></span>  
  
 <span data-ttu-id="67038-1538">`style`の値に応じて、`value` パラメーターには次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1538">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="67038-1539">[*ws*][*$*][*sign*][*数字*,]*数字*[*. Fractional_digits*] [E [*sign*]*exponential_digits*] [*ws*]</span><span class="sxs-lookup"><span data-stu-id="67038-1539">[*ws*][*$*][*sign*][*digits*,]*digits*[*.fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="67038-1540">`style` に <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>が含まれている場合、`value` パラメーターには次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1540">If `style` includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="67038-1541">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="67038-1541">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="67038-1542">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="67038-1542">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="67038-1543">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="67038-1543">The following table describes each element.</span></span>  
  
|<span data-ttu-id="67038-1544">要素</span><span class="sxs-lookup"><span data-stu-id="67038-1544">Element</span></span>|<span data-ttu-id="67038-1545">説明</span><span class="sxs-lookup"><span data-stu-id="67038-1545">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="67038-1546">*ws*</span><span class="sxs-lookup"><span data-stu-id="67038-1546">*ws*</span></span>|<span data-ttu-id="67038-1547">省略可能な空白。</span><span class="sxs-lookup"><span data-stu-id="67038-1547">Optional white space.</span></span> <span data-ttu-id="67038-1548">`style` に <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> フラグが含まれている場合、`value` の先頭に空白が表示され、`style` に <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> フラグが含まれている場合は `value` の最後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1548">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="67038-1549">カルチャ固有の通貨記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1549">A culture-specific currency symbol.</span></span> <span data-ttu-id="67038-1550">文字列内での位置は、`provider` パラメーターによって示されるカルチャの <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> および <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> プロパティによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1550">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the culture indicated by the `provider` parameter.</span></span> <span data-ttu-id="67038-1551">現在のカルチャの通貨記号は、`style` に <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> フラグが含まれている場合に `value` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1551">The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="67038-1552">*sign*</span><span class="sxs-lookup"><span data-stu-id="67038-1552">*sign*</span></span>|<span data-ttu-id="67038-1553">省略可能な符号。</span><span class="sxs-lookup"><span data-stu-id="67038-1553">An optional sign.</span></span> <span data-ttu-id="67038-1554"><xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> フラグが `style` に含まれている場合、`value` の先頭に符号が表示されます。また、`style` に <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> フラグが含まれている場合は、`value` の最後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1554">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="67038-1555"><xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> フラグが `style` 含まれている場合は、`value` でかっこを使用して負の値を示すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1555">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="67038-1556">*数字*</span><span class="sxs-lookup"><span data-stu-id="67038-1556">*digits*</span></span><br /><br /> <span data-ttu-id="67038-1557">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="67038-1557">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="67038-1558">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="67038-1558">*exponential_digits*</span></span>|<span data-ttu-id="67038-1559">0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="67038-1559">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="67038-1560">*Fractional_digits*の場合は、数字0のみが有効です。</span><span class="sxs-lookup"><span data-stu-id="67038-1560">For *fractional_digits*, only the digit 0 is valid.</span></span>|  
|<span data-ttu-id="67038-1561">*、*</span><span class="sxs-lookup"><span data-stu-id="67038-1561">*,*</span></span>|<span data-ttu-id="67038-1562">カルチャ固有のグループ区切り記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1562">A culture-specific group separator symbol.</span></span> <span data-ttu-id="67038-1563">`provider` によって指定されたカルチャの桁区切り記号は、`style` に <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> フラグが含まれている場合に `value` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1563">The group separator symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="67038-1564">*」を参照してください。*</span><span class="sxs-lookup"><span data-stu-id="67038-1564">*.*</span></span>|<span data-ttu-id="67038-1565">カルチャ固有の小数点の記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1565">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="67038-1566">`provider` によって指定されたカルチャの小数点記号は、`style` に <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> フラグが含まれている場合に `value` で使用できます。</span><span class="sxs-lookup"><span data-stu-id="67038-1566">The decimal point symbol of the culture designated by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="67038-1567">解析操作が成功するためには、数字0のみが小数点の数字として表示されます。*fractional_digits*に他の数字が含まれている場合は、<xref:System.FormatException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="67038-1567">Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.</span></span>|  
|<span data-ttu-id="67038-1568">E</span><span class="sxs-lookup"><span data-stu-id="67038-1568">E</span></span>|<span data-ttu-id="67038-1569">"E" または "E" 文字。値が指数 (科学的) 表記で表されることを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1569">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="67038-1570">`value` パラメーターは、`style` に <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> フラグが含まれている場合に指数表記で数値を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1570">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="67038-1571">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="67038-1571">*hexdigits*</span></span>|<span data-ttu-id="67038-1572">0から f、または0から F までの16進数のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="67038-1572">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="67038-1573">`s` 内の終端の NUL (U + 0000) 文字は、`style` 引数の値に関係なく、解析操作によって無視されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1573">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="67038-1574">数字のみを含む文字列 (<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> スタイルに対応) は、常に正常に解析されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1574">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="67038-1575">残りの <xref:System.Globalization.NumberStyles> メンバーのほとんどは、入力文字列に存在する必要があるが必須ではない要素を制御します。</span><span class="sxs-lookup"><span data-stu-id="67038-1575">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="67038-1576">次の表は、個々の <xref:System.Globalization.NumberStyles> メンバーが `value`に存在する可能性のある要素にどのように影響するかを示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-1576">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="67038-1577">NumberStyles 値</span><span class="sxs-lookup"><span data-stu-id="67038-1577">NumberStyles value</span></span>|<span data-ttu-id="67038-1578">数字に加えて許容される要素</span><span class="sxs-lookup"><span data-stu-id="67038-1578">Elements permitted in value in addition to digits</span></span>|  
|------------------------|-------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="67038-1579">*Digits*要素のみ。</span><span class="sxs-lookup"><span data-stu-id="67038-1579">The *digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="67038-1580">小数点 (.) と*小数部の桁*の要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1580">The decimal point (.) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="67038-1581">指数表記を示す "e" または "E" 文字。</span><span class="sxs-lookup"><span data-stu-id="67038-1581">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="67038-1582">*exponential_digits*と共に使用します。</span><span class="sxs-lookup"><span data-stu-id="67038-1582">along with *exponential_digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="67038-1583">`value`の先頭にある*ws*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1583">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="67038-1584">`value`の末尾の*ws*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1584">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="67038-1585">`value`の先頭にある*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1585">The *sign* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="67038-1586">`value`の末尾の*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1586">The *sign* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="67038-1587">数値を囲むかっこ形式の*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1587">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="67038-1588">桁区切り記号 (,) 要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1588">The group separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="67038-1589">Currency ($) 要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1589">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="67038-1590">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1590">All elements.</span></span> <span data-ttu-id="67038-1591">ただし、`value` は、16進数または指数表記の数値を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-1591">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="67038-1592">`value`の先頭または末尾にある*ws*要素、`value`の先頭に*符号*、小数点 (.) 記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1592">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="67038-1593">`value` パラメーターでは、指数表記を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1593">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="67038-1594">`ws`、`sign`、桁区切り記号 (,)、および小数点 (.) 要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1594">The `ws`, `sign`, group separator (,), and decimal point (.) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="67038-1595">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1595">All elements.</span></span> <span data-ttu-id="67038-1596">ただし、`value` は16進数を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-1596">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="67038-1597"><xref:System.Numerics.BigInteger.Parse%2A> メソッドを使用して、<xref:System.Numerics.BigInteger.ToString%2A> メソッドによって出力された <xref:System.Numerics.BigInteger> 値の文字列形式をラウンドトリップする場合は、"R" 書式指定子と共に <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> メソッドを使用して、<xref:System.Numerics.BigInteger> 値の文字列形式を生成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1597">If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="67038-1598">それ以外の場合、<xref:System.Numerics.BigInteger> の文字列形式では、元の値の50の最上位の桁のみが保持され、<xref:System.Numerics.BigInteger.Parse%2A> メソッドを使用して <xref:System.Numerics.BigInteger> 値を復元すると、データが失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1598">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="67038-1599">`value`に特定のスタイル要素が存在することを必要としない一方の <xref:System.Globalization.NumberStyles> 値とは異なり、<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> スタイル値は、`value` 内の個々の数字が常に16進文字として解釈されることを意味します。</span><span class="sxs-lookup"><span data-stu-id="67038-1599">Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for but do not require the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters.</span></span> <span data-ttu-id="67038-1600">有効な16進文字は、0-9、A-F、a-f です。</span><span class="sxs-lookup"><span data-stu-id="67038-1600">Valid hexadecimal characters are 0-9, A-F, and a-f.</span></span> <span data-ttu-id="67038-1601">`style` パラメーターと組み合わせることができるフラグは、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> と <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>だけです。</span><span class="sxs-lookup"><span data-stu-id="67038-1601">The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67038-1602">(<xref:System.Globalization.NumberStyles> 列挙体には、2つの空白フラグを含む複合数値スタイル <xref:System.Globalization.NumberStyles.HexNumber>が含まれています)。</span><span class="sxs-lookup"><span data-stu-id="67038-1602">(The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67038-1603">`value` が16進数の文字列表現である場合、16進数と区別する装飾 (`0x` や `&h`など) を前に付けることはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-1603">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="67038-1604">これにより、変換は失敗します。</span><span class="sxs-lookup"><span data-stu-id="67038-1604">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="67038-1605">`value` が16進数の文字列の場合、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> メソッドは `value` を2の補数表現を使用して格納された負の数値として解釈します (最初の2桁の16進数が `0x80`以上の場合)。</span><span class="sxs-lookup"><span data-stu-id="67038-1605">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="67038-1606">つまり、メソッドは、`value` の最初のバイトの最上位ビットを符号ビットとして解釈します。</span><span class="sxs-lookup"><span data-stu-id="67038-1606">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="67038-1607">16進数文字列が正の数値として正しく解釈されるようにするには、`value` の最初の桁の値が0である必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1607">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="67038-1608">たとえば、メソッドは `0x80` を負の値として解釈しますが、`0x080` または `0x0080` を正の値として解釈します。</span><span class="sxs-lookup"><span data-stu-id="67038-1608">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="67038-1609">次の例は、負の値と正の値を表す16進文字列の違いを示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-1609">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  
  
 <span data-ttu-id="67038-1610">`provider` パラメーターは、<xref:System.IFormatProvider> の実装です。</span><span class="sxs-lookup"><span data-stu-id="67038-1610">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="67038-1611"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、`value`の書式に関するカルチャ固有の情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1611">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="67038-1612">通常、`provider` は次のいずれかになります。</span><span class="sxs-lookup"><span data-stu-id="67038-1612">Typically, `provider` can be any one of the following:</span></span>  
  
-   <span data-ttu-id="67038-1613">数値の書式設定情報を提供するカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1613">A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information.</span></span> <span data-ttu-id="67038-1614"><xref:System.Globalization.CultureInfo.GetFormat%2A> メソッドは、数値の書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1614">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span>  
  
-   <span data-ttu-id="67038-1615">書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1615">A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span> <span data-ttu-id="67038-1616">(<xref:System.Globalization.NumberFormatInfo.GetFormat%2A> の実装では、それ自体が返されます)。</span><span class="sxs-lookup"><span data-stu-id="67038-1616">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="67038-1617"><xref:System.IFormatProvider> を実装し、<xref:System.Globalization.NumberFormatInfo.GetFormat%2A> メソッドを使用して、書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトをインスタンス化して返すカスタムオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1617">A custom object that implements <xref:System.IFormatProvider> and uses the <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> method to instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="67038-1618">`provider` が `null`場合は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトが使用されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1618">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-1619">次の例では、`style` パラメーターと `provider` パラメーターに対して、さまざまな値の組み合わせを使用して、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> メソッドに対して複数の呼び出しを行います。</span><span class="sxs-lookup"><span data-stu-id="67038-1619">The following example makes several calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method using various combinations of values for the `style` and `provider` parameters.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#2)]  
  
 <span data-ttu-id="67038-1620"><xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> メソッドに対する個々の呼び出しの数は、次の `BigIntegerFormatProvider` クラスのインスタンスに渡されます。これにより、チルダ (~) が負の符号として定義されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1620">A number of the individual calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method pass an instance of the following `BigIntegerFormatProvider` class, which defines a tilde (~) as the negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="67038-1621"><paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="67038-1621"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="67038-1622">または</span><span class="sxs-lookup"><span data-stu-id="67038-1622">-or-</span></span> 
 <span data-ttu-id="67038-1623"><paramref name="style" /> には、別の値と共に <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> または <see cref="F:System.Globalization.NumberStyles.HexNumber" /> フラグが含まれます。</span><span class="sxs-lookup"><span data-stu-id="67038-1623"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="67038-1624"><paramref name="value" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="67038-1624"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="67038-1625"><paramref name="value" /> は、<paramref name="style" /> によって指定された入力パターンに従っていません。</span><span class="sxs-lookup"><span data-stu-id="67038-1625"><paramref name="value" /> does not comply with the input pattern specified by <paramref name="style" />.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Pow (System.Numerics.BigInteger value, int exponent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Pow(valuetype System.Numerics.BigInteger value, int32 exponent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (value As BigInteger, exponent As Integer) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Pow(System::Numerics::BigInteger value, int exponent);" />
      <MemberSignature Language="F#" Value="static member Pow : System.Numerics.BigInteger * int -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Pow (value, exponent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="exponent" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1626">指数 <paramref name="exponent" /> で累乗する数値。</span><span class="sxs-lookup"><span data-stu-id="67038-1626">The number to raise to the <paramref name="exponent" /> power.</span></span></param>
        <param name="exponent"><span data-ttu-id="67038-1627"><paramref name="value" /> の指数。</span><span class="sxs-lookup"><span data-stu-id="67038-1627">The exponent to raise <paramref name="value" /> by.</span></span></param>
        <summary><span data-ttu-id="67038-1628">指定された値を指数として <see cref="T:System.Numerics.BigInteger" /> 値を累乗します。</span><span class="sxs-lookup"><span data-stu-id="67038-1628">Raises a <see cref="T:System.Numerics.BigInteger" /> value to the power of a specified value.</span></span></summary>
        <returns><span data-ttu-id="67038-1629"><paramref name="value" /> を <paramref name="exponent" /> で累乗した結果。</span><span class="sxs-lookup"><span data-stu-id="67038-1629">The result of raising <paramref name="value" /> to the <paramref name="exponent" /> power.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1630"><xref:System.Numerics.BigInteger.Pow%2A> メソッドは、指数パラメーターの値が0の場合は1を返し、`value` と `exponent` の両方のパラメーターの値が0の場合はを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1630">The <xref:System.Numerics.BigInteger.Pow%2A> method returns 1 if the value of the exponent parameter is 0, or if the values of both the `value` and `exponent` parameters are 0.</span></span> <span data-ttu-id="67038-1631">`exponent` が1の場合、<xref:System.Numerics.BigInteger.Pow%2A> メソッドは `value`を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1631">If `exponent` is 1, the <xref:System.Numerics.BigInteger.Pow%2A> method returns `value`.</span></span> <span data-ttu-id="67038-1632">`value` が負の場合、メソッドは負の結果を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1632">If `value` is negative, the method returns a negative result.</span></span>  
  
 <span data-ttu-id="67038-1633">このメソッドは、プリミティブな数値型の <xref:System.Math.Pow%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="67038-1633">This method corresponds to the <xref:System.Math.Pow%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-1634">次の例では、<xref:System.Numerics.BigInteger> 値と指数を使用して、0 ~ 10 の値の範囲を累乗しています。</span><span class="sxs-lookup"><span data-stu-id="67038-1634">The following example illustrates exponentiation using a <xref:System.Numerics.BigInteger> value and an exponent whose value ranges from 0 to 10.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.Class#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#32)]
 [!code-vb[System.Numeric.BigInteger.Class#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="67038-1635"><paramref name="exponent" /> は負の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-1635"><paramref name="exponent" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Remainder">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Remainder (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Remainder(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remainder (dividend As BigInteger, divisor As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Remainder(System::Numerics::BigInteger dividend, System::Numerics::BigInteger divisor);" />
      <MemberSignature Language="F#" Value="static member Remainder : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Remainder (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="67038-1636">被除数。</span><span class="sxs-lookup"><span data-stu-id="67038-1636">The value to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="67038-1637">除数。</span><span class="sxs-lookup"><span data-stu-id="67038-1637">The value to divide by.</span></span></param>
        <summary><span data-ttu-id="67038-1638">2 つの <see cref="T:System.Numerics.BigInteger" /> 値に対する整数除算を実行し、その剰余を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1638">Performs integer division on two <see cref="T:System.Numerics.BigInteger" /> values and returns the remainder.</span></span></summary>
        <returns><span data-ttu-id="67038-1639"><paramref name="dividend" /> を <paramref name="divisor" /> で除算した結果生じた剰余。</span><span class="sxs-lookup"><span data-stu-id="67038-1639">The remainder after dividing <paramref name="dividend" /> by <paramref name="divisor" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1640">剰余の符号は `dividend` パラメーターの符号です。</span><span class="sxs-lookup"><span data-stu-id="67038-1640">The sign of the remainder is the sign of the `dividend` parameter.</span></span>  
  
 <span data-ttu-id="67038-1641"><xref:System.Numerics.BigInteger.Remainder%2A> メソッドは、カスタム演算子をサポートしない言語に対して実装されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1641">The <xref:System.Numerics.BigInteger.Remainder%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="67038-1642">その動作は、剰余演算子を使用した除算と同じです。</span><span class="sxs-lookup"><span data-stu-id="67038-1642">Its behavior is identical to division using the modulus operator.</span></span>  
  
 <span data-ttu-id="67038-1643">必要に応じて、メソッドは、剰余演算を実行する前に、他の整数型の暗黙的な変換を <xref:System.Numerics.BigInteger> オブジェクトに対して自動的に実行します。</span><span class="sxs-lookup"><span data-stu-id="67038-1643">If necessary, the method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects before it performs the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-1644">次の例では、<xref:System.Numerics.BigInteger.DivRem%2A> メソッドの剰余と、<xref:System.Numerics.BigInteger.Remainder%2A> メソッドによって返される剰余を比較して、2つのメソッドが同一の剰余を計算することを確立しています。</span><span class="sxs-lookup"><span data-stu-id="67038-1644">The following example compares the remainder from the <xref:System.Numerics.BigInteger.DivRem%2A> method with the remainder returned by the <xref:System.Numerics.BigInteger.Remainder%2A> method to establish that the two methods calculate identical remainders.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.Remainder#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/cs/Remainder1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Remainder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/vb/Remainder1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException"><span data-ttu-id="67038-1645"><paramref name="divisor" /> が 0 (ゼロ) です。</span><span class="sxs-lookup"><span data-stu-id="67038-1645"><paramref name="divisor" /> is 0 (zero).</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
        <altmember cref="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public int Sign { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Sign" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.Sign" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Sign As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Sign { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Sign : int" Usage="System.Numerics.BigInteger.Sign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67038-1646">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの符号 (負、正、または 0) を示す数値を取得します。</span><span class="sxs-lookup"><span data-stu-id="67038-1646">Gets a number that indicates the sign (negative, positive, or zero) of the current <see cref="T:System.Numerics.BigInteger" /> object.</span></span></summary>
        <value><span data-ttu-id="67038-1647"><see cref="T:System.Numerics.BigInteger" /> オブジェクトの符号を示す数値 (次の表を参照)。</span><span class="sxs-lookup"><span data-stu-id="67038-1647">A number that indicates the sign of the <see cref="T:System.Numerics.BigInteger" /> object, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="67038-1648">Number</span><span class="sxs-lookup"><span data-stu-id="67038-1648">Number</span></span> 
 </term><description> <span data-ttu-id="67038-1649">説明</span><span class="sxs-lookup"><span data-stu-id="67038-1649">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="67038-1650">-1</span><span class="sxs-lookup"><span data-stu-id="67038-1650">-1</span></span> 
 </term><description> <span data-ttu-id="67038-1651">このオブジェクトの値は負です。</span><span class="sxs-lookup"><span data-stu-id="67038-1651">The value of this object is negative.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="67038-1652">0</span><span class="sxs-lookup"><span data-stu-id="67038-1652">0</span></span> 
 </term><description> <span data-ttu-id="67038-1653">このオブジェクトの値は 0 (ゼロ) です。</span><span class="sxs-lookup"><span data-stu-id="67038-1653">The value of this object is 0 (zero).</span></span>  
  
 </description></item><item><term> <span data-ttu-id="67038-1654">1</span><span class="sxs-lookup"><span data-stu-id="67038-1654">1</span></span> 
 </term><description> <span data-ttu-id="67038-1655">このオブジェクトの値は正です。</span><span class="sxs-lookup"><span data-stu-id="67038-1655">The value of this object is positive.</span></span>  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1656"><xref:System.Numerics.BigInteger.Sign%2A> プロパティは、プリミティブ数値型の <xref:System.Math.Sign%2A?displayProperty=nameWithType> メソッドに相当します。</span><span class="sxs-lookup"><span data-stu-id="67038-1656">The <xref:System.Numerics.BigInteger.Sign%2A> property is equivalent to the <xref:System.Math.Sign%2A?displayProperty=nameWithType> method for the primitive numeric types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Subtract (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Subtract(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As BigInteger, right As BigInteger) As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::BigInteger Subtract(System::Numerics::BigInteger left, System::Numerics::BigInteger right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Numerics.BigInteger * System.Numerics.BigInteger -&gt; System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="67038-1657">減算される値 (被減数)。</span><span class="sxs-lookup"><span data-stu-id="67038-1657">The value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="67038-1658">減算する値 (減数)。</span><span class="sxs-lookup"><span data-stu-id="67038-1658">The value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="67038-1659">ある <see cref="T:System.Numerics.BigInteger" /> 値を別の値から減算し、その結果を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1659">Subtracts one <see cref="T:System.Numerics.BigInteger" /> value from another and returns the result.</span></span></summary>
        <returns><span data-ttu-id="67038-1660"><paramref name="right" /> から <paramref name="left" /> を減算した結果。</span><span class="sxs-lookup"><span data-stu-id="67038-1660">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1661">カスタム演算子をサポートしない言語では、<xref:System.Numerics.BigInteger.Subtract%2A> メソッドを使用して <xref:System.Numerics.BigInteger> 値を使用して減算を実行できます。</span><span class="sxs-lookup"><span data-stu-id="67038-1661">Languages that do not support custom operators can use the <xref:System.Numerics.BigInteger.Subtract%2A> method to perform subtraction using <xref:System.Numerics.BigInteger> values.</span></span>  
  
 <span data-ttu-id="67038-1662"><xref:System.Numerics.BigInteger.Subtract%2A> メソッドは、次の例に示すように、減算の結果と異なる値を割り当てることによって <xref:System.Numerics.BigInteger> 変数をインスタンス化するときに、減算演算子の代替として便利です。</span><span class="sxs-lookup"><span data-stu-id="67038-1662">The <xref:System.Numerics.BigInteger.Subtract%2A> method is a useful substitute for the subtraction operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it the difference that results from subtraction, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberSignature Language="F#" Value="abstract member System.IComparable.CompareTo : obj -&gt; int&#xA;override this.System.IComparable.CompareTo : obj -&gt; int" Usage="bigInteger.System.IComparable.CompareTo obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="67038-1663">比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1663">The object to compare.</span></span></param>
        <summary><span data-ttu-id="67038-1664">このインスタンスと指定したオブジェクトを比較し、このインスタンスの値が指定したオブジェクトの値よりも小さいか、同じか、または大きいかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1664">Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span></span></summary>
        <returns><span data-ttu-id="67038-1665">現在のインスタンスと <paramref name="obj" /> パラメーターの関係を示す符号付き整数 (次の表を参照)。</span><span class="sxs-lookup"><span data-stu-id="67038-1665">A signed integer that indicates the relationship of the current instance to the <paramref name="obj" /> parameter, as shown in the following table.</span></span>
          <list type="table"><listheader><term> <span data-ttu-id="67038-1666">戻り値</span><span class="sxs-lookup"><span data-stu-id="67038-1666">Return value</span></span></term><description> <span data-ttu-id="67038-1667">説明</span><span class="sxs-lookup"><span data-stu-id="67038-1667">Description</span></span></description></listheader><item><term> <span data-ttu-id="67038-1668">ゼロより小さい</span><span class="sxs-lookup"><span data-stu-id="67038-1668">Less than zero</span></span></term><description> <span data-ttu-id="67038-1669">現在のインスタンスは <paramref name="obj" /> より小さい。</span><span class="sxs-lookup"><span data-stu-id="67038-1669">The current instance is less than <paramref name="obj" />.</span></span></description></item><item><term> <span data-ttu-id="67038-1670">ゼロ</span><span class="sxs-lookup"><span data-stu-id="67038-1670">Zero</span></span></term><description> <span data-ttu-id="67038-1671">現在のインスタンスと <paramref name="obj" /> は等しい。</span><span class="sxs-lookup"><span data-stu-id="67038-1671">The current instance equals <paramref name="obj" />.</span></span></description></item><item><term> <span data-ttu-id="67038-1672">ゼロより大きい</span><span class="sxs-lookup"><span data-stu-id="67038-1672">Greater than zero</span></span></term><description> <span data-ttu-id="67038-1673">現在のインスタンスは <paramref name="obj" /> より大きい、または <paramref name="obj" /> パラメーターが <see langword="null" /> である。</span><span class="sxs-lookup"><span data-stu-id="67038-1673">The current instance is greater than <paramref name="obj" />, or the <paramref name="obj" /> parameter is <see langword="null" />.</span></span></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="67038-1674">`obj` パラメーターは、次のいずれかである必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1674">The `obj` parameter must be one of the following:</span></span>

-   <span data-ttu-id="67038-1675">実行時の型が <xref:System.Numerics.BigInteger>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1675">An object whose run-time type is <xref:System.Numerics.BigInteger>.</span></span>

-   <span data-ttu-id="67038-1676">値が `null`<xref:System.Object> 変数。</span><span class="sxs-lookup"><span data-stu-id="67038-1676">An <xref:System.Object> variable whose value is `null`.</span></span> <span data-ttu-id="67038-1677">`obj` パラメーターの値が `null`の場合、メソッドは1を返します。これは、現在のインスタンスが `obj`より大きいことを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1677">If the value of the `obj` parameter is `null`, the method returns 1, which indicates that the current instance is greater than `obj`.</span></span>

## Examples

<span data-ttu-id="67038-1678">次の例では、<xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> メソッドを呼び出して、<xref:System.Numerics.BigInteger> 値とオブジェクト配列の各要素を比較しています。</span><span class="sxs-lookup"><span data-stu-id="67038-1678">The following example calls the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method to compare a <xref:System.Numerics.BigInteger> value with each element in an object array:</span></span>

[!code-csharp[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#4)]
[!code-vb[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="67038-1679"><paramref name="obj" /> が <see cref="T:System.Numerics.BigInteger" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="67038-1679"><paramref name="obj" /> is not a <see cref="T:System.Numerics.BigInteger" />.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToByteArray">
      <MemberSignature Language="C#" Value="public byte[] ToByteArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToByteArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToByteArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToByteArray () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ToByteArray();" />
      <MemberSignature Language="F#" Value="member this.ToByteArray : unit -&gt; byte[]" Usage="bigInteger.ToByteArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67038-1680"><see cref="T:System.Numerics.BigInteger" /> 値をバイト配列に変換します。</span><span class="sxs-lookup"><span data-stu-id="67038-1680">Converts a <see cref="T:System.Numerics.BigInteger" /> value to a byte array.</span></span></summary>
        <returns><span data-ttu-id="67038-1681">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトをバイトの配列に変換した値。</span><span class="sxs-lookup"><span data-stu-id="67038-1681">The value of the current <see cref="T:System.Numerics.BigInteger" /> object converted to an array of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1682">このメソッドによって返される配列内の個々のバイトは、リトルエンディアン順に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1682">The individual bytes in the array returned by this method appear in little-endian order.</span></span> <span data-ttu-id="67038-1683">つまり、値の下位バイトが上位バイトの前に配置されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1683">That is, the lower-order bytes of the value precede the higher-order bytes.</span></span> <span data-ttu-id="67038-1684">配列の最初のバイトは、<xref:System.Numerics.BigInteger> 値の最初の8ビットを反映し、2番目のバイトは次の8ビットを反映します。</span><span class="sxs-lookup"><span data-stu-id="67038-1684">The first byte of the array reflects the first eight bits of the <xref:System.Numerics.BigInteger> value, the second byte reflects the next eight bits, and so on.</span></span> <span data-ttu-id="67038-1685">たとえば、値 1024 (0x0400) は、次の2バイトの配列として格納されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1685">For example, the value 1024, or 0x0400, is stored as the following array of two bytes:</span></span>  
  
|<span data-ttu-id="67038-1686">要素</span><span class="sxs-lookup"><span data-stu-id="67038-1686">Element</span></span>|<span data-ttu-id="67038-1687">バイト値</span><span class="sxs-lookup"><span data-stu-id="67038-1687">Byte value</span></span>|  
|-------------|----------------|  
|<span data-ttu-id="67038-1688">0</span><span class="sxs-lookup"><span data-stu-id="67038-1688">0</span></span>|<span data-ttu-id="67038-1689">0x00</span><span class="sxs-lookup"><span data-stu-id="67038-1689">0x00</span></span>|  
|<span data-ttu-id="67038-1690">1</span><span class="sxs-lookup"><span data-stu-id="67038-1690">1</span></span>|<span data-ttu-id="67038-1691">0x04</span><span class="sxs-lookup"><span data-stu-id="67038-1691">0x04</span></span>|  
  
 <span data-ttu-id="67038-1692">負の値は、最もコンパクトな形式の2つの補数表現を使用して配列に書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="67038-1692">Negative values are written to the array using two's complement representation in the most compact form possible.</span></span> <span data-ttu-id="67038-1693">たとえば、-1 は、`0xFF`、`0xFF` または `0xFF`、`0xFF`、`0xFF`、`0xFF`などの複数の要素を持つ配列としてではなく、値が `0xFF` である1バイトとして表されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1693">For example, -1 is represented as a single byte whose value is `0xFF` instead of as an array with multiple elements, such as `0xFF`, `0xFF` or `0xFF`, `0xFF`, `0xFF`, `0xFF`.</span></span>  
  
 <span data-ttu-id="67038-1694">2つの補数表現は、配列内の最後のバイトの最上位ビット (位置 <xref:System.Array.Length%2A?displayProperty=nameWithType>`- 1`) を符号ビットとして常に解釈するため、メソッドは、符号ビットが設定されていると解釈される可能性がある正の値を明確にするための値が0である余分な要素を含むバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1694">Because two's complement representation always interprets the highest-order bit of the last byte in the array (the byte at position <xref:System.Array.Length%2A?displayProperty=nameWithType>`- 1`) as the sign bit, the method returns a byte array with an extra element whose value is zero to disambiguate positive values that could otherwise be interpreted as having their sign bits set.</span></span> <span data-ttu-id="67038-1695">たとえば、値120または `0x78` は、`0x78`の1バイト配列として表されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1695">For example, the value 120 or `0x78` is represented as a single-byte array: `0x78`.</span></span> <span data-ttu-id="67038-1696">ただし、128、または `0x80`は、`0x80`、`0x00`の2バイト配列として表されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1696">However, 128, or `0x80`, is represented as a two-byte array: `0x80`, `0x00`.</span></span>  
  
 <span data-ttu-id="67038-1697"><xref:System.Numerics.BigInteger> 値をバイト配列に格納し、<xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> コンストラクターを使用してそれを復元することにより、その値をラウンドトリップできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1697">You can round-trip a <xref:System.Numerics.BigInteger> value by storing it to a byte array and then restoring it using the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="67038-1698">コードで値を復元する前に、このメソッドによって返される配列内の個々のバイトの値を変更する場合は、符号ビットを誤って変更しないようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1698">If your code modifies the value of individual bytes in the array returned by this method before it restores the value, you must make sure that you do not unintentionally change the sign bit.</span></span> <span data-ttu-id="67038-1699">たとえば、バイト配列の最後の要素の最上位ビットが設定されるように、変更によって正の値が増加した場合、値が0である新しいバイトを配列の末尾に追加できます。</span><span class="sxs-lookup"><span data-stu-id="67038-1699">For example, if your modifications increase a positive value so that the highest-order bit in the last element of the byte array becomes set, you can add a new byte whose value is zero to the end of the array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-1700">次の例は、<xref:System.Numerics.BigInteger> 値の一部がバイト配列でどのように表現されるかを示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-1700">The following example illustrates how some <xref:System.Numerics.BigInteger> values are represented in byte arrays.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToByteArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/cs/ToByteArray1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ToByteArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/vb/ToByteArray1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByteArray">
      <MemberSignature Language="C#" Value="public byte[] ToByteArray (bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToByteArray(bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToByteArray (Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false) As Byte()" />
      <MemberSignature Language="F#" Value="member this.ToByteArray : bool * bool -&gt; byte[]" Usage="bigInteger.ToByteArray (isUnsigned, isBigEndian)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isUnsigned" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="isBigEndian" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="isUnsigned"><span data-ttu-id="67038-1701">符号なしのエンコードを使用するには <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1701"><see langword="true" /> to use unsigned encoding; otherwise, <see langword="false" />.</span></span></param>
        <param name="isBigEndian"><span data-ttu-id="67038-1702">ビッグ エンディアンのバイト順にバイトを書き込む場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1702"><see langword="true" /> to write the bytes in a big-endian byte order; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="67038-1703">使用できる最も少ないバイト数を使用して、この <see cref="T:System.Numerics.BigInteger" /> の値をバイト配列として返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1703">Returns the value of this <see cref="T:System.Numerics.BigInteger" /> as a byte array using the fewest number of bytes possible.</span></span> <span data-ttu-id="67038-1704">値が 0 の場合は、その要素が 0x00 である 1 バイトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1704">If the value is zero, returns an array of one byte whose element is 0x00.</span></span></summary>
        <returns><span data-ttu-id="67038-1705">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトをバイトの配列に変換した値。</span><span class="sxs-lookup"><span data-stu-id="67038-1705">The value of the current <see cref="T:System.Numerics.BigInteger" /> object converted to an array of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="67038-1706">`33022` 整数値は、次の4つの異なる配列でエクスポートできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1706">The integer value `33022` can be exported in four different arrays:</span></span>

| <span data-ttu-id="67038-1707">Properties</span><span class="sxs-lookup"><span data-stu-id="67038-1707">Properties</span></span>                           | <span data-ttu-id="67038-1708">結果</span><span class="sxs-lookup"><span data-stu-id="67038-1708">Result</span></span>                          |
|--------------------------------------|---------------------------------|
| `isUnsigned: false, isBigEndian: false` | `new byte[] { 0xFE, 0x80, 0x00 }` |
| `isUnsigned: false, isBigEndian: true`  | `new byte[] { 0x00, 0x80, 0xFE }` |
| `isUnsigned: true, isBigEndian: false`  | `new byte[] { 0xFE, 0x80 } `      |
| `isUnsigned: true, isBigEndian: true`   | `new byte[] { 0x80, 0xFE }`       |

          ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="67038-1709"><paramref name="isUnsigned" /> が <see langword="true" /> で、<see cref="P:System.Numerics.BigInteger.Sign" /> が負の値の場合。</span><span class="sxs-lookup"><span data-stu-id="67038-1709">If <paramref name="isUnsigned" /> is <see langword="true" /> and <see cref="P:System.Numerics.BigInteger.Sign" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67038-1710">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの数値を等価の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="67038-1710">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="bigInteger.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67038-1711">現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの数値を等価の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="67038-1711">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="67038-1712">現在の <see cref="T:System.Numerics.BigInteger" /> 値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="67038-1712">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1713"><xref:System.Numerics.BigInteger.ToString> メソッドは、現在のカルチャの "R" またはラウンドトリップ形式で <xref:System.Numerics.BigInteger> 値の書式を設定します。</span><span class="sxs-lookup"><span data-stu-id="67038-1713">The <xref:System.Numerics.BigInteger.ToString> method formats a <xref:System.Numerics.BigInteger> value in the "R", or round-trip, format of the current culture.</span></span> <span data-ttu-id="67038-1714">別の形式またはカルチャを指定する場合は、次のように、<xref:System.Numerics.BigInteger.ToString%2A> メソッドの他のオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="67038-1714">If you want to specify a different format or culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="67038-1715">形式を使用するには</span><span class="sxs-lookup"><span data-stu-id="67038-1715">To use format</span></span>|<span data-ttu-id="67038-1716">カルチャの場合</span><span class="sxs-lookup"><span data-stu-id="67038-1716">For culture</span></span>|<span data-ttu-id="67038-1717">オーバーロードを使用する</span><span class="sxs-lookup"><span data-stu-id="67038-1717">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="67038-1718">ラウンドトリップ ("R") 形式</span><span class="sxs-lookup"><span data-stu-id="67038-1718">Round-trip ("R") format</span></span>|<span data-ttu-id="67038-1719">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="67038-1719">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%2A>|  
|<span data-ttu-id="67038-1720">特定の形式</span><span class="sxs-lookup"><span data-stu-id="67038-1720">A specific format</span></span>|<span data-ttu-id="67038-1721">既定の (現在の) カルチャ</span><span class="sxs-lookup"><span data-stu-id="67038-1721">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
|<span data-ttu-id="67038-1722">特定の形式</span><span class="sxs-lookup"><span data-stu-id="67038-1722">A specific format</span></span>|<span data-ttu-id="67038-1723">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="67038-1723">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="67038-1724"><xref:System.Numerics.BigInteger> 値の文字列形式には、負の符号と、先行ゼロを含まない0から9までの一連の数字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="67038-1724">The string representation of the <xref:System.Numerics.BigInteger> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros.</span></span> <span data-ttu-id="67038-1725">負の符号は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1725">The negative sign is defined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-1726">次の例では、既定の <xref:System.Numerics.BigInteger.ToString> メソッドを使用して <xref:System.Numerics.BigInteger> 値を表示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1726">The following example displays a <xref:System.Numerics.BigInteger> value by using the default <xref:System.Numerics.BigInteger.ToString> method.</span></span> <span data-ttu-id="67038-1727">また、一部の標準書式指定子を使用した結果として得られる <xref:System.Numerics.BigInteger> 値の文字列形式も表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1727">It also displays the string representations of the <xref:System.Numerics.BigInteger> value that results from using some standard format specifiers.</span></span> <span data-ttu-id="67038-1728">これらの例は、en-us カルチャの書式指定規則を使用して表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1728">The examples are displayed using the formatting conventions of the en-US culture.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="67038-1729">標準の数値書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="67038-1729">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="67038-1730">カスタム数値書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="67038-1730">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="bigInteger.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="67038-1731">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1731">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="67038-1732">指定されたカルチャ固有の書式情報を使用して、現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの数値をそれと等価の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="67038-1732">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="67038-1733">現在の <see cref="T:System.Numerics.BigInteger" /> 値の文字列形式を、<paramref name="provider" /> パラメーターで指定されている形式で表現した値。</span><span class="sxs-lookup"><span data-stu-id="67038-1733">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="provider" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1734"><xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> メソッドは、指定されたカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトを使用して、"R" またはラウンドトリップ形式の <xref:System.Numerics.BigInteger> 値を書式設定します。</span><span class="sxs-lookup"><span data-stu-id="67038-1734">The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in the "R", or round-trip, format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture.</span></span> <span data-ttu-id="67038-1735">別の形式または現在のカルチャを指定する場合は、次のように <xref:System.Numerics.BigInteger.ToString%2A> メソッドの他のオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="67038-1735">If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="67038-1736">形式を使用するには</span><span class="sxs-lookup"><span data-stu-id="67038-1736">To use format</span></span>|<span data-ttu-id="67038-1737">カルチャの場合</span><span class="sxs-lookup"><span data-stu-id="67038-1737">For culture</span></span>|<span data-ttu-id="67038-1738">オーバーロードを使用する</span><span class="sxs-lookup"><span data-stu-id="67038-1738">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="67038-1739">ラウンドトリップ ("R") 形式</span><span class="sxs-lookup"><span data-stu-id="67038-1739">Round-trip ("R") format</span></span>|<span data-ttu-id="67038-1740">既定の (現在の) カルチャ</span><span class="sxs-lookup"><span data-stu-id="67038-1740">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="67038-1741">特定の形式</span><span class="sxs-lookup"><span data-stu-id="67038-1741">A specific format</span></span>|<span data-ttu-id="67038-1742">既定の (現在の) カルチャ</span><span class="sxs-lookup"><span data-stu-id="67038-1742">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
|<span data-ttu-id="67038-1743">特定の形式</span><span class="sxs-lookup"><span data-stu-id="67038-1743">A specific format</span></span>|<span data-ttu-id="67038-1744">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="67038-1744">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="67038-1745">`provider` パラメーターは、<xref:System.IFormatProvider> の実装です。</span><span class="sxs-lookup"><span data-stu-id="67038-1745">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="67038-1746"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、このメソッドによって返される文字列の書式に関するカルチャ固有の情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1746">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method.</span></span> <span data-ttu-id="67038-1747">`provider` が `null`場合、<xref:System.Numerics.BigInteger> の値は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトを使用して書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1747">If `provider` is `null`, the <xref:System.Numerics.BigInteger> value is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span> <span data-ttu-id="67038-1748">一般的な書式指定子を使用して <xref:System.Numerics.BigInteger> 値の文字列形式を制御する <xref:System.Globalization.NumberFormatInfo> オブジェクトの唯一のプロパティは <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>で、負の符号を表す文字を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1748">The only property of the <xref:System.Globalization.NumberFormatInfo> object that controls the string representation of the <xref:System.Numerics.BigInteger> value using the general format specifier is <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>, which defines the character that represents the negative sign.</span></span>  
  
 <span data-ttu-id="67038-1749">`provider` パラメーターには、次のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="67038-1749">The `provider` parameter can be one of the following:</span></span>  
  
-   <span data-ttu-id="67038-1750">書式設定情報を提供するカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1750">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="67038-1751">書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1751">The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="67038-1752"><xref:System.IFormatProvider>を実装するカスタムオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1752">A custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="67038-1753"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1753">Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-1754">次の例では、チルダ (~) を負の符号として定義するカスタム <xref:System.Globalization.NumberFormatInfo> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="67038-1754">The following example instantiates a custom <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as a negative sign.</span></span> <span data-ttu-id="67038-1755"><xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> メソッドは、カスタム <xref:System.Globalization.NumberFormatInfo> オブジェクトを使用して負の <xref:System.Numerics.BigInteger> 値を表示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1755">The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method then uses the custom <xref:System.Globalization.NumberFormatInfo> object to display a negative <xref:System.Numerics.BigInteger> value.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/cs/System.Numeric.BigInteger.ToString.cs#1)]
 [!code-vb[System.Numeric.BigInteger.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/vb/System.Numeric.BigInteger.ToString.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="bigInteger.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="67038-1756">標準またはカスタムの数値書式指定文字列。</span><span class="sxs-lookup"><span data-stu-id="67038-1756">A standard or custom numeric format string.</span></span></param>
        <summary><span data-ttu-id="67038-1757">指定された書式を使用して、現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの数値をそれと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="67038-1757">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format.</span></span></summary>
        <returns><span data-ttu-id="67038-1758">現在の <see cref="T:System.Numerics.BigInteger" /> 値の文字列形式を、<paramref name="format" /> パラメーターで指定されている形式で表現した値。</span><span class="sxs-lookup"><span data-stu-id="67038-1758">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="format" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1759"><xref:System.Numerics.BigInteger.ToString%28System.String%29> メソッドは、現在のカルチャの規則を表す <xref:System.Globalization.NumberFormatInfo> オブジェクトを使用して、指定した書式で <xref:System.Numerics.BigInteger> 値を書式設定します。</span><span class="sxs-lookup"><span data-stu-id="67038-1759">The <xref:System.Numerics.BigInteger.ToString%28System.String%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using a <xref:System.Globalization.NumberFormatInfo> object that represents the conventions of the current culture.</span></span> <span data-ttu-id="67038-1760">"R" またはラウンドトリップ形式を使用する場合、または別のカルチャを指定する場合は、次のように、<xref:System.Numerics.BigInteger.ToString%2A> メソッドの他のオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="67038-1760">If you want to use the "R", or round-trip, format or specify a different culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="67038-1761">形式を使用するには</span><span class="sxs-lookup"><span data-stu-id="67038-1761">To use format</span></span>|<span data-ttu-id="67038-1762">カルチャの場合</span><span class="sxs-lookup"><span data-stu-id="67038-1762">For culture</span></span>|<span data-ttu-id="67038-1763">オーバーロードを使用する</span><span class="sxs-lookup"><span data-stu-id="67038-1763">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="67038-1764">ラウンドトリップ ("R") 形式</span><span class="sxs-lookup"><span data-stu-id="67038-1764">Round-trip ("R") format</span></span>|<span data-ttu-id="67038-1765">既定の (現在の) カルチャ</span><span class="sxs-lookup"><span data-stu-id="67038-1765">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="67038-1766">ラウンドトリップ ("R") 形式</span><span class="sxs-lookup"><span data-stu-id="67038-1766">Round-trip ("R") format</span></span>|<span data-ttu-id="67038-1767">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="67038-1767">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="67038-1768">特定の形式</span><span class="sxs-lookup"><span data-stu-id="67038-1768">A specific format</span></span>|<span data-ttu-id="67038-1769">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="67038-1769">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="67038-1770">`format` パラメーターには、任意の有効な[標準数値文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)、または[カスタムの数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)の任意の組み合わせを指定できます。</span><span class="sxs-lookup"><span data-stu-id="67038-1770">The `format` parameter can be any valid [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span> <span data-ttu-id="67038-1771">`format` が <xref:System.String.Empty?displayProperty=nameWithType> に等しい場合、またはが `null`場合、現在の <xref:System.Numerics.BigInteger> オブジェクトの戻り値は、ラウンドトリップ書式指定子 ("R") で書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1771">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier ("R").</span></span> <span data-ttu-id="67038-1772">`format` がその他の値の場合、メソッドは <xref:System.FormatException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="67038-1772">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="67038-1773">.NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="67038-1773">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="67038-1774">数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="67038-1774">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="67038-1775">.NET Framework での書式設定のサポートの詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="67038-1775">For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="67038-1776">返される文字列の形式は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトによって決定されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1776">The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span> <span data-ttu-id="67038-1777">`format` パラメーターに応じて、このオブジェクトは、出力文字列内の負の符号、桁区切り記号、小数点の記号などの記号を制御します。</span><span class="sxs-lookup"><span data-stu-id="67038-1777">Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string.</span></span> <span data-ttu-id="67038-1778">現在のカルチャ以外のカルチャの書式設定情報を提供するには、<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> のオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-1778">To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-1779">次の例では、<xref:System.Numerics.BigInteger> 値を初期化し、それぞれの標準書式指定文字列といくつかのカスタム書式指定文字列を使用して表示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1779">The following example initializes a <xref:System.Numerics.BigInteger> value and displays it by using each standard format string and some custom format strings.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="67038-1780"><paramref name="format" /> は有効な文字列ではありません。</span><span class="sxs-lookup"><span data-stu-id="67038-1780"><paramref name="format" /> is not a valid format string.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="67038-1781">標準の数値書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="67038-1781">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="67038-1782">カスタム数値書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="67038-1782">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="bigInteger.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="67038-1783">標準またはカスタムの数値書式指定文字列。</span><span class="sxs-lookup"><span data-stu-id="67038-1783">A standard or custom numeric format string.</span></span></param>
        <param name="provider"><span data-ttu-id="67038-1784">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1784">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="67038-1785">指定された書式とカルチャ固有の書式情報を使用して、現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの数値をそれと等価の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="67038-1785">Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format and culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="67038-1786"><paramref name="format" /> パラメーターと <paramref name="provider" />パラメーターで指定されている現在の <see cref="T:System.Numerics.BigInteger" /> 値の文字列表現。</span><span class="sxs-lookup"><span data-stu-id="67038-1786">The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1787"><xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> メソッドは、指定されたカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトを使用して、指定された書式で <xref:System.Numerics.BigInteger> 値を書式設定します。</span><span class="sxs-lookup"><span data-stu-id="67038-1787">The <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture.</span></span> <span data-ttu-id="67038-1788">ラウンドトリップ形式または既定のカルチャ設定を使用する場合は、次のように、<xref:System.Numerics.BigInteger.ToString%2A> メソッドの他のオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="67038-1788">If you want to use the round-trip format or default culture settings, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="67038-1789">形式を使用するには</span><span class="sxs-lookup"><span data-stu-id="67038-1789">To use format</span></span>|<span data-ttu-id="67038-1790">カルチャの場合</span><span class="sxs-lookup"><span data-stu-id="67038-1790">For culture</span></span>|<span data-ttu-id="67038-1791">オーバーロードを使用する</span><span class="sxs-lookup"><span data-stu-id="67038-1791">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="67038-1792">ラウンドトリップ ("R") 形式</span><span class="sxs-lookup"><span data-stu-id="67038-1792">Round-trip ("R") format</span></span>|<span data-ttu-id="67038-1793">既定の (現在の) カルチャ</span><span class="sxs-lookup"><span data-stu-id="67038-1793">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString>|  
|<span data-ttu-id="67038-1794">ラウンドトリップ ("R") 形式</span><span class="sxs-lookup"><span data-stu-id="67038-1794">Round-trip ("R") format</span></span>|<span data-ttu-id="67038-1795">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="67038-1795">A specific culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="67038-1796">特定の形式</span><span class="sxs-lookup"><span data-stu-id="67038-1796">A specific format</span></span>|<span data-ttu-id="67038-1797">既定の (現在の) カルチャ</span><span class="sxs-lookup"><span data-stu-id="67038-1797">Default (current) culture</span></span>|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
  
 <span data-ttu-id="67038-1798">`format` パラメーターには、任意の有効な[標準数値文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)、または[カスタムの数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)の任意の組み合わせを指定できます。</span><span class="sxs-lookup"><span data-stu-id="67038-1798">The `format` parameter can be any valid  [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span> <span data-ttu-id="67038-1799">`format` が <xref:System.String.Empty?displayProperty=nameWithType> に等しい場合、またはが `null`場合、現在の <xref:System.Numerics.BigInteger> オブジェクトの戻り値は、ラウンドトリップ書式指定子 ("R") で書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1799">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier ("R").</span></span> <span data-ttu-id="67038-1800">`format` がその他の値の場合、メソッドは <xref:System.FormatException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="67038-1800">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="67038-1801">.NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="67038-1801">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="67038-1802">数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="67038-1802">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="67038-1803">.NET Framework での書式設定のサポートの詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="67038-1803">For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="67038-1804">`provider` パラメーターは、<xref:System.IFormatProvider> の実装です。</span><span class="sxs-lookup"><span data-stu-id="67038-1804">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="67038-1805"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、このメソッドによって返される文字列の書式に関するカルチャ固有の情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1805">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method.</span></span> <span data-ttu-id="67038-1806"><xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> メソッドが呼び出されると、`provider` パラメーターの <xref:System.IFormatProvider.GetFormat%2A> メソッドを呼び出し、<xref:System.Globalization.NumberFormatInfo> 型を表す <xref:System.Type> オブジェクトに渡します。</span><span class="sxs-lookup"><span data-stu-id="67038-1806">When the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="67038-1807"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、負の符号記号、桁区切り記号、小数点の記号など、`value` パラメーターの書式設定に関する情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1807">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information for formatting the `value` parameter, such as the negative sign symbol, the group separator symbol, or the decimal point symbol.</span></span> <span data-ttu-id="67038-1808">`provider` パラメーターを使用して、<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> メソッドに書式情報を提供するには、次の3つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1808">There are three ways to use the `provider` parameter to supply formatting information to the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method:</span></span>  
  
-   <span data-ttu-id="67038-1809">書式設定情報を提供するカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1809">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="67038-1810"><xref:System.Globalization.CultureInfo.GetFormat%2A> メソッドは、そのカルチャの数値書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1810">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="67038-1811">数値の書式設定情報を提供する実際の <xref:System.Globalization.NumberFormatInfo> オブジェクトを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1811">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="67038-1812">(<xref:System.Globalization.NumberFormatInfo.GetFormat%2A> の実装では、それ自体が返されます)。</span><span class="sxs-lookup"><span data-stu-id="67038-1812">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="67038-1813"><xref:System.IFormatProvider>を実装するカスタムオブジェクトを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1813">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="67038-1814"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトをインスタンス化して返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1814">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="67038-1815">`provider` が `null`場合、返される文字列の書式設定は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトに基づいています。</span><span class="sxs-lookup"><span data-stu-id="67038-1815">If `provider` is `null`, the formatting of the returned string is based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-1816">次の例では、<xref:System.Numerics.BigInteger> 値を初期化し、標準書式指定文字列と、チルダ (~) を負の符号として定義する <xref:System.Globalization.NumberFormatInfo> オブジェクトを使用してコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1816">The following example initializes a <xref:System.Numerics.BigInteger> value, and displays it to the console using a standard format string and a <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as a negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="67038-1817"><paramref name="format" /> は有効な文字列ではありません。</span><span class="sxs-lookup"><span data-stu-id="67038-1817"><paramref name="format" /> is not a valid format string.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="67038-1818">標準の数値書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="67038-1818">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="67038-1819">カスタム数値書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="67038-1819">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = default, IFormatProvider provider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="bigInteger.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="67038-1820">このインスタンスが書き込まれる文字のスパン。</span><span class="sxs-lookup"><span data-stu-id="67038-1820">The span of characters into which this instance will be written.</span></span></param>
        <param name="charsWritten"><span data-ttu-id="67038-1821">メソッドが戻るとき、文字の数のスパンの長さが文字数に含まれます。</span><span class="sxs-lookup"><span data-stu-id="67038-1821">When the method returns, contains the length of the span in number of characters.</span></span></param>
        <param name="format"><span data-ttu-id="67038-1822">書式設定操作の形式を指定する、文字の読み取り専用スパン。</span><span class="sxs-lookup"><span data-stu-id="67038-1822">A read-only span of characters that specifies the format for the formatting operation.</span></span></param>
        <param name="provider"><span data-ttu-id="67038-1823"><paramref name="value" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1823">An object that supplies culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="67038-1824">この多倍長整数インスタンスの書式を文字のスパンに設定します。</span><span class="sxs-lookup"><span data-stu-id="67038-1824">Formats this big integer instance into a span of characters.</span></span></summary>
        <returns><span data-ttu-id="67038-1825">書式設定操作が成功した場合、<see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1825"><see langword="true" /> if the formatting operation succeeds; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67038-1826">数値の文字列形式を対応する <see cref="T:System.Numerics.BigInteger" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1826">Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; value, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As ReadOnlySpan(Of Char), ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; value, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1827">文字の読み取り専用スパンとしての数値の表現。</span><span class="sxs-lookup"><span data-stu-id="67038-1827">The representation of a number as a read-only span of characters.</span></span></param>
        <param name="result"><span data-ttu-id="67038-1828">このメソッドから制御が戻るときに、<paramref name="value" /> に含まれる数値と等価の <see cref="T:System.Numerics.BigInteger" /> が格納されます。変換に失敗した場合は 0 が格納されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1828">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or zero (0) if the conversion fails.</span></span> <span data-ttu-id="67038-1829"><paramref name="value" /> パラメーターが空の文字スパンである場合、または正しい形式ではない場合、変換は失敗します。</span><span class="sxs-lookup"><span data-stu-id="67038-1829">The conversion fails if the <paramref name="value" /> parameter is an empty character span or is not of the correct format.</span></span> <span data-ttu-id="67038-1830">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1830">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="67038-1831">指定された文字の読み取り専用スパンに含まれた数値の表現を、等価の <see cref="T:System.Numerics.BigInteger" /> に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1831">Tries to convert the representation of a number contained in the specified read-only character span, to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="67038-1832"><paramref name="value" /> が正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1832"><see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.Parse" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string value, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string value, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As String, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ value, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1833">数値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="67038-1833">The string representation of a number.</span></span></param>
        <param name="result"><span data-ttu-id="67038-1834">このメソッドから制御が戻るときに、<paramref name="value" /> に含まれる数値と等価の <see cref="T:System.Numerics.BigInteger" /> が格納されます。変換に失敗した場合は 0 が格納されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1834">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or zero (0) if the conversion fails.</span></span> <span data-ttu-id="67038-1835"><paramref name="value" /> パラメーターが <see langword="null" /> の場合、または正しい形式ではない場合、変換は失敗します。</span><span class="sxs-lookup"><span data-stu-id="67038-1835">The conversion fails if the <paramref name="value" /> parameter is <see langword="null" /> or is not of the correct format.</span></span> <span data-ttu-id="67038-1836">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1836">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="67038-1837">数値の文字列形式を対応する <see cref="T:System.Numerics.BigInteger" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1837">Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="67038-1838"><paramref name="value" /> が正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1838"><see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1839"><xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> メソッドは、変換に失敗した場合に例外をスローしない点を除いて、<xref:System.Numerics.BigInteger.Parse%28System.String%29> メソッドに似ています。</span><span class="sxs-lookup"><span data-stu-id="67038-1839">The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method, except that it does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="67038-1840">このメソッドを使用すると、`value` が無効で、正常に解析できない場合に、例外処理を使用して <xref:System.FormatException> をテストする必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="67038-1840">This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="67038-1841">`value` パラメーターは、次の形式の10進数の文字列形式である必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1841">The `value` parameter should be the string representation of a decimal number in the following form:</span></span>  
  
 <span data-ttu-id="67038-1842">[*ws*][*sign*]*数字*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="67038-1842">[*ws*][*sign*]*digits*[*ws*]</span></span>  
  
 <span data-ttu-id="67038-1843">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="67038-1843">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="67038-1844">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="67038-1844">The following table describes each element.</span></span>  
  
|<span data-ttu-id="67038-1845">要素</span><span class="sxs-lookup"><span data-stu-id="67038-1845">Element</span></span>|<span data-ttu-id="67038-1846">説明</span><span class="sxs-lookup"><span data-stu-id="67038-1846">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="67038-1847">*ws*</span><span class="sxs-lookup"><span data-stu-id="67038-1847">*ws*</span></span>|<span data-ttu-id="67038-1848">省略可能な空白。</span><span class="sxs-lookup"><span data-stu-id="67038-1848">Optional white space.</span></span>|  
|<span data-ttu-id="67038-1849">*sign*</span><span class="sxs-lookup"><span data-stu-id="67038-1849">*sign*</span></span>|<span data-ttu-id="67038-1850">省略可能な符号。</span><span class="sxs-lookup"><span data-stu-id="67038-1850">An optional sign.</span></span> <span data-ttu-id="67038-1851">有効な符号文字は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> および <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> プロパティによって決定されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1851">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the current culture.</span></span>|  
|<span data-ttu-id="67038-1852">*数字*</span><span class="sxs-lookup"><span data-stu-id="67038-1852">*digits*</span></span>|<span data-ttu-id="67038-1853">0 ~ 9 の範囲の10進数のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="67038-1853">A sequence of decimal digits ranging from 0 to 9.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="67038-1854">`value` パラメーターによって指定された文字列に、グループ区切り記号や小数点を含めることはできません。また、小数点は使用できません。</span><span class="sxs-lookup"><span data-stu-id="67038-1854">The string specified by the `value` parameter cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</span></span>  
  
 <span data-ttu-id="67038-1855">`value` パラメーターは、<xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> スタイルを使用して解釈されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1855">The `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="67038-1856">10進数の数字に加えて、先頭と末尾のスペースのみが許可されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1856">In addition to the decimal digits, only leading and trailing spaces with a leading sign are allowed.</span></span> <span data-ttu-id="67038-1857">`value`に含まれるカルチャ固有の書式情報を使用してスタイル要素を明示的に定義するには、<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-1857">To explicitly define the style elements with the culture-specific formatting information that can be present in `value`, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method.</span></span>  
  
 <span data-ttu-id="67038-1858">`value` パラメーターは、現在のカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトの書式情報を使用して解析されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1858">The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span> <span data-ttu-id="67038-1859">詳細については、<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="67038-1859">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="67038-1860">このオーバーロードは、`value` パラメーター内のすべての桁を10進数として解釈します。</span><span class="sxs-lookup"><span data-stu-id="67038-1860">This overload interprets all digits in the `value` parameter as decimal digits.</span></span> <span data-ttu-id="67038-1861">16進数の文字列形式を解析するには、代わりに <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> オーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="67038-1861">To parse the string representation of a hexadecimal number, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> overload instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-1862">次の例では、<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> メソッドを使用して、2つの <xref:System.Numerics.BigInteger> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="67038-1862">The following example uses the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method to instantiate two <xref:System.Numerics.BigInteger> objects.</span></span> <span data-ttu-id="67038-1863">変換が成功した場合は、各オブジェクトを別の数値で乗算し、<xref:System.Numerics.BigInteger.Compare%2A> メソッドを呼び出して、2つのオブジェクト間のリレーションシップを決定します。</span><span class="sxs-lookup"><span data-stu-id="67038-1863">If the conversions succeed, it multiplies each object by another number and then calls the <xref:System.Numerics.BigInteger.Compare%2A> method to determine the relationship between the two objects.</span></span>  
  
 [!code-csharp[System.Numeric.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/cs/System.Numeric.BigInteger.TryParse.cs#1)]
 [!code-vb[System.Numeric.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/vb/System.Numeric.BigInteger.TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="67038-1864"><paramref name="value" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="67038-1864"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Numerics.BigInteger.ToString(System.String)" />
        <altmember cref="Overload:System.Numerics.BigInteger.Parse" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; value, System.Globalization.NumberStyles style, IFormatProvider provider, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; value, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider * BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1865">文字の読み取り専用スパンとしての数値の表現。</span><span class="sxs-lookup"><span data-stu-id="67038-1865">The representation of a number as a read-only span of characters.</span></span></param>
        <param name="style"><span data-ttu-id="67038-1866"><paramref name="value" /> で存在する可能性を持つスタイル要素を示す、列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="67038-1866">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value" />.</span></span> <span data-ttu-id="67038-1867">通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</span><span class="sxs-lookup"><span data-stu-id="67038-1867">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</span></span></param>
        <param name="provider"><span data-ttu-id="67038-1868"><paramref name="value" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1868">An object that supplies culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <param name="result"><span data-ttu-id="67038-1869">このメソッドから制御が戻るときに、<paramref name="value" /> に含まれる数値と等価の <see cref="T:System.Numerics.BigInteger" /> が格納されます。変換に失敗した場合は <see cref="P:System.Numerics.BigInteger.Zero" /> が格納されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1869">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or <see cref="P:System.Numerics.BigInteger.Zero" /> if the conversion failed.</span></span> <span data-ttu-id="67038-1870"><paramref name="value" /> パラメーターが空の文字スパンの場合、または <paramref name="style" /> に準拠した形式ではない場合、変換は失敗します。</span><span class="sxs-lookup"><span data-stu-id="67038-1870">The conversion fails if the <paramref name="value" /> parameter is an empty character span or is not in a format that is compliant with <paramref name="style" />.</span></span> <span data-ttu-id="67038-1871">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1871">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="67038-1872">数値の文字列形式を対応する <see cref="T:System.Numerics.BigInteger" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1872">Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="67038-1873"><paramref name="value" /> が正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1873"><see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="67038-1874">このオーバーロードは <xref:System.Numerics.BigInteger.Parse(System.ReadOnlySpan%7BSystem.Char%7D,System.Globalization.NumberStyles,System.IFormatProvider)> メソッドに似ていますが、変換に失敗した場合に例外をスローしない点が異なります。</span><span class="sxs-lookup"><span data-stu-id="67038-1874">This overload is like the <xref:System.Numerics.BigInteger.Parse(System.ReadOnlySpan%7BSystem.Char%7D,System.Globalization.NumberStyles,System.IFormatProvider)> method, except that it does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="67038-1875">このメソッドを使用すると、`value` が無効で、正常に解析できない場合に、例外処理を使用して <xref:System.FormatException> をテストする必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="67038-1875">This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be parsed successfully.</span></span>

<span data-ttu-id="67038-1876">`style` パラメーターは、解析操作を成功させるために `value` パラメーターで使用できるスタイル要素 (空白、正または負の符号など) を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1876">The `style` parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="67038-1877"><xref:System.Globalization.NumberStyles> 列挙体のビットフラグの組み合わせである必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1877">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="67038-1878">`style`の値に応じて、`value` パラメーターには次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1878">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>

<span data-ttu-id="67038-1879">[*ws*][*$*][*sign*][*数字*,]*数字*[。*fractional_digits*] [E [*sign*]*exponential_digits*] [*ws*]</span><span class="sxs-lookup"><span data-stu-id="67038-1879">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>

<span data-ttu-id="67038-1880">`style` パラメーターに <xref:System.Globalization.NumberStyles.AllowHexSpecifier>が含まれている場合、`value` パラメーターには次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1880">If the `style` parameter includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier>, the `value` parameter may include the following elements:</span></span>

<span data-ttu-id="67038-1881">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="67038-1881">[*ws*]*hexdigits*[*ws*]</span></span>

<span data-ttu-id="67038-1882">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="67038-1882">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="67038-1883">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="67038-1883">The following table describes each element.</span></span>

|<span data-ttu-id="67038-1884">要素</span><span class="sxs-lookup"><span data-stu-id="67038-1884">Element</span></span>|<span data-ttu-id="67038-1885">説明</span><span class="sxs-lookup"><span data-stu-id="67038-1885">Description</span></span>|
|-------------|-----------------|
|<span data-ttu-id="67038-1886">*ws*</span><span class="sxs-lookup"><span data-stu-id="67038-1886">*ws*</span></span>|<span data-ttu-id="67038-1887">省略可能な空白。</span><span class="sxs-lookup"><span data-stu-id="67038-1887">Optional white space.</span></span> <span data-ttu-id="67038-1888">`style` に <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> フラグが含まれている場合、また `value` は `style` に <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> フラグが含まれている場合は、`value` の先頭に空白が表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1888">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, or at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|
|*$*|<span data-ttu-id="67038-1889">カルチャ固有の通貨記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1889">A culture-specific currency symbol.</span></span> <span data-ttu-id="67038-1890">`value` 内の位置は、`provider` パラメーターの <xref:System.IFormatProvider.GetFormat%2A> メソッドによって返される <xref:System.Globalization.NumberFormatInfo> オブジェクトの <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> プロパティによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1890">Its position in `value` is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter.</span></span> <span data-ttu-id="67038-1891">通貨記号は、`style` に <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> フラグが含まれている場合に `value` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1891">The currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="67038-1892">*sign*</span><span class="sxs-lookup"><span data-stu-id="67038-1892">*sign*</span></span>|<span data-ttu-id="67038-1893">省略可能な符号。</span><span class="sxs-lookup"><span data-stu-id="67038-1893">An optional sign.</span></span> <span data-ttu-id="67038-1894"><xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> フラグが `style` に含まれている場合、`value` の先頭に符号が表示されます。また、`style` に <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> フラグが含まれている場合は、`value` の最後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1894">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="67038-1895"><xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> フラグが `style` 含まれている場合は、`value` でかっこを使用して負の値を示すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1895">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="67038-1896">*数字*</span><span class="sxs-lookup"><span data-stu-id="67038-1896">*digits*</span></span>|<span data-ttu-id="67038-1897">0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="67038-1897">A sequence of digits from 0 through 9.</span></span>|
|<span data-ttu-id="67038-1898">*、*</span><span class="sxs-lookup"><span data-stu-id="67038-1898">*,*</span></span>|<span data-ttu-id="67038-1899">カルチャ固有のグループ区切り記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1899">A culture-specific group separator.</span></span> <span data-ttu-id="67038-1900">`provider` によって指定されたカルチャの区切り記号は、`style` に <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> フラグが含まれている場合に `value` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1900">The group separator of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="67038-1901">*」を参照してください。*</span><span class="sxs-lookup"><span data-stu-id="67038-1901">*.*</span></span>|<span data-ttu-id="67038-1902">カルチャ固有の小数点の記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1902">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="67038-1903">`provider` によって指定されたカルチャの小数点記号は、`style` に <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> フラグが含まれている場合に `value` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1903">The decimal point symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="67038-1904">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="67038-1904">*fractional_digits*</span></span>|<span data-ttu-id="67038-1905">数字0の1回以上の出現。</span><span class="sxs-lookup"><span data-stu-id="67038-1905">One or more occurrences of the digit 0.</span></span> <span data-ttu-id="67038-1906">小数点以下の桁数は、`style` に <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> フラグが含まれている場合にのみ `value` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1906">Fractional digits can appear in `value` only if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="67038-1907">E</span><span class="sxs-lookup"><span data-stu-id="67038-1907">E</span></span>|<span data-ttu-id="67038-1908">"E" または "E" 文字。値が指数 (科学的) 表記で表されることを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1908">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="67038-1909">`value` パラメーターは、`style` に <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> フラグが含まれている場合に指数表記で数値を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1909">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="67038-1910">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="67038-1910">*exponential_digits*</span></span>|<span data-ttu-id="67038-1911">0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="67038-1911">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="67038-1912">`value` パラメーターは、`style` に <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> フラグが含まれている場合に指数表記で数値を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1912">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|
|<span data-ttu-id="67038-1913">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="67038-1913">*hexdigits*</span></span>|<span data-ttu-id="67038-1914">0から f、または0から F までの16進数のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="67038-1914">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|

> [!NOTE]
> <span data-ttu-id="67038-1915">`s` 内の終端の NUL (U + 0000) 文字は、`style` 引数の値に関係なく、解析操作によって無視されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1915">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

|<span data-ttu-id="67038-1916">非複合 `NumberStyles` 値</span><span class="sxs-lookup"><span data-stu-id="67038-1916">Non-composite `NumberStyles` values</span></span>|<span data-ttu-id="67038-1917">数字に加えて許容される要素</span><span class="sxs-lookup"><span data-stu-id="67038-1917">Elements permitted in value in addition to digits</span></span>|
|------------------------------------------|-------------------------------------------------------|
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="67038-1918">10進数のみ。</span><span class="sxs-lookup"><span data-stu-id="67038-1918">Decimal digits only.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="67038-1919">小数点 (*.*) と*fractional_digits*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1919">The decimal point (*.*) and *fractional_digits* elements.</span></span> <span data-ttu-id="67038-1920">ただし、 *fractional_digits*は1桁以上の0桁で構成されている必要があります。それ以外の場合、メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1920">However, *fractional_digits* must consist of only one or more 0 digits, or the method returns `false`.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="67038-1921">*Exponential_digits*と共に指数表記を示す "e" または "e" 文字。</span><span class="sxs-lookup"><span data-stu-id="67038-1921">The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*.</span></span> <span data-ttu-id="67038-1922">`value` が指数表記の数値を表している場合、0以外の小数部分を持つことはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-1922">If `value` represents a number in exponential notation, it cannot have a non-zero, fractional component.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="67038-1923">`value`の先頭にある*ws*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1923">The *ws* element at the start of `value`.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="67038-1924">`value`の末尾の*ws*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1924">The *ws* element at the end of `value`.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="67038-1925">*数字*の前にある*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1925">The *sign* element before *digits*.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="67038-1926">*数字*の後の*符号*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1926">The *sign* element after *digits*.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="67038-1927">数値を囲むかっこ形式の*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1927">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="67038-1928">桁区切り記号 (*,*) 要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1928">The group separator (*,*) element.</span></span>|
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="67038-1929">Currency (*$*) 要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1929">The currency (*$*) element.</span></span>|
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="67038-1930">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1930">All elements.</span></span> <span data-ttu-id="67038-1931">ただし、`value` は、16進数または指数表記の数値を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-1931">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="67038-1932">`value`の先頭または末尾にある*ws*要素、`value`の先頭に*符号*、小数点 (*.*) 記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1932">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol.</span></span> <span data-ttu-id="67038-1933">`value` パラメーターでは、指数表記を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="67038-1933">The `value` parameter can also use exponential notation.</span></span>|
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="67038-1934">*Ws*、 *sign*、group separator (*,*)、および小数点 (*.*) の各要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1934">The *ws*, *sign*, group separator (*,*), and decimal point (*.*) elements.</span></span>|
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="67038-1935">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="67038-1935">All elements.</span></span> <span data-ttu-id="67038-1936">ただし、`value` は16進数を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-1936">However, `value` cannot represent a hexadecimal number.</span></span>|

<span data-ttu-id="67038-1937"><xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> フラグが使用されている場合、`value` は16進数の値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1937">If the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> flag is used, `value` must be a hexadecimal value.</span></span> <span data-ttu-id="67038-1938">`style` に存在できる他のフラグは <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> と <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>だけです。</span><span class="sxs-lookup"><span data-stu-id="67038-1938">The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67038-1939">(<xref:System.Globalization.NumberStyles> 列挙体には、2つの空白フラグを含む複合スタイル <xref:System.Globalization.NumberStyles.HexNumber>があります)。</span><span class="sxs-lookup"><span data-stu-id="67038-1939">(The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>

<span data-ttu-id="67038-1940">`provider` パラメーターは、<xref:System.IFormatProvider> の実装です。</span><span class="sxs-lookup"><span data-stu-id="67038-1940">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="67038-1941"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、`value`の書式に関するカルチャ固有の情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1941">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="67038-1942">`provider` パラメーターには、次のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="67038-1942">The `provider` parameter can be any one of the following:</span></span>

-   <span data-ttu-id="67038-1943">書式設定情報を提供するカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1943">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="67038-1944"><xref:System.Globalization.CultureInfo.GetFormat%2A> メソッドは、そのカルチャの数値書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1944">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>

-   <span data-ttu-id="67038-1945">数値の書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1945">A <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="67038-1946">(<xref:System.Globalization.NumberFormatInfo.GetFormat%2A> の実装では、それ自体が返されます)。</span><span class="sxs-lookup"><span data-stu-id="67038-1946">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>

-   <span data-ttu-id="67038-1947"><xref:System.IFormatProvider>を実装するカスタムオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1947">A custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="67038-1948"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトをインスタンス化して返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1948">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>

<span data-ttu-id="67038-1949">`provider` が `null`場合は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトが使用されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1949">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="67038-1950"><paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="67038-1950"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="67038-1951">または</span><span class="sxs-lookup"><span data-stu-id="67038-1951">-or-</span></span> 
 <span data-ttu-id="67038-1952"><paramref name="style" /> には、別の値と共に <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> または <see cref="F:System.Globalization.NumberStyles.HexNumber" /> フラグが含まれます。</span><span class="sxs-lookup"><span data-stu-id="67038-1952"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.Parse" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string value, System.Globalization.NumberStyles style, IFormatProvider provider, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Numerics.BigInteger&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (value As String, style As NumberStyles, provider As IFormatProvider, ByRef result As BigInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ value, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Numerics::BigInteger % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * System.Globalization.NumberStyles * IFormatProvider * BigInteger -&gt; bool" Usage="System.Numerics.BigInteger.TryParse (value, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Numerics.BigInteger" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67038-1953">数値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="67038-1953">The string representation of a number.</span></span> <span data-ttu-id="67038-1954">文字列は、<paramref name="style" /> で指定されたスタイルを使用して解釈されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1954">The string is interpreted using the style specified by <paramref name="style" />.</span></span></param>
        <param name="style"><span data-ttu-id="67038-1955"><paramref name="value" /> で存在する可能性を持つスタイル要素を示す、列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="67038-1955">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value" />.</span></span> <span data-ttu-id="67038-1956">通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</span><span class="sxs-lookup"><span data-stu-id="67038-1956">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</span></span></param>
        <param name="provider"><span data-ttu-id="67038-1957"><paramref name="value" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-1957">An object that supplies culture-specific formatting information about <paramref name="value" />.</span></span></param>
        <param name="result"><span data-ttu-id="67038-1958">このメソッドから制御が戻るときに、<paramref name="value" /> に含まれる数値と等価の <see cref="T:System.Numerics.BigInteger" /> が格納されます。変換に失敗した場合は <see cref="P:System.Numerics.BigInteger.Zero" /> が格納されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1958">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or <see cref="P:System.Numerics.BigInteger.Zero" /> if the conversion failed.</span></span> <span data-ttu-id="67038-1959"><paramref name="value" /> パラメーターが <see langword="null" /> の場合、または <paramref name="style" /> に従った形式ではない場合、変換は失敗します。</span><span class="sxs-lookup"><span data-stu-id="67038-1959">The conversion fails if the <paramref name="value" /> parameter is <see langword="null" /> or is not in a format that is compliant with <paramref name="style" />.</span></span> <span data-ttu-id="67038-1960">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1960">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="67038-1961">指定されたスタイルおよびカルチャ固有の書式の数値の文字列形式を等価の <see cref="T:System.Numerics.BigInteger" /> に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-1961">Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="67038-1962"><paramref name="value" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-1962"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-1963"><xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> メソッドは、変換に失敗した場合に例外をスローしない点を除いて、<xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> メソッドに似ています。</span><span class="sxs-lookup"><span data-stu-id="67038-1963">The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="67038-1964">このメソッドを使用すると、`value` が無効で、正常に解析できない場合に、例外処理を使用して <xref:System.FormatException> をテストする必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="67038-1964">This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be parsed successfully.</span></span>  
  
 <span data-ttu-id="67038-1965">`style` パラメーターは、解析操作を成功させるために `value` パラメーターで使用できるスタイル要素 (空白、正または負の符号など) を定義します。</span><span class="sxs-lookup"><span data-stu-id="67038-1965">The `style` parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the `value` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="67038-1966"><xref:System.Globalization.NumberStyles> 列挙体のビットフラグの組み合わせである必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-1966">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="67038-1967">`style`の値に応じて、`value` パラメーターには次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1967">Depending on the value of `style`, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="67038-1968">[*ws*][*$*][*sign*][*数字*,]*数字*[。*fractional_digits*] [E [*sign*]*exponential_digits*] [*ws*]</span><span class="sxs-lookup"><span data-stu-id="67038-1968">[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]</span></span>  
  
 <span data-ttu-id="67038-1969">`style` パラメーターに <xref:System.Globalization.NumberStyles.AllowHexSpecifier>が含まれている場合、`value` パラメーターには次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1969">If the `style` parameter includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier>, the `value` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="67038-1970">[*ws*]*hexdigits*[*ws*]</span><span class="sxs-lookup"><span data-stu-id="67038-1970">[*ws*]*hexdigits*[*ws*]</span></span>  
  
 <span data-ttu-id="67038-1971">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="67038-1971">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="67038-1972">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="67038-1972">The following table describes each element.</span></span>  
  
|<span data-ttu-id="67038-1973">要素</span><span class="sxs-lookup"><span data-stu-id="67038-1973">Element</span></span>|<span data-ttu-id="67038-1974">説明</span><span class="sxs-lookup"><span data-stu-id="67038-1974">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="67038-1975">*ws*</span><span class="sxs-lookup"><span data-stu-id="67038-1975">*ws*</span></span>|<span data-ttu-id="67038-1976">省略可能な空白。</span><span class="sxs-lookup"><span data-stu-id="67038-1976">Optional white space.</span></span> <span data-ttu-id="67038-1977">`style` に <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> フラグが含まれている場合、また `value` は `style` に <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> フラグが含まれている場合は、`value` の先頭に空白が表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1977">White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, or at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="67038-1978">カルチャ固有の通貨記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1978">A culture-specific currency symbol.</span></span> <span data-ttu-id="67038-1979">文字列内の位置は、`provider` パラメーターの <xref:System.IFormatProvider.GetFormat%2A> メソッドによって返される <xref:System.Globalization.NumberFormatInfo> オブジェクトの <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> プロパティによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1979">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter.</span></span> <span data-ttu-id="67038-1980">通貨記号は、`style` に <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> フラグが含まれている場合に `value` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1980">The currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="67038-1981">*sign*</span><span class="sxs-lookup"><span data-stu-id="67038-1981">*sign*</span></span>|<span data-ttu-id="67038-1982">省略可能な符号。</span><span class="sxs-lookup"><span data-stu-id="67038-1982">An optional sign.</span></span> <span data-ttu-id="67038-1983"><xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> フラグが `style` に含まれている場合、`value` の先頭に符号が表示されます。また、`style` に <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> フラグが含まれている場合は、`value` の最後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1983">The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="67038-1984"><xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> フラグが `style` 含まれている場合は、`value` でかっこを使用して負の値を示すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1984">Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="67038-1985">*数字*</span><span class="sxs-lookup"><span data-stu-id="67038-1985">*digits*</span></span>|<span data-ttu-id="67038-1986">0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="67038-1986">A sequence of digits from 0 through 9.</span></span>|  
|<span data-ttu-id="67038-1987">*、*</span><span class="sxs-lookup"><span data-stu-id="67038-1987">*,*</span></span>|<span data-ttu-id="67038-1988">カルチャ固有のグループ区切り記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1988">A culture-specific group separator.</span></span> <span data-ttu-id="67038-1989">`provider` によって指定されたカルチャの区切り記号は、`style` に <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> フラグが含まれている場合に `value` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1989">The group separator of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="67038-1990">*」を参照してください。*</span><span class="sxs-lookup"><span data-stu-id="67038-1990">*.*</span></span>|<span data-ttu-id="67038-1991">カルチャ固有の小数点の記号。</span><span class="sxs-lookup"><span data-stu-id="67038-1991">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="67038-1992">`provider` によって指定されたカルチャの小数点記号は、`style` に <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> フラグが含まれている場合に `value` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1992">The decimal point symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="67038-1993">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="67038-1993">*fractional_digits*</span></span>|<span data-ttu-id="67038-1994">数字0の1回以上の出現。</span><span class="sxs-lookup"><span data-stu-id="67038-1994">One or more occurrences of the digit 0.</span></span> <span data-ttu-id="67038-1995">小数点以下の桁数は、`style` に <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> フラグが含まれている場合にのみ `value` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="67038-1995">Fractional digits can appear in `value` only if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="67038-1996">E</span><span class="sxs-lookup"><span data-stu-id="67038-1996">E</span></span>|<span data-ttu-id="67038-1997">"E" または "E" 文字。値が指数 (科学的) 表記で表されることを示します。</span><span class="sxs-lookup"><span data-stu-id="67038-1997">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="67038-1998">`value` パラメーターは、`style` に <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> フラグが含まれている場合に指数表記で数値を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-1998">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="67038-1999">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="67038-1999">*exponential_digits*</span></span>|<span data-ttu-id="67038-2000">0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="67038-2000">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="67038-2001">`value` パラメーターは、`style` に <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> フラグが含まれている場合に指数表記で数値を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="67038-2001">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="67038-2002">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="67038-2002">*hexdigits*</span></span>|<span data-ttu-id="67038-2003">0から f、または0から F までの16進数のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="67038-2003">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="67038-2004">`s` 内の終端の NUL (U + 0000) 文字は、`style` 引数の値に関係なく、解析操作によって無視されます。</span><span class="sxs-lookup"><span data-stu-id="67038-2004">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="67038-2005">10進数の数字のみを含む文字列 (<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> フラグに対応) は、常に正常に解析されます。</span><span class="sxs-lookup"><span data-stu-id="67038-2005">A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> flag) always parses successfully.</span></span> <span data-ttu-id="67038-2006">残りの <xref:System.Globalization.NumberStyles> メンバーのほとんどは、この入力文字列に存在する必要があるが必須ではない要素を制御します。</span><span class="sxs-lookup"><span data-stu-id="67038-2006">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in this input string.</span></span> <span data-ttu-id="67038-2007">次の表は、個々の <xref:System.Globalization.NumberStyles> メンバーが `value`に存在する可能性のある要素にどのように影響するかを示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-2007">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.</span></span>  
  
|<span data-ttu-id="67038-2008">非複合 `NumberStyles` 値</span><span class="sxs-lookup"><span data-stu-id="67038-2008">Non-composite `NumberStyles` values</span></span>|<span data-ttu-id="67038-2009">数字に加えて許容される要素</span><span class="sxs-lookup"><span data-stu-id="67038-2009">Elements permitted in value in addition to digits</span></span>|  
|------------------------------------------|-------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="67038-2010">10進数のみ。</span><span class="sxs-lookup"><span data-stu-id="67038-2010">Decimal digits only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="67038-2011">小数点 (*.*) と*fractional_digits*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-2011">The decimal point (*.*) and *fractional_digits* elements.</span></span> <span data-ttu-id="67038-2012">ただし、 *fractional_digits*は1桁以上の0桁で構成されている必要があります。それ以外の場合、メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-2012">However, *fractional_digits* must consist of only one or more 0 digits, or the method returns `false`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="67038-2013">*Exponential_digits*と共に指数表記を示す "e" または "e" 文字。</span><span class="sxs-lookup"><span data-stu-id="67038-2013">The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*.</span></span> <span data-ttu-id="67038-2014">`value` が指数表記の数値を表している場合、0以外の小数部分を持つことはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-2014">If `value` represents a number in exponential notation, it cannot have a non-zero, fractional component.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="67038-2015">`value`の先頭にある*ws*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-2015">The *ws* element at the start of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="67038-2016">`value`の末尾の*ws*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-2016">The *ws* element at the end of `value`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="67038-2017">*数字*の前にある*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-2017">The *sign* element before *digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="67038-2018">*数字*の後の*符号*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-2018">The *sign* element after *digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="67038-2019">数値を囲むかっこ形式の*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="67038-2019">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="67038-2020">桁区切り記号 (*,*) 要素。</span><span class="sxs-lookup"><span data-stu-id="67038-2020">The group separator (*,*) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="67038-2021">Currency (*$*) 要素。</span><span class="sxs-lookup"><span data-stu-id="67038-2021">The currency (*$*) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="67038-2022">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="67038-2022">All elements.</span></span> <span data-ttu-id="67038-2023">ただし、`value` は、16進数または指数表記の数値を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-2023">However, `value` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="67038-2024">`value`の先頭または末尾にある*ws*要素、`value`の先頭に*符号*、小数点 (*.*) 記号。</span><span class="sxs-lookup"><span data-stu-id="67038-2024">The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol.</span></span> <span data-ttu-id="67038-2025">`value` パラメーターでは、指数表記を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="67038-2025">The `value` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="67038-2026">*Ws*、 *sign*、group separator (*,*)、および小数点 (*.*) の各要素。</span><span class="sxs-lookup"><span data-stu-id="67038-2026">The *ws*, *sign*, group separator (*,*), and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="67038-2027">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="67038-2027">All elements.</span></span> <span data-ttu-id="67038-2028">ただし、`value` は16進数を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-2028">However, `value` cannot represent a hexadecimal number.</span></span>|  
  
> [!IMPORTANT]
>  <span data-ttu-id="67038-2029"><xref:System.Numerics.BigInteger.TryParse%2A> メソッドを使用して、<xref:System.Numerics.BigInteger.ToString%2A> メソッドによって出力された <xref:System.Numerics.BigInteger> 値の文字列形式をラウンドトリップする場合は、"R" 書式指定子と共に <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> メソッドを使用して、<xref:System.Numerics.BigInteger> 値の文字列形式を生成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-2029">If you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=nameWithType> method with the "R" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value.</span></span> <span data-ttu-id="67038-2030">それ以外の場合、<xref:System.Numerics.BigInteger> の文字列形式では、元の値の50の最上位の桁のみが保持され、<xref:System.Numerics.BigInteger.TryParse%2A> メソッドを使用して <xref:System.Numerics.BigInteger> 値を復元すると、データが失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="67038-2030">Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to restore the <xref:System.Numerics.BigInteger> value.</span></span>  
  
 <span data-ttu-id="67038-2031"><xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> フラグが使用されている場合、`value` は16進数の値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-2031">If the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> flag is used, `value` must be a hexadecimal value.</span></span> <span data-ttu-id="67038-2032">`style` に存在できる他のフラグは <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> と <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>だけです。</span><span class="sxs-lookup"><span data-stu-id="67038-2032">The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67038-2033">(<xref:System.Globalization.NumberStyles> 列挙体には、2つの空白フラグを含む複合スタイル <xref:System.Globalization.NumberStyles.HexNumber>があります)。</span><span class="sxs-lookup"><span data-stu-id="67038-2033">(The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67038-2034">`value` が16進数の文字列表現である場合、16進数と区別する装飾 (`0x` や `&h`など) を前に付けることはできません。</span><span class="sxs-lookup"><span data-stu-id="67038-2034">If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number.</span></span> <span data-ttu-id="67038-2035">これにより、変換は失敗します。</span><span class="sxs-lookup"><span data-stu-id="67038-2035">This causes the conversion to fail.</span></span>  
  
 <span data-ttu-id="67038-2036">`value` が16進数の文字列の場合、<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> メソッドは `value` を2の補数表現を使用して格納された負の数値として解釈します (最初の2桁の16進数が `0x80`以上の場合)。</span><span class="sxs-lookup"><span data-stu-id="67038-2036">If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`.</span></span> <span data-ttu-id="67038-2037">つまり、メソッドは、`value` の最初のバイトの最上位ビットを符号ビットとして解釈します。</span><span class="sxs-lookup"><span data-stu-id="67038-2037">In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit.</span></span> <span data-ttu-id="67038-2038">16進数文字列が正の数値として正しく解釈されるようにするには、`value` の最初の桁の値が0である必要があります。</span><span class="sxs-lookup"><span data-stu-id="67038-2038">To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero.</span></span> <span data-ttu-id="67038-2039">たとえば、メソッドは `0x80` を負の値として解釈しますが、`0x080` または `0x0080` を正の値として解釈します。</span><span class="sxs-lookup"><span data-stu-id="67038-2039">For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value.</span></span> <span data-ttu-id="67038-2040">次の例は、負の値と正の値を表す16進文字列の違いを示しています。</span><span class="sxs-lookup"><span data-stu-id="67038-2040">The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParseHex1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParseHex1.vb#1)]  
  
 <span data-ttu-id="67038-2041">`provider` パラメーターは、<xref:System.IFormatProvider> の実装です。</span><span class="sxs-lookup"><span data-stu-id="67038-2041">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="67038-2042"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、`value`の書式に関するカルチャ固有の情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-2042">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="67038-2043">`provider` パラメーターには、次のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="67038-2043">The `provider` parameter can be any one of the following:</span></span>  
  
-   <span data-ttu-id="67038-2044">書式設定情報を提供するカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-2044">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="67038-2045"><xref:System.Globalization.CultureInfo.GetFormat%2A> メソッドは、そのカルチャの数値書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="67038-2045">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="67038-2046">数値の書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-2046">A <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="67038-2047">(<xref:System.Globalization.NumberFormatInfo.GetFormat%2A> の実装では、それ自体が返されます)。</span><span class="sxs-lookup"><span data-stu-id="67038-2047">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="67038-2048"><xref:System.IFormatProvider>を実装するカスタムオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67038-2048">A custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="67038-2049"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトをインスタンス化して返します。</span><span class="sxs-lookup"><span data-stu-id="67038-2049">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="67038-2050">`provider` が `null`場合は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトが使用されます。</span><span class="sxs-lookup"><span data-stu-id="67038-2050">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67038-2051">次の例では、`style` と `provider` パラメーターのさまざまな値の組み合わせを使用して、<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> メソッドの呼び出しをいくつか行います。</span><span class="sxs-lookup"><span data-stu-id="67038-2051">The following example makes some calls to the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method using various combinations of values for the `style` and `provider` parameters.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#2)]  
  
 <span data-ttu-id="67038-2052"><xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> メソッドに対する個々の呼び出しの数は、次の `BigIntegerFormatProvider` クラスのインスタンスに渡されます。これにより、チルダ (~) が負の符号として定義されます。</span><span class="sxs-lookup"><span data-stu-id="67038-2052">A number of the individual calls to the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method pass an instance of the following `BigIntegerFormatProvider` class, which defines a tilde (~) as the negative sign.</span></span>  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="67038-2053"><paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="67038-2053"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="67038-2054">または</span><span class="sxs-lookup"><span data-stu-id="67038-2054">-or-</span></span> 
 <span data-ttu-id="67038-2055"><paramref name="style" /> には、別の値と共に <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> または <see cref="F:System.Globalization.NumberStyles.HexNumber" /> フラグが含まれます。</span><span class="sxs-lookup"><span data-stu-id="67038-2055"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</span></span></exception>
        <altmember cref="Overload:System.Numerics.BigInteger.ToString" />
        <altmember cref="Overload:System.Numerics.BigInteger.Parse" />
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public bool TryWriteBytes (Span&lt;byte&gt; destination, out int bytesWritten, bool isUnsigned = false, bool isBigEndian = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, bool isUnsigned, bool isBigEndian) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryWriteBytes (destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional isUnsigned As Boolean = false, Optional isBigEndian As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryWriteBytes : Span&lt;byte&gt; * int * bool * bool -&gt; bool" Usage="bigInteger.TryWriteBytes (destination, bytesWritten, isUnsigned, isBigEndian)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="isUnsigned" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="isBigEndian" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="67038-2056">結果のバイトの書き込み先の範囲。</span><span class="sxs-lookup"><span data-stu-id="67038-2056">The destination span to which the resulting bytes should be written.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="67038-2057"><paramref name="destination" /> に書き込むバイト数。</span><span class="sxs-lookup"><span data-stu-id="67038-2057">The number of bytes written to <paramref name="destination" />.</span></span></param>
        <param name="isUnsigned"><span data-ttu-id="67038-2058">符号なしのエンコードを使用するには <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-2058"><see langword="true" /> to use unsigned encoding; otherwise, <see langword="false" />.</span></span></param>
        <param name="isBigEndian"><span data-ttu-id="67038-2059">ビッグ エンディアンのバイト順にバイトを書き込む場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-2059"><see langword="true" /> to write the bytes in a big-endian byte order; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="67038-2060">使用できる最も少ないバイト数を使用して、この <see cref="T:System.Numerics.BigInteger" /> の値をリトル エンディアンの 2 の補数としてコピーします。</span><span class="sxs-lookup"><span data-stu-id="67038-2060">Copies the value of this <see cref="T:System.Numerics.BigInteger" /> as little-endian twos-complement bytes, using the fewest number of bytes possible.</span></span> <span data-ttu-id="67038-2061">値が 0 の場合は、その要素が 0x00 である 1 バイトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="67038-2061">If the value is zero, outputs one byte whose element is 0x00.</span></span></summary>
        <returns><span data-ttu-id="67038-2062">バイトが <paramref name="destination" /> に収まる場合は <see langword="true" />。空間が不足しているため、すべてのバイトを書き込むことができない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67038-2062"><see langword="true" /> if the bytes fit in <paramref name="destination" />; <see langword="false" /> if not all bytes could be written due to lack of space.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="67038-2063"><paramref name="isUnsigned" /> が <see langword="true" /> で、<see cref="P:System.Numerics.BigInteger.Sign" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="67038-2063"><paramref name="isUnsigned" /> is <see langword="true" /> and <see cref="P:System.Numerics.BigInteger.Sign" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Zero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger Zero" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.Zero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Zero As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::BigInteger Zero { System::Numerics::BigInteger get(); };" />
      <MemberSignature Language="F#" Value="member this.Zero : System.Numerics.BigInteger" Usage="System.Numerics.BigInteger.Zero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67038-2064">0 (ゼロ) を表す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="67038-2064">Gets a value that represents the number 0 (zero).</span></span></summary>
        <value><span data-ttu-id="67038-2065">値が 0 (ゼロ) である整数。</span><span class="sxs-lookup"><span data-stu-id="67038-2065">An integer whose value is 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67038-2066">このプロパティによって返される <xref:System.Numerics.BigInteger> オブジェクトは、割り当てと比較で使用するゼロ値の便利なソースを提供します。</span><span class="sxs-lookup"><span data-stu-id="67038-2066">The <xref:System.Numerics.BigInteger> object returned by this property provides a convenient source of a zero value for use in assignments and comparisons.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.IsZero" />
      </Docs>
    </Member>
  </Members>
</Type>
