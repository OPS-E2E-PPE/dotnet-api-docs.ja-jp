<Type Name="Complex" FullName="System.Numerics.Complex">
  <Metadata><Meta Name="ms.openlocfilehash" Value="58682d11c7e967238f2703be6762ec716d97e626" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75169672" /></Metadata><TypeSignature Language="C#" Value="public struct Complex : IEquatable&lt;System.Numerics.Complex&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Complex extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Numerics.Complex&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.Complex" />
  <TypeSignature Language="VB.NET" Value="Public Structure Complex&#xA;Implements IEquatable(Of Complex), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Complex : IEquatable&lt;System::Numerics::Complex&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type Complex = struct&#xA;    interface IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Numerics</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Numerics</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Numerics.Complex&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8aa88-101">複素数を表します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-101">Represents a complex number.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-102">複素数は、実数部と虚数部で構成される数値です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-102">A complex number is a number that comprises a real number part and an imaginary number part.</span></span> <span data-ttu-id="8aa88-103">通常、複素数 z は z = x + yi の形式で記述されます。ここで、 *x*と*y*は実数で、 *i*はプロパティ*i*<sup>2</sup> =-1 を持つ虚数単位です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-103">A complex number z is usually written in the form z = x + yi, where *x* and *y* are real numbers, and *i* is the imaginary unit that has the property *i*<sup>2</sup> = -1.</span></span> <span data-ttu-id="8aa88-104">複素数の実数部は*x*で表され、複素数の虚数部は*y*で表されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-104">The real part of the complex number is represented by *x*, and the imaginary part of the complex number is represented by *y*.</span></span>  
  
 <span data-ttu-id="8aa88-105"><xref:System.Numerics.Complex> 型は、複素数をインスタンス化および操作するときに、デカルト座標系 (real, 虚数) を使用します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-105">The <xref:System.Numerics.Complex> type uses the Cartesian coordinate system (real, imaginary) when instantiating and manipulating complex numbers.</span></span> <span data-ttu-id="8aa88-106">複素数は、複合平面と呼ばれる2次元座標系の点として表すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-106">A complex number can be represented as a point in a two-dimensional coordinate system, which is known as the complex plane.</span></span> <span data-ttu-id="8aa88-107">複素数の実数部が x 軸 (水平軸) に配置され、虚数部は y 軸 (縦軸) に配置されています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-107">The real part of the complex number is positioned on the x-axis (the horizontal axis), and the imaginary part is positioned on the y-axis (the vertical axis).</span></span>  
  
 <span data-ttu-id="8aa88-108">また、極座標系を使用して、その絶対値に基づいて複合平面内の任意のポイントを表現することもできます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-108">Any point in the complex plane can also be expressed based on its absolute value, by using the polar coordinate system.</span></span> <span data-ttu-id="8aa88-109">極座標では、点は次の2つの数値によって特徴付けられます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-109">In polar coordinates, a point is characterized by two numbers:</span></span>  
  
-   <span data-ttu-id="8aa88-110">原点からのポイントまでの距離 (つまり、0、0、または x 軸と y 軸が交差する点) の大きさです (つまり、0、0、またはその位置)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-110">Its magnitude, which is the distance of the point from the origin (that is, 0,0, or the point at which the x-axis and the y-axis intersect).</span></span>  
  
-   <span data-ttu-id="8aa88-111">そのフェーズ。これは、実際の軸と、原点からポイントまでの線の間の角度です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-111">Its phase, which is the angle between the real axis and the line drawn from the origin to the point.</span></span>  
  
## <a name="instantiating-a-complex-number"></a><span data-ttu-id="8aa88-112">複素数のインスタンス化</span><span class="sxs-lookup"><span data-stu-id="8aa88-112">Instantiating a Complex Number</span></span>  
 <span data-ttu-id="8aa88-113">次のいずれかの方法で、複素数に値を割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-113">You can assign a value to a complex number in one of the following ways:</span></span>  
  
-   <span data-ttu-id="8aa88-114">2つの <xref:System.Double> 値をコンストラクターに渡す。</span><span class="sxs-lookup"><span data-stu-id="8aa88-114">By passing two <xref:System.Double> values to its constructor.</span></span> <span data-ttu-id="8aa88-115">最初の値は複素数の実数部を表し、2番目の値は虚数部を表します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-115">The first value represents the real part of the complex number, and the second value represents its imaginary part.</span></span> <span data-ttu-id="8aa88-116">これらの値は、2次元デカルト座標系の複素数の位置を表します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-116">These values represent the position of the complex number in the two-dimensional Cartesian coordinate system.</span></span>  
  
-   <span data-ttu-id="8aa88-117">Static (Visual Basic の`Shared` <xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=nameWithType>) を呼び出して、極座標から複素数を作成します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-117">By calling the static (`Shared` in Visual Basic) <xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=nameWithType> method to create a complex number from its polar coordinates.</span></span>  
  
-   <span data-ttu-id="8aa88-118"><xref:System.Byte>、<xref:System.SByte>、<xref:System.Int16>、<xref:System.UInt16>、<xref:System.Int32>、<xref:System.UInt32>、<xref:System.Int64>、<xref:System.UInt64>、または <xref:System.Single>の値を <xref:System.Double> オブジェクトに割り当てます。<xref:System.Numerics.Complex></span><span class="sxs-lookup"><span data-stu-id="8aa88-118">By assigning a <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Single>, or <xref:System.Double> value to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="8aa88-119">値は複素数の実数部になり、虚数部は0になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-119">The value becomes the real part of the complex number, and its imaginary part equals 0.</span></span>  
  
-   <span data-ttu-id="8aa88-120"><xref:System.Decimal> または <xref:System.Numerics.BigInteger> C#値を <xref:System.Numerics.Complex> オブジェクトにキャスト (in) または変換 (Visual Basic) する。</span><span class="sxs-lookup"><span data-stu-id="8aa88-120">By casting (in C#) or converting (in Visual Basic) a <xref:System.Decimal> or <xref:System.Numerics.BigInteger> value to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="8aa88-121">値は複素数の実数部になり、虚数部は0になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-121">The value becomes the real part of the complex number, and its imaginary part equals 0.</span></span>  
  
-   <span data-ttu-id="8aa88-122">メソッドまたは演算子によって返される複素数を <xref:System.Numerics.Complex> のオブジェクトに代入する。</span><span class="sxs-lookup"><span data-stu-id="8aa88-122">By assigning the complex number that is returned by a method or operator to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="8aa88-123">たとえば、<xref:System.Numerics.Complex.Add%2A?displayProperty=nameWithType> は2つの複素数の合計である複素数を返す静的メソッドで、<xref:System.Numerics.Complex.op_Addition%2A?displayProperty=nameWithType> 演算子は2つの複素数を加算し、その結果を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-123">For example, <xref:System.Numerics.Complex.Add%2A?displayProperty=nameWithType> is a static method that returns a complex number that is the sum of two complex numbers, and the <xref:System.Numerics.Complex.op_Addition%2A?displayProperty=nameWithType> operator adds two complex numbers and returns the result.</span></span>  
  
 <span data-ttu-id="8aa88-124">次の例では、複素数に値を代入するこれらの5つの方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-124">The following example demonstrates each of these five ways of assigning a value to a complex number.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/create1.cs#2)]
 [!code-vb[System.Numerics.Complex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/create1.vb#2)]  
  
## <a name="operations-with-complex-numbers"></a><span data-ttu-id="8aa88-125">複素数を持つ演算</span><span class="sxs-lookup"><span data-stu-id="8aa88-125">Operations with Complex Numbers</span></span>  
 <span data-ttu-id="8aa88-126">.NET Framework の <xref:System.Numerics.Complex> 構造には、次の機能を提供するメンバーが含まれています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-126">The <xref:System.Numerics.Complex> structure in the .NET Framework includes members that provide the following functionality:</span></span>  
  
-   <span data-ttu-id="8aa88-127">2つの複素数を比較して等しいかどうかを判断するメソッド。</span><span class="sxs-lookup"><span data-stu-id="8aa88-127">Methods to compare two complex numbers to determine whether they are equal.</span></span>  
  
-   <span data-ttu-id="8aa88-128">複素数に対して算術演算を実行する演算子。</span><span class="sxs-lookup"><span data-stu-id="8aa88-128">Operators to perform arithmetic operations on complex numbers.</span></span> <span data-ttu-id="8aa88-129"><xref:System.Numerics.Complex> 演算子を使用すると、複素数の加算、減算、乗算、除算、および単項否定を実行できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-129"><xref:System.Numerics.Complex> operators enable you to perform addition, subtraction, multiplication, division, and unary negation with complex numbers.</span></span>  
  
-   <span data-ttu-id="8aa88-130">複素数に対して他の数値演算を実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="8aa88-130">Methods to perform other numerical operations on complex numbers.</span></span> <span data-ttu-id="8aa88-131">4つの基本的な算術演算に加えて、複素数を指定された指数で累乗し、複素数の平方根を検索し、複素数の絶対値を取得することができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-131">In addition to the four basic arithmetic operations, you can raise a complex number to a specified power, find the square root of a complex number, and get the absolute value of a complex number.</span></span>  
  
-   <span data-ttu-id="8aa88-132">複素数に対して三角関数演算を実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="8aa88-132">Methods to perform trigonometric operations on complex numbers.</span></span> <span data-ttu-id="8aa88-133">たとえば、複素数によって表される角度のタンジェントを計算できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-133">For example, you can calculate the tangent of an angle represented by a complex number.</span></span>  
  
 <span data-ttu-id="8aa88-134"><xref:System.Numerics.Complex.Real%2A> と <xref:System.Numerics.Complex.Imaginary%2A> のプロパティは読み取り専用であるため、既存の <xref:System.Numerics.Complex> オブジェクトの値を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-134">Note that, because the <xref:System.Numerics.Complex.Real%2A> and  <xref:System.Numerics.Complex.Imaginary%2A> properties are read-only, you cannot modify the value of an existing <xref:System.Numerics.Complex> object.</span></span>  <span data-ttu-id="8aa88-135">戻り値が <xref:System.Numerics.Complex>型の場合、<xref:System.Numerics.Complex> の数値に対して操作を実行するすべてのメソッドは、新しい <xref:System.Numerics.Complex> 番号を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-135">All methods that perform an operation on a <xref:System.Numerics.Complex> number, if their return value is of type <xref:System.Numerics.Complex>, return a new <xref:System.Numerics.Complex> number.</span></span>  
  
## <a name="precision-and-complex-numbers"></a><span data-ttu-id="8aa88-136">有効桁数と複素数</span><span class="sxs-lookup"><span data-stu-id="8aa88-136">Precision and Complex Numbers</span></span>  
 <span data-ttu-id="8aa88-137">複素数の実数部と虚数部は、2つの倍精度浮動小数点値で表されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-137">The real and imaginary parts of a complex number are represented by two double-precision floating-point values.</span></span> <span data-ttu-id="8aa88-138">これは、<xref:System.Numerics.Complex> 値 (倍精度浮動小数点値など) が数値演算の結果として有効桁数を失う可能性があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-138">This means that <xref:System.Numerics.Complex> values, like double-precision floating-point values, can lose precision as a result of numerical operations.</span></span> <span data-ttu-id="8aa88-139">これは、2つの値の等価性が精度の低下によるものであっても、2つの <xref:System.Numerics.Complex> 値が等しいかどうかの厳密な比較は失敗する可能性があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-139">This means that strict comparisons for equality of two <xref:System.Numerics.Complex> values may fail, even if the difference between the two values is due to a loss of precision.</span></span> <span data-ttu-id="8aa88-140">詳細については、「 <xref:System.Double>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-140">For more information, see <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="8aa88-141">たとえば、数値の対数に対して指数演算を実行すると、元の数値が返されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-141">For example, performing exponentiation on the logarithm of a number should return the original number.</span></span> <span data-ttu-id="8aa88-142">ただし、次の例に示すように、浮動小数点値の精度が失われると、2つの値の差が若干異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-142">However, in some cases, the loss of precision of floating-point values can cause slight differences between the two values, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/precision1.cs#5)]
 [!code-vb[System.Numerics.Complex.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/precision1.vb#5)]  
  
 <span data-ttu-id="8aa88-143">同様に、次の例では、<xref:System.Numerics.Complex> 数の平方根を計算し、.NET Framework の32ビットおよび IA64 バージョンで多少異なる結果が生成されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-143">Similarly, the following example, which calculates the square root of a <xref:System.Numerics.Complex> number, produces slightly different results on the 32-bit and IA64 versions of the .NET Framework.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/precision1.cs#6)]
 [!code-vb[System.Numerics.Complex.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/precision1.vb#6)]  
  
## <a name="complex-numbers-infinity-and-nan"></a><span data-ttu-id="8aa88-144">複素数、無限大、および NaN</span><span class="sxs-lookup"><span data-stu-id="8aa88-144">Complex Numbers, Infinity, and NaN</span></span>  
 <span data-ttu-id="8aa88-145">複素数の実数部と虚数部は <xref:System.Double> 値で表されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-145">The real and imaginary parts of a complex number are represented by <xref:System.Double> values.</span></span> <span data-ttu-id="8aa88-146"><xref:System.Double.MinValue?displayProperty=nameWithType> から <xref:System.Double.MaxValue?displayProperty=nameWithType>までの範囲に加えて、複素数の実数部または虚数部は、<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>、<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>、または <xref:System.Double.NaN?displayProperty=nameWithType>の値を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-146">In addition to ranging from <xref:System.Double.MinValue?displayProperty=nameWithType> to <xref:System.Double.MaxValue?displayProperty=nameWithType>, the real or imaginary part of a complex number can have a value of <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, or <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8aa88-147"><xref:System.Double.PositiveInfinity?displayProperty=nameWithType>、<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>、および <xref:System.Double.NaN?displayProperty=nameWithType> はすべて算術演算または三角演算に反映されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-147"><xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, and <xref:System.Double.NaN?displayProperty=nameWithType> all propagate in any arithmetic or trigonometric operation.</span></span>  
  
 <span data-ttu-id="8aa88-148">次の例では、<xref:System.Numerics.Complex.Zero> による除算によって、実数部と虚数部が両方とも <xref:System.Double.NaN?displayProperty=nameWithType>複素数が生成されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-148">In the following example, division by <xref:System.Numerics.Complex.Zero> produces a complex number whose real and imaginary parts are both <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8aa88-149">結果として、この値を使用して乗算を実行すると、実数部と虚数部が <xref:System.Double.NaN?displayProperty=nameWithType>になる複素数も生成されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-149">As a result, performing multiplication with this value also produces a complex number whose real and imaginary parts are <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8aa88-150">同様に、<xref:System.Double> 型の範囲をオーバーフローする乗算を実行すると、実数部が <xref:System.Double.NaN?displayProperty=nameWithType>、虚数部が <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>である複素数が生成されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-150">Similarly, performing a multiplication that overflows the range of the <xref:System.Double> type produces a complex number whose real part is <xref:System.Double.NaN?displayProperty=nameWithType> and whose imaginary part is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8aa88-151">その後、この複素数で除算を実行すると、実数部が <xref:System.Double.NaN?displayProperty=nameWithType>、虚数部が <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>である複素数が返されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-151">Subsequently performing division with this complex number returns a complex number whose real part is <xref:System.Double.NaN?displayProperty=nameWithType> and whose imaginary part is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/nan1.cs#3)]
 [!code-vb[System.Numerics.Complex.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/nan1.vb#3)]  
  
 <span data-ttu-id="8aa88-152">複素数が無効であるか、または <xref:System.Double> データ型の範囲をオーバーフローする数値演算は、例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-152">Mathematical operations with complex numbers that are invalid or that overflow the range of the <xref:System.Double> data type do not throw an exception.</span></span> <span data-ttu-id="8aa88-153">代わりに、次の条件下では、<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>、<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>、または <xref:System.Double.NaN?displayProperty=nameWithType> が返されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-153">Instead, they return a <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, or <xref:System.Double.NaN?displayProperty=nameWithType> under the following conditions:</span></span>  
  
-   <span data-ttu-id="8aa88-154">正の数値を0で除算すると、<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>が返されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-154">The division of a positive number by zero returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="8aa88-155"><xref:System.Double> データ型の上限にオーバーフローする操作では、<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>が返されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-155">Any operation that overflows the upper bound of the <xref:System.Double> data type returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="8aa88-156">負の数を0で除算すると、<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>が返されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-156">The division of a negative number by zero returns <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="8aa88-157"><xref:System.Double> データ型の下限にオーバーフローする操作では、<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>が返されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-157">Any operation that overflows the lower bound of the <xref:System.Double> data type returns <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="8aa88-158">0による除算では <xref:System.Double.NaN?displayProperty=nameWithType>が返されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-158">The division of a zero by zero returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="8aa88-159">値が <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>、<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>、または <xref:System.Double.NaN?displayProperty=nameWithType> であるオペランドに対して実行される操作は、特定の操作に応じて <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>、<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>、または <xref:System.Double.NaN?displayProperty=nameWithType>を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-159">Any operation that is performed on operands whose values are <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, or <xref:System.Double.NaN?displayProperty=nameWithType> returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, or <xref:System.Double.NaN?displayProperty=nameWithType>, depending on the specific operation.</span></span>  
  
 <span data-ttu-id="8aa88-160">これは、メソッドによって実行されるすべての中間計算に適用されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-160">Note that this applies to any intermediate calculations performed by a method.</span></span> <span data-ttu-id="8aa88-161">たとえば、`new Complex(9e308, 9e308) and new Complex(2.5, 3.5)` の乗算では、式 (ac bd) + (ad + bc) i が使用されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-161">For example, the multiplication of `new Complex(9e308, 9e308) and new Complex(2.5, 3.5)` uses the formula (ac - bd) + (ad + bc)i.</span></span> <span data-ttu-id="8aa88-162">乗算の結果として得られる実際のコンポーネントの計算では、式 9e308 \* 2.5-9e308 \* 3.5 が評価されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-162">The calculation of the real component that results from the multiplication evaluates the expression 9e308 \* 2.5 - 9e308 \* 3.5.</span></span> <span data-ttu-id="8aa88-163">この式の各中間乗算は <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>を返し、<xref:System.Double.PositiveInfinity?displayProperty=nameWithType> から <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> を減算しようとすると、<xref:System.Double.NaN?displayProperty=nameWithType>が返されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-163">Each intermediate multiplication in this expression returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, and the attempt to subtract <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> from <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
## <a name="formatting-a-complex-number"></a><span data-ttu-id="8aa88-164">複素数の書式設定</span><span class="sxs-lookup"><span data-stu-id="8aa88-164">Formatting a Complex Number</span></span>  
 <span data-ttu-id="8aa88-165">既定では、複素数の文字列表現は、 *real*`,`*虚数*`)`の形式 `(`ます。ここで、 *real*と*虚数*は、複素数の実数部と虚数部を形成する <xref:System.Double> 値の文字列表現です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-165">By default, the string representation of a complex number takes the form `(`*real*`,` *imaginary*`)`, where *real* and *imaginary* are the string representations of the <xref:System.Double> values that form the complex number's real and imaginary components.</span></span> <span data-ttu-id="8aa88-166"><xref:System.Numerics.Complex.ToString%2A> メソッドの一部のオーバーロードでは、これらの <xref:System.Double> 値の文字列形式をカスタマイズして、特定のカルチャの書式指定規則を反映したり、標準またはカスタムの数値書式指定文字列で定義されている特定の形式で表示したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-166">Some overloads of the <xref:System.Numerics.Complex.ToString%2A> method allow customization of the string representations of these <xref:System.Double> values to reflect the formatting conventions of a particular culture or to appear in a particular format defined by a standard or custom numeric format string.</span></span> <span data-ttu-id="8aa88-167">(詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-167">(For more information, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).)</span></span>  
  
 <span data-ttu-id="8aa88-168">複素数の文字列表現を表現する一般的な方法の1つとして、a + bi という形式があります。ここで、は複素数の実数コンポーネントで、b は複素数の虚数部です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-168">One of the more common ways of expressing the string representation of a complex number takes the form a + bi, where a is the complex number's real component, and b is the complex number's imaginary component.</span></span> <span data-ttu-id="8aa88-169">電気工学では、通常、複素数が + bj として表現されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-169">In electrical engineering, a complex number is most commonly expressed as a + bj.</span></span> <span data-ttu-id="8aa88-170">この2つの形式のいずれかで、複素数の文字列形式を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-170">You can return the string representation of a complex number in either of these two forms.</span></span> <span data-ttu-id="8aa88-171">これを行うには、<xref:System.ICustomFormatter> と <xref:System.IFormatProvider> インターフェイスを実装してカスタム書式プロバイダーを定義し、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-171">To do this, define a custom format provider by implementing the <xref:System.ICustomFormatter> and <xref:System.IFormatProvider> interfaces, and then call the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8aa88-172">次の例では、+ bi または a + bj の形式の文字列として複素数を表す `ComplexFormatter` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-172">The following example defines a `ComplexFormatter` class that represents a complex number as a string in the form of either a + bi or a + bj.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/customfmt1.cs#1)]
 [!code-vb[System.Numerics.Complex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/customfmt1.vb#1)]  
  
 <span data-ttu-id="8aa88-173">次の例では、このカスタムフォーマッタを使用して、複素数の文字列形式を表示します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-173">The following example then uses this custom formatter to display the string representation of a complex number.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/customfmt1.cs#4)]
 [!code-vb[System.Numerics.Complex.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/customfmt1.vb#4)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Complex (double real, double imaginary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 real, float64 imaginary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (real As Double, imaginary As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Complex(double real, double imaginary);" />
      <MemberSignature Language="F#" Value="new System.Numerics.Complex : double * double -&gt; System.Numerics.Complex" Usage="new System.Numerics.Complex (real, imaginary)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="real" Type="System.Double" />
        <Parameter Name="imaginary" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="real"><span data-ttu-id="8aa88-174">複素数の実数部。</span><span class="sxs-lookup"><span data-stu-id="8aa88-174">The real part of the complex number.</span></span></param>
        <param name="imaginary"><span data-ttu-id="8aa88-175">複素数の虚数部。</span><span class="sxs-lookup"><span data-stu-id="8aa88-175">The imaginary part of the complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-176">指定した実数値と虚数値を使用して <see cref="T:System.Numerics.Complex" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-176">Initializes a new instance of the <see cref="T:System.Numerics.Complex" /> structure using the specified real and imaginary values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-177"><xref:System.Double>への明示的なキャストが必要なデータ型の場合、`real` 引数または `imaginary` 引数の精度が失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-177">The `real` or `imaginary` arguments may lose precision if they are data types that require an explicit cast to <xref:System.Double>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-178">次の例では、2つの複素数をインスタンス化し、加算、減算、乗算、除算演算で使用します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-178">The following example instantiates two complex numbers, and then uses them in addition, subtraction, multiplication, and division operations.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Numerics.Complex.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.ctor/vb/ctor1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static double Abs (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Abs(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Abs(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Complex) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Abs(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Abs : System.Numerics.Complex -&gt; double" Usage="System.Numerics.Complex.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-179">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-179">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-180">複素数の絶対値 (または大きさ) を取得します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-180">Gets the absolute value (or magnitude) of a complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-181"><paramref name="value" /> の絶対値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-181">The absolute value of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-182">複素数の絶対値は、その <xref:System.Numerics.Complex.Magnitude%2A> プロパティと同じです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-182">The absolute value of a complex number is equivalent to its <xref:System.Numerics.Complex.Magnitude%2A> property.</span></span> <span data-ttu-id="8aa88-183">実数 a + bi の絶対値は、次のように計算されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-183">The absolute value of a real number a + bi is calculated as follows:</span></span>  
  
-   <span data-ttu-id="8aa88-184">B = 0 の場合、結果は0になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-184">If b = 0, the result is 0.</span></span>  
  
-   <span data-ttu-id="8aa88-185">> B の場合、結果は \*<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(1 + b<sup>2</sup>/a<sup>2</sup>) になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-185">If a > b, the result is a \*<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(1 + b<sup>2</sup>/a<sup>2</sup>).</span></span>  
  
-   <span data-ttu-id="8aa88-186">B > a の場合、結果は b \* <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(1 +<sup>2</sup>/b<sup>2</sup>) になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-186">If b > a, the result is b \* <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(1 + a<sup>2</sup>/b<sup>2</sup>).</span></span>  
  
 <span data-ttu-id="8aa88-187">絶対値の計算によってオーバーフローが発生した場合、メソッドは <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> または <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>のいずれかを返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-187">If the calculation of the absolute value results in an overflow, the method returns either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8aa88-188"><xref:System.Numerics.Complex.Real%2A> または <xref:System.Numerics.Complex.Imaginary%2A> のいずれかのプロパティが <xref:System.Double.NaN?displayProperty=nameWithType>、もう一方のプロパティが <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> も <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>でもない場合、メソッドは <xref:System.Double.NaN?displayProperty=nameWithType>を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-188">If either the <xref:System.Numerics.Complex.Real%2A> or <xref:System.Numerics.Complex.Imaginary%2A> property is <xref:System.Double.NaN?displayProperty=nameWithType> and the other property is neither <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> nor <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, the method returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-189">次の例では、複素数の絶対値を計算し、その値が <xref:System.Numerics.Complex.Magnitude%2A> プロパティの値と等価であることを示します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-189">The following example calculates the absolute value of a complex number and demonstrates that it is equivalent to the value of the <xref:System.Numerics.Complex.Magnitude%2A> property.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.abs/cs/abs1.cs#1)]
 [!code-vb[System.Numerics.Complex.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.abs/vb/abs1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Magnitude" />
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Acos (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Acos(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Acos(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acos (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Acos(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Acos : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Acos value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-190">コサインを表す複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-190">A complex number that represents a cosine.</span></span></param>
        <summary><span data-ttu-id="8aa88-191">指定した複素数のアーク コサインである角度を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-191">Returns the angle that is the arc cosine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-192"><paramref name="value" /> のアーク コサインであるラジアン単位の角度。</span><span class="sxs-lookup"><span data-stu-id="8aa88-192">The angle, measured in radians, which is the arc cosine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-193">複素数の <xref:System.Numerics.Complex.Acos%2A> メソッドは、実数の <xref:System.Math.Acos%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-193">The <xref:System.Numerics.Complex.Acos%2A> method for complex numbers corresponds to the <xref:System.Math.Acos%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="8aa88-194"><xref:System.Numerics.Complex.Acos%2A> メソッドでは、次の式を使用します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-194">The <xref:System.Numerics.Complex.Acos%2A> method uses the following formula:</span></span>  
  
 <span data-ttu-id="8aa88-195">(-<xref:System.Numerics.Complex.ImaginaryOne>) \* <xref:System.Numerics.Complex.Log%2A>(`value` + <xref:System.Numerics.Complex.ImaginaryOne>\*<xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> - `value` \* )))`value`</span><span class="sxs-lookup"><span data-stu-id="8aa88-195">(-<xref:System.Numerics.Complex.ImaginaryOne>) \* <xref:System.Numerics.Complex.Log%2A>(`value` + <xref:System.Numerics.Complex.ImaginaryOne>\*<xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> - `value` \* `value`)))</span></span>    
  
   
  
## Examples  
 <span data-ttu-id="8aa88-196">次の例は、<xref:System.Numerics.Complex.Acos%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-196">The following example illustrates the <xref:System.Numerics.Complex.Acos%2A> method.</span></span> <span data-ttu-id="8aa88-197"><xref:System.Numerics.Complex.Acos%2A> メソッドによって返される値を <xref:System.Numerics.Complex.Cos%2A> メソッドに渡すと、元の <xref:System.Numerics.Complex> 値が返されることがわかります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-197">It shows that passing the value returned by the <xref:System.Numerics.Complex.Acos%2A> method to the <xref:System.Numerics.Complex.Cos%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Acos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.acos/cs/acos1.cs#1)]
 [!code-vb[System.Numerics.Complex.Acos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.acos/vb/acos1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Cos(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Acos(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <Docs>
        <summary><span data-ttu-id="8aa88-198">指定した数値を、指定した別の数値に加算します。数値の少なくとも 1 つは複素数であり、他の数値には倍精度実数を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-198">Adds a specified number to another specified number, where at least one of them is a complex number, and the other could be a double-precision real number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
## Remarks
 <span data-ttu-id="8aa88-199"><xref:System.Numerics.Complex.Add%2A> メソッドを使用すると、複雑な数値を含む加算演算を実行できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-199">The <xref:System.Numerics.Complex.Add%2A> methods allow performing addition operations that involve complex numbers.</span></span> 
  
 <span data-ttu-id="8aa88-200">メソッド呼び出しによって、実数または虚数コンポーネントのいずれかでオーバーフローが発生した場合、コンポーネントの値は <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> または <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-200">If the method call results in an overflow in either the real or imaginary component, the value of the component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8aa88-201">カスタム演算子をサポートしない言語では、<xref:System.Numerics.Complex.Add%2A> メソッドを使用して、複素数の加算を実行できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-201">Languages that do not support custom operators can use the <xref:System.Numerics.Complex.Add%2A> method to perform addition with complex numbers.</span></span>  

 <span data-ttu-id="8aa88-202">1つの double を受け取る <xref:System.Numerics.Complex.Add%2A> メソッドは、2つの複素数を受け取るメソッドよりも効率的です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-202">The <xref:System.Numerics.Complex.Add%2A> methods that receive one double are more efficient than the methods that receive two complex numbers.</span></span>
  
## Examples  

 <span data-ttu-id="8aa88-203">複素数を使用した加算の例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-203">The following example illustrates addition with complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.add/cs/add1.cs#1)]
 [!code-vb[System.Numerics.Complex.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.add/vb/add1.vb#1)]  
          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Add (double left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Add(float64 left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Add(System.Double,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Double, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Add(double left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Add : double * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Numerics.Complex" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-204">加算する倍精度実数値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-204">The double-precision real value to add.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-205">加算する複素数値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-205">The complex value to add.</span></span></param>
        <summary><span data-ttu-id="8aa88-206">倍精度実数を複素数に加算し、その結果を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-206">Adds a double-precision real number to a complex number and returns the result.</span></span></summary>
        <returns><span data-ttu-id="8aa88-207"><paramref name="left" /> と <paramref name="right" /> の合計。</span><span class="sxs-lookup"><span data-stu-id="8aa88-207">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="8aa88-208">実数 (複素数 a + 0i と見なすことができる) と複素数 (c + di) は、次のような形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-208">The addition of a real number (which can be regarded as the complex number a + 0i) and a complex number (c + di) takes the following form:</span></span>

<span data-ttu-id="8aa88-209">(a + c) + di</span><span class="sxs-lookup"><span data-stu-id="8aa88-209">(a + c) + di</span></span>
          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Addition(System.Double,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Add (System.Numerics.Complex left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Add(valuetype System.Numerics.Complex left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Complex, right As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Add(System::Numerics::Complex left, double right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-210">加算する複素数値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-210">The complex value to add.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-211">加算する倍精度実数値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-211">The double-precision real value to add.</span></span></param>
        <summary><span data-ttu-id="8aa88-212">複素数を倍精度実数に加算し、その結果を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-212">Adds a complex number to a double-precision real number and returns the result.</span></span></summary>
        <returns><span data-ttu-id="8aa88-213"><paramref name="left" /> と <paramref name="right" /> の合計。</span><span class="sxs-lookup"><span data-stu-id="8aa88-213">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="8aa88-214">複素数 (a + bi) と実数 (複素数 c + 0i と見なすことができる) は、次のような形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-214">The addition of a complex number (a + bi) and a real number (which can be regarded as the complex number c + 0i) takes the following form:</span></span>

<span data-ttu-id="8aa88-215">(a + c) + bi</span><span class="sxs-lookup"><span data-stu-id="8aa88-215">(a + c) + bi</span></span>
          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Add (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Add(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Add(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-216">加算する 1 番目の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-216">The first complex number to add.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-217">加算する 2 番目の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-217">The second complex number to add.</span></span></param>
        <summary><span data-ttu-id="8aa88-218">2 つの複素数を加算し、その結果を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-218">Adds two complex numbers and returns the result.</span></span></summary>
        <returns><span data-ttu-id="8aa88-219"><paramref name="left" /> と <paramref name="right" /> の合計。</span><span class="sxs-lookup"><span data-stu-id="8aa88-219">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-220">複素数、a + bi、および2番目の複素数 (c + di) の追加には、次の形式があります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-220">The addition of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="8aa88-221">(a + c) + (b + d) i.</span><span class="sxs-lookup"><span data-stu-id="8aa88-221">(a + c) + (b + d)i.</span></span>  

  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Asin (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Asin(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Asin(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asin (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Asin(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Asin : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Asin value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-222">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-222">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-223">指定した複素数のアーク サインである角度を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-223">Returns the angle that is the arc sine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-224"><paramref name="value" /> のアーク サインである角度。</span><span class="sxs-lookup"><span data-stu-id="8aa88-224">The angle which is the arc sine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-225">複素数の <xref:System.Numerics.Complex.Asin%2A> メソッドは、実数の <xref:System.Math.Asin%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-225">The <xref:System.Numerics.Complex.Asin%2A> method for complex numbers corresponds to the <xref:System.Math.Asin%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="8aa88-226"><xref:System.Numerics.Complex.Asin%2A> メソッドでは、次の式を使用します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-226">The <xref:System.Numerics.Complex.Asin%2A> method uses the following formula:</span></span>  
  
 <span data-ttu-id="8aa88-227">-<xref:System.Numerics.Complex.ImaginaryOne> \* <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.ImaginaryOne> \* 値 + <xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> 値 \* 値))</span><span class="sxs-lookup"><span data-stu-id="8aa88-227">-<xref:System.Numerics.Complex.ImaginaryOne> \* <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.ImaginaryOne> \* value + <xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> - value \* value))</span></span>    
  
   
  
## Examples  
 <span data-ttu-id="8aa88-228">次の例は、<xref:System.Numerics.Complex.Asin%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-228">The following example illustrates the <xref:System.Numerics.Complex.Asin%2A> method.</span></span> <span data-ttu-id="8aa88-229"><xref:System.Numerics.Complex.Asin%2A> メソッドによって返される値を <xref:System.Numerics.Complex.Sin%2A> メソッドに渡すと、元の <xref:System.Numerics.Complex> 値が返されることがわかります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-229">It shows that passing the value returned by the <xref:System.Numerics.Complex.Asin%2A> method to the <xref:System.Numerics.Complex.Sin%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Asin#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.asin/cs/asin1.cs#1)]
 [!code-vb[System.Numerics.Complex.Asin#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.asin/vb/asin1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Sin(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Asin(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Atan (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Atan(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Atan(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Atan(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Atan : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Atan value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-230">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-230">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-231">指定した複素数のアーク タンジェントである角度を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-231">Returns the angle that is the arc tangent of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-232"><paramref name="value" /> のアーク タンジェントである角度。</span><span class="sxs-lookup"><span data-stu-id="8aa88-232">The angle that is the arc tangent of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-233">複素数の <xref:System.Numerics.Complex.Atan%2A> メソッドは、実数の <xref:System.Math.Atan%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-233">The <xref:System.Numerics.Complex.Atan%2A> method for complex numbers corresponds to the <xref:System.Math.Atan%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="8aa88-234"><xref:System.Numerics.Complex.Atan%2A> メソッドでは、次の式を使用します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-234">The <xref:System.Numerics.Complex.Atan%2A> method uses the following formula:</span></span>  
  
 <span data-ttu-id="8aa88-235">(<xref:System.Numerics.Complex.ImaginaryOne>/新規複合 (2.0, 0.0)) \* (<xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One> - <xref:System.Numerics.Complex.ImaginaryOne> \* 値)-<xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One> + ImaginaryOne \* 値))</span><span class="sxs-lookup"><span data-stu-id="8aa88-235">(<xref:System.Numerics.Complex.ImaginaryOne> / new Complex(2.0, 0.0)) \* (<xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One> - <xref:System.Numerics.Complex.ImaginaryOne> \* value) - <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One> + ImaginaryOne \* value))</span></span>   
  
   
  
## Examples  
 <span data-ttu-id="8aa88-236">次の例は、<xref:System.Numerics.Complex.Atan%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-236">The following example illustrates the <xref:System.Numerics.Complex.Atan%2A> method.</span></span> <span data-ttu-id="8aa88-237"><xref:System.Numerics.Complex.Atan%2A> メソッドによって返される値を <xref:System.Numerics.Complex.Tan%2A> メソッドに渡すと、元の <xref:System.Numerics.Complex> 値が返されることがわかります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-237">It shows that passing the value returned by the <xref:System.Numerics.Complex.Atan%2A> method to the <xref:System.Numerics.Complex.Tan%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Atan#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.atan/cs/atan1.cs#1)]
 [!code-vb[System.Numerics.Complex.Atan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.atan/vb/atan1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Tan(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Atan(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Conjugate">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Conjugate (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Conjugate(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Conjugate (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Conjugate(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Conjugate : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Conjugate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-238">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-238">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-239">複素数の共役を計算し、結果を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-239">Computes the conjugate of a complex number and returns the result.</span></span></summary>
        <returns><span data-ttu-id="8aa88-240"><paramref name="value" /> の共役。</span><span class="sxs-lookup"><span data-stu-id="8aa88-240">The conjugate of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-241">複素数の共役は、虚数部の符号を反転します。つまり、虚数部に単項否定が適用されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-241">The conjugate of a complex number inverts the sign of the imaginary component; that is, it applies unary negation to the imaginary component.</span></span> <span data-ttu-id="8aa88-242">+ Bi が複素数の場合、共役は-bi です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-242">If a + bi is a complex number, its conjugate is a - bi.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-243">次の例では、2つの複素数の共役を表示します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-243">The following example displays the conjugate of two complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Conjugate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.conjugate/cs/conjugate1.cs#1)]
 [!code-vb[System.Numerics.Complex.Conjugate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.conjugate/vb/conjugate1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Cos (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Cos(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Cos(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cos (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Cos(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Cos : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Cos value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-244">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-244">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-245">指定した複素数のコサインを返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-245">Returns the cosine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-246"><paramref name="value" /> のコサイン。</span><span class="sxs-lookup"><span data-stu-id="8aa88-246">The cosine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-247">複素数の <xref:System.Numerics.Complex.Cos%2A> メソッドは、実数の <xref:System.Math.Cos%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-247">The <xref:System.Numerics.Complex.Cos%2A> method for complex numbers corresponds to the <xref:System.Math.Cos%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="8aa88-248"><xref:System.Numerics.Complex.Cos%2A> メソッドは、次の式を使用して、複素数 a + bi のコサインを計算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-248">The <xref:System.Numerics.Complex.Cos%2A> method uses the following formula to calculate the cosine of the complex number a + bi:</span></span>  
  
 <span data-ttu-id="8aa88-249">(<xref:System.Math.Cos%2A>(a) \* <xref:System.Math.Cosh%2A>(b)、-(<xref:System.Math.Sin%2A>(a) \* <xref:System.Math.Sinh%2A>(b))</span><span class="sxs-lookup"><span data-stu-id="8aa88-249">(<xref:System.Math.Cos%2A>(a) \* <xref:System.Math.Cosh%2A>(b), -(<xref:System.Math.Sin%2A>(a) \* <xref:System.Math.Sinh%2A>(b)))</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-250">次の例は、<xref:System.Numerics.Complex.Acos%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-250">The following example illustrates the <xref:System.Numerics.Complex.Acos%2A> method.</span></span> <span data-ttu-id="8aa88-251"><xref:System.Numerics.Complex.Acos%2A> メソッドによって返される値を <xref:System.Numerics.Complex.Cos%2A> メソッドに渡すと、元の <xref:System.Numerics.Complex> 値が返されることがわかります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-251">It shows that passing the value returned by the <xref:System.Numerics.Complex.Acos%2A> method to the <xref:System.Numerics.Complex.Cos%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Acos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.acos/cs/acos1.cs#1)]
 [!code-vb[System.Numerics.Complex.Acos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.acos/vb/acos1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Acos(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Cos(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Cosh (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Cosh(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Cosh(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cosh (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Cosh(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Cosh : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Cosh value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-252">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-252">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-253">指定した複素数のハイパーボリック コサインを返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-253">Returns the hyperbolic cosine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-254"><paramref name="value" /> のハイパーボリック コサイン。</span><span class="sxs-lookup"><span data-stu-id="8aa88-254">The hyperbolic cosine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-255">複素数の <xref:System.Numerics.Complex.Cosh%2A> メソッドは、実数の <xref:System.Math.Cosh%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-255">The <xref:System.Numerics.Complex.Cosh%2A> method for complex numbers corresponds to the <xref:System.Math.Cosh%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="8aa88-256"><xref:System.Numerics.Complex.Cosh%2A> メソッドは、次の式を使用して、複素数 a + bi のハイパーボリックコサインを計算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-256">The <xref:System.Numerics.Complex.Cosh%2A> method uses the following formula to calculate the hyperbolic cosine of the complex number a + bi:</span></span>  
  
 <span data-ttu-id="8aa88-257">(<xref:System.Math.Cosh%2A>(a) \* <xref:System.Math.Cos%2A>(b)、<xref:System.Math.Sinh%2A>(a) \* <xref:System.Math.Sin%2A>(b))</span><span class="sxs-lookup"><span data-stu-id="8aa88-257">(<xref:System.Math.Cosh%2A>(a) \* <xref:System.Math.Cos%2A>(b), <xref:System.Math.Sinh%2A>(a) \* <xref:System.Math.Sin%2A>(b))</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Cosh(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Divide">
      <Docs>
        <summary><span data-ttu-id="8aa88-258">指定した数値を、指定した別の数値で除算します。数値の少なくとも 1 つは複素数であり、他の数値には倍精度実数を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-258">Divides a specified number by another specified number, where at least one of them is a complex number, and the other could be a double-precision real number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
## Remarks
 <span data-ttu-id="8aa88-259"><xref:System.Numerics.Complex.Divide%2A> メソッドを使用すると、複雑な数値を含む除算演算を実行できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-259">The <xref:System.Numerics.Complex.Divide%2A> methods allow performing division operations that involve complex numbers.</span></span> 
  
 <span data-ttu-id="8aa88-260">商の計算によって、実数または虚数のいずれかのコンポーネントでオーバーフローが発生した場合、そのコンポーネントの値は <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> または <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-260">If the calculation of the quotient results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8aa88-261"><xref:System.Numerics.Complex.Divide%2A> メソッドは、カスタム演算子をサポートしていない言語で使用できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-261">The <xref:System.Numerics.Complex.Divide%2A> method can be used by languages that do not support custom operators.</span></span> <span data-ttu-id="8aa88-262">この動作は、除算演算子を使用した除算と同じです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-262">Its behavior is identical to division using the division operator.</span></span>  

 <span data-ttu-id="8aa88-263">1つの double を受け取る <xref:System.Numerics.Complex.Divide%2A> メソッドは、2つの複素数を受け取るメソッドよりも効率的です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-263">The <xref:System.Numerics.Complex.Divide%2A> methods that receive one double are more efficient than the methods that receive two complex numbers.</span></span>

## Examples  
 <span data-ttu-id="8aa88-264">次の例では、複素数の配列内の各要素によって複素数を除算しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-264">The following example divides a complex number by each element in an array of complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.divide/cs/divide1.cs#1)]
 [!code-vb[System.Numerics.Complex.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.divide/vb/divide1.vb#1)]  
   
          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Divide (double dividend, System.Numerics.Complex divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Divide(float64 dividend, valuetype System.Numerics.Complex divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Divide(System.Double,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (dividend As Double, divisor As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Divide(double dividend, System::Numerics::Complex divisor);" />
      <MemberSignature Language="F#" Value="static member Divide : double * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Divide (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="divisor" Type="System.Numerics.Complex" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="8aa88-265">被除数の倍精度実数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-265">The double-precision real number to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="8aa88-266">除数の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-266">The complex number to divide by.</span></span></param>
        <summary><span data-ttu-id="8aa88-267">倍精度実数を複素数で除算し、その結果を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-267">Divides one double-precision real number by a complex number and returns the result.</span></span></summary>
        <returns><span data-ttu-id="8aa88-268">除算の商。</span><span class="sxs-lookup"><span data-stu-id="8aa88-268">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="8aa88-269">実数の除算 (複素数 a + 0i と見なすことができます) と複素数 (c + di) では、次の形式が使用されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-269">The division of a real number (which can be regarded as the complex number a + 0i) and a complex number (c + di) takes the following form:</span></span>

 <span data-ttu-id="8aa88-270">(ac/(c<sup>2</sup> + d<sup>2</sup>)) + (ad/(c<sup>2</sup> + d<sup>2</sup>) i</span><span class="sxs-lookup"><span data-stu-id="8aa88-270">(ac / (c<sup>2</sup> + d<sup>2</sup>)) + (ad / (c<sup>2</sup> + d<sup>2</sup>)i</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Division(System.Double,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Divide (System.Numerics.Complex dividend, double divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Divide(valuetype System.Numerics.Complex dividend, float64 divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (dividend As Complex, divisor As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Divide(System::Numerics::Complex dividend, double divisor);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Divide (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="divisor" Type="System.Double" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="8aa88-271">被除数の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-271">The complex number to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="8aa88-272">除数の倍精度実数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-272">The double-precision real number to divide by.</span></span></param>
        <summary><span data-ttu-id="8aa88-273">複素数を倍精度実数で除算し、その結果を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-273">Divides one complex number by a double-precision real number and returns the result.</span></span></summary>
        <returns><span data-ttu-id="8aa88-274">除算の商。</span><span class="sxs-lookup"><span data-stu-id="8aa88-274">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="8aa88-275">複素数 (a + bi) と実数 (複素数 c + 0i と見なすことができる) は、次のような形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-275">The division of a complex number (a + bi) and a real number (which can be regarded as the complex number c + 0i) takes the following form:</span></span>

 <span data-ttu-id="8aa88-276">(ac/c<sup>2</sup>) + (bc/c<sup>2</sup>) i</span><span class="sxs-lookup"><span data-stu-id="8aa88-276">(ac / c<sup>2</sup>) + (bc / c<sup>2</sup>)i</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Divide (System.Numerics.Complex dividend, System.Numerics.Complex divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Divide(valuetype System.Numerics.Complex dividend, valuetype System.Numerics.Complex divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (dividend As Complex, divisor As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Divide(System::Numerics::Complex dividend, System::Numerics::Complex divisor);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Divide (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.Complex" />
        <Parameter Name="divisor" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="8aa88-277">被除数の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-277">The complex number to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="8aa88-278">除数の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-278">The complex number to divide by.</span></span></param>
        <summary><span data-ttu-id="8aa88-279">複素数を別の複素数で除算し、その結果を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-279">Divides one complex number by another and returns the result.</span></span></summary>
        <returns><span data-ttu-id="8aa88-280">除算の商。</span><span class="sxs-lookup"><span data-stu-id="8aa88-280">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-281">複素数 (a + bi) を2番目の複素数 (c + di) で除算すると、次のような形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-281">The division of a complex number, a + bi, by a second complex number, number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="8aa88-282">((ac + bd)/(c<sup>2</sup> + d<sup>2</sup>)) + ((bc-ad)/(c<sup>2</sup> + d<sup>2</sup>) i</span><span class="sxs-lookup"><span data-stu-id="8aa88-282">((ac + bd) / (c<sup>2</sup> + d<sup>2</sup>)) + ((bc - ad) / (c<sup>2</sup> + d<sup>2</sup>)i</span></span>  
    
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8aa88-283">2 つの複素数が等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-283">Returns a value that indicates whether two complex numbers are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Numerics.Complex -&gt; bool" Usage="complex.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-284">比較対象の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-284">The complex number to compare.</span></span></param>
        <summary><span data-ttu-id="8aa88-285">現在のインスタンスの値と指定した複素数の値が等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-285">Returns a value that indicates whether the current instance and a specified complex number have the same value.</span></span></summary>
        <returns><span data-ttu-id="8aa88-286">この複素数の値と <see langword="true" /> の値が等しい場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8aa88-286"><see langword="true" /> if this complex number and <paramref name="value" /> have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-287"><xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> メソッドは、<xref:System.Numerics.Complex> 構造体の <xref:System.IEquatable%601> の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-287">The <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method provides the <xref:System.IEquatable%601> implementation for the <xref:System.Numerics.Complex> structure.</span></span> <span data-ttu-id="8aa88-288">パラメーターを複素数に変換する必要がないため、<xref:System.Numerics.Complex.Equals%28System.Object%29> メソッドよりも若干優れています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-288">It performs slightly better than <xref:System.Numerics.Complex.Equals%28System.Object%29> method because it does not have to convert its parameter to a complex number.</span></span>  
  
 <span data-ttu-id="8aa88-289">2つの複素数は、実数部が等しく、虚数部が等しい場合に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-289">Two complex numbers are equal if their real parts are equal and their imaginary parts are equal.</span></span> <span data-ttu-id="8aa88-290"><xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> メソッドは、次の式と同じです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-290">The <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method is equivalent to the following expression:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals1.cs#1)]
 [!code-vb[System.Numerics.Complex.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="8aa88-291"><see cref="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" /> メソッドは注意して使用してください。これは、実際のコンポーネントと虚数部の要素の有効桁数が異なるため、同じ意味を持つ2つの値が等しくないと見なされる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-291">Use the <see cref="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" /> method with caution, because two values that are apparently equivalent can be considered unequal due to the differing precision of their real and imaginary components.</span></span> <span data-ttu-id="8aa88-292">次の例では、 <c>(3.33333, 0.142857)</c>と<c>(10/3, 1/7)</c>が等しくないことを報告しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-292">The following example reports that <c>(3.33333, 0.142857)</c> and <c>(10/3, 1/7)</c> are not equal.</span></span>  
  
<span data-ttu-id="8aa88-293">[! code-csharp..[....](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision1.cs#4)....................][! コード-vb..[...........](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision1.vb#4).............]</span><span class="sxs-lookup"><span data-stu-id="8aa88-293">[!code-csharp[System.Numerics.Complex.Equals#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision1.cs#4)] [!code-vb[System.Numerics.Complex.Equals#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision1.vb#4)]</span></span> 
<span data-ttu-id="8aa88-294">推奨される方法の1つは、値が等しいかどうかを比較するのではなく、2つの値の差に許容される余白を定義することです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-294">One recommended technique is to define an acceptable margin of difference between the two values (such as .01% of one of the values' real and imaginary components) instead of comparing the values for equality.</span></span> <span data-ttu-id="8aa88-295">2つの値の差の絶対値がその余白以下の場合は、精度の違いによって違いが生じる可能性があります。したがって、値が等しい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-295">If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to a difference in precision, and, therefore, the values are likely to be equal.</span></span> <span data-ttu-id="8aa88-296">次の例では、この手法を使用して、前のコード例の2つの複合値が等しくないことを比較しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-296">The following example uses this technique to compare the two complex values that the previous code example found to be unequal.</span></span> <span data-ttu-id="8aa88-297">2つの複素数が等しいことを検出します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-297">It finds the two complex numbers to be equal.</span></span>  
  
<span data-ttu-id="8aa88-298">[! code-csharp..[..](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision1.cs#5)......................][! コード-vb の場合は[# 5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision1.vb#5)]</span><span class="sxs-lookup"><span data-stu-id="8aa88-298">[!code-csharp[System.Numerics.Complex.Equals#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision1.cs#5)] [!code-vb[System.Numerics.Complex.Equals#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision1.vb#5)]</span></span></para></block>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="complex.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="8aa88-299">比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-299">The object to compare.</span></span></param>
        <summary><span data-ttu-id="8aa88-300">現在のインスタンスの値と指定されたオブジェクトの値が等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-300">Returns a value that indicates whether the current instance and a specified object have the same value.</span></span></summary>
        <returns><span data-ttu-id="8aa88-301"><see langword="true" /> パラメーターが <paramref name="obj" /> オブジェクトであるか <see cref="T:System.Numerics.Complex" /> オブジェクトに暗黙的に変換できる型であり、その値が現在の <see cref="T:System.Numerics.Complex" /> オブジェクトの値と等しい場合は <see cref="T:System.Numerics.Complex" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8aa88-301"><see langword="true" /> if the <paramref name="obj" /> parameter is a <see cref="T:System.Numerics.Complex" /> object or a type capable of implicit conversion to a <see cref="T:System.Numerics.Complex" /> object, and its value is equal to the current <see cref="T:System.Numerics.Complex" /> object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-302">2つの複素数は、実数部が等しく、虚数部が等しい場合に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-302">Two complex numbers are equal if their real parts are equal and their imaginary parts are equal.</span></span> <span data-ttu-id="8aa88-303"><xref:System.Numerics.Complex.Equals%28System.Object%29> メソッドは、次の式と同じです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-303">The <xref:System.Numerics.Complex.Equals%28System.Object%29> method is equivalent to the following expression:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals1.cs#2)]
 [!code-vb[System.Numerics.Complex.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals1.vb#2)]  
  
 <span data-ttu-id="8aa88-304">`obj` パラメーターが <xref:System.Numerics.Complex> オブジェクトではなく、暗黙的な変換が定義されているデータ型である場合、<xref:System.Numerics.Complex.Equals%28System.Object%29> メソッドは、比較を実行する前に、実数部が <xref:System.Numerics.Complex> の値と等しく、虚数部が0である `obj` オブジェクトに `obj` を変換します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-304">If the `obj` parameter is not a <xref:System.Numerics.Complex> object, but it is a data type for which an implicit conversion is defined, the <xref:System.Numerics.Complex.Equals%28System.Object%29> method converts `obj` to a <xref:System.Numerics.Complex> object whose real part is equal to the value of `obj` and whose imaginary part is equal to zero before it performs the comparison.</span></span> <span data-ttu-id="8aa88-305">次の例は、複素数と倍精度浮動小数点値が等しいことを検出することによってこれを示しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-305">The following example illustrates this by finding that a complex number and a double-precision floating-point value are equal.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals3.cs#6)]
 [!code-vb[System.Numerics.Complex.Equals#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals3.vb#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="8aa88-306"><see cref="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" /> メソッドは注意して使用してください。これは、実際のコンポーネントと虚数部の要素の有効桁数が異なるため、同じ意味を持つ2つの値が等しくないと見なされる可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-306">Use the <see cref="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" /> method with caution, because two values that are apparently equivalent can be considered unequal due to the differing precision of their real and imaginary components.</span></span> <span data-ttu-id="8aa88-307">比較を実行する前に <paramref name="obj" /> を <see cref="T:System.Double" /> に変換する必要がある場合は、問題を accentuated することができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-307">The problem can be accentuated if <paramref name="obj" /> must be converted to a <see cref="T:System.Double" /> before performing the comparison.</span></span> <span data-ttu-id="8aa88-308">次の例では、実数部分が <see cref="T:System.Single" /> 値に等しいと思われる複素数を、その <see cref="T:System.Single" /> 値と比較しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-308">The following example compares a complex number whose real component appears to be equal to a <see cref="T:System.Single" /> value with that <see cref="T:System.Single" /> value.</span></span> <span data-ttu-id="8aa88-309">出力が示すように、等しいかどうかの比較によって <see langword="False" />が返されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-309">As the output shows, the comparison for equality returns <see langword="False" />.</span></span>  
  
<span data-ttu-id="8aa88-310">[! code-csharp..[.....](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals4.cs#8)....................[! コード-vb..[.....](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals4.vb#8)....................</span><span class="sxs-lookup"><span data-stu-id="8aa88-310">[!code-csharp[System.Numerics.Complex.Equals#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals4.cs#8)] [!code-vb[System.Numerics.Complex.Equals#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals4.vb#8)]</span></span> 
<span data-ttu-id="8aa88-311">推奨される方法の1つは、値が等しいかどうかを比較するのではなく、2つの値の差に許容される余白を定義することです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-311">One recommended technique is to define an acceptable margin of difference between the two values (such as .01% of one of the values' real and imaginary components) instead of comparing the values for equality.</span></span> <span data-ttu-id="8aa88-312">2つの値の差の絶対値がその余白以下である場合は、精度の違いによって違いが生じる可能性が高いため、値が等しい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-312">If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to a difference in precision and, therefore, the values are likely to be equal.</span></span> <span data-ttu-id="8aa88-313">次の例では、この方法を使用して、前のコード例の2つの値が等しくないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-313">The following example uses this technique to compare the two values that the previous code example found to be unequal.</span></span> <span data-ttu-id="8aa88-314">同じであることが検出されました。</span><span class="sxs-lookup"><span data-stu-id="8aa88-314">It now finds them to be equal.</span></span>  
  
<span data-ttu-id="8aa88-315">[! code-csharp..[....](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision2.cs#7)....................][! コード-vb..[.......](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision2.vb#7)..................</span><span class="sxs-lookup"><span data-stu-id="8aa88-315">[!code-csharp[System.Numerics.Complex.Equals#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision2.cs#7)] [!code-vb[System.Numerics.Complex.Equals#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision2.vb#7)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Exp (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Exp(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Exp(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Exp(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Exp : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Exp value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-316">累乗に使用する値を指定する複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-316">A complex number that specifies a power.</span></span></param>
        <summary><span data-ttu-id="8aa88-317"><see langword="e" /> を指定した複素数で累乗した値を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-317">Returns <see langword="e" /> raised to the power specified by a complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-318">数値 <see langword="e" /> を <paramref name="value" /> で累乗した値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-318">The number <see langword="e" /> raised to the power <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-319"><xref:System.Numerics.Complex.Pow%2A> メソッドを使用して、他のベースの累乗を計算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-319">Use the <xref:System.Numerics.Complex.Pow%2A> method to calculate the powers of other bases.</span></span>  
  
 <span data-ttu-id="8aa88-320">複素数の <xref:System.Numerics.Complex.Exp%2A> メソッドは、実数の <xref:System.Math.Exp%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-320">The <xref:System.Numerics.Complex.Exp%2A> method for complex numbers corresponds to the <xref:System.Math.Exp%2A?displayProperty=nameWithType> method for real numbers.</span></span> <span data-ttu-id="8aa88-321"><xref:System.Numerics.Complex.Exp%2A> は <xref:System.Numerics.Complex.Log%2A>の逆です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-321"><xref:System.Numerics.Complex.Exp%2A> is the inverse of <xref:System.Numerics.Complex.Log%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-322">次の例は、<xref:System.Numerics.Complex.Exp%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-322">The following example illustrates the <xref:System.Numerics.Complex.Exp%2A> method.</span></span> <span data-ttu-id="8aa88-323">この例では、<xref:System.Double> データ型の有効桁数が不足しているため、<xref:System.Numerics.Complex.Log%2A> メソッドによって返された値を <xref:System.Numerics.Complex.Exp%2A> メソッドに渡すと、元の <xref:System.Numerics.Complex> 値が返されることがわかります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-323">It shows that, with some allowance for the lack of precision of the <xref:System.Double> data type, passing the value returned by the <xref:System.Numerics.Complex.Log%2A> method to the <xref:System.Numerics.Complex.Exp%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.log/cs/log1.cs#1)] 
 [!code-vb[System.Numerics.Complex.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.log/vb/log1.vb#1)]   
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Exp(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromPolarCoordinates">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex FromPolarCoordinates (double magnitude, double phase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex FromPolarCoordinates(float64 magnitude, float64 phase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromPolarCoordinates (magnitude As Double, phase As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex FromPolarCoordinates(double magnitude, double phase);" />
      <MemberSignature Language="F#" Value="static member FromPolarCoordinates : double * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.FromPolarCoordinates (magnitude, phase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="magnitude" Type="System.Double" />
        <Parameter Name="phase" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="magnitude"><span data-ttu-id="8aa88-324">原点 (X 軸と Y 軸の交点) から値までの距離である大きさ。</span><span class="sxs-lookup"><span data-stu-id="8aa88-324">The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</span></span></param>
        <param name="phase"><span data-ttu-id="8aa88-325">線から水平軸までの角度であるフェーズ (ラジアン単位)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-325">The phase, which is the angle from the line to the horizontal axis, measured in radians.</span></span></param>
        <summary><span data-ttu-id="8aa88-326">ポイントの極座標から複素数を作成します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-326">Creates a complex number from a point's polar coordinates.</span></span></summary>
        <returns><span data-ttu-id="8aa88-327">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-327">A complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-328"><xref:System.Numerics.Complex.FromPolarCoordinates%2A> メソッドは、極座標に基づいて複素数をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-328">The <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method instantiates a complex number based on its polar coordinates.</span></span>  
  
 <span data-ttu-id="8aa88-329">複合平面には複数の点が表現されているため、<xref:System.Numerics.Complex.FromPolarCoordinates%2A> メソッドの戻り値は正規化されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-329">Because there are multiple representations of a point on a complex plane, the return value of the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method is normalized.</span></span> <span data-ttu-id="8aa88-330">大きさは正の数に正規化され、フェーズは-<xref:System.Math.PI> の範囲の値に正規化されて <xref:System.Math.PI>します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-330">The magnitude is normalized to a positive number, and the phase is normalized to a value in the range of -<xref:System.Math.PI> to <xref:System.Math.PI>.</span></span> <span data-ttu-id="8aa88-331">その結果、結果として得られる複素数の <xref:System.Numerics.Complex.Phase%2A> および <xref:System.Numerics.Complex.Magnitude%2A> プロパティの値が、`magnitude` パラメーターと `phase` パラメーターの元の値と等しくならない場合があります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-331">As a result, the values of the <xref:System.Numerics.Complex.Phase%2A> and <xref:System.Numerics.Complex.Magnitude%2A> properties of the resulting complex number may not equal the original values of the `magnitude` and `phase` parameters.</span></span>  
  
 <span data-ttu-id="8aa88-332">`phase` パラメーターの度数からラジアンに値を変換するには、<xref:System.Math.PI?displayProperty=nameWithType>/180 で乗算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-332">To convert a value from degrees to radians for the `phase` parameter, multiply it by <xref:System.Math.PI?displayProperty=nameWithType>/180.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-333">次の例では、<xref:System.Numerics.Complex.FromPolarCoordinates%2A> メソッドを使用して、極座標に基づいて複素数をインスタンス化し、その <xref:System.Numerics.Complex.Magnitude%2A> と <xref:System.Numerics.Complex.Phase%2A> プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-333">The following example uses the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method to instantiate a complex number based on its polar coordinates and then displays the value of its <xref:System.Numerics.Complex.Magnitude%2A> and <xref:System.Numerics.Complex.Phase%2A> properties.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Phase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.phase/cs/phase1.cs#1)]
 [!code-vb[System.Numerics.Complex.Phase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.phase/vb/phase1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Magnitude" />
        <altmember cref="P:System.Numerics.Complex.Phase" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="complex.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8aa88-334">現在の <see cref="T:System.Numerics.Complex" /> オブジェクトのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-334">Returns the hash code for the current <see cref="T:System.Numerics.Complex" /> object.</span></span></summary>
        <returns><span data-ttu-id="8aa88-335">32 ビット符号付き整数ハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="8aa88-335">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Imaginary">
      <MemberSignature Language="C#" Value="public double Imaginary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Imaginary" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Complex.Imaginary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Imaginary As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Imaginary { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Imaginary : double" Usage="System.Numerics.Complex.Imaginary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8aa88-336">現在の <see cref="T:System.Numerics.Complex" /> オブジェクトの虚数部を取得します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-336">Gets the imaginary component of the current <see cref="T:System.Numerics.Complex" /> object.</span></span></summary>
        <value><span data-ttu-id="8aa88-337">複素数の虚数部。</span><span class="sxs-lookup"><span data-stu-id="8aa88-337">The imaginary component of a complex number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-338">複素数 a + bi が指定されている場合、<xref:System.Numerics.Complex.Imaginary%2A> プロパティは b の値を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-338">Given a complex number a + bi, the <xref:System.Numerics.Complex.Imaginary%2A> property returns the value of b.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-339">次の例では、<xref:System.Numerics.Complex> オブジェクトの配列をインスタンス化し、それぞれの実数部と虚数部を a + bi の形式で表示します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-339">The following example instantiates an array of <xref:System.Numerics.Complex> objects and displays the real and imaginary components of each in the form a + bi.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Real#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.real/cs/real1.cs#1)]
 [!code-vb[System.Numerics.Complex.Real#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.real/vb/real1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Real" />
      </Docs>
    </Member>
    <Member MemberName="ImaginaryOne">
      <MemberSignature Language="C#" Value="public static readonly System.Numerics.Complex ImaginaryOne;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Numerics.Complex ImaginaryOne" />
      <MemberSignature Language="DocId" Value="F:System.Numerics.Complex.ImaginaryOne" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ImaginaryOne As Complex " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Numerics::Complex ImaginaryOne;" />
      <MemberSignature Language="F#" Value=" staticval mutable ImaginaryOne : System.Numerics.Complex" Usage="System.Numerics.Complex.ImaginaryOne" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8aa88-340">実数が 0 で虚数が 1 の新しい <see cref="T:System.Numerics.Complex" /> インスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-340">Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to zero and an imaginary number equal to one.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8aa88-341">次の例では、<xref:System.Numerics.Complex.ImaginaryOne> プロパティを使用して <xref:System.Numerics.Complex> 値をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-341">The following example instantiates a <xref:System.Numerics.Complex> value by using the <xref:System.Numerics.Complex.ImaginaryOne> property.</span></span> <span data-ttu-id="8aa88-342">次に、この値を、実際の部分がゼロ、虚数部が1と等しい <xref:System.Numerics.Complex> コンストラクターを呼び出すことによってインスタンス化される別の値と比較します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-342">It then compares this value to another value that is instantiated by calling the <xref:System.Numerics.Complex> constructor with a real part equal to zero and an imaginary part equal to one.</span></span> <span data-ttu-id="8aa88-343">この例の出力結果が示すように、2つの値は同じです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-343">As the output from the example shows, the two values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ImaginaryOne#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.imaginaryone/cs/imaginaryone1.cs#1)]
 [!code-vb[System.Numerics.Complex.ImaginaryOne#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.imaginaryone/vb/imaginaryone1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Numerics.Complex.One" />
        <altmember cref="F:System.Numerics.Complex.Zero" />
      </Docs>
    </Member>
    <Member MemberName="Infinity">
      <MemberSignature Language="C#" Value="public static readonly System.Numerics.Complex Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Numerics.Complex Infinity" />
      <MemberSignature Language="DocId" Value="F:System.Numerics.Complex.Infinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Infinity As Complex " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Numerics::Complex Infinity;" />
      <MemberSignature Language="F#" Value=" staticval mutable Infinity : System.Numerics.Complex" Usage="System.Numerics.Complex.Infinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8aa88-344">無限大を複素数として表します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-344">Represents infinity as a complex number.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinite">
      <MemberSignature Language="C#" Value="public static bool IsFinite (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFinite(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.IsFinite(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFinite (value As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFinite(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member IsFinite : System.Numerics.Complex -&gt; bool" Usage="System.Numerics.Complex.IsFinite value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-345">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-345">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-346">指定した複素数が有限かどうかを判定します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-346">Determines whether the specified complex number is finite.</span></span></summary>
        <returns><span data-ttu-id="8aa88-347">実数部と虚数部の両方が有限 (ゼロ、非正規、または正規) の場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8aa88-347"><see langword="true" /> if both, the real and imaginary parts are finite (zero, subnormal or normal); otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInfinity">
      <MemberSignature Language="C#" Value="public static bool IsInfinity (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInfinity(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.IsInfinity(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInfinity (value As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInfinity(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member IsInfinity : System.Numerics.Complex -&gt; bool" Usage="System.Numerics.Complex.IsInfinity value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-348">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-348">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-349">指定した複素数が無限大と評価されるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-349">Returns a value indicating whether the specified complex number evaluates to infinity.</span></span></summary>
        <returns><span data-ttu-id="8aa88-350">実数部または虚数部のどちらかが <see langword="true" /> または <see cref="F:System.Double.PositiveInfinity" /> の場合は <see cref="F:System.Double.NegativeInfinity" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8aa88-350"><see langword="true" /> if either, the real or imaginary part are <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="C#" Value="public static bool IsNaN (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNaN(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.IsNaN(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNaN (value As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNaN(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member IsNaN : System.Numerics.Complex -&gt; bool" Usage="System.Numerics.Complex.IsNaN value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-351">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-351">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-352">指定した複素数インスタンスが非数値 (NaN) かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-352">Returns a value that indicates whether the specified complex instance is not a number (NaN).</span></span></summary>
        <returns><span data-ttu-id="8aa88-353">指定した値が有限でも無限でもない場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8aa88-353"><see langword="true" /> if the specified value is not finite nor infinite; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8aa88-354">複素数の対数を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-354">Returns the logarithm of a complex number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Log (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Log(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Log(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Log(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Log value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-355">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-355">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-356">指定した複素数の自然 (底 <see langword="e" />) 対数を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-356">Returns the natural (base <see langword="e" />) logarithm of a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-357"><see langword="e" /> の自然 (底 <paramref name="value" />) 対数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-357">The natural (base <see langword="e" />) logarithm of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-358">複素数の <xref:System.Numerics.Complex.Log%28System.Numerics.Complex%29> メソッドは、実数の <xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-358">The <xref:System.Numerics.Complex.Log%28System.Numerics.Complex%29> method for complex numbers corresponds to the <xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType> method for real numbers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-359">次の例は、<xref:System.Numerics.Complex.Log%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-359">The following example illustrates the <xref:System.Numerics.Complex.Log%2A> method.</span></span> <span data-ttu-id="8aa88-360">この例では、<xref:System.Double> データ型の有効桁数が不足しているため、<xref:System.Numerics.Complex.Log%2A> メソッドによって返された値を <xref:System.Numerics.Complex.Exp%2A> メソッドに渡すと、元の <xref:System.Numerics.Complex> 値が返されることがわかります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-360">It shows that, with some allowance for the lack of precision of the <xref:System.Double> data type, passing the value returned by the <xref:System.Numerics.Complex.Log%2A> method to the <xref:System.Numerics.Complex.Exp%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.log/cs/log1.cs#1)] 
 [!code-vb[System.Numerics.Complex.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.log/vb/log1.vb#1)]   
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Log(System.Double)" />
        <altmember cref="M:System.Numerics.Complex.Exp(System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Log (System.Numerics.Complex value, double baseValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Log(valuetype System.Numerics.Complex value, float64 baseValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As Complex, baseValue As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Log(System::Numerics::Complex value, double baseValue);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Log (value, baseValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
        <Parameter Name="baseValue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-361">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-361">A complex number.</span></span></param>
        <param name="baseValue"><span data-ttu-id="8aa88-362">対数の底。</span><span class="sxs-lookup"><span data-stu-id="8aa88-362">The base of the logarithm.</span></span></param>
        <summary><span data-ttu-id="8aa88-363">指定した複素数の指定した底での対数を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-363">Returns the logarithm of a specified complex number in a specified base.</span></span></summary>
        <returns><span data-ttu-id="8aa88-364"><paramref name="value" /> の底 <paramref name="baseValue" /> での対数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-364">The logarithm of <paramref name="value" /> in base <paramref name="baseValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-365">複素数の <xref:System.Numerics.Complex.Log%28System.Numerics.Complex%2CSystem.Double%29> メソッドは、実数の <xref:System.Math.Log%28System.Double%2CSystem.Double%29?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-365">The <xref:System.Numerics.Complex.Log%28System.Numerics.Complex%2CSystem.Double%29> method for complex numbers corresponds to the <xref:System.Math.Log%28System.Double%2CSystem.Double%29?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Log10 (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Log10(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Log10(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Log10(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Log10 : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Log10 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-366">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-366">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-367">指定した複素数の底 10 の対数を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-367">Returns the base-10 logarithm of a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-368"><paramref name="value" /> の底 10 の対数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-368">The base-10 logarithm of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-369">複素数の <xref:System.Numerics.Complex.Log10%2A> メソッドは、実数の <xref:System.Math.Log10%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-369">The <xref:System.Numerics.Complex.Log10%2A> method for complex numbers corresponds to the <xref:System.Math.Log10%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Magnitude">
      <MemberSignature Language="C#" Value="public double Magnitude { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Magnitude" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Complex.Magnitude" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Magnitude As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Magnitude { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Magnitude : double" Usage="System.Numerics.Complex.Magnitude" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8aa88-370">複素数の大きさ (または絶対値) を取得します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-370">Gets the magnitude (or absolute value) of a complex number.</span></span></summary>
        <value><span data-ttu-id="8aa88-371">現在のインスタンスの大きさ。</span><span class="sxs-lookup"><span data-stu-id="8aa88-371">The magnitude of the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-372"><xref:System.Numerics.Complex.Magnitude%2A> プロパティは、複素数の絶対値に相当します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-372">The <xref:System.Numerics.Complex.Magnitude%2A> property is equivalent to the absolute value of a complex number.</span></span> <span data-ttu-id="8aa88-373">これは、原点 (x 軸とデカルト座標系の y 軸の交差部分) から複素数が表す2次元の点までの距離を指定します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-373">It specifies the distance from the origin (the intersection of the x-axis and the y-axis in the Cartesian coordinate system) to the two-dimensional point represented by a complex number.</span></span> <span data-ttu-id="8aa88-374">絶対値は次のように計算されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-374">The absolute value is calculated as follows:</span></span>  
  
 <span data-ttu-id="8aa88-375">&#124;a + bi &#124; = <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(a \* a + b \* b)</span><span class="sxs-lookup"><span data-stu-id="8aa88-375">&#124; a + bi &#124; = <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(a \* a + b \* b)</span></span>  
  
 <span data-ttu-id="8aa88-376">絶対値の計算によってオーバーフローが発生した場合、このプロパティは <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> または <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>のいずれかを返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-376">If the calculation of the absolute value results in an overflow, this property returns either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8aa88-377"><xref:System.Numerics.Complex.Magnitude%2A> と <xref:System.Numerics.Complex.Phase%2A> の各プロパティは、極座標系の複素数を表す点の位置を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-377">The <xref:System.Numerics.Complex.Magnitude%2A> and the <xref:System.Numerics.Complex.Phase%2A> properties define the position of a point that represents a complex number in the polar coordinate system.</span></span>  
  
 <span data-ttu-id="8aa88-378"><xref:System.Numerics.Complex.FromPolarCoordinates%2A> メソッドを呼び出すことによって、デカルト座標ではなく極座標値に基づいて複素数をインスタンス化できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-378">You can instantiate a complex number based on its polar coordinates instead of its Cartesian coordinates by calling the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-379">次の例では、複素数の絶対値を計算し、その値が <xref:System.Numerics.Complex.Magnitude%2A> プロパティの値と等価であることを示します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-379">The following example calculates the absolute value of a complex number and demonstrates that it is equivalent to the value of the <xref:System.Numerics.Complex.Magnitude%2A> property.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.abs/cs/abs1.cs#1)]
 [!code-vb[System.Numerics.Complex.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.abs/vb/abs1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Abs(System.Numerics.Complex)" />
        <altmember cref="P:System.Numerics.Complex.Phase" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <Docs>
        <summary><span data-ttu-id="8aa88-380">指定した数値を、指定した別の数値で乗算します。数値の少なくとも 1 つは複素数であり、他の数値には倍精度実数を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-380">Multiplies a specified number by another specified number, where at least one of them is a complex number, and the other could be a double-precision real number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-381"><xref:System.Numerics.Complex.Multiply%2A> メソッドを使用すると、複素数を含む乗算演算を実行できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-381">The <xref:System.Numerics.Complex.Multiply%2A> methods allow performing multiplication operations that involve complex numbers.</span></span>

<span data-ttu-id="8aa88-382">乗算の結果、実数または虚数部のいずれかでオーバーフローが発生した場合、そのコンポーネントの値は <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> または <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-382">If the multiplication results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
 
<span data-ttu-id="8aa88-383"><xref:System.Numerics.Complex.Multiply%2A> メソッドは、カスタム演算子をサポートしない言語に対して実装されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-383">The <xref:System.Numerics.Complex.Multiply%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="8aa88-384">その動作は、乗算演算子を使用した乗算と同じです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-384">Its behavior is identical to multiplication using the multiplication operator.</span></span>  

  
## Examples  

<span data-ttu-id="8aa88-385">次の例では、複素数の配列内の各要素によって複素数を乗算しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-385">The following example multiples a complex number by each element in an array of complex numbers.</span></span>  
  
[!code-csharp[System.Numerics.Complex.Multiply#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.multiply/cs/multiply1.cs#1)]
[!code-vb[System.Numerics.Complex.Multiply#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.multiply/vb/multiply1.vb#1)]  
  
          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Multiply (double left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Multiply(float64 left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Multiply(System.Double,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Double, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Multiply(double left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Multiply : double * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Numerics.Complex" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-386">乗算する倍精度実数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-386">The double-precision real number to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-387">乗算する複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-387">The complex number to multiply.</span></span></param>
        <summary><span data-ttu-id="8aa88-388">倍精度実数と複素数の積を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-388">Returns the product of a double-precision real number and a complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-389"><paramref name="left" /> と <paramref name="right" /> の 2 つのパラメーターの積。</span><span class="sxs-lookup"><span data-stu-id="8aa88-389">The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="8aa88-390">実数 (複素数 a + 0i と見なすことができる) と複素数 (c + di) は、次のような形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-390">The multiplication of a real number (which can be regarded as the complex number a + 0i) and a complex number (c + di) takes the following form:</span></span>
 
 <span data-ttu-id="8aa88-391">ac + adi</span><span class="sxs-lookup"><span data-stu-id="8aa88-391">ac + adi</span></span>
          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Multiply(System.Double,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Multiply (System.Numerics.Complex left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Multiply(valuetype System.Numerics.Complex left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Complex, right As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Multiply(System::Numerics::Complex left, double right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-392">乗算する複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-392">The complex number to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-393">乗算する倍精度実数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-393">The double-precision real number to multiply.</span></span></param>
        <summary><span data-ttu-id="8aa88-394">複素数と倍精度実数の積を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-394">Returns the product of a complex number and a double-precision real number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-395"><paramref name="left" /> と <paramref name="right" /> の 2 つのパラメーターの積。</span><span class="sxs-lookup"><span data-stu-id="8aa88-395">The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-396">複素数 (a + bi) と実数 (複素数 c + 0i と見なすことができる) は、次のような形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-396">The multiplication of a complex number (a + bi) and a real number (which can be regarded as the complex number c + 0i) takes the following form:</span></span>

<span data-ttu-id="8aa88-397">ac + bci</span><span class="sxs-lookup"><span data-stu-id="8aa88-397">ac + bci</span></span>
          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Multiply (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Multiply(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Multiply(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-398">乗算する 1 番目の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-398">The first complex number to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-399">乗算する 2 番目の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-399">The second complex number to multiply.</span></span></param>
        <summary><span data-ttu-id="8aa88-400">2 つの複素数の積を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-400">Returns the product of two complex numbers.</span></span></summary>
        <returns><span data-ttu-id="8aa88-401"><paramref name="left" /> と <paramref name="right" /> の 2 つのパラメーターの積。</span><span class="sxs-lookup"><span data-stu-id="8aa88-401">The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-402">複素数、a + bi、および2番目の複素数 (c + di) の乗算は、次の形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-402">The multiplication of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="8aa88-403">(ac-bd) + (ad + bc) i</span><span class="sxs-lookup"><span data-stu-id="8aa88-403">(ac - bd) + (ad + bc)i</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public static readonly System.Numerics.Complex NaN;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Numerics.Complex NaN" />
      <MemberSignature Language="DocId" Value="F:System.Numerics.Complex.NaN" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NaN As Complex " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Numerics::Complex NaN;" />
      <MemberSignature Language="F#" Value=" staticval mutable NaN : System.Numerics.Complex" Usage="System.Numerics.Complex.NaN" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8aa88-404">非数 (NaN) の複素インスタンスを表します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-404">Represents a complex instance that is not a number (NaN).</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Negate (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Negate(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Negate(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Negate (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Negate(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Negate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-405">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-405">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-406">指定した複素数の加法に関する逆元を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-406">Returns the additive inverse of a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-407"><see cref="P:System.Numerics.Complex.Real" /> パラメーターの <see cref="P:System.Numerics.Complex.Imaginary" /> 部および <paramref name="value" /> 部に -1 を乗算した結果。</span><span class="sxs-lookup"><span data-stu-id="8aa88-407">The result of the <see cref="P:System.Numerics.Complex.Real" /> and <see cref="P:System.Numerics.Complex.Imaginary" /> components of the <paramref name="value" /> parameter multiplied by -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-408">複素数の加法逆の値は、元の複素数に追加されるときに <xref:System.Numerics.Complex.Zero> の値を生成する複素数です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-408">The additive inverse of a complex number is a complex number that produces a value of <xref:System.Numerics.Complex.Zero> when it is added to the original complex number.</span></span> <span data-ttu-id="8aa88-409">このメソッドは、元の複素数の実数部と虚数部に-1 を乗算した複素数を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-409">This method returns a complex number in which the real and imaginary components of the original complex number are multiplied by -1.</span></span>  
  
 <span data-ttu-id="8aa88-410"><xref:System.Numerics.Complex.Negate%2A> メソッドは、カスタム演算子をサポートしない言語に対して実装されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-410">The <xref:System.Numerics.Complex.Negate%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="8aa88-411">その動作は、単項否定演算子の <xref:System.Numerics.Complex.op_UnaryNegation%2A>を使用した否定と同じです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-411">Its behavior is identical to negation using the unary negation operator, <xref:System.Numerics.Complex.op_UnaryNegation%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-412">次の例では、複素数の配列内の各要素の加法逆の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-412">The following example obtains the additive inverse of each element in an array of complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Negate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.negate/cs/negate1.cs#1)]
 [!code-vb[System.Numerics.Complex.Negate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.negate/vb/negate1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="One">
      <MemberSignature Language="C#" Value="public static readonly System.Numerics.Complex One;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Numerics.Complex One" />
      <MemberSignature Language="DocId" Value="F:System.Numerics.Complex.One" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly One As Complex " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Numerics::Complex One;" />
      <MemberSignature Language="F#" Value=" staticval mutable One : System.Numerics.Complex" Usage="System.Numerics.Complex.One" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8aa88-413">実数が 1 で虚数が 0 の新しい <see cref="T:System.Numerics.Complex" /> インスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-413">Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to one and an imaginary number equal to zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8aa88-414">次の例では、<xref:System.Numerics.Complex.One> プロパティを使用して <xref:System.Numerics.Complex> 値をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-414">The following example instantiates a <xref:System.Numerics.Complex> value by using the <xref:System.Numerics.Complex.One> property.</span></span> <span data-ttu-id="8aa88-415">次に、この値を、実数部が1、虚数部が0に等しい <xref:System.Numerics.Complex> コンストラクターを呼び出すことによってインスタンス化される別の値と比較します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-415">It then compares this value to another value that is instantiated by calling the <xref:System.Numerics.Complex> constructor with a real part equal to one and an imaginary part equal to zero.</span></span> <span data-ttu-id="8aa88-416">この例の出力結果が示すように、2つの値は同じです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-416">As the output from the example shows, the two values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.One#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.one/cs/one1.cs#1)]
 [!code-vb[System.Numerics.Complex.One#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.one/vb/one1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Numerics.Complex.ImaginaryOne" />
        <altmember cref="F:System.Numerics.Complex.Zero" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <Docs>
        <summary><span data-ttu-id="8aa88-417">指定した数値を、指定した別の数値に加算します。数値の少なくとも 1 つは複素数であり、他の数値には倍精度実数を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-417">Adds a specified number to another specified number, where at least one of them is a complex number, and the other could be a double-precision real number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-418"><xref:System.Numerics.Complex.op_Addition%2A> 演算子を使用すると、複雑な数値を含む加算演算を実行できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-418">The <xref:System.Numerics.Complex.op_Addition%2A> operator allows performing addition operations that involve complex numbers.</span></span> <span data-ttu-id="8aa88-419">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-419">It enables code such as the following:</span></span>

[!code-csharp[System.Numerics.Complex.Add#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.add/cs/add3.cs#3)]
[!code-vb[System.Numerics.Complex.Add#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.add/vb/add3.vb#3)]

<span data-ttu-id="8aa88-420">加算によって、実数または虚数のいずれかのコンポーネントでオーバーフローが発生した場合、そのコンポーネントの値は <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> または <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-420">If the addition results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="8aa88-421">カスタム演算子をサポートしていない言語では、代わりに <xref:System.Numerics.Complex.Add%2A> 同等のメソッドのグループを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-421">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Add%2A> equivalent group of methods instead.</span></span>

<span data-ttu-id="8aa88-422">1つの double を受け取る <xref:System.Numerics.Complex.op_Addition%2A> 演算子は、2つの複素数を受け取る演算子よりも効率的です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-422">The <xref:System.Numerics.Complex.op_Addition%2A> operators that receive one double are more efficient than the operators that receive two Complex numbers.</span></span>

## Examples

<span data-ttu-id="8aa88-423">次の例は、複素数による加算を示しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-423">The following example illustrates addition with complex numbers:</span></span>

[!code-csharp[System.Numerics.Complex.Add#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.add/cs/add2.cs#2)]
[!code-vb[System.Numerics.Complex.Add#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.add/vb/add2.vb#2)]

          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator + (double left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Addition(float64 left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Addition(System.Double,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As Double, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator +(double left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( + ) : double * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left + right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Numerics.Complex" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-424">加算する倍精度実数値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-424">The double-precision real value to add.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-425">加算する複素数値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-425">The complex value to add.</span></span></param>
        <summary><span data-ttu-id="8aa88-426">倍精度実数を複素数に加算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-426">Adds a double-precision real number to a complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-427">複素数としての <paramref name="left" /> と <paramref name="right" /> の合計。</span><span class="sxs-lookup"><span data-stu-id="8aa88-427">The sum of <paramref name="left" /> and <paramref name="right" /> as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-428">実数 (複素数 a + 0i と見なすことができる) と複素数 (c + di) は、次のような形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-428">The addition of a real number (which can be regarded as the complex number a + 0i) and a complex number (c + di) takes the following form:</span></span>

<span data-ttu-id="8aa88-429">(a + c) + di</span><span class="sxs-lookup"><span data-stu-id="8aa88-429">(a + c) + di</span></span>

<span data-ttu-id="8aa88-430">カスタム演算子をサポートしていない言語では、代わりに <xref:System.Numerics.Complex.Add%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> 同等のメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-430">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Add%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> equivalent method instead.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Add(System.Double,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator + (System.Numerics.Complex left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Addition(valuetype System.Numerics.Complex left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As Complex, right As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator +(System::Numerics::Complex left, double right);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="left + right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-431">加算する複素数値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-431">The complex value to add.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-432">加算する倍精度実数値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-432">The double-precision real value to add.</span></span></param>
        <summary><span data-ttu-id="8aa88-433">複素数を倍精度実数に加算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-433">Adds a complex number to a double-precision real number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-434">複素数としての <paramref name="left" /> と <paramref name="right" /> の合計。</span><span class="sxs-lookup"><span data-stu-id="8aa88-434">The sum of <paramref name="left" /> and <paramref name="right" /> as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-435">複素数 (a + bi) と実数 (複素数 c + 0i と見なすことができる) は、次のような形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-435">The addition of a complex number (a + bi) and a real number (which can be regarded as the complex number c + 0i) takes the following form:</span></span>

<span data-ttu-id="8aa88-436">(a + c) + bi</span><span class="sxs-lookup"><span data-stu-id="8aa88-436">(a + c) + bi</span></span>

<span data-ttu-id="8aa88-437">カスタム演算子をサポートしていない言語では、代わりに <xref:System.Numerics.Complex.Add%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> 同等のメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-437">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Add%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> equivalent method instead.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator + (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Addition(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator +(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left + right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-438">加算する 1 つ目の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-438">The first complex value to add.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-439">加算する 2 つ目の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-439">The second complex value to add.</span></span></param>
        <summary><span data-ttu-id="8aa88-440">2 つの複素数を加算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-440">Adds two complex numbers.</span></span></summary>
        <returns><span data-ttu-id="8aa88-441"><paramref name="left" /> と <paramref name="right" /> の合計。</span><span class="sxs-lookup"><span data-stu-id="8aa88-441">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-442">複素数、a + bi、および2番目の複素数 (c + di) の追加には、次の形式があります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-442">The addition of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>

<span data-ttu-id="8aa88-443">(a + c) + (b + d) i</span><span class="sxs-lookup"><span data-stu-id="8aa88-443">(a + c) + (b + d)i</span></span>

<span data-ttu-id="8aa88-444">カスタム演算子をサポートしていない言語では、代わりに <xref:System.Numerics.Complex.Add%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> 同等のメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-444">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Add%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> equivalent method instead.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Division">
      <Docs>
        <summary><span data-ttu-id="8aa88-445">指定した数値を、指定した別の数値で除算します。数値の少なくとも 1 つは複素数であり、他の数値には倍精度実数を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-445">Divides a specified number by another specified number, where at least one of them is a complex number, and the other could be a double-precision real number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-446"><xref:System.Numerics.Complex.op_Division%2A> 演算子を使用すると、複雑な数値を含む除算演算を実行できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-446">The <xref:System.Numerics.Complex.op_Division%2A> operator allows performing division operations that involve complex numbers.</span></span> <span data-ttu-id="8aa88-447">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-447">It enables code such as the following:</span></span>

[!code-csharp[System.Numerics.Complex.Divide#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.divide/cs/divide2.cs#2)]
[!code-vb[System.Numerics.Complex.Divide#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.divide/vb/divide2.vb#2)]

<span data-ttu-id="8aa88-448">除算の結果、実数コンポーネントまたは虚数部のいずれかでオーバーフローが発生した場合、そのコンポーネントの値は <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> または <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-448">If the division results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="8aa88-449">カスタム演算子と演算子のオーバーロードをサポートしていない言語では、代わりに <xref:System.Numerics.Complex.Divide%2A> 同等のメソッドグループを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-449">Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.Complex.Divide%2A> equivalent group of method instead.</span></span>

<span data-ttu-id="8aa88-450">1つの double を受け取る <xref:System.Numerics.Complex.op_Division%2A> 演算子は、2つの複素数を受け取る演算子よりも効率的です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-450">The <xref:System.Numerics.Complex.op_Division%2A> operators that receive one double are more efficient than the operators that receive two Complex numbers.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator / (double left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Division(float64 left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Division(System.Double,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (left As Double, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator /(double left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( / ) : double * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left / right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Numerics.Complex" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-451">被除数の倍精度実数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-451">The double-precision real value to be divided.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-452">除数の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-452">The complex value to divide by.</span></span></param>
        <summary><span data-ttu-id="8aa88-453">指定した倍精度実数を指定した複素数で除算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-453">Divides a specified double-precision real number by a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-454"><paramref name="left" /> を <paramref name="right" /> で除算した、複素数としての結果。</span><span class="sxs-lookup"><span data-stu-id="8aa88-454">The result of dividing <paramref name="left" /> by <paramref name="right" />, as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-455">実数の除算 (複素数 a + 0i と見なすことができます) と複素数 (c + di) では、次の形式が使用されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-455">The division of a real number (which can be regarded as the complex number a + 0i) and a complex number (c + di) takes the following form:</span></span>

<span data-ttu-id="8aa88-456">(ac/(c<sup>2</sup> + d<sup>2</sup>)) + (ad/(c<sup>2</sup> + d<sup>2</sup>) i</span><span class="sxs-lookup"><span data-stu-id="8aa88-456">(ac / (c<sup>2</sup> + d<sup>2</sup>)) + (ad / (c<sup>2</sup> + d<sup>2</sup>)i</span></span>

<span data-ttu-id="8aa88-457">カスタム演算子と演算子のオーバーロードをサポートしていない言語では、代わりに <xref:System.Numerics.Complex.Divide%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> 同等のメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-457">Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.Complex.Divide%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> equivalent method instead.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Divide(System.Double,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator / (System.Numerics.Complex left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Division(valuetype System.Numerics.Complex left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (left As Complex, right As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator /(System::Numerics::Complex left, double right);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="left / right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-458">被除数の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-458">The complex value to be divided.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-459">除数の倍精度実数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-459">The double-precision real value to divide by.</span></span></param>
        <summary><span data-ttu-id="8aa88-460">指定した複素数を指定した倍精度実数で除算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-460">Divides a specified complex number by a specified double-precision real number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-461"><paramref name="left" /> を <paramref name="right" /> で除算した、複素数としての結果。</span><span class="sxs-lookup"><span data-stu-id="8aa88-461">The result of dividing <paramref name="left" /> by <paramref name="right" />, as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-462">複素数 (a + bi) と実数 (複素数 c + 0i と見なすことができる) は、次のような形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-462">The division of a complex number (a + bi) and a real number (which can be regarded as the complex number c + 0i) takes the following form:</span></span>

<span data-ttu-id="8aa88-463">(ac/c<sup>2</sup>) + (bc/c<sup>2</sup>) i</span><span class="sxs-lookup"><span data-stu-id="8aa88-463">(ac / c<sup>2</sup>) + (bc / c<sup>2</sup>)i</span></span>

<span data-ttu-id="8aa88-464">カスタム演算子と演算子のオーバーロードをサポートしていない言語では、代わりに <xref:System.Numerics.Complex.Divide%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> 同等のメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-464">Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.Complex.Divide%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> equivalent method instead.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator / (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Division(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator /(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left / right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-465">被除数の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-465">The complex value to be divided.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-466">除数の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-466">The complex value to divide by.</span></span></param>
        <summary><span data-ttu-id="8aa88-467">指定した複素数を別の指定した複素数で除算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-467">Divides a specified complex number by another specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-468"><paramref name="left" /> を <paramref name="right" /> で除算した結果。</span><span class="sxs-lookup"><span data-stu-id="8aa88-468">The result of dividing <paramref name="left" /> by <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-469">複素数、a + bi、および2番目の複素数 (c + di) の除算は、次のような形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-469">The division of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>

<span data-ttu-id="8aa88-470">((ac + bd)/(c<sup>2</sup> + d<sup>2</sup>)) + ((bc-ad)/(c<sup>2</sup> + d<sup>2</sup>) i</span><span class="sxs-lookup"><span data-stu-id="8aa88-470">((ac + bd) / (c<sup>2</sup> + d<sup>2</sup>)) + ((bc - ad) / (c<sup>2</sup> + d<sup>2</sup>)i</span></span>

<span data-ttu-id="8aa88-471">カスタム演算子と演算子のオーバーロードをサポートしていない言語では、代わりに <xref:System.Numerics.Complex.Divide%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> 同等のメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-471">Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.Complex.Divide%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> equivalent method instead.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Complex, right As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.Complex * System.Numerics.Complex -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-472">比較対象の 1 番目の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-472">The first complex number to compare.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-473">比較対象の 2 番目の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-473">The second complex number to compare.</span></span></param>
        <summary><span data-ttu-id="8aa88-474">2 つの複素数が等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-474">Returns a value that indicates whether two complex numbers are equal.</span></span></summary>
        <returns><span data-ttu-id="8aa88-475"><see langword="true" /> パラメーターと <paramref name="left" /> パラメーターが同じ値の場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8aa88-475"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-476"><xref:System.Numerics.Complex.op_Equality%2A> メソッドは、<xref:System.Numerics.Complex> 値の等値演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-476">The <xref:System.Numerics.Complex.op_Equality%2A> method defines the operation of the equality operator for <xref:System.Numerics.Complex> values.</span></span> <span data-ttu-id="8aa88-477">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-477">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/eqoperator1.cs#9)]
 [!code-vb[System.Numerics.Complex.Equals#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/eqoperator1.vb#9)]  
  
 <span data-ttu-id="8aa88-478">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-478">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method instead.</span></span>  
  
 <span data-ttu-id="8aa88-479">2つの複素数は、実数部が等しく、虚数部が等しい場合に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-479">Two complex numbers are equal if their real parts are equal and their imaginary parts are equal.</span></span> <span data-ttu-id="8aa88-480"><xref:System.Numerics.Complex.op_Equality%2A> メソッドは、次の式と同じです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-480">The <xref:System.Numerics.Complex.op_Equality%2A> method is equivalent to the following expression:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals1.cs#3)]
 [!code-vb[System.Numerics.Complex.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals1.vb#3)]  
  
 <span data-ttu-id="8aa88-481">精度が異なるため、同じ意味を持つ2つの複素数が等しくないと見なされる可能性があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-481">Note that, because of differences in precision, two complex numbers that are apparently equivalent can be considered unequal.</span></span> <span data-ttu-id="8aa88-482">詳細および考えられる回避策については、<xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-482">For more information and a possible workaround, see the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method.</span></span>  
  
 <span data-ttu-id="8aa88-483">この演算子の同等のメソッドは <xref:System.Numerics.Complex.Equals%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="8aa88-483">The equivalent method for this operator is <xref:System.Numerics.Complex.Equals%2A?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8aa88-484"><see cref="T:System.Numerics.Complex" /> オブジェクトと別の型の間の明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-484">Defines an explicit conversion between a <see cref="T:System.Numerics.Complex" /> object and another type.</span></span></summary>
        <altmember cref="Overload:System.Numerics.Complex.op_Implicit" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Complex (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Decimal) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Complex(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : decimal -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-485">複素数に変換する値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-485">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-486"><see cref="T:System.Decimal" /> 値から複素数への明示的な型変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-486">Defines an explicit conversion of a <see cref="T:System.Decimal" /> value to a complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-487">実数部が <paramref name="value" /> で、虚数部が 0 である複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-487">A complex number that has a real component equal to <paramref name="value" /> and an imaginary component equal to zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-488">明示的な変換演算子は、<xref:System.Numerics.Complex> オブジェクトに変換できる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-488">Explicit conversion operators define types that can be converted to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="8aa88-489">言語コンパイラでは、データが失われる可能性があるため、この変換は自動的には実行されません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-489">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="8aa88-490">代わりに、キャスト演算子 (でC#は) または変換関数 (Visual Basic の `CType` など) が使用されている場合にのみ、変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-490">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="8aa88-491">それ以外の場合は、コンパイラエラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-491">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="8aa88-492"><xref:System.Decimal> 値から複素数の実数部への変換では、精度が低下する可能性があります。これは、複素数の <xref:System.Numerics.Complex.Real%2A> プロパティの型である <xref:System.Double>が <xref:System.Decimal>よりも有効桁数が少ないためです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-492">The conversion of a <xref:System.Decimal> value to the real part of a complex number can result in a loss of precision because a <xref:System.Double>, which is the type of the complex number's <xref:System.Numerics.Complex.Real%2A> property, has fewer significant digits than a <xref:System.Decimal>.</span></span>



## Examples
 <span data-ttu-id="8aa88-493">次の例は、<xref:System.Decimal> 値を <xref:System.Numerics.Complex> 値に明示的に変換する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-493">The following example illustrates the explicit conversion of <xref:System.Decimal> values to <xref:System.Numerics.Complex> values.</span></span>

 [!code-csharp[System.Numerics.Complex.Explicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.explicit/cs/explicit1.cs#1)]   
 [!code-vb[System.Numerics.Complex.Explicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.explicit/vb/explicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Complex (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Complex(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-494">複素数に変換する値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-494">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-495"><see cref="T:System.Numerics.BigInteger" /> 値から複素数への明示的な型変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-495">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> value to a complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-496">実数部が <paramref name="value" /> で、虚数部が 0 である複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-496">A complex number that has a real component equal to <paramref name="value" /> and an imaginary component equal to zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-497">明示的な変換演算子は、<xref:System.Numerics.Complex> オブジェクトに変換できる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-497">Explicit conversion operators define types that can be converted to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="8aa88-498">言語コンパイラでは、データが失われる可能性があるため、この変換は自動的には実行されません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-498">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="8aa88-499">代わりに、キャスト演算子 (でC#は) または変換関数 (Visual Basic の `CType` など) が使用されている場合にのみ、変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-499">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="8aa88-500">それ以外の場合は、コンパイラエラーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-500">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="8aa88-501"><xref:System.Numerics.BigInteger> 値から複素数の実数部への変換では、精度が低下する可能性があります。これは、複素数の <xref:System.Numerics.Complex.Real%2A> プロパティの型である <xref:System.Double>が <xref:System.Numerics.BigInteger>よりも有効桁数が少ないためです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-501">The conversion of a <xref:System.Numerics.BigInteger> value to the real part of a complex number can result in a loss of precision because a <xref:System.Double>, which is the type of the complex number's <xref:System.Numerics.Complex.Real%2A> property, has fewer significant digits than a <xref:System.Numerics.BigInteger>.</span></span>

 <span data-ttu-id="8aa88-502"><xref:System.Numerics.BigInteger> 値が <xref:System.Double> 型の範囲外であるために変換が失敗した場合、この操作では <xref:System.OverflowException>がスローされません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-502">If the conversion is unsuccessful because the <xref:System.Numerics.BigInteger> value is out of the range of the <xref:System.Double> type, the operation does not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="8aa88-503">代わりに、`value` が <xref:System.Double.MinValue>未満の場合、結果は <xref:System.Double.NegativeInfinity>と同じ <xref:System.Numerics.Complex.Real%2A> プロパティ値を持つ複素数になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-503">Instead, if `value` is less than <xref:System.Double.MinValue>, the result is a complex number that has a <xref:System.Numerics.Complex.Real%2A> property value equal to <xref:System.Double.NegativeInfinity>.</span></span> <span data-ttu-id="8aa88-504">`value` が <xref:System.Double.MaxValue>より大きい場合、結果は <xref:System.Double.PositiveInfinity>と同じ <xref:System.Numerics.Complex.Real%2A> プロパティ値を持つ複素数になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-504">If `value` is greater than <xref:System.Double.MaxValue>, the result is a complex number that has a <xref:System.Numerics.Complex.Real%2A> property value equal to <xref:System.Double.PositiveInfinity>.</span></span>



## Examples
 <span data-ttu-id="8aa88-505">次の例は、<xref:System.Numerics.BigInteger> 値を <xref:System.Numerics.Complex> 値に明示的に変換する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-505">The following example illustrates the explicit conversion of <xref:System.Numerics.BigInteger> values to <xref:System.Numerics.Complex> values.</span></span>

 [!code-csharp[System.Numerics.Complex.Explicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.explicit/cs/explicit1.cs#2)]   
 [!code-vb[System.Numerics.Complex.Explicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.explicit/vb/explicit1.vb#2)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8aa88-506"><see cref="T:System.Numerics.Complex" /> オブジェクトと別の型との間の暗黙的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-506">Defines an implicit conversion between a <see cref="T:System.Numerics.Complex" /> object and another type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Byte) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : byte -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-507">複素数に変換する値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-507">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-508">符号なしバイト値から複素数への暗黙の型変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-508">Defines an implicit conversion of an unsigned byte to a complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-509"><paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-509">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-510"><xref:System.Numerics.Complex.op_Implicit%2A> 演算子のオーバーロードは、明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、コンパイラが <xref:System.Numerics.Complex> オブジェクトを自動的に変換できる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-510">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="8aa88-511">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-511">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="8aa88-512">このオーバーロードは、次の例に示すように、コンパイラが <xref:System.Byte> 値から複素数への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8aa88-512">This overload lets the compiler handle conversions from a <xref:System.Byte> value to a complex number, as the following example shows.</span></span> <span data-ttu-id="8aa88-513">変換の結果は、実数部が <xref:System.Byte> 値と等しく、虚数部が0に等しい複素数であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-513">Note that the result of the conversion is a complex number whose real part is equal to the <xref:System.Byte> value and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#1)]   
 [!code-vb[System.Numerics.Complex.Implicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(double value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-514">複素数に変換する値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-514">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-515">倍精度浮動小数点数から複素数への暗黙の型変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-515">Defines an implicit conversion of a double-precision floating-point number to a complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-516"><paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-516">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-517"><xref:System.Numerics.Complex.op_Implicit%2A> 演算子のオーバーロードは、明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、コンパイラが <xref:System.Numerics.Complex> オブジェクトを自動的に変換できる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-517">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="8aa88-518">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-518">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="8aa88-519">このオーバーロードは、次の例に示すように、コンパイラが <xref:System.Double> 値から複素数への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8aa88-519">This overload lets the compiler handle conversions from a <xref:System.Double> value to a complex number, as the following example shows.</span></span> <span data-ttu-id="8aa88-520">変換の結果は、実数部が <xref:System.Double> 値と等しく、虚数部が0に等しい複素数であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-520">Note that the result of the conversion is a complex number whose real part is equal to the <xref:System.Double> value and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#2)]   
 [!code-vb[System.Numerics.Complex.Implicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#2)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Short) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(short value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int16 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-521">複素数に変換する値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-521">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-522">16 ビット符号付き整数値から複素数への暗黙の型変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-522">Defines an implicit conversion of a 16-bit signed integer to a complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-523"><paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-523">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-524"><xref:System.Numerics.Complex.op_Implicit%2A> 演算子のオーバーロードは、明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、コンパイラが <xref:System.Numerics.Complex> オブジェクトを自動的に変換できる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-524">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="8aa88-525">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-525">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="8aa88-526">このオーバーロードを使用すると、次の例に示すように、コンパイラは符号付き16ビット整数から複素数への変換を処理できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-526">This overload lets the compiler handle conversions from a signed 16-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="8aa88-527">変換の結果は、実数部が符号付き16ビット整数に等しく、虚数部が0に等しい複素数であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-527">Note that the result of the conversion is a complex number whose real part is equal to the signed 16-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#3)]   
 [!code-vb[System.Numerics.Complex.Implicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#3)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Integer) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(int value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-528">複素数に変換する値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-528">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-529">32 ビット符号付き整数値から複素数への暗黙の型変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-529">Defines an implicit conversion of a 32-bit signed integer to a complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-530"><paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-530">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-531"><xref:System.Numerics.Complex.op_Implicit%2A> 演算子のオーバーロードは、明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、コンパイラが <xref:System.Numerics.Complex> オブジェクトを自動的に変換できる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-531">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="8aa88-532">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-532">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="8aa88-533">このオーバーロードは、次の例に示すように、コンパイラが符号付き32ビット整数から複素数への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8aa88-533">This overload lets the compiler handle conversions from a signed 32-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="8aa88-534">変換の結果は、実数部が符号付き32ビット整数に等しく、虚数部が0に等しい複素数であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-534">Note that the result of the conversion is a complex number whose real part is equal to the signed 32-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#4)]   
 [!code-vb[System.Numerics.Complex.Implicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#4)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Long) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(long value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int64 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-535">複素数に変換する値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-535">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-536">64 ビット符号付き整数値から複素数への暗黙の型変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-536">Defines an implicit conversion of a 64-bit signed integer to a complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-537"><paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-537">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-538"><xref:System.Numerics.Complex.op_Implicit%2A> 演算子のオーバーロードは、明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、コンパイラが <xref:System.Numerics.Complex> オブジェクトを自動的に変換できる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-538">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="8aa88-539">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-539">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="8aa88-540">このオーバーロードは、次の例に示すように、コンパイラが符号付き64ビット整数から複素数への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8aa88-540">This overload lets the compiler handle conversions from a signed 64-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="8aa88-541">変換の結果は、実数部が符号付き64ビット整数に等しく、虚数部が0に等しい複素数であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-541">Note that the result of the conversion is a complex number whose real part is equal to the signed 64-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#5)]   
 [!code-vb[System.Numerics.Complex.Implicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#5)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As SByte) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : sbyte -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-542">複素数に変換する値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-542">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-543">符号付きバイト値から複素数への暗黙の型変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-543">Defines an implicit conversion of a signed byte to a complex number.</span></span>   
           
<span data-ttu-id="8aa88-544">この API は、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-544">This API is not CLS-compliant.</span></span></summary>
        <returns><span data-ttu-id="8aa88-545"><paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-545">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-546"><xref:System.Numerics.Complex.op_Implicit%2A> 演算子のオーバーロードは、明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、コンパイラが <xref:System.Numerics.Complex> オブジェクトを自動的に変換できる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-546">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="8aa88-547">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-547">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="8aa88-548">このオーバーロードは、次の例に示すように、コンパイラが符号付きバイトから複素数への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8aa88-548">This overload lets the compiler handle conversions from a signed byte to a complex number, as the following example shows.</span></span> <span data-ttu-id="8aa88-549">変換の結果は、実数部が符号付きバイトで、虚数部が0に等しい複素数になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-549">Note that the result of the conversion is a complex number whose real part is equal to the signed byte and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#6)]   
 [!code-vb[System.Numerics.Complex.Implicit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#6)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Single) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(float value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : single -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-550">複素数に変換する値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-550">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-551">単精度浮動小数点数から複素数への暗黙の型変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-551">Defines an implicit conversion of a single-precision floating-point number to a complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-552"><paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-552">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-553"><xref:System.Numerics.Complex.op_Implicit%2A> 演算子のオーバーロードは、明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、コンパイラが <xref:System.Numerics.Complex> オブジェクトを自動的に変換できる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-553">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="8aa88-554">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-554">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="8aa88-555">このオーバーロードは、次の例に示すように、コンパイラが <xref:System.Single> 値から複素数への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8aa88-555">This overload lets the compiler handle conversions from a <xref:System.Single> value to a complex number, as the following example shows.</span></span> <span data-ttu-id="8aa88-556">変換の結果は、実数部が <xref:System.Single> 値と等しく、虚数部が0に等しい複素数であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-556">Note that the result of the conversion is a complex number whose real part is equal to the <xref:System.Single> value and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#7)]   
 [!code-vb[System.Numerics.Complex.Implicit#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#7)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UShort) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint16 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-557">複素数に変換する値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-557">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-558">16 ビット符号なし整数値から複素数への暗黙の型変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-558">Defines an implicit conversion of a 16-bit unsigned integer to a complex number.</span></span>   
           
<span data-ttu-id="8aa88-559">この API は、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-559">This API is not CLS-compliant.</span></span></summary>
        <returns><span data-ttu-id="8aa88-560"><paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-560">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-561"><xref:System.Numerics.Complex.op_Implicit%2A> 演算子のオーバーロードは、明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、コンパイラが <xref:System.Numerics.Complex> オブジェクトを自動的に変換できる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-561">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="8aa88-562">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-562">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="8aa88-563">このオーバーロードは、次の例に示すように、コンパイラが符号なし16ビット整数から複素数への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8aa88-563">This overload lets the compiler handle conversions from an unsigned 16-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="8aa88-564">変換の結果は、実数部が符号なし16ビット整数に等しく、虚数部が0に等しい複素数であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-564">Note that the result of the conversion is a complex number whose real part is equal to the unsigned 16-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#8)]   
 [!code-vb[System.Numerics.Complex.Implicit#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#8)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UInteger) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint32 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-565">複素数に変換する値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-565">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-566">32 ビット符号なし整数値から複素数への暗黙の型変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-566">Defines an implicit conversion of a 32-bit unsigned integer to a complex number.</span></span>   
           
<span data-ttu-id="8aa88-567">この API は、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-567">This API is not CLS-compliant.</span></span></summary>
        <returns><span data-ttu-id="8aa88-568"><paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-568">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-569"><xref:System.Numerics.Complex.op_Implicit%2A> 演算子のオーバーロードは、明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、コンパイラが <xref:System.Numerics.Complex> オブジェクトを自動的に変換できる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-569">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="8aa88-570">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-570">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="8aa88-571">このオーバーロードは、次の例に示すように、コンパイラが符号なし32ビット整数から複素数への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8aa88-571">This overload lets the compiler handle conversions from an unsigned 32-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="8aa88-572">変換の結果は、実数部が符号なし32ビット整数に等しく、虚数部が0に等しい複素数であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-572">Note that the result of the conversion is a complex number whose real part is equal to the unsigned 32-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#9)]   
 [!code-vb[System.Numerics.Complex.Implicit#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#9)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As ULong) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint64 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-573">複素数に変換する値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-573">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-574">64 ビット符号なし整数値から複素数への暗黙の型変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-574">Defines an implicit conversion of a 64-bit unsigned integer to a complex number.</span></span>   
           
<span data-ttu-id="8aa88-575">この API は、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-575">This API is not CLS-compliant.</span></span></summary>
        <returns><span data-ttu-id="8aa88-576"><paramref name="value" /> パラメーターの値を実数部として格納し、0 を虚数部として格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-576">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-577"><xref:System.Numerics.Complex.op_Implicit%2A> 演算子のオーバーロードは、明示的なキャスト演算子 (でC#は) または変換関数の呼び出し (Visual Basic) を使用せずに、コンパイラが <xref:System.Numerics.Complex> オブジェクトを自動的に変換できる型を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-577">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="8aa88-578">これらは、データ損失を伴わない拡大変換であり、<xref:System.OverflowException>をスローしません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-578">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="8aa88-579">このオーバーロードは、次の例に示すように、コンパイラが符号なし64ビット整数から複素数への変換を処理できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8aa88-579">This overload lets the compiler handle conversions from an unsigned 64-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="8aa88-580">変換の結果は、実数部が符号なし64ビット整数に等しく、虚数部が0に等しい複素数であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-580">Note that the result of the conversion is a complex number whose real part is equal to the unsigned 64-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#10)]   
 [!code-vb[System.Numerics.Complex.Implicit#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#10)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Complex, right As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.Complex * System.Numerics.Complex -&gt; bool" Usage="System.Numerics.Complex.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-581">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-581">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-582">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-582">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="8aa88-583">2 つの複素数が等しくないかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-583">Returns a value that indicates whether two complex numbers are not equal.</span></span></summary>
        <returns><span data-ttu-id="8aa88-584"><see langword="true" /> と <paramref name="left" /> が等しくない場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8aa88-584"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-585"><xref:System.Numerics.Complex.op_Equality%2A> メソッドは、複素数の非等値演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-585">The <xref:System.Numerics.Complex.op_Equality%2A> method defines the operation of the inequality operator for complex numbers.</span></span> <span data-ttu-id="8aa88-586">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-586">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Inequality#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.inequality/cs/inequality1.cs#1)]
 [!code-vb[System.Numerics.Complex.Inequality#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.inequality/vb/inequality1.vb#1)]  
  
 <span data-ttu-id="8aa88-587">カスタム演算子をサポートしない言語では、<xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> メソッドを呼び出して値を反転することで、非等値をテストできます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-587">Languages that do not support custom operators can test for inequality by calling the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method and reversing its value.</span></span>  
  
 <span data-ttu-id="8aa88-588">精度が異なるため、同じ意味を持つ2つの複素数が等しくないと見なされる可能性があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-588">Note that, because of differences in precision, two complex numbers that are apparently equivalent can be considered unequal.</span></span> <span data-ttu-id="8aa88-589">考えられる回避策の1つとして、`true` を返す比較メソッドを実装することがあります。これは、複素数の2つの実数部と虚数部の差が特定のしきい値を超えた場合にのみ発生します (たとえば、複素数の実数部または虚数部の値の .01%)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-589">One possible workaround is to implement a comparison method that returns `true` only if the difference between the two real and imaginary parts of the complex numbers exceeds a certain threshold (such as .01% of the value of the real or imaginary component of one of the complex numbers).</span></span> <span data-ttu-id="8aa88-590">詳細については、<xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-590">For more information, see the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Multiply">
      <Docs>
        <summary><span data-ttu-id="8aa88-591">指定した数値を、指定した別の数値で乗算します。数値の少なくとも 1 つは複素数であり、他の数値には倍精度実数を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-591">Multiplies a specified number by another specified number, where at least one of them is a complex number, and the other could be a double-precision real number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-592"><xref:System.Numerics.Complex.op_Multiply%2A> 演算子を使用すると、複素数を含む乗算演算を実行できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-592">The <xref:System.Numerics.Complex.op_Multiply%2A> operator allows performing multiplication operations that involve complex numbers.</span></span> <span data-ttu-id="8aa88-593">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-593">It enables code such as the following:</span></span>

[!code-csharp[System.Numerics.Complex.Multiply#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.multiply/cs/multiply2.cs#2)]
[!code-vb[System.Numerics.Complex.Multiply#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.multiply/vb/multiply2.vb#2)]

<span data-ttu-id="8aa88-594">乗算の結果、実数または虚数部のいずれかでオーバーフローが発生した場合、そのコンポーネントの値は <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> または <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-594">If the multiplication results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="8aa88-595">カスタム演算子をサポートしていない言語では、代わりに <xref:System.Numerics.Complex.Multiply%2A> 同等のメソッドのグループを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-595">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Multiply%2A> equivalent group of methods instead.</span></span>

<span data-ttu-id="8aa88-596">1つの double を受け取る <xref:System.Numerics.Complex.op_Multiply%2A> 演算子は、2つの複素数を受け取る演算子よりも効率的です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-596">The <xref:System.Numerics.Complex.op_Multiply%2A> operators that receive one double are more efficient than the operators that receive two Complex numbers.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator * (double left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Multiply(float64 left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Multiply(System.Double,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As Double, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator *(double left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( * ) : double * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left * right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Numerics.Complex" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-597">乗算する倍精度実数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-597">The double-precision real value to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-598">乗算する複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-598">The complex value to multiply.</span></span></param>
        <summary><span data-ttu-id="8aa88-599">指定した倍精度実数と指定した複素数を乗算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-599">Multiplies a specified double-precision real number by a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-600">複素数としての <paramref name="left" /> と <paramref name="right" /> の積。</span><span class="sxs-lookup"><span data-stu-id="8aa88-600">The product of <paramref name="left" /> and <paramref name="right" />, as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-601">実数 (複素数 a + 0i と見なすことができる) と複素数 (c + di) は、次のような形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-601">The multiplication of a real number (which can be regarded as the complex number a + 0i) and a complex number (c + di) takes the following form:</span></span>

<span data-ttu-id="8aa88-602">ac + adi</span><span class="sxs-lookup"><span data-stu-id="8aa88-602">ac + adi</span></span>

<span data-ttu-id="8aa88-603">カスタム演算子をサポートしていない言語では、代わりに <xref:System.Numerics.Complex.Multiply%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> 同等のメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-603">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Multiply%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> equivalent method instead.</span></span>


          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Multiply(System.Double,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator * (System.Numerics.Complex left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Multiply(valuetype System.Numerics.Complex left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As Complex, right As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator *(System::Numerics::Complex left, double right);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="left * right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-604">乗算する複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-604">The complex value to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-605">乗算する倍精度実数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-605">The double-precision real value to multiply.</span></span></param>
        <summary><span data-ttu-id="8aa88-606">指定した複素数と指定した倍精度実数を乗算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-606">Multiplies the specified complex number by a specified double-precision real number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-607">複素数としての <paramref name="left" /> と <paramref name="right" /> の積。</span><span class="sxs-lookup"><span data-stu-id="8aa88-607">The product of <paramref name="left" /> and <paramref name="right" />, as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-608">複素数 (a + bi) と実数 (複素数 c + 0i と見なすことができる) は、次のような形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-608">The multiplication of a complex number (a + bi) and a real number (which can be regarded as the complex number c + 0i) takes the following form:</span></span>

<span data-ttu-id="8aa88-609">ac + bci</span><span class="sxs-lookup"><span data-stu-id="8aa88-609">ac + bci</span></span>

<span data-ttu-id="8aa88-610">カスタム演算子をサポートしていない言語では、代わりに <xref:System.Numerics.Complex.Multiply%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> 同等のメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-610">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Multiply%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> equivalent method instead.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator * (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Multiply(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator *(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left * right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-611">乗算する 1 つ目の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-611">The first complex value to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-612">乗算する 2 つ目の複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-612">The second complex value to multiply.</span></span></param>
        <summary><span data-ttu-id="8aa88-613">指定した 2 つの複素数を乗算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-613">Multiplies two specified complex numbers.</span></span></summary>
        <returns><span data-ttu-id="8aa88-614"><paramref name="left" /> と <paramref name="right" /> の積。</span><span class="sxs-lookup"><span data-stu-id="8aa88-614">The product of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-615">複素数、a + bi、および2番目の複素数 (c + di) の乗算は、次の形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-615">The multiplication of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>

<span data-ttu-id="8aa88-616">(ac-bd) + (ad + bc) i</span><span class="sxs-lookup"><span data-stu-id="8aa88-616">(ac - bd) + (ad + bc)i</span></span>

<span data-ttu-id="8aa88-617">カスタム演算子をサポートしていない言語では、代わりに <xref:System.Numerics.Complex.Multiply%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> 同等のメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-617">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Multiply%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> equivalent method instead.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <Docs>
        <summary><span data-ttu-id="8aa88-618">指定した数値を、指定した別の数値から減算します。数値の少なくとも 1 つは複素数であり、他の数値には倍精度実数を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-618">Subtracts a specified number from another specified number, where at least one of them is a complex number, and the other could be a double-precision real number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-619"><xref:System.Numerics.Complex.op_Subtraction%2A> 演算子を使用すると、複雑な数値を含む減算演算を実行できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-619">The <xref:System.Numerics.Complex.op_Subtraction%2A> operator allows performing subtraction operations that involve complex numbers.</span></span> <span data-ttu-id="8aa88-620">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-620">It enables code such as the following:</span></span>

[!code-csharp[System.Numerics.Complex.Subtract#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.subtract/cs/subtract2.cs#2)]
[!code-vb[System.Numerics.Complex.Subtract#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.subtract/vb/subtract2.vb#2)]

<span data-ttu-id="8aa88-621">減算の結果、実数コンポーネントまたは虚数部のいずれかでオーバーフローが発生した場合、そのコンポーネントの値は <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> または <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-621">If the subtraction results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="8aa88-622">カスタム演算子をサポートしていない言語では、代わりに <xref:System.Numerics.Complex.Subtract%2A> 同等のメソッドのグループを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-622">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Subtract%2A> equivalent group of methods instead.</span></span>

<span data-ttu-id="8aa88-623">1つの double を受け取る <xref:System.Numerics.Complex.op_Addition%2A> 演算子は、2つの複素数を受け取る演算子よりも効率的です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-623">The <xref:System.Numerics.Complex.op_Addition%2A> operators that receive one double are more efficient than the operators that receive two Complex numbers.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator - (double left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Subtraction(float64 left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Subtraction(System.Double,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As Double, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator -(double left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : double * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Numerics.Complex" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-624">減算される倍精度実数値 (被減数)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-624">The double-precision real value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-625">減算する複素数 (減数)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-625">The complex value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="8aa88-626">倍精度実数から複素数を減算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-626">Subtracts a complex number from a double-precision real number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-627"><paramref name="right" /> から <paramref name="left" /> を減算した、複素数としての結果。</span><span class="sxs-lookup"><span data-stu-id="8aa88-627">The result of subtracting <paramref name="right" /> from <paramref name="left" />, as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-628">複素数からの複素数 (c + di) の減算 (複素数 a + 0i と見なされる可能性があります) は、次の形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-628">The subtraction of a complex number (c + di) from a real number (which can be regarded as the complex number a + 0i) takes the following form:</span></span>

<span data-ttu-id="8aa88-629">(a-c)-di</span><span class="sxs-lookup"><span data-stu-id="8aa88-629">(a - c) - di</span></span>

<span data-ttu-id="8aa88-630">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.Complex.Subtract%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-630">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Subtract%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> method instead.</span></span>
 
          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Subtract(System.Double,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator - (System.Numerics.Complex left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Subtraction(valuetype System.Numerics.Complex left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As Complex, right As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator -(System::Numerics::Complex left, double right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-631">減算される複素数 (被減数)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-631">The complex value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-632">減算する倍精度実数値 (減数)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-632">The double-precision real value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="8aa88-633">複素数から倍精度実数を減算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-633">Subtracts a double-precision real number from a complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-634"><paramref name="right" /> から <paramref name="left" /> を減算した、複素数としての結果。</span><span class="sxs-lookup"><span data-stu-id="8aa88-634">The result of subtracting <paramref name="right" /> from <paramref name="left" />, as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-635">複素数 (a + bi) からの実数 (複素数 c + 0i と見なすことができる) の減算は、次のような形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-635">The subtraction of a real number (which can be regarded as the complex number c + 0i) from a complex number (a + bi) takes the following form:</span></span>

<span data-ttu-id="8aa88-636">(a-c) + bi</span><span class="sxs-lookup"><span data-stu-id="8aa88-636">(a - c) + bi</span></span>

<span data-ttu-id="8aa88-637">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.Complex.Subtract%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-637">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Subtract%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> method instead.</span></span>
 
          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator - (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Subtraction(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator -(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-638">減算される値 (被減数)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-638">The value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-639">減算する値 (減数)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-639">The value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="8aa88-640">複素数を別の複素数から減算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-640">Subtracts a complex number from another complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-641"><paramref name="right" /> から <paramref name="left" /> を減算した結果。</span><span class="sxs-lookup"><span data-stu-id="8aa88-641">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-642">複素数 c + di の減算は、別の複素数 (a + bi) から次の形式で行われます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-642">The subtraction of a complex number, c + di, from another complex number, a + bi, takes the following form:</span></span>

<span data-ttu-id="8aa88-643">(a-c) + (b-d) i</span><span class="sxs-lookup"><span data-stu-id="8aa88-643">(a - c) + (b - d)i</span></span>

<span data-ttu-id="8aa88-644">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.Complex.Subtract%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-644">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Subtract%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> method instead.</span></span>
 
          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator - (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_UnaryNegation(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator -(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="- value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-645">否定する値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-645">The value to negate.</span></span></param>
        <summary><span data-ttu-id="8aa88-646">指定した複素数の加法に関する逆元を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-646">Returns the additive inverse of a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-647"><see cref="P:System.Numerics.Complex.Real" /> パラメーターの <see cref="P:System.Numerics.Complex.Imaginary" /> 部および <paramref name="value" /> 部に -1 を乗算した結果。</span><span class="sxs-lookup"><span data-stu-id="8aa88-647">The result of the <see cref="P:System.Numerics.Complex.Real" /> and <see cref="P:System.Numerics.Complex.Imaginary" /> components of the <paramref name="value" /> parameter multiplied by -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-648"><xref:System.Numerics.Complex.op_UnaryNegation%2A> メソッドは、複素数の単項否定 (加法逆) 演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-648">The <xref:System.Numerics.Complex.op_UnaryNegation%2A> method defines the operation of the unary negation (additive inverse) operator for complex numbers.</span></span> <span data-ttu-id="8aa88-649">次のようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-649">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Negate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.negate/cs/negate2.cs#2)]
 [!code-vb[System.Numerics.Complex.Negate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.negate/vb/negate2.vb#2)]  
  
 <span data-ttu-id="8aa88-650">結果として得られる複素数は、元の複素数に追加されるときに <xref:System.Numerics.Complex.Zero> の値を生成します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-650">The resulting complex number produces a value of <xref:System.Numerics.Complex.Zero> when it is added to the original complex number.</span></span> <span data-ttu-id="8aa88-651">カスタム演算子をサポートしない言語では、代わりに <xref:System.Numerics.Complex.Negate%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-651">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Negate%2A> method instead.</span></span>  
  
 <span data-ttu-id="8aa88-652">この演算子の同等のメソッドは <xref:System.Numerics.Complex.Negate%28System.Numerics.Complex%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="8aa88-652">The equivalent method for this operator is <xref:System.Numerics.Complex.Negate%28System.Numerics.Complex%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Negate(System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Phase">
      <MemberSignature Language="C#" Value="public double Phase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Phase" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Complex.Phase" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Phase As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Phase { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Phase : double" Usage="System.Numerics.Complex.Phase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8aa88-653">複素数のフェーズを取得します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-653">Gets the phase of a complex number.</span></span></summary>
        <value><span data-ttu-id="8aa88-654">複素数のフェーズ (ラジアン単位)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-654">The phase of a complex number, in radians.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-655">複素数 a + bi の場合、フェーズは <xref:System.Math.Atan2%2A?displayProperty=nameWithType>(b, a) として計算されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-655">For a complex number a + bi, the phase is computed as <xref:System.Math.Atan2%2A?displayProperty=nameWithType>(b, a).</span></span>  
  
 <span data-ttu-id="8aa88-656">複素数は、複素平面または極座標座標によって、デカルト座標によって識別できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-656">You can identify a complex number by its Cartesian coordinates on the complex plane or by its polar coordinates.</span></span> <span data-ttu-id="8aa88-657">複素数の位相 (引数) は、原点 (x 軸と y 軸の交差部分) から、複素数が表す点までの直線の実際の軸の角度を表しています (引数)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-657">The phase (argument) of a complex number is the angle to the real axis of a line drawn from the point of origin (the intersection of the x-axis and the y-axis) to the point represented by the complex number.</span></span> <span data-ttu-id="8aa88-658">(<xref:System.Numerics.Complex.Magnitude%2A> プロパティによって表される) 大きさは、原点から複素数で表される地点までの距離です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-658">The magnitude (represented by the <xref:System.Numerics.Complex.Magnitude%2A> property) is the distance from the point of origin to the point that is represented by the complex number.</span></span>  
  
 <span data-ttu-id="8aa88-659"><xref:System.Numerics.Complex.FromPolarCoordinates%2A> メソッドを呼び出すことによって、デカルト座標ではなく極座標値に基づいて複素数をインスタンス化できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-659">You can instantiate a complex number based on its polar coordinates instead of its Cartesian coordinates by calling the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method.</span></span>  
  
 <span data-ttu-id="8aa88-660">フェーズをラジアンから度に変換するには、180/<xref:System.Math.PI?displayProperty=nameWithType>で乗算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-660">To convert the phase from radians to degrees, multiply it by 180/<xref:System.Math.PI?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-661">次の例では、<xref:System.Numerics.Complex.FromPolarCoordinates%2A> メソッドを使用して、極座標に基づいて複素数をインスタンス化し、その <xref:System.Numerics.Complex.Magnitude%2A> と <xref:System.Numerics.Complex.Phase%2A> プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-661">The following example uses the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method to instantiate a complex number based on its polar coordinates, and then displays the value of its <xref:System.Numerics.Complex.Magnitude%2A> and <xref:System.Numerics.Complex.Phase%2A> properties.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Phase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.phase/cs/phase1.cs#1)]
 [!code-vb[System.Numerics.Complex.Phase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.phase/vb/phase1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Magnitude" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Pow">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8aa88-662">指定した値で複素数を累乗した値を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-662">Returns a specified complex number raised to a specified power.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Pow (System.Numerics.Complex value, double power);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Pow(valuetype System.Numerics.Complex value, float64 power) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (value As Complex, power As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Pow(System::Numerics::Complex value, double power);" />
      <MemberSignature Language="F#" Value="static member Pow : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Pow (value, power)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
        <Parameter Name="power" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-663">累乗する複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-663">A complex number to be raised to a power.</span></span></param>
        <param name="power"><span data-ttu-id="8aa88-664">累乗を指定する倍精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-664">A double-precision floating-point number that specifies a power.</span></span></param>
        <summary><span data-ttu-id="8aa88-665">倍精度浮動小数点数で指定した値で複素数を累乗した値を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-665">Returns a specified complex number raised to a power specified by a double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-666">複素数 <paramref name="value" /> を <paramref name="power" /> で累乗した値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-666">The complex number <paramref name="value" /> raised to the power <paramref name="power" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-667">`value` が <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType> の場合、メソッドは <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType> を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-667">If `value` is <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>, the method returns <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8aa88-668">その他の値の場合、`power` が0の場合、メソッドは <xref:System.Numerics.Complex.One?displayProperty=nameWithType>を返し、`power` が1の場合は `value`を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-668">For other values, if `power` is 0, the method returns <xref:System.Numerics.Complex.One?displayProperty=nameWithType>, and if `power` is 1, it returns `value`.</span></span>  
  
 <span data-ttu-id="8aa88-669">このメソッドは、プリミティブな数値型の <xref:System.Math.Pow%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-669">This method corresponds to the <xref:System.Math.Pow%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-670">次の例では、複素数と値の範囲が-1 ~ 10 の指数を使用して累乗しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-670">The following example illustrates exponentiation using a complex number and an exponent whose value ranges from -1 to 10.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Pow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.pow/cs/pow1.cs#1)]
 [!code-vb[System.Numerics.Complex.Pow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.pow/vb/pow1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Pow (System.Numerics.Complex value, System.Numerics.Complex power);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Pow(valuetype System.Numerics.Complex value, valuetype System.Numerics.Complex power) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (value As Complex, power As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Pow(System::Numerics::Complex value, System::Numerics::Complex power);" />
      <MemberSignature Language="F#" Value="static member Pow : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Pow (value, power)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
        <Parameter Name="power" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-671">累乗する複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-671">A complex number to be raised to a power.</span></span></param>
        <param name="power"><span data-ttu-id="8aa88-672">累乗に使用する値を指定する複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-672">A complex number that specifies a power.</span></span></param>
        <summary><span data-ttu-id="8aa88-673">別の複素数で指定した値で複素数を累乗した値を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-673">Returns a specified complex number raised to a power specified by a complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-674">複素数 <paramref name="value" /> を <paramref name="power" /> で累乗した値。</span><span class="sxs-lookup"><span data-stu-id="8aa88-674">The complex number <paramref name="value" /> raised to the power <paramref name="power" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Real">
      <MemberSignature Language="C#" Value="public double Real { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Real" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Complex.Real" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Real As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Real { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Real : double" Usage="System.Numerics.Complex.Real" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8aa88-675">現在の <see cref="T:System.Numerics.Complex" /> オブジェクトの実数部を取得します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-675">Gets the real component of the current <see cref="T:System.Numerics.Complex" /> object.</span></span></summary>
        <value><span data-ttu-id="8aa88-676">複素数の実数部。</span><span class="sxs-lookup"><span data-stu-id="8aa88-676">The real component of a complex number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-677">複素数 a + bi が指定されている場合、<xref:System.Numerics.Complex.Real%2A> プロパティはの値を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-677">Given a complex number a + bi, the <xref:System.Numerics.Complex.Real%2A> property returns the value of a.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-678">次の例では、<xref:System.Numerics.Complex> オブジェクトの配列をインスタンス化し、それぞれの実数部と虚数部を a + bi の形式で表示します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-678">The following example instantiates an array of <xref:System.Numerics.Complex> objects and displays the real and imaginary components of each in the form a + bi.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Real#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.real/cs/real1.cs#1)]
 [!code-vb[System.Numerics.Complex.Real#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.real/vb/real1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Imaginary" />
      </Docs>
    </Member>
    <Member MemberName="Reciprocal">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Reciprocal (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Reciprocal(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Reciprocal (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Reciprocal(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Reciprocal : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Reciprocal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-679">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-679">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-680">複素数の逆数を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-680">Returns the multiplicative inverse of a complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-681"><paramref name="value" /> の逆数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-681">The reciprocal of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-682">数値*x*の逆数 (乗算) は数値*y*で、 *x*と*y*を乗算した結果は1になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-682">The reciprocal, or multiplicative inverse, of a number *x* is a number *y* where *x* multiplied by *y* yields 1.</span></span> <span data-ttu-id="8aa88-683">複素数の逆数は、2つの数値が乗算されるときに <xref:System.Numerics.Complex.One?displayProperty=nameWithType> を生成する複素数です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-683">The reciprocal of a complex number is the complex number that produces <xref:System.Numerics.Complex.One?displayProperty=nameWithType> when the two numbers are multiplied.</span></span> <span data-ttu-id="8aa88-684">複素数が + bi によって表される場合、その逆数は式 a/(a<sup>2</sup>+ b<sup>2</sup>) +-b/(a<sup>2</sup> + b<sup>2</sup>) によって表されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-684">If a complex number is represented by a +bi, its reciprocal is represented by the expression a/(a<sup>2</sup>+b<sup>2</sup>) + -b/(a<sup>2</sup> + b<sup>2</sup>).</span></span>  
  
 <span data-ttu-id="8aa88-685">Value が <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>の場合、メソッドは <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-685">If value is <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>, the method returns <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8aa88-686">それ以外の場合は /`value`<xref:System.Numerics.Complex.One?displayProperty=nameWithType>式の結果を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-686">Otherwise, it returns the result of the expression <xref:System.Numerics.Complex.One?displayProperty=nameWithType>/`value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-687">次の例では、<xref:System.Numerics.Complex.Reciprocal%2A> メソッドを使用して、複数の複素数の逆数値を計算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-687">The following example uses the <xref:System.Numerics.Complex.Reciprocal%2A> method to calculate the reciprocal values of several complex numbers.</span></span> <span data-ttu-id="8aa88-688">また、複素数を相互に乗算した結果が <xref:System.Numerics.Complex.One?displayProperty=nameWithType>であることも示しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-688">It also demonstrates that the result of multiplying a complex number by its reciprocal is <xref:System.Numerics.Complex.One?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Reciprocal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.reciprocal/cs/reciprocal1.cs#1)]
 [!code-vb[System.Numerics.Complex.Reciprocal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.reciprocal/vb/reciprocal1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Sin (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Sin(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Sin(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sin (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Sin(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Sin : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Sin value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-689">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-689">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-690">指定した複素数のサインを返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-690">Returns the sine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-691"><paramref name="value" /> のサイン。</span><span class="sxs-lookup"><span data-stu-id="8aa88-691">The sine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-692">複素数の <xref:System.Numerics.Complex.Sin%2A> メソッドは、実数の <xref:System.Math.Sin%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-692">The <xref:System.Numerics.Complex.Sin%2A> method for complex numbers corresponds to the <xref:System.Math.Sin%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="8aa88-693"><xref:System.Numerics.Complex.Sin%2A> メソッドは、次の式を使用して、複素数 a + bi のサインを計算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-693">The <xref:System.Numerics.Complex.Sin%2A> method uses the following formula to calculate the sine of the complex number a + bi:</span></span>  
  
 <span data-ttu-id="8aa88-694">(<xref:System.Math.Sin%2A>(a) \* <xref:System.Math.Cosh%2A>(b)、<xref:System.Math.Cos%2A>(a) \* <xref:System.Math.Sinh%2A>(b))</span><span class="sxs-lookup"><span data-stu-id="8aa88-694">(<xref:System.Math.Sin%2A>(a) \* <xref:System.Math.Cosh%2A>(b), <xref:System.Math.Cos%2A>(a) \* <xref:System.Math.Sinh%2A>(b))</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-695">次の例は、<xref:System.Numerics.Complex.Sin%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-695">The following example illustrates the <xref:System.Numerics.Complex.Sin%2A> method.</span></span> <span data-ttu-id="8aa88-696"><xref:System.Numerics.Complex.Asin%2A> メソッドによって返される値を <xref:System.Numerics.Complex.Sin%2A> メソッドに渡すと、元の <xref:System.Numerics.Complex> 値が返されることがわかります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-696">It shows that passing the value returned by the <xref:System.Numerics.Complex.Asin%2A> method to the <xref:System.Numerics.Complex.Sin%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Asin#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.asin/cs/asin1.cs#1)]
 [!code-vb[System.Numerics.Complex.Asin#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.asin/vb/asin1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Asin(System.Double)" />
        <altmember cref="M:System.Numerics.Complex.Sin(System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Sinh (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Sinh(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Sinh(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sinh (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Sinh(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Sinh : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Sinh value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-697">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-697">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-698">指定した複素数のハイパーボリック サインを返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-698">Returns the hyperbolic sine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-699"><paramref name="value" /> のハイパーボリック サイン。</span><span class="sxs-lookup"><span data-stu-id="8aa88-699">The hyperbolic sine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-700">複素数の <xref:System.Numerics.Complex.Sinh%2A> メソッドは、実数の <xref:System.Math.Sinh%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-700">The <xref:System.Numerics.Complex.Sinh%2A> method for complex numbers corresponds to the <xref:System.Math.Sinh%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="8aa88-701"><xref:System.Numerics.Complex.Sinh%2A> メソッドは、次の式を使用して、複素数 a + bi のハイパーボリックサインを計算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-701">The <xref:System.Numerics.Complex.Sinh%2A> method uses the following formula to calculate the hyperbolic sine of the complex number a + bi:</span></span>  
  
 <span data-ttu-id="8aa88-702">(<xref:System.Math.Sinh%2A>(a) \* <xref:System.Math.Cos%2A>(b)、<xref:System.Math.Cosh%2A>(a) \* <xref:System.Math.Sin%2A>(b))</span><span class="sxs-lookup"><span data-stu-id="8aa88-702">(<xref:System.Math.Sinh%2A>(a) \* <xref:System.Math.Cos%2A>(b), <xref:System.Math.Cosh%2A>(a) \* <xref:System.Math.Sin%2A>(b))</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Sinh(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Sqrt (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Sqrt(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Sqrt(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Sqrt : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Sqrt value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-703">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-703">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-704">指定した複素数の平方根を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-704">Returns the square root of a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-705"><paramref name="value" /> の平方根。</span><span class="sxs-lookup"><span data-stu-id="8aa88-705">The square root of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-706">複素数 `value` の平方根は、次の式を使用して計算されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-706">The square root of the complex number `value` is calculated by using the following formula:</span></span>  
  
 <span data-ttu-id="8aa88-707"><xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=nameWithType>(<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(`value`.<xref:System.Numerics.Complex.Magnitude%2A>)、`value`<xref:System.Numerics.Complex.Phase%2A>/2.0)</span><span class="sxs-lookup"><span data-stu-id="8aa88-707"><xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=nameWithType>(<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(`value`.<xref:System.Numerics.Complex.Magnitude%2A>), `value`.<xref:System.Numerics.Complex.Phase%2A>/2.0)</span></span>   
  
 <span data-ttu-id="8aa88-708">複素数の <xref:System.Numerics.Complex.Sqrt%2A> メソッドは、実数の <xref:System.Math.Sqrt%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-708">The <xref:System.Numerics.Complex.Sqrt%2A> method for complex numbers corresponds to the <xref:System.Math.Sqrt%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <Docs>
        <summary><span data-ttu-id="8aa88-709">指定した数値を、指定した別の数値から減算します。数値の少なくとも 1 つは複素数であり、他の数値には倍精度実数を使用できます。そして結果を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-709">Subtracts a specified number from another specified number, where at least one of them is a complex number, and the other could be a double-precision real number, and returns the result.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-710"><xref:System.Numerics.Complex.Subtract%2A> メソッドを使用すると、複雑な数値を含む減算演算を実行できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-710">The <xref:System.Numerics.Complex.Subtract%2A> method allows subtraction operations that involve complex numbers.</span></span>

<span data-ttu-id="8aa88-711">減算の結果、実数コンポーネントまたは虚数部のいずれかでオーバーフローが発生した場合、そのコンポーネントの値は <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> または <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-711">If the subtraction results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="8aa88-712">カスタム演算子をサポートする言語でも、<xref:System.Numerics.Complex.op_Subtraction%2A> 同等の演算子グループを使用できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-712">Languages that support custom operators can use the <xref:System.Numerics.Complex.op_Subtraction%2A> equivalent group of operators too.</span></span>

<span data-ttu-id="8aa88-713">1つの double を受け取る <xref:System.Numerics.Complex.Subtract%2A> メソッドは、2つの複素数を受け取るメソッドよりも効率的です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-713">The <xref:System.Numerics.Complex.Subtract%2A> methods that receive one double are more efficient than the method that receive two Complex numbers.</span></span>

## Examples

<span data-ttu-id="8aa88-714">次の例では、複素数から配列の各複素数を減算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-714">The following example subtracts each complex number in an array from a complex number:</span></span>

[!code-csharp[System.Numerics.Complex.Subtract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.subtract/cs/subtract1.cs#1)]
[!code-vb[System.Numerics.Complex.Subtract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.subtract/vb/subtract1.vb#1)]

          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Subtract (double left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Subtract(float64 left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Subtract(System.Double,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Double, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Subtract(double left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Subtract : double * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Numerics.Complex" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-715">減算される倍精度実数値 (被減数)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-715">The double-precision real value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-716">減算する複素数 (減数)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-716">The complex value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="8aa88-717">倍精度実数から複素数を減算し、その結果を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-717">Subtracts one complex number from a double-precision real number and returns the result.</span></span></summary>
        <returns><span data-ttu-id="8aa88-718"><paramref name="right" /> から <paramref name="left" /> を減算した、複素数としての結果。</span><span class="sxs-lookup"><span data-stu-id="8aa88-718">The result of subtracting <paramref name="right" /> from <paramref name="left" />, as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-719">複素数からの複素数 (c + di) の減算 (複素数 a + 0i と見なされる可能性があります) は、次の形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-719">The subtraction of a complex number (c + di) from a real number (which can be regarded as the complex number a + 0i) takes the following form:</span></span>

<span data-ttu-id="8aa88-720">(a-c)-di</span><span class="sxs-lookup"><span data-stu-id="8aa88-720">(a - c) - di</span></span>

<span data-ttu-id="8aa88-721">カスタム演算子をサポートする言語では、同等の演算子 <xref:System.Numerics.Complex.op_Subtraction%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-721">Languages that support custom operators can use the <xref:System.Numerics.Complex.op_Subtraction%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> equivalent operator too.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Subtraction(System.Double,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Subtract (System.Numerics.Complex left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Subtract(valuetype System.Numerics.Complex left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Complex, right As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Subtract(System::Numerics::Complex left, double right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-722">減算される複素数 (被減数)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-722">The complex value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-723">減算する倍精度実数値 (減数)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-723">The double-precision real value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="8aa88-724">複素数から倍精度実数を減算し、その結果を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-724">Subtracts one double-precision real number from a complex number and returns the result.</span></span></summary>
        <returns><span data-ttu-id="8aa88-725"><paramref name="right" /> から <paramref name="left" /> を減算した、複素数としての結果。</span><span class="sxs-lookup"><span data-stu-id="8aa88-725">The result of subtracting <paramref name="right" /> from <paramref name="left" />, as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-726">複素数 (a + bi) からの実数 (複素数 c + 0i と見なすことができる) の減算は、次のような形式になります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-726">The subtraction of a real number (which can be regarded as the complex number c + 0i) from a complex number (a + bi) takes the following form:</span></span>

<span data-ttu-id="8aa88-727">(a-c) + bi</span><span class="sxs-lookup"><span data-stu-id="8aa88-727">(a - c) + bi</span></span>

<span data-ttu-id="8aa88-728">カスタム演算子をサポートする言語では、同等の演算子 <xref:System.Numerics.Complex.op_Subtraction%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-728">Languages that support custom operators can use the <xref:System.Numerics.Complex.op_Subtraction%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> equivalent operator too.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Subtract (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Subtract(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Subtract(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8aa88-729">減算される値 (被減数)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-729">The value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="8aa88-730">減算する値 (減数)。</span><span class="sxs-lookup"><span data-stu-id="8aa88-730">The value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="8aa88-731">複素数を別の複素数から減算し、その結果を返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-731">Subtracts one complex number from another and returns the result.</span></span></summary>
        <returns><span data-ttu-id="8aa88-732"><paramref name="right" /> から <paramref name="left" /> を減算した結果。</span><span class="sxs-lookup"><span data-stu-id="8aa88-732">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8aa88-733">複素数 c + di の減算は、別の複素数 (a + bi) から次の形式で行われます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-733">The subtraction of a complex number, c + di, from another complex number, a + bi, takes the following form:</span></span>

<span data-ttu-id="8aa88-734">(a-c) + (b-d) i</span><span class="sxs-lookup"><span data-stu-id="8aa88-734">(a - c) + (b - d)i</span></span>

<span data-ttu-id="8aa88-735">カスタム演算子をサポートする言語では、同等の演算子 <xref:System.Numerics.Complex.op_Subtraction%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-735">Languages that support custom operators can use the <xref:System.Numerics.Complex.op_Subtraction%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> equivalent operator too.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Tan (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Tan(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Tan(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tan (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Tan(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Tan : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Tan value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-736">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-736">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-737">指定した複素数のタンジェントを返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-737">Returns the tangent of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-738"><paramref name="value" /> のタンジェント。</span><span class="sxs-lookup"><span data-stu-id="8aa88-738">The tangent of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-739">複素数の <xref:System.Numerics.Complex.Tan%2A> メソッドは、実数の <xref:System.Math.Tan%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-739">The <xref:System.Numerics.Complex.Tan%2A> method for complex numbers corresponds to the <xref:System.Math.Tan%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="8aa88-740"><xref:System.Numerics.Complex.Tan%2A> メソッドは、次の式を使用して、`value`複素数のタンジェントを計算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-740">The <xref:System.Numerics.Complex.Tan%2A> method uses the following formula to calculate the tangent of the complex number `value`:</span></span>  
  
 <span data-ttu-id="8aa88-741"><xref:System.Numerics.Complex.Sin%2A>(`value`)/<xref:System.Numerics.Complex.Cos%2A>(`value`)</span><span class="sxs-lookup"><span data-stu-id="8aa88-741"><xref:System.Numerics.Complex.Sin%2A>(`value`) / <xref:System.Numerics.Complex.Cos%2A>(`value`)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-742">次の例は、<xref:System.Numerics.Complex.Tan%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-742">The following example illustrates the <xref:System.Numerics.Complex.Tan%2A> method.</span></span> <span data-ttu-id="8aa88-743"><xref:System.Numerics.Complex.Atan%2A> メソッドによって返される値を <xref:System.Numerics.Complex.Tan%2A> メソッドに渡すと、元の <xref:System.Numerics.Complex> 値が返されることがわかります。</span><span class="sxs-lookup"><span data-stu-id="8aa88-743">It shows that passing the value returned by the <xref:System.Numerics.Complex.Atan%2A> method to the <xref:System.Numerics.Complex.Tan%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Atan#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.atan/cs/atan1.cs#1)]
 [!code-vb[System.Numerics.Complex.Atan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.atan/vb/atan1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Atan(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Tan(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Tanh (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Tanh(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Tanh(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tanh (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Tanh(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Tanh : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Tanh value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8aa88-744">複素数。</span><span class="sxs-lookup"><span data-stu-id="8aa88-744">A complex number.</span></span></param>
        <summary><span data-ttu-id="8aa88-745">指定した複素数のハイパーボリック タンジェントを返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-745">Returns the hyperbolic tangent of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="8aa88-746"><paramref name="value" /> のハイパーボリック タンジェント。</span><span class="sxs-lookup"><span data-stu-id="8aa88-746">The hyperbolic tangent of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-747">複素数の <xref:System.Numerics.Complex.Tanh%2A> メソッドは、実数の <xref:System.Math.Tanh%2A?displayProperty=nameWithType> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-747">The <xref:System.Numerics.Complex.Tanh%2A> method for complex numbers corresponds to the <xref:System.Math.Tanh%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="8aa88-748"><xref:System.Numerics.Complex.Tanh%2A> メソッドは、次の式を使用して、`value`複素数のハイパーボリックタンジェントを計算します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-748">The <xref:System.Numerics.Complex.Tanh%2A> method uses the following formula to calculate the hyperbolic tangent of the complex number `value`:</span></span>  
  
 <span data-ttu-id="8aa88-749"><xref:System.Numerics.Complex.Sinh%2A>(`value`)/<xref:System.Numerics.Complex.Cosh%2A>(`value`)</span><span class="sxs-lookup"><span data-stu-id="8aa88-749"><xref:System.Numerics.Complex.Sinh%2A>(`value`) / <xref:System.Numerics.Complex.Cosh%2A>(`value`)</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Tanh(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8aa88-750">複素数の値を等価の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-750">Converts the value of a complex number to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="complex.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8aa88-751">現在の複素数の値を等価のデカルト形式の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-751">Converts the value of the current complex number to its equivalent string representation in Cartesian form.</span></span></summary>
        <returns><span data-ttu-id="8aa88-752">現在のインスタンスを表すデカルト形式の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="8aa88-752">The string representation of the current instance in Cartesian form.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-753">複素数の既定の文字列*形式は、`,`* *b*`)``(`フォーム内のデカルト座標を使用して数値を表示します。ここで *、* は複素数の実数部、 *b*は虚数部です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-753">The default string representation of a complex number displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part.</span></span> <span data-ttu-id="8aa88-754">*A*と*b*は、一般書式指定子 ("G") と現在のシステムカルチャの規則を使用して書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-754">Both *a* and *b* are formatted using the general format specifier ("G") and the conventions of the current system culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-755">次の例では、複数の複素数の文字列形式を表示します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-755">The following example displays the string representation of several complex numbers.</span></span> <span data-ttu-id="8aa88-756">出力では、English-米国 ("en-us") カルチャの書式指定規則が使用されます。この例では、現在のシステムカルチャです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-756">The output uses the formatting conventions of the English - United States ("en-US") culture, which, in this case, is the current system culture.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Numerics.Complex.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="complex.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="8aa88-757">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-757">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="8aa88-758">指定したカルチャ固有の書式情報を使用して、現在の複素数を等価のデカルト形式の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-758">Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="8aa88-759"><paramref name="provider" /> が指定する現在のインスタンスのデカルト形式の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="8aa88-759">The string representation of the current instance in Cartesian form, as specified by <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-760">このメソッドによって返される複素数の文字列*形式は、`,`* *b*`)``(`フォーム内のデカルト座標を使用して数値を表示します。ここで *、* は複素数の実数部、 *b*は虚数部です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-760">The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part.</span></span> <span data-ttu-id="8aa88-761">*A*と*b*は両方とも、汎用書式指定子 ("G") と、`provider`で定義されたカルチャの規則を使用して書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-761">Both *a* and *b* are formatted using the general format specifier ("G") and the conventions of the culture defined by `provider`.</span></span>  
  
 <span data-ttu-id="8aa88-762">`provider` パラメーターは、<xref:System.IFormatProvider> の実装です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-762">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="8aa88-763"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、返される文字列の実数と虚数の書式に関するカルチャ固有の情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-763">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the real and imaginary numbers in the returned string.</span></span> <span data-ttu-id="8aa88-764">`provider` が `null`場合、返される文字列は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトを使用して書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-764">If `provider` is `null`, the returned string is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
 <span data-ttu-id="8aa88-765">`provider` パラメーターには、次のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-765">The `provider` parameter can be one of the following:</span></span>  
  
-   <span data-ttu-id="8aa88-766">書式設定情報を提供するカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-766">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information</span></span>  
  
-   <span data-ttu-id="8aa88-767">書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-767">The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="8aa88-768"><xref:System.IFormatProvider> インターフェイスを実装するカスタムオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-768">A custom object that implements the <xref:System.IFormatProvider> interface.</span></span> <span data-ttu-id="8aa88-769"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-769">Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-770">次の例では、複数の複素数の文字列形式を表示します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-770">The following example displays the string representation of several complex numbers.</span></span> <span data-ttu-id="8aa88-771">結果では、米国英語 (米国) のカルチャおよびフランス語 ("fr-fr") のカルチャの書式指定規則が使用されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-771">The result uses the formatting conventions of the English - United States ("en-US") and French - France ("fr-FR") cultures.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring2.cs#2)]
 [!code-vb[System.Numerics.Complex.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="complex.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="8aa88-772">標準またはカスタムの数値書式指定文字列。</span><span class="sxs-lookup"><span data-stu-id="8aa88-772">A standard or custom numeric format string.</span></span></param>
        <summary><span data-ttu-id="8aa88-773">実数部と虚数部で構成される指定した書式を使用して、現在の複素数を等価のデカルト形式の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-773">Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.</span></span></summary>
        <returns><span data-ttu-id="8aa88-774">現在のインスタンスを表すデカルト形式の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="8aa88-774">The string representation of the current instance in Cartesian form.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-775">このメソッドによって返される複素数の文字列*形式は、`,`* *b*`)``(`フォーム内のデカルト座標を使用して数値を表示します。ここで *、* は複素数の実数部、 *b*は虚数部です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-775">The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part.</span></span> <span data-ttu-id="8aa88-776">A と*b*の両方が *、* `format`で指定された書式指定文字列を使用して書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-776">Both *a* and *b* are formatted using the format string specified by `format`.</span></span> <span data-ttu-id="8aa88-777">`format` パラメーターには、任意の有効な標準の数値書式指定子、またはカスタム数値書式指定子の任意の組み合わせを指定できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-777">The `format` parameter can be any valid standard numeric format specifier, or any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="8aa88-778">`format` が <xref:System.String.Empty?displayProperty=nameWithType> に等しい場合、またはが `null`場合、複素数の実数部と虚数部は、汎用書式指定子 ("G") を使用して書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-778">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the real and imaginary parts of the complex number are formatted with the general format specifier ("G").</span></span> <span data-ttu-id="8aa88-779">`format` がその他の値の場合、メソッドは <xref:System.FormatException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="8aa88-779">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="8aa88-780">.NET Framework には、次のトピックで詳細に説明されているさまざまな書式設定がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-780">The .NET Framework provides extensive formatting support, which is described in greater detail in the following topics:</span></span>  
  
-   <span data-ttu-id="8aa88-781">数値書式指定文字列の詳細については、「[標準の数値書式](~/docs/standard/base-types/standard-numeric-format-strings.md)指定文字列」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-781">For more information about numeric format strings, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8aa88-782">.NET Framework の書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-782">For more information about formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="8aa88-783">返される文字列の形式は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトによって決定されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-783">The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span> <span data-ttu-id="8aa88-784">`format` パラメーターに応じて、このオブジェクトは、出力文字列内の負の符号、桁区切り記号、小数点の記号などの記号を制御します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-784">Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string.</span></span> <span data-ttu-id="8aa88-785">現在のカルチャ以外のカルチャの書式設定情報を提供するには、<xref:System.Numerics.Complex.ToString%28System.String%2CSystem.IFormatProvider%29> のオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-785">To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.Complex.ToString%28System.String%2CSystem.IFormatProvider%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-786">次の例では、複素数を初期化し、いくつかの標準書式指定文字列を使用して表示します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-786">The following example initializes a complex number and displays it using several standard format strings.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring3.cs#3)]
 [!code-vb[System.Numerics.Complex.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="8aa88-787"><paramref name="format" /> は有効な文字列ではありません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-787"><paramref name="format" /> is not a valid format string.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="8aa88-788">標準の数値書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="8aa88-788">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="8aa88-789">カスタム数値書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="8aa88-789">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="complex.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="8aa88-790">標準またはカスタムの数値書式指定文字列。</span><span class="sxs-lookup"><span data-stu-id="8aa88-790">A standard or custom numeric format string.</span></span></param>
        <param name="provider"><span data-ttu-id="8aa88-791">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-791">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="8aa88-792">実数部と虚数部で構成される指定した書式およびカルチャ固有の書式情報を使用して、現在の複素数を等価のデカルト形式の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-792">Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.</span></span></summary>
        <returns><span data-ttu-id="8aa88-793"><paramref name="format" /> および <paramref name="provider" /> が指定する現在のインスタンスのデカルト形式の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="8aa88-793">The string representation of the current instance in Cartesian form, as specified by <paramref name="format" /> and <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-794">このメソッドによって返される複素数の文字列*形式は、`,`* *b*`)``(`フォーム内のデカルト座標を使用して数値を表示します。ここで *、* は複素数の実数部、 *b*は虚数部です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-794">The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part.</span></span> <span data-ttu-id="8aa88-795">A と*b*の両方が *、* `format`で指定された書式指定文字列を使用して書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-795">Both *a* and *b* are formatted using the format string specified by `format`.</span></span> <span data-ttu-id="8aa88-796">`format` パラメーターには、任意の有効な標準の数値書式指定子、またはカスタム数値書式指定子の任意の組み合わせを指定できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-796">The `format` parameter can be any valid standard numeric format specifier, or any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="8aa88-797">`format` が <xref:System.String.Empty?displayProperty=nameWithType> に等しい場合、またはが `null`場合、複素数の実数部と虚数部は、汎用書式指定子 ("G") を使用して書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-797">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the real and imaginary parts of the complex number are formatted with the general format specifier ("G").</span></span> <span data-ttu-id="8aa88-798">`format` がその他の値の場合、メソッドは <xref:System.FormatException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="8aa88-798">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="8aa88-799">.NET Framework には、次のトピックで詳細に説明されているさまざまな書式設定がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="8aa88-799">The .NET Framework provides extensive formatting support, which is described in greater detail in the following topics:</span></span>  
  
-   <span data-ttu-id="8aa88-800">数値書式指定文字列の詳細については、「[標準の数値書式](~/docs/standard/base-types/standard-numeric-format-strings.md)指定文字列」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-800">For more information about numeric format strings, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8aa88-801">.NET Framework の書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8aa88-801">For more information about formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="8aa88-802">`provider` パラメーターは、<xref:System.IFormatProvider> の実装です。</span><span class="sxs-lookup"><span data-stu-id="8aa88-802">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="8aa88-803"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、返される文字列の実数と虚数の書式に関するカルチャ固有の情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-803">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the real and imaginary numbers in the returned string.</span></span> <span data-ttu-id="8aa88-804">`format` パラメーターに応じて、このオブジェクトは、出力文字列内の負の符号、桁区切り記号、小数点の記号などの記号を制御します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-804">Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string.</span></span> <span data-ttu-id="8aa88-805">`provider` が `null`場合、返される文字列は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトを使用して書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-805">If `provider` is `null`, the returned string is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
 <span data-ttu-id="8aa88-806">`provider` パラメーターには、次のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-806">The `provider` parameter can be one of the following:</span></span>  
  
-   <span data-ttu-id="8aa88-807">書式設定情報を提供するカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-807">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information</span></span>  
  
-   <span data-ttu-id="8aa88-808">書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-808">The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="8aa88-809"><xref:System.IFormatProvider> インターフェイスを実装するカスタムオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8aa88-809">A custom object that implements the <xref:System.IFormatProvider> interface.</span></span> <span data-ttu-id="8aa88-810"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-810">Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-811">次の例では、複素数の配列を作成し、複数の標準書式指定文字列と、英語米国 ("en-us") カルチャおよびフランス語 ("fr-fr") カルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを使用してそれぞれを表示します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-811">The following example creates an array of complex numbers, and displays each using several standard format strings as well as <xref:System.Globalization.CultureInfo> objects that represent the English - United States ("en-US") and French - France ("fr-FR") cultures.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring4.cs#4)]
 [!code-vb[System.Numerics.Complex.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="8aa88-812"><paramref name="format" /> は有効な文字列ではありません。</span><span class="sxs-lookup"><span data-stu-id="8aa88-812"><paramref name="format" /> is not a valid format string.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="8aa88-813">標準の数値書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="8aa88-813">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="8aa88-814">カスタム数値書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="8aa88-814">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static readonly System.Numerics.Complex Zero;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Numerics.Complex Zero" />
      <MemberSignature Language="DocId" Value="F:System.Numerics.Complex.Zero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Zero As Complex " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Numerics::Complex Zero;" />
      <MemberSignature Language="F#" Value=" staticval mutable Zero : System.Numerics.Complex" Usage="System.Numerics.Complex.Zero" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8aa88-815">実数が 0 で虚数が 0 の新しい <see cref="T:System.Numerics.Complex" /> インスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-815">Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to zero and an imaginary number equal to zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8aa88-816"><xref:System.Numerics.Complex.Zero> プロパティは、<xref:System.Numerics.Complex> 値を0と比較するために最もよく使用されます。</span><span class="sxs-lookup"><span data-stu-id="8aa88-816">The <xref:System.Numerics.Complex.Zero> property is most frequently used to compare a <xref:System.Numerics.Complex> value to zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8aa88-817">次の例では、<xref:System.Numerics.Complex.Zero> プロパティを使用して <xref:System.Numerics.Complex> 値をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-817">The following example instantiates a <xref:System.Numerics.Complex> value by using the <xref:System.Numerics.Complex.Zero> property.</span></span> <span data-ttu-id="8aa88-818">次に、この値を、実際の部分がゼロ、虚数部が0に等しい <xref:System.Numerics.Complex> コンストラクターを呼び出すことによってインスタンス化される別の値と比較します。</span><span class="sxs-lookup"><span data-stu-id="8aa88-818">It then compares this value to another value that is instantiated by calling the <xref:System.Numerics.Complex> constructor with a real part equal to zero and an imaginary part equal to zero.</span></span> <span data-ttu-id="8aa88-819">この例の出力結果が示すように、2つの値は同じです。</span><span class="sxs-lookup"><span data-stu-id="8aa88-819">As the output from the example shows, the two values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Zero#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.zero/cs/zero1.cs#1)]
 [!code-vb[System.Numerics.Complex.Zero#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.zero/vb/zero1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Numerics.Complex.ImaginaryOne" />
        <altmember cref="F:System.Numerics.Complex.One" />
      </Docs>
    </Member>
  </Members>
</Type>
