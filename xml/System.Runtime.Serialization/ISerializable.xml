<Type Name="ISerializable" FullName="System.Runtime.Serialization.ISerializable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b1e3068dfe01c174e1cd6120d714c5373bec3653" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83535073" /></Metadata><TypeSignature Language="C#" Value="public interface ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISerializable" />
  <TypeSignature Language="F#" Value="type ISerializable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Runtime.Serialization.Formatters" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Runtime.Serialization.Formatters" FromVersion="4.0.2.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Runtime.Serialization.Formatters" FromVersion="4.0.3.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Runtime.Serialization.Formatters" FromVersion="4.0.4.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e834a-101">オブジェクトが独自のシリアル化および逆シリアル化を制御できるようにします。</span><span class="sxs-lookup"><span data-stu-id="e834a-101">Allows an object to control its own serialization and deserialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e834a-102">シリアル化される可能性のあるすべてのクラスは、<xref:System.SerializableAttribute>でマークする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e834a-102">Any class that might be serialized must be marked with the <xref:System.SerializableAttribute>.</span></span> <span data-ttu-id="e834a-103">クラスがシリアル化プロセスを制御する必要がある場合は、<xref:System.Runtime.Serialization.ISerializable> インターフェイスを実装できます。</span><span class="sxs-lookup"><span data-stu-id="e834a-103">If a class needs to control its serialization process, it can implement the <xref:System.Runtime.Serialization.ISerializable> interface.</span></span> <span data-ttu-id="e834a-104"><xref:System.Runtime.Serialization.Formatter> は、シリアル化時に <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> を呼び出し、指定された <xref:System.Runtime.Serialization.SerializationInfo> に、オブジェクトを表すために必要なすべてのデータを設定します。</span><span class="sxs-lookup"><span data-stu-id="e834a-104">The <xref:System.Runtime.Serialization.Formatter> calls the <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> at serialization time and populates the supplied <xref:System.Runtime.Serialization.SerializationInfo> with all the data required to represent the object.</span></span> <span data-ttu-id="e834a-105"><xref:System.Runtime.Serialization.Formatter> は、グラフ内のオブジェクトの型を使用して <xref:System.Runtime.Serialization.SerializationInfo> を作成します。</span><span class="sxs-lookup"><span data-stu-id="e834a-105">The <xref:System.Runtime.Serialization.Formatter> creates a <xref:System.Runtime.Serialization.SerializationInfo> with the type of the object in the graph.</span></span> <span data-ttu-id="e834a-106">プロキシを送信する必要があるオブジェクトは、<xref:System.Runtime.Serialization.SerializationInfo> で <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> および <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> メソッドを使用して、送信される情報を変更できます。</span><span class="sxs-lookup"><span data-stu-id="e834a-106">Objects that need to send proxies for themselves can use the <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> and <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> methods on <xref:System.Runtime.Serialization.SerializationInfo> to change the transmitted information.</span></span>  
  
 <span data-ttu-id="e834a-107">クラスの継承の場合、<xref:System.Runtime.Serialization.ISerializable>を実装する基本クラスから派生したクラスをシリアル化することができます。</span><span class="sxs-lookup"><span data-stu-id="e834a-107">In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements <xref:System.Runtime.Serialization.ISerializable>.</span></span> <span data-ttu-id="e834a-108">この場合、派生クラスは <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>の実装内の <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> の基本クラスの実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="e834a-108">In this case, the derived class should call the base class implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> inside its implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>.</span></span> <span data-ttu-id="e834a-109">それ以外の場合、基本クラスのデータはシリアル化されません。</span><span class="sxs-lookup"><span data-stu-id="e834a-109">Otherwise, the data from the base class will not be serialized.</span></span>  
  
 <span data-ttu-id="e834a-110"><xref:System.Runtime.Serialization.ISerializable> インターフェイスは、シグネチャコンストラクター (<xref:System.Runtime.Serialization.SerializationInfo> 情報、<xref:System.Runtime.Serialization.StreamingContext> コンテキスト) を持つコンストラクターを意味します。</span><span class="sxs-lookup"><span data-stu-id="e834a-110">The <xref:System.Runtime.Serialization.ISerializable> interface implies a constructor with the signature constructor (<xref:System.Runtime.Serialization.SerializationInfo> information, <xref:System.Runtime.Serialization.StreamingContext> context).</span></span> <span data-ttu-id="e834a-111">逆シリアル化時には、<xref:System.Runtime.Serialization.SerializationInfo> のデータがフォーマッタによって逆シリアル化された後にのみ、現在のコンストラクターが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e834a-111">At deserialization time, the current constructor is called only after the data in the <xref:System.Runtime.Serialization.SerializationInfo> has been deserialized by the formatter.</span></span> <span data-ttu-id="e834a-112">一般に、クラスがシールされていない場合は、このコンストラクターを保護する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e834a-112">In general, this constructor should be protected if the class is not sealed.</span></span>  
  
 <span data-ttu-id="e834a-113">オブジェクトを逆シリアル化する順序を保証することはできません。</span><span class="sxs-lookup"><span data-stu-id="e834a-113">The order in which objects are deserialized cannot be guaranteed.</span></span> <span data-ttu-id="e834a-114">たとえば、ある型がまだ逆シリアル化されていない型を参照している場合、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="e834a-114">For example, if one type references a type that has not been deserialized yet, an exception will occur.</span></span> <span data-ttu-id="e834a-115">このような依存関係を持つ型を作成する場合は、`IDeserializationCallback` インターフェイスと `OnDeserialization` メソッドを実装することで、問題を回避できます。</span><span class="sxs-lookup"><span data-stu-id="e834a-115">If you are creating types that have such dependencies, you can work around the problem by implementing the `IDeserializationCallback` interface and the `OnDeserialization` method.</span></span>  
  
 <span data-ttu-id="e834a-116">シリアル化アーキテクチャは、<xref:System.Object>を拡張する型と同じ <xref:System.MarshalByRefObject> を拡張するオブジェクト型を処理します。</span><span class="sxs-lookup"><span data-stu-id="e834a-116">The serialization architecture handles object types that extend <xref:System.MarshalByRefObject> the same as types that extend <xref:System.Object>.</span></span> <span data-ttu-id="e834a-117">これらの型は、<xref:System.SerializableAttribute> でマークし、他のオブジェクト型として <xref:System.Runtime.Serialization.ISerializable> インターフェイスを実装できます。</span><span class="sxs-lookup"><span data-stu-id="e834a-117">These types can be marked with the <xref:System.SerializableAttribute> and implement the <xref:System.Runtime.Serialization.ISerializable> interface as any other object type.</span></span> <span data-ttu-id="e834a-118">オブジェクトの状態がキャプチャされ、ストリームに保持されます。</span><span class="sxs-lookup"><span data-stu-id="e834a-118">Their object state will be captured and persisted onto the stream.</span></span>  
  
 <span data-ttu-id="e834a-119">これらの型が <xref:System.Runtime.Remoting>によって使用されている場合、リモート処理インフラストラクチャによって、一般的なシリアル化をプリエンプション、代わりにプロキシを <xref:System.MarshalByRefObject>にシリアル化するサロゲートが提供されます。</span><span class="sxs-lookup"><span data-stu-id="e834a-119">When these types are being used through <xref:System.Runtime.Remoting>, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the <xref:System.MarshalByRefObject>.</span></span> <span data-ttu-id="e834a-120">サロゲートは、特定の型のオブジェクトをシリアル化および逆シリアル化する方法を認識するヘルパーです。</span><span class="sxs-lookup"><span data-stu-id="e834a-120">A surrogate is a helper that knows how to serialize and deserialize objects of a particular type.</span></span> <span data-ttu-id="e834a-121">ほとんどの場合、ユーザーに表示されないプロキシは <xref:System.Runtime.Remoting.ObjRef>型になります。</span><span class="sxs-lookup"><span data-stu-id="e834a-121">The proxy, invisible to the user in most cases, will be of type <xref:System.Runtime.Remoting.ObjRef>.</span></span>  
  
 <span data-ttu-id="e834a-122">一般的な設計パターンとして、クラスが serializable 属性でマークされ、<xref:System.MarshalByRefObject>が拡張されることは珍しくありません。</span><span class="sxs-lookup"><span data-stu-id="e834a-122">As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend <xref:System.MarshalByRefObject>.</span></span> <span data-ttu-id="e834a-123">開発者は、これら2つの特性を組み合わせるときに、考えられるシリアル化とリモート処理のシナリオについて慎重に検討する必要があります</span><span class="sxs-lookup"><span data-stu-id="e834a-123">Developers should think carefully about the possible serialization and remoting scenarios when combining these two characteristics.</span></span> <span data-ttu-id="e834a-124">これが適用される可能性がある例としては、<xref:System.IO.MemoryStream>があります。</span><span class="sxs-lookup"><span data-stu-id="e834a-124">One example where this might be applicable is with a <xref:System.IO.MemoryStream>.</span></span> <span data-ttu-id="e834a-125"><xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) の基本クラスは <xref:System.MarshalByRefObject>から拡張されますが、<xref:System.IO.MemoryStream> の状態をキャプチャして、そのまま復元することもできます。</span><span class="sxs-lookup"><span data-stu-id="e834a-125">While the base class of <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) extends from <xref:System.MarshalByRefObject>, it is possible to capture the state of a <xref:System.IO.MemoryStream> and restore it at will.</span></span> <span data-ttu-id="e834a-126">このため、このストリームの状態をデータベースにシリアル化して、後で復元することは意味があるかもしれません。</span><span class="sxs-lookup"><span data-stu-id="e834a-126">It might, therefore, be meaningful to serialize the state of this stream into a database and restore it at some later point in time.</span></span> <span data-ttu-id="e834a-127">ただし、リモート処理によって使用される場合、この型のオブジェクトはプロキシ化されます。</span><span class="sxs-lookup"><span data-stu-id="e834a-127">However, when used through remoting, an object of this type would be proxied.</span></span>  
  
 <span data-ttu-id="e834a-128"><xref:System.MarshalByRefObject>を拡張するクラスのシリアル化の詳細については、「<xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e834a-128">For more information about serialization of classes that extend <xref:System.MarshalByRefObject>, see <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>.</span></span> <span data-ttu-id="e834a-129"><xref:System.Runtime.Serialization.ISerializable>の実装の詳細については、「[カスタムシリアル化](~/docs/standard/serialization/custom-serialization.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e834a-129">For more information about implementing <xref:System.Runtime.Serialization.ISerializable>, see [Custom Serialization](~/docs/standard/serialization/custom-serialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e834a-130">次のコード例は、<xref:System.Runtime.Serialization.ISerializable> インターフェイスを使用して、クラスのカスタムシリアル化動作を定義する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e834a-130">The following code example demonstrates the use of the <xref:System.Runtime.Serialization.ISerializable> interface to define custom serialization behavior for a class.</span></span>  
  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="e834a-131">オブジェクトが独自のシリアル化と逆シリアル化に参加できるようにするには、このインターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="e834a-131">Implement this interface to allow an object to take part in its own serialization and deserialization.</span></span></para></block>
    <altmember cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" />
    <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md"><span data-ttu-id="e834a-132">XML シリアル化および SOAP シリアル化</span><span class="sxs-lookup"><span data-stu-id="e834a-132">XML and SOAP Serialization</span></span></related>
    <related type="Article" href="~/docs/standard/serialization/custom-serialization.md"><span data-ttu-id="e834a-133">カスタムのシリアル化</span><span class="sxs-lookup"><span data-stu-id="e834a-133">Custom serialization</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="iSerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="e834a-134">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="e834a-134">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span></span></param>
        <param name="context"><span data-ttu-id="e834a-135">このシリアル化のシリアル化先です (<see cref="T:System.Runtime.Serialization.StreamingContext" /> を参照)。</span><span class="sxs-lookup"><span data-stu-id="e834a-135">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</span></span></param>
        <summary><span data-ttu-id="e834a-136"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、対象オブジェクトをシリアル化するために必要なデータを設定します。</span><span class="sxs-lookup"><span data-stu-id="e834a-136">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e834a-137"><xref:System.Runtime.Serialization.SerializationInfo> に含まれるオブジェクトは、フォーマッタによって自動的に追跡およびシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="e834a-137">Any objects that are included in the <xref:System.Runtime.Serialization.SerializationInfo> are automatically tracked and serialized by the formatter.</span></span>  
  
 <span data-ttu-id="e834a-138"><xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> を呼び出すコードには、シリアル化サービスを提供するための <xref:System.Security.Permissions.SecurityPermission> が必要です。</span><span class="sxs-lookup"><span data-stu-id="e834a-138">Code that calls <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> requires the <xref:System.Security.Permissions.SecurityPermission> for providing serialization services.</span></span> <span data-ttu-id="e834a-139"><xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e834a-139">Associated enumeration: <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e834a-140">シリアル化時、このメソッドが呼び出される回数は、各オブジェクト インスタンスにつき 1 回だけであるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="e834a-140">It is not guaranteed that this method will be called only once per object instance during serialization.</span></span> <span data-ttu-id="e834a-141">したがって、呼び出しの回数に関係なく同じ動作が保たれるようにメソッドを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e834a-141">Therefore, the method should be implemented in such a way that its behavior will be the same regardless of the number of times it is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e834a-142">次の例では、<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> メソッドを使用して、シリアル化されたオブジェクトに代替値を設定します。</span><span class="sxs-lookup"><span data-stu-id="e834a-142">The following example uses the <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> method to set alternate values for a serialized object.</span></span> <span data-ttu-id="e834a-143">このコードでは、オブジェクトがシリアル化されるときに、<xref:System.Runtime.Serialization.SerializationInfo> クラスの <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> メソッドを使用して代替値を格納します。</span><span class="sxs-lookup"><span data-stu-id="e834a-143">The code uses the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> method of the <xref:System.Runtime.Serialization.SerializationInfo> class to store the alternate values when the object is serialized.</span></span> <span data-ttu-id="e834a-144">逆に、逆シリアル化中に `Person` クラスのコンストラクターが呼び出されると、alternatve 値は <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> メソッドを使用して取得され、オブジェクトのフィールドに再割り当てされます。</span><span class="sxs-lookup"><span data-stu-id="e834a-144">Conversely, when the constructor of the `Person` class is called during deserialization, the alternatve values are retrieved using the <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> method and reassigned to the object's fields.</span></span>  
  
 [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]
 [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e834a-145">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="e834a-145">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <related type="Article" href="~/docs/standard/serialization/custom-serialization.md"><span data-ttu-id="e834a-146">カスタムのシリアル化</span><span class="sxs-lookup"><span data-stu-id="e834a-146">Custom serialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
