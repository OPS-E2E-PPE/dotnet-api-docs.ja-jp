<Type Name="FileLogTraceListener" FullName="Microsoft.VisualBasic.Logging.FileLogTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0bfcb4d779d6d4cd814683f2c59f050a88a02cd8" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83975829" /></Metadata><TypeSignature Language="C#" Value="public class FileLogTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileLogTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class FileLogTraceListener&#xA;Inherits TraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileLogTraceListener : System::Diagnostics::TraceListener" />
  <TypeSignature Language="F#" Value="type FileLogTraceListener = class&#xA;    inherit TraceListener" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ログ出力をファイルに転送する簡単なリスナーを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスは、毎日またはアプリケーションごとに、必要に応じてログファイルをアーカイブするための自動化されたメンテナンス機能を提供します。 この自動アーカイブ機能により、開発者と管理者の責任を軽減できます。  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> のインスタンスを <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType> または <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> コレクションに追加して、出力をテキストファイルにリダイレクトすることができます。 このクラスのインスタンスは、Visual Basic アプリケーションの `My.Application.Log` または `My.Log` (Web アプリケーションの場合) に追加することもできます。 詳細については、「[チュートリアル: .log が情報を書き込む場所を変更する](/dotnet/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information)」を参照してください`.`  
  
 このクラスの主な特徴は次のとおりです。  
  
1.  *アーカイブ機能*。 このクラスによって生成されるログファイルには、ベース名と日付に基づいて名前が付けられ、ログファイルを連続したバージョンのログと区別するための数値も指定されます。 新しいログファイルは、必要に応じて作成されます。  
  
     ファイル名の明示的な形式は `baseName`[-`dateStamp`] [-`version`] .log です。この場合、次のようになります。  
  
    -   `baseName` 部分は、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> プロパティによって指定された、基本的なログ名です。  
  
    -   `dateStamp` の部分の形式は "YYYY-MM-DD" で、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> が <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> または <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>ときに表示されます。  
  
    -   同じ `baseName` と `dateStamp`で複数のログファイルが必要な場合は、`version` の部分である正の `Integer`がファイル名に追加されます。  
  
2.  *複数のクラスインスタンス*。 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスのインスタンスが、使用中のファイルに書き込みを行う場合は、次のようになります。  
  
    -   クラスは、同じプロセス内の <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスの別のインスタンスによって使用されている場合に、ファイルを共有します。  
  
    -   クラスは、ファイルが別のプロセスによって使用されている場合に、次に使用可能な名前を使用して新しいログファイルを作成します。  
  
3.  *スレッドセーフ*。 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスはスレッドセーフです。 これにより、ロックを使用せずに、複数のスレッドからログにメッセージを安全に書き込むことができます。  
  
 **ログファイルの場所**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> プロパティは、ログファイルの書き込み先となる一般的なディレクトリの1つを指定するために、<xref:Microsoft.VisualBasic.Logging.LogFileLocation> 列挙を受け取ります。  
  
-   別の場所にログを書き込むには、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> プロパティをその場所に設定します。  
  
 **ログファイル名**  
  
-   ログファイルの基本名は、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> プロパティによって指定されます。  
  
-   現在のログファイル名は、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> プロパティから読み取ることができます。 これは、他のいくつかのプロパティと、ファイルシステム内のログの現在の状態から派生します。  
  
 **ログのメンテナンス**  
  
-   新しいログファイルを作成する頻度の最小値は、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> プロパティによって決まります。 値が <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> または <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>の場合、新しいログファイルが少なくとも1回、または1週間に1回作成され、日付スタンプが <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 名に組み込まれます。  
  
-   ログファイルの最大サイズ (バイト単位) は、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> プロパティによって決まります。 ログファイルのサイズがこのサイズを超えると、ログに書き込まれた追加のメッセージは破棄され、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> プロパティによっては例外がスローされます。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> プロパティにより、使用可能な空き領域 (バイト単位) が決まります。 これにより、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスが使用可能なすべてのディスク領域を消費しないようにすることができます。 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> プロパティを使用して、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> バイト未満の空き領域がある場合のログ書き込みの動作を指定します。  
  
 **ログファイルの出力設定**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> プロパティは、ログファイルへの書き込みごとに、基になるストリームを自動的にフラッシュするかどうかを指定します。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> プロパティは、メッセージを現在のログファイルに追加するか (許可されている場合)、新しいログファイルに書き込むかを指定します。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> プロパティは、ログメッセージ内のフィールドを区切るために使用する文字列を指定します。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> プロパティは、新しいログファイルを作成するときに使用するエンコーディングを指定します。  
  
 **ログファイルの出力**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> メソッドと <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> メソッドは、ログファイルにメッセージを書き込みます。 これらのメソッドは、新しいログを作成する必要があるかどうかを判断するために、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> プロパティと、同じ基本名を持つ既存のログを確認します。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> メソッドは、出力バッファー内の現在のすべてのメッセージをログファイルにフラッシュします。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> メソッドは、他のプロセスで使用できるようにログファイルを閉じます。  
  
 **出力の有効化**  
  
 トレースリスナーを使用するには、トレースまたはデバッグを有効にする必要があります。 次の構文はコンパイラ固有です。 または Visual Basic 以外C#のコンパイラを使用する場合は、コンパイラのドキュメントを参照してください。  
  
-   でC#デバッグを有効にするには、コードのコンパイル時にコンパイラのコマンドラインに `/d:DEBUG` フラグを追加するか、ファイルの先頭に `#define DEBUG` を追加します。 Visual Basic で、コンパイラのコマンドラインに `/d:DEBUG=True` フラグを追加します。  
  
-   でC#トレースを有効にするには、コードをコンパイルするときにコンパイラのコマンドラインに `/d:TRACE` フラグを追加するか、ファイルの先頭に `#define TRACE` を追加します。 Visual Basic で、コンパイラのコマンドラインに `/d:TRACE=True` フラグを追加します。  
  
 リスナーのレベルを設定するには、アプリケーションの構成ファイルを編集します。 このファイル内で、リスナーを追加したり、その型を設定したり、パラメーターを設定したり、リスナーを削除したり、アプリケーションによって以前に設定されたすべてのリスナーをクリアしたりできます。 構成ファイルは、次の例のように書式設定する必要があります。  
  
 この例を実行するには、完全修飾アセンブリ名を指定する必要があります。 完全修飾アセンブリ名を取得する方法については、「[アセンブリ名](/dotnet/standard/assembly/names)」を参照してください。  
  
```xml  
<configuration>  
    <system.diagnostics>  
        <sharedListeners>  
            <add name="FileLog"  
                type="Microsoft.VisualBasic.Logging.FileLogTraceListener,   
                      Microsoft.VisualBasic, Version=8.0.0.0,   
                      Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,   
                      processorArchitecture=MSIL"   
                initializeData="FileLogWriter"/>  
        </sharedListeners>  
    </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
    <related type="Article" href="https://msdn.microsoft.com/library/ecc74f95-743c-450d-93f6-09a30db0fe4a">チュートリアル : My.Application.Log による情報の書き込み先の変更</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> クラスの新しいインスタンスを初期化し、その名前を設定します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>既定の名前を使用して、<see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスのインスタンス名を Microsoft.visualbasic.logging.filelogtracelistener に設定します。  
  
 インスタンス名には、<xref:System.Diagnostics.TraceListener.Name%2A> プロパティを使用してアクセスできます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">オブジェクト (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.FileLogTraceListener : string -&gt; Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="new Microsoft.VisualBasic.Logging.FileLogTraceListener name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">[https://login.microsoftonline.com/consumers/](<see langword="String" />) インスタンス オブジェクトの名前。</param>
        <summary>指定された名前を使用して、<see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスのインスタンス名を `name`に設定します。  
  
 インスタンス名には、<xref:System.Diagnostics.TraceListener.Name%2A> プロパティを使用してアクセスできます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">オブジェクト (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public bool Append { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Append" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberSignature Language="VB.NET" Value="Public Property Append As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Append { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Append : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のファイルに追記するか、新しいファイルまたは既存のファイルに出力するかを決定します。</summary>
        <value><see langword="Boolean" /> 値。現在のファイルに追記する場合は <see langword="True" />。新しいファイルに出力する場合は <see langword="False" />。 このプロパティの既定の設定は <see langword="True" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
   
## Remarks  

<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> プロパティが `True`場合、ログファイルは <xref:System.IO.FileMode.Append> モードで開かれ、既存のログが保持されます。 現在の書き込み位置はファイルの末尾から始まり、新しいログがファイルの末尾に追加されます。

`Append` プロパティが `False`場合、ログファイルは <xref:System.IO.FileMode.Truncate> モードで開かれます。このモードでは、ログファイルを開いたときにすべてのログデータが削除されます。 `Append` プロパティが `False` に設定された後、またはファイルが開かれて最初のログが書き込まれる前に、`FileLogTraceListener` はログファイルの既存の内容を削除します。 その後、`FileLogTraceListener` は、ファイルの末尾にトレースデータを追加します。 [追加] が False に設定されているときに `FileLogTraceListener` インスタンスを閉じて再度開くと、追加のログを書き込む前にログファイルのデータが消去されます。 これにより、特に、構成ファイルで `Append` プロパティの値を `False` に設定した場合に、データが失われる可能性があります。

この動作は、次のシナリオでオーバーライドされます。

- 出力ファイルは別のプロセスによってロックされています。 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 名に組み込まれているバージョン番号を使用して、新しいログファイルが作成されます。  
  
- 現在のファイルサイズが、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> プロパティで許可されている値を超えています。  追加のメッセージは破棄されます。 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> プロパティによっては、例外がスローされます。
  
- <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> プロパティによって指定されたログ作成スケジュールに従って、既存のファイル名が最新ではありません。 新しいログファイルが作成されます。 日付スタンプは <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 名に組み込まれています。  

 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoFlush : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ログ ファイル ストリームに書き込むたびに、バッファーをフラッシュするかどうかを示します。</summary>
        <value><see langword="Boolean" /> 値。書き込みのたびにストリームがフラッシュされる場合は <see langword="True" />。それ以外の場合、ログ エントリはバッファーに格納されて、より効率よく出力されます。 このプロパティの既定の設定は <see langword="False" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> プロパティの `False` 設定は、ログファイルに複数のメッセージを一度に書き込む方が効率的であるため、ほとんどのアプリケーションで最高のパフォーマンスが得られます。 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> メソッドを使用して、ログファイルの出力バッファーに現在格納されているすべてのメッセージをフラッシュすることができます。 また、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> メソッドを使用することもできます。このメソッドは、ログファイルを閉じる前にストリームを暗黙的にフラッシュします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      </Docs>
    </Member>
    <Member MemberName="BaseFileName">
      <MemberSignature Language="C#" Value="public string BaseFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseFileName : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ログ ファイルの基本名を取得または設定します。ログ ファイルの完全名を生成するときに使用されます。</summary>
        <value>[https://login.microsoftonline.com/consumers/](<see langword="String" />) ログ ファイルの基本名。 既定では、アプリケーションの製品名になります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> プロパティは、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスが書き込むログファイルの基本名を決定します。  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> プロパティは、現在の完全なログファイル名を示します。 ログのパス、基本名、日付、および異なるバージョンのログと区別するための数値に基づいて生成されます。 新しいログファイルは、必要に応じて作成されます。  
  
 完全なログファイル名の明示的な形式は \\`path``baseName`[-`dateStamp`] [-`iteration`] .log です。ここで、  
  
-   `path` の部分は <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> プロパティによって決定され、そのプロパティ値が <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>に設定されている場合は、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> プロパティによって決まります。  
  
-   `baseName` 部分は、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> プロパティによって指定された、基本的なログ名です。  
  
-   `dateStamp` の部分の形式は "YYYY-MM-DD" で、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> が <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> または <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>に設定されている場合に表示されます。  
  
-   同じ `baseName` と `dateStamp`で複数のログファイルが必要な場合は、`iteration` の部分である正の `Integer`がファイル名に追加されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="fileLogTraceListener.Close " />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void Close() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のログ ファイルに使用されているストリームを閉じ、現在のストリームに関連付けられたすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスが基になるストリームを管理するため、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> メソッドを明示的に呼び出す必要はありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomLocation">
      <MemberSignature Language="C#" Value="public string CustomLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomLocation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomLocation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CustomLocation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomLocation : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" /> プロパティが <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" /> に設定されている場合に、ログ ファイルのディレクトリを取得または設定します。</summary>
        <value>ログ ファイルのディレクトリ名を表す <see langword="String" />。 このプロパティの既定の設定は、アプリケーション データ用のユーザー ディレクトリです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> プロパティが設定されている場合は、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> プロパティも <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>に設定されます。  
  
 ディレクトリを解決できない場合、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> プロパティは例外をスローします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public string Delimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Delimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Delimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiter : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ログ メッセージに使用されているフィールド区切り記号を取得または設定します。</summary>
        <value>ログ メッセージのフィールド区切り記号を表す <see langword="String" />。 このプロパティの既定の設定はタブ文字です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> プロパティを使用すると、既定の区切り記号を変更できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiskSpaceExhaustedBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property DiskSpaceExhaustedBehavior As DiskSpaceExhaustedOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption get(); void set(Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption value); };" />
      <MemberSignature Language="F#" Value="member this.DiskSpaceExhaustedBehavior : Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ログ ファイルへの出力時に、空きディスク容量が <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> プロパティに指定された値を下回っていた場合の動作を決定します。</summary>
        <value>[https://login.microsoftonline.com/consumers/](<see cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />) ログ ファイルへの出力時に、空きディスク容量が <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> プロパティに指定された値を下回っていた場合、または、ログ ファイルのサイズが <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" /> プロパティの値を超えていた場合の動作を決定します。 既定値は <see cref="F:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> プロパティが <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages>に設定されている場合、予約済みのディスク領域が不足していると、ログメッセージは警告なしに破棄されます。 これは既定の動作であり、ディスクがいっぱいになった場合に単純なアプリケーションが失敗するのを防ぐことができます。  
  
 より堅牢なアプリケーションでは、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> プロパティを <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.ThrowException>に設定し、ログに書き込むすべてのコードの前後に `Try...Catch` ブロックを追加することができます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="fileLogTraceListener.Dispose disposing" />
      <MemberSignature Language="ILAsm" Value=".method familyvirtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="True" />。アンマネージド リソースだけを解放する場合は <see langword="False" />。</param>
        <summary>使用しているストリームを閉じ、選択されたオプションに従って、マネージド リソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `disposing` パラメーターが `True` の場合、このメソッドは、この <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> が参照しているすべてのマネージド オブジェクトによって保持されているリソースをすべて解放します。 このメソッドは、参照される各オブジェクトの `Dispose` メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。 <see langword="Dispose" /> をオーバーライドする場合は、以前に <see langword="Dispose" /> を呼び出したときに破棄されたオブジェクトを参照しないように注意する必要があります。  
  
このメソッドは、<see langword="Dispose" />基底クラスの <see langword="Dispose" /> メソッドを呼び出します。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>新しいログ ファイルを作成する際に使用するエンコーディングを取得または設定します。</summary>
        <value>新しいログ ファイルを作成する際のエンコーディングを表す <see cref="T:System.Text.Encoding" />。 このプロパティの既定値は <see cref="T:System.Text.UTF8Encoding" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既存のログファイルにテキストを追加する場合は、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> プロパティで指定されたエンコーディングではなく、そのファイルのエンコーディングが使用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.Text.UTF8Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="fileLogTraceListener.Flush " />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void Flush() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のログ ファイルへの書き込みに使用しているストリームをフラッシュします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> メソッドを使用して、バッファー内のすべてのデータを現在のログファイルに書き込みます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullLogFileName">
      <MemberSignature Language="C#" Value="public string FullLogFileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullLogFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullLogFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullLogFileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullLogFileName : string" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のログ ファイルの完全名を取得します。</summary>
        <value>現在のログ ファイルの完全名を表す <see langword="String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> プロパティは、現在の完全なログファイル名を示します。 ログのパス、基本名、日付、および異なるバージョンのログと区別するための数値に基づいて生成されます。 新しいログファイルは、必要に応じて作成されます。  
  
 完全なログファイル名の明示的な形式は \\`path``baseName`[-`dateStamp`] [-`iteration`] .log です。この場合、次のようになります。  
  
-   `path` の部分は <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> プロパティによって決定され、そのプロパティ値が <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>に設定されている場合は、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> プロパティによって決まります。  
  
-   `baseName` 部分は、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> プロパティによって指定された、基本的なログ名です。  
  
-   `dateStamp` の部分は YYYY-MM-DD という形式で、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> が <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> または <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>ときに表示されます。  
  
-   同じ `baseName` と `dateStamp`で複数のログファイルが必要な場合は、`iteration` の部分である正の `Integer`がファイル名に追加されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberSignature Language="F#" Value="override this.GetSupportedAttributes : unit -&gt; string[]" Usage="fileLogTraceListener.GetSupportedAttributes " />
      <MemberSignature Language="ILAsm" Value=".method familyvirtual instance string[] GetSupportedAttributes() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>トレース リスナーによってサポートされるカスタムの XML 構成属性を取得します。</summary>
        <returns>このリスナーで認識可能な XML 構成属性を保持する <see langword="String" /> 配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> のカスタム属性は、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスのインスタンスの動作を制御するために XML 構成ファイルで使用できます。 他の属性を使用すると、構成の例外が発生します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.TraceSource.GetSupportedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IncludeHostName">
      <MemberSignature Language="C#" Value="public bool IncludeHostName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeHostName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeHostName { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeHostName : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ログを記録しているコンピューターのホスト名を出力に含めるかどうかを示します。</summary>
        <value>[https://login.microsoftonline.com/consumers/](<see langword="Boolean" />) ホストの識別子を含める場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="False" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティを使用して、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> および <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> メソッドの動作を構成します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileLocation Location" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As LogFileLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileLocation Location { Microsoft::VisualBasic::Logging::LogFileLocation get(); void set(Microsoft::VisualBasic::Logging::LogFileLocation value); };" />
      <MemberSignature Language="F#" Value="member this.Location : Microsoft.VisualBasic.Logging.LogFileLocation with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ログ ファイルの場所を取得または設定します。</summary>
        <value>ログ ファイルの場所を表す <see cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />。 既定値は <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> プロパティを使用して、<xref:Microsoft.VisualBasic.Logging.LogFileLocation> 列挙値によって決定される定義済みのパスのいずれかにログのパスを設定します。  
  
|**場所の値**|**[パス]**|  
|------------------------|--------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.CommonApplicationDirectory>|すべてのユーザー間で共有されるアプリケーションデータのパス。次の形式で指定します。<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> `BasePath` の一般的な値は次のとおりです。<br /><br /> C:\documents and および Settings\All Users\Application データ<br /><br /> `CompanyName`、`ProductName`、および `ProductVersion` の値は、アセンブリから取得されます。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.ExecutableDirectory>|アプリケーションを開始した実行可能ファイルのパス。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory>|ユーザーのアプリケーションデータのパス。次の形式で指定します。<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> `BasePath` の一般的な値は次のとおりです。<br /><br /> C:\Documents and Settings\\`username`\Application Data<br /><br /> `CompanyName`、`ProductName`、`ProductVersion` の値は、アセンブリを形成します。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.TempDirectory>|現在のシステムの一時フォルダーのパス。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>|<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> によって指定された文字列が空でない場合は、パスとして使用します。それ以外の場合は、ユーザーのアプリケーションデータのパスを使用します。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />
      </Docs>
    </Member>
    <Member MemberName="LogFileCreationSchedule">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberSignature Language="VB.NET" Value="Public Property LogFileCreationSchedule As LogFileCreationScheduleOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption LogFileCreationSchedule { Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption get(); void set(Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption value); };" />
      <MemberSignature Language="F#" Value="member this.LogFileCreationSchedule : Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ログ ファイルの名前に追加する日付を決定します。</summary>
        <value>[https://login.microsoftonline.com/consumers/](<see cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />) ログ ファイルの名前に追加される日付を示します。 既定値は <see cref="F:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> 列挙値のいずれかを <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> プロパティに割り当てて、ログファイルの名前に含める日付を指定します。  
  
 日付の形式は YYYY-MM-DD です。 ログファイル名の形式の詳細については、「<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>」を参照してください。  
  
|**LogFileCreationSchedule 値**|**ログファイル名の日付**|  
|---------------------------------------|-----------------------------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>|ログ ファイルの名前に現在の日付を追加します。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None>|ログ ファイルの名前に日付を追加しません。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>|現在の週の最初の曜日をログ ファイルの名前に追加します。<br /><br /> 週は土曜日に始まります。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="MaxFileSize">
      <MemberSignature Language="C#" Value="public long MaxFileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxFileSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxFileSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxFileSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxFileSize : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ログ ファイルの最大サイズ (バイト単位) を取得または設定します。</summary>
        <value>[https://login.microsoftonline.com/consumers/](<see langword="Long" />) ログ ファイルの最大サイズ (バイト単位) を表します。 既定値は500万です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用して、ログファイルが大きくなっていないことを確認します。  
  
 ログファイルのサイズ (バイト単位) がこのプロパティの値よりも大きい場合、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスがログにメッセージを書き込もうとすると、メッセージは破棄され、エラーはサイレントになるか、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> プロパティの値に応じて例外がスローされます。 それ以外の場合は、空きディスク領域の容量 (バイト単位) が <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>未満の場合、メッセージがログに書き込まれます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">このプロパティが、1000 未満の値に設定されている場合に発生します。</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="ReserveDiskSpace">
      <MemberSignature Language="C#" Value="public long ReserveDiskSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReserveDiskSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ReserveDiskSpace As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReserveDiskSpace { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.ReserveDiskSpace : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>確保する空きディスク容量 (バイト単位) を取得または設定します。この容量を下回ると、ログ ファイルにメッセージを出力できなくなります。</summary>
        <value>[https://login.microsoftonline.com/consumers/](<see langword="Long" />) 必要な空きディスク容量を表します。 既定値は1000万です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用して、ログファイルがディスクに完全に格納されないようにします。  
  
 空きディスク領域の容量 (バイト単位) がこのプロパティの値よりも小さい場合、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスがログにメッセージを書き込もうとすると、メッセージは破棄され、エラーはサイレントになるか、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> プロパティの値に応じて例外がスローされます。 それ以外の場合、ログファイルのサイズ (バイト単位) が <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>より大きい場合は、メッセージがログに書き込まれます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">このプロパティが 0 未満の値に設定されている場合に発生します。</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>出力ファイルにトレース データを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> メソッドは、アプリケーションコードから呼び出すためのものではありません。 これらのメソッドは、<xref:System.Diagnostics.Debug>、<xref:System.Diagnostics.Trace>、および <xref:System.Diagnostics.TraceSource> クラスのメンバーによって、出力するトレースデータを書き込むために呼び出されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を含む <see cref="T:System.Diagnostics.TraceEventCache" /> オブジェクト。</param>
        <param name="source">このメソッドを呼び出したトレース ソースの名前。</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 列挙値のいずれか。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="data">出力するトレース データ。</param>
        <summary>トレース情報、データ オブジェクト、およびイベント情報を出力ファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは以下の操作を行います。  
  
1.  出力のデータとコンテキスト情報を書式設定します。  
  
2.  必要に応じて、新しいログファイルを作成します。  
  
3.  ログファイルに情報を書き込みます。  
  
 新しいログファイルの作成の詳細については、「<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>」を参照してください。  
  
 次の表に、出力フィールドの表示順の一覧を示します。 フィールドは、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> プロパティによって指定された文字列によって区切られ、その後に行終端記号が続きます。  
  
|**フィールド**|**出力条件**|**説明**|  
|---------------|--------------------------|---------------------|  
|`source`|Always (常に)|`name` の値。|  
|`severity`|Always (常に)|`eventType`の列挙値の名前。|  
|`id`|Always (常に)|`id` の文字列表記。|  
|`message`|Always (常に)|`data` の文字列表記。|  
|`callStack`|<xref:System.Diagnostics.TraceOptions.Callstack> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.Callstack%2A> プロパティ。|  
|`CorrelationID`|<xref:System.Diagnostics.TraceOptions.LogicalOperationStack> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> プロパティ。|  
|`DateTime`|<xref:System.Diagnostics.TraceOptions.DateTime> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.DateTime%2A> プロパティの文字列形式。 文字列変換には、インバリアントカルチャが使用されます。|  
|`ProcessID`|<xref:System.Diagnostics.TraceOptions.ProcessId> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> プロパティの文字列形式。 文字列変換には、インバリアントカルチャが使用されます。|  
|`ThreadID`|<xref:System.Diagnostics.TraceOptions.ThreadId> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> プロパティ。|  
|`Timestamp`|<xref:System.Diagnostics.TraceOptions.Timestamp> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> プロパティの文字列形式。 文字列変換には、インバリアントカルチャが使用されます。|  
|`HostName`|<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> プロパティが `True`場合。|コンピューターの名前です。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を含む <see cref="T:System.Diagnostics.TraceEventCache" /> オブジェクト。</param>
        <param name="source">このメソッドを呼び出したトレース ソースの名前。</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 列挙値のいずれか。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="data">データとして出力するオブジェクトの配列。</param>
        <summary>トレース情報、データ オブジェクトの配列、およびイベント情報を出力ファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは以下の操作を行います。  
  
1.  出力のデータとコンテキスト情報の書式を設定します。  
  
2.  必要に応じて、新しいログファイルを作成します。  
  
3.  ログファイルに情報を書き込みます。  
  
 新しいログファイルの作成の詳細については、「<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>」を参照してください。  
  
 次の表に、出力フィールドの表示順序を示します。 フィールドは、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> プロパティによって指定された文字列によって区切られ、その後に行終端記号が続きます。  
  
|**フィールド**|**出力条件**|**説明**|  
|---------------|--------------------------|---------------------|  
|`source`|Always (常に)|`name` の値。|  
|`severity`|Always (常に)|`eventType`の列挙値の名前。|  
|`id`|Always (常に)|`id` の文字列表記。|  
|`message`|Always (常に)|`data`内の各要素の文字列形式で構成される文字列。それぞれ <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>によって区切られます。|  
|`callStack`|<xref:System.Diagnostics.TraceOptions.Callstack> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.Callstack%2A> プロパティ。|  
|`CorrelationID`|<xref:System.Diagnostics.TraceOptions.LogicalOperationStack> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> プロパティ。|  
|`DateTime`|<xref:System.Diagnostics.TraceOptions.DateTime> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.DateTime%2A> プロパティの文字列形式。 文字列変換には、インバリアントカルチャが使用されます。|  
|`ProcessID`|<xref:System.Diagnostics.TraceOptions.ProcessId> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> プロパティの文字列形式。 文字列変換には、インバリアントカルチャが使用されます。|  
|`ThreadID`|<xref:System.Diagnostics.TraceOptions.ThreadId> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> プロパティ。|  
|`Timestamp`|<xref:System.Diagnostics.TraceOptions.Timestamp> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> プロパティの文字列形式。 文字列変換には、インバリアントカルチャが使用されます。|  
|`HostName`|<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> プロパティが `True`場合。|コンピューターの名前です。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>トレース情報とイベント情報を出力ファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> メソッドは、アプリケーションコードから呼び出すためのものではありません。 これらのメソッドは、<xref:System.Diagnostics.Debug>、<xref:System.Diagnostics.Trace>、および <xref:System.Diagnostics.TraceSource> クラスのメンバーによって、出力するトレースデータを書き込むために呼び出されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を含む <see cref="T:System.Diagnostics.TraceEventCache" /> オブジェクト。</param>
        <param name="source">このメソッドを呼び出したトレース ソースの名前。</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 列挙値のいずれか。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="message">書き込むメッセージ。</param>
        <summary>トレース情報、メッセージ、およびイベント情報を出力ファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは以下の操作を行います。  
  
1.  出力のデータとコンテキスト情報を書式設定します。  
  
2.  必要に応じて、新しいログファイルを作成します。  
  
3.  ログファイルに情報を書き込みます。  
  
 新しいログファイルの作成の詳細については、「<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>」を参照してください。  
  
 次の表は、出力フィールドの表示順を示しています。 フィールドは、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> プロパティによって指定された文字列によって区切られ、その後に行終端記号が続きます。  
  
|**フィールド**|**出力条件**|**説明**|  
|---------------|--------------------------|---------------------|  
|`source`|常に。|`name` の値。|  
|`severity`|常に。|`eventType`の列挙値の名前。|  
|`id`|常に。|`id` の文字列表記。|  
|`message`|常に。|`message` の値。|  
|`callStack`|<xref:System.Diagnostics.TraceOptions.Callstack> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.Callstack%2A> プロパティ。|  
|`CorrelationID`|<xref:System.Diagnostics.TraceOptions.LogicalOperationStack> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> プロパティ。|  
|`DateTime`|<xref:System.Diagnostics.TraceOptions.DateTime> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.DateTime%2A> プロパティの文字列形式。 文字列変換には、インバリアントカルチャが使用されます。|  
|`ProcessID`|<xref:System.Diagnostics.TraceOptions.ProcessId> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> プロパティの文字列形式。 文字列変換には、インバリアントカルチャが使用されます。|  
|`ThreadID`|<xref:System.Diagnostics.TraceOptions.ThreadId> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> プロパティ。|  
|`Timestamp`|<xref:System.Diagnostics.TraceOptions.Timestamp> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> プロパティの文字列形式。 文字列変換には、インバリアントカルチャが使用されます。|  
|`HostName`|<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> プロパティが `True`場合。|コンピューターの名前です。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を含む <see cref="T:System.Diagnostics.TraceEventCache" /> オブジェクト。</param>
        <param name="source">このメソッドを呼び出したトレース ソースの名前。</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 列挙値のいずれか。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="format">0 個以上の書式項目を格納している書式指定文字列。<paramref name="args" /> 配列内のオブジェクトに対応します。</param>
        <param name="args">0 個以上の書式設定対象オブジェクトを含んだ <see langword="Object" /> 配列。</param>
        <summary>トレース情報、書式設定されたオブジェクトの配列、およびイベント情報を出力ファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは以下の操作を行います。  
  
1.  出力のデータとコンテキスト情報を書式設定します。  
  
2.  必要に応じて、新しいログファイルを作成します。  
  
3.  ログファイルに情報を書き込みます。  
  
 新しいログファイルの作成の詳細については、「<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>」を参照してください。  
  
 次の表は、出力フィールドの表示順を示しています。 フィールドは、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> プロパティによって指定された文字列によって区切られ、その後に行終端記号が続きます。  
  
|**フィールド**|**出力条件**|**説明**|  
|---------------|--------------------------|---------------------|  
|`source`|Always (常に)|`name` の値。|  
|`severity`|Always (常に)|`eventType`の列挙値の名前。|  
|`id`|Always (常に)|`id` の文字列表記。|  
|`message`|Always (常に)|`format` 文字列で書式設定され、文字列変換にインバリアントカルチャを使用して `args` のデータ。|  
|`callStack`|<xref:System.Diagnostics.TraceOptions.Callstack> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.Callstack%2A> プロパティ。|  
|`CorrelationID`|<xref:System.Diagnostics.TraceOptions.LogicalOperationStack> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> プロパティ。|  
|`DateTime`|<xref:System.Diagnostics.TraceOptions.DateTime> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.DateTime%2A> プロパティの文字列形式。 文字列変換には、インバリアントカルチャが使用されます。|  
|`ProcessID`|<xref:System.Diagnostics.TraceOptions.ProcessId> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> プロパティの文字列形式。 文字列変換には、インバリアントカルチャが使用されます。|  
|`ThreadID`|<xref:System.Diagnostics.TraceOptions.ThreadId> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> プロパティ。|  
|`Timestamp`|<xref:System.Diagnostics.TraceOptions.Timestamp> フラグが <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティで設定されている場合。|`eventCache`の <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> プロパティの文字列形式。 文字列変換には、インバリアントカルチャが使用されます。|  
|`HostName`|<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> プロパティが `True`場合。|コンピューターの名前です。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="fileLogTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">[https://login.microsoftonline.com/consumers/](<see langword="String" />) 書き込むカスタム メッセージ。</param>
        <summary>文脈情報を付加せずに、メッセージを逐一ディスクに出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A> メソッドは、コンテキスト情報を追加せずに、特定のメッセージをログファイルに書き込みます。  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> のメソッドのいずれかを使用して、ログ出力にコンテキスト情報を含めます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="fileLogTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">[https://login.microsoftonline.com/consumers/](<see langword="String" />) 書き込むカスタム メッセージ。</param>
        <summary>文脈情報を追加せずに、メッセージを逐一ディスクに出力します。現在行の最後に終端記号が追加されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A> メソッドは、コンテキスト情報を追加せずに、特定のメッセージをログファイルに書き込みます。  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> のメソッドのいずれかを使用して、ログ出力にコンテキスト情報を含めます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
