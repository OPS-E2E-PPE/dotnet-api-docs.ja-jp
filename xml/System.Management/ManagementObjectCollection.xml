<Type Name="ManagementObjectCollection" FullName="System.Management.ManagementObjectCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e1639093d576499498179fd074d5190190dd2e8f" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78700045" /></Metadata><TypeSignature Language="C#" Value="public class ManagementObjectCollection : IDisposable, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ManagementObjectCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Management.ManagementObjectCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class ManagementObjectCollection&#xA;Implements ICollection, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManagementObjectCollection : IDisposable, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type ManagementObjectCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Management</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="d88f2-101">WMI を通じて取得される管理オブジェクトの異なるコレクションを表します。</span><span class="sxs-lookup"><span data-stu-id="d88f2-101">Represents different collections of management objects retrieved through WMI.</span></span> <span data-ttu-id="d88f2-102">このコレクション内のオブジェクトは、<see cref="T:System.Management.ManagementBaseObject" /> から派生した型のオブジェクトで、<see cref="T:System.Management.ManagementObject" /> や <see cref="T:System.Management.ManagementClass" /> などが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d88f2-102">The objects in this collection are of <see cref="T:System.Management.ManagementBaseObject" />-derived types, including <see cref="T:System.Management.ManagementObject" /> and <see cref="T:System.Management.ManagementClass" />.</span></span> <span data-ttu-id="d88f2-103">コレクションは、<see cref="T:System.Management.ManagementObjectSearcher" /> で実行された WMI クエリの結果、または指定した型 (型を表す <see cref="T:System.Management.ManagementClass" /> から取得される) の管理オブジェクトの列挙体になります。</span><span class="sxs-lookup"><span data-stu-id="d88f2-103">The collection can be the result of a WMI query executed through a <see cref="T:System.Management.ManagementObjectSearcher" />, or an enumeration of management objects of a specified type retrieved through a <see cref="T:System.Management.ManagementClass" /> representing that type.</span></span> <span data-ttu-id="d88f2-104">また、このコレクションは、指定した方法で特定の管理オブジェクトに関連付けられた管理オブジェクトのコレクションとなることもあります。この場合、コレクションは <see cref="M:System.Management.ManagementObject.GetRelated" /> などのメソッドで取得されます。</span><span class="sxs-lookup"><span data-stu-id="d88f2-104">In addition, this can be a collection of management objects related in a specified way to a specific management object - in this case the collection would be retrieved through a method such as <see cref="M:System.Management.ManagementObject.GetRelated" />.</span></span> <span data-ttu-id="d88f2-105">コレクションは、<see cref="T:System.Management.ManagementObjectCollection.ManagementObjectEnumerator" /> を使用してウォークすることができ、コレクション内のオブジェクトはさまざまな管理タスクで検査または使用されます。</span><span class="sxs-lookup"><span data-stu-id="d88f2-105">The collection can be walked using the <see cref="T:System.Management.ManagementObjectCollection.ManagementObjectEnumerator" /> and objects in it can be inspected or manipulated for various management tasks.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d88f2-106">配列にコレクションをコピーします。</span><span class="sxs-lookup"><span data-stu-id="d88f2-106">Copies the collection to an array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.ManagementObjectCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="managementObjectCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="d88f2-107">コピー先の配列。</span><span class="sxs-lookup"><span data-stu-id="d88f2-107">An array to copy to.</span></span></param>
        <param name="index"><span data-ttu-id="d88f2-108">コピーの開始位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="d88f2-108">The index to start from.</span></span></param>
        <summary><span data-ttu-id="d88f2-109">配列にコレクションをコピーします。</span><span class="sxs-lookup"><span data-stu-id="d88f2-109">Copies the collection to an array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="net-framework-security"></a><span data-ttu-id="d88f2-110">.NET Framework セキュリティ</span><span class="sxs-lookup"><span data-stu-id="d88f2-110">.NET Framework Security</span></span>  
 <span data-ttu-id="d88f2-111">直前の呼び出し元に対する完全な信頼。</span><span class="sxs-lookup"><span data-stu-id="d88f2-111">Full trust for the immediate caller.</span></span> <span data-ttu-id="d88f2-112">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="d88f2-112">This member cannot be used by partially trusted code.</span></span> <span data-ttu-id="d88f2-113">詳細については、「[部分信頼コードからのライブラリの使用](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d88f2-113">For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Management.ManagementBaseObject[] objectCollection, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Management.ManagementBaseObject[] objectCollection, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.ManagementObjectCollection.CopyTo(System.Management.ManagementBaseObject[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (objectCollection As ManagementBaseObject(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Management::ManagementBaseObject ^&gt; ^ objectCollection, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Management.ManagementBaseObject[] * int -&gt; unit" Usage="managementObjectCollection.CopyTo (objectCollection, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectCollection" Type="System.Management.ManagementBaseObject[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="objectCollection"><span data-ttu-id="d88f2-114">対象となる配列。</span><span class="sxs-lookup"><span data-stu-id="d88f2-114">The target array.</span></span></param>
        <param name="index"><span data-ttu-id="d88f2-115">コピーの開始位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="d88f2-115">The index to start from.</span></span></param>
        <summary><span data-ttu-id="d88f2-116">コレクションの項目を <see cref="T:System.Management.ManagementBaseObject" /> 配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="d88f2-116">Copies the items in the collection to a <see cref="T:System.Management.ManagementBaseObject" /> array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="net-framework-security"></a><span data-ttu-id="d88f2-117">.NET Framework セキュリティ</span><span class="sxs-lookup"><span data-stu-id="d88f2-117">.NET Framework Security</span></span>  
 <span data-ttu-id="d88f2-118">直前の呼び出し元に対する完全な信頼。</span><span class="sxs-lookup"><span data-stu-id="d88f2-118">Full trust for the immediate caller.</span></span> <span data-ttu-id="d88f2-119">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="d88f2-119">This member cannot be used by partially trusted code.</span></span> <span data-ttu-id="d88f2-120">詳細については、「[部分信頼コードからのライブラリの使用](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d88f2-120">For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Management.ManagementObjectCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Management.ManagementObjectCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d88f2-121">コレクション内のオブジェクトの数を示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d88f2-121">Gets a value indicating the number of objects in the collection.</span></span></summary>
        <value><span data-ttu-id="d88f2-122">コレクション内のオブジェクトの数。</span><span class="sxs-lookup"><span data-stu-id="d88f2-122">The number of objects in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d88f2-123">このプロパティは非常にコストが高くなります。コレクションのすべてのメンバーを列挙する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d88f2-123">This property is very expensive - it requires that all members of the collection be enumerated.</span></span>  
  
## <a name="property-value"></a><span data-ttu-id="d88f2-124">プロパティ値</span><span class="sxs-lookup"><span data-stu-id="d88f2-124">Property Value</span></span>  
 <span data-ttu-id="d88f2-125">コレクション内のオブジェクトの数。</span><span class="sxs-lookup"><span data-stu-id="d88f2-125">The number of objects in the collection.</span></span>  
  
## <a name="net-framework-security"></a><span data-ttu-id="d88f2-126">.NET Framework セキュリティ</span><span class="sxs-lookup"><span data-stu-id="d88f2-126">.NET Framework Security</span></span>  
 <span data-ttu-id="d88f2-127">直前の呼び出し元に対する完全な信頼。</span><span class="sxs-lookup"><span data-stu-id="d88f2-127">Full trust for the immediate caller.</span></span> <span data-ttu-id="d88f2-128">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="d88f2-128">This member cannot be used by partially trusted code.</span></span> <span data-ttu-id="d88f2-129">詳細については、「[部分信頼コードからのライブラリの使用](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d88f2-129">For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.ManagementObjectCollection.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="managementObjectCollection.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d88f2-130">オブジェクトと関連付けられたリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="d88f2-130">Releases resources associated with this object.</span></span> <span data-ttu-id="d88f2-131">このメソッドを呼び出した後に、このオブジェクトを使用しようとすると、<see cref="T:System.ObjectDisposedException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d88f2-131">After this method has been called, an attempt to use this object will result in an <see cref="T:System.ObjectDisposedException" /> being thrown.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="net-framework-security"></a><span data-ttu-id="d88f2-132">.NET Framework セキュリティ</span><span class="sxs-lookup"><span data-stu-id="d88f2-132">.NET Framework Security</span></span>  
 <span data-ttu-id="d88f2-133">直前の呼び出し元に対する完全な信頼。</span><span class="sxs-lookup"><span data-stu-id="d88f2-133">Full trust for the immediate caller.</span></span> <span data-ttu-id="d88f2-134">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="d88f2-134">This member cannot be used by partially trusted code.</span></span> <span data-ttu-id="d88f2-135">詳細については、「[部分信頼コードからのライブラリの使用](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d88f2-135">For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IDisposable.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ManagementObjectCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.ManagementObjectCollection.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ManagementObjectCollection ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="managementObjectCollection.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d88f2-136">オブジェクトが保持しているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="d88f2-136">Disposes of resources the object is holding.</span></span> <span data-ttu-id="d88f2-137">これはオブジェクトのデストラクターです。</span><span class="sxs-lookup"><span data-stu-id="d88f2-137">This is the destructor for the object.</span></span> <span data-ttu-id="d88f2-138">ファイナライザーは、デストラクター構文を使用して表します。</span><span class="sxs-lookup"><span data-stu-id="d88f2-138">Finalizers are expressed using destructor syntax.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="net-framework-security"></a><span data-ttu-id="d88f2-139">.NET Framework セキュリティ</span><span class="sxs-lookup"><span data-stu-id="d88f2-139">.NET Framework Security</span></span>  
 <span data-ttu-id="d88f2-140">直前の呼び出し元に対する完全な信頼。</span><span class="sxs-lookup"><span data-stu-id="d88f2-140">Full trust for the immediate caller.</span></span> <span data-ttu-id="d88f2-141">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="d88f2-141">This member cannot be used by partially trusted code.</span></span> <span data-ttu-id="d88f2-142">詳細については、「[部分信頼コードからのライブラリの使用](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d88f2-142">For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Management.ManagementObjectCollection.ManagementObjectEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Management.ManagementObjectCollection/ManagementObjectEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.ManagementObjectCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ManagementObjectCollection.ManagementObjectEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Management::ManagementObjectCollection::ManagementObjectEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Management.ManagementObjectCollection.ManagementObjectEnumerator" Usage="managementObjectCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.ManagementObjectCollection+ManagementObjectEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d88f2-143">コレクションの列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="d88f2-143">Returns the enumerator for the collection.</span></span></summary>
        <returns><span data-ttu-id="d88f2-144">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="d88f2-144">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d88f2-145">(Visual Basic .NET `For Each` ステートメントまたはC# `For` ステートメントの場合と同様に、順方向専用列挙子を使用して反復処理できるのは1回だけです。</span><span class="sxs-lookup"><span data-stu-id="d88f2-145">You can only iterate (as in a Visual Basic .NET `For Each` statement or a C# `For` statement) through a forward-only enumerator one time.</span></span> <span data-ttu-id="d88f2-146">インスタンスを含むメモリは WMI によって解放されるので、列挙子を巻き戻すことはできません。</span><span class="sxs-lookup"><span data-stu-id="d88f2-146">The memory containing the instances is released by WMI so that the enumerator cannot be rewound.</span></span> <span data-ttu-id="d88f2-147">したがって、列挙子を巻き戻す必要があるため、<xref:System.Management.ManagementObjectCollection.Count%2A> メソッドを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="d88f2-147">Therefore, the <xref:System.Management.ManagementObjectCollection.Count%2A> method cannot be used since it requires rewinding the enumerator.</span></span>  
  
 <span data-ttu-id="d88f2-148">前方参照専用の列挙子は、一般に、従来の列挙子よりもはるかに高速で使用されるメモリが少なくなりますが、<xref:System.Management.ManagementObjectCollection.ManagementObjectEnumerator.Reset%2A>を呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="d88f2-148">Forward-only enumerators are generally much faster and use less memory than conventional enumerators, but they do not allow calls to  <xref:System.Management.ManagementObjectCollection.ManagementObjectEnumerator.Reset%2A>.</span></span>  
  
 <span data-ttu-id="d88f2-149">列挙子が巻き戻し可能の場合、コレクション内のオブジェクトは複数の列挙体で使用できます。</span><span class="sxs-lookup"><span data-stu-id="d88f2-149">If an enumerator is rewindable, the objects in the collection will be kept available for multiple enumerations.</span></span>  
  
## <a name="net-framework-security"></a><span data-ttu-id="d88f2-150">.NET Framework セキュリティ</span><span class="sxs-lookup"><span data-stu-id="d88f2-150">.NET Framework Security</span></span>  
 <span data-ttu-id="d88f2-151">直前の呼び出し元に対する完全な信頼。</span><span class="sxs-lookup"><span data-stu-id="d88f2-151">Full trust for the immediate caller.</span></span> <span data-ttu-id="d88f2-152">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="d88f2-152">This member cannot be used by partially trusted code.</span></span> <span data-ttu-id="d88f2-153">詳細については、「[部分信頼コードからのライブラリの使用](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d88f2-153">For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Management.ManagementObjectCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Management.ManagementObjectCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d88f2-154">オブジェクトの同期がとられている (スレッドセーフである) かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d88f2-154">Gets a value that indicates whether the object is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="d88f2-155">オブジェクトが同期されているかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="d88f2-155"><see langword="true" /> if the object is synchronized; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="property-value"></a><span data-ttu-id="d88f2-156">プロパティ値</span><span class="sxs-lookup"><span data-stu-id="d88f2-156">Property Value</span></span>  
 <span data-ttu-id="d88f2-157">オブジェクトが同期されている場合は `true`。それ以外の場合は `false`。</span><span class="sxs-lookup"><span data-stu-id="d88f2-157">`true`, if the object is synchronized, otherwise `false`.</span></span>  
  
## <a name="net-framework-security"></a><span data-ttu-id="d88f2-158">.NET Framework セキュリティ</span><span class="sxs-lookup"><span data-stu-id="d88f2-158">.NET Framework Security</span></span>  
 <span data-ttu-id="d88f2-159">直前の呼び出し元に対する完全な信頼。</span><span class="sxs-lookup"><span data-stu-id="d88f2-159">Full trust for the immediate caller.</span></span> <span data-ttu-id="d88f2-160">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="d88f2-160">This member cannot be used by partially trusted code.</span></span> <span data-ttu-id="d88f2-161">詳細については、「[部分信頼コードからのライブラリの使用](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d88f2-161">For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Management.ManagementObjectCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Management.ManagementObjectCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d88f2-162">同期に使用するオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="d88f2-162">Gets the object to be used for synchronization.</span></span></summary>
        <value><span data-ttu-id="d88f2-163">同期に使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d88f2-163">An object that can be used for synchronization.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="property-value"></a><span data-ttu-id="d88f2-164">プロパティ値</span><span class="sxs-lookup"><span data-stu-id="d88f2-164">Property Value</span></span>  
 <span data-ttu-id="d88f2-165">同期に使用するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d88f2-165">The object to be used for synchronization.</span></span>  
  
## <a name="net-framework-security"></a><span data-ttu-id="d88f2-166">.NET Framework セキュリティ</span><span class="sxs-lookup"><span data-stu-id="d88f2-166">.NET Framework Security</span></span>  
 <span data-ttu-id="d88f2-167">直前の呼び出し元に対する完全な信頼。</span><span class="sxs-lookup"><span data-stu-id="d88f2-167">Full trust for the immediate caller.</span></span> <span data-ttu-id="d88f2-168">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="d88f2-168">This member cannot be used by partially trusted code.</span></span> <span data-ttu-id="d88f2-169">詳細については、「[部分信頼コードからのライブラリの使用](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d88f2-169">For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.ManagementObjectCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="managementObjectCollection.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d88f2-170"><see cref="T:System.Management.ManagementObjectCollection" /> を反復処理する <see cref="T:System.Collections.IEnumerator" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d88f2-170">Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the <see cref="T:System.Management.ManagementObjectCollection" />.</span></span></summary>
        <returns><span data-ttu-id="d88f2-171"><see cref="T:System.Collections.IEnumerator" /> の <see cref="T:System.Management.ManagementObjectCollection" />。</span><span class="sxs-lookup"><span data-stu-id="d88f2-171">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Management.ManagementObjectCollection" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d88f2-172">[Visual Basic、 C#]</span><span class="sxs-lookup"><span data-stu-id="d88f2-172">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="d88f2-173">C# 言語の `foreach` ステートメント (Visual Basic の場合は `for each`) を使用することで列挙子の複雑さを回避できます。</span><span class="sxs-lookup"><span data-stu-id="d88f2-173">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="d88f2-174">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d88f2-174">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="d88f2-175">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="d88f2-175">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="d88f2-176">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="d88f2-176">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="d88f2-177"><xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。</span><span class="sxs-lookup"><span data-stu-id="d88f2-177"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="d88f2-178">この位置で <xref:System.Collections.IEnumerator.Current%2A> を呼び出すと、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d88f2-178">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="d88f2-179">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="d88f2-179">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="d88f2-180"><xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="d88f2-180"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="d88f2-181"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="d88f2-181"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="d88f2-182"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="d88f2-182">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="d88f2-183">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="d88f2-183">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="d88f2-184">前回 <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出して `false` が返された場合に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出すと例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d88f2-184">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="d88f2-185"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d88f2-185">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="d88f2-186">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="d88f2-186">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="d88f2-187">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに無効になり、次に <xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> を呼び出すと <xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d88f2-187">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="d88f2-188"><xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出してから <xref:System.Collections.IEnumerator.Current%2A> を呼び出すまでの間にコレクションが変更された場合、列挙子が既に無効になっていても、<xref:System.Collections.IEnumerator.Current%2A> は、設定されている要素を返します。</span><span class="sxs-lookup"><span data-stu-id="d88f2-188">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="d88f2-189">列挙子には、コレクションへの排他アクセスがありません。したがって、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="d88f2-189">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="d88f2-190">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d88f2-190">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="d88f2-191">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="d88f2-191">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="d88f2-192">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="d88f2-192">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
