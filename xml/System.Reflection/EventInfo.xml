<Type Name="EventInfo" FullName="System.Reflection.EventInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="da868927446a93cf02d8e9cdbcc5f2759eac0f27" /><Meta Name="ms.sourcegitcommit" Value="8dc7427b3f8ede13c290b671feeb1dc33978e582" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/06/2020" /><Meta Name="ms.locfileid" Value="77043391" /></Metadata><TypeSignature Language="C#" Value="public abstract class EventInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._EventInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit EventInfo extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._EventInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.EventInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EventInfo&#xA;Inherits MemberInfo&#xA;Implements _EventInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventInfo abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_EventInfo" />
  <TypeSignature Language="F#" Value="type EventInfo = class&#xA;    inherit MemberInfo&#xA;    interface _EventInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._EventInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._EventInfo))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e7589-101">イベントの属性を取得し、イベントのメタデータにアクセスできるようにします。</span><span class="sxs-lookup"><span data-stu-id="e7589-101">Discovers the attributes of an event and provides access to event metadata.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-102"><xref:System.Reflection.EventInfo.AddEventHandler%2A> メソッドのコード例に示すように、<xref:System.Reflection.EventInfo> クラスを使用してイベントを検査し、イベントハンドラーをフックします。</span><span class="sxs-lookup"><span data-stu-id="e7589-102">Use the <xref:System.Reflection.EventInfo> class to inspect events and to hook up event handlers, as shown in the example code for the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e7589-103"><xref:System.Reflection.EventInfo> は、イベントを発生させるために使用するためのものではありません。</span><span class="sxs-lookup"><span data-stu-id="e7589-103"><xref:System.Reflection.EventInfo> is not intended to be used to raise events.</span></span> <span data-ttu-id="e7589-104">オブジェクトは、内部状態で示されているように、イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="e7589-104">An object raises events as dictated by its internal state.</span></span>  
  
 <span data-ttu-id="e7589-105">イベントはデリゲートと共に使用されます。</span><span class="sxs-lookup"><span data-stu-id="e7589-105">Events are used with delegates.</span></span> <span data-ttu-id="e7589-106">イベントリスナーは、イベントソースによってイベントが発生するたびに呼び出されるイベントハンドラーデリゲートをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="e7589-106">An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source.</span></span> <span data-ttu-id="e7589-107">イベントソースに接続するために、イベントリスナーは、このデリゲートをソースの呼び出しリストに追加します。</span><span class="sxs-lookup"><span data-stu-id="e7589-107">In order to connect to the event source, the event listener adds this delegate to the invocation list on the source.</span></span> <span data-ttu-id="e7589-108">イベントが発生すると、イベントハンドラーデリゲートの invoke メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e7589-108">When the event is raised, the invoke method of the event-handler delegate is called.</span></span> <span data-ttu-id="e7589-109">マルチキャストイベント通知とシングルキャストイベント通知の両方がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="e7589-109">Both multicast and single-cast event notifications are supported.</span></span> <span data-ttu-id="e7589-110">イベントに関連付けられているイベントハンドラーデリゲートクラスだけでなく、`Add` および `Remove` メソッドは、メタデータでマークされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="e7589-110">The `Add` and `Remove` methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.</span></span>  
  
 <span data-ttu-id="e7589-111">デリゲートはオブジェクト指向の関数ポインターです。</span><span class="sxs-lookup"><span data-stu-id="e7589-111">Delegates are object-oriented function pointers.</span></span> <span data-ttu-id="e7589-112">C またはC++では、関数ポインターはメソッドへの参照です。</span><span class="sxs-lookup"><span data-stu-id="e7589-112">In C or C++, a function pointer is a reference to a method.</span></span> <span data-ttu-id="e7589-113">C またはC++関数ポインターとは異なり、デリゲートには、メソッドへの参照と、メソッドをサポートするオブジェクトへの参照の2つの参照が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e7589-113">In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method.</span></span> <span data-ttu-id="e7589-114">デリゲートは、メソッドを宣言または継承するクラス型を知らなくてもメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e7589-114">Delegates can invoke a method without knowing the class type that declares or inherits the method.</span></span> <span data-ttu-id="e7589-115">デリゲートは、メソッドの戻り値の型とパラメーターリストのみを必要とします。</span><span class="sxs-lookup"><span data-stu-id="e7589-115">Delegates need only know the return type and parameter list of the method.</span></span>  
  
 <span data-ttu-id="e7589-116">イベントモデルは、シングルキャストデリゲートとマルチキャストデリゲートでも同様に機能します。</span><span class="sxs-lookup"><span data-stu-id="e7589-116">The event model works equally well for single-cast and multicast delegates.</span></span> <span data-ttu-id="e7589-117">デリゲートの invoke メソッドが呼び出されると、1つのオブジェクトに対してメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e7589-117">When the delegate's invoke method is called, only a single object will have a method called on it.</span></span> <span data-ttu-id="e7589-118">マルチキャスト修飾子はデリゲート宣言に適用できます。これにより、デリゲートの invoke メソッドが呼び出されたときに、複数のメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e7589-118">A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.</span></span>  
  
 <span data-ttu-id="e7589-119">`GetCustomAttributes` の `inherit` パラメーターが `true` である場合に `EventInfo` で <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> を呼び出すと、型階層が処理されません。</span><span class="sxs-lookup"><span data-stu-id="e7589-119">Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> on `EventInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy.</span></span> <span data-ttu-id="e7589-120">カスタム属性を継承するには、<xref:System.Attribute?displayProperty=nameWithType> を使用します。</span><span class="sxs-lookup"><span data-stu-id="e7589-120">Use <xref:System.Attribute?displayProperty=nameWithType> to inherit custom attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7589-121">次のコードは、<xref:System.Windows.Forms.Button> クラスの <xref:System.Windows.Forms.Control.Click> イベントの <xref:System.Reflection.EventInfo> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-121">The following code gets an <xref:System.Reflection.EventInfo> object for the <xref:System.Windows.Forms.Control.Click> event of the <xref:System.Windows.Forms.Button> class.</span></span>  
  
 [!code-cpp[type_getevent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]
 [!code-csharp[type_getevent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]
 [!code-vb[type_getevent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="e7589-122">継承者に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="e7589-122">for full trust for inheritors.</span></span> <span data-ttu-id="e7589-123">このクラスを、部分的に信頼されているコードが継承することはできません。</span><span class="sxs-lookup"><span data-stu-id="e7589-123">This class cannot be inherited by partially trusted code.</span></span></permission>
    <threadsafe><span data-ttu-id="e7589-124">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="e7589-124">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="e7589-125"><see langword="EventInfo" />から継承する場合は、<see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />、<see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />、および <see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />の各メンバーをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e7589-125">When you inherit from <see langword="EventInfo" />, you must override the following members: <see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />, <see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />, and <see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />.</span></span></para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventInfo ();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.#ctor" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.1" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EventInfo();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.1" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e7589-126"><see langword="EventInfo" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="e7589-126">Initializes a new instance of the <see langword="EventInfo" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e7589-127"><see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />などの機構を使用して遅延バインディングで呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e7589-127">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e7589-128"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e7589-128">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AddEventHandler">
      <MemberSignature Language="C#" Value="public virtual void AddEventHandler (object target, Delegate handler);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEventHandler(object target, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddEventHandler (target As Object, handler As Delegate)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddEventHandler(System::Object ^ target, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddEventHandler : obj * Delegate -&gt; unit&#xA;override this.AddEventHandler : obj * Delegate -&gt; unit" Usage="eventInfo.AddEventHandler (target, handler)" />
      <MemberSignature Language="C#" Value="public void AddEventHandler (object target, Delegate handler);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddEventHandler (target As Object, handler As Delegate)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.AddEventHandler(System.Object,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="e7589-129">イベント ソース。</span><span class="sxs-lookup"><span data-stu-id="e7589-129">The event source.</span></span></param>
        <param name="handler"><span data-ttu-id="e7589-130">ターゲットによってイベントが発生したときに呼び出されるメソッドをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="e7589-130">Encapsulates a method or methods to be invoked when the event is raised by the target.</span></span></param>
        <summary><span data-ttu-id="e7589-131">イベント ソースにイベント ハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="e7589-131">Adds an event handler to an event source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-132">このメソッドは、ターゲットオブジェクトのイベントを同期するデリゲートを追加しようとします。</span><span class="sxs-lookup"><span data-stu-id="e7589-132">This method attempts to add a delegate to synchronize the event on the target object.</span></span>  
  
 <span data-ttu-id="e7589-133">ターゲットパラメーターによってイベントが発生するたびに、そのハンドラーによってカプセル化されたメソッドまたはメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e7589-133">Each time the event is raised by the target parameter, the method or methods encapsulated by the handler are invoked.</span></span>  
  
<span data-ttu-id="e7589-134">`AddEventHandler` メソッドは、プログラムが既にコンパイルされた後に型を読み込むときに使用できます。この場合、 C# + = 構文を使用したり、Visual Basic `WithEvents` と `Handles` キーワードを使用してイベントをフックしたりすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e7589-134">You might use the `AddEventHandler` method when you load a type after the program is already compiled, when it is not possible to use the C# += syntax or the Visual Basic `WithEvents` and `Handles` keywords to hook up the event.</span></span>   
  
## Examples  
 <span data-ttu-id="e7589-135">次の例では、<xref:System.Timers.Timer?displayProperty=nameWithType> クラスのインスタンスを作成し、動的アセンブリを使用してイベントハンドラーを作成し、動的イベントハンドラーをフックします。</span><span class="sxs-lookup"><span data-stu-id="e7589-135">The following example creates an instance of the <xref:System.Timers.Timer?displayProperty=nameWithType> class, creates an event handler using a dynamic assembly, and hooks up the dynamic event handler.</span></span> <span data-ttu-id="e7589-136">すべてのアクションは、遅延バインディングを使用して実行されます。</span><span class="sxs-lookup"><span data-stu-id="e7589-136">All actions are performed using late binding.</span></span>  
  
 <span data-ttu-id="e7589-137"><xref:System.Timers.Timer> インスタンスは <xref:System.Object>型の変数に格納され、<xref:System.Timers.Timer> にアクセスするすべてのコードは遅延バインディングされます。</span><span class="sxs-lookup"><span data-stu-id="e7589-137">The <xref:System.Timers.Timer> instance is stored in a variable of type <xref:System.Object>, and all code that accesses the <xref:System.Timers.Timer> does so late-bound.</span></span> <span data-ttu-id="e7589-138">この例では、<xref:System.Type.GetEvent%2A?displayProperty=nameWithType> メソッドを使用して <xref:System.Timers.Timer.Elapsed> イベントを取得し、<xref:System.Reflection.EventInfo.EventHandlerType%2A> プロパティを使用してイベントのデリゲート型を取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-138">The example uses the <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method to get the <xref:System.Timers.Timer.Elapsed> event, and the <xref:System.Reflection.EventInfo.EventHandlerType%2A> property to get the delegate type for the event.</span></span>  
  
 <span data-ttu-id="e7589-139">この例では、デリゲート型の `Invoke` メソッドの <xref:System.Reflection.MethodInfo> を取得し、<xref:System.Reflection.MethodInfo> インスタンスからデリゲートのシグネチャを取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-139">The example gets a <xref:System.Reflection.MethodInfo> for the `Invoke` method of the delegate type and obtains the signature of the delegate from the <xref:System.Reflection.MethodInfo> instance.</span></span> <span data-ttu-id="e7589-140">次に、`Handler` という名前の単一の型を含む1つのモジュールを持つ動的アセンブリを作成し、その型に、イベントを処理する `DynamicHandler` という `static` メソッド (Visual Basic の`Shared` メソッド) を指定します。</span><span class="sxs-lookup"><span data-stu-id="e7589-140">The example then creates a dynamic assembly with one module containing a single type named `Handler` and gives the type a `static` method (`Shared` method in Visual Basic) named `DynamicHandler` that handles the event.</span></span>  
  
 <span data-ttu-id="e7589-141">動的な型が作成された後、この例では、完成したメソッドの <xref:System.Reflection.MethodInfo> を取得し、それを使用してデリゲートインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e7589-141">After the dynamic type is created, the example gets a <xref:System.Reflection.MethodInfo> for the finished method and uses it to create a delegate instance.</span></span> <span data-ttu-id="e7589-142">このインスタンスは、イベントをフックするために <xref:System.Reflection.EventInfo.AddEventHandler%2A> メソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="e7589-142">This instance is passed to the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method to hook up the event.</span></span> <span data-ttu-id="e7589-143">その後、プログラムはイベントの発生を許可するために一時停止します。</span><span class="sxs-lookup"><span data-stu-id="e7589-143">The program then pauses to allow the event to be raised.</span></span>  
  
 [!code-csharp[AddEventHandler#1](~/samples/snippets/csharp/VS_Snippets_CLR/AddEventHandler/cs/source.cs)]
 [!code-vb[AddEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddEventHandler/vb/source.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e7589-144">イベントにパブリック <see langword="add" /> アクセサーがありません。</span><span class="sxs-lookup"><span data-stu-id="e7589-144">The event does not have a public <see langword="add" /> accessor.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e7589-145">渡されたハンドラーは使用できません。</span><span class="sxs-lookup"><span data-stu-id="e7589-145">The handler that was passed in cannot be used.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="e7589-146"><see href="https://docs.microsoft.com/previous-versions/br230232(v=vs.110)">Windows ストア アプリ用 .NET</see> または<see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">ポータブル クラス ライブラリ</see>では、基本クラスの例外である <see cref="T:System.MemberAccessException" /> を代わりにキャッチします。</span><span class="sxs-lookup"><span data-stu-id="e7589-146">In <see href="https://docs.microsoft.com/previous-versions/br230232(v=vs.110)">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="e7589-147">呼び出し元には、このメンバーに対するアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="e7589-147">The caller does not have access permission to the member.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="e7589-148"><see href="https://docs.microsoft.com/previous-versions/br230232(v=vs.110)">Windows ストア アプリ用 .NET</see> または<see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">ポータブル クラス ライブラリ</see>では、<see cref="T:System.Exception" /> を代わりにキャッチします。</span><span class="sxs-lookup"><span data-stu-id="e7589-148">In <see href="https://docs.microsoft.com/previous-versions/br230232(v=vs.110)">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="e7589-149"><paramref name="target" /> パラメーターは <see langword="null" /> で、イベントは静的でありません。</span><span class="sxs-lookup"><span data-stu-id="e7589-149">The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.</span></span>  
  
<span data-ttu-id="e7589-150">または</span><span class="sxs-lookup"><span data-stu-id="e7589-150">-or-</span></span> 
<span data-ttu-id="e7589-151"><see cref="T:System.Reflection.EventInfo" /> はターゲットで宣言されていません。</span><span class="sxs-lookup"><span data-stu-id="e7589-151">The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e7589-152"><see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />などの機構を使用して遅延バインディングで呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e7589-152">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e7589-153"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e7589-153">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="AddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo AddMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo AddMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.AddMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AddMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ AddMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AddMethod : System.Reflection.MethodInfo" Usage="System.Reflection.EventInfo.AddMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e7589-154">非パブリック メソッドを含む、イベントの <see cref="T:System.Reflection.MethodInfo" /> メソッドの <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-154">Gets the <see cref="T:System.Reflection.MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, including non-public methods.</span></span></summary>
        <value><span data-ttu-id="e7589-155"><see cref="T:System.Reflection.MethodInfo" /> メソッドの <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e7589-155">The <see cref="T:System.Reflection.MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-156">このプロパティは、`true`の値を使用して <xref:System.Reflection.EventInfo.GetAddMethod%2A> を呼び出す場合と同じです。</span><span class="sxs-lookup"><span data-stu-id="e7589-156">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetAddMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.EventAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As EventAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::EventAttributes Attributes { System::Reflection::EventAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.EventAttributes" Usage="System.Reflection.EventInfo.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e7589-157">このイベントの属性を取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-157">Gets the attributes for this event.</span></span></summary>
        <value><span data-ttu-id="e7589-158">このイベントの読み取り専用属性。</span><span class="sxs-lookup"><span data-stu-id="e7589-158">The read-only attributes for this event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-159">属性は、このインスタンスによってリフレクションされるイベントに対して設定された属性のビットマップを表す4バイトの整数で返されます。</span><span class="sxs-lookup"><span data-stu-id="e7589-159">The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="eventInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="e7589-160">対象のインスタンスと比較する対象のオブジェクト、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e7589-160">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="e7589-161">このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="e7589-161">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="e7589-162"><see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e7589-162"><see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHandlerType">
      <MemberSignature Language="C#" Value="public virtual Type EventHandlerType { get; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type EventHandlerType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.EventHandlerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EventHandlerType As Type" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ EventHandlerType { Type ^ get(); };" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EventHandlerType : Type" Usage="System.Reflection.EventInfo.EventHandlerType" />
      <MemberSignature Language="C#" Value="public Type EventHandlerType { get; }" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventHandlerType As Type" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ EventHandlerType { Type ^ get(); };" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.EventHandlerType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e7589-163">このイベントに関連付けられている基になるイベント ハンドラー デリゲートの <see langword="Type" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-163">Gets the <see langword="Type" /> object of the underlying event-handler delegate associated with this event.</span></span></summary>
        <value><span data-ttu-id="e7589-164">デリゲート イベント ハンドラーを表す読み取り専用の <see langword="Type" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e7589-164">A read-only <see langword="Type" /> object representing the delegate event handler.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e7589-165">次の例では、<xref:System.Reflection.EventInfo.EventHandlerType%2A> プロパティを使用して、イベントのデリゲート型を検出し、そのパラメーターの型を表示します。</span><span class="sxs-lookup"><span data-stu-id="e7589-165">The following example uses the <xref:System.Reflection.EventInfo.EventHandlerType%2A> property to discover the delegate type of an event and to display its parameter types.</span></span>  
  
 <span data-ttu-id="e7589-166">この例では、`MyDelegate` という名前のデリゲートと、`MyDelegate`型の `ev` という名前のイベントを定義します。</span><span class="sxs-lookup"><span data-stu-id="e7589-166">The example defines a delegate named `MyDelegate` and an event named `ev` of type `MyDelegate`.</span></span> <span data-ttu-id="e7589-167">`Main` メソッドのコードは、イベントのデリゲート型を取得し、デリゲート型の `Invoke` メソッドを取得して、パラメーターを取得して表示することによって、イベントシグネチャを検出します。</span><span class="sxs-lookup"><span data-stu-id="e7589-167">The code in the `Main` method discovers the event signature by getting the delegate type of the event, getting the `Invoke` method of the delegate type, and then retrieving and displaying the parameters.</span></span>  
  
 [!code-cpp[eventarg#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventArg/CPP/eventarg.cpp#1)]
 [!code-csharp[eventarg#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventArg/CS/eventarg.cs#1)]
 [!code-vb[eventarg#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventArg/VB/eventarg.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e7589-168">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="e7589-168">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAddMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e7589-169">イベント ソースにイベント ハンドラー デリゲートを追加するために使用するメソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="e7589-169">Returns the method used to add an event handler delegate to the event source.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetAddMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetAddMethod() cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetAddMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAddMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetAddMethod();" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="F#" Value="member this.GetAddMethod : unit -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetAddMethod " FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod();" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : unit -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetAddMethod " FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetAddMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e7589-170">イベント ソースにイベント ハンドラー デリゲートを追加するために使用するメソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="e7589-170">Returns the method used to add an event handler delegate to the event source.</span></span></summary>
        <returns><span data-ttu-id="e7589-171">イベント ソースにイベント ハンドラー デリゲートを追加するために使用するメソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e7589-171">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-172">`GetAddMethod` 初期化し、イベントの subscribe メソッドを追加します。</span><span class="sxs-lookup"><span data-stu-id="e7589-172">`GetAddMethod` initializes and adds the event subscribe method.</span></span> <span data-ttu-id="e7589-173">`AddEventHandler` メソッドは、イベントハンドラーデリゲートをイベントソースの呼び出しリストに追加するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="e7589-173">The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7589-174">通常、メソッドのシグネチャは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="e7589-174">Typically, the method has the following signature:</span></span>  
  
```  
add_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e7589-175"><see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />などの機構を使用して遅延バインディングで呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e7589-175">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e7589-176"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e7589-176">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetAddMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAddMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetAddMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : bool -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetAddMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetAddMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="e7589-177">パブリックでないメソッドを返すことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e7589-177"><see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e7589-178">派生クラスでオーバーライドされた場合は、パブリックでないメソッドを返すかどうかを指定して、イベントの <see langword="MethodInfo" /> メソッドの <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-178">When overridden in a derived class, retrieves the <see langword="MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, specifying whether to return non-public methods.</span></span></summary>
        <returns><span data-ttu-id="e7589-179">イベント ソースにイベント ハンドラー デリゲートを追加するために使用するメソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e7589-179">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-180">`GetAddMethod` によって初期化され、イベント subscribe メソッドがブール値として追加されます。</span><span class="sxs-lookup"><span data-stu-id="e7589-180">The `GetAddMethod` initializes and adds the event subscribe method as a Boolean value.</span></span> <span data-ttu-id="e7589-181">`AddEventHandler` メソッドは、イベントハンドラーデリゲートをイベントソースの呼び出しリストに追加するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="e7589-181">The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7589-182">通常、メソッドのシグネチャは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="e7589-182">Typically, the method has the following signature:</span></span>  
  
```  
add_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="e7589-183"><paramref name="nonPublic" /> が <see langword="true" /> で、イベント ハンドラー デリゲートの追加に使用したメソッドはパブリックではなく、呼び出し元にはパブリックでないメソッドに対するリフレクションのアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="e7589-183"><paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e7589-184"><see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />などの機構を使用して遅延バインディングで呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e7589-184">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e7589-185"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e7589-185">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="eventInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e7589-186">このインスタンスのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="e7589-186">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="e7589-187">32 ビットの符号付き整数のハッシュ コードです。</span><span class="sxs-lookup"><span data-stu-id="e7589-187">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetOtherMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e7589-188"><see langword=".other" /> ディレクティブを使用して MSIL 内のイベントに関連付けられたメソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="e7589-188">Returns the methods that were associated with an event in MSIL using the <see langword=".other" /> directive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetOtherMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetOtherMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo[] GetOtherMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetOtherMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOtherMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetOtherMethods();" />
      <MemberSignature Language="F#" Value="member this.GetOtherMethods : unit -&gt; System.Reflection.MethodInfo[]" Usage="eventInfo.GetOtherMethods " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e7589-189"><see langword=".other" /> ディレクティブを使用してメタデータ内のイベントに関連付けられているパブリック メソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="e7589-189">Returns the public methods that have been associated with an event in metadata using the <see langword=".other" /> directive.</span></span></summary>
        <returns><span data-ttu-id="e7589-190"><see langword=".other" /> ディレクティブを使用して、メタデータ内のイベントに関連付けられているパブリック メソッドを表す配列。</span><span class="sxs-lookup"><span data-stu-id="e7589-190">An array representing the public methods that have been associated with the event in metadata by using the <see langword=".other" /> directive.</span></span> <span data-ttu-id="e7589-191">そのようなパブリック メソッドがない場合は、空の配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="e7589-191">If there are no such public methods, an empty array is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-192">イベントのメタデータは、次の4種類のメソッドをイベントに関連付けることができます。</span><span class="sxs-lookup"><span data-stu-id="e7589-192">The metadata for an event can associate four kinds of methods with the event:</span></span>  
  
-   <span data-ttu-id="e7589-193">`.addon` ディレクティブは、イベントハンドラーを追加するために使用するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="e7589-193">The `.addon` directive specifies the method used to add event handlers.</span></span> <span data-ttu-id="e7589-194"><xref:System.Reflection.EventInfo.GetAddMethod%2A> メソッドを使用して、そのメソッドの <xref:System.Reflection.EventInfo> を取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-194">Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="e7589-195">`.removeon` ディレクティブは、イベントハンドラーをデタッチするために使用するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="e7589-195">The `.removeon` directive specifies the method used to detach event handlers.</span></span> <span data-ttu-id="e7589-196"><xref:System.Reflection.EventInfo.GetRemoveMethod%2A> メソッドを使用して、そのメソッドの <xref:System.Reflection.EventInfo> を取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-196">Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="e7589-197">`.fire` ディレクティブは、イベントを発生させるために使用するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="e7589-197">The `.fire` directive specifies the method used to raise the event.</span></span> <span data-ttu-id="e7589-198"><xref:System.Reflection.EventInfo.GetRaiseMethod%2A> メソッドを使用して、そのメソッドの <xref:System.Reflection.EventInfo> を取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-198">Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="e7589-199">`.other` ディレクティブは、イベントに関連付けられている他のメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="e7589-199">The `.other` directive specifies any other methods associated with the event.</span></span> <span data-ttu-id="e7589-200"><xref:System.Reflection.EventInfo.GetOtherMethods%2A> メソッドを使用して、これらのメソッドの <xref:System.Reflection.EventInfo> オブジェクトの配列を取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-200">Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.</span></span>  
  
 <span data-ttu-id="e7589-201">`.other` ディレクティブを使用してイベントに関連付けられているメソッドは、ランタイムにとって特別な意味を持ちません。</span><span class="sxs-lookup"><span data-stu-id="e7589-201">The methods associated with an event using the `.other` directive have no special significance to the runtime.</span></span> <span data-ttu-id="e7589-202">C#および Visual Basic コンパイラは、`.other` ディレクティブを使用しません。</span><span class="sxs-lookup"><span data-stu-id="e7589-202">The C# and Visual Basic compilers do not use the `.other` directive.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOtherMethods">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo[] GetOtherMethods (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetOtherMethods(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOtherMethods (nonPublic As Boolean) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetOtherMethods(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetOtherMethods : bool -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetOtherMethods : bool -&gt; System.Reflection.MethodInfo[]" Usage="eventInfo.GetOtherMethods nonPublic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="e7589-203">非パブリック メソッドを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e7589-203"><see langword="true" /> to include non-public methods; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e7589-204">非パブリック メソッドを含めるかどうかを指定して、<see langword=".other" /> ディレクティブを使用してメタデータ内のイベントに関連付けられているメソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="e7589-204">Returns the methods that have been associated with the event in metadata using the <see langword=".other" /> directive, specifying whether to include non-public methods.</span></span></summary>
        <returns><span data-ttu-id="e7589-205"><see langword=".other" /> ディレクティブを使用して、メタデータ内のイベントに関連付けられているメソッドを表す配列。</span><span class="sxs-lookup"><span data-stu-id="e7589-205">An array representing methods that have been associated with an event in metadata by using the <see langword=".other" /> directive.</span></span> <span data-ttu-id="e7589-206">指定に一致するメソッドがない場合は、空の配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="e7589-206">If there are no methods matching the specification, an empty array is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-207">イベントのメタデータは、次の4種類のメソッドをイベントに関連付けることができます。</span><span class="sxs-lookup"><span data-stu-id="e7589-207">The metadata for an event can associate four kinds of methods with the event:</span></span>  
  
-   <span data-ttu-id="e7589-208">`.addon` ディレクティブは、イベントハンドラーを追加するために使用するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="e7589-208">The `.addon` directive specifies the method used to add event handlers.</span></span> <span data-ttu-id="e7589-209"><xref:System.Reflection.EventInfo.GetAddMethod%2A> メソッドを使用して、そのメソッドの <xref:System.Reflection.EventInfo> を取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-209">Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="e7589-210">`.removeon` ディレクティブは、イベントハンドラーをデタッチするために使用するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="e7589-210">The `.removeon` directive specifies the method used to detach event handlers.</span></span> <span data-ttu-id="e7589-211">このメソッドの <xref:System.Reflection.EventInfo> を取得するには、<xref:System.Reflection.EventInfo.GetRemoveMethod%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e7589-211">Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.</span></span>  
  
-   <span data-ttu-id="e7589-212">`.fire` ディレクティブは、イベントを発生させるために使用するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="e7589-212">The `.fire` directive specifies the method used to raise the event.</span></span> <span data-ttu-id="e7589-213">このメソッドの <xref:System.Reflection.EventInfo> を取得するには、<xref:System.Reflection.EventInfo.GetRaiseMethod%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e7589-213">Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.</span></span>  
  
-   <span data-ttu-id="e7589-214">`.other` ディレクティブは、イベントに関連付けられている他のメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="e7589-214">The `.other` directive specifies any other methods associated with the event.</span></span> <span data-ttu-id="e7589-215"><xref:System.Reflection.EventInfo.GetOtherMethods%2A> メソッドを使用して、これらのメソッドの <xref:System.Reflection.EventInfo> オブジェクトの配列を取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-215">Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.</span></span>  
  
 <span data-ttu-id="e7589-216">`.other` ディレクティブを使用してイベントに関連付けられているメソッドは、ランタイムにとって特別な意味を持ちません。</span><span class="sxs-lookup"><span data-stu-id="e7589-216">The methods associated with an event using the `.other` directive have no special significance to the runtime.</span></span> <span data-ttu-id="e7589-217">C#および Visual Basic コンパイラは、`.other` ディレクティブを使用しません。</span><span class="sxs-lookup"><span data-stu-id="e7589-217">The C# and Visual Basic compilers do not use the `.other` directive.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="e7589-218">このメソッドは実装されていません。</span><span class="sxs-lookup"><span data-stu-id="e7589-218">This method is not implemented.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRaiseMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e7589-219">イベントが発生すると呼び出されるメソッドが返されます。</span><span class="sxs-lookup"><span data-stu-id="e7589-219">Returns the method that is called when the event is raised.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRaiseMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetRaiseMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetRaiseMethod() cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRaiseMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRaiseMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetRaiseMethod();" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="F#" Value="member this.GetRaiseMethod : unit -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRaiseMethod " FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRaiseMethod() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetRaiseMethod();" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetRaiseMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetRaiseMethod : unit -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRaiseMethod " FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e7589-220">イベントが発生すると呼び出されるメソッドが返されます。</span><span class="sxs-lookup"><span data-stu-id="e7589-220">Returns the method that is called when the event is raised.</span></span></summary>
        <returns><span data-ttu-id="e7589-221">イベントが発生すると呼び出されるメソッド。</span><span class="sxs-lookup"><span data-stu-id="e7589-221">The method that is called when the event is raised.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-222">このメソッドは通常、 C# `event` キーワードまたは Visual Basic `Event` キーワードで宣言されたイベントの `null` を返します。</span><span class="sxs-lookup"><span data-stu-id="e7589-222">This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword.</span></span> <span data-ttu-id="e7589-223">これは、およびC# Visual Basic コンパイラが既定ではこのようなメソッドを生成しないためです。</span><span class="sxs-lookup"><span data-stu-id="e7589-223">This is because the C# and Visual Basic compilers do not generate such a method by default.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e7589-224"><see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />などの機構を使用して遅延バインディングで呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e7589-224">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e7589-225"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e7589-225">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetRaiseMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetRaiseMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetRaiseMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetRaiseMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetRaiseMethod : bool -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRaiseMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="e7589-226">パブリックでないメソッドを返すことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e7589-226"><see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e7589-227">派生クラスでオーバーライドされた場合は、パブリックでないメソッドを返すかどうかを指定して、イベントが発生したときに呼び出されるメソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="e7589-227">When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</span></span></summary>
        <returns><span data-ttu-id="e7589-228">イベントが発生したときに呼び出された <see langword="MethodInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e7589-228">A <see langword="MethodInfo" /> object that was called when the event was raised.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-229">このメソッドは通常、 C# `event` キーワードまたは Visual Basic `Event` キーワードで宣言されたイベントの `null` を返します。</span><span class="sxs-lookup"><span data-stu-id="e7589-229">This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword.</span></span> <span data-ttu-id="e7589-230">これは、およびC# Visual Basic コンパイラが既定ではこのようなメソッドを生成しないためです。</span><span class="sxs-lookup"><span data-stu-id="e7589-230">This is because the C# and Visual Basic compilers do not generate such a method by default.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="e7589-231"><paramref name="nonPublic" /> が <see langword="true" /> で、イベント ハンドラー デリゲートの追加に使用したメソッドはパブリックではなく、呼び出し元にはパブリックでないメソッドに対するリフレクションのアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="e7589-231"><paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e7589-232"><see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />などの機構を使用して遅延バインディングで呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e7589-232">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e7589-233"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e7589-233">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRemoveMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e7589-234">イベント ソースからイベント ハンドラー デリゲートを削除するために使用するメソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="e7589-234">Returns the method used to remove an event handler delegate from the event source.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRemoveMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetRemoveMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetRemoveMethod() cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRemoveMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRemoveMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetRemoveMethod();" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="F#" Value="member this.GetRemoveMethod : unit -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRemoveMethod " FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRemoveMethod() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetRemoveMethod();" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetRemoveMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetRemoveMethod : unit -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRemoveMethod " FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e7589-235">イベント ソースからイベント ハンドラー デリゲートを削除するために使用するメソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="e7589-235">Returns the method used to remove an event handler delegate from the event source.</span></span></summary>
        <returns><span data-ttu-id="e7589-236">イベント ソースからイベント ハンドラー デリゲートを削除するために使用するメソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e7589-236">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e7589-237">通常、メソッドのシグネチャは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="e7589-237">Typically, the method has the following signature:</span></span>  
  
```  
remove_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e7589-238"><see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />などの機構を使用して遅延バインディングで呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e7589-238">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e7589-239"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e7589-239">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetRemoveMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetRemoveMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetRemoveMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetRemoveMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetRemoveMethod : bool -&gt; System.Reflection.MethodInfo" Usage="eventInfo.GetRemoveMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="e7589-240">パブリックでないメソッドを返すことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e7589-240"><see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e7589-241">派生クラスでオーバーライドされた場合は、パブリックでないメソッドを返すかどうかを指定して、イベントのメソッドを削除する <see langword="MethodInfo" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-241">When overridden in a derived class, retrieves the <see langword="MethodInfo" /> object for removing a method of the event, specifying whether to return non-public methods.</span></span></summary>
        <returns><span data-ttu-id="e7589-242">イベント ソースからイベント ハンドラー デリゲートを削除するために使用するメソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e7589-242">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e7589-243">通常、メソッドのシグネチャは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="e7589-243">Typically, the method has the following signature:</span></span>  
  
```  
remove_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="e7589-244"><paramref name="nonPublic" /> が <see langword="true" /> で、イベント ハンドラー デリゲートの追加に使用したメソッドはパブリックではなく、呼び出し元にはパブリックでないメソッドに対するリフレクションのアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="e7589-244"><paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e7589-245"><see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />などの機構を使用して遅延バインディングで呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e7589-245">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e7589-246"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e7589-246">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="eventInfo.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMulticast">
      <MemberSignature Language="C#" Value="public virtual bool IsMulticast { get; }" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMulticast" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.IsMulticast" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsMulticast As Boolean" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMulticast { bool get(); };" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.IsMulticast : bool" Usage="System.Reflection.EventInfo.IsMulticast" />
      <MemberSignature Language="C#" Value="public bool IsMulticast { get; }" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMulticast As Boolean" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMulticast { bool get(); };" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.IsMulticast</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e7589-247">イベントがマルチキャストかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-247">Gets a value indicating whether the event is multicast.</span></span></summary>
        <value><span data-ttu-id="e7589-248">デリゲートがマルチキャスト デリゲートのインスタンスである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e7589-248"><see langword="true" /> if the delegate is an instance of a multicast delegate; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e7589-249">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="e7589-249">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Reflection.EventInfo.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e7589-250"><see langword="EventInfo" /> に特別な意味を持つ名前が指定されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-250">Gets a value indicating whether the <see langword="EventInfo" /> has a name with a special meaning.</span></span></summary>
        <value><span data-ttu-id="e7589-251">このイベントに特別な名前が付けられている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e7589-251"><see langword="true" /> if this event has a special name; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-252">このプロパティは、イベントの名前に特別な意味があるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e7589-252">This property determines whether the event's name has a special meaning.</span></span> <span data-ttu-id="e7589-253">名前の先頭にアンダースコア文字 (_)、プロパティアクセサー、および演算子のオーバーロードメソッドが含まれている場合は、一部のコンパイラで特別な処理が必要となる名前の例です。</span><span class="sxs-lookup"><span data-stu-id="e7589-253">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventAttributes" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Reflection.EventInfo.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e7589-254">このメンバーがイベントであることを示す <see cref="T:System.Reflection.MemberTypes" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-254">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</span></span></summary>
        <value><span data-ttu-id="e7589-255">このメンバーがイベントであることを示す <see cref="T:System.Reflection.MemberTypes" /> 値。</span><span class="sxs-lookup"><span data-stu-id="e7589-255">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-256">このプロパティは <xref:System.Reflection.MemberInfo.MemberType%2A>をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="e7589-256">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>.</span></span> <span data-ttu-id="e7589-257">したがって、<xref:System.Type.GetMembers%2A> によって返される配列など、一連の <xref:System.Reflection.MemberInfo> オブジェクトを調べると、指定されたメンバーがイベントである場合にのみ、<xref:System.Reflection.MemberInfo.MemberType%2A> プロパティによって <xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType> が返されます。</span><span class="sxs-lookup"><span data-stu-id="e7589-257">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects - for example, the array returned by <xref:System.Type.GetMembers%2A> - the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType> only when a given member is an event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.EventInfo left, System.Reflection.EventInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.EventInfo left, class System.Reflection.EventInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As EventInfo, right As EventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::EventInfo ^ left, System::Reflection::EventInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Reflection.EventInfo * System.Reflection.EventInfo -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.EventInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="right" Type="System.Reflection.EventInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e7589-258">比較する最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e7589-258">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e7589-259">比較する 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e7589-259">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="e7589-260">2 つの <see cref="T:System.Reflection.EventInfo" /> オブジェクトが等しいかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e7589-260">Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="e7589-261"><see langword="true" /> が <paramref name="left" /> に等しい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e7589-261"><see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.EventInfo left, System.Reflection.EventInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.EventInfo left, class System.Reflection.EventInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As EventInfo, right As EventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::EventInfo ^ left, System::Reflection::EventInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Reflection.EventInfo * System.Reflection.EventInfo -&gt; bool" Usage="System.Reflection.EventInfo.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.EventInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="right" Type="System.Reflection.EventInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e7589-262">比較する最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e7589-262">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e7589-263">比較する 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e7589-263">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="e7589-264">2 つの <see cref="T:System.Reflection.EventInfo" /> オブジェクトが等しくないかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e7589-264">Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are not equal.</span></span></summary>
        <returns><span data-ttu-id="e7589-265"><see langword="true" /> が <paramref name="left" /> と等しくない場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e7589-265"><see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo RaiseMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo RaiseMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.RaiseMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RaiseMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ RaiseMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RaiseMethod : System.Reflection.MethodInfo" Usage="System.Reflection.EventInfo.RaiseMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e7589-266">イベントの発生時に呼び出されるメソッドを、非パブリック メソッドも含めて取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-266">Gets the method that is called when the event is raised, including non-public methods.</span></span></summary>
        <value><span data-ttu-id="e7589-267">イベントが発生すると呼び出されるメソッド。</span><span class="sxs-lookup"><span data-stu-id="e7589-267">The method that is called when the event is raised.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-268">このプロパティは、`true`の値を使用して <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> を呼び出す場合と同じです。</span><span class="sxs-lookup"><span data-stu-id="e7589-268">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventHandler">
      <MemberSignature Language="C#" Value="public virtual void RemoveEventHandler (object target, Delegate handler);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEventHandler(object target, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveEventHandler (target As Object, handler As Delegate)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveEventHandler(System::Object ^ target, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveEventHandler : obj * Delegate -&gt; unit&#xA;override this.RemoveEventHandler : obj * Delegate -&gt; unit" Usage="eventInfo.RemoveEventHandler (target, handler)" />
      <MemberSignature Language="C#" Value="public void RemoveEventHandler (object target, Delegate handler);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEventHandler (target As Object, handler As Delegate)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.RemoveEventHandler(System.Object,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="e7589-269">イベント ソース。</span><span class="sxs-lookup"><span data-stu-id="e7589-269">The event source.</span></span></param>
        <param name="handler"><span data-ttu-id="e7589-270">ターゲットによって発生したイベントから関連付けを解除するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="e7589-270">The delegate to be disassociated from the events raised by target.</span></span></param>
        <summary><span data-ttu-id="e7589-271">イベント ソースからイベント ハンドラーを削除します。</span><span class="sxs-lookup"><span data-stu-id="e7589-271">Removes an event handler from an event source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-272">このメソッドは、ターゲットオブジェクトでこのイベントを同期する可能性のあるデリゲートを削除しようとします。</span><span class="sxs-lookup"><span data-stu-id="e7589-272">This method attempts to remove the delegate that may synchronize this event on the target object.</span></span>  
  
 <span data-ttu-id="e7589-273">ターゲットによってイベントが発生すると、`handler` によってカプセル化されたメソッドまたはメソッドは呼び出されなくなります。</span><span class="sxs-lookup"><span data-stu-id="e7589-273">When an event is raised by target, the method or methods encapsulated by `handler` will no longer be invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e7589-274">イベントにパブリック <see langword="remove" /> アクセサーがありません。</span><span class="sxs-lookup"><span data-stu-id="e7589-274">The event does not have a public <see langword="remove" /> accessor.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e7589-275">渡されたハンドラーは使用できません。</span><span class="sxs-lookup"><span data-stu-id="e7589-275">The handler that was passed in cannot be used.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="e7589-276"><see href="https://docs.microsoft.com/previous-versions/br230232(v=vs.110)">Windows ストア アプリ用 .NET</see> または<see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">ポータブル クラス ライブラリ</see>では、<see cref="T:System.Exception" /> を代わりにキャッチします。</span><span class="sxs-lookup"><span data-stu-id="e7589-276">In <see href="https://docs.microsoft.com/previous-versions/br230232(v=vs.110)">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="e7589-277"><paramref name="target" /> パラメーターは <see langword="null" /> で、イベントは静的でありません。</span><span class="sxs-lookup"><span data-stu-id="e7589-277">The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.</span></span>  
  
<span data-ttu-id="e7589-278">または</span><span class="sxs-lookup"><span data-stu-id="e7589-278">-or-</span></span> 
<span data-ttu-id="e7589-279"><see cref="T:System.Reflection.EventInfo" /> はターゲットで宣言されていません。</span><span class="sxs-lookup"><span data-stu-id="e7589-279">The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="e7589-280"><see href="https://docs.microsoft.com/previous-versions/br230232(v=vs.110)">Windows ストア アプリ用 .NET</see> または<see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">ポータブル クラス ライブラリ</see>では、基本クラスの例外である <see cref="T:System.MemberAccessException" /> を代わりにキャッチします。</span><span class="sxs-lookup"><span data-stu-id="e7589-280">In <see href="https://docs.microsoft.com/previous-versions/br230232(v=vs.110)">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="e7589-281">呼び出し元には、このメンバーに対するアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="e7589-281">The caller does not have access permission to the member.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e7589-282"><see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />などの機構を使用して遅延バインディングで呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="e7589-282">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="e7589-283"><see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="e7589-283">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="RemoveMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo RemoveMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo RemoveMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.RemoveMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoveMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ RemoveMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RemoveMethod : System.Reflection.MethodInfo" Usage="System.Reflection.EventInfo.RemoveMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e7589-284">非パブリック メソッドを含む、イベントのメソッドを削除するための <see langword="MethodInfo" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-284">Gets the <see langword="MethodInfo" /> object for removing a method of the event, including non-public methods.</span></span></summary>
        <value><span data-ttu-id="e7589-285">イベントのメソッドを削除するための <see langword="MethodInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e7589-285">The <see langword="MethodInfo" /> object for removing a method of the event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-286">このプロパティは、`true`の値を使用して <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> を呼び出す場合と同じです。</span><span class="sxs-lookup"><span data-stu-id="e7589-286">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _EventInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _EventInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_EventInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="rgszNames" Type="System.IntPtr" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="cNames" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="rgDispId" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="e7589-287">将来利用するために予約されています。</span><span class="sxs-lookup"><span data-stu-id="e7589-287">Reserved for future use.</span></span> <span data-ttu-id="e7589-288">IID_NULL にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e7589-288">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="e7589-289">マッピング対象として渡される名前の配列。</span><span class="sxs-lookup"><span data-stu-id="e7589-289">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="e7589-290">マッピングされる名前のカウント。</span><span class="sxs-lookup"><span data-stu-id="e7589-290">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="e7589-291">名前を解釈するロケール コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="e7589-291">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="e7589-292">名前に対応する ID を受け取る、呼び出し元が割り当てた配列。</span><span class="sxs-lookup"><span data-stu-id="e7589-292">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="e7589-293">一連の名前を対応する一連のディスパッチ識別子に割り当てます。</span><span class="sxs-lookup"><span data-stu-id="e7589-293">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-294">このメソッドは、アンマネージコードからマネージクラスにアクセスするためのものであり、マネージコードからは呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="e7589-294">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="e7589-295">`IDispatch::GetIDsOfNames`の詳細については、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e7589-295">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="e7589-296">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e7589-296">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetType">
      <MemberSignature Language="C#" Value="Type _EventInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._EventInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _EventInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._EventInfo.GetType() = System::Runtime::InteropServices::_EventInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e7589-297"><c> 型を表す </c>T:System.Type<see cref="T:System.Reflection.EventInfo" /> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="e7589-297">Returns a <c>T:System.Type</c> object representing the <see cref="T:System.Reflection.EventInfo" /> type.</span></span></summary>
        <returns><span data-ttu-id="e7589-298"><c> 型を表す </c>T:System.Type<see cref="T:System.Reflection.EventInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e7589-298">A <c>T:System.Type</c> object representing the <see cref="T:System.Reflection.EventInfo" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _EventInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _EventInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_EventInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="e7589-299">返される型情報。</span><span class="sxs-lookup"><span data-stu-id="e7589-299">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="e7589-300">型情報のロケール ID。</span><span class="sxs-lookup"><span data-stu-id="e7589-300">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="e7589-301">要求された型情報オブジェクトへのポインターを取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-301">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="e7589-302">オブジェクトの型情報を取得します。この型情報を使用して、インターフェイスの型情報を取得できます。</span><span class="sxs-lookup"><span data-stu-id="e7589-302">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-303">このメソッドは、アンマネージコードからマネージクラスにアクセスするためのものであり、マネージコードからは呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="e7589-303">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="e7589-304">`IDispatch::GetTypeInfo`の詳細については、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e7589-304">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="e7589-305">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e7589-305">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _EventInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _EventInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_EventInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="e7589-306">オブジェクトにより提供される型タイプ情報インターフェイスの数を受け取る場所を指定します。</span><span class="sxs-lookup"><span data-stu-id="e7589-306">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="e7589-307">オブジェクトが提供する型情報インターフェイスの数 (0 または 1) を取得します。</span><span class="sxs-lookup"><span data-stu-id="e7589-307">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-308">このメソッドは、アンマネージコードからマネージクラスにアクセスするためのものであり、マネージコードからは呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="e7589-308">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="e7589-309">`IDispatch::GetTypeInfoCount`の詳細については、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e7589-309">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="e7589-310">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e7589-310">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.Invoke">
      <MemberSignature Language="C#" Value="void _EventInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _EventInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_EventInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="wFlags" Type="System.Int16" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pDispParams" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pVarResult" Type="System.IntPtr" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" Index="6" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="puArgErr" Type="System.IntPtr" Index="7" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="e7589-311">メンバーを識別します。</span><span class="sxs-lookup"><span data-stu-id="e7589-311">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="e7589-312">将来利用するために予約されています。</span><span class="sxs-lookup"><span data-stu-id="e7589-312">Reserved for future use.</span></span> <span data-ttu-id="e7589-313">IID_NULL にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e7589-313">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="e7589-314">引数を解釈する対象のロケール コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="e7589-314">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="e7589-315">呼び出しのコンテキストを記述するフラグ。</span><span class="sxs-lookup"><span data-stu-id="e7589-315">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="e7589-316">引数の配列、名前付き引数の DISPID の配列、配列内の要素数のカウントを格納している構造体へのポインター。</span><span class="sxs-lookup"><span data-stu-id="e7589-316">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="e7589-317">結果が格納される場所へのポインター。</span><span class="sxs-lookup"><span data-stu-id="e7589-317">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="e7589-318">例外情報を格納する構造体へのポインター。</span><span class="sxs-lookup"><span data-stu-id="e7589-318">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="e7589-319">エラーが存在する最初の引数のインデックス。</span><span class="sxs-lookup"><span data-stu-id="e7589-319">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="e7589-320">オブジェクトによって公開されたプロパティおよびメソッドへのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="e7589-320">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7589-321">このメソッドは、アンマネージコードからマネージクラスにアクセスするためのものであり、マネージコードからは呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="e7589-321">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="e7589-322">`IDispatch::Invoke`の詳細については、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e7589-322">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="e7589-323">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e7589-323">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
