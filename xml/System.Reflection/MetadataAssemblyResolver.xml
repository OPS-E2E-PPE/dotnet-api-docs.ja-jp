<Type Name="MetadataAssemblyResolver" FullName="System.Reflection.MetadataAssemblyResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="051008848a2ae5ce3ed8270b2dcb3c87be23d640" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78817711" /></Metadata><TypeSignature Language="C#" Value="public abstract class MetadataAssemblyResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MetadataAssemblyResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataAssemblyResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MetadataAssemblyResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataAssemblyResolver abstract" />
  <TypeSignature Language="F#" Value="type MetadataAssemblyResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Reflection.MetadataLoadContext" /> で使用されるアルゴリズムをバインドする基底クラスを提供します。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MetadataAssemblyResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataAssemblyResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MetadataAssemblyResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Reflection.MetadataAssemblyResolver" /> のインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Assembly Resolve (System.Reflection.MetadataLoadContext context, System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Resolve(class System.Reflection.MetadataLoadContext context, class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataAssemblyResolver.Resolve(System.Reflection.MetadataLoadContext,System.Reflection.AssemblyName)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Resolve (context As MetadataLoadContext, assemblyName As AssemblyName) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::Assembly ^ Resolve(System::Reflection::MetadataLoadContext ^ context, System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="abstract member Resolve : System.Reflection.MetadataLoadContext * System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataAssemblyResolver.Resolve (context, assemblyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Reflection.MetadataLoadContext" />
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="context">検査のみの目的で読み込まれる <see cref="T:System.Type" /> オブジェクトの閉ざされた領域を表すメタデータ読み込みコンテキスト オブジェクト。</param>
        <param name="assemblyName">アセンブリの名前です。</param>
        <summary>指定したアセンブリ名からアセンブリを返します。</summary>
        <returns>提供されている <paramref name="assemblyName" /> 用のアセンブリ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

アセンブリ名のアセンブリへのバインドは、<xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyName%2A> が呼び出された場合、またはあるアセンブリの型が別のアセンブリに依存している場合に発生します。 `Resolve` をオーバーライドするハンドラーは、<xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>、<xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType> または <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType> を使用して、要求されたアセンブリを読み込み、それを返す必要があります。

アセンブリの検出に失敗したことを示すために、ハンドラーは例外をスローするのではなく、`null` を返す必要があります。 `null` を返すと、エラーが発生します。これにより、後でその名前を読み込もうとすると、ハンドラーが再起動されずに失敗します。

ハンドラーが例外をスローした場合は、バインディングをトリガーした操作を呼び出したアプリケーションに例外が渡されます。 <xref:System.Reflection.MetadataLoadContext> はそれをキャッチせず、バインドも行われません。

2つのスレッドが同じアセンブリを読み込んだ場合を除き、通常、このハンドラーは同じ名前に対して複数回呼び出されることはありません。 その場合でも、1つの結果が優先され、その名前にアトミックにバインドされます。

参照定義の一致がポリシーであるため、<xref:System.Reflection.MetadataLoadContext> は、返されるアセンブリに対して ref def 一致を意図的に実行しません。 また、これは <xref:System.Reflection.MetadataLoadContext> 回避するために必要な任意の制限の一種でもあります。

<xref:System.Reflection.MetadataLoadContext> は、他のメタデータ読み込みコンテキストまたはその他の型プロバイダー (基になるランタイムの独自のリフレクションシステムなど) からのアセンブリを使用できません。 このようなアセンブリがハンドラーによって返された場合、<xref:System.Reflection.MetadataLoadContext> は <xref:System.IO.FileLoadException>をスローします。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
