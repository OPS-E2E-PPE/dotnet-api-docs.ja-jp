<Type Name="ObfuscationAttribute" FullName="System.Reflection.ObfuscationAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d0615254ccc03838691ccb76d3c00072d59f33ab" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83536883" /></Metadata><TypeSignature Language="C#" Value="public sealed class ObfuscationAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ObfuscationAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.ObfuscationAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ObfuscationAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObfuscationAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ObfuscationAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.1;netstandard-2.0;netcore-2.2;netstandard-2.1;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.1;net-5.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Delegate | System.AttributeTargets.Enum | System.AttributeTargets.Event | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Method | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.Struct, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>アセンブリ、型、またはメンバーに対して指定したアクションを実行するように隠ぺいツールに指示します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Reflection.ObfuscationAttribute> 属性と <xref:System.Reflection.ObfuscateAssemblyAttribute> 属性を使用すると、アセンブリの作成者はバイナリに注釈を付け、最小限の外部構成で難読化ツールが適切に処理できるようになります。  
  
> [!IMPORTANT]
>  この属性を適用しても、適用先のコードエンティティは自動的に難読化されません。 属性を適用することは、難読化ツールの構成ファイルを作成する方法の1つです。 つまり、難読化ツールの手順を説明するだけです。 難読化ツールのベンダーは、ここで説明するセマンティクスに従うことをお勧めします。 ただし、特定のツールが Microsoft の推奨事項に従うという保証はありません。  
  
 <xref:System.Reflection.ObfuscationAttribute> 属性には、文字列 <xref:System.Reflection.ObfuscationAttribute.Feature%2A> プロパティがあります。 難読化ツールでは、ユーザーがアクセスできる XML 構成ファイルを使用することによって、このプロパティの文字列値を実装する機能にマップできます。 <xref:System.Reflection.ObfuscationAttribute> には、"default" と "all" という2つの機能文字列が定義されています。 文字列 "default" はツールの既定の難読化機能にマップする必要があり、"all" はツールでサポートされる難読化機能の完全なセットにマップする必要があります。 <xref:System.Reflection.ObfuscationAttribute.Feature%2A> プロパティの既定値は "all" です。これにより、難読化機能の完全なセットが有効になります。  
  
 アセンブリに適用すると、<xref:System.Reflection.ObfuscationAttribute> アセンブリ内のすべての型にも適用されます。 <xref:System.Reflection.ObfuscationAttribute.ApplyToMembers%2A> プロパティが指定されていない場合、または `true`に設定されている場合、属性はすべてのメンバーにも適用されます。 アセンブリがパブリックであるかプライベートであるかは、<xref:System.Reflection.ObfuscationAttribute> によって指定されません。 アセンブリがパブリックであるかプライベートであるかを指定するには、<xref:System.Reflection.ObfuscateAssemblyAttribute> 属性を使用します。  
  
 <xref:System.Reflection.ObfuscationAttribute.ApplyToMembers%2A> プロパティが指定されていない場合、または `true`に設定されている場合は、クラスおよび構造体に適用された場合は、型のすべてのメンバーにも <xref:System.Reflection.ObfuscationAttribute> が適用されます。  
  
 メソッド、パラメーター、フィールド、およびプロパティに適用される場合、属性は、適用先のエンティティにのみ影響します。  
  
   
  
## Examples  
 次のコード例は、`Type1` と `Type2`の2つの型を持つパブリックアセンブリを示しています。 アセンブリは、<xref:System.Reflection.ObfuscateAssemblyAttribute>で難読化するようにマークされています。これは、アセンブリをパブリックとして処理するようにマークします (つまり、<xref:System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate%2A> プロパティは `false`)。  
  
 アセンブリが難読化用にマークされているため、`Type1` は難読化用にマークされています。 `Type1` の1つのメンバーは、<xref:System.Reflection.ObfuscationAttribute.Exclude%2A> プロパティを使用して難読化から除外されます。  
  
 `Type2` は難読化から除外されますが、<xref:System.Reflection.ObfuscationAttribute.ApplyToMembers%2A> プロパティが `false`ため、そのメンバーは難読化の対象としてマークされます。  
  
 `Type2` の `MethodA` メソッドには、<xref:System.Reflection.ObfuscationAttribute.Feature%2A> プロパティの `"default"` 値が設定されています。 <xref:System.Reflection.ObfuscationAttribute.Exclude%2A> プロパティの `false` を指定して、`MethodA` を難読化から除外しないようにする必要があります。これは、<xref:System.Reflection.ObfuscationAttribute.Exclude%2A> プロパティの既定値が `true`ためです。 難読化ツールは、難読化後に属性を削除しないようにする必要があります。これは、<xref:System.Reflection.ObfuscationAttribute.StripAfterObfuscation%2A> プロパティが `false`ためです。 <xref:System.Reflection.ObfuscationAttribute.StripAfterObfuscation%2A> プロパティが指定されていないため、このコード例の他のすべての属性は難読化後に削除されます。したがって、既定では `true`が使用されます。  
  
 このコード例には、属性とそのプロパティを表示するコードが含まれています。 また、 [ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)を使用して DLL を開くことで、属性を調べることもできます。  
  
 [!code-csharp[ObfuscationAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscationAttribute/cs/source.cs#1)]
 [!code-vb[ObfuscationAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscationAttribute/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Reflection.ObfuscateAssemblyAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObfuscationAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ObfuscationAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObfuscationAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Reflection.ObfuscationAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アセンブリがパブリックであるかプライベートであるかは、<xref:System.Reflection.ObfuscationAttribute> によって指定されません。 アセンブリがパブリックであるかプライベートであるかを指定するには、<xref:System.Reflection.ObfuscateAssemblyAttribute>を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyToMembers">
      <MemberSignature Language="C#" Value="public bool ApplyToMembers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ApplyToMembers" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ObfuscationAttribute.ApplyToMembers" />
      <MemberSignature Language="VB.NET" Value="Public Property ApplyToMembers As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ApplyToMembers { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ApplyToMembers : bool with get, set" Usage="System.Reflection.ObfuscationAttribute.ApplyToMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>型の属性が型のメンバーに適用されるかどうかを示す <see cref="T:System.Boolean" /> 値を取得または設定します。</summary>
        <value>属性が型のメンバーに適用される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性がメンバーに適用されている場合、このプロパティの値は無視されます。  
  
> [!IMPORTANT]
>  この属性を適用しても、適用先のコードエンティティは自動的に難読化されません。 属性を適用することは、難読化ツールの構成ファイルを作成する方法の1つです。 つまり、難読化ツールの手順を説明するだけです。 難読化ツールのベンダーは、ここで説明するセマンティクスに従うことをお勧めします。 ただし、特定のツールが Microsoft の推奨事項に従うという保証はありません。  
  
   
  
## Examples  
 次のコード例は、難読化から除外された型を示していますが、<xref:System.Reflection.ObfuscationAttribute.ApplyToMembers%2A> プロパティが `false`であるため、除外はそのメンバーには適用されません。  
  
 このコードは、コンパイルして実行できる大きな例の一部です。 詳細については、<xref:System.Reflection.ObfuscationAttribute> クラスのトピックを参照してください。  
  
 [!code-csharp[ObfuscationAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscationAttribute/cs/source.cs#2)]
 [!code-vb[ObfuscationAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscationAttribute/vb/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exclude">
      <MemberSignature Language="C#" Value="public bool Exclude { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Exclude" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ObfuscationAttribute.Exclude" />
      <MemberSignature Language="VB.NET" Value="Public Property Exclude As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Exclude { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Exclude : bool with get, set" Usage="System.Reflection.ObfuscationAttribute.Exclude" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>隠ぺいツールが隠ぺいから型やメンバーを除外する必要があるのかどうかを示す <see cref="T:System.Boolean" /> 値を取得または設定します。</summary>
        <value>この属性を適用する型やメンバーを隠ぺいから除外する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  この属性を適用しても、適用先のコードエンティティは自動的に難読化されません。 属性を適用することは、難読化ツールの構成ファイルを作成する方法の1つです。 つまり、難読化ツールの手順を説明するだけです。 難読化ツールのベンダーは、ここで説明するセマンティクスに従うことをお勧めします。 ただし、特定のツールが Microsoft の推奨事項に従うという保証はありません。  
  
   
  
## Examples  
 難読化から除外するようにマークされている型のコード例を次に示します。 <xref:System.Reflection.ObfuscationAttribute.Exclude%2A> プロパティを指定する必要はありません。既定で `true`に設定されていますが、明示的に指定すると、意図が明確になります。 <xref:System.Reflection.ObfuscationAttribute.ApplyToMembers%2A> は `false`に設定されているため、難読化からの除外はクラスのメンバーに適用されません。 つまり、クラス名は表示されますが、メンバーは難読化されます。  
  
 `MethodA` メソッドは、<xref:System.Reflection.ObfuscationAttribute.Feature%2A> プロパティの `"default"` 値でマークされます。 <xref:System.Reflection.ObfuscationAttribute.Exclude%2A> プロパティの `false` を指定して、`MethodA` を難読化から除外しないようにする必要があります。これは、<xref:System.Reflection.ObfuscationAttribute.Exclude%2A> プロパティの既定値が `true`ためです。 難読化ツールで難読化後に属性が削除されないように、<xref:System.Reflection.ObfuscationAttribute.StripAfterObfuscation%2A> プロパティが `false`。  
  
 このコードは、コンパイルして実行できる大きな例の一部です。 詳細については、<xref:System.Reflection.ObfuscationAttribute> クラスのトピックを参照してください。  
  
 [!code-csharp[ObfuscationAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscationAttribute/cs/source.cs#4)]
 [!code-vb[ObfuscationAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscationAttribute/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Feature">
      <MemberSignature Language="C#" Value="public string Feature { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Feature" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ObfuscationAttribute.Feature" />
      <MemberSignature Language="VB.NET" Value="Public Property Feature As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Feature { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Feature : string with get, set" Usage="System.Reflection.ObfuscationAttribute.Feature" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>隠ぺいツールによって認識され、処理オプションを指定する文字列値を取得または設定します。</summary>
        <value>隠ぺいツールによって認識され、処理オプションを指定する文字列値。 既定値は "all" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティに渡される値は、使用される難読化ツールによって異なります。 難読化ツールのベンダーは、少なくとも "default" と "all" をサポートすることをお勧めします。 ベンダーは、これらの設定を XML 構成ファイルと組み合わせて使用できます。  
  
> [!IMPORTANT]
>  この属性を適用しても、適用先のコードエンティティは自動的に難読化されません。 属性を適用することは、難読化ツールの構成ファイルを作成する方法の1つです。 つまり、難読化ツールの手順を説明するだけです。 難読化ツールのベンダーは、ここで説明するセマンティクスに従うことをお勧めします。 ただし、特定のツールが Microsoft の推奨事項に従うという保証はありません。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Reflection.ObfuscationAttribute.Feature%2A> プロパティの `"default"` 値でマークされたメソッドを示しています。 <xref:System.Reflection.ObfuscationAttribute.Exclude%2A> プロパティの `false` を指定して、`MethodA` を難読化から除外しないようにする必要があります。これは、<xref:System.Reflection.ObfuscationAttribute.Exclude%2A> プロパティの既定値が `true`ためです。 難読化ツールで難読化後に属性が削除されないように、<xref:System.Reflection.ObfuscationAttribute.StripAfterObfuscation%2A> プロパティが `false`。  
  
 このコードは、コンパイルして実行できる大きな例の一部です。 詳細については、<xref:System.Reflection.ObfuscationAttribute> クラスのトピックを参照してください。  
  
 [!code-csharp[ObfuscationAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscationAttribute/cs/source.cs#3)]
 [!code-vb[ObfuscationAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscationAttribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StripAfterObfuscation">
      <MemberSignature Language="C#" Value="public bool StripAfterObfuscation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StripAfterObfuscation" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ObfuscationAttribute.StripAfterObfuscation" />
      <MemberSignature Language="VB.NET" Value="Public Property StripAfterObfuscation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StripAfterObfuscation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StripAfterObfuscation : bool with get, set" Usage="System.Reflection.ObfuscationAttribute.StripAfterObfuscation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>隠ぺいツールが処理後に属性を削除する必要があるかどうかを示す <see cref="T:System.Boolean" /> 値を取得または設定します。</summary>
        <value>隠ぺいツールが処理後に属性を削除する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ライブラリが別のアプリケーションの一部として含まれ、そのアプリケーションの一部として難読化されている場合は、属性を削除しないでください。  
  
> [!IMPORTANT]
>  この属性を適用しても、適用先のコードエンティティは自動的に難読化されません。 属性を適用することは、難読化ツールの構成ファイルを作成する方法の1つです。 つまり、難読化ツールの手順を説明するだけです。 難読化ツールのベンダーは、ここで説明するセマンティクスに従うことをお勧めします。 ただし、特定のツールが Microsoft の推奨事項に従うという保証はありません。  
  
   
  
## Examples  
 難読化ツールが難読化後に属性を削除しないように <xref:System.Reflection.ObfuscationAttribute.StripAfterObfuscation%2A> プロパティを `false` する <xref:System.Reflection.ObfuscationAttribute> を次のコード例に示します。 <xref:System.Reflection.ObfuscationAttribute.Exclude%2A> プロパティの `false` を指定して、`MethodA` を難読化から除外しないようにする必要があります。これは、<xref:System.Reflection.ObfuscationAttribute.Exclude%2A> プロパティの既定値が `true`ためです。  
  
 このコードは、コンパイルして実行できる大きな例の一部です。 詳細については、<xref:System.Reflection.ObfuscationAttribute> クラスのトピックを参照してください。  
  
 [!code-csharp[ObfuscationAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscationAttribute/cs/source.cs#4)]
 [!code-vb[ObfuscationAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscationAttribute/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
