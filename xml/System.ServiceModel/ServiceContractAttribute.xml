<Type Name="ServiceContractAttribute" FullName="System.ServiceModel.ServiceContractAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fb2b00ca39d4b9351107149e5bb15cfed1540466" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75159792" /></Metadata><TypeSignature Language="C#" Value="public sealed class ServiceContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ServiceContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ServiceContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ServiceContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ServiceContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-uwp-10.0;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>インターフェイスまたはクラスが、Windows Communication Foundation (WCF) アプリケーション内にサービス コントラクトを定義することを示します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インターフェイス (またはクラス) に対して <xref:System.ServiceModel.ServiceContractAttribute> 属性を使用して、サービス コントラクトを定義します。 その後、1 つ以上のクラス (またはインターフェイス) のメソッドに対して <xref:System.ServiceModel.OperationContractAttribute> 属性を使用して、コントラクトのサービス操作を定義します。 サービスコントラクトが実装され、[バインド](~/docs/framework/wcf/bindings.md)と <xref:System.ServiceModel.EndpointAddress> オブジェクトと組み合わされると、サービスコントラクトがクライアントによって使用されるように公開されます。 単純な例を使用したプロセスの概要については、「[はじめにチュートリアル](~/docs/framework/wcf/getting-started-tutorial.md)」を参照してください。 サービスコントラクトの作成の詳細については、「[サービスの設計と実装](~/docs/framework/wcf/designing-and-implementing-services.md)」を参照してください。  
  
 <xref:System.ServiceModel.ServiceContractAttribute> とそのインターフェイスで表現される情報は、Web サービス記述言語 (WSDL) の `<portType>` 要素に大まかに関連しています。 サービスコントラクトは、サービスのエンドポイントが呼び出し元に公開する対象を指定するために、サービス側で使用されます。 サービス コントラクトはクライアント側でも使用され、クライアントが通信を行うエンドポイントのコントラクトを指定します。双方向コントラクトの場合は、クライアントが双方向のメッセージ交換を行うために実装する必要があるコールバック コントラクトを (<xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A> プロパティを使用して) 指定します。  
  
> [!NOTE]
>  さらに、<xref:System.ServiceModel.ServiceContractAttribute> で修飾したインターフェイスまたはクラスがなんらかの機能を公開するには、<xref:System.ServiceModel.OperationContractAttribute> 属性でマークされた、少なくとも 1 つのメソッドを持つ必要があります。 この 2 つの属性を使用してサービスの定義と実装を行う最も単純な方法のコード例については、「使用例」のセクションを参照してください。  
  
 サービス コントラクトを変更するには、<xref:System.ServiceModel.ServiceContractAttribute> プロパティを使用します。  
  
-   <xref:System.ServiceModel.ServiceContractAttribute.ConfigurationName%2A> プロパティは、使用する構成ファイル内のサービス要素の名前を指定します。  
  
-   <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> プロパティと <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> プロパティは、WSDL の`<portType>` 要素内のコントラクトの名前と名前空間を制御します。  
  
-   <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> プロパティは、コントラクトがセッションをサポートするバインディングを必要とするかどうかを指定します。  
  
-   <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A> プロパティは、双方向 (二重) 通信で使用されるリターン コントラクトを指定します。  
  
-   <xref:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel%2A> プロパティと <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> プロパティは、このコントラクトをサポートするすべてのメッセージに明示的な <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> 値が設定されているかどうかを示し、設定されている場合はそのレベルを示します。  
  
 サービスはサービス コントラクトを実装します。サービス コントラクトは、サービスの種類がサポートするデータ交換を表します。 サービス クラスは、<xref:System.ServiceModel.ServiceContractAttribute> でマークされたメソッドを持つ <xref:System.ServiceModel.OperationContractAttribute> でマークされたインターフェイスを実装することで、サービス コントラクトを実装できます。または、<xref:System.ServiceModel.ServiceContractAttribute> でマークし、<xref:System.ServiceModel.OperationContractAttribute> 属性を独自のメソッドに適用できます。 (クラスが <xref:System.ServiceModel.ServiceContractAttribute>でマークされたインターフェイスを実装している場合、そのクラス自体を <xref:System.ServiceModel.ServiceContractAttribute>でマークすることはできません)。<xref:System.ServiceModel.OperationContractAttribute> でマークされたサービスの種類のメソッドは、サービスの種類自体によって指定された既定のサービスコントラクトの一部として扱われます。 サービス操作の詳細については、<xref:System.ServiceModel.OperationContractAttribute> を参照してください。  
  
 既定では、<xref:System.ServiceModel.ServiceContractAttribute.Name%2A> プロパティと <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> プロパティは、それぞれコントラクトの種類と`http://tempuri.org` であり、<xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> は <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> です。 サービス コントラクトでは、名前、名前空間、および保護レベルを、これらのプロパティを使用して明示的に設定することをお勧めします。 この作業により、次の 2 つの目標が達成されます。 第 1 に、マネージド型情報に直接接続されないコントラクトを構築し、コントラクトを WSDL で表現するときに、コントラクトを壊さずにマネージド コードと名前空間をリファクタリングできます。 第 2 に、コントラクト自体の保護レベルを明示的に要求することによって、ランタイムがバインド構成でそのレベルのセキュリティがサポートされているかどうかを検証でき、それによって、機密情報を漏洩する不良な構成を回避できます。 保護レベルの詳細については、「[保護レベル](~/docs/framework/wcf/understanding-protection-level.md)について」を参照してください。  
  
 クライアントアプリケーションで使用するサービスを公開するには、サービスエンドポイントを Windows Communication Foundation (WCF) に登録するホストアプリケーションを作成します。 Windows ライセンス認証サービス (WAS)、コンソールアプリケーション、Windows サービスアプリケーション、ASP.NET アプリケーション、Windows フォームアプリケーション、またはその他の種類のアプリケーションドメインを使用して、WCF サービスをホストできます。  
  
 WAS でのホスティングは、ASP.NET アプリケーションの作成とほとんど同じです。 詳細については、「 [How to: Host a WCF Service IN IIS](~/docs/framework/wcf/feature-details/how-to-host-a-wcf-service-in-iis.md)」を参照してください。  
  
 クライアントは、サービス コントラクト インターフェイス (<xref:System.ServiceModel.ServiceContractAttribute> でマークされたインターフェイス) を使用してサービスへのチャネルを作成するか、またはクライアント オブジェクト (サービス コントラクト インターフェイスの型情報と <xref:System.ServiceModel.ClientBase%601> クラスの組み合わせ) を使用してサービスと通信します。 サービスへのクライアントチャネルの詳細については、「<xref:System.ServiceModel.ChannelFactory%601> クラス」と「 [WCF クライアントの概要](~/docs/framework/wcf/wcf-client-overview.md)」を参照してください。  
  
 <xref:System.ServiceModel.ServiceContractAttribute> クラスまたはインターフェイスを使用して別の <xref:System.ServiceModel.ServiceContractAttribute> クラスまたはインターフェイスから継承すると、親コントラクトが拡張されます。 たとえば、`IChildContract` インターフェイスが <xref:System.ServiceModel.ServiceContractAttribute> でマークされ、別のサービス コントラクト インターフェイスである `IParentContract` から継承された場合、`IChildContract` サービス コントラクトには、`IParentContract` と `IChildContract` の両方のメソッドが含まれます。 コントラクト (クラスまたはインターフェイス) の拡張は、マネージド クラスとマネージド インターフェイスの拡張とほとんど同じです。  
  
 サービスを作成する最も柔軟な方法は、最初にサービス コントラクト インターフェイスを定義し、その後、サービス クラスでそのインターフェイスを実装することです。 (これは、他のユーザーによって定義されたサービスコントラクトを実装する必要がある場合に、サービスを構築するための最も簡単な方法でもあります)。サービスが1つのコントラクトだけを公開している (ただし、そのコントラクトを複数のエンドポイントで公開できる) 場合は、クラスを <xref:System.ServiceModel.ServiceContractAttribute> とそのメソッドを <xref:System.ServiceModel.OperationContractAttribute> でマークすることによって、サービスを直接構築できます。  
  
 <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A> プロパティを使用して、元のサービスコントラクトと共にバインドされている場合に、2つの方法で個別にフローできるメッセージ交換を定義する別のサービスコントラクトを指定します。 詳細については、「<xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A>」を参照してください。  
  
   
  
## Examples  
 次のコード例は、<xref:System.ServiceModel.ServiceContractAttribute> をインターフェイスに適用し、<xref:System.ServiceModel.OperationContractAttribute> によって示される 1 つのサービス メソッドを持つサービス コントラクトを定義する方法を示しています。 この場合、すべてのメッセージのバインドで要求される保護レベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> です。  
  
 その後、このコード例では、定義したコントラクトを `SampleService` クラスで実装します。  
  
 [!code-csharp[ServiceContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/servicecontractattribute/cs/services.cs#1)]
 [!code-vb[ServiceContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/servicecontractattribute/vb/services.vb#1)]  
  
 次のコード例は、上のサービス用の 1 つのエンドポイントを作成する単純な構成ファイルを示しています。  
  
 [!code-xml[ServiceContractAttribute#2](~/samples/snippets/csharp/VS_Snippets_CFX/servicecontractattribute/cs/hostapplication.exe.config#2)]   
  
 次のコード例は、上の `SampleService` を呼び出す単純なクライアントを示しています。  
  
 [!code-csharp[ServiceContractAttribute#3](~/samples/snippets/csharp/VS_Snippets_CFX/servicecontractattribute/cs/client.cs#3)]
 [!code-vb[ServiceContractAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/servicecontractattribute/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.OperationContractAttribute" />
    <related type="Article" href="https://msdn.microsoft.com/library/036fae20-7c55-4002-b71d-ac4466e167a3">サービス コントラクトの定義</related>
    <related type="Article" href="https://msdn.microsoft.com/library/192be927-6be2-4fda-98f0-e513c4881acc">サービスをホストする</related>
    <related type="Article" href="https://msdn.microsoft.com/library/7cf21bfe-23bd-46aa-8033-609f851dbf76">サービスの作成の概要</related>
    <related type="Article" href="https://msdn.microsoft.com/library/28dfff47-d95b-4cc2-9d5c-b3b9ba71fd50">クライアントの作成</related>
    <related type="Article" href="https://msdn.microsoft.com/library/d780af9f-73c5-42db-9e52-077a5e4de7fe">プロキシ作成の概要</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceContractAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceContractAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.ServiceModel.ServiceContractAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、セッション要件もコールバック コントラクトもない、既定の名前と名前空間を使用する属性を持つインスタンスを作成します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallbackContract">
      <MemberSignature Language="C#" Value="public Type CallbackContract { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type CallbackContract" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.CallbackContract" />
      <MemberSignature Language="VB.NET" Value="Public Property CallbackContract As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ CallbackContract { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CallbackContract : Type with get, set" Usage="System.ServiceModel.ServiceContractAttribute.CallbackContract" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントラクトが双方向コントラクトの場合のコールバック コントラクトの型を取得または設定します。</summary>
        <value>コールバック コントラクトを示す <see cref="T:System.Type" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 双方向 (または双方向) のメッセージ交換で必要とされる反対のコントラクトを表すインターフェイスを <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A> プロパティに指定します。 これにより、クライアント アプリケーションは、サーバー側のサービス アプリケーションがクライアントのアクティビティとは無関係に送信できる受信操作呼び出しをリッスンできます。 一方向操作を持つコールバック コントラクトは、クライアントが処理できるサービスからの呼び出しを表します。  
  
> [!NOTE]
>  <xref:System.ServiceModel.ServiceContractAttribute> 属性は、コールバックコントラクトでは無視されます。 コールバックオブジェクトの実行時の動作を構成するには、<xref:System.ServiceModel.CallbackBehaviorAttribute?displayProperty=nameWithType>を使用します。  
  
   
  
## Examples  
 次のコード例は、コールバックコントラクトを指定するサービスを示しています。これは、型 `IDuplexHello` のサービスが `IHelloCallbackContract`型のサービスを実装する通信を持つ必要があることを示します。 さらに、`IHelloCallbackContract` は一方向のコールバックメソッドを実装します。これにより、サービスは、配信されたイベントドリブンクライアントをサポートするために応答を待つことなくクライアントを呼び出すことができます。  
  
 [!code-csharp[SCA.CallbackContract#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.callbackcontract/cs/services.cs#1)]
 [!code-vb[SCA.CallbackContract#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.callbackcontract/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigurationName">
      <MemberSignature Language="C#" Value="public string ConfigurationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConfigurationName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName" />
      <MemberSignature Language="VB.NET" Value="Public Property ConfigurationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConfigurationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConfigurationName : string with get, set" Usage="System.ServiceModel.ServiceContractAttribute.ConfigurationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーション構成ファイル内でサービスを検索するために使用される名前を取得または設定します。</summary>
        <value>アプリケーション構成ファイル内でサービス要素を検索するために使用される名前。 既定の名前は、サービス実装クラスの名前です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 構成ファイル内で構成システムがコントラクト値を検索する値を設定するには、「<xref:System.ServiceModel.ServiceBehaviorAttribute.ConfigurationName%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">値は null です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">値が空の文字列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.ServiceContractAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メンバーに保護レベルが割り当てられているかどうかを示す値を取得します。</summary>
        <value><see langword="true" /> プロパティが <see cref="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" /> でない場合は <see cref="F:System.Net.Security.ProtectionLevel.None" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel%2A> プロパティは、`false` 以外の保護レベルの値がコントラクトに対して設定されているかどうかを示します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.ServiceContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web サービス記述言語 (WSDL) での <see langword="&lt;portType&gt;" /> 要素の名前を取得または設定します。</summary>
        <value>既定値は <see cref="T:System.ServiceModel.ServiceContractAttribute" /> が適用されたクラスまたはインターフェイスの名前です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> と <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> のプロパティを使用して、WSDL の `<portType>` 要素の名前と名前空間を制御します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.ServiceModel.ServiceContractAttribute> の <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> および <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> プロパティを使用して、WSDL で対応する値を設定する方法を示しています。  
  
 [!code-csharp[SCA.Names#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.names/cs/services.cs#1)]
 [!code-vb[SCA.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.names/vb/services.vb#1)]  
  
 次のコード例は、 [ServiceModel メタデータユーティリティツール (svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)を使用して WSDL をインポートした前のサービスの WINDOWS COMMUNICATION FOUNDATION (WCF) クライアントを示しています。 このクライアントは、`SampleServiceProxy` クライアントではなく `HelloWorldProxy` クライアントを使用します (<xref:System.ServiceModel.ServiceContractAttribute>の「例」セクションのサンプルの場合と同様)。  
  
 [!code-csharp[SCA.Names#3](~/samples/snippets/csharp/VS_Snippets_CFX/sca.names/cs/client.cs#3)]
 [!code-vb[SCA.Names#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.names/vb/client.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">値は null です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">値が空の文字列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.ServiceModel.ServiceContractAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web サービス記述言語 (WSDL) での <see langword="&lt;portType&gt;" /> 要素の名前空間を取得または設定します。</summary>
        <value><see langword="&lt;portType&gt;" /> 要素の WSDL 名前空間。 既定値は<c>"http://tempuri.org"</c>です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、<xref:System.ServiceModel.ServiceContractAttribute> の <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> および <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> プロパティを使用して、WSDL で対応する値を設定する方法を示しています。  
  
 [!code-csharp[SCA.Names#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.names/cs/services.cs#1)]
 [!code-vb[SCA.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.names/vb/services.vb#1)]  
  
 次のコード例は、 [ServiceModel メタデータユーティリティツール (svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)を使用して WSDL をインポートした前のサービスの WINDOWS COMMUNICATION FOUNDATION (WCF) クライアントを示しています。 このクライアントは、`SampleServiceClient` クライアントではなく `HelloWorldClient` クライアントを使用します (<xref:System.ServiceModel.ServiceContractAttribute>の「例」セクションのサンプルの場合と同様)。  
  
 [!code-csharp[SCA.Names#3](~/samples/snippets/csharp/VS_Snippets_CFX/sca.names/cs/client.cs#3)]
 [!code-vb[SCA.Names#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.names/vb/client.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.ServiceContractAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントラクトのバインドで、<see cref="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" /> プロパティの値をサポートする必要があるかどうかを指定します。</summary>
        <value><see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。 既定値は、<see cref="F:System.Net.Security.ProtectionLevel.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントラクトを公開するエンドポイントに対して、コントラクトバインドが暗号化、デジタル署名、またはその両方を必要とする程度を指定するには、<xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> プロパティを使用します。 ここで設定する値は、エラーを含むすべての操作メッセージの既定値となります。  
  
 ランタイムでの保護動作は、次のプロパティで設定された保護レベル値の組み合わせであることに注意してください。 こうしたプロパティは、階層構造を持ちます。 最も外側の値を設定すると、それより狭いスコープで異なる値を明示的に設定していなければ、より狭いスコープでその既定の設定が定まります。 この場合、外側の値は特に設定された値を除いて、それより狭いすべてのスコープで既定の設定として残ります。  
  
 たとえば、<xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> が <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> に設定され、他のより狭いスコープに保護レベル設定が存在しない場合、操作コントラクト内のすべてのメッセージが暗号化および署名されます。 ただし、こうした操作の 1 つで <xref:System.ServiceModel.OperationContractAttribute> が <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType> に設定されている場合、その操作のメッセージは署名されますが、コントラクト内の他のすべてのメッセージは暗号化および署名されます。  
  
 保護レベルとその想定および範囲の詳細については、「[保護レベル](~/docs/framework/wcf/understanding-protection-level.md)について」を参照してください。  
  
 こうした値が設定されるスコープは次のとおりです。  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> の <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType> プロパティ。  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> の <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType> プロパティ。  
  
 コントラクト上で明示的に指定された保護レベルが存在せず、基になるバインドで (トランスポート レベルまたはメッセージ レベルを問わず) セキュリティをサポートする場合、コントラクト全体の有効な保護レベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> です。 バインドで (<xref:System.ServiceModel.BasicHttpBinding> などの) セキュリティをサポートしない場合、コントラクト全体の有効な <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> は <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> です。 したがって、コントラクトで <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> を指定している場合でも、エンドポイント バインドによってはクライアントが要求するメッセージ レベルまたはトランスポート レベルのセキュリティ保護が異なる場合があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">値が、<see cref="T:System.Net.Security.ProtectionLevel" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="SessionMode">
      <MemberSignature Language="C#" Value="public System.ServiceModel.SessionMode SessionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.SessionMode SessionMode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.SessionMode" />
      <MemberSignature Language="VB.NET" Value="Public Property SessionMode As SessionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::SessionMode SessionMode { System::ServiceModel::SessionMode get(); void set(System::ServiceModel::SessionMode value); };" />
      <MemberSignature Language="F#" Value="member this.SessionMode : System.ServiceModel.SessionMode with get, set" Usage="System.ServiceModel.ServiceContractAttribute.SessionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.SessionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セッションが許可されるか、許可されないか、または必要であるかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.ServiceModel.SessionMode" /> は、セッションが許可されるか、許可されないか、または必要であるかを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 エンドポイント間のセッションをサポートするバインディングを要求するには、<xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> プロパティを使用します。 セッションとは、2 つ以上のエンドポイント間で交換される一連のメッセージを相互に関連付ける方法のことです。 サービスがチャネルセッションをサポートしている場合は、<xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> プロパティを使用して、サービスコントラクトの実装とチャネルセッションの間の関係を指定できます。 バインドがセッションをサポートしない場合は、例外がスローされます。  
  
 たとえば、<xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> プロパティが <xref:System.ServiceModel.SessionMode.Required?displayProperty=nameWithType> に設定されており、<xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> プロパティが <xref:System.ServiceModel.InstanceContextMode.PerSession>に設定されている場合、クライアントは同じ接続を使用して同じサービスオブジェクトを繰り返し呼び出すことができます。  
  
 セッションとサービスインスタンスの詳細については、「セッションと[セッション、インスタンス化、および同時実行](~/docs/framework/wcf/feature-details/sessions-instancing-and-concurrency.md)の[使用](~/docs/framework/wcf/using-sessions.md)」を参照してください。  
  
> [!NOTE]
>  セッションをサポートするチャネルは、特定のセッションとのサービス インスタンスの既定の関連付けをサポートします。 ただし、セッションの実装が異なれば、セッション ベースのインスタンス作成の制御に加えてサポートされる機能も異なります。 WCF には、セッションフルアプリケーションの動作を提供するために使用できる4種類のセッションが用意されています。セッションの種類ごとに、セッションの種類に固有の追加の動作が提供されます。  
  
1.  <xref:System.ServiceModel.Channels.SecurityBindingElement?displayProperty=nameWithType> は、暗号化とデジタル署名のプロセスに関して通信の両端が合意しているセキュリティセッションをサポートしています。すべてのメッセージは、セキュリティで保護された特定のメッセージ交換と関連付けられます。 詳細については、「[サービスのセキュリティ保護](~/docs/framework/wcf/securing-services.md)」を参照してください。 たとえば、セキュリティセッションと信頼できるセッションの両方のサポートを含む <xref:System.ServiceModel.WSHttpBinding?displayProperty=nameWithType>は、既定では、メッセージを暗号化してデジタル署名する、セキュリティで保護されたセッションのみを使用します。  
  
2.  <xref:System.ServiceModel.NetTcpBinding?displayProperty=nameWithType> は、すべてのメッセージがソケットレベルで接続セッションによって関連付けられていることを確認するために、TCP/IP 接続によって公開されているセッションをサポートします。  
  
3.  Ws-reliablemessaging 仕様を実装する <xref:System.ServiceModel.Channels.ReliableSessionBindingElement?displayProperty=nameWithType>は、メッセージが順番に1回だけ配信される信頼できるセッションをサポートします。これにより、メッセージ交換中にメッセージが複数のノードに移動した場合でも信頼できるようになります。 詳細については、「[信頼できるセッション](~/docs/framework/wcf/feature-details/reliable-sessions.md)」を参照してください。  
  
4.  <xref:System.ServiceModel.NetMsmqBinding?displayProperty=nameWithType> は、MSMQ データグラムセッションを提供します。 詳細については、「 [WCF のキュー](~/docs/framework/wcf/feature-details/queues-in-wcf.md)」を参照してください。  
  
 <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> プロパティを設定しても、コントラクトが必要とするセッションの種類は指定されないことに注意してください。  
  
   
  
## Examples  
 次のサービスコントラクトでは、構成されたバインディングが `SampleDuplexHello` サービス実装と対話するときにセッションを使用する必要があります。  
  
 [!code-csharp[SCA.Session#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.session/cs/services.cs#1)]
 [!code-vb[SCA.Session#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.session/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">値が、<see cref="T:System.ServiceModel.SessionMode" /> 値ではありません。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
