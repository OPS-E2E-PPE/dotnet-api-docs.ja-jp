<Type Name="OperationContractAttribute" FullName="System.ServiceModel.OperationContractAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c55b1ecc3ad1f57327c2631e9d06174d527abbf5" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73381550" /></Metadata><TypeSignature Language="C#" Value="public sealed class OperationContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OperationContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.OperationContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OperationContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class OperationContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type OperationContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-uwp-10.0;dotnet-plat-ext-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8bae2-101">メソッドが、Windows Communication Foundation (WCF) アプリケーションのサービス コントラクトの一部である操作を定義することを示します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-101">Indicates that a method defines an operation that is part of a service contract in a Windows Communication Foundation (WCF) application.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bae2-102"><xref:System.ServiceModel.OperationContractAttribute> をメソッドに適用して、そのメソッドが、サービス操作を (<xref:System.ServiceModel.ServiceContractAttribute> 属性によって指定される) サービス コントラクトの一部として実装することを示します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-102">Apply the <xref:System.ServiceModel.OperationContractAttribute> to a method to indicate that the method implements a service operation as part of a service contract (specified by a <xref:System.ServiceModel.ServiceContractAttribute> attribute).</span></span>  
  
 <span data-ttu-id="8bae2-103"><xref:System.ServiceModel.OperationContractAttribute> プロパティを使用して、操作の構造とメタデータ内に表現される値を制御します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-103">Use the <xref:System.ServiceModel.OperationContractAttribute> properties to control the structure of the operation and the values expressed in metadata:</span></span>  
  
-   <span data-ttu-id="8bae2-104"><xref:System.ServiceModel.OperationContractAttribute.Action%2A> プロパティは、この操作を一意に識別するアクションを指定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-104">The <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property specifies the action that uniquely identifies this operation.</span></span> <span data-ttu-id="8bae2-105">WCF は、アクションに基づいて要求メッセージをメソッドにディスパッチします。</span><span class="sxs-lookup"><span data-stu-id="8bae2-105">WCF dispatches request messages to methods based on their action.</span></span>  
  
-   <span data-ttu-id="8bae2-106"><xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> プロパティは、この操作が、Begin/End メソッド ペアを使用して実装される、または非同期呼び出しが可能であることを示します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-106">The <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property indicates that the operation is implemented or can be called asynchronously using a Begin/End method pair.</span></span>  
  
-   <span data-ttu-id="8bae2-107"><xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A> プロパティは、<xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> プロパティが明示的に設定されているかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-107">The <xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A> property indicates whether the <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> property has been explicitly set.</span></span>  
  
-   <span data-ttu-id="8bae2-108"><xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> プロパティは、この操作が、単一の入力メッセージのみで構成されることを示します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-108">The <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> property indicates that the operation only consists of a single input message.</span></span> <span data-ttu-id="8bae2-109">この操作には、関連付けられた出力メッセージがありません。</span><span class="sxs-lookup"><span data-stu-id="8bae2-109">The operation has no associated output message.</span></span>  
  
-   <span data-ttu-id="8bae2-110"><xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> プロパティは、この操作が、セッションの最初の操作になることができるかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-110">The <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> property specifies whether this operation can be the initial operation in a session.</span></span>  
  
-   <span data-ttu-id="8bae2-111"><xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> プロパティは、操作の完了後に、WCF が現在のセッションを終了するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-111">The <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> property specifies whether WCF attempts to terminate the current session after the operation completes.</span></span>  
  
-   <span data-ttu-id="8bae2-112"><xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> プロパティは、操作が実行時に必要とするメッセージ レベルのセキュリティを指定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-112">The <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> property specifies the message-level security that an operation requires at run time.</span></span>  
  
-   <span data-ttu-id="8bae2-113"><xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> プロパティは、この操作に対する応答メッセージのアクションを指定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-113">The <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> property specifies the action of the reply message for the operation.</span></span>  
  
 <span data-ttu-id="8bae2-114"><xref:System.ServiceModel.OperationContractAttribute> 属性は、メソッドがサービス コントラクト内の操作であることを宣言します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-114">The <xref:System.ServiceModel.OperationContractAttribute> attribute declares that a method is an operation in a service contract.</span></span> <span data-ttu-id="8bae2-115"><xref:System.ServiceModel.OperationContractAttribute> 属性を設定したメソッドだけが、サービス操作として公開されます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-115">Only methods attributed with the <xref:System.ServiceModel.OperationContractAttribute> are exposed as service operations.</span></span> <span data-ttu-id="8bae2-116"><xref:System.ServiceModel.OperationContractAttribute> でマークされたメソッドを持たないサービス コントラクトには、公開される操作がありません。</span><span class="sxs-lookup"><span data-stu-id="8bae2-116">A service contract without any methods marked with the <xref:System.ServiceModel.OperationContractAttribute> exposes no operations.</span></span>  
  
 <span data-ttu-id="8bae2-117"><xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> プロパティは、`Begin`\<*methodname*> および `End`\<*methodname*> メソッドのペアが、非同期的に実装された単一の操作 (クライアントまたはサービスであるかどうか) を形成することを示します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-117">The <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property indicates that a pair of `Begin`\<*methodName*> and `End`\<*methodName*> methods form a single operation implemented asynchronously (whether on the client or the service).</span></span> <span data-ttu-id="8bae2-118">サービスが操作を非同期に実装する能力はサービス実装の詳細であり、メタデータ (Web サービス記述言語 (WSDL) など) には公開されません。</span><span class="sxs-lookup"><span data-stu-id="8bae2-118">The ability of a service to implement operations asynchronously is a service implementation detail and is not exposed in metadata (such as Web Services Description Language (WSDL)).</span></span>  
  
 <span data-ttu-id="8bae2-119">同様に、クライアントは、サービス メソッドの実装方法とは無関係に、操作を非同期で呼び出すことを選択できます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-119">Similarly, clients can choose to invoke operations asynchronously independent of how the service method is implemented.</span></span> <span data-ttu-id="8bae2-120">クライアント内でのサービス操作の非同期での呼び出しは、サービス メソッドの実行に多少の時間がかかるが、情報をクライアントに直接返す必要がある場合に使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8bae2-120">Calling service operations asynchronously in the client is recommended when a service method takes some time but must return information directly to the client.</span></span> <span data-ttu-id="8bae2-121">詳細については、「<xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bae2-121">For details, see <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A>.</span></span>  
  
 <span data-ttu-id="8bae2-122"><xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> プロパティは、メソッドが、基になる空の応答メッセージも含めてまったく値を返さないことを示します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-122">The <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> property indicates that a method does not return any value at all, including an empty underlying response message.</span></span> <span data-ttu-id="8bae2-123">この種のメソッドは、通知やイベント スタイルの通信に便利です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-123">This type of method is useful for notifications or event-style communication.</span></span> <span data-ttu-id="8bae2-124">この種のメソッドは応答メッセージを返すことができないため、メソッドの宣言では `void` を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8bae2-124">Methods of this kind cannot return a reply message so the method's declaration must return `void`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8bae2-125">プログラムによってこの属性の情報ストアを取得する場合は、リフレクションではなく <xref:System.ServiceModel.Description.ContractDescription> クラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-125">When programmatically retrieving the information store in this attribute, use the <xref:System.ServiceModel.Description.ContractDescription> class instead of reflection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8bae2-126"><xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> プロパティが `false` (既定) に設定されている場合は、`void` を返すメソッドであっても、基になるメッセージ レベルでは双方向メソッドとなります。</span><span class="sxs-lookup"><span data-stu-id="8bae2-126">If the <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> property is set to `false`, (the default), even methods that return `void` are two-way methods at the underlying message level.</span></span> <span data-ttu-id="8bae2-127">この場合、インフラストラクチャは、空のメッセージを作成して送信することで、メソッドが戻ったことを呼び出し元に示します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-127">In this case, the infrastructure creates and sends an empty message to indicate to the caller that the method has returned.</span></span> <span data-ttu-id="8bae2-128">このアプローチを使用して、アプリケーションとインフラストラクチャは、エラー情報 (SOAP エラーなど) をクライアントに返信できます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-128">Using this approach enables the application and the infrastructure to send error information (such as a SOAP fault) back to the client.</span></span> <span data-ttu-id="8bae2-129">応答メッセージの作成とディスパッチを回避する唯一の方法は、<xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> を `true` に設定することです。</span><span class="sxs-lookup"><span data-stu-id="8bae2-129">Setting <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> to `true` is the only way to prevent the creation and dispatch of a reply message.</span></span> <span data-ttu-id="8bae2-130">詳細については、「[一方向サービス](~/docs/framework/wcf/feature-details/one-way-services.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bae2-130">For more information, see [One-Way Services](~/docs/framework/wcf/feature-details/one-way-services.md).</span></span>  
  
 <span data-ttu-id="8bae2-131"><xref:System.ServiceModel.OperationContractAttribute.Action%2A> プロパティと <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> プロパティを使用すると、SOAP メッセージの既定のアクションを変更するだけではなく、認識されないメッセージ用のハンドラーを作成したり、ダイレクト メッセージ プログラミングでのアクションの追加を無効にしたりできます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-131">The <xref:System.ServiceModel.OperationContractAttribute.Action%2A> and <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> properties can be used not only to modify the default action of SOAP messages but also to create handlers for unrecognized messages or to disable adding actions for direct message programming.</span></span> <span data-ttu-id="8bae2-132">クライアントが他の操作の前に特定のサービス操作を呼び出すことができないようにするには、<xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-132">Use the <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> property to prevent clients from calling a particular service operation prior to other operations.</span></span> <span data-ttu-id="8bae2-133">クライアントが特定のサービス操作を呼び出した後に、WCF がチャネルを閉じるようにするには、<xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-133">Use the <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> property to have WCF close the channel after clients call a particular service operation.</span></span> <span data-ttu-id="8bae2-134">詳細については、「[セッションの使用](~/docs/framework/wcf/using-sessions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bae2-134">For more information, see [Using Sessions](~/docs/framework/wcf/using-sessions.md).</span></span>  
  
 <span data-ttu-id="8bae2-135"><xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> プロパティを使用して、操作メッセージが署名、暗号化、または署名と暗号化の対象になるかどうかを操作コントラクトに対して指定できます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-135">The <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> property enables you to specify on the operation contract whether the operation messages are signed, encrypted, or signed and encrypted.</span></span> <span data-ttu-id="8bae2-136">コントラクトによって要求されるセキュリティ レベルがバインドで提供できない場合は、実行時に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-136">If a binding cannot provide the security level required by the contract, an exception is thrown at run time.</span></span> <span data-ttu-id="8bae2-137">詳細については、「<xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A>」および「[保護レベルについ](~/docs/framework/wcf/understanding-protection-level.md)て」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bae2-137">For more information, see <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> and [Understanding Protection Level](~/docs/framework/wcf/understanding-protection-level.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bae2-138">次のコード例は、1 つの操作を持つ単純なサービスを示しています。</span><span class="sxs-lookup"><span data-stu-id="8bae2-138">The following code example shows a simple service contract with one operation.</span></span>  
  
 [!code-csharp[OperationContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute/vb/services.vb#1)]  
  
 <span data-ttu-id="8bae2-139">次の例は、3 つの操作を指定する暗黙のサービス コントラクトを実装するサービスです。</span><span class="sxs-lookup"><span data-stu-id="8bae2-139">The following example is a service that implements an implicit service contract that specifies three operations.</span></span> <span data-ttu-id="8bae2-140">操作のうちの 2 つは双方向操作であり、戻り値の内容に関係なく、基になる応答メッセージを呼び出し元に返します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-140">Two of the operations are two-way operations, which return underlying response messages to the caller no matter what the return value is.</span></span> <span data-ttu-id="8bae2-141">3 つ目の操作は、呼び出しと基になる受信メッセージを受信しますが、基になる応答メッセージは返しません。</span><span class="sxs-lookup"><span data-stu-id="8bae2-141">The third operation receives a call, an underlying inbound message, but returns no underlying response message.</span></span>  
  
```csharp  
[ServiceContractAttribute]  
public class OneAndTwoWay  
{  
  // The client waits until a response message appears.  
  [OperationContractAttribute]  
  public int MethodOne (int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  // The client waits until an empty response message appears.  
  [OperationContractAttribute]  
  public void MethodTwo (int x)  
  {  
    return;  
  }  
  
  // The client returns as soon as an outbound message  
  // is dispatched to the service; no response  
  // message is generated or sent from the service.  
  [OperationContractAttribute(IsOneWay=true)]  
  public void MethodThree (int x)  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContractAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContractAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8bae2-142"><see cref="T:System.ServiceModel.OperationContractAttribute" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-142">Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContractAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Action : string with get, set" Usage="System.ServiceModel.OperationContractAttribute.Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bae2-143">要求メッセージの WS-Addressing アクションを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-143">Gets or sets the WS-Addressing action of the request message.</span></span></summary>
        <value><span data-ttu-id="8bae2-144">WS-Addressing アクション ヘッダーの生成で使用するアクション。</span><span class="sxs-lookup"><span data-stu-id="8bae2-144">The action to use in generating the WS-Addressing Action header.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bae2-145">メソッドの入力メッセージのアクションを制御するには、<xref:System.ServiceModel.OperationContractAttribute.Action%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-145">Use the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property to control the action of the method's input message.</span></span> <span data-ttu-id="8bae2-146">WCF では、このアクションを使用して受信メッセージを適切なメソッドにディスパッチするため、コントラクト操作内で使用されるメッセージには一意のアクションが必要です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-146">Because WCF uses this action to dispatch an incoming message to the appropriate method, messages used within a contract operation must have unique actions.</span></span> <span data-ttu-id="8bae2-147">既定のアクション値は、コントラクトの名前空間 (既定値は `"http://tempuri.org/"`)、コントラクト名 (明示的なサービスインターフェイスが使用されていない場合は、インターフェイス名またはクラス名)、操作名、および追加文字列 ("Response") の組み合わせで、メッセージは相関応答です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-147">The default action value is a combination of the contract namespace (the default value is `"http://tempuri.org/"`), the contract name (interface name or the class name, if no explicit service interface is used), the operation name, and an additional string ("Response") if the message is a correlated response.</span></span> <span data-ttu-id="8bae2-148">この既定値は、<xref:System.ServiceModel.OperationContractAttribute.Action%2A> プロパティを使用してオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-148">You can override this default with the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property.</span></span>  
  
 <span data-ttu-id="8bae2-149">サービスが受信したが、サービス操作にダイレクトできないすべてのメッセージを処理するサービス操作であることを示すには、値 "\*" (アスタリスク) を指定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-149">To indicate that a service operation handles all messages that the service receives but cannot be directed to a service operation, specify the value "\*" (an asterisk).</span></span> <span data-ttu-id="8bae2-150">不一致メッセージ ハンドラーと呼ばれるこの種の操作は、以下のメソッド署名のいずれかを持つ必要があります。これに該当しない場合は、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-150">This type of operation, called an unmatched message handler, must have one of following method signatures, or a <xref:System.InvalidOperationException> is thrown:</span></span>  
  
-   <span data-ttu-id="8bae2-151">サービス操作は <xref:System.ServiceModel.Channels.Message> オブジェクトだけを受け取ることができ、<xref:System.ServiceModel.Channels.Message> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-151">The service operation can take only a <xref:System.ServiceModel.Channels.Message> object and return a <xref:System.ServiceModel.Channels.Message> object.</span></span>  
  
-   <span data-ttu-id="8bae2-152">サービス操作は <xref:System.ServiceModel.Channels.Message> オブジェクトだけを受け取ることができ、何も返しません (つまり`void` を返します)。</span><span class="sxs-lookup"><span data-stu-id="8bae2-152">The service operation can take only a <xref:System.ServiceModel.Channels.Message> object and return nothing (that is, return `void`).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8bae2-153">サービス コントラクトは、<xref:System.ServiceModel.OperationContractAttribute.Action%2A> プロパティが "\*" に設定されたサービス操作を 1 つだけ持つことができます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-153">A service contract can have only one service operation with the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property set to "\*".</span></span> <span data-ttu-id="8bae2-154">サービスクラスが実装する同じ listenUri でホストされているサービスコントラクトのグループは、<xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> プロパティが `false`に設定されている場合、<xref:System.ServiceModel.OperationContractAttribute.Action%2A> プロパティが "\*" に設定された多数のサービス操作を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-154">Any group of service contracts hosted at the same listenUri that a service class implements can have many service operations with the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property set to "\*" when the <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> property is set to `false`.</span></span> <span data-ttu-id="8bae2-155">ただし、<xref:System.ServiceModel.OperationContractAttribute.Action%2A> プロパティを "\*" に設定し、<xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> プロパティを true に設定することができるのは、これらのサービス操作の1つだけです。</span><span class="sxs-lookup"><span data-stu-id="8bae2-155">However, only one of those service operations can have the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property set to "\*" and the <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> property set to true.</span></span> <span data-ttu-id="8bae2-156">詳細については、「<xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bae2-156">For more details, see <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bae2-157"><xref:System.ServiceModel.OperationContractAttribute.Action%2A> プロパティと <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> プロパティを使用して入力メッセージと出力 (または応答) メッセージの両方の SOAP アクションを明示的に制御し、<xref:System.ServiceModel.OperationContractAttribute.Name%2A> プロパティを使用してメタデータ内の操作の名前を制御するサービスを次の例に示します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-157">The following example is a service that uses the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> and <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> properties to explicitly control the SOAP actions of both the input and output (or reply) messages, and the <xref:System.ServiceModel.OperationContractAttribute.Name%2A> property to control the name of the operation in metadata.</span></span> <span data-ttu-id="8bae2-158">さらに、このアプリケーションでは、<xref:System.ServiceModel.OperationContractAttribute.Action%2A> 値 "\*" を使用して、認識されないメッセージを処理するメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8bae2-158">Finally, the application also uses an <xref:System.ServiceModel.OperationContractAttribute.Action%2A> value of "\*" to indicate a method that handles unrecognized messages.</span></span>  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 <span data-ttu-id="8bae2-159">このコントラクトを実装するサービスは、次の例のようなメッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-159">A service that implements this contract sends messages that look like the following example:</span></span>  
  
 [!code-csharp[OperationContractAttribute_Properties#2](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bae2-160">値が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-160">The value is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsyncPattern">
      <MemberSignature Language="C#" Value="public bool AsyncPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsyncPattern" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.AsyncPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPattern As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AsyncPattern { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncPattern : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.AsyncPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bae2-161">サービス コントラクト内で <see langword="Begin" />&lt;*methodName*&gt; メソッドと <see langword="End" />&lt;*methodName*&gt; メソッドのペアを使用して、操作が非同期的に実装されることを示します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-161">Indicates that an operation is implemented asynchronously using a <see langword="Begin" />&lt;*methodName*&gt; and <see langword="End" />&lt;*methodName*&gt; method pair in a service contract.</span></span></summary>
        <value><span data-ttu-id="8bae2-162"><see langword="Begin" />&lt;*methodname*&gt;メソッドが <see langword="End" />&lt;*methodname*&gt; メソッドに一致し、インフラストラクチャで非同期メソッドペアとして実装されている操作として処理できる <see langword="true" /> 場合は、サービスインターフェイス。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-162"><see langword="true" /> if the <see langword="Begin" />&lt;*methodName*&gt;method is matched by an <see langword="End" />&lt;*methodName*&gt; method and can be treated by the infrastructure as an operation that is implemented as an asynchronous method pair on the service interface; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bae2-163">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-163">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bae2-164"><xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> プロパティを使用して、サーバー、クライアント、またはその両方で非同期に呼び出すことができるサービス操作を構築します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-164">Use the <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property to build service operations that can be called asynchronously on the server, the client, or both.</span></span> <span data-ttu-id="8bae2-165"><xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> プロパティは、`Begin` メソッドに、.NET Framework 非同期メソッド設計パターンに準拠している一致 `End` メソッドがあることをランタイムに通知します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-165">The <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property informs the runtime that a `Begin` method has a matched `End` method that conforms to the .NET Framework asynchronous method design pattern.</span></span> <span data-ttu-id="8bae2-166">サービス操作を実装したサーバー非同期メソッドを構築すると、サーバーのスケーラビリティとパフォーマンスが向上し、サービスのクライアントは影響がありません。このため、非同期に実行可能な、時間がかかる操作の実行後に、サービス操作がクライアントに何かを返す必要がある場合は、この処理を行うことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8bae2-166">Building server asynchronous methods that implement a service operation increases server scalability and performance without affecting the clients of the service, and is recommended when a service operation must return something to the client after performing a lengthy operation that can be performed asynchronously.</span></span>  
  
 <span data-ttu-id="8bae2-167">サーバー上の非同期のメソッド ペアは、操作の基になる Web サービス記述言語 (WSDL) の説明に影響しないため、クライアントに影響が出ることはありません。</span><span class="sxs-lookup"><span data-stu-id="8bae2-167">Clients remain unaffected because the asynchronous method pair on the server is an implementation detail that does not affect the underlying Web Services Description Language (WSDL) description of the operation.</span></span> <span data-ttu-id="8bae2-168">このようなメソッドは、`<input>` と関連する `<output>` メッセージを含む単一の操作としてクライアントに表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-168">Such methods appear to clients as a single operation with `<input>` and correlated `<output>` messages.</span></span> <span data-ttu-id="8bae2-169">WCF は、受信メッセージを `Begin`\<*methodname*> メソッドに自動的にルーティングし、`End`\<*methodname*> 呼び出しの結果を送信メッセージにルーティングします。</span><span class="sxs-lookup"><span data-stu-id="8bae2-169">WCF automatically routes inbound messages to the `Begin`\<*methodName*> method and routes the results of the `End`\<*methodName*> call to the outbound message.</span></span> <span data-ttu-id="8bae2-170">したがって、クライアントのチャネルは、このメソッド ペアを単一の同期操作または非同期操作ペアのいずれかとして表現できます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-170">Client channels, therefore, can represent the method pair as either a single synchronous operation or as an asynchronous operation pair.</span></span> <span data-ttu-id="8bae2-171">どちらの場合もクライアントの表現は、サーバー上の非同期実装にまったく影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="8bae2-171">In no case does the client representation affect the asynchronous implementation on the server in any way.</span></span>  
  
 <span data-ttu-id="8bae2-172">クライアントのコントラクトは、<xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> プロパティを使用して、クライアントが操作を非同期で呼び出すために使用できる非同期のメソッド ペアを示すことができます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-172">Client contracts can use the <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property to indicate an asynchronous method pair that the client can use to invoke the operation asynchronously.</span></span> <span data-ttu-id="8bae2-173">通常、クライアントアプリケーションは、 [ServiceModel メタデータユーティリティツール (svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)ツールと `/async` オプションを使用して、`Begin`\<*methodname* *> `End`を*生成し、クライアントはを使用して操作を非同期に呼び出すことができます。\<</span><span class="sxs-lookup"><span data-stu-id="8bae2-173">Typically, client applications use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) tool and the `/async` option to generate a `Begin`\<*methodName*> and `End`\<*methodName*> method pair that the client can use to invoke the operation asynchronously.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8bae2-174">サービス操作に非同期バージョンと同期バージョンがある場合、サーバー上の既定の動作は同期バージョンの呼び出しです。</span><span class="sxs-lookup"><span data-stu-id="8bae2-174">If a service operation has both an asynchronous and a synchronous version, the default behavior on the service is to invoke the synchronous version.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bae2-175">次のコード例は、`Add` の同期バージョンと非同期バージョンの両方を含むサービス コントラクトへのクライアント チャネルを示しています。</span><span class="sxs-lookup"><span data-stu-id="8bae2-175">The following code example shows a client channel to a service contract that includes both a synchronous version of `Add` and an asynchronous version.</span></span> <span data-ttu-id="8bae2-176">クライアント上でコントラクト インターフェイスが使用される場合、`BeginAdd` と `Add` 操作はどちらも、メソッドをサーバー上で呼び出します。このメソッドは、同期である場合もそうでない場合もあります。</span><span class="sxs-lookup"><span data-stu-id="8bae2-176">If the contract interface is used on the client, both the `BeginAdd` and the `Add` operation invoke a method on the server that may or may not be synchronous.</span></span> <span data-ttu-id="8bae2-177">コントラクトを使用してサービスを実装した場合、既定では、受信要求が同期メソッドにディスパッチされます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-177">If the contract is used to implement the service, the default is that incoming requests are dispatched to the synchronous method.</span></span>  
  
```csharp  
[ServiceContract]  
public interface IAddTwoNumbers  
{  
    // If the asynchronous method pair  
    // appears on the client channel, the client can call   
    // them asynchronously to prevent blocking.  
    [OperationContract (AsyncPattern=true)]  
    IAsyncResult BeginAdd(int a, int b, AsyncCallback cb, AsyncState s);  
  
    [OperationContract]  
    int EndAdd(IAsyncResult r);  
  
    // This is a synchronous version of the BeginAdd/EndAdd pair.  
    // It appears in the client channel code by default.   
    [OperationContract]  
    int Add(int a, int b);  
   }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.OperationContractAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bae2-178">この操作のメッセージの暗号化、署名、または両方が必要かどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-178">Gets a value that indicates whether the messages for this operation must be encrypted, signed, or both.</span></span></summary>
        <value><span data-ttu-id="8bae2-179"><see cref="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" /> プロパティが <see cref="F:System.Net.Security.ProtectionLevel.None" /> 以外の値に設定されている場合は <see langword="true" />。それ以外は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bae2-179"><see langword="true" /> if the <see cref="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" /> property is set to a value other than <see cref="F:System.Net.Security.ProtectionLevel.None" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bae2-180">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-180">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bae2-181"><xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A> プロパティを使用して、この操作のメッセージによって特定の保護レベルが要求されるかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-181">Use the <xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A> property to determine whether a specific protection level is required by the messages of this operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitiating">
      <MemberSignature Language="C#" Value="public bool IsInitiating { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitiating" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsInitiating" />
      <MemberSignature Language="VB.NET" Value="Public Property IsInitiating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitiating { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsInitiating : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.IsInitiating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bae2-182">メソッドが (セッションが存在する場合に) サーバー上でセッションを開始できる操作を実装するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-182">Gets or sets a value that indicates whether the method implements an operation that can initiate a session on the server (if such a session exists).</span></span></summary>
        <value><span data-ttu-id="8bae2-183">サーバーでのセッションの開始操作が許可されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bae2-183"><see langword="true" /> if the operation is permitted to initiate a session on the server, otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bae2-184">既定値は、<see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-184">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bae2-185"><xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> プロパティは、ある操作を、セッションが作成されるときに呼び出される最初の操作にできるかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-185">The <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> property controls whether an operation can be the first operation called when a session is created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8bae2-186"><xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A?displayProperty=nameWithType> の値が <xref:System.ServiceModel.SessionMode.Allowed> または <xref:System.ServiceModel.SessionMode.Required> である必要があります。さらに、<xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> プロパティが正常に機能するには、使用されるバインディングがセッションを要求または許可する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8bae2-186">The value of <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A?displayProperty=nameWithType> must be either <xref:System.ServiceModel.SessionMode.Allowed> or <xref:System.ServiceModel.SessionMode.Required> and the binding used must require or allow sessions for the <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> property to work properly.</span></span>  
  
 <span data-ttu-id="8bae2-187">既定値は `true` で、操作をチャネルで最初に呼び出される操作にできることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-187">The default is `true`, which means that an operation can be the first one called on a channel.</span></span> <span data-ttu-id="8bae2-188">開始メソッドのそれ以降の呼び出しでは、そのメソッドを呼び出す以外の機能はありません。</span><span class="sxs-lookup"><span data-stu-id="8bae2-188">Subsequent calls to the initiating method have no effect, other than to call the method.</span></span> <span data-ttu-id="8bae2-189">他のセッションは作成されません。</span><span class="sxs-lookup"><span data-stu-id="8bae2-189">No other sessions are created.</span></span> <span data-ttu-id="8bae2-190">コントラクトがセッションを使用しない場合は、<xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> に設定された `false` は無視されます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-190">If the contract does not make use of a session, setting <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> to `false` is ignored.</span></span>  
  
 <span data-ttu-id="8bae2-191">通常は、<xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> を `false` に設定して、クライアントが、このメソッドを呼び出す前にサービスで他のメソッドを呼び出すようにします。</span><span class="sxs-lookup"><span data-stu-id="8bae2-191">Typically, you set <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> to `false` to force clients to call another method on the service before they can invoke this one.</span></span> <span data-ttu-id="8bae2-192">たとえば、サービスに注文 ID 番号に依存する一連の操作がある場合は、<xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> サービス操作の `true` に `GetOrderId` を設定し、それ以外のすべてのサービス操作に `false` を設定できます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-192">For example, if your service has a series of operations that depend on an order ID number, you can set <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> to `true` for a `GetOrderId` service operation and set all remaining service operations to `false`.</span></span> <span data-ttu-id="8bae2-193">これにより、新しいクライアントが、サービスにより公開される他のメソッドを使用する前に注文 ID を取得することが保証されます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-193">This ensures that each new client obtains an order ID prior to using the other methods exposed by the service.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8bae2-194"><xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> プロパティと <xref:System.ServiceModel.OperationContractAttribute.Action%2A> プロパティには、相関関係があります。</span><span class="sxs-lookup"><span data-stu-id="8bae2-194">There is an interaction between <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> and the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property.</span></span> <span data-ttu-id="8bae2-195">サービス コントラクトは、<xref:System.ServiceModel.OperationContractAttribute.Action%2A> プロパティが "\*" に設定されたサービス操作を 1 つだけ持つことができます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-195">A service contract can have only one service operation with the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property set to "\*".</span></span> <span data-ttu-id="8bae2-196">サービスクラスが実装する同じリッスン URI でホストされているサービスコントラクトのグループは、<xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> プロパティが `false`に設定されている場合、<xref:System.ServiceModel.OperationContractAttribute.Action%2A> プロパティが "\*" に設定された多数のサービス操作を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-196">Any group of service contracts hosted at the same listen URI that a service class implements can have many service operations with the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property set to "\*" when the <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> property is set to `false`.</span></span> <span data-ttu-id="8bae2-197">ただし、<xref:System.ServiceModel.OperationContractAttribute.Action%2A> プロパティを "\*" に設定し、<xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> プロパティを `true`に設定できるのは、これらのサービスメソッドの1つだけです。</span><span class="sxs-lookup"><span data-stu-id="8bae2-197">However, only one of those service methods can have the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property set to "\*" and the <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> property set to `true`.</span></span>  
  
 <span data-ttu-id="8bae2-198">開始以外の操作のメッセージを受信した場合、サービスは ActionNotSupported SOAP エラーを返します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-198">If a service receives a message for a non-initiating operation, the service returns an ActionNotSupported SOAP fault.</span></span> <span data-ttu-id="8bae2-199">これにより、クライアントでは <xref:System.ServiceModel.FaultException> が発生します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-199">The client experiences this as an <xref:System.ServiceModel.FaultException>.</span></span> <span data-ttu-id="8bae2-200">クライアントが開始以外の操作を最初に呼び出した場合、クライアントのランタイムは <xref:System.InvalidOperationException?displayProperty=nameWithType> をスローします。</span><span class="sxs-lookup"><span data-stu-id="8bae2-200">If a client calls a non-initiating operation first, the client runtime throws an <xref:System.InvalidOperationException?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8bae2-201">詳細については、「[セッションの使用](~/docs/framework/wcf/using-sessions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bae2-201">For more information, see [Using Sessions](~/docs/framework/wcf/using-sessions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bae2-202">次の例は、3 つのメソッドを指定するサービス コントラクトを実装するサービスです。</span><span class="sxs-lookup"><span data-stu-id="8bae2-202">The following example is a service that implements a service contract that specifies three methods.</span></span> <span data-ttu-id="8bae2-203">このサービスは、セッションを必要とします。</span><span class="sxs-lookup"><span data-stu-id="8bae2-203">The service requires a session.</span></span> <span data-ttu-id="8bae2-204">呼び出し元の最初の呼び出しが `MethodOne` 以外の操作である場合、チャネルは拒否され、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-204">If a caller's first call is to any operation other than `MethodOne`, the channel is refused and an exception is thrown.</span></span> <span data-ttu-id="8bae2-205">呼び出し元が `MethodOne` を呼び出してセッションを開始した場合、呼び出し元は `MethodThree` を呼び出すことでいつでも通信セッションを終了できます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-205">When a caller initiates a session by calling `MethodOne`, that caller can terminate the communication session at any time by calling `MethodThree`.</span></span> <span data-ttu-id="8bae2-206">`MethodTwo` は、セッション中に任意の回数呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-206">`MethodTwo` can be called any number of times during a session.</span></span>  
  
```csharp  
[ServiceContract(SessionMode=SessionMode.Required)]  
public class InitializeAndTerminateService  
{  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=true,  
    IsTerminating=false  
  )]  
  public void MethodOne()  
  {  
    return;  
  }  
  
  [OperationContract(  
    IsInitiating=false,  
    IsTerminating=false  
  )]  
  public int MethodTwo(int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=false,  
    IsTerminating=true  
  )]  
  public void MethodThree()  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOneWay">
      <MemberSignature Language="C#" Value="public bool IsOneWay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOneWay" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsOneWay" />
      <MemberSignature Language="VB.NET" Value="Public Property IsOneWay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOneWay { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsOneWay : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.IsOneWay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bae2-207">操作が応答メッセージを返すかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-207">Gets or sets a value that indicates whether an operation returns a reply message.</span></span></summary>
        <value><span data-ttu-id="8bae2-208">このメソッドが要求メッセージを受け取り、応答メッセージを返さない場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bae2-208"><see langword="true" /> if this method receives a request message and returns no reply message; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bae2-209">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-209">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bae2-210"><xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> プロパティを使用して、操作が応答メッセージを返さないことを指定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-210">Use the <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> property to indicate that an operation does not return a reply message.</span></span> <span data-ttu-id="8bae2-211">この種類の操作は、特に双方向の通信での通知またはイベントスタイルの通信に便利です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-211">This type of operation is useful for notifications or event-style communication, especially in two-way communication.</span></span> <span data-ttu-id="8bae2-212">基になる応答メッセージを待機しないため、一方向操作の呼び出し元には、要求メッセージの処理中に発生したエラーを検出する直接的な方法がありません</span><span class="sxs-lookup"><span data-stu-id="8bae2-212">Without waiting for an underlying response message, callers of one-way operations have no direct way to detect a failure in processing the request message.</span></span> <span data-ttu-id="8bae2-213">(信頼できるチャネルと一方向操作を使用するサービス アプリケーションは、チャネル レベルでメッセージ配信エラーを検出できます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-213">(Service applications that use reliable channels and one-way operations can detect a message delivery failure at the channel level.</span></span> <span data-ttu-id="8bae2-214">詳細については、「[信頼できるセッションの概要](~/docs/framework/wcf/feature-details/reliable-sessions-overview.md)」を参照してください。)</span><span class="sxs-lookup"><span data-stu-id="8bae2-214">For details, see [Reliable Sessions Overview](~/docs/framework/wcf/feature-details/reliable-sessions-overview.md).)</span></span>  
  
 <span data-ttu-id="8bae2-215">クライアントとサーバーが互いに独立して通信する二重 (双方向) サービス指向アプリケーションでは、クライアント チャネルは、そのメソッドで <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> プロパティを使用して、サービスがクライアントへの一方向の呼び出しを実行できることを示すことができます。クライアントでは、この呼び出しをイベントとして処理できます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-215">In duplex (or two-way) service-oriented applications in which the client and server communicate with each other independently, a client channel can use the <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> property on its methods to indicate that the service can make one-way calls to the client that the client can treat as events.</span></span> <span data-ttu-id="8bae2-216">サービスは応答メッセージの受信を想定していないため、返信の呼び出しやメッセージは生成されません。</span><span class="sxs-lookup"><span data-stu-id="8bae2-216">No return call or message is generated because the service does not expect any response message.</span></span>  
  
 <span data-ttu-id="8bae2-217"><xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> プロパティが `false` (既定) に設定されている場合は、`void` を返すメソッドであっても、応答メッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-217">If the <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> property is set to `false` (the default), even methods that return `void` result in a reply message.</span></span> <span data-ttu-id="8bae2-218">この場合、インフラストラクチャは、空のメッセージを作成して送信することで、メソッドが戻ったことを呼び出し元に示します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-218">In this case, the infrastructure creates and sends an empty message to indicate to the caller that the method has returned.</span></span> <span data-ttu-id="8bae2-219">(この方法を使用すると、インフラストラクチャは SOAP エラーをクライアントに送信できます)。応答メッセージの作成とディスパッチをキャンセルする唯一の方法は、`true` に <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> を設定することです。</span><span class="sxs-lookup"><span data-stu-id="8bae2-219">(Using this approach enables the infrastructure to send SOAP faults back to the client.) Setting <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> to `true` is the only way to cancel the creation and dispatch of a response message.</span></span>  
  
 <span data-ttu-id="8bae2-220">一方向メソッドは、値を返すことも、`ref` パラメーターと `out` パラメーターのどちらを持つこともできません。これらに該当する場合は <xref:System.InvalidOperationException?displayProperty=nameWithType> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-220">One-way methods must not return a value or have `ref` or `out` parameters; otherwise a <xref:System.InvalidOperationException?displayProperty=nameWithType> exception is thrown.</span></span>  
  
 <span data-ttu-id="8bae2-221">操作が一方向操作であることを指定することは、応答メッセージが返されないことだけを意味します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-221">Specifying that an operation is a one-way operation means only that there is no response message.</span></span> <span data-ttu-id="8bae2-222">接続できない場合、送信メッセージが非常に大きい場合、またはサービスによる受信メッセージの読み取りに時間がかかりすぎる場合は、ブロックすることができます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-222">It is possible to block if a connection cannot be made, or the outbound message is very large, or if the service cannot read inbound information fast enough.</span></span> <span data-ttu-id="8bae2-223">クライアントがブロック不可の呼び出しを必要とする場合は、<xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> 操作を生成してください。</span><span class="sxs-lookup"><span data-stu-id="8bae2-223">If a client requires a non-blocking call, generate <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> operations.</span></span> <span data-ttu-id="8bae2-224">詳細については、「[一方向サービス](~/docs/framework/wcf/feature-details/one-way-services.md)」および「 [WCF クライアントを使用したサービスへのアクセス](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bae2-224">For more information, see [One-Way Services](~/docs/framework/wcf/feature-details/one-way-services.md) and [Accessing Services Using a WCF Client](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bae2-225">次の例は、3 つの操作を指定するサービス コントラクトを実装するサービスです。</span><span class="sxs-lookup"><span data-stu-id="8bae2-225">The following example is a service that implements a service contract that specifies three operations.</span></span> <span data-ttu-id="8bae2-226">その中の 2 つのメソッドは双方向操作であり、戻り値の内容に関係なく、基になる応答メッセージを呼び出し元に返します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-226">Two of the methods implement two-way operations, which return underlying response messages to the caller no matter what the return value is.</span></span> <span data-ttu-id="8bae2-227">3 つ目のメソッドは、呼び出し (基になる受信メッセージ) を受信しますが、基になる応答メッセージは返しません。</span><span class="sxs-lookup"><span data-stu-id="8bae2-227">The third method implements an operation that receives a call (an underlying inbound message) but returns no underlying response message.</span></span>  
  
```csharp  
[ServiceContract]  
public class OneAndTwoWay  
{  
  // The client waits until a response message appears.  
  [OperationContract]  
  public int MethodOne (int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  // The client waits until an empty response message appears.  
  [OperationContract]  
  public void MethodTwo (int x)  
  {  
    return;  
  }  
  
  // The client returns as soon as an outbound message  
  // is queued for dispatch to the service; no response  
  // message is generated or sent.  
  [OperationContract(IsOneWay=true)]  
  public void MethodThree (int x)  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public bool IsTerminating { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsTerminating" />
      <MemberSignature Language="VB.NET" Value="Public Property IsTerminating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTerminating { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsTerminating : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.IsTerminating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bae2-228">応答メッセージが存在する場合に、そのメッセージの送信後にセッションを終了するようにサービス操作がサーバーに指示するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-228">Gets or sets a value that indicates whether the service operation causes the server to close the session after the reply message, if any, is sent.</span></span></summary>
        <value><span data-ttu-id="8bae2-229">操作によってサーバーがセッションを終了する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bae2-229"><see langword="true" /> if the operation causes the server to close the session, otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bae2-230">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-230">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bae2-231"><xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> プロパティを使用して、サービス操作の呼び出しで通信セッションを終了することを示します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-231">Use the <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> property to indicate that calling a service operation terminates the communication session.</span></span>  
  
 <span data-ttu-id="8bae2-232">クライアントアプリケーションで `true` に設定された <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> の値は、応答が到着した後にチャネルを閉じるよう WCF に指示します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-232">In a client application, a value of <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> set to `true` instructs WCF to close the channel after the reply arrives.</span></span>  
  
 <span data-ttu-id="8bae2-233">サービスでは、タイマーが設定され、その期間内にクライアントがチャネルを閉じない場合はチャネルを中止します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-233">In a service, a timer is set and the channel aborts if the client does not close the channel within that period.</span></span>  
  
 <span data-ttu-id="8bae2-234">セッションでこのプロパティを使用する方法の詳細については、「[セッションの使用](~/docs/framework/wcf/using-sessions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bae2-234">For more information about using this property with sessions, see [Using Sessions](~/docs/framework/wcf/using-sessions.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8bae2-235">呼び出し元が <xref:System.ServiceModel.OperationContext.OperationCompleted?displayProperty=nameWithType> 操作の <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A?displayProperty=nameWithType> イベントをリッスンしている場合、応答の受信時にブロックすることができます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-235">If a caller is listening for the <xref:System.ServiceModel.OperationContext.OperationCompleted?displayProperty=nameWithType> event for an <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A?displayProperty=nameWithType> operation, it is possible to block when the response is received.</span></span> <span data-ttu-id="8bae2-236">これを処理する適切な方法として、<xref:System.ServiceModel.OperationContext.OperationCompleted> が発生し、その直後に該当のイベント ハンドラーから制御が返されたときに、別のスレッドで処理するようにスケジュールを設定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-236">The proper way to handle this is to schedule work on another thread when <xref:System.ServiceModel.OperationContext.OperationCompleted> is raised and then immediately return from that event handler.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bae2-237">次の例は、3 つの操作を指定するサービス コントラクトを実装するサービスです。</span><span class="sxs-lookup"><span data-stu-id="8bae2-237">The following example is a service that implements a service contract that specifies three operations.</span></span> <span data-ttu-id="8bae2-238">このサービスは、ステートフル接続を必要とします。</span><span class="sxs-lookup"><span data-stu-id="8bae2-238">The service requires a stateful connection.</span></span> <span data-ttu-id="8bae2-239">呼び出し元の最初の呼び出しが `MethodOne` 以外の操作である場合、チャネルは拒否され、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-239">If a caller's first call is to any operation other than `MethodOne`, the channel is refused and an exception is thrown.</span></span> <span data-ttu-id="8bae2-240">呼び出し元が `MethodOne` を呼び出してセッションを開始した場合、呼び出し元は `MethodThree` を呼び出すことでいつでも通信セッションを終了できます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-240">When a caller initiates a session by calling `MethodOne`, that caller can terminate the communication session at any time by calling `MethodThree`.</span></span> <span data-ttu-id="8bae2-241">`MethodTwo` は、セッション中に任意の回数呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-241">`MethodTwo` can be called any number of times during a session.</span></span>  
  
```csharp  
[ServiceContractAttribute(SessionMode=SessionMode.Required)]  
public class InitializeAndTerminateService  
{  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=true,  
    IsTerminating=false  
  )]  
  public void MethodOne()  
  {  
    return;  
  }  
  
  [OperationContract(  
    IsInitiating=false,  
    IsTerminating=false  
  )]  
  public int MethodTwo(int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=false  
    IsTerminating=true  
  )]  
  public void MethodThree()  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.OperationContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bae2-242">操作の名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-242">Gets or sets the name of the operation.</span></span></summary>
        <value><span data-ttu-id="8bae2-243">操作の名前。</span><span class="sxs-lookup"><span data-stu-id="8bae2-243">The name of the operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bae2-244">WSDL で `<operation>` 要素名をオーバーライドするには、<xref:System.ServiceModel.OperationContractAttribute.Name%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-244">Use the <xref:System.ServiceModel.OperationContractAttribute.Name%2A> property to override the `<operation>` element name in WSDL.</span></span> <span data-ttu-id="8bae2-245">既定の操作名は、実装するメソッドの名前です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-245">The default operation name is the name of the implementing method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bae2-246">メタデータ内に公開される操作の名前を、<xref:System.ServiceModel.OperationContractAttribute.Name%2A> プロパティを使用して宣言する方法を、次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-246">The following code example uses the <xref:System.ServiceModel.OperationContractAttribute.Name%2A> property to declare the name of the operation as exposed in metadata.</span></span>  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bae2-247"><see cref="P:System.ServiceModel.OperationContractAttribute.Name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-247"><see cref="P:System.ServiceModel.OperationContractAttribute.Name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bae2-248">値が空の文字列です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-248">The value is an empty string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.OperationContractAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bae2-249">操作のメッセージの暗号化、署名、または両方が必要かどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-249">Gets or sets a value that specifies whether the messages of an operation must be encrypted, signed, or both.</span></span></summary>
        <value><span data-ttu-id="8bae2-250"><see cref="T:System.Net.Security.ProtectionLevel" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8bae2-250">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values.</span></span> <span data-ttu-id="8bae2-251">既定値は、<see cref="F:System.Net.Security.ProtectionLevel.None" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-251">The default is <see cref="F:System.Net.Security.ProtectionLevel.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bae2-252"><xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> プロパティを使用して、操作のメッセージの暗号化、署名、または両方が必要かどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-252">Use the <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> property to control whether the messages of an operation must be encrypted, signed, or both.</span></span> <span data-ttu-id="8bae2-253">ここで設定される値は、この操作で指定されるすべてのメッセージの既定値です。より狭いスコープでこの値をオーバーライドする場合は除きます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-253">The value set here is the default value for all messages specified for this operation unless a narrower scope overrides this value.</span></span>  
  
 <span data-ttu-id="8bae2-254">ランタイムでの保護動作は、次のプロパティで設定された保護レベル値の組み合わせであることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8bae2-254">It is important to remember that the protection behavior at runtime is the combination of the protection-level values set on the following properties.</span></span> <span data-ttu-id="8bae2-255">こうしたプロパティは、階層構造を持ちます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-255">These properties have a hierarchical structure.</span></span> <span data-ttu-id="8bae2-256">最も外側の値を設定すると、それより狭いスコープで異なる値を明示的に設定していなければ、より狭いスコープでその既定の設定が定まります。</span><span class="sxs-lookup"><span data-stu-id="8bae2-256">Setting the outermost value establishes the default setting for all narrower scopes unless a different value for a narrower scope is explicitly set.</span></span> <span data-ttu-id="8bae2-257">この場合、外側の値は特に設定された値を除いて、それより狭いすべてのスコープで既定の設定として残ります。</span><span class="sxs-lookup"><span data-stu-id="8bae2-257">In this case, the outer value remains the default for all narrower scopes with the exception of that specifically set.</span></span>  
  
 <span data-ttu-id="8bae2-258">たとえば、<xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> が <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> に設定され、他のより狭いスコープに保護レベル設定が存在しない場合、操作コントラクト内のすべてのメッセージが暗号化および署名されます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-258">For example, if <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> is set to <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> and no other narrower scopes have protection level settings, all messages in an operation contract are encrypted and signed.</span></span> <span data-ttu-id="8bae2-259">ただし、こうした操作の 1 つで <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> が <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType> に設定されている場合、その操作のメッセージは署名されますが、コントラクト内の他のすべてのメッセージは暗号化および署名されます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-259">If, however, one of those operations has the <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> set to <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, then the messages for that operation are signed but all other messages in the contract are encrypted and signed.</span></span>  
  
 <span data-ttu-id="8bae2-260">保護レベルとその想定および範囲の詳細については、「[保護レベル](~/docs/framework/wcf/understanding-protection-level.md)について」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bae2-260">For details about protection levels and their assumptions and scopes, see [Understanding Protection Level](~/docs/framework/wcf/understanding-protection-level.md).</span></span>  
  
 <span data-ttu-id="8bae2-261">こうした値が設定されるスコープは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="8bae2-261">The scopes at which these values are set are:</span></span>  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="8bae2-262"><xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> の <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType> プロパティ。</span><span class="sxs-lookup"><span data-stu-id="8bae2-262">The <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> property on <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8bae2-263"><xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> の <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType> プロパティ。</span><span class="sxs-lookup"><span data-stu-id="8bae2-263">The <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> property on <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8bae2-264">コントラクト上で明示的に指定された保護レベルが存在せず、基になるバインドで (トランスポート レベルまたはメッセージ レベルを問わず) セキュリティをサポートする場合、コントラクト全体の有効な保護レベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-264">When there is no protection level explicitly specified on the contract and the underlying binding supports security (whether at the transport or message level), the effective protection level for the whole contract is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8bae2-265">バインドで (<xref:System.ServiceModel.BasicHttpBinding> などの) セキュリティをサポートしない場合、コントラクト全体の有効な <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> は <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-265">If the binding does not support security (such as <xref:System.ServiceModel.BasicHttpBinding>), the effective <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> is <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> for the whole contract.</span></span> <span data-ttu-id="8bae2-266">したがって、コントラクトで <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> を指定している場合でも、エンドポイント バインドによってはクライアントが要求するメッセージ レベルまたはトランスポート レベルのセキュリティ保護が異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8bae2-266">The result is that depending upon the endpoint binding, clients can require different message or transport level security protection even when the contract specifies <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bae2-267">値が、<see cref="T:System.Net.Security.ProtectionLevel" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="8bae2-267">The value is not one of the <see cref="T:System.Net.Security.ProtectionLevel" /> values.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReplyAction">
      <MemberSignature Language="C#" Value="public string ReplyAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ReplyAction" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.ReplyAction" />
      <MemberSignature Language="VB.NET" Value="Public Property ReplyAction As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ReplyAction { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ReplyAction : string with get, set" Usage="System.ServiceModel.OperationContractAttribute.ReplyAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bae2-268">操作の応答メッセージの SOAP アクションの値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-268">Gets or sets the value of the SOAP action for the reply message of the operation.</span></span></summary>
        <value><span data-ttu-id="8bae2-269">応答メッセージの SOAP アクションの値。</span><span class="sxs-lookup"><span data-stu-id="8bae2-269">The value of the SOAP action for the reply message.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bae2-270">応答メッセージのアクション ヘッダーには、値のほかに文字列 "\*" (アスタリスク) を指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="8bae2-270">In addition to specifying a particular value for the action header of the reply message, you can also specify the string "\*" (an asterisk).</span></span> <span data-ttu-id="8bae2-271">サービスでアスタリスクを指定すると、メッセージに応答アクションを追加しないよう WCF に指示します。これは、メッセージに対して直接プログラミングを行う場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-271">Specifying an asterisk in the service instructs WCF not to add a reply action to the message, which is useful if you are programming against messages directly.</span></span> <span data-ttu-id="8bae2-272">クライアントアプリケーションでアスタリスクを指定すると、応答アクションを検証しないよう WCF に指示します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-272">Specifying an asterisk in a client application instructs WCF not to validate the reply action.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bae2-273"><xref:System.ServiceModel.OperationContractAttribute.Action%2A> プロパティと <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> プロパティを使用して、入力メッセージと出力 (または応答) メッセージの両方の SOAP アクションを明示的に制御するサービスを、次の例に示します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-273">The following example is a service that uses the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> and <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> properties to explicitly control the SOAP actions of both the input and output (or reply) messages.</span></span> <span data-ttu-id="8bae2-274">ここでは、<xref:System.ServiceModel.OperationContractAttribute.Name%2A> プロパティを使用して、メタデータ内に公開される操作の名前も宣言します。</span><span class="sxs-lookup"><span data-stu-id="8bae2-274">It also uses the <xref:System.ServiceModel.OperationContractAttribute.Name%2A> property to declare the name of the operation as exposed in metadata.</span></span>  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bae2-275"><see cref="P:System.ServiceModel.OperationContractAttribute.ReplyAction" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8bae2-275"><see cref="P:System.ServiceModel.OperationContractAttribute.ReplyAction" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
