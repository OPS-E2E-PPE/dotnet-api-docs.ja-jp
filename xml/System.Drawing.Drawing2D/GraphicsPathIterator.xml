<Type Name="GraphicsPathIterator" FullName="System.Drawing.Drawing2D.GraphicsPathIterator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dd4d4de99d3d7a2034e37fa2897d597dda9738fe" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75136249" /></Metadata><TypeSignature Language="C#" Value="public sealed class GraphicsPathIterator : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit GraphicsPathIterator extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class GraphicsPathIterator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class GraphicsPathIterator sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type GraphicsPathIterator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 内のサブパスを反復処理し、各サブパスに含まれている図形の種類を調べることができるようにします。 このクラスは継承できません。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphicsPathIterator (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GraphicsPathIterator(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.GraphicsPathIterator : System.Drawing.Drawing2D.GraphicsPath -&gt; System.Drawing.Drawing2D.GraphicsPathIterator" Usage="new System.Drawing.Drawing2D.GraphicsPathIterator path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">このヘルパー クラスを初期化する対象となる <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> オブジェクト。</param>
        <summary><see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> オブジェクトを指定して、<see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyData">
      <MemberSignature Language="C#" Value="public int CopyData (ref System.Drawing.PointF[] points, ref byte[] types, int startIndex, int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CopyData(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types, int32 startIndex, int32 endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyData (ByRef points As PointF(), ByRef types As Byte(), startIndex As Integer, endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CopyData(cli::array &lt;System::Drawing::PointF&gt; ^ % points, cli::array &lt;System::Byte&gt; ^ % types, int startIndex, int endIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyData : PointF[] * Byte[] * int * int -&gt; int" Usage="graphicsPathIterator.CopyData (points, types, startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]" RefType="ref" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="points">戻り時には、パス内の点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列が格納されます。</param>
        <param name="types">戻り時には、パス内の点の種類を表すバイトの配列が格納されます。</param>
        <param name="startIndex">配列の開始インデックスを指定します。</param>
        <param name="endIndex">配列の終了インデックスを指定します。</param>
        <summary><see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> に関連付けられている <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> プロパティ配列および <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> プロパティ配列を、指定された 2 つの配列にコピーします。</summary>
        <returns>コピーする点の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `startIndex` パラメーターと `endIndex` パラメーターを使用して、指定されたパスデータの範囲をコピーします。  
  
   
  
## Examples  
 次の例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Form.OnPaint%2A> イベントオブジェクト <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   グラフィックスパスを作成します。  
  
-   複数のプリミティブといくつかのマーカーを設定します。  
  
-   画面の左側にパスデータが一覧表示されます。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> を作成し、巻き戻します。  
  
-   パスデータインデックスを2番目のマーカーにインクリメントします。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData%2A> メソッドを呼び出して、開始インデックスと終了インデックスの間に格納されているパスデータを、points および types 配列にコピーします。  
  
-   このコピーされたデータを画面の右側に一覧表示します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Drawing.Drawing2D.GraphicsPathIterator.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パス内の点の数を取得します。</summary>
        <value>パス内の点の数。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="graphicsPathIterator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> オブジェクトによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Dispose` を呼び出すと、この <xref:System.Drawing.Drawing2D.GraphicsPathIterator> オブジェクトで使用されるリソースを他の目的で再割り当てできます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public int Enumerate (ref System.Drawing.PointF[] points, ref byte[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Enumerate(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Enumerate (ByRef points As PointF(), ByRef types As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Enumerate(cli::array &lt;System::Drawing::PointF&gt; ^ % points, cli::array &lt;System::Byte&gt; ^ % types);" />
      <MemberSignature Language="F#" Value="member this.Enumerate : PointF[] * Byte[] -&gt; int" Usage="graphicsPathIterator.Enumerate (points, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="points">戻り時には、パス内の点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列が格納されます。</param>
        <param name="types">戻り時には、パス内の点の種類を表すバイトの配列が格納されます。</param>
        <summary><see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> に関連付けられている <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> プロパティ配列および <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> プロパティ配列を、指定された 2 つの配列にコピーします。</summary>
        <returns>コピーする点の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Form.OnPaint%2A> イベントオブジェクト <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   グラフィックスパスを作成します。  
  
-   複数のプリミティブといくつかのマーカーを設定します。  
  
-   画面の左側にパスデータが一覧表示されます。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> を作成し、巻き戻します。  
  
-   パスデータインデックスを2番目のマーカーにインクリメントします。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate%2A> メソッドを呼び出して、パスデータを `points` 配列および `types` 配列にコピーします。  
  
-   このコピーされたデータを画面の右側に一覧表示します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#2)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~GraphicsPathIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!GraphicsPathIterator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="graphicsPathIterator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCurve">
      <MemberSignature Language="C#" Value="public bool HasCurve ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasCurve() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve" />
      <MemberSignature Language="VB.NET" Value="Public Function HasCurve () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasCurve();" />
      <MemberSignature Language="F#" Value="member this.HasCurve : unit -&gt; bool" Usage="graphicsPathIterator.HasCurve " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> に関連付けられているパスに曲線が含まれているかどうかを示します。</summary>
        <returns>このメソッドは、現在のサブパスに曲線が含まれている場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パス内のすべての曲線は、ベジエスプラインのシーケンスとして格納されます。 たとえば、楕円をパスに追加する場合は、左上隅、幅、楕円の外接する四角形の高さを指定します。 これらの数値 (左上隅、幅、および高さ) は、パスには格納されません。instead楕円は、4つのベジエスプラインのシーケンスに変換されます。 パスには、これらのベジエスプラインのエンドポイントと制御ポイントが格納されます。  
  
 パスには、データポイントの配列が格納されます。各データポイントは、直線またはベジエスプラインに属します。 配列内の一部のポイントがベジエスプラインに属している場合、<xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> は `true`を返します。 配列内のすべてのポイントが行に属している場合、<xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> は `false`を返します。  
  
 特定のメソッドはパスを平坦化します。つまり、パス内のすべての曲線が線のシーケンスに変換されます。 パスがフラット化された後、<xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> は常に `false`を返します。 <xref:System.Drawing.Drawing2D.GraphicsPath> クラスの <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>、<xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>、または <xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A> メソッドを呼び出すと、パスがフラット化されます。  
  
   
  
## Examples  
 次の例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Form.OnPaint%2A> イベントオブジェクト <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   `myPath`<xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクトを作成します。  
  
-   3本の線、四角形、および楕円を追加します。  
  
-   `myPath`の <xref:System.Drawing.Drawing2D.GraphicsPathIterator> オブジェクトを作成します。  
  
-   現在のパス `myPath` に曲線が含まれているかどうかをテストします。  
  
-   テストの結果をメッセージボックスに表示します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#3)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NextMarker">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>反復子をパス内の次のマーカーに移動します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMarker (path As GraphicsPath) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextMarker(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.NextMarker : System.Drawing.Drawing2D.GraphicsPath -&gt; int" Usage="graphicsPathIterator.NextMarker path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">点のコピー先の <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> オブジェクト。</param>
        <summary><see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> オブジェクトには、<see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> オブジェクトが関連付けられています。 <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" /> メソッドは、関連付けられている <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> のパス内の次のマーカーを指すように反復子をインクリメントし、現在のマーカーと次のマーカー (またはパスの終点) の間に含まれているすべての点を、パラメーターに渡された 2 番目の <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> オブジェクトにコピーします。</summary>
        <returns>現在のマーカーと次のマーカーの間にある点の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パスにマーカーを設定するには、<xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> メソッドを使用します。 マーカーは、サブパスのグループを作成するために使用されます。 2つのマーカーの間には、1つまたは複数のサブパスを指定できます。  
  
   
  
## Examples  
 次の例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Form.OnPaint%2A> イベントオブジェクト <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクトを作成します。  
  
-   3本の線、四角形、楕円、および2つのマーカーを追加します。  
  
-   画面の左側にあるパスのすべてのポイントの値が一覧表示されます。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> オブジェクトを作成します。  
  
-   コピーされたポイントを受け取る <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクト `myPathSection`を作成します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> メソッドを呼び出します。このメソッドは、最初のマーカーに反復処理し、そのマーカーの間に含まれるすべての点と、`myPathSection`の次の位置をコピーします。  
  
-   `markerPoints`にコピーされた点の数を返します。  
  
-   マーカー番号 (最初のマーカー) と画面の右側に表示されるポイント数を一覧表示します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#4)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker([out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMarker (ByRef startIndex As Integer, ByRef endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextMarker([Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex);" />
      <MemberSignature Language="F#" Value="member this.NextMarker : int * int -&gt; int" Usage="graphicsPathIterator.NextMarker (startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">[出力] このパラメーターに渡される整数参照が、サブパスの開始点のインデックスを受け取ります。</param>
        <param name="endIndex">[出力] このパラメーターに渡される整数参照が、<paramref name="startIndex" /> が指すサブパスの終了点のインデックスを受け取ります。</param>
        <summary><see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> をインクリメントしてパス内の次のマーカーに進め、[out] パラメーターを使用して開始インデックスと終了インデックスを返します。</summary>
        <returns>現在のマーカーと次のマーカーの間にある点の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パスにマーカーを設定するには、<xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> メソッドを使用します。 マーカーは、サブパスのグループを作成するために使用されます。 2つのマーカーの間には、1つまたは複数のサブパスを指定できます。  
  
   
  
## Examples  
 次の例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Form.OnPaint%2A> イベントオブジェクト <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクトを作成します。  
  
-   3本の線、四角形、およびそれぞれの間にマーカーがある楕円3/4 を追加します。  
  
-   ポイントの配列の値を画面に描画します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> オブジェクトを作成します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> メソッドを呼び出します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> の反復呼び出しから返された値を使用して、各マーカーの開始点と終了点を画面に描画します。  
  
-   ポイントの合計数の値を画面に描画します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#5)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextPathType">
      <MemberSignature Language="C#" Value="public int NextPathType (out byte pathType, out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextPathType([out] unsigned int8&amp; pathType, [out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextPathType (ByRef pathType As Byte, ByRef startIndex As Integer, ByRef endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextPathType([Runtime::InteropServices::Out] System::Byte % pathType, [Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex);" />
      <MemberSignature Language="F#" Value="member this.NextPathType : byte * int * int -&gt; int" Usage="graphicsPathIterator.NextPathType (pathType, startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pathType" Type="System.Byte" RefType="out" />
        <Parameter Name="startIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pathType">[出力] グループのすべてのポイントで共有されるポイント タイプを受け取ります。 返される可能性があるタイプは、<see cref="T:System.Drawing.Drawing2D.PathPointType" /> 列挙体から取得できます。</param>
        <param name="startIndex">[出力] ポイント グループの開始インデックスを受け取ります。</param>
        <param name="endIndex">[出力] ポイント グループの終了インデックスを受け取ります。</param>
        <summary>すべてが同じ種類のデータ点から成る次のグループの開始インデックスと終了インデックスを取得します。</summary>
        <returns>このメソッドは、グループ内のデータ点の数を返します。 パスにそれ以上グループがない場合は、0 を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Form.OnPaint%2A> イベントオブジェクト <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクトを作成します。  
  
-   3本の線、四角形、および楕円を追加します。  
  
-   画面の左側にあるすべてのポイントの値が一覧表示されます。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> を作成し、巻き戻します。  
  
-   `for` ループでは、<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> メソッドと <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> メソッドを使用して、ポイントを反復処理します。  
  
-   反復呼び出しから返された値を使用して、サブパス番号、その中のポイント数、およびパスの種類を画面の右側に示します。  
  
-   画面上のポイントの合計数の値が表示されます。  
  
 `ListPathPoints` は、表示コードのほとんど (すべてではない) をグラフィックスパスコードから分離するヘルパー関数です。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#6)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NextSubpath">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 内の現在のサブパスから次のサブパスに移動します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (System.Drawing.Drawing2D.GraphicsPath path, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath(class System.Drawing.Drawing2D.GraphicsPath path, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSubpath (path As GraphicsPath, ByRef isClosed As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextSubpath(System::Drawing::Drawing2D::GraphicsPath ^ path, [Runtime::InteropServices::Out] bool % isClosed);" />
      <MemberSignature Language="F#" Value="member this.NextSubpath : System.Drawing.Drawing2D.GraphicsPath * bool -&gt; int" Usage="graphicsPathIterator.NextSubpath (path, isClosed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="isClosed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="path">保持するデータ点が、反復子で取得した図形 (サブパス) のデータ点と一致するように設定されている <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</param>
        <param name="isClosed">[出力] 現在のサブパスが閉じられているかどうかを示します。 図形が閉じられている場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</param>
        <summary>この <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> の関連付けられているパスから、次の図形 (サブパス) を取得します。</summary>
        <returns>取得した図形 (サブパス) 内のデータ点の数。 それ以上図形がない場合は、0 を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Form.OnPaint%2A> イベントオブジェクト <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクトを作成します。  
  
-   3本の線、四角形、楕円、および2つのマーカーを追加します。  
  
-   画面の左側にあるパスのすべてのポイントの値が一覧表示されます。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> オブジェクトを作成します。  
  
-   コピーされたポイントを受け取る <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクト `myPathSection`を作成します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> メソッドを呼び出します。このメソッドは、3番目のサブパス (図) に反復処理を行い、そのサブパスに含まれるすべての点を `myPathSection` パスにコピーします。また、`subpathPoints`にコピーされた点の数を返します。  
  
-   サブパスの数と、それに含まれるポイントの数が画面の右側に表示されます。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#7)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (out int startIndex, out int endIndex, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath([out] int32&amp; startIndex, [out] int32&amp; endIndex, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSubpath (ByRef startIndex As Integer, ByRef endIndex As Integer, ByRef isClosed As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextSubpath([Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex, [Runtime::InteropServices::Out] bool % isClosed);" />
      <MemberSignature Language="F#" Value="member this.NextSubpath : int * int * bool -&gt; int" Usage="graphicsPathIterator.NextSubpath (startIndex, endIndex, isClosed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="isClosed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">[出力] 次のサブパスの開始インデックスを受け取ります。</param>
        <param name="endIndex">[出力] 次のサブパスの終了インデックスを受け取ります。</param>
        <param name="isClosed">[出力] サブパスが閉じられているかどうかを示します。</param>
        <summary><see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> をパス内の次のサブパスに移動します。 次のサブパスの開始インデックスおよび終了インデックスが、[out] パラメーターに格納されます。</summary>
        <returns><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> オブジェクト内のサブパスの数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Form.OnPaint%2A> イベントオブジェクト <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクトを作成します。  
  
-   3本の線、四角形、および楕円を追加します。  
  
-   ポイントの配列の値を画面に描画します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> オブジェクトを作成します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> メソッドを呼び出します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> の反復呼び出しから返された値を使用して、各サブパスの開始値と停止値を画面に描画します。  
  
-   サブパスの合計数の値を画面に描画します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#8)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rewind">
      <MemberSignature Language="C#" Value="public void Rewind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rewind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rewind ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rewind();" />
      <MemberSignature Language="F#" Value="member this.Rewind : unit -&gt; unit" Usage="graphicsPathIterator.Rewind " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> が指す位置を、関連付けられているパスの先頭に戻します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 反復子の <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> メソッドを初めて呼び出すときは、その反復子の関連付けられたパスの最初の図形 (サブパス) が取得されます。 2回目は、2番目の図形を取得します。 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A> メソッドを呼び出すと、シーケンスが開始されます。つまり、<xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A>を呼び出した後、次に <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> を呼び出すと、パスの最初の図形が取得されます。 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> メソッドと <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> メソッドも同様に動作します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubpathCount">
      <MemberSignature Language="C#" Value="public int SubpathCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SubpathCount" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SubpathCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SubpathCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.SubpathCount : int" Usage="System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パス内のサブパスの数を取得します。</summary>
        <value>パス内のサブパスの数。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
