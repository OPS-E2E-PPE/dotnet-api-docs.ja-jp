<Type Name="ClaimsPrincipalPermission" FullName="System.IdentityModel.Services.ClaimsPrincipalPermission">
  <Metadata><Meta Name="ms.openlocfilehash" Value="55b3e199b705e3ed2b6c70d760bb9c8ffb50e260" /><Meta Name="ms.sourcegitcommit" Value="8dc7427b3f8ede13c290b671feeb1dc33978e582" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/06/2020" /><Meta Name="ms.locfileid" Value="77044275" /></Metadata><TypeSignature Language="C#" Value="public sealed class ClaimsPrincipalPermission : System.Security.IPermission, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ClaimsPrincipalPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClaimsPrincipalPermission&#xA;Implements IPermission, IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsPrincipalPermission sealed : System::Security::IPermission, System::Security::Permissions::IUnrestrictedPermission" />
  <TypeSignature Language="F#" Value="type ClaimsPrincipalPermission = class&#xA;    interface IPermission&#xA;    interface ISecurityEncodable&#xA;    interface IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>リソースへのアクセスがアクティブなプリンシパルに許可されているかどうかを判断する <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> の実装を使用する権限を表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> クラスは、アプリケーション用に構成された <xref:System.Security.Claims.ClaimsAuthorizationManager> を使用して、強制的なアクセスチェックを実行する機能を提供します。 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> メソッドまたは静的な <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> メソッドを呼び出すことにより、要求認証マネージャーに定義されている承認ポリシーに従って、コードの実行パス内からリソースを保護することができます。 宣言型アクセスのチェックは、<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> クラスを使用して実行できます。  
  
> [!IMPORTANT]
>  <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> クラスは、<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> プロパティの下に設定されている <xref:System.IdentityModel.Configuration.IdentityConfiguration> によって構成された要求承認マネージャーを使用します。 これは、WS-FEDERATION が使用されていない場合でも、すべての場合に当てはまります。たとえば、アクティブな (WCF) Web アプリケーションやコンソールアプリケーションなどです。 要求承認マネージャーは、構成またはプログラムによって指定できます。 要求承認マネージャーを構成ファイルで指定するには、 [&lt;ユーザー構成&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)要素の下に[&lt;claimsAuthorizationManager&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)要素を設定し、この id 構成がランタイムによって読み込まれる[&lt;federationConfiguration&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md)要素 (たとえば、`identityConfigurationName` 属性を設定するなど) によって参照されていることを確認します。 要求承認マネージャーをプログラムによって設定するには、<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType> イベントのハンドラーを指定します。  
  
 1つのレベルでは、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission> によって提供される機能は、<xref:System.Security.Permissions.PrincipalPermission> クラスによって提供されるロールベースのアクセスチェック (RBAC) に似ています。ただし、<xref:System.Security.Claims.ClaimsAuthorizationManager> クラスは、アクティブなプリンシパルによって提示された要求に基づいてチェックを実行します。 これにより、純粋な RBAC を通じて使用できるよりもはるかに粒度が高くなります。多くのアクセス許可は通常1つのロールで収集されます。 多くの場合、要求ベースの承認では、ビジネスロジックと承認ポリシーを分離することができます。これは、コード内のリソースに対する特定のアクションに対してアクセス許可を要求でき、バックエンドポリシーを使用して、提示するエンティティは、要求を満たすために保持されている必要があります。 RBAC と同様、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission> はユーザーベースのアクセスチェックを実行します。つまり、<xref:System.Security.CodeAccessPermission> クラスから派生したクラスによって実装されるコードアクセスセキュリティとは異なり、スタックウォークを使用して、コードのすべての呼び出し元にアクセス <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 許可が付与されていることを確認するために、現在のプリンシパルでのみチェックを実行します。  
  
 静的 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> メソッドは、指定されたリソースに対する指定されたアクションのアクセスを確認します。 リソースとアクションは両方とも文字列であり、通常は Uri です。 また、アクションとリソースを使用して <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> のインスタンスを初期化し、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> メソッドを呼び出すこともできます。 コンストラクターは1つのリソースとアクションのみを使用しますが、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission> オブジェクトは、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> メソッドと <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> メソッドを使用して組み合わせることができます。 これらのメソッドを使用して作成されたアクセス許可には、複数のリソースアクションのペアを含めることができます。  
  
 どちらの方法でも、構成された要求承認マネージャーの <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> メソッドを、アクティブなプリンシパル (<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>)、リソース、およびアクションから構成される <xref:System.Security.Claims.AuthorizationContext> で呼び出すことによって、アクセスを決定します。 現在のプリンシパルがリソースに対するアクションの実行を承認されていない場合は、<xref:System.Security.SecurityException> をスローします。それ以外の場合は、実行が続行します。  
  
 複数のリソースアクションのペアを含む <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> の場合、アクセス許可に含まれているリソースとアクションの各ペアに対して <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> メソッドが呼び出されます。  <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> の呼び出しを成功させるには、アクセス許可に含まれるすべてのリソースアクションのペアに対してアクティブなプリンシパルが承認されている必要があります。  
  
   
  
## Examples  
 次の例は、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> メソッド、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> メソッド、または <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> 宣言を使用して、リソースを保護する方法を示しています。 どちらの場合も、構成された <xref:System.Security.Claims.ClaimsAuthorizationManager> は、指定されたリソースとアクションに対して現在のプリンシパルを評価するために呼び出されます。 現在のプリンシパルが、指定されたリソースに対する指定されたアクションに対して承認されていない場合、<xref:System.Security.SecurityException> がスローされます。それ以外の場合は、実行が続行します。  
  
 [!code-csharp[WifCppWithCam#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#1)]  
  
 次の XML は、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission> クラスでカスタムクレーム承認マネージャーを使用するために必要な最小構成を示しています。 少なくとも、`<configSection>` 要素の `system.identityModel` と `system.identityModel.services` の両方のセクションを宣言し、次に、既定の id 構成の下にある[&lt;の claimsAuthorizationManager&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)要素で承認マネージャーを指定する必要があります。 これにより、承認マネージャーが既定のフェデレーション構成から参照されるようになります。 また、 [&lt;federationConfiguration&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md)要素の `identityConfigurationName` 属性で、承認マネージャーが指定されている id 構成の名前を指定することもできます。  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>  
<configuration>  
  <configSections>  
    <!-- WIF configuration sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    <section name="system.identityModel.services" type="System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
  </configSections>  
  
  <startup>  
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />  
  </startup>  
  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type ="MyClaimsAuthorizationManager.MyClaimsAuthorizationManager, MyClaimsAuthorizationManager"/>  
    </identityConfiguration>  
  </system.identityModel>  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute" />
    <altmember cref="P:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration" />
    <altmember cref="T:System.Security.Claims.ClaimsAuthorizationManager" />
    <related type="Article" href="~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md">&lt;federationConfiguration&gt;</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsPrincipalPermission (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsPrincipalPermission(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Services.ClaimsPrincipalPermission : string * string -&gt; System.IdentityModel.Services.ClaimsPrincipalPermission" Usage="new System.IdentityModel.Services.ClaimsPrincipalPermission (resource, action)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">プリンシパルを承認する対象のリソース。</param>
        <param name="action">プリンシパルを承認する対象のアクション。</param>
        <summary><see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> クラスの新しいインスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> オブジェクトは、指定されたリソースとアクションのペアで初期化されます。 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> メソッドを呼び出して、アクセスチェックを実行できます。  
  
 コンストラクターは1つのリソースとアクションのみを使用しますが、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission> オブジェクトは、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> メソッドと <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> メソッドを使用して組み合わせることができます。 これらのメソッドを使用して作成されるアクセス許可には、複数のリソースアクションのペアを含めることができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="resource" /> は <see langword="null" /> または空の文字列です。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="action" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public static void CheckAccess (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckAccess(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CheckAccess (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CheckAccess(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="static member CheckAccess : string * string -&gt; unit" Usage="System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess (resource, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">プリンシパルを承認する対象のリソース。</param>
        <param name="action">プリンシパルを承認する対象のアクション。</param>
        <summary>指定したリソースの指定したアクションを実行する権限が現在のプリンシパルにあるかどうかを確認します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定されたリソースに対する指定されたアクションに対してプリンシパルが承認されているか、<xref:System.Security.SecurityException> 例外がスローされている必要があります。  
  
 構成された要求承認マネージャーの <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> メソッドは、アクティブなプリンシパル (<xref:System.Threading.Thread.CurrentPrincipal%2A>)、リソース、およびアクションで構成される <xref:System.Security.Claims.AuthorizationContext> で呼び出されます。  
  
   
  
## Examples  
 次の例は、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> メソッドを使用してリソースを保護する方法を示しています。 構成された要求承認マネージャーは、指定されたリソースとアクションに対して現在のプリンシパルを評価するために呼び出されます。 現在のプリンシパルが、指定されたリソースに対する指定されたアクションに対して承認されていない場合、<xref:System.Security.SecurityException> がスローされます。それ以外の場合は、実行が続行します。  
  
 [!code-csharp[WifCppWithCam#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在のプリンシパルは <see cref="T:System.Security.Claims.ClaimsPrincipal" /> から割り当てることはできません。  
  
または 
<see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> が構成されていません。</exception>
        <exception cref="T:System.Security.SecurityException">失敗した承認チェック。</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="abstract member Copy : unit -&gt; System.Security.IPermission&#xA;override this.Copy : unit -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Copy " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Copy</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> インスタンスのコピーを返します。</summary>
        <returns>現在のインスタンスからコピーされた <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit&#xA;override this.Demand : unit -&gt; unit" Usage="claimsPrincipalPermission.Demand " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のインスタンスに関連付けられているリソースとアクションのペアに対して現在のプリンシパルが承認されるかどうかを確認します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のプリンシパルは、このインスタンスに関連付けられているすべてのリソースアクションのペアに対して承認されている必要があります。または、<xref:System.Security.SecurityException> 例外がスローされます。  
  
 コンストラクターは1つのリソースとアクションのみを使用しますが、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission> オブジェクトは、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> メソッドと <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> メソッドを使用して組み合わせることができます。 これらのメソッドを使用して作成されるアクセス許可には、複数のリソースアクションのペアを含めることができます。  
  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> メソッドは、構成された要求承認マネージャーの <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> メソッドを、アクティブなプリンシパル (<xref:System.Threading.Thread.CurrentPrincipal%2A>)、リソース、およびアクセス許可に含まれる各リソースとアクションのペアのアクションで構成される <xref:System.Security.Claims.AuthorizationContext> と共に呼び出します。 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> を成功させるには、アクセス許可に含まれているすべてのリソースとアクションのペアに対してアクティブなプリンシパルを承認する必要があります。  
  
   
  
## Examples  
 次の例は、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> メソッドを使用してリソースを保護する方法を示しています。 構成された要求承認マネージャーは、指定されたリソースとアクションに対して現在のプリンシパルを評価するために呼び出されます。 現在のプリンシパルが、指定されたリソースに対する指定されたアクションに対して承認されていない場合、<xref:System.Security.SecurityException> がスローされます。それ以外の場合は、実行が続行します。  
  
 [!code-csharp[WifCppWithCam#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在のプリンシパルは <see cref="T:System.Security.Claims.ClaimsPrincipal" /> から割り当てることはできません。  
  
または 
<see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> が構成されていません。</exception>
        <exception cref="T:System.Security.SecurityException">失敗した承認チェック。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public void FromXml (System.Security.SecurityElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXml (element As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void FromXml(System::Security::SecurityElement ^ element);" />
      <MemberSignature Language="F#" Value="abstract member FromXml : System.Security.SecurityElement -&gt; unit&#xA;override this.FromXml : System.Security.SecurityElement -&gt; unit" Usage="claimsPrincipalPermission.FromXml element" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="element">アクセス許可の再構築に使用する XML エンコード。</param>
        <summary>指定された XML エンコーディングから現在のアクセス許可と状態を再構築します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A> メソッドの呼び出しによって作成された XML エンコーディングからアクセス許可を再構築します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="element" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">エンコーディングに、認識されない要素または属性、あるいは不適切な形式の XML が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Intersect : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Intersect(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">現在のアクセス許可との積集合を持つアクセス許可。 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> のインスタンスである必要があります。</param>
        <summary>現在のアクセス許可と指定したアクセス許可を統合 (論理積) して 1 つの新しいアクセス許可を返します。</summary>
        <returns>現在のアクセス許可と指定したアクセス許可の積集合を表す新しい <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。または、<see langword="null" /> が <paramref name="target" /> であるか、<paramref name="null" /> のインスタンスではない場合は <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返されるアクセス許可には、現在のアクセス許可と指定したアクセス許可の両方に存在していたリソースとアクションのペアだけが含まれます。 1つまたは複数のアクセス許可に存在するリソースアクションのペアは含まれません。 新しいアクセス許可で <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> を成功させるには、現在のプリンシパルが、現在のアクセス許可と指定したアクセス許可に共通のリソースとアクションのペアに対してのみ承認されている必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : System.Security.IPermission -&gt; bool&#xA;override this.IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="claimsPrincipalPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">サブセットの関係を調べる対象のアクセス許可。 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> のインスタンスである必要があります。</param>
        <summary>現在のアクセス許可が、指定したアクセス許可のサブセットであるかどうかを示す値を返します。</summary>
        <returns>現在のアクセス許可が、指定したアクセス許可のサブセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のアクセス許可に含まれるすべてのリソースアクションのペアが、指定されたアクセス許可にも存在する場合、現在のアクセス許可は、指定されたアクセス許可のサブセットになります。 `target` が `null` 場合、または <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>のインスタンスでない場合、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A> は `false`を返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberSignature Language="F#" Value="abstract member IsUnrestricted : unit -&gt; bool&#xA;override this.IsUnrestricted : unit -&gt; bool" Usage="claimsPrincipalPermission.IsUnrestricted " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.Permissions.IUnrestrictedPermission.IsUnrestricted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アクセス許可が無制限かどうかを示す値を返します。</summary>
        <returns>アクセス許可が無制限である場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 アクセス許可が制限されていることを示す <see langword="true" /> を常に返します。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="abstract member ToXml : unit -&gt; System.Security.SecurityElement&#xA;override this.ToXml : unit -&gt; System.Security.SecurityElement" Usage="claimsPrincipalPermission.ToXml " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.ToXml</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のアクセス許可とその状態の XML にエンコードされたフォームを返します。</summary>
        <returns>現在のアクセス許可とその状態の XML にエンコードされたフォーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプリンシパルは、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A> メソッドを呼び出すことによって、XML でエンコードされた形式から再構築できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Union : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Union target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Union(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">現在のアクセス許可と和集合を持つアクセス許可。 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 型でなければなりません。</param>
        <summary>現在のアクセス許可と指定したアクセス許可を統合 (和集合) して 1 つの新しいアクセス許可を返します。 現在のインスタンスとターゲット インスタンスにあるリソース操作のペアすべてがある <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> のオブジェクト。</summary>
        <returns>現在のアクセス許可と指定したアクセス許可の和集合を表す新しい <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。または、<see langword="null" /> が <paramref name="target" /> であるか、<paramref name="null" /> のインスタンスではない場合は <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返されるアクセス許可には、現在のアクセス許可に存在するすべてのリソースとアクションのペアと、指定したアクセス許可を持つすべてのリソースとアクションのペアが含まれます。 新しいアクセス許可で <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> を成功させるには、現在のプリンシパルが、現在のアクセス許可に存在していたすべてのリソースとアクションのペアと、指定したアクセス許可に存在するすべてのリソースとアクションのペアに対して承認されている必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
