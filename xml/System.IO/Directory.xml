<Type Name="Directory" FullName="System.IO.Directory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9326efc090cc4b5e979d4f912c36735f65624c96" /><Meta Name="ms.sourcegitcommit" Value="f6fc130f7b9399b2b130a137d6b0b2b73c1d17b3" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/18/2019" /><Meta Name="ms.locfileid" Value="74153927" /></Metadata><TypeSignature Language="C#" Value="public static class Directory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Directory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Directory" />
  <TypeSignature Language="VB.NET" Value="Public Class Directory" />
  <TypeSignature Language="C++ CLI" Value="public ref class Directory abstract sealed" />
  <TypeSignature Language="F#" Value="type Directory = class" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ディレクトリやサブディレクトリを通じて、作成、移動、および列挙するための静的メソッドを公開します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ディレクトリのコピー、移動、名前の変更、作成、削除などの一般的な操作には、<xref:System.IO.Directory> クラスを使用します。  
  
-   ディレクトリを作成するには、<xref:System.IO.Directory.CreateDirectory%2A> の方法のいずれかを使用します。  
  
-   ディレクトリを削除するには、<xref:System.IO.Directory.Delete%2A> の方法のいずれかを使用します。  
  
-   アプリの現在のディレクトリを取得または設定するには、<xref:System.IO.Directory.GetCurrentDirectory%2A> または <xref:System.IO.Directory.SetCurrentDirectory%2A> メソッドを使用します。  
  
-   ディレクトリの作成、アクセス、および書き込みに関連する <xref:System.DateTime> 情報を操作するには、<xref:System.IO.Directory.SetLastAccessTime%2A> や <xref:System.IO.Directory.SetCreationTime%2A>などのメソッドを使用します。  
  
 <xref:System.IO.Directory> クラスの静的メソッドは、すべてのメソッドに対してセキュリティチェックを実行します。 オブジェクトを何度も再利用する場合は、セキュリティチェックが必ずしも必要ではないため、代わりに <xref:System.IO.DirectoryInfo> の対応するインスタンスメソッドを使用することを検討してください。  
  
 ディレクトリ関連のアクションを1つだけ実行する場合は、対応する <xref:System.IO.DirectoryInfo> インスタンスメソッドではなく、静的 <xref:System.IO.Directory> メソッドを使用する方が効率的な場合があります。 ほとんどの <xref:System.IO.Directory> メソッドには、操作するディレクトリへのパスが必要です。  
  
> [!NOTE]
>  文字列 `path` パラメーターを受け入れるメンバーでは、そのパスは適切な形式である必要があります。そうでない場合、例外が発生します。 たとえば、パスが完全修飾されていても、スペース ("c:\temp") で始まる場合、パス文字列は切り捨てられないため、パスの形式が正しくないと見なされ、例外が発生します。 さらに、パスまたはパスの組み合わせを2回完全に修飾することはできません。 たとえば、"c:\temp c:\windows" でも例外が発生します。 パス文字列を受け取るメソッドを使用する場合は、パスが適切な形式であることを確認します。 詳細については、「<xref:System.IO.Path>」を参照してください。  
  
 パスを受け入れるメンバーでは、ファイルまたはディレクトリを参照できます。 サーバーと共有名の完全なパス、相対パス、または汎用名前付け規則 (UNC) パスを使用できます。 たとえば、次のすべてが許容されるパスです。  
  
-   Visual Basic の "c:\\\MyDir C#"、または "c:\MyDir"。  
  
-   "の MyDir\\\MySubdir" C#、または Visual Basic の "MyDir\MySubDir"。  
  
-   "\\\\\\\ MyServer\\\MyShare" C#、または\\の "Visual Basic 「\myserver\myshare」"。  
  
 既定では、すべてのユーザーに対して、新しいディレクトリへの完全な読み取り/書き込みアクセス権が付与されます。 ただし、既存のディレクトリにアクセスするには、アプリに適切なセキュリティが必要です。  
  
 ディレクトリとそのすべてのサブディレクトリに対するアクセス許可を要求するには、パス文字列の末尾にディレクトリ区切り文字を指定します。 (たとえば、"C:\Temp\\" は C:\Temp\ とそのすべてのサブディレクトリへのアクセスを許可します)。特定のディレクトリに対してのみアクセス許可を要求するには、パス文字列をピリオドで終了します。 (たとえば、"C:\Temp\\" のようになります。 は、サブディレクトリではなく C:\Temp\\へのアクセスのみを許可します。  
  
 `searchPattern` パラメーターを受け取るメンバーでは、検索文字列は、リテラル文字と2つのワイルドカード文字の任意の組み合わせにすることができます。\* と?」を確認してください。 このパラメーターは正規表現を認識しません。 詳細については、<xref:System.IO.Directory.EnumerateDirectories%28System.String%2CSystem.String%29> メソッド、または `searchPattern` パラメーターを使用するその他の方法を参照してください。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
 <xref:System.IO.Directory> と <xref:System.IO.DirectoryInfo> は [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] アプリでの使用はサポートされていません。 [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] アプリのファイルとフォルダーにアクセスする方法の詳細については、「[データとファイルへのアクセス (Windows ストアアプリ)](https://msdn.microsoft.com/library/windows/apps/hh758319.aspx)」を参照してください。  
  
   
  
## Examples  
 次の例では、ディレクトリからすべてのテキストファイルを取得し、それらを新しいディレクトリに移動する方法を示します。 ファイルが移動されると、元のディレクトリには存在しなくなります。  
  
 [!code-csharp[System.IO.Directory#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class2.cs#10)]
 [!code-vb[System.IO.Directory#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class2.vb#10)]  
  
 次の例では、<xref:System.IO.Directory.EnumerateFiles%2A> メソッドを使用して、ディレクトリからテキストファイルのコレクションを取得し、そのコレクションをクエリで使用して、"Example" を含むすべての行を検索する方法を示します。  
  
 [!code-csharp[System.IO.Directory#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class3.cs#11)]
 [!code-vb[System.IO.Directory#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class3.vb#11)]  
  
 次の例では、ディレクトリとそのすべてのファイルを新しいディレクトリに移動する方法を示します。 移動後に元のディレクトリは存在しなくなりました。  
  
 [!code-csharp[System.IO.Directory#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class6.cs#14)]
 [!code-vb[System.IO.Directory#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class6.vb#14)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.DriveInfo" />
    <altmember cref="T:System.IO.File" />
    <altmember cref="T:System.IO.DirectoryInfo" />
    <altmember cref="T:System.IO.FileInfo" />
    <altmember cref="T:System.IO.FileSystemWatcher" />
    <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
    <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
    <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
    <related type="Article" href="~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md">方法 : 新しく作成されたデータ ファイルに対して読み書きする</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したパスにすべてのディレクトリを作成します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public static System.IO.DirectoryInfo CreateDirectory (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.DirectoryInfo CreateDirectory(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.CreateDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDirectory (path As String) As DirectoryInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::DirectoryInfo ^ CreateDirectory(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member CreateDirectory : string -&gt; System.IO.DirectoryInfo" Usage="System.IO.Directory.CreateDirectory path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">作成するディレクトリ。</param>
        <summary>既に存在している場合以外は、指定したパスにすべてのディレクトリとサブディレクトリを作成します。</summary>
        <returns>指定したパスに存在するディレクトリを表すオブジェクト。 指定したパスにおいてディレクトリが既に存在するかどうかにかかわりなく、このオブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` で指定されたすべてのディレクトリが作成されます。ただし、既に存在する場合、または `path` の一部が無効な場合を除きます。 ディレクトリが既に存在する場合、このメソッドは新しいディレクトリを作成しませんが、既存のディレクトリの <xref:System.IO.DirectoryInfo> オブジェクトを返します。  
  
 `path` パラメーターは、ファイルパスではなく、ディレクトリパスを指定します。  
  
 末尾のスペースは、ディレクトリを作成する前に `path` パラメーターの末尾から削除されます。  
  
 書き込みアクセス権を持つ共有上に、リモートコンピューター上にディレクトリを作成できます。 UNC パスがサポートされています。たとえば、`path`については、Visual Basic で `\\2009\Archives\December` と `\\\\2009\\Archives\\December` を指定できC#ます。  
  
 コロン文字のみを含むディレクトリを作成する (:)はサポートされていないため、`NotSupportedException` がスローされます。  
  
   
  
## Examples  
 次の例では、指定されたディレクトリを作成して削除します。  
  
 [!code-cpp[Dir_CreateDir#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_CreateDir/CPP/dir_createdir.cpp#1)]
 [!code-csharp[Dir_CreateDir#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_CreateDir/CS/dir_createdir.cs#1)]
 [!code-vb[Dir_CreateDir#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_CreateDir/VB/dir_createdir.vb#1)]  
  
 現在のディレクトリが/Home/user1 の場合にディレクトリ C:\Users\User1\Public\Html を作成するには、次のいずれかの呼び出しを使用して、円記号が正しく解釈されるようにします。  
  
 Visual Basic:  
  
```  
Directory.CreateDirectory("Public\Html")   
    Directory.CreateDirectory("\Users\User1\Public\Html")   
    Directory.CreateDirectory("c:\Users\User1\Public\Html")  
```  
  
 C# の場合:  
  
```  
Directory.CreateDirectory("Public\\Html");  
    Directory.CreateDirectory("\\Users\\User1\\Public\\Html");  
    Directory.CreateDirectory("c:\\Users\\User1\\Public\\Html");  
```  
  
 C++:  
  
```  
Directory::CreateDirectory("Public\\Html");  
    Directory::CreateDirectory("\\Users\\User1\\Public\\Html");  
    Directory::CreateDirectory("c:\\Users\\User1\\Public\\Html");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> によって指定されたディレクトリはファイルです。  
  
または 
ネットワーク名が不明です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
または 
 <paramref name="path" /> のプレフィックスまたは内容がコロン文字 (:) だけです。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="path" /> に、ドライブ ラベル ("C:\\") の一部ではないコロン文字 (:) が含まれています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルまたはディレクトリの読み取りと書き込みを行います。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.DirectoryInfo" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public static System.IO.DirectoryInfo CreateDirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.DirectoryInfo CreateDirectory(string path, class System.Security.AccessControl.DirectorySecurity directorySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::DirectoryInfo ^ CreateDirectory(System::String ^ path, System::Security::AccessControl::DirectorySecurity ^ directorySecurity);" />
      <MemberSignature Language="F#" Value="static member CreateDirectory : string * System.Security.AccessControl.DirectorySecurity -&gt; System.IO.DirectoryInfo" Usage="System.IO.Directory.CreateDirectory (path, directorySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="directorySecurity" Type="System.Security.AccessControl.DirectorySecurity" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">作成するディレクトリ。</param>
        <param name="directorySecurity">ディレクトリに適用するアクセス制御。</param>
        <summary>既に存在している場合以外は、指定したパスにすべてのディレクトリを作成し、指定した Windows セキュリティを適用します。</summary>
        <returns>指定したパスに存在するディレクトリを表すオブジェクト。 指定したパスにおいてディレクトリが既に存在するかどうかにかかわりなく、このオブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドオーバーロードを使用してアクセス制御を持つディレクトリを作成するため、セキュリティが適用される前にディレクトリにアクセスできる可能性はありません。  
  
 `path` パラメーターに指定されているすべてのディレクトリが作成されます。ただし、既に存在する場合、または `path` の一部が無効な場合を除きます。 `path` パラメーターは、ファイルパスではなく、ディレクトリパスを指定します。 ディレクトリが既に存在する場合、このメソッドは新しいディレクトリを作成しませんが、既存のディレクトリの <xref:System.IO.DirectoryInfo> オブジェクトを返します。  
  
 末尾のスペースは、ディレクトリを作成する前に `path` パラメーターの末尾から削除されます。  
  
 書き込みアクセス権を持つ共有上に、リモートコンピューター上にディレクトリを作成できます。 UNC パスがサポートされています。たとえば、`path`については、Visual Basic で `\\2009\Archives\December` と `\\\\2009\\Archives\\December` を指定できC#ます。  
  
 コロン文字のみを含むディレクトリを作成する (:)はサポートされていないため、`NotSupportedException` がスローされます。  
  
   
  
## Examples  
 次の例では、2つのユーザーアカウントのアクセス規則を持つ新しいディレクトリを作成します。  
  
 [!code-csharp[System.IO.Directory#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class7.cs#15)]
 [!code-vb[System.IO.Directory#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class7.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> によって指定されたディレクトリはファイルです。  
  
または 
ネットワーク名が不明です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
または 
 <paramref name="path" /> のプレフィックスまたは内容がコロン文字 (:) だけです。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="path" /> に、ドライブ ラベル ("C:\\") の一部ではないコロン文字 (:) が含まれています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとディレクトリの読み取りと書き込み、および宛先ディレクトリへのアクセスに使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> セキュリティアクション: <see cref="F:System.Security.Permissions.SecurityAction.Demand" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Delete">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたディレクトリとオプションでサブディレクトリを削除します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.Delete(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Delete (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Delete(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Delete : string -&gt; unit" Usage="System.IO.Directory.Delete path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">削除する空のディレクトリの名前。 このディレクトリは、書き込み可能で空である必要があります。</param>
        <summary>指定されたパスから空のディレクトリを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、2番目のパラメーターに指定された `false` と同じように動作し <xref:System.IO.Directory.Delete%28System.String%2CSystem.Boolean%29> します。  
  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 末尾のスペースは、ディレクトリを削除する前に `path` パラメーターの末尾から削除されます。  
  
 `path` パラメーターで指定されたディレクトリにファイルまたはサブディレクトリが含まれている場合、このメソッドは <xref:System.IO.IOException> をスローします。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 場合によっては、指定したディレクトリがエクスプローラーで開かれていると、<xref:System.IO.Directory.Delete%2A> 方法で削除できないことがあります。  
  
   
  
## Examples  
 次の例では、新しいディレクトリとサブディレクトリを作成し、そのサブディレクトリのみを削除する方法を示します。  
  
 [!code-csharp[System.IO.Directory.Delete#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.delete/cs/class1.cs#1)]
 [!code-vb[System.IO.Directory.Delete#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.delete/vb/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> で指定された同じ名前と場所を持つファイルが存在します。  
  
または 
ディレクトリはアプリケーションの現在の作業ディレクトリです。  
  
または 
<paramref name="path" /> によって指定されたディレクトリは空ではありません。  
  
または 
ディレクトリが読み取り専用になっているか、または読み取り専用のファイルが含まれています。  
  
または 
ディレクトリは別のプロセスによって使用されています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> が存在しないか、見つかりませんでした。  
  
または 
指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">指定されたディレクトリに書き込むための。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string path, bool recursive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string path, bool recursive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.Delete(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Delete (path As String, recursive As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Delete(System::String ^ path, bool recursive);" />
      <MemberSignature Language="F#" Value="static member Delete : string * bool -&gt; unit" Usage="System.IO.Directory.Delete (path, recursive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="recursive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">削除するディレクトリの名前。</param>
        <param name="recursive"><see langword="true" /> のディレクトリ、サブディレクトリ、およびファイルを削除する場合は <paramref name="path" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定したディレクトリと、特に指定されている場合はディレクトリ内の任意のサブディレクトリおよびファイルを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 末尾のスペースは、ディレクトリを削除する前に `path` パラメーターの末尾から削除されます。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 `recursive` パラメーターが `true`の場合、ユーザーは、現在のディレクトリとすべてのサブディレクトリに対する書き込みアクセス許可を持っている必要があります。  
  
 シンボリックリンクやマウントポイントなど、再解析ポイントを含むディレクトリを削除すると、この方法の動作が若干異なります。 再解析ポイントがマウントポイントなどのディレクトリの場合は、マウントが解除され、マウントポイントが削除されます。 このメソッドは、再解析ポイントを再帰しません。 再解析ポイントがファイルへのシンボリックリンクの場合、再解析ポイントは削除され、シンボリックリンクのターゲットではなくなります。  
  
 場合によっては、指定したディレクトリがエクスプローラーで開かれていると、<xref:System.IO.Directory.Delete%2A> 方法で削除できないことがあります。  
  
   
  
## Examples  
 次の例では、サブディレクトリに新しいディレクトリ、サブディレクトリ、およびファイルを作成し、すべての新しい項目を再帰的に削除する方法を示します。  
  
 [!code-csharp[System.IO.Directory.Delete#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.delete/cs/class2.cs#2)]
 [!code-vb[System.IO.Directory.Delete#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.delete/vb/class2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> で指定された同じ名前と場所を持つファイルが存在します。  
  
または 
<paramref name="path" /> で指定されたディレクトリが読み取り専用です。または、<paramref name="recursive" /> が <see langword="false" /> であり、<paramref name="path" /> は空のディレクトリではありません。  
  
または 
ディレクトリはアプリケーションの現在の作業ディレクトリです。  
  
または 
ディレクトリに読み取り専用のファイルが含まれています。  
  
または 
ディレクトリは別のプロセスによって使用されています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> が存在しないか、見つかりませんでした。  
  
または 
指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">指定されたディレクトリに書き込むための。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateDirectories">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された条件を満たすディレクトリの完全名から成る、列挙可能なコレクションを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateDirectories(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateDirectories(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateDirectories (path As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateDirectories(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member EnumerateDirectories : string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateDirectories path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <summary>指定されたパスに存在するディレクトリの完全名から成る、列挙可能なコレクションを返します。</summary>
        <returns><paramref name="path" /> で指定したディレクトリ内にあるディレクトリの完全名 (パスを含む) から成る列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` パラメーターで相対パスまたは絶対パスの情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。これは、<xref:System.IO.Directory.GetCurrentDirectory%2A> メソッドを使用して判断できます。 返されたディレクトリ名には、`path` パラメーターで指定した値がプレフィックスとして付けられます。 たとえば、`path` パラメーターで相対パスを指定した場合、返されるディレクトリ名には相対パスが含まれます。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A> メソッドと <xref:System.IO.Directory.GetDirectories%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateDirectories%2A>を使用すると、コレクション全体が返される前に、名前のコレクションの列挙を開始できます。<xref:System.IO.Directory.GetDirectories%2A>を使用するときは、配列にアクセスする前に、名前の配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateDirectories%2A> の方が効率的です。  
  
 返されたコレクションはキャッシュされません。コレクションの <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> を呼び出すたびに、新しい列挙が開始されます。  
  
   
  
## Examples  
 次の例では、指定されたパス内の最上位レベルのディレクトリを列挙します。  
  
 [!code-csharp[System.IO.EnumDirs1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.enumdirs1/cs/program.cs#1)]
 [!code-vb[System.IO.EnumDirs1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.enumdirs1/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字が使用されています。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateDirectories(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateDirectories(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateDirectories (path As String, searchPattern As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateDirectories(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member EnumerateDirectories : string * string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateDirectories (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern"><paramref name="path" /> 内のディレクトリの名前と照合する検索文字列。  このパラメーターには有効なリテラルのパスとワイルドカード (* と ?) 文字の組み合わせを含めることができますが、正規表現はサポートされていません。</param>
        <summary>指定されたパスから、検索パターンに一致するディレクトリの完全名から成る、列挙可能なコレクションを返します。</summary>
        <returns>指定した検索パターンに一致し、<paramref name="path" /> で指定したディレクトリの中にあるディレクトリの完全名 (パスを含む) から成る列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` には、リテラル文字とワイルドカード文字の組み合わせを使用できますが、正規表現はサポートされていません。 `searchPattern`では、次のワイルドカード指定子を使用できます。  
  
|ワイルドカード指定子|一致件数|  
|------------------------|-------------|  
|\* (アスタリスク)|その位置に0個以上の文字が含まれています。|  
|? (疑問符)|その位置に0個または1個の文字。|  
  
 ワイルドカード以外の文字はリテラル文字です。 たとえば、`searchPattern` 文字列 "\*t" は、末尾が文字 "t" である `path` 内のすべての名前を検索します。 `searchPattern` 文字列 "s\*" は、文字 "s" で始まる `path` 内のすべての名前を検索します。  
  
 `searchPattern` の末尾に2つのピリオド ("..") を指定することはできません。また、2つのピリオド ("..") に続けて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>を含めることも、無効な文字を含めることもできません。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
 `path` パラメーターで相対パスまたは絶対パスの情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。これは、<xref:System.IO.Directory.GetCurrentDirectory%2A> メソッドを使用して判断できます。 返されたディレクトリ名には、`path` パラメーターで指定した値がプレフィックスとして付けられます。 たとえば、`path` パラメーターで相対パスを指定した場合、返されるディレクトリ名には相対パスが含まれます。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A> メソッドと <xref:System.IO.Directory.GetDirectories%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateDirectories%2A>を使用すると、コレクション全体が返される前に、名前のコレクションの列挙を開始できます。<xref:System.IO.Directory.GetDirectories%2A>を使用するときは、配列にアクセスする前に、名前の配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateDirectories%2A> の方が効率的です。  
  
 返されたコレクションはキャッシュされません。コレクションの <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> を呼び出すたびに、新しい列挙が開始されます。  
  
   
  
## Examples  
 次の例では、指定したパス内の、指定した検索パターンに一致する最上位レベルのディレクトリを列挙します。  
  
 [!code-csharp[System.IO.EnumDirs2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.enumdirs2/cs/program.cs#1)]
 [!code-vb[System.IO.EnumDirs2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.enumdirs2/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字が使用されています。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
または 
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。  
  
または 
 <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateDirectories(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateDirectories(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member EnumerateDirectories : string * string * System.IO.EnumerationOptions -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateDirectories (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="searchPattern">To be added.</param>
        <param name="enumerationOptions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateDirectories(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateDirectories(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member EnumerateDirectories : string * string * System.IO.SearchOption -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateDirectories (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern"><paramref name="path" /> 内のディレクトリの名前と照合する検索文字列。  このパラメーターには有効なリテラルのパスとワイルドカード (* と ?) 文字の組み合わせを含めることができますが、正規表現はサポートされていません。</param>
        <param name="searchOption">検索操作に現在のディレクトリのみを含めるのか、またはすべてのサブディレクトリを含めるのかを指定する列挙値の 1 つ。  
  
既定値は <see cref="F:System.IO.SearchOption.TopDirectoryOnly" /> です。</param>
        <summary>指定されたパスから、検索パターンに一致するディレクトリの完全名から成る、列挙可能なコレクションを返します。オプションでサブディレクトリを検索対象にできます。</summary>
        <returns>指定した検索パターンおよびオプションに一致し、<paramref name="path" /> で指定したディレクトリの中にあるディレクトリの完全名 (パスを含む) から成る列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` には、リテラル文字とワイルドカード文字の組み合わせを使用できますが、正規表現はサポートされていません。 `searchPattern`では、次のワイルドカード指定子を使用できます。  
  
|ワイルドカード指定子|一致件数|  
|------------------------|-------------|  
|\* (アスタリスク)|その位置に0個以上の文字が含まれています。|  
|? (疑問符)|その位置に1文字だけです。|  
  
 ワイルドカード以外の文字はリテラル文字です。 たとえば、`searchPattern` 文字列 "\*t" は、末尾が文字 "t" である `path` 内のすべての名前を検索します。 `searchPattern` 文字列 "s\*" は、文字 "s" で始まる `path` 内のすべての名前を検索します。  
  
 `searchPattern` の末尾に2つのピリオド ("..") を指定することはできません。また、2つのピリオド ("..") に続けて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>を含めることも、無効な文字を含めることもできません。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
 `path` パラメーターで相対パスまたは絶対パスの情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。これは、<xref:System.IO.Directory.GetCurrentDirectory%2A> メソッドを使用して判断できます。 返されたディレクトリ名には、`path` パラメーターで指定した値がプレフィックスとして付けられます。 たとえば、`path` パラメーターで相対パスを指定した場合、返されるディレクトリ名には相対パスが含まれます。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A> メソッドと <xref:System.IO.Directory.GetDirectories%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateDirectories%2A>を使用すると、コレクション全体が返される前に、名前のコレクションの列挙を開始できます。<xref:System.IO.Directory.GetDirectories%2A>を使用するときは、配列にアクセスする前に、名前の配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateDirectories%2A> の方が効率的です。  
  
 返されたコレクションはキャッシュされません。コレクションの <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> を呼び出すたびに、新しい列挙が開始されます。  
  
   
  
## Examples  
 次の例では、指定したパス内のディレクトリを列挙し、指定した検索パターンに一致させます。 `searchOption` パラメーターを使用して、すべてのサブディレクトリを検索に含めることを指定します。  
  
 [!code-csharp[System.IO.EnumDirs3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.enumdirs3/cs/program.cs#1)]
 [!code-vb[System.IO.EnumDirs3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.enumdirs3/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字が使用されています。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
または 
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。  
  
または 
 <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> は有効な <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateFiles">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された条件を満たすファイルの完全名から成る、列挙可能なコレクションを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFiles(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFiles(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateFiles (path As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFiles(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member EnumerateFiles : string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFiles path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <summary>指定されたパスに存在するファイルの完全名から成る、列挙可能なコレクションを返します。</summary>
        <returns><paramref name="path" /> で指定したディレクトリ内にあるファイルの完全名 (パスを含む) から成る列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` パラメーターを使用して相対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。これは、<xref:System.IO.Directory.GetCurrentDirectory%2A> メソッドを使用して判断できます。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A> メソッドと <xref:System.IO.Directory.GetFiles%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateFiles%2A>を使用すると、コレクション全体が返される前に、名前のコレクションの列挙を開始できます。<xref:System.IO.Directory.GetFiles%2A>を使用するときは、配列にアクセスする前に、名前の配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateFiles%2A> の方が効率的です。  
  
 返されたコレクションはキャッシュされません。コレクションの <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> を呼び出すたびに、新しい列挙が開始されます。  
  
   
  
## Examples  
 次の例は、ディレクトリ内のすべてのファイルを取得し、それらを新しいディレクトリに移動する方法を示しています。 ファイルが移動されると、元のディレクトリには存在しなくなります。  
  
 [!code-csharp[System.IO.Directory#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class4.cs#12)]
 [!code-vb[System.IO.Directory#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class4.vb#12)]  
  
 次の例では、指定されたディレクトリ内のファイルを列挙し、ファイルの各行を読み取り、文字列 "ヨーロッパ" が含まれている場合はその行を表示します。  
  
 [!code-csharp[System.IO.Directory.EnumFiles#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.enumfiles/cs/program.cs#1)]
 [!code-vb[System.IO.Directory.EnumFiles#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.enumfiles/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字が使用されています。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFiles(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFiles(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateFiles (path As String, searchPattern As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFiles(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member EnumerateFiles : string * string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFiles (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern"><paramref name="path" /> 内のファイル名と対応させる検索文字列。  このパラメーターには有効なリテラルのパスとワイルドカード (* と ?) 文字の組み合わせを含めることができますが、正規表現はサポートされていません。</param>
        <summary>指定されたパスから、検索パターンに一致するファイルの完全名から成る、列挙可能なコレクションを返します。</summary>
        <returns>指定した検索パターンに一致し、<paramref name="path" /> で指定したディレクトリの中にあるファイルの完全名 (パスを含む) から成る列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` には、リテラル文字とワイルドカード文字の組み合わせを使用できますが、正規表現はサポートされていません。 `searchPattern`では、次のワイルドカード指定子を使用できます。  
  
|ワイルドカード指定子|一致件数|  
|------------------------|-------------|  
|\* (アスタリスク)|その位置に0個以上の文字が含まれています。|  
|? (疑問符)|その位置に0個または1個の文字。|  
  
 ワイルドカード以外の文字はリテラル文字です。 たとえば、`searchPattern` 文字列 "\*t" は、末尾が文字 "t" である `path` 内のすべての名前を検索します。 `searchPattern` 文字列 "s\*" は、文字 "s" で始まる `path` 内のすべての名前を検索します。  
  
> [!NOTE]
>  "\*.txt" などの `searchPattern` でアスタリスクのワイルドカード文字を使用すると、指定した拡張機能の文字数は次のようになります。  
>   
> -   指定された拡張子の長さが完全に3文字である場合、メソッドは、指定された拡張子で始まる拡張子を持つファイルを返します。 たとえば、"\*. .xls" は、"book. .xls" と "book" の両方を返します。  
> -   それ以外の場合、メソッドは、指定された拡張子と完全に一致するファイルを返します。 たとえば、"\*" は "file.ai" を返しますが、"file. aif" は返しません。  
>   
>  疑問符のワイルドカード文字を使用すると、このメソッドは、指定されたファイル拡張子に一致するファイルだけを返します。 たとえば、"file1" と "file1" の2つのファイルがある場合、ディレクトリでは "file?" という検索パターンが使用されます。txt "は、最初のファイルだけを返します。一方、" file\*.txt "の検索パターンは両方のファイルを返します。  
  
 `searchPattern` の末尾に2つのピリオド ("..") を指定することはできません。また、2つのピリオド ("..") に続けて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>を含めることも、無効な文字を含めることもできません。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
 `path` パラメーターを使用して相対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。これは、<xref:System.IO.Directory.GetCurrentDirectory%2A> メソッドを使用して判断できます。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A> メソッドと <xref:System.IO.Directory.GetFiles%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateFiles%2A>を使用すると、コレクション全体が返される前に、名前のコレクションの列挙を開始できます。<xref:System.IO.Directory.GetFiles%2A>を使用するときは、配列にアクセスする前に、名前の配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateFiles%2A> の方が効率的です。  
  
 返されたコレクションはキャッシュされません。コレクションの <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> を呼び出すたびに、新しい列挙が開始されます。  
  
   
  
## Examples  
 次の例は、ディレクトリ内のすべてのテキストファイルを取得し、それらを新しいディレクトリに移動する方法を示しています。 ファイルが移動されると、元のディレクトリには存在しなくなります。  
  
 [!code-csharp[System.IO.Directory#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class2.cs#10)]
 [!code-vb[System.IO.Directory#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class2.vb#10)]  
  
 次の例では、指定したディレクトリ内のファイルのうち、拡張子が .txt のファイルを列挙し、ファイルの各行を読み取り、文字列 "ヨーロッパ" が含まれている場合はその行を表示します。  
  
 [!code-csharp[System.IO.Directory.EnumFiles2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.enumfiles2/cs/program.cs#1)]
 [!code-vb[System.IO.Directory.EnumFiles2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.enumfiles2/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字が使用されています。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
または 
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。  
  
または 
 <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFiles(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFiles(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member EnumerateFiles : string * string * System.IO.EnumerationOptions -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFiles (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="searchPattern">To be added.</param>
        <param name="enumerationOptions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFiles(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFiles(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member EnumerateFiles : string * string * System.IO.SearchOption -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFiles (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern"><paramref name="path" /> 内のファイル名と対応させる検索文字列。  このパラメーターには有効なリテラルのパスとワイルドカード (* と ?) 文字の組み合わせを含めることができますが、正規表現はサポートされていません。</param>
        <param name="searchOption">検索操作に現在のディレクトリのみを含めるのか、またはすべてのサブディレクトリを含めるのかを指定する列挙値の 1 つ。  
  
既定値は <see cref="F:System.IO.SearchOption.TopDirectoryOnly" /> です。</param>
        <summary>指定されたパスから、検索パターンに一致するファイルの完全名から成る、列挙可能なコレクションを返します。オプションでサブディレクトリを検索対象にできます。</summary>
        <returns>指定した検索パターンおよびオプションに一致し、<paramref name="path" /> で指定したディレクトリの中にあるファイルの完全名 (パスを含む) から成る列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` には、リテラル文字とワイルドカード文字の組み合わせを使用できますが、正規表現はサポートされていません。 `searchPattern`では、次のワイルドカード指定子を使用できます。  
  
|ワイルドカード指定子|一致件数|  
|------------------------|-------------|  
|\* (アスタリスク)|その位置に0個以上の文字が含まれています。|  
|? (疑問符)|その位置に0個または1個の文字。|  
  
 ワイルドカード以外の文字はリテラル文字です。 たとえば、`searchPattern` 文字列 "\*t" は、末尾が文字 "t" である `path` 内のすべての名前を検索します。 `searchPattern` 文字列 "s\*" は、文字 "s" で始まる `path` 内のすべての名前を検索します。  
  
> [!NOTE]
>  "\*.txt" などの `searchPattern` でアスタリスクのワイルドカード文字を使用すると、指定した拡張機能の文字数は次のようになります。  
>   
> -   指定された拡張子の長さが完全に3文字である場合、メソッドは、指定された拡張子で始まる拡張子を持つファイルを返します。 たとえば、"\*. .xls" は、"book. .xls" と "book" の両方を返します。  
> -   それ以外の場合、メソッドは、指定された拡張子と完全に一致するファイルを返します。 たとえば、"\*" は "file.ai" を返しますが、"file. aif" は返しません。  
>   
>  疑問符のワイルドカード文字を使用すると、このメソッドは、指定されたファイル拡張子に一致するファイルだけを返します。 たとえば、"file1" と "file1" の2つのファイルがある場合、ディレクトリでは "file?" という検索パターンが使用されます。txt "は、最初のファイルだけを返します。一方、" file\*.txt "の検索パターンは両方のファイルを返します。  
  
 `searchPattern` の末尾に2つのピリオド ("..") を指定することはできません。また、2つのピリオド ("..") に続けて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>を含めることも、無効な文字を含めることもできません。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
 `path` パラメーターを使用して相対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。これは、<xref:System.IO.Directory.GetCurrentDirectory%2A> メソッドを使用して判断できます。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A> メソッドと <xref:System.IO.Directory.GetFiles%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateFiles%2A>を使用すると、コレクション全体が返される前に、名前のコレクションの列挙を開始できます。<xref:System.IO.Directory.GetFiles%2A>を使用するときは、配列にアクセスする前に、名前の配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateFiles%2A> の方が効率的です。  
  
 返されたコレクションはキャッシュされません。コレクションの <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> を呼び出すたびに、新しい列挙が開始されます。  
  
   
  
## Examples  
 次の例では、ディレクトリとそのサブディレクトリにあるすべてのテキストファイルを取得し、それらを新しいディレクトリに移動する方法を示します。 ファイルが移動されると、元のディレクトリには存在しなくなります。  
  
 [!code-csharp[System.IO.Directory#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class5.cs#13)]
 [!code-vb[System.IO.Directory#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class5.vb#13)]  
  
 次の例では、拡張子が .txt のすべてのファイルを再帰的に列挙し、ファイルの各行を読み取り、その行に "Microsoft" という文字列が含まれている場合はその行を表示します。  
  
 [!code-csharp[System.IO.Directory.EnumerateFiles#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.enumeratefiles/cs/program.cs#1)]
 [!code-vb[System.IO.Directory.EnumerateFiles#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.enumeratefiles/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字が使用されています。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
または 
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。  
  
または 
 <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> は有効な <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateFileSystemEntries">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された条件を満たすファイル システム エントリの列挙可能なコレクションを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateFileSystemEntries">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFileSystemEntries(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFileSystemEntries(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateFileSystemEntries (path As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFileSystemEntries(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member EnumerateFileSystemEntries : string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFileSystemEntries path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <summary>指定されたパスに存在するファイル名とディレクトリ名の列挙可能なコレクションを返します。</summary>
        <returns><paramref name="path" /> で指定されたディレクトリ内のファイル システム エントリの列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` パラメーターを使用して相対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。これは、<xref:System.IO.Directory.GetCurrentDirectory%2A> メソッドを使用して判断できます。  
  
 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> メソッドと <xref:System.IO.Directory.GetFileSystemEntries%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>を使用すると、コレクション全体が返される前にエントリのコレクションの列挙を開始できます。<xref:System.IO.Directory.GetFileSystemEntries%2A>を使用する場合、配列にアクセスするには、エントリの配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateFiles%2A> の方が効率的です。  
  
 返されたコレクションはキャッシュされません。コレクションの <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> を呼び出すたびに、新しい列挙が開始されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字が使用されています。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFileSystemEntries">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFileSystemEntries(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateFileSystemEntries (path As String, searchPattern As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFileSystemEntries(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member EnumerateFileSystemEntries : string * string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFileSystemEntries (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern"><paramref name="path" /> 内のファイル システム エントリの名前と照合する検索文字列。  このパラメーターには有効なリテラルのパスとワイルドカード (* と ?) 文字の組み合わせを含めることができますが、正規表現はサポートされていません。</param>
        <summary>指定されたパスから、検索パターンに一致するファイル名とディレクトリ名の列挙可能なコレクションを返します。</summary>
        <returns><paramref name="path" /> で指定されたディレクトリに存在するファイル システム エントリのうち、指定した検索パターンに一致するファイル システム エントリの列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` には、リテラル文字とワイルドカード文字の組み合わせを使用できますが、正規表現はサポートされていません。 `searchPattern`では、次のワイルドカード指定子を使用できます。 
  
|ワイルドカード指定子|一致件数|  
|------------------------|-------------|  
|\* (アスタリスク)|その位置に0個以上の文字が含まれています。|  
|? (疑問符)|その位置に0個または1個の文字。|  
  
 ワイルドカード以外の文字はリテラル文字です。 たとえば、`searchPattern` 文字列 "\*t" は、末尾が文字 "t" である `path` 内のすべての名前を検索します。 `searchPattern` 文字列 "s\*" は、文字 "s" で始まる `path` 内のすべての名前を検索します。  
  
> [!NOTE]
>  "\*.txt" などの `searchPattern` でアスタリスクのワイルドカード文字を使用すると、指定した拡張機能の文字数は次のようになります。  
>   
> -   指定された拡張子の長さが完全に3文字である場合、メソッドは、指定された拡張子で始まる拡張子を持つファイルを返します。 たとえば、"\*. .xls" は、"book. .xls" と "book" の両方を返します。  
> -   それ以外の場合、メソッドは、指定された拡張子と完全に一致するファイルを返します。 たとえば、"\*" は "file.ai" を返しますが、"file. aif" は返しません。  
>   
>  疑問符のワイルドカード文字を使用すると、このメソッドは、指定されたファイル拡張子に一致するファイルだけを返します。 たとえば、"file1" と "file1" の2つのファイルがある場合、ディレクトリでは "file?" という検索パターンが使用されます。txt "は、最初のファイルだけを返します。一方、" file\*.txt "の検索パターンは両方のファイルを返します。  
  
 `searchPattern` の末尾に2つのピリオド ("..") を指定することはできません。また、2つのピリオド ("..") に続けて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>を含めることも、無効な文字を含めることもできません。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
 `path` パラメーターを使用して相対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。これは、<xref:System.IO.Directory.GetCurrentDirectory%2A> メソッドを使用して判断できます。  
  
 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> メソッドと <xref:System.IO.Directory.GetFileSystemEntries%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>を使用すると、コレクション全体が返される前にエントリのコレクションの列挙を開始できます。<xref:System.IO.Directory.GetFileSystemEntries%2A>を使用する場合、配列にアクセスするには、エントリの配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateFiles%2A> の方が効率的です。  
  
 返されたコレクションはキャッシュされません。コレクションの <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> を呼び出すたびに、新しい列挙が開始されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字が使用されています。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
または 
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。  
  
または 
 <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFileSystemEntries">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFileSystemEntries(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFileSystemEntries(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member EnumerateFileSystemEntries : string * string * System.IO.EnumerationOptions -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFileSystemEntries (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="searchPattern">To be added.</param>
        <param name="enumerationOptions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFileSystemEntries">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFileSystemEntries(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFileSystemEntries(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member EnumerateFileSystemEntries : string * string * System.IO.SearchOption -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFileSystemEntries (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern"><paramref name="path" /> 内のファイル システム エントリと対応させる検索文字列。  このパラメーターには有効なリテラルのパスとワイルドカード (* と ?) 文字の組み合わせを含めることができますが、正規表現はサポートされていません。</param>
        <param name="searchOption">検索操作に現在のディレクトリのみを含めるのか、またはすべてのサブディレクトリを含めるのかを指定する列挙値の 1 つ。  
  
既定値は <see cref="F:System.IO.SearchOption.TopDirectoryOnly" /> です。</param>
        <summary>指定されたパスにあるディレクトリのうち、検索パターンに一致するファイル名およびディレクトリ名の列挙可能なコレクションを返します。オプションでサブディレクトリを検索対象にすることができます。</summary>
        <returns><paramref name="path" /> で指定されたディレクトリに存在するファイル システム エントリのうち、指定した検索パターンおよびオプションに一致するファイル システム エントリの列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` には、リテラル文字とワイルドカード文字の組み合わせを使用できますが、正規表現はサポートされていません。 `searchPattern`では、次のワイルドカード指定子を使用できます。  
  
|ワイルドカード指定子|一致件数|  
|------------------------|-------------|  
|\* (アスタリスク)|その位置に0個以上の文字が含まれています。|  
|? (疑問符)|その位置に0個または1個の文字。|  
  
 ワイルドカード以外の文字はリテラル文字です。 たとえば、`searchPattern` 文字列 "\*t" は、末尾が文字 "t" である `path` 内のすべての名前を検索します。 `searchPattern` 文字列 "s\*" は、文字 "s" で始まる `path` 内のすべての名前を検索します。  
  
> [!NOTE]
>  "\*.txt" などの `searchPattern` でアスタリスクのワイルドカード文字を使用すると、指定した拡張機能の文字数は次のようになります。  
>   
> -   指定された拡張子の長さが完全に3文字である場合、メソッドは、指定された拡張子で始まる拡張子を持つファイルを返します。 たとえば、"\*. .xls" は、"book. .xls" と "book" の両方を返します。  
> -   それ以外の場合、メソッドは、指定された拡張子と完全に一致するファイルを返します。 たとえば、"\*" は "file.ai" を返しますが、"file. aif" は返しません。  
>   
>  疑問符のワイルドカード文字を使用すると、このメソッドは、指定されたファイル拡張子に一致するファイルだけを返します。 たとえば、"file1" と "file1" の2つのファイルがある場合、ディレクトリでは "file?" という検索パターンが使用されます。txt "は、最初のファイルだけを返します。一方、" file\*.txt "の検索パターンは両方のファイルを返します。  
  
 `searchPattern` の末尾に2つのピリオド ("..") を指定することはできません。また、2つのピリオド ("..") に続けて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>を含めることも、無効な文字を含めることもできません。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
 `path` パラメーターを使用して相対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。これは、<xref:System.IO.Directory.GetCurrentDirectory%2A> メソッドを使用して判断できます。  
  
 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> メソッドと <xref:System.IO.Directory.GetFileSystemEntries%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>を使用すると、コレクション全体が返される前にエントリのコレクションの列挙を開始できます。<xref:System.IO.Directory.GetFileSystemEntries%2A>を使用する場合、配列にアクセスするには、エントリの配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateFiles%2A> の方が効率的です。  
  
 返されたコレクションはキャッシュされません。コレクションの <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> を呼び出すたびに、新しい列挙が開始されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字が使用されています。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
または 
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。  
  
または 
 <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> は有効な <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.Exists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Exists(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Exists : string -&gt; bool" Usage="System.IO.Directory.Exists path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">テストするパス。</param>
        <summary>指定したパスがディスク上の既存のディレクトリを参照しているかどうかを確認します。</summary>
        <returns><see langword="true" /> が既存のディレクトリを参照している場合は <paramref name="path" />。ディレクトリが存在していない場合や、指定したディレクトリが存在するかどうかを判断しようとしたときにエラーが発生した場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。  
  
 末尾のスペースは、ディレクトリが存在するかどうかを確認する前に、`path` パラメーターの末尾から削除されます。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 ディレクトリに対する読み取り専用以上のアクセス許可がない場合、<xref:System.IO.Directory.Exists%2A> メソッドは `false`を返します。  
  
 <xref:System.IO.Directory.Exists%2A> メソッドは、指定されたファイルが存在するかどうかを判断しようとしたときにエラーが発生した場合に `false` を返します。 これは、無効な文字を含むファイル名の受け渡し、文字の数が多すぎる、ディスクの障害が発生した、または呼び出し元にファイルの読み取りアクセス許可がないなどの例外が発生する可能性があります。  
  
   
  
## Examples  
 次の例では、コマンドラインでファイル名またはディレクトリ名の配列を受け取り、名前の種類を決定して、適切に処理します。  
  
 [!code-cpp[Recursive file finder#2](~/samples/snippets/cpp/VS_Snippets_CLR/Recursive file finder/CPP/directorylisting.cpp#2)]
 [!code-csharp[Recursive file finder#2](~/samples/snippets/csharp/VS_Snippets_CLR/Recursive file finder/CS/directorylisting.cs#2)]
 [!code-vb[Recursive file finder#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Recursive file finder/VB/directorylisting.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルの読み取りに使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.DirectoryInfo" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAccessControl">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリの Windows アクセス制御リスト (ACL) を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.AccessControl.DirectorySecurity GetAccessControl(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetAccessControl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAccessControl (path As String) As DirectorySecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::AccessControl::DirectorySecurity ^ GetAccessControl(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetAccessControl : string -&gt; System.Security.AccessControl.DirectorySecurity" Usage="System.IO.Directory.GetAccessControl path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.DirectorySecurity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">ファイルのアクセス制御リスト (ACL) 情報を示す <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクトを格納しているディレクトリへのパス。</param>
        <summary>指定したディレクトリのアクセス制御リスト (ACL) のエントリをカプセル化する <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクトを取得します。</summary>
        <returns><paramref name="path" /> パラメーターによって記述されるファイルのアクセス制御規則をカプセル化するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ディレクトリのアクセス制御リスト (ACL) のエントリを取得するには、<xref:System.IO.Directory.GetAccessControl%2A> メソッドを使用します。  
  
 ACL は、特定のファイルまたはディレクトリに対する特定の操作に対する権限を持っている、または所有していない個人やグループを記述します。 詳細については、「[方法: アクセス制御リスト エントリを追加または削除する](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)」を参照してください。  
  
 NTFS 環境では、ユーザーが親フォルダーに対して <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 権限を持っている場合、<xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes> がユーザーに付与されます。 <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>を拒否するには、親ディレクトリの <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> を拒否します。  
  
   
  
## Examples  
 次の例では、<xref:System.IO.Directory.GetAccessControl%2A> と <xref:System.IO.Directory.SetAccessControl%2A> メソッドを使用してアクセス制御リスト (ACL) エントリを追加し、ディレクトリから ACL エントリを削除します。  この例を実行するには、有効なユーザーまたはグループ アカウントを指定する必要があります。  
  
 [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリを開くときに、I/O エラーが発生しました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows 2000 以降ではありません。</exception>
        <exception cref="T:System.SystemException">ディレクトリが見つからなかったなどのシステム レベルのエラーが発生しました。 特定の例外が <see cref="T:System.SystemException" /> のサブクラスである可能性があります。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> パラメーターに読み取り専用のディレクトリが指定されています。  
  
または 
この操作は、現在のプラットフォームではサポートされていません。  
  
または 
呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ディレクトリのアクセス制御リスト (ACL) を列挙するアクセス許可。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" />、<see cref="F:System.Security.AccessControl.AccessControlActions.View" />  
  
セキュリティアクション: Demand。</permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.AccessControl.DirectorySecurity GetAccessControl(string path, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAccessControl (path As String, includeSections As AccessControlSections) As DirectorySecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::AccessControl::DirectorySecurity ^ GetAccessControl(System::String ^ path, System::Security::AccessControl::AccessControlSections includeSections);" />
      <MemberSignature Language="F#" Value="static member GetAccessControl : string * System.Security.AccessControl.AccessControlSections -&gt; System.Security.AccessControl.DirectorySecurity" Usage="System.IO.Directory.GetAccessControl (path, includeSections)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.DirectorySecurity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">ファイルのアクセス制御リスト (ACL) 情報を示す <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクトを格納しているディレクトリへのパス。</param>
        <param name="includeSections">取得するアクセス制御リスト (ACL) の情報の型を指定する <see cref="T:System.Security.AccessControl.AccessControlSections" /> 値のいずれか。</param>
        <summary>指定したディレクトリの、指定した種類のアクセス制御リスト (ACL) エントリをカプセル化する <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクトを取得します。</summary>
        <returns><paramref name="path" /> パラメーターによって記述されるファイルのアクセス制御規則をカプセル化するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ディレクトリのアクセス制御リスト (ACL) のエントリを取得するには、<xref:System.IO.Directory.GetAccessControl%2A> メソッドを使用します。  
  
 ACL は、特定のファイルまたはディレクトリに対する特定の操作に対する権限を持っている、または所有していない個人やグループを記述します。 詳細については、「[方法: アクセス制御リスト エントリを追加または削除する](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)」を参照してください。  
  
 NTFS 環境では、ユーザーが親フォルダーに対して <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 権限を持っている場合、<xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes> がユーザーに付与されます。 <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>を拒否するには、親ディレクトリの <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> を拒否します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリを開くときに、I/O エラーが発生しました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows 2000 以降ではありません。</exception>
        <exception cref="T:System.SystemException">ディレクトリが見つからなかったなどのシステム レベルのエラーが発生しました。 特定の例外が <see cref="T:System.SystemException" /> のサブクラスである可能性があります。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> パラメーターに読み取り専用のディレクトリが指定されています。  
  
または 
この操作は、現在のプラットフォームではサポートされていません。  
  
または 
呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ディレクトリのアクセス制御リスト (ACL) を列挙するアクセス許可。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" />、<see cref="F:System.Security.AccessControl.AccessControlActions.View" />  
  
セキュリティアクション: Demand。</permission>
      </Docs>
    </Member>
    <Member MemberName="GetCreationTime">
      <MemberSignature Language="C#" Value="public static DateTime GetCreationTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetCreationTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetCreationTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCreationTime (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetCreationTime(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetCreationTime : string -&gt; DateTime" Usage="System.IO.Directory.GetCreationTime path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">ディレクトリのパス。</param>
        <summary>ディレクトリの作成日時を取得します。</summary>
        <returns>指定したディレクトリの作成日時に設定された構造体。 この値は現地時刻で表示されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このメソッドは、値がオペレーティングシステムによって継続的に更新されないネイティブ関数を使用するため、不正確な値を返す場合があります。  
  
 このメソッドは、<xref:System.IO.File.GetCreationTime%2A?displayProperty=nameWithType>に相当します。  
  
 `path` パラメーターに記述されているディレクトリが存在しない場合、このメソッドは 1601 A.D. 年1月1日午前0時12:00 を返します。 西暦協定世界時 (UTC)。現地時刻に調整されます。  
  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例では、指定したディレクトリの作成時刻を取得します。  
  
 [!code-cpp[Dir_GetCreation#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetCreation/CPP/dir_getcreation.cpp#1)]
 [!code-csharp[Dir_GetCreation#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetCreation/CS/dir_getcreation.cs#1)]
 [!code-vb[Dir_GetCreation#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetCreation/VB/dir_getcreation.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">指定したファイルまたはディレクトリを読み取るために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="GetCreationTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetCreationTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetCreationTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetCreationTimeUtc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCreationTimeUtc (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetCreationTimeUtc(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetCreationTimeUtc : string -&gt; DateTime" Usage="System.IO.Directory.GetCreationTimeUtc path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">ディレクトリのパス。</param>
        <summary>世界協定時刻 (UTC: Coordinated Universal Time) 形式でのディレクトリの作成日時を取得します。</summary>
        <returns>指定したディレクトリの作成日時に設定された構造体。 この値は UTC 時刻で表記されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このメソッドは、値がオペレーティングシステムによって継続的に更新されないネイティブ関数を使用するため、不正確な値を返す場合があります。  
  
 `path` パラメーターに記述されているディレクトリが存在しない場合、このメソッドは 1601 A.D. 年1月1日午前0時12:00 を返します。 西暦協定世界時 (UTC)。  
  
 世界協定時刻 (UTC) に基づいてディレクトリの作成時刻を取得するには、このメソッドを使用します。  
  
   
  
## Examples  
 次の例は、協定世界時 (UTC) の出力を使用する場合の出力の違いを示しています。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">指定したファイルまたはディレクトリを読み取るために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentDirectory">
      <MemberSignature Language="C#" Value="public static string GetCurrentDirectory ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetCurrentDirectory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetCurrentDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentDirectory () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetCurrentDirectory();" />
      <MemberSignature Language="F#" Value="static member GetCurrentDirectory : unit -&gt; string" Usage="System.IO.Directory.GetCurrentDirectory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アプリケーションの現在の作業ディレクトリを取得します。</summary>
        <returns>現在の作業ディレクトリの絶対パスを示す文字列。この文字列の末尾には、円記号 (\\) は付きません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のディレクトリは、プロセスが開始された元のディレクトリとは異なります。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 `GetCurrentDirectory` メソッドの使用方法を次の例に示します。  
  
 [!code-cpp[Dir_GetCurDir#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetCurDir/CPP/dir_getcurdir.cpp#1)]
 [!code-csharp[Dir_GetCurDir#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetCurDir/CS/dir_getcurdir.cs#1)]
 [!code-vb[Dir_GetCurDir#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetCurDir/VB/dir_getcurdir.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">オペレーティング システムは、現在のディレクトリの機能が装備されていない Windows CE です。  
  
 このメソッドは、.NET Compact Framework で使用できますが、現在サポートされていません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">現在のディレクトリのパス情報にアクセスします。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDirectories">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した条件を満たすサブディレクトリの名前を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static string[] GetDirectories (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetDirectories(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectories(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectories (path As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetDirectories(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetDirectories : string -&gt; string[]" Usage="System.IO.Directory.GetDirectories path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <summary>指定したディレクトリ内のサブディレクトリの名前 (パスを含む) を返します。</summary>
        <returns>指定したパス内のサブディレクトリのフル ネーム (パスを含む) の配列。または、ディレクトリが見つからない場合は空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、検索パターンとしてアスタリスク (\*) が指定されている <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%29> と同じであるため、すべてのサブディレクトリが返されます。サブディレクトリを検索する必要がある場合は、<xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29> メソッドを使用します。これにより、`searchOption` パラメーターを使用してサブディレクトリの検索を指定できるようになります。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A> メソッドと <xref:System.IO.Directory.GetDirectories%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateDirectories%2A>を使用すると、コレクション全体が返される前に、名前のコレクションの列挙を開始できます。<xref:System.IO.Directory.GetDirectories%2A>を使用するときは、配列にアクセスする前に、名前の配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateDirectories%2A> の方が効率的です。  
  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 このメソッドによって返される名前には、`path`で指定されたディレクトリ情報がプレフィックスとして付けられます。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例では、コマンドラインでファイル名またはディレクトリ名の配列を受け取り、名前の種類を決定して、適切に処理します。  
  
 [!code-cpp[Recursive file finder#1](~/samples/snippets/cpp/VS_Snippets_CLR/Recursive file finder/CPP/directorylisting.cpp#1)]
 [!code-csharp[Recursive file finder#1](~/samples/snippets/csharp/VS_Snippets_CLR/Recursive file finder/CS/directorylisting.cs#1)]
 [!code-vb[Recursive file finder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Recursive file finder/VB/directorylisting.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">現在のディレクトリのパス情報にアクセスするための。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <altmember cref="M:System.IO.Directory.GetCurrentDirectory" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static string[] GetDirectories (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetDirectories(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectories(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectories (path As String, searchPattern As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetDirectories(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member GetDirectories : string * string -&gt; string[]" Usage="System.IO.Directory.GetDirectories (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern"><paramref name="path" /> 内のサブディレクトリの名前と照合する検索文字列。 このパラメーターに、有効なリテラルのパスとワイルドカード文字の組み合わせを含めることができますが、正規表現はサポートされていません。</param>
        <summary>指定したディレクトリ内の指定した検索パターンに一致するサブディレクトリ名 (パスを含む) を返します。</summary>
        <returns>指定したディレクトリ内の検索パターンに一致するサブディレクトリの完全名 (パスを含む) の配列。または、ディレクトリが見つからない場合は空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したディレクトリの直下にある、指定した検索パターンに一致するすべてのサブディレクトリを返します。 指定されたディレクトリにサブディレクトリがない場合、または `searchPattern` パラメーターと一致するサブディレクトリがない場合、このメソッドは空の配列を返します。 最上位のディレクトリだけが検索されます。 サブディレクトリも検索する場合は、<xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29> メソッドを使用し、`searchOption` パラメーターで <xref:System.IO.SearchOption.AllDirectories> を指定します。  
  
 `searchPattern` には、リテラル文字とワイルドカード文字の組み合わせを使用できますが、正規表現はサポートされていません。 `searchPattern`では、次のワイルドカード指定子を使用できます。  
  
|ワイルドカード指定子|一致件数|  
|------------------------|-------------|  
|\* (アスタリスク)|その位置に0個以上の文字が含まれています。|  
|? (疑問符)|その位置に0個または1個の文字。|  
  
 ワイルドカード以外の文字はリテラル文字です。 たとえば、`searchPattern` 文字列 "\*t" は、末尾が文字 "t" である `path` 内のすべての名前を検索します。 `searchPattern` 文字列 "s\*" は、文字 "s" で始まる `path` 内のすべての名前を検索します。  
  
 `searchPattern` の末尾に2つのピリオド ("..") を指定することはできません。また、2つのピリオド ("..") に続けて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>を含めることも、無効な文字を含めることもできません。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
 `path` パラメーターは相対パスまたは絶対パス情報を指定でき、大文字と小文字は区別されません。  相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A> メソッドと <xref:System.IO.Directory.GetDirectories%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateDirectories%2A>を使用すると、コレクション全体が返される前に、名前のコレクションの列挙を開始できます。<xref:System.IO.Directory.GetDirectories%2A>を使用するときは、配列にアクセスする前に、名前の配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateDirectories%2A> の方が効率的です。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例では、指定された文字で始まるパス内のディレクトリの数をカウントします。  
  
 [!code-cpp[Dir_GetDirs2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetDirs2/CPP/dir_getdirs2.cpp#1)]
 [!code-csharp[Dir_GetDirs2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetDirs2/CS/dir_getdirs2.cs#1)]
 [!code-vb[Dir_GetDirs2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetDirs2/VB/dir_getdirs2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 <see cref="M:System.IO.Path.GetInvalidPathChars" /> を使用して、正しくない文字を検出するクエリを実行できます。  
  
または 
 <paramref name="searchPattern" /> には有効なパターンが含まれていません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> または <paramref name="searchPattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">現在のディレクトリのパス情報にアクセスします。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> (関連する列挙体)</permission>
        <altmember cref="M:System.IO.Directory.GetCurrentDirectory" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static string[] GetDirectories (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetDirectories(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetDirectories(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member GetDirectories : string * string * System.IO.EnumerationOptions -&gt; string[]" Usage="System.IO.Directory.GetDirectories (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="searchPattern">To be added.</param>
        <param name="enumerationOptions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static string[] GetDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetDirectories(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetDirectories(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member GetDirectories : string * string * System.IO.SearchOption -&gt; string[]" Usage="System.IO.Directory.GetDirectories (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern"><paramref name="path" /> 内のサブディレクトリの名前と照合する検索文字列。 このパラメーターに、有効なリテラルのパスとワイルドカード文字の組み合わせを含めることができますが、正規表現はサポートされていません。</param>
        <param name="searchOption">検索操作にすべてのサブディレクトリを含めるのか、または現在のディレクトリのみを含めるのかを指定する列挙値の 1 つ。</param>
        <summary>現在のディレクトリ内で、指定された検索パターンに一致するサブディレクトリの名前 (パスを含む) を返します。オプションで、サブディレクトリを検索対象にすることができます。</summary>
        <returns>指定した条件に一致するサブディレクトリの完全名 (パスを含む) の配列。または、ディレクトリが見つからない場合は空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` パラメーターは相対パスまたは絶対パス情報を指定でき、大文字と小文字は区別されません。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 `searchPattern` には、リテラル文字とワイルドカード文字の組み合わせを使用できますが、正規表現はサポートされていません。 `searchPattern`では、次のワイルドカード指定子を使用できます。  
  
|ワイルドカード指定子|一致件数|  
|------------------------|-------------|  
|\* (アスタリスク)|その位置に0個以上の文字が含まれています。|  
|? (疑問符)|その位置に0個または1個の文字。|  
  
 ワイルドカード以外の文字はリテラル文字です。 たとえば、`searchPattern` 文字列 "\*t" は、末尾が文字 "t" である `path` 内のすべての名前を検索します。 `searchPattern` 文字列 "s\*" は、文字 "s" で始まる `path` 内のすべての名前を検索します。  
  
 `searchPattern` の末尾に2つのピリオド ("..") を指定することはできません。また、2つのピリオド ("..") に続けて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>を含めることも、無効な文字を含めることもできません。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A> メソッドと <xref:System.IO.Directory.GetDirectories%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateDirectories%2A>を使用すると、コレクション全体が返される前に、名前のコレクションの列挙を開始できます。<xref:System.IO.Directory.GetDirectories%2A>を使用するときは、配列にアクセスする前に、名前の配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateDirectories%2A> の方が効率的です。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例では、パス内の指定された文字で始まるディレクトリの数をカウントします。 最上位のディレクトリだけが検索されます。  
  
 [!code-csharp[Dir_GetDirs2#2](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetDirs2/CS/dir_getdirs3.cs#2)]
 [!code-vb[Dir_GetDirs2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetDirs2/VB/dir_getdirs3.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
または 
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> または <paramref name="searchPattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> は有効な <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">現在のディレクトリのパス情報にアクセスします。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> (関連する列挙体)</permission>
        <altmember cref="M:System.IO.Directory.GetCurrentDirectory" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryRoot">
      <MemberSignature Language="C#" Value="public static string GetDirectoryRoot (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDirectoryRoot(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectoryRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectoryRoot (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetDirectoryRoot(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetDirectoryRoot : string -&gt; string" Usage="System.IO.Directory.GetDirectoryRoot path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">ファイルまたはディレクトリのパス。</param>
        <summary>指定したパスのボリューム情報またはルート情報、あるいはその両方を返します。</summary>
        <returns>指定したパスのボリューム情報、ルート情報、またはその両方を含む文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.IO.Path.GetFullPath%2A>によって返される `path`の完全修飾パス名を取得し、ルートディレクトリ情報を返します。 指定されたパスは存在している必要はありません。  
  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例は、現在のディレクトリを設定し、ディレクトリのルートを表示する方法を示しています。  
  
 [!code-cpp[System.IO.DirectoryRoot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.DirectoryRoot/CPP/example.cpp#1)]
 [!code-csharp[System.IO.DirectoryRoot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.DirectoryRoot/CS/example.cs#1)]
 [!code-vb[System.IO.DirectoryRoot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.DirectoryRoot/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 <see cref="M:System.IO.Path.GetInvalidPathChars" /> を使用して、正しくない文字に対するクエリを実行できます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">現在のディレクトリのパス情報にアクセスします。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFiles">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した条件を満たすファイルの名前を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static string[] GetFiles (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFiles(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFiles(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFiles (path As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFiles(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFiles : string -&gt; string[]" Usage="System.IO.Directory.GetFiles path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <summary>指定したディレクトリ内のファイルの名前 (パスを含む) を返します。</summary>
        <returns>指定したディレクトリ内のファイルの完全名 (パスを含む) の配列。または、ファイルが見つからない場合は空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Directory.EnumerateFiles%2A> メソッドと <xref:System.IO.Directory.GetFiles%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateFiles%2A>を使用すると、コレクション全体が返される前に、名前のコレクションの列挙を開始できます。<xref:System.IO.Directory.GetFiles%2A>を使用するときは、配列にアクセスする前に、名前の配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateFiles%2A> の方が効率的です。  
  
 返されたファイル名は、指定された `path` パラメーターに追加されます。  
  
 このメソッドは、検索パターンとしてアスタリスク (\*) が指定されている <xref:System.IO.Directory.GetFiles%28System.String%2CSystem.String%29> と同じです。  
  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 返されるファイル名の順序は保証されません。特定の並べ替え順序が必要な場合は、<xref:System.Array.Sort%2A> メソッドを使用します。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例では、<xref:System.IO.Directory.GetFiles%2A> メソッドを使用して、ユーザーが指定した場所からファイル名を返す方法を示します。 この例は、このメソッドに共通するすべてのエラーをキャッチするように構成されています。  
  
 [!code-cpp[Recursive file finder#1](~/samples/snippets/cpp/VS_Snippets_CLR/Recursive file finder/CPP/directorylisting.cpp#1)]
 [!code-csharp[Recursive file finder#1](~/samples/snippets/csharp/VS_Snippets_CLR/Recursive file finder/CS/directorylisting.cs#1)]
 [!code-vb[Recursive file finder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Recursive file finder/VB/directorylisting.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。  
  
または 
ネットワーク エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが見つからないか正しくありません (たとえば、マップされていないドライブ上のパスなど)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">現在のディレクトリのパス情報にアクセスします。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static string[] GetFiles (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFiles(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFiles(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFiles (path As String, searchPattern As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFiles(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member GetFiles : string * string -&gt; string[]" Usage="System.IO.Directory.GetFiles (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern"><paramref name="path" /> 内のファイル名と対応させる検索文字列。  このパラメーターには有効なリテラルのパスとワイルドカード (* と ?) 文字の組み合わせを含めることができますが、正規表現はサポートされていません。</param>
        <summary>指定したディレクトリ内の指定した検索パターンに一致するファイル名 (パスを含む) を返します。</summary>
        <returns>指定したディレクトリ内の指定した検索パターンに一致するファイルの完全名 (パスを含む) の配列。または、ファイルが見つからない場合は空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返されたファイル名は、指定された `path` パラメーターに付加され、返されるファイル名の順序は保証されません。特定の並べ替え順序が必要な場合は、<xref:System.Array.Sort%2A> メソッドを使用します。  
  
 `searchPattern` には、リテラル文字とワイルドカード文字の組み合わせを使用できますが、正規表現はサポートされていません。 `searchPattern`では、次のワイルドカード指定子を使用できます。  
  
|ワイルドカード指定子|一致件数|  
|------------------------|-------------|  
|\* (アスタリスク)|その位置に0個以上の文字が含まれています。|  
|? (疑問符)|その位置に0個または1個の文字。|  
  
 ワイルドカード以外の文字はリテラル文字です。 たとえば、`searchPattern` 文字列 "\*t" は、末尾が文字 "t" である `path` 内のすべての名前を検索します。 `searchPattern` 文字列 "s\*" は、文字 "s" で始まる `path` 内のすべての名前を検索します。  
  
 `searchPattern` の末尾に2つのピリオド ("..") を指定することはできません。また、2つのピリオド ("..") に続けて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>を含めることも、無効な文字を含めることもできません。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
> [!NOTE]
>  "\*.txt" などの `searchPattern` でアスタリスクのワイルドカード文字を使用すると、指定した拡張機能の文字数は次のようになります。  
>   
> -   指定された拡張子の長さが完全に3文字である場合、メソッドは、指定された拡張子で始まる拡張子を持つファイルを返します。 たとえば、"\*. .xls" は、"book. .xls" と "book" の両方を返します。  
> -   それ以外の場合、メソッドは、指定された拡張子と完全に一致するファイルを返します。 たとえば、"\*" は "file.ai" を返しますが、"file. aif" は返しません。  
>   
>  疑問符のワイルドカード文字を使用すると、このメソッドは、指定されたファイル拡張子に一致するファイルだけを返します。 たとえば、"file1" と "file1" の2つのファイルがある場合、ディレクトリでは "file?" という検索パターンが使用されます。txt "は、最初のファイルだけを返します。一方、" file\*.txt "の検索パターンは両方のファイルを返します。  
  
> [!NOTE]
>  このメソッドは、8.3 ファイル名形式と長いファイル名形式の両方でファイル名をチェックするため、"\*1\*" のような検索パターンでは、予期しないファイル名が返されることがあります。 たとえば、"\*1\*.txt" という検索パターンを使用すると、8.3 ファイル名の形式が "LONGFILENAME ~ 1 .TXT" であるため、"longfilename. .txt" が返されます。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A> メソッドと <xref:System.IO.Directory.GetFiles%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateFiles%2A>を使用すると、コレクション全体が返される前に、名前のコレクションの列挙を開始できます。<xref:System.IO.Directory.GetFiles%2A>を使用するときは、配列にアクセスする前に、名前の配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateFiles%2A> の方が効率的です。  
  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例では、指定された文字で始まるファイルの数をカウントします。  
  
 [!code-cpp[Dir_GetFiles2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetFiles2/CPP/dir_getfiles2.cpp#1)]
 [!code-csharp[Dir_GetFiles2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetFiles2/CS/dir_getfiles2.cs#1)]
 [!code-vb[Dir_GetFiles2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetFiles2/VB/dir_getfiles2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。  
  
または 
ネットワーク エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 <see cref="M:System.IO.Path.GetInvalidPathChars" /> を使用して、正しくない文字を検出するクエリを実行できます。  
  
または 
 <paramref name="searchPattern" /> には有効なパターンが含まれていません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> または <paramref name="searchPattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが見つからないか正しくありません (たとえば、マップされていないドライブ上のパスなど)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">現在のディレクトリのパス情報にアクセスします。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static string[] GetFiles (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFiles(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFiles(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member GetFiles : string * string * System.IO.EnumerationOptions -&gt; string[]" Usage="System.IO.Directory.GetFiles (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="searchPattern">To be added.</param>
        <param name="enumerationOptions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static string[] GetFiles (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFiles(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFiles(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member GetFiles : string * string * System.IO.SearchOption -&gt; string[]" Usage="System.IO.Directory.GetFiles (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern"><paramref name="path" /> 内のファイル名と対応させる検索文字列。  このパラメーターには有効なリテラルのパスとワイルドカード (* と ?) 文字の組み合わせを含めることができますが、正規表現はサポートされていません。</param>
        <param name="searchOption">検索操作にすべてのサブディレクトリを含めるのか、または現在のディレクトリのみを含めるのかを指定する列挙値の 1 つ。</param>
        <summary>指定したディレクトリの中から、指定した検索パターンに一致し、サブディレクトリを検索するかどうかを決定する値を持つファイル名 (パスを含む) を返します。</summary>
        <returns>指定したディレクトリ内の指定した検索パターンおよびオプションに一致するファイルの完全名 (パスを含む) の配列。または、ファイルが見つからない場合は空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返されたファイル名は、指定されたパラメーター `path` に追加され、返されるファイル名の順序は保証されません。特定の並べ替え順序が必要な場合は、<xref:System.Array.Sort%2A> メソッドを使用します。  
  
 `searchPattern` には、リテラル文字とワイルドカード文字の組み合わせを使用できますが、正規表現はサポートされていません。 `searchPattern`では、次のワイルドカード指定子を使用できます。  
  
|ワイルドカード指定子|一致件数|  
|------------------------|-------------|  
|\* (アスタリスク)|その位置に0個以上の文字が含まれています。|  
|? (疑問符)|その位置に0個または1個の文字。|  
  
 ワイルドカード以外の文字はリテラル文字です。 たとえば、`searchPattern` 文字列 "\*t" は、末尾が文字 "t" である `path` 内のすべての名前を検索します。 `searchPattern` 文字列 "s\*" は、文字 "s" で始まる `path` 内のすべての名前を検索します。  
  
 `searchPattern` の末尾に2つのピリオド ("..") を指定することはできません。また、2つのピリオド ("..") に続けて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>を含めることも、無効な文字を含めることもできません。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
> [!NOTE]
>  "\*.txt" などの `searchPattern` でアスタリスクのワイルドカード文字を使用すると、指定した拡張機能の文字数は次のようになります。  
>   
> -   指定された拡張子の長さが完全に3文字である場合、メソッドは、指定された拡張子で始まる拡張子を持つファイルを返します。 たとえば、"\*. .xls" は、"book. .xls" と "book" の両方を返します。  
> -   それ以外の場合、メソッドは、指定された拡張子と完全に一致するファイルを返します。 たとえば、"\*" は "file.ai" を返しますが、"file. aif" は返しません。  
>   
>  疑問符のワイルドカード文字を使用すると、このメソッドは、指定されたファイル拡張子に一致するファイルだけを返します。 たとえば、"file1" と "file1" の2つのファイルがある場合、ディレクトリでは "file?" という検索パターンが使用されます。txt "は最初のファイルだけを返し、" file* .txt "の検索パターンは両方のファイルを返します。  
  
> [!NOTE]
>  このメソッドは、8.3 ファイル名形式と長いファイル名形式の両方でファイル名をチェックするため、"\*1\*" のような検索パターンでは、予期しないファイル名が返されることがあります。 たとえば、"\*1\*.txt" という検索パターンを使用すると、8.3 ファイル名の形式が "LONGFILENAME ~ 1 .TXT" であるため、"longfilename. .txt" が返されます。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A> メソッドと <xref:System.IO.Directory.GetFiles%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateFiles%2A>を使用すると、コレクション全体が返される前に、名前のコレクションの列挙を開始できます。<xref:System.IO.Directory.GetFiles%2A>を使用するときは、配列にアクセスする前に、名前の配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateFiles%2A> の方が効率的です。  
  
 ファイル名には完全パスが含まれます。  
  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 <see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用して、正しくない文字に対するクエリを実行できます。  
  
または 
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> または <paramref name="searchpattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> は有効な <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが見つからないか正しくありません (たとえば、マップされていないドライブ上のパスなど)。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。  
  
または 
ネットワーク エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">現在のディレクトリのパス情報にアクセスします。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFileSystemEntries">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した条件を満たすすべてのファイル名とサブディレクトリ名を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFileSystemEntries">
      <MemberSignature Language="C#" Value="public static string[] GetFileSystemEntries (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFileSystemEntries(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFileSystemEntries(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileSystemEntries (path As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFileSystemEntries(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFileSystemEntries : string -&gt; string[]" Usage="System.IO.Directory.GetFileSystemEntries path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <summary>指定したパス内のすべてのファイル名とサブディレクトリ名を返します。</summary>
        <returns>指定したディレクトリ内ファイル名またはサブディレクトリ名の配列。ファイルやサブディレクトリが見つからない場合は、空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返されるファイル名とディレクトリ名の順序は保証されません。特定の並べ替え順序が必要な場合は、<xref:System.Array.Sort%2A> メソッドを使用します。  
  
 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> メソッドと <xref:System.IO.Directory.GetFileSystemEntries%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>を使用すると、コレクション全体が返される前にエントリのコレクションの列挙を開始できます。<xref:System.IO.Directory.GetFileSystemEntries%2A>を使用する場合、配列にアクセスするには、エントリの配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateFiles%2A> の方が効率的です。  
  
 このメソッドは、検索パターンとしてアスタリスク (\*) が指定されている <xref:System.IO.Directory.GetFileSystemEntries%2A> と同じです。  
  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例では、<xref:System.IO.Directory.GetFileSystemEntries%2A> メソッドを使用して、文字列の配列に、ユーザーが指定した場所にあるすべてのファイルとサブディレクトリの名前を入力し、配列内の各文字列をコンソールに出力します。 この例は、このメソッドに共通するすべてのエラーをキャッチするように構成されています。  
  
 [!code-cpp[System.IO.Directory#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Directory/CPP/class1.cpp#1)]
 [!code-csharp[System.IO.Directory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class1.cs#1)]
 [!code-vb[System.IO.Directory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 <see cref="M:System.IO.Path.GetInvalidPathChars" /> を使用して、正しくない文字に対するクエリを実行できます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">現在のディレクトリのパス情報にアクセスします。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <altmember cref="T:System.IO.FileSystemInfo" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="GetFileSystemEntries">
      <MemberSignature Language="C#" Value="public static string[] GetFileSystemEntries (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFileSystemEntries(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileSystemEntries (path As String, searchPattern As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFileSystemEntries(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member GetFileSystemEntries : string * string -&gt; string[]" Usage="System.IO.Directory.GetFileSystemEntries (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern"><paramref name="path" /> 内のファイルおよびディレクトリの名前と照合する検索文字列。  このパラメーターには有効なリテラルのパスとワイルドカード (* と ?) 文字の組み合わせを含めることができますが、正規表現はサポートされていません。</param>
        <summary>指定されたパスから、検索パターンに一致するファイル名とディレクトリ名の配列を返します。</summary>
        <returns>指定した検索条件に一致するファイル名またはディレクトリ名の配列。ファイルやディレクトリが見つからない場合は、空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返されるファイル名とディレクトリ名の順序は保証されません。特定の並べ替え順序が必要な場合は、<xref:System.Array.Sort%2A> メソッドを使用します。  
  
 `searchPattern` には、リテラル文字とワイルドカード文字の組み合わせを使用できますが、正規表現はサポートされていません。 `searchPattern`では、次のワイルドカード指定子を使用できます。  
  
|ワイルドカード指定子|一致件数|  
|------------------------|-------------|  
|\* (アスタリスク)|その位置に0個以上の文字が含まれています。|  
|? (疑問符)|その位置に0個または1個の文字。|  
  
 ワイルドカード以外の文字はリテラル文字です。 たとえば、`searchPattern` 文字列 "\*t" は、末尾が文字 "t" である `path` 内のすべての名前を検索します。 `searchPattern` 文字列 "s\*" は、文字 "s" で始まる `path` 内のすべての名前を検索します。  
  
 `searchPattern` の末尾に2つのピリオド ("..") を指定することはできません。また、2つのピリオド ("..") に続けて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>を含めることも、無効な文字を含めることもできません。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
> [!NOTE]
>  "\*.txt" などの `searchPattern` でアスタリスクのワイルドカード文字を使用すると、指定した拡張機能の文字数は次のようになります。  
>   
> -   指定された拡張子の長さが完全に3文字である場合、メソッドは、指定された拡張子で始まる拡張子を持つファイルを返します。 たとえば、"\*. .xls" は、"book. .xls" と "book" の両方を返します。  
> -   それ以外の場合、メソッドは、指定された拡張子と完全に一致するファイルを返します。 たとえば、"\*" は "file.ai" を返しますが、"file. aif" は返しません。  
>   
>  疑問符のワイルドカード文字を使用すると、このメソッドは、指定されたファイル拡張子に一致するファイルだけを返します。 たとえば、"file1" と "file1" の2つのファイルがある場合、ディレクトリでは "file?" という検索パターンが使用されます。txt "は、最初のファイルだけを返します。一方、" file\*.txt "の検索パターンは両方のファイルを返します。  
  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例では、<xref:System.IO.Directory.GetFileSystemEntries%2A> メソッドを使用して、文字列の配列に、特定の場所のユーザー指定のフィルターに一致するすべてのファイルの名前を入力し、配列内の各文字列をコンソールに出力します。 この例は、このメソッドに共通するすべてのエラーをキャッチするように構成されています。  
  
 [!code-cpp[System.IO.Directory#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Directory/CPP/class1.cpp#2)]
 [!code-csharp[System.IO.Directory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class1.cs#2)]
 [!code-vb[System.IO.Directory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 <see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用して、正しくない文字に対するクエリを実行できます。  
  
または 
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> または <paramref name="searchPattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">現在のディレクトリのパス情報にアクセスします。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <altmember cref="T:System.IO.FileSystemInfo" />
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="GetFileSystemEntries">
      <MemberSignature Language="C#" Value="public static string[] GetFileSystemEntries (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFileSystemEntries(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFileSystemEntries(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member GetFileSystemEntries : string * string * System.IO.EnumerationOptions -&gt; string[]" Usage="System.IO.Directory.GetFileSystemEntries (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="searchPattern">To be added.</param>
        <param name="enumerationOptions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileSystemEntries">
      <MemberSignature Language="C#" Value="public static string[] GetFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFileSystemEntries(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFileSystemEntries(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member GetFileSystemEntries : string * string * System.IO.SearchOption -&gt; string[]" Usage="System.IO.Directory.GetFileSystemEntries (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern"><paramref name="path" /> 内のファイルおよびディレクトリの名前と照合する検索文字列。  このパラメーターには有効なリテラルのパスとワイルドカード (* と ?) 文字の組み合わせを含めることができますが、正規表現はサポートされていません。</param>
        <param name="searchOption">検索操作に現在のディレクトリのみを含めるのか、またはすべてのサブディレクトリを含めるのかを指定する列挙値の 1 つ。  
  
既定値は <see cref="F:System.IO.SearchOption.TopDirectoryOnly" /> です。</param>
        <summary>指定されたパスにあるファイルおよびディレクトリのうち、検索パターンに一致するすべてのファイル名およびディレクトリ名の配列を返します。オプションでサブディレクトリを検索対象にすることができます。</summary>
        <returns>指定した検索条件に一致するファイル名またはディレクトリ名の配列。ファイルやディレクトリが見つからない場合は、空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返されるファイル名とディレクトリ名の順序は保証されません。特定の並べ替え順序が必要な場合は、<xref:System.Array.Sort%2A> メソッドを使用します。  
  
 `searchPattern` には、リテラル文字とワイルドカード文字の組み合わせを使用できますが、正規表現はサポートされていません。 `searchPattern`では、次のワイルドカード指定子を使用できます。  
  
|ワイルドカード指定子|一致件数|  
|------------------------|-------------|  
|\* (アスタリスク)|その位置に0個以上の文字が含まれています。|  
|? (疑問符)|その位置に0個または1個の文字。|  
  
 ワイルドカード以外の文字はリテラル文字です。 たとえば、`searchPattern` 文字列 "\*t" は、末尾が文字 "t" である `path` 内のすべての名前を検索します。 `searchPattern` 文字列 "s\*" は、文字 "s" で始まる `path` 内のすべての名前を検索します。  
  
 `searchPattern` の末尾に2つのピリオド ("..") を指定することはできません。また、2つのピリオド ("..") に続けて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>を含めることも、無効な文字を含めることもできません。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
> [!NOTE]
>  "\*.txt" などの `searchPattern` でアスタリスクのワイルドカード文字を使用すると、指定した拡張機能の文字数は次のようになります。  
>   
> -   指定された拡張子の長さが完全に3文字である場合、メソッドは、指定された拡張子で始まる拡張子を持つファイルを返します。 たとえば、"\*. .xls" は、"book. .xls" と "book" の両方を返します。  
> -   それ以外の場合、メソッドは、指定された拡張子と完全に一致するファイルを返します。 たとえば、"\*" は "file.ai" を返しますが、"file. aif" は返しません。  
>   
>  疑問符のワイルドカード文字を使用すると、このメソッドは、指定されたファイル拡張子に一致するファイルだけを返します。 たとえば、"file1" と "file1" の2つのファイルがある場合、ディレクトリでは "file?" という検索パターンが使用されます。txt "は、最初のファイルだけを返します。一方、" file\*.txt "の検索パターンは両方のファイルを返します。  
  
 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> メソッドと <xref:System.IO.Directory.GetFileSystemEntries%2A> メソッドは次のように異なります。 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>を使用すると、コレクション全体が返される前にエントリのコレクションの列挙を開始できます。<xref:System.IO.Directory.GetFileSystemEntries%2A>を使用する場合、配列にアクセスするには、エントリの配列全体が返されるまで待機する必要があります。 そのため、多くのファイルとディレクトリを操作している場合、<xref:System.IO.Directory.EnumerateFiles%2A> の方が効率的です。  
  
 `path` パラメーターを使用して相対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。これは、<xref:System.IO.Directory.GetCurrentDirectory%2A> メソッドを使用して判断できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字が使用されています。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
または 
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。  
  
または 
 <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> は有効な <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetLastAccessTime">
      <MemberSignature Language="C#" Value="public static DateTime GetLastAccessTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastAccessTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLastAccessTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastAccessTime (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetLastAccessTime(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetLastAccessTime : string -&gt; DateTime" Usage="System.IO.Directory.GetLastAccessTime path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">アクセス日時情報を取得する対象のファイルまたはディレクトリ。</param>
        <summary>指定したファイルまたはディレクトリに最後にアクセスした日付と時刻を返します。</summary>
        <returns>指定されたファイルまたはディレクトリが最後にアクセスされた日時に設定された構造体。 この値は現地時刻で表示されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このメソッドは、値がオペレーティングシステムによって継続的に更新されないネイティブ関数を使用するため、不正確な値を返す場合があります。  
  
 このメソッドは <xref:System.IO.File.GetLastAccessTime%2A?displayProperty=nameWithType>と同じです。  
  
 `path` パラメーターに記述されているディレクトリが存在しない場合、このメソッドは 1601 A.D. 年1月1日午前0時12:00 を返します。 西暦協定世界時 (UTC)。現地時刻に調整されます。  
  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例では、`GetLastAccessTime`を使用する方法を示します。  
  
 [!code-cpp[Dir_GetLastAccess#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetLastAccess/CPP/dir_getlastaccess.cpp#1)]
 [!code-csharp[Dir_GetLastAccess#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetLastAccess/CS/dir_getlastaccess.cs#1)]
 [!code-vb[Dir_GetLastAccess#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetLastAccess/VB/dir_getlastaccess.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 <see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用して、正しくない文字に対するクエリを実行できます。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="path" /> パラメーターの形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">指定したファイルまたはディレクトリを読み取るために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="GetLastAccessTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetLastAccessTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastAccessTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLastAccessTimeUtc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastAccessTimeUtc (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetLastAccessTimeUtc(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetLastAccessTimeUtc : string -&gt; DateTime" Usage="System.IO.Directory.GetLastAccessTimeUtc path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">アクセス日時情報を取得する対象のファイルまたはディレクトリ。</param>
        <summary>指定されたファイルまたはディレクトリが最後にアクセスされた日付と時刻を世界協定時刻 (UTC) 形式で返します。</summary>
        <returns>指定されたファイルまたはディレクトリが最後にアクセスされた日時に設定された構造体。 この値は UTC 時刻で表記されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このメソッドは、値がオペレーティングシステムによって継続的に更新されないネイティブ関数を使用するため、不正確な値を返す場合があります。  
  
 `path` パラメーターに記述されているディレクトリが存在しない場合、このメソッドは 1601 A.D. 年1月1日午前0時12:00 を返します。 西暦協定世界時 (UTC)。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例は、協定世界時 (UTC) の出力を使用する場合の出力の違いを示しています。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="path" /> パラメーターの形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">指定したファイルまたはディレクトリを読み取るために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="GetLastWriteTime">
      <MemberSignature Language="C#" Value="public static DateTime GetLastWriteTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastWriteTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLastWriteTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastWriteTime (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetLastWriteTime(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetLastWriteTime : string -&gt; DateTime" Usage="System.IO.Directory.GetLastWriteTime path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">変更日時情報を取得する対象のファイルまたはディレクトリ。</param>
        <summary>指定したファイルまたはディレクトリに最後に書き込んだ日付と時刻を返します。</summary>
        <returns>指定したファイルまたはディレクトリに最後に書き込んだ日時に設定された構造体。 この値は現地時刻で表示されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このメソッドは、値がオペレーティングシステムによって継続的に更新されないネイティブ関数を使用するため、不正確な値を返す場合があります。  
  
 `path` パラメーターに記述されているディレクトリが存在しない場合、このメソッドは 1601 A.D. 年1月1日午前0時12:00 を返します。 西暦協定世界時 (UTC)。現地時刻に調整されます。  
  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例では、`GetLastWriteTime`を使用する方法を示します。  
  
 [!code-cpp[Dir_GetLastWrite#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetLastWrite/CPP/dir_getlastwrite.cpp#1)]
 [!code-csharp[Dir_GetLastWrite#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetLastWrite/CS/dir_getlastwrite.cs#1)]
 [!code-vb[Dir_GetLastWrite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetLastWrite/VB/dir_getlastwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">指定したファイルまたはディレクトリを読み取るために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="GetLastWriteTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetLastWriteTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastWriteTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLastWriteTimeUtc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastWriteTimeUtc (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetLastWriteTimeUtc(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetLastWriteTimeUtc : string -&gt; DateTime" Usage="System.IO.Directory.GetLastWriteTimeUtc path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">変更日時情報を取得する対象のファイルまたはディレクトリ。</param>
        <summary>指定したファイルまたはディレクトリに最後に書き込んだ日付と時刻を世界協定時刻 (UTC) 形式で返します。</summary>
        <returns>指定したファイルまたはディレクトリに最後に書き込んだ日時に設定された構造体。 この値は UTC 時刻で表記されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このメソッドは、値がオペレーティングシステムによって継続的に更新されないネイティブ関数を使用するため、不正確な値を返す場合があります。  
  
 `path` パラメーターに記述されているディレクトリが存在しない場合、このメソッドは 1601 A.D. 年1月1日午前0時12:00 を返します。 西暦協定世界時 (UTC)。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例は、協定世界時 (UTC) の出力を使用する場合の出力の違いを示しています。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">指定したファイルまたはディレクトリを読み取るために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="GetLogicalDrives">
      <MemberSignature Language="C#" Value="public static string[] GetLogicalDrives ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetLogicalDrives() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLogicalDrives" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLogicalDrives () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetLogicalDrives();" />
      <MemberSignature Language="F#" Value="static member GetLogicalDrives : unit -&gt; string[]" Usage="System.IO.Directory.GetLogicalDrives " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このコンピューターの論理ドライブ名を "&lt;ドライブ文字&gt;:\\" の形式で取得します。</summary>
        <returns>このコンピューターの論理ドライブ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 GetLogicalDrives は、フロッピードライブや光学ドライブなど、特定のコンピューター上のアクセス可能なすべてのドライブを返します。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例では、<xref:System.IO.Directory.GetLogicalDrives%2A> メソッドを使用して、呼び出し元のコンピューターの各ドライブの名前を文字列の配列に割り当てます。 この文字列配列の各メンバーは、コンソールに出力されます。 この例は、このメソッドに共通するすべてのエラーをキャッチするように構成されています。  
  
 [!code-cpp[System.IO.Directory#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Directory/CPP/class1.cpp#3)]
 [!code-csharp[System.IO.Directory#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class1.cs#3)]
 [!code-vb[System.IO.Directory#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました (ディスク エラーなど)。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">PInvoke または COM 相互運用機能を使用したネイティブコードの呼び出しなど、アンマネージコードを呼び出す。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.IO.DirectoryInfo GetParent (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.DirectoryInfo GetParent(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetParent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (path As String) As DirectoryInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::DirectoryInfo ^ GetParent(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetParent : string -&gt; System.IO.DirectoryInfo" Usage="System.IO.Directory.GetParent path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">親ディレクトリを取得する対象のパス。</param>
        <summary>絶対パスと相対パスの両方を含む指定したパスの親ディレクトリを取得します。</summary>
        <returns>親ディレクトリ。または <see langword="null" /> が UNC サーバーや共有名のルートを含むルート ディレクトリの場合は <paramref name="path" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 末尾のスペースは、ディレクトリを取得する前に `path` パラメーターの末尾から削除されます。  
  
 このメソッドによって返される文字列は、パス内の最後の <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>を除くすべての文字で構成されます。 たとえば、パス "C:\Directory\SubDirectory\test.txt" を <xref:System.IO.Directory.GetParent%2A> に渡すと、"C:\Directory\SubDirectory" が返されます。 "C:\Directory\SubDirectory" を渡すと、"C:\ ディレクトリ" が返されます。 ただし、"C:\Directory\SubDirectory\\" を渡すと、"C:\Directory\SubDirectory" が返されます。これは、終了ディレクトリの区切り記号が "サブディレクトリ" の後にあるためです。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例では、<xref:System.IO.Directory.GetParent%2A> メソッドを使用して、ユーザー指定の場所 "path" の親ディレクトリを取得する方法を示します。 <xref:System.IO.Directory.GetParent%2A> メソッドによって返された値がコンソールに出力されます。 この例は、このメソッドに共通するすべてのエラーをキャッチするように構成されています。  
  
 [!code-cpp[System.IO.Directory#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Directory/CPP/class1.cpp#4)]
 [!code-csharp[System.IO.Directory#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class1.cs#4)]
 [!code-vb[System.IO.Directory#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> によって指定されたディレクトリは読み取り専用です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 詳細については、「<see cref="T:System.IO.PathTooLongException" />」を参照してください。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.Security.SecurityException">.NET Framework のみ: 呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルまたはディレクトリから読み取るために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.DirectoryInfo" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public static void Move (string sourceDirName, string destDirName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Move(string sourceDirName, string destDirName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.Move(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Move (sourceDirName As String, destDirName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Move(System::String ^ sourceDirName, System::String ^ destDirName);" />
      <MemberSignature Language="F#" Value="static member Move : string * string -&gt; unit" Usage="System.IO.Directory.Move (sourceDirName, destDirName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirName" Type="System.String" />
        <Parameter Name="destDirName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirName">移動するファイルまたはディレクトリのパス。</param>
        <param name="destDirName"><paramref name="sourceDirName" /> の新しい位置へのパス。 <paramref name="sourceDirName" /> がファイルの場合は、<paramref name="destDirName" /> もファイル名にする必要があります。</param>
        <summary>ファイルまたはディレクトリ、およびその内容を新しい場所に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`destDirName` によって指定された名前で新しいディレクトリを作成し、`sourceDirName` の内容を新しく作成されたコピー先ディレクトリに移動します。 既に存在するディレクトリにディレクトリを移動しようとすると、<xref:System.IO.IOException> が発生します。 たとえば、c:\mydir を c:\ に移動しようとした場合に例外が発生し、c:\ public が既に存在しているとします。 または、"c:\\\ public\\\mydir" を `destDirName` パラメーターとして指定することもできます ("mydir" が "c:\\\ パブリック" の下に存在しない場合)。または、"c:\\/newdir" のような新しいディレクトリ名を指定することもできます。  
  
 `sourceDirName` 引数と `destDirName` 引数では、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 ディレクトリを移動する前に、パスパラメーターの末尾から末尾のスペースが削除されます。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  


> [!NOTE]
>  .NET Core 3.0 以降、`Move` メソッドは、`destDirName` が既に存在する場合に、すべてのプラットフォームで <xref:System.IO.IOException> をスローします。 .NET Core 2.2 およびそれ以前のバージョンでは、Windows 上でのみ例外がスローされ、その他のプラットフォームでは `destDirName`が失敗するか上書きされる可能性がありました。 「 [ C++名前の変更](https://linux.die.net/man/2/rename)」を参照してください。
   
  
## Examples  
 次の例では、ディレクトリとそのすべてのファイルを新しいディレクトリに移動する方法を示します。 移動後に元のディレクトリは存在しなくなりました。  
  
 [!code-csharp[System.IO.Directory#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class6.cs#14)]
 [!code-vb[System.IO.Directory#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class6.vb#14)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ディレクトリを別のボリュームに移動しようとしました。
  
または 
 <paramref name="destDirName" /> が既に存在します。 「解説」セクションの注意を参照してください。
  
または 
<paramref name="sourceDirName" /> パラメーターと <paramref name="destDirName" /> パラメーターが、同じファイルまたはディレクトリを参照しています。  
  
または 
ディレクトリ、またはそのディレクトリ内のファイルが別のプロセスによって使用されています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="sourceDirName" /> または <paramref name="destDirName" /> は長さ 0 の文字列で、空白のみで構成されているか、正しくない文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirName" /> または <paramref name="destDirName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceDirName" /> で指定されたパスが、マップされていないドライブ上にあるなど、正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><paramref name="sourceDirName" /> から読み取り、<paramref name="sourceDirName" /> と <paramref name="destDirName" />への書き込みを行う場合。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public static void SetAccessControl (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAccessControl(string path, class System.Security.AccessControl.DirectorySecurity directorySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAccessControl(System::String ^ path, System::Security::AccessControl::DirectorySecurity ^ directorySecurity);" />
      <MemberSignature Language="F#" Value="static member SetAccessControl : string * System.Security.AccessControl.DirectorySecurity -&gt; unit" Usage="System.IO.Directory.SetAccessControl (path, directorySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="directorySecurity" Type="System.Security.AccessControl.DirectorySecurity" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">アクセス制御リスト (ACL) エントリの追加先または削除元となるディレクトリ。</param>
        <param name="directorySecurity"><see cref="T:System.Security.AccessControl.DirectorySecurity" /> パラメーターが示すディレクトリに適用する ACL エントリを表す <paramref name="path" /> オブジェクト。</param>
        <summary><see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクトが示すアクセス制御リスト (ACL: Access Control List) エントリを、指定したディレクトリに適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Directory.SetAccessControl%2A> メソッドは、継承されていない ACL リストを表すファイルにアクセス制御リスト (ACL) エントリを適用します。  
  
> [!CAUTION]
>  `directorySecurity` パラメーターに指定された ACL は、ディレクトリの既存の ACL を置き換えます。 新しいユーザーにアクセス許可を追加するには、<xref:System.IO.Directory.GetAccessControl%2A> メソッドを使用して既存の ACL を取得し、変更します。  
  
 ACL は、特定のファイルまたはディレクトリに対する特定の操作に対する権限を持っている、または所有していない個人やグループを記述します。 詳細については、「[方法: アクセス制御リスト エントリを追加または削除する](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)」を参照してください。  
  
 <xref:System.IO.Directory.SetAccessControl%2A> メソッドは、オブジェクトの作成後に変更された <xref:System.Security.AccessControl.DirectorySecurity> オブジェクトのみを保持します。  <xref:System.Security.AccessControl.DirectorySecurity> オブジェクトが変更されていない場合は、ファイルに保存されません。  そのため、1つのファイルから <xref:System.Security.AccessControl.DirectorySecurity> オブジェクトを取得し、別のファイルに同じオブジェクトを再適用することはできません。  
  
 ACL 情報をあるファイルから別のファイルにコピーするには、次のようにします。  
  
1.  <xref:System.IO.Directory.GetAccessControl%2A> メソッドを使用して、ソースファイルから <xref:System.Security.AccessControl.DirectorySecurity> オブジェクトを取得します。  
  
2.  コピー先ファイルの新しい <xref:System.Security.AccessControl.DirectorySecurity> オブジェクトを作成します。  
  
3.  ACL 情報を取得するには、ソース <xref:System.Security.AccessControl.DirectorySecurity> オブジェクトの <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A> または <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> メソッドを使用します。  
  
4.  手順 3. で取得した情報をターゲット <xref:System.Security.AccessControl.DirectorySecurity> オブジェクトにコピーするには、<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A> または <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> メソッドを使用します。  
  
5.  <xref:System.IO.Directory.SetAccessControl%2A> メソッドを使用して、変換先の <xref:System.Security.AccessControl.DirectorySecurity> オブジェクトを変換先ファイルに設定します。  
  
 NTFS 環境では、ユーザーが親フォルダーに対して <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 権限を持っている場合、<xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes> がユーザーに付与されます。 <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>を拒否するには、親ディレクトリの <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> を拒否します。  
  
   
  
## Examples  
 次の例では、<xref:System.IO.Directory.GetAccessControl%2A> と <xref:System.IO.Directory.SetAccessControl%2A> メソッドを使用してアクセス制御リスト (ACL) エントリを追加し、ディレクトリから ACL エントリを削除します。  この例を実行するには、有効なユーザーまたはグループ アカウントを指定する必要があります。  
  
 [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="directorySecurity" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが見つかりません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> が正しくありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">現在のプロセスには、<paramref name="path" /> で指定されたディレクトリへのアクセス権がありません。  
  
または 
現在のプロセスには、ACL エントリを設定するための十分な特権がありません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows 2000 以降ではありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ディレクトリのアクセス制御リスト (ACL) を列挙するアクセス許可。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" />、<see cref="F:System.Security.AccessControl.AccessControlActions.View" />  
  
セキュリティアクション: Demand。</permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetCreationTime">
      <MemberSignature Language="C#" Value="public static void SetCreationTime (string path, DateTime creationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCreationTime(string path, valuetype System.DateTime creationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetCreationTime(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCreationTime (path As String, creationTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCreationTime(System::String ^ path, DateTime creationTime);" />
      <MemberSignature Language="F#" Value="static member SetCreationTime : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetCreationTime (path, creationTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="creationTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">作成日時情報を設定する対象のファイルまたはディレクトリ。</param>
        <param name="creationTime">ファイルまたはディレクトリに最後に書き込んだ日付と時刻。 この値は現地時刻で表示されます。</param>
        <summary>指定したファイルまたはディレクトリの作成日時を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
   
  
## Examples  
 次の例は、協定世界時 (UTC) の出力を使用する場合の出力の違いを示しています。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> はこの操作に許可される日付または時刻の範囲外の値を指定しています。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows NT 以降ではありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">指定されたファイルまたはディレクトリに書き込むための。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="SetCreationTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetCreationTimeUtc (string path, DateTime creationTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCreationTimeUtc(string path, valuetype System.DateTime creationTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCreationTimeUtc (path As String, creationTimeUtc As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCreationTimeUtc(System::String ^ path, DateTime creationTimeUtc);" />
      <MemberSignature Language="F#" Value="static member SetCreationTimeUtc : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetCreationTimeUtc (path, creationTimeUtc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="creationTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">作成日時情報を設定する対象のファイルまたはディレクトリ。</param>
        <param name="creationTimeUtc">ディレクトリまたはファイルが作成された日時。 この値は現地時刻で表示されます。</param>
        <summary>指定したファイルまたはディレクトリの作成日時を世界協定時刻 (UTC) 形式で設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> はこの操作に許可される日付または時刻の範囲外の値を指定しています。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows NT 以降ではありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">指定されたファイルまたはディレクトリに書き込むための。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="SetCurrentDirectory">
      <MemberSignature Language="C#" Value="public static void SetCurrentDirectory (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCurrentDirectory(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetCurrentDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCurrentDirectory (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCurrentDirectory(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member SetCurrentDirectory : string -&gt; unit" Usage="System.IO.Directory.SetCurrentDirectory path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">現在の作業ディレクトリが設定されるパス。</param>
        <summary>アプリケーションの現在の作業ディレクトリを指定したディレクトリに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションが終了すると、作業ディレクトリが元の場所 (プロセスが開始されたディレクトリ) に復元されます。  
  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 末尾のスペースは、ディレクトリを設定する前に `path` パラメーターの末尾から削除されます。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 リムーバブルメディアを使用してディレクトリをドライブに設定している場合 (たとえば、USB フラッシュドライブの場合は "E:")、[<xref:System.IO.DriveInfo.IsReady%2A>] プロパティを使用してドライブの準備ができているかどうかを確認できます。  
  
   
  
## Examples  
 次の例は、現在のディレクトリを設定し、ディレクトリのルートを表示する方法を示しています。  
  
 [!code-cpp[System.IO.DirectoryRoot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.DirectoryRoot/CPP/example.cpp#1)]
 [!code-csharp[System.IO.DirectoryRoot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.DirectoryRoot/CS/example.cs#1)]
 [!code-vb[System.IO.DirectoryRoot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.DirectoryRoot/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し側に、アンマネージ コードへのアクセスに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたディレクトリが見つかりませんでした。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルまたはディレクトリへの書き込みに使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すための。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="SetLastAccessTime">
      <MemberSignature Language="C#" Value="public static void SetLastAccessTime (string path, DateTime lastAccessTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastAccessTime(string path, valuetype System.DateTime lastAccessTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLastAccessTime (path As String, lastAccessTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLastAccessTime(System::String ^ path, DateTime lastAccessTime);" />
      <MemberSignature Language="F#" Value="static member SetLastAccessTime : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetLastAccessTime (path, lastAccessTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastAccessTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">アクセス日時情報を設定する対象のファイルまたはディレクトリ。</param>
        <param name="lastAccessTime"><paramref name="path" /> のアクセス日時の設定値を含むオブジェクト。 この値は現地時刻で表示されます。</param>
        <summary>指定したファイルまたはディレクトリに最後にアクセスした日付と時刻を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例では、`SetLastAccessTime`を使用する方法を示します。  
  
 [!code-cpp[Dir_SetLastAccess#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_SetLastAccess/CPP/dir_setlastaccess.cpp#1)]
 [!code-csharp[Dir_SetLastAccess#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_SetLastAccess/CS/dir_setlastaccess.cs#1)]
 [!code-vb[Dir_SetLastAccess#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_SetLastAccess/VB/dir_setlastaccess.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows NT 以降ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTime" /> はこの操作に許可される日付または時刻の範囲外の値を指定しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">指定されたファイルまたはディレクトリに書き込むための。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="SetLastAccessTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetLastAccessTimeUtc (string path, DateTime lastAccessTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastAccessTimeUtc(string path, valuetype System.DateTime lastAccessTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLastAccessTimeUtc (path As String, lastAccessTimeUtc As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLastAccessTimeUtc(System::String ^ path, DateTime lastAccessTimeUtc);" />
      <MemberSignature Language="F#" Value="static member SetLastAccessTimeUtc : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetLastAccessTimeUtc (path, lastAccessTimeUtc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastAccessTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">アクセス日時情報を設定する対象のファイルまたはディレクトリ。</param>
        <param name="lastAccessTimeUtc"><paramref name="path" /> のアクセス日時の設定値を含むオブジェクト。 この値は UTC 時刻で表記されます。</param>
        <summary>指定したファイルまたはディレクトリに最後にアクセスした日付と時刻を世界協定時刻 (UTC) 形式で設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例は、協定世界時 (UTC) の出力を使用する場合の出力の違いを示しています。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows NT 以降ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTimeUtc" /> はこの操作に許可される日付または時刻の範囲外の値を指定しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">指定されたファイルまたはディレクトリに書き込むための。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="SetLastWriteTime">
      <MemberSignature Language="C#" Value="public static void SetLastWriteTime (string path, DateTime lastWriteTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastWriteTime(string path, valuetype System.DateTime lastWriteTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLastWriteTime (path As String, lastWriteTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLastWriteTime(System::String ^ path, DateTime lastWriteTime);" />
      <MemberSignature Language="F#" Value="static member SetLastWriteTime : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetLastWriteTime (path, lastWriteTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastWriteTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">ディレクトリのパス。</param>
        <param name="lastWriteTime">ディレクトリに最後に書き込んだ日付と時刻。 この値は現地時刻で表示されます。</param>
        <summary>ディレクトリに最後に書き込んだ日付と時刻を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例では、`SetLastWriteTime`を使用する方法を示します。  
  
 [!code-cpp[Dir_SetLastWrite#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_SetLastWrite/CPP/dir_setlastwrite.cpp#1)]
 [!code-csharp[Dir_SetLastWrite#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_SetLastWrite/CS/dir_setlastwrite.cs#1)]
 [!code-vb[Dir_SetLastWrite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_SetLastWrite/VB/dir_setlastwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="path" /> が見つかりませんでした (たとえば、ディレクトリが存在しない、またはマップされていないドライブにあるなど)。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> が見つかりませんでした (たとえば、ディレクトリが存在しない、またはマップされていないドライブにあるなど)。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows NT 以降ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTime" /> はこの操作に許可される日付または時刻の範囲外の値を指定しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">指定されたファイルまたはディレクトリに書き込むための。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
    <Member MemberName="SetLastWriteTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetLastWriteTimeUtc (string path, DateTime lastWriteTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastWriteTimeUtc(string path, valuetype System.DateTime lastWriteTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLastWriteTimeUtc (path As String, lastWriteTimeUtc As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLastWriteTimeUtc(System::String ^ path, DateTime lastWriteTimeUtc);" />
      <MemberSignature Language="F#" Value="static member SetLastWriteTimeUtc : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetLastWriteTimeUtc (path, lastWriteTimeUtc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastWriteTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">ディレクトリのパス。</param>
        <param name="lastWriteTimeUtc">ディレクトリに最後に書き込んだ日付と時刻。 この値は UTC 時刻で表記されます。</param>
        <summary>ディレクトリに最後に書き込んだ日付と時刻を世界協定時刻 (UTC) 形式で設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` パラメーターでは、相対パスまたは絶対パス情報を指定できます。 相対パス情報は、現在の作業ディレクトリを基準として解釈されます。 現在の作業ディレクトリを取得するには、「<xref:System.IO.Directory.GetCurrentDirectory%2A>」を参照してください。  
  
 `path` パラメーターでは、大文字と小文字は区別されません。  
  
 共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。  
  
   
  
## Examples  
 次の例は、協定世界時 (UTC) の出力を使用する場合の出力の違いを示しています。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="path" /> が見つかりませんでした (たとえば、ディレクトリが存在しない、またはマップされていないドライブにあるなど)。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> が見つかりませんでした (たとえば、ディレクトリが存在しない、またはマップされていないドライブにあるなど)。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows NT 以降ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTimeUtc" /> はこの操作に許可される日付または時刻の範囲外の値を指定しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">指定されたファイルまたはディレクトリに書き込むための。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="~/docs/standard/io/index.md">ファイルおよびストリーム入出力</related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md">方法 : ファイルからテキストを読み取る</related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md">方法 : ファイルにテキストを書き込む</related>
      </Docs>
    </Member>
  </Members>
</Type>
