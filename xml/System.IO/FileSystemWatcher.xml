<Type Name="FileSystemWatcher" FullName="System.IO.FileSystemWatcher">
  <Metadata><Meta Name="ms.openlocfilehash" Value="495426ea0fe1406df39d5fe7a65d8b1e252cb591" /><Meta Name="ms.sourcegitcommit" Value="8b09499854b5b7b909802126edc1f1fca0054c10" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/01/2020" /><Meta Name="ms.locfileid" Value="76946309" /></Metadata><TypeSignature Language="C#" Value="public class FileSystemWatcher : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileSystemWatcher extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.IO.FileSystemWatcher" />
  <TypeSignature Language="VB.NET" Value="Public Class FileSystemWatcher&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystemWatcher : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type FileSystemWatcher = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
      <AttributeName>System.ComponentModel.DefaultEvent("Changed")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName>System.IO.IODescription("")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.IO.IODescription("FileSystemWatcherDesc")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="38510-101">ファイル システムの変更通知を待機し、ディレクトリまたはディレクトリ内のファイルが変更されたときにイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="38510-101">Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-102"><xref:System.IO.FileSystemWatcher> を使用して、指定したディレクトリの変更を監視します。</span><span class="sxs-lookup"><span data-stu-id="38510-102">Use <xref:System.IO.FileSystemWatcher> to watch for changes in a specified directory.</span></span> <span data-ttu-id="38510-103">指定されたディレクトリのファイルおよびサブディレクトリの変更を監視できます。</span><span class="sxs-lookup"><span data-stu-id="38510-103">You can watch for changes in files and subdirectories of the specified directory.</span></span> <span data-ttu-id="38510-104">コンポーネントを作成して、ローカルコンピューター、ネットワークドライブ、またはリモートコンピューター上のファイルを監視することができます。</span><span class="sxs-lookup"><span data-stu-id="38510-104">You can create a component to watch files on a local computer, a network drive, or a remote computer.</span></span>  
  
 <span data-ttu-id="38510-105">すべてのファイルの変更を監視するには、<xref:System.IO.FileSystemWatcher.Filter%2A> プロパティを空の文字列 ("") に設定するか、ワイルドカード ("\*" を使用します。\*")。</span><span class="sxs-lookup"><span data-stu-id="38510-105">To watch for changes in all files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to an empty string ("") or use wildcards ("\*.\*").</span></span> <span data-ttu-id="38510-106">特定のファイルを監視するには、[<xref:System.IO.FileSystemWatcher.Filter%2A>] プロパティにファイル名を設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-106">To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.</span></span> <span data-ttu-id="38510-107">たとえば、MyDoc ファイルの変更を監視するには、<xref:System.IO.FileSystemWatcher.Filter%2A> プロパティを "MyDoc" に設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-107">For example, to watch for changes in the file MyDoc.txt, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "MyDoc.txt".</span></span> <span data-ttu-id="38510-108">また、特定の種類のファイルの変更を監視することもできます。</span><span class="sxs-lookup"><span data-stu-id="38510-108">You can also watch for changes in a certain type of file.</span></span> <span data-ttu-id="38510-109">たとえば、テキストファイルの変更を監視するには、[<xref:System.IO.FileSystemWatcher.Filter%2A>] プロパティを "\*" に設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-109">For example, to watch for changes in text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "\*.txt".</span></span>  
  
 <span data-ttu-id="38510-110">ディレクトリまたはファイルで監視できる変更には、いくつかの種類があります。</span><span class="sxs-lookup"><span data-stu-id="38510-110">There are several types of changes you can watch for in a directory or file.</span></span> <span data-ttu-id="38510-111">たとえば、`Attributes`の変更、`LastWrite` の日付と時刻、ファイルまたはディレクトリの `Size` を監視できます。</span><span class="sxs-lookup"><span data-stu-id="38510-111">For example, you can watch for changes in `Attributes`, the `LastWrite` date and time, or the `Size` of files or directories.</span></span> <span data-ttu-id="38510-112">これを行うには、[<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>] プロパティを <xref:System.IO.NotifyFilters> の値のいずれかに設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-112">This is done by setting the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> property to one of the <xref:System.IO.NotifyFilters> values.</span></span> <span data-ttu-id="38510-113">監視できる変更の種類の詳細については、「<xref:System.IO.NotifyFilters>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="38510-113">For more information on the type of changes you can watch, see <xref:System.IO.NotifyFilters>.</span></span>  
  
 <span data-ttu-id="38510-114">ファイルまたはディレクトリの名前変更、削除、または作成を監視できます。</span><span class="sxs-lookup"><span data-stu-id="38510-114">You can watch for renaming, deletion, or creation of files or directories.</span></span> <span data-ttu-id="38510-115">たとえば、テキストファイルの名前変更を監視するには、<xref:System.IO.FileSystemWatcher.Filter%2A> プロパティを "\* .txt" に設定し、パラメーターに指定された <xref:System.IO.WatcherChangeTypes.Renamed> を使用して <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="38510-115">For example, to watch for renaming of text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "\*.txt" and call the <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> method with a <xref:System.IO.WatcherChangeTypes.Renamed> specified for its parameter.</span></span>  
  
 <span data-ttu-id="38510-116">Windows オペレーティングシステムは、<xref:System.IO.FileSystemWatcher>によって作成されたバッファー内のファイル変更をコンポーネントに通知します。</span><span class="sxs-lookup"><span data-stu-id="38510-116">The Windows operating system notifies your component of file changes in a buffer created by the <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="38510-117">短時間で多くの変更が加えられた場合、バッファーがオーバーフローする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-117">If there are many changes in a short time, the buffer can overflow.</span></span> <span data-ttu-id="38510-118">これにより、コンポーネントはディレクトリの変更を追跡できなくなり、一括通知のみが提供されます。</span><span class="sxs-lookup"><span data-stu-id="38510-118">This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</span></span> <span data-ttu-id="38510-119"><xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> プロパティを使用してバッファーのサイズを大きくすると、ディスクにスワップできない非ページメモリからのものであるため、コストが高くなります。そのため、ファイル変更イベントを見逃すことがないように、バッファーのサイズを小さくしておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="38510-119">Increasing the size of the buffer with the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property is expensive, as it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small yet large enough to not miss any file change events.</span></span> <span data-ttu-id="38510-120">バッファーオーバーフローを回避するには、<xref:System.IO.FileSystemWatcher.NotifyFilter%2A> プロパティと <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> プロパティを使用して、不要な変更通知を除外できるようにします。</span><span class="sxs-lookup"><span data-stu-id="38510-120">To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties so you can filter out unwanted change notifications.</span></span>  
  
 <span data-ttu-id="38510-121"><xref:System.IO.FileSystemWatcher>のインスタンスの初期プロパティ値の一覧については、<xref:System.IO.FileSystemWatcher.%23ctor%2A> コンストラクターを参照してください。</span><span class="sxs-lookup"><span data-stu-id="38510-121">For a list of initial property values for an instance of <xref:System.IO.FileSystemWatcher>, see the <xref:System.IO.FileSystemWatcher.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="38510-122"><xref:System.IO.FileSystemWatcher> クラスを使用する場合は、次の点に注意してください。</span><span class="sxs-lookup"><span data-stu-id="38510-122">Please note the following when using the <xref:System.IO.FileSystemWatcher> class.</span></span>  
  
-   <span data-ttu-id="38510-123">隠しファイルは無視されません。</span><span class="sxs-lookup"><span data-stu-id="38510-123">Hidden files are not ignored.</span></span>  
  
-   <span data-ttu-id="38510-124">システムによっては、<xref:System.IO.FileSystemWatcher> が短い8.3 ファイル名形式を使用してファイルに変更を報告する場合があります。</span><span class="sxs-lookup"><span data-stu-id="38510-124">In some systems, <xref:System.IO.FileSystemWatcher> reports changes to files using the short 8.3 file name format.</span></span> <span data-ttu-id="38510-125">たとえば、"LongFileName. Longfilename" への変更は、"LongFil ~ として報告される可能性があります。Lon "。</span><span class="sxs-lookup"><span data-stu-id="38510-125">For example, a change to  "LongFileName.LongExtension" could be reported as "LongFil~.Lon".</span></span>  
  
-   <span data-ttu-id="38510-126">このクラスには、リンク確認要求と、すべてのメンバーに適用されるクラス レベルの継承確認要求が含まれています。</span><span class="sxs-lookup"><span data-stu-id="38510-126">This class contains a link demand and an inheritance demand at the class level that applies to all members.</span></span> <span data-ttu-id="38510-127">直接の呼び出し元か派生クラスのいずれかに完全信頼アクセス許可がない場合、<xref:System.Security.SecurityException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="38510-127">A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission.</span></span> <span data-ttu-id="38510-128">セキュリティ要求の詳細については、「[リンク確認要求](~/docs/framework/misc/link-demands.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="38510-128">For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md).</span></span>  
  
-   <span data-ttu-id="38510-129">ネットワーク経由でディレクトリを監視するための <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> プロパティに設定できる最大サイズは 64 KB です。</span><span class="sxs-lookup"><span data-stu-id="38510-129">The maximum size you can set for the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property for monitoring a directory over the network is 64 KB.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38510-130">Windows 98 での <xref:System.IO.FileSystemWatcher> の実行はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="38510-130">Running <xref:System.IO.FileSystemWatcher> on Windows 98 is not supported.</span></span>  
  
## <a name="copying-and-moving-folders"></a><span data-ttu-id="38510-131">フォルダーのコピーと移動</span><span class="sxs-lookup"><span data-stu-id="38510-131">Copying and moving folders</span></span>  
 <span data-ttu-id="38510-132">オペレーティングシステムと <xref:System.IO.FileSystemWatcher> オブジェクトは、フォルダーとそのコンテンツの名前変更アクションとして、切り取りと貼り付け操作または移動操作を解釈します。</span><span class="sxs-lookup"><span data-stu-id="38510-132">The operating system and <xref:System.IO.FileSystemWatcher> object interpret a cut-and-paste action or a move action as a rename action for a folder and its contents.</span></span> <span data-ttu-id="38510-133">ファイルが含まれているフォルダーを切り取って、監視されているフォルダーに貼り付けると、<xref:System.IO.FileSystemWatcher> オブジェクトによって、フォルダーのみが新しいものとして報告されます。ただし、基本的には名前が変更されるだけであるためです。</span><span class="sxs-lookup"><span data-stu-id="38510-133">If you cut and paste a folder with files into a folder being watched, the <xref:System.IO.FileSystemWatcher> object reports only the folder as new, but not its contents because they are essentially only renamed.</span></span>  
  
 <span data-ttu-id="38510-134">フォルダーの内容が監視対象フォルダーに移動またはコピーされたことを通知するには、次の表に示すように、<xref:System.IO.FileSystemWatcher.OnChanged%2A> および <xref:System.IO.FileSystemWatcher.OnRenamed%2A> のイベントハンドラーメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="38510-134">To be notified that the contents of folders have been moved or copied into a watched folder, provide <xref:System.IO.FileSystemWatcher.OnChanged%2A> and <xref:System.IO.FileSystemWatcher.OnRenamed%2A> event handler methods as suggested in the following table.</span></span>  
  
|<span data-ttu-id="38510-135">イベント ハンドラー</span><span class="sxs-lookup"><span data-stu-id="38510-135">Event Handler</span></span>|<span data-ttu-id="38510-136">処理されたイベント</span><span class="sxs-lookup"><span data-stu-id="38510-136">Events Handled</span></span>|<span data-ttu-id="38510-137">パフォーマンス</span><span class="sxs-lookup"><span data-stu-id="38510-137">Performs</span></span>|  
|-------------------|--------------------|--------------|  
|<xref:System.IO.FileSystemWatcher.OnChanged%2A>|<span data-ttu-id="38510-138"><xref:System.IO.FileSystemWatcher.Changed>、 <xref:System.IO.FileSystemWatcher.Created>、 <xref:System.IO.FileSystemWatcher.Deleted></span><span class="sxs-lookup"><span data-stu-id="38510-138"><xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted></span></span>|<span data-ttu-id="38510-139">ファイル属性、作成されたファイル、および削除されたファイルの変更を報告します。</span><span class="sxs-lookup"><span data-stu-id="38510-139">Report changes in file attributes, created files, and deleted files.</span></span>|  
|<xref:System.IO.FileSystemWatcher.OnRenamed%2A>|<xref:System.IO.FileSystemWatcher.Renamed>|<span data-ttu-id="38510-140">名前を変更したファイルとフォルダーの古いパスと新しいパスを一覧表示し、必要に応じて再帰的に展開します。</span><span class="sxs-lookup"><span data-stu-id="38510-140">List the old and new paths of renamed files and folders, expanding recursively if needed.</span></span>|  
  
## <a name="events-and-buffer-sizes"></a><span data-ttu-id="38510-141">イベントとバッファーサイズ</span><span class="sxs-lookup"><span data-stu-id="38510-141">Events and Buffer Sizes</span></span>  
 <span data-ttu-id="38510-142">次に示すように、いくつかの要因によって、発生するファイルシステム変更イベントが影響を受ける場合があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="38510-142">Note that several factors can affect which file system change events are raised, as described by the following:</span></span>  
  
-   <span data-ttu-id="38510-143">一般的なファイルシステム操作では、複数のイベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-143">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="38510-144">たとえば、あるディレクトリから別のディレクトリにファイルを移動すると、いくつかの <xref:System.IO.FileSystemWatcher.OnChanged%2A> と <xref:System.IO.FileSystemWatcher.OnCreated%2A> と <xref:System.IO.FileSystemWatcher.OnDeleted%2A> イベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-144">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="38510-145">ファイルの移動は、複数の単純な操作で構成される複雑な操作であるため、複数のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-145">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="38510-146">同様に、一部のアプリケーション (ウイルス対策ソフトウェアなど) では、<xref:System.IO.FileSystemWatcher>によって検出された追加のファイルシステムイベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-146">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
-   <span data-ttu-id="38510-147"><xref:System.IO.FileSystemWatcher> は、スイッチまたは削除されていない限り、ディスクを監視できます。</span><span class="sxs-lookup"><span data-stu-id="38510-147">The <xref:System.IO.FileSystemWatcher> can watch disks as long as they are not switched or removed.</span></span> <span data-ttu-id="38510-148"><xref:System.IO.FileSystemWatcher> では、タイムスタンプとプロパティを変更できないため、Cd と Dvd のイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="38510-148">The <xref:System.IO.FileSystemWatcher> does not raise events for CDs and DVDs, because time stamps and properties cannot change.</span></span> <span data-ttu-id="38510-149">コンポーネントが正常に機能するためには、リモートコンピューターに必要なプラットフォームのいずれかがインストールされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="38510-149">Remote computers must have one of the required platforms installed for the component to function properly.</span></span>  
  
-   <span data-ttu-id="38510-150">複数の <xref:System.IO.FileSystemWatcher> オブジェクトが、Service Pack 1 または Windows 2000 SP2 以前の Windows XP で同じ UNC パスを監視している場合、1つのオブジェクトだけがイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="38510-150">If multiple <xref:System.IO.FileSystemWatcher> objects are watching the same UNC path in Windows XP prior to Service Pack 1, or Windows 2000 SP2 or earlier, then only one of the objects will raise an event.</span></span> <span data-ttu-id="38510-151">Windows XP SP1 以降、Windows 2000 SP3 以降、または Windows Server 2003 を実行しているコンピューターでは、すべての <xref:System.IO.FileSystemWatcher> オブジェクトが適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="38510-151">On machines running Windows XP SP1 and newer, Windows 2000 SP3 or newer or Windows Server 2003, all <xref:System.IO.FileSystemWatcher> objects will raise the appropriate events.</span></span>  
  
 <span data-ttu-id="38510-152">バッファーサイズを超えた場合、<xref:System.IO.FileSystemWatcher> によってイベントが発生する可能性があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="38510-152">Note that a <xref:System.IO.FileSystemWatcher> may miss an event when the buffer size is exceeded.</span></span> <span data-ttu-id="38510-153">見つからないイベントを回避するには、次のガイドラインに従ってください。</span><span class="sxs-lookup"><span data-stu-id="38510-153">To avoid missing events, follow these guidelines:</span></span>  
  
-   <span data-ttu-id="38510-154"><xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> プロパティを設定して、バッファーサイズを増やします。</span><span class="sxs-lookup"><span data-stu-id="38510-154">Increase the buffer size by setting the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property.</span></span>  
  
-   <span data-ttu-id="38510-155">長いファイル名によってバッファーがいっぱいになることがあるため、長いファイル名を使用してファイルを監視しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="38510-155">Avoid watching files with long file names, because a long file name contributes to filling up the buffer.</span></span> <span data-ttu-id="38510-156">短い名前を使用してファイルの名前を変更することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="38510-156">Consider renaming these files using shorter names.</span></span>  
  
-   <span data-ttu-id="38510-157">イベント処理コードをできるだけ短くしてください。</span><span class="sxs-lookup"><span data-stu-id="38510-157">Keep your event handling code as short as possible.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38510-158">次の例では、実行時に指定されたディレクトリを監視する <xref:System.IO.FileSystemWatcher> を作成します。</span><span class="sxs-lookup"><span data-stu-id="38510-158">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="38510-159">コンポーネントは、ディレクトリ内のテキストファイルの `LastWrite` と `LastAccess` 時刻、作成、削除、または名前変更を監視するように設定されています。</span><span class="sxs-lookup"><span data-stu-id="38510-159">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="38510-160">ファイルが変更、作成、または削除された場合、ファイルへのパスがコンソールに出力されます。</span><span class="sxs-lookup"><span data-stu-id="38510-160">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="38510-161">ファイルの名前を変更すると、古いパスと新しいパスがコンソールに出力されます。</span><span class="sxs-lookup"><span data-stu-id="38510-161">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="38510-162"><see cref="T:System.Diagnostics.ProcessStartInfo" /> クラスから派生する場合。</span><span class="sxs-lookup"><span data-stu-id="38510-162">for deriving from the <see cref="T:System.Diagnostics.ProcessStartInfo" /> class.</span></span> <span data-ttu-id="38510-163">要求の値: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />;名前付きアクセス許可セット: <see langword="FullTrust" />。</span><span class="sxs-lookup"><span data-stu-id="38510-163">Demand value: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />; Named Permission Sets: <see langword="FullTrust" />.</span></span></permission>
    <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
    <altmember cref="T:System.IO.NotifyFilters" />
    <altmember cref="T:System.IO.FileSystemEventArgs" />
    <altmember cref="T:System.IO.FileSystemEventHandler" />
    <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
    <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
    <altmember cref="T:System.IO.InternalBufferOverflowException" />
    <altmember cref="T:System.IO.RenamedEventArgs" />
    <altmember cref="T:System.IO.RenamedEventHandler" />
    <altmember cref="T:System.IO.WaitForChangedResult" />
    <altmember cref="T:System.IO.WatcherChangeTypes" />
    <related type="ExternalDocumentation" href="https://github.com/microsoftarchive/msdn-code-gallery-community-s-z/tree/master/Using%20a%20FileSystemWatcher%20Component%20in%20a%20Windows%20Form%20with%20C%23"><span data-ttu-id="38510-164">Windows フォームでの FileSystemWatcher コンポーネントの使用</span><span class="sxs-lookup"><span data-stu-id="38510-164">Using a FileSystemWatcher Component in a Windows Form</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="38510-165"><see cref="T:System.IO.FileSystemWatcher" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="38510-165">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemWatcher ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystemWatcher();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="38510-166"><see cref="T:System.IO.FileSystemWatcher" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="38510-166">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-167">Windows NT または Windows 2000 がインストールされていないリモートコンピューターを見ることはできません。</span><span class="sxs-lookup"><span data-stu-id="38510-167">You cannot watch a remote computer that does not have Windows NT or Windows 2000.</span></span> <span data-ttu-id="38510-168">Windows nt 4.0 コンピューターからリモートの Windows NT 4.0 コンピューターを視聴することはできません。</span><span class="sxs-lookup"><span data-stu-id="38510-168">You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</span></span>  
  
 <span data-ttu-id="38510-169">次の表に、<xref:System.IO.FileSystemWatcher>のインスタンスのプロパティの初期値を示します。</span><span class="sxs-lookup"><span data-stu-id="38510-169">The following table shows initial property values for an instance of <xref:System.IO.FileSystemWatcher>.</span></span>  
  
|<span data-ttu-id="38510-170">property</span><span class="sxs-lookup"><span data-stu-id="38510-170">Property</span></span>|<span data-ttu-id="38510-171">初期値</span><span class="sxs-lookup"><span data-stu-id="38510-171">Initial Value</span></span>|  
|--------------|-------------------|  
|<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>|<span data-ttu-id="38510-172">`LastWrite`、`FileName`、および `DirectoryName` のビットごとの OR の組み合わせ</span><span class="sxs-lookup"><span data-stu-id="38510-172">bitwise OR combination of `LastWrite`, `FileName`, and `DirectoryName`</span></span>|  
|<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>|`false`|  
|<xref:System.IO.FileSystemWatcher.Filter%2A>|<span data-ttu-id="38510-173">"\*.\*"(すべてのファイルを見る)</span><span class="sxs-lookup"><span data-stu-id="38510-173">"\*.\*" (Watch all files.)</span></span>|  
|<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>|`false`|  
|<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>|<span data-ttu-id="38510-174">8192</span><span class="sxs-lookup"><span data-stu-id="38510-174">8192</span></span>|  
|<xref:System.IO.FileSystemWatcher.Path%2A>|<span data-ttu-id="38510-175">空の文字列 ("")</span><span class="sxs-lookup"><span data-stu-id="38510-175">empty string ("")</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="38510-176"><xref:System.IO.FileSystemWatcher.Path%2A> が設定され、<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> が `true`されるまで、コンポーネントは指定されたディレクトリを監視しません。</span><span class="sxs-lookup"><span data-stu-id="38510-176">The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38510-177">次の例では、<xref:System.IO.FileSystemWatcher> オブジェクトを作成し、実行時に指定されたディレクトリを監視します。</span><span class="sxs-lookup"><span data-stu-id="38510-177">The following example creates a <xref:System.IO.FileSystemWatcher> object to watch the directory specified at run time.</span></span> <span data-ttu-id="38510-178"><xref:System.IO.FileSystemWatcher> オブジェクトは、`LastWrite` と `LastAccess` の時刻の変更、およびディレクトリ内のテキストファイルの作成、削除、または名前変更を監視します。</span><span class="sxs-lookup"><span data-stu-id="38510-178">The <xref:System.IO.FileSystemWatcher> object watches for changes in `LastWrite` and `LastAccess` times, and for the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="38510-179">ファイルが変更、作成、または削除されると、ファイルへのパスがコンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="38510-179">If a file is changed, created, or deleted, the path to the file displays to the console.</span></span> <span data-ttu-id="38510-180">ファイルの名前を変更すると、古いパスと新しいパスがコンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="38510-180">When a file is renamed, the old and new paths display to the console.</span></span>  
  
 <span data-ttu-id="38510-181">この例では、<xref:System.Diagnostics> と <xref:System.IO> 名前空間を使用します。</span><span class="sxs-lookup"><span data-stu-id="38510-181">This example uses the <xref:System.Diagnostics> and <xref:System.IO> namespaces.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="38510-182">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="38510-182">for full trust for the immediate caller.</span></span> <span data-ttu-id="38510-183">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="38510-183">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
        <altmember cref="T:System.IO.WaitForChangedResult" />
        <altmember cref="T:System.IO.WatcherChangeTypes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemWatcher (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystemWatcher(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.IO.FileSystemWatcher : string -&gt; System.IO.FileSystemWatcher" Usage="new System.IO.FileSystemWatcher path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="38510-184">標準表記または UNC (Universal Naming Convention) 表記での監視するディレクトリ。</span><span class="sxs-lookup"><span data-stu-id="38510-184">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</span></span></param>
        <summary><span data-ttu-id="38510-185">監視するディレクトリを指定して、<see cref="T:System.IO.FileSystemWatcher" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="38510-185">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class, given the specified directory to monitor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="38510-186"><xref:System.IO.FileSystemWatcher.Path%2A> が設定され、<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> が `true`されるまで、コンポーネントは指定されたディレクトリを監視しません。</span><span class="sxs-lookup"><span data-stu-id="38510-186">The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.</span></span>  
  
 <span data-ttu-id="38510-187">このコンポーネントは、パーソナルコンピューター、ネットワークドライブ、またはリモートコンピューター上のファイルをウォッチできます。</span><span class="sxs-lookup"><span data-stu-id="38510-187">The component can watch files on your personal computer, a network drive, or a remote computer.</span></span>  
  
 <span data-ttu-id="38510-188">Windows NT または Windows 2000 がインストールされていないリモートコンピューターを見ることはできません。</span><span class="sxs-lookup"><span data-stu-id="38510-188">You cannot watch a remote computer that does not have Windows NT or Windows 2000.</span></span> <span data-ttu-id="38510-189">Windows nt 4.0 コンピューターからリモートの Windows NT 4.0 コンピューターを視聴することはできません。</span><span class="sxs-lookup"><span data-stu-id="38510-189">You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</span></span> <span data-ttu-id="38510-190"><xref:System.IO.FileSystemWatcher.Filter%2A> プロパティは、すべてのファイルを監視するために既定で設定されます。</span><span class="sxs-lookup"><span data-stu-id="38510-190">The <xref:System.IO.FileSystemWatcher.Filter%2A> property is set by default to watch all files.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="38510-191"><paramref name="path" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="38510-191">The <paramref name="path" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38510-192"><paramref name="path" /> パラメーターが空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="38510-192">The <paramref name="path" /> parameter is an empty string ("").</span></span>  
  
<span data-ttu-id="38510-193">または</span><span class="sxs-lookup"><span data-stu-id="38510-193">-or-</span></span> 
<span data-ttu-id="38510-194"><paramref name="path" /> パラメーターで指定されたパスが存在しません。</span><span class="sxs-lookup"><span data-stu-id="38510-194">The path specified through the <paramref name="path" /> parameter does not exist.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="38510-195"><paramref name="path" /> が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="38510-195"><paramref name="path" /> is too long.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="38510-196">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="38510-196">for full trust for the immediate caller.</span></span> <span data-ttu-id="38510-197">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="38510-197">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
        <altmember cref="T:System.IO.WaitForChangedResult" />
        <altmember cref="T:System.IO.WatcherChangeTypes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemWatcher (string path, string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, filter As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystemWatcher(System::String ^ path, System::String ^ filter);" />
      <MemberSignature Language="F#" Value="new System.IO.FileSystemWatcher : string * string -&gt; System.IO.FileSystemWatcher" Usage="new System.IO.FileSystemWatcher (path, filter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="38510-198">標準表記または UNC (Universal Naming Convention) 表記での監視するディレクトリ。</span><span class="sxs-lookup"><span data-stu-id="38510-198">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</span></span></param>
        <param name="filter"><span data-ttu-id="38510-199">ウォッチするファイルの種類。</span><span class="sxs-lookup"><span data-stu-id="38510-199">The type of files to watch.</span></span> <span data-ttu-id="38510-200">たとえば、すべてのテキスト ファイルの変更をウォッチするには、"\*.txt" に設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-200">For example, "\*.txt" watches for changes to all text files.</span></span></param>
        <summary><span data-ttu-id="38510-201"><see cref="T:System.IO.FileSystemWatcher" /> クラスの新しいインスタンスを、監視するディレクトリとファイルの種類を指定して初期化します。</span><span class="sxs-lookup"><span data-stu-id="38510-201">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class, given the specified directory and type of files to monitor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="38510-202"><xref:System.IO.FileSystemWatcher.Path%2A> が設定され、<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> が `true`されるまで、コンポーネントは指定されたディレクトリを監視しません。</span><span class="sxs-lookup"><span data-stu-id="38510-202">The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.</span></span>  
  
 <span data-ttu-id="38510-203">このコンポーネントは、パーソナルコンピューター、ネットワークドライブ、またはリモートコンピューター上のファイルをウォッチできます。</span><span class="sxs-lookup"><span data-stu-id="38510-203">The component can watch files on your personal computer, a network drive, or a remote computer.</span></span>  
  
 <span data-ttu-id="38510-204">Windows NT または Windows 2000 がインストールされていないリモートコンピューターを見ることはできません。</span><span class="sxs-lookup"><span data-stu-id="38510-204">You cannot watch a remote computer that does not have Windows NT or Windows 2000.</span></span> <span data-ttu-id="38510-205">Windows nt 4.0 コンピューターからリモートの Windows NT 4.0 コンピューターを視聴することはできません。</span><span class="sxs-lookup"><span data-stu-id="38510-205">You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="38510-206"><paramref name="path" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="38510-206">The <paramref name="path" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="38510-207">または</span><span class="sxs-lookup"><span data-stu-id="38510-207">-or-</span></span> 
<span data-ttu-id="38510-208"><paramref name="filter" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="38510-208">The <paramref name="filter" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38510-209"><paramref name="path" /> パラメーターが空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="38510-209">The <paramref name="path" /> parameter is an empty string ("").</span></span>  
  
<span data-ttu-id="38510-210">または</span><span class="sxs-lookup"><span data-stu-id="38510-210">-or-</span></span> 
<span data-ttu-id="38510-211"><paramref name="path" /> パラメーターで指定されたパスが存在しません。</span><span class="sxs-lookup"><span data-stu-id="38510-211">The path specified through the <paramref name="path" /> parameter does not exist.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="38510-212"><paramref name="path" /> が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="38510-212"><paramref name="path" /> is too long.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="38510-213">直前の呼び出し元に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="38510-213">for full trust for the immediate caller.</span></span> <span data-ttu-id="38510-214">このメンバーは、部分的に信頼されているコードから使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="38510-214">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
        <altmember cref="T:System.IO.WaitForChangedResult" />
        <altmember cref="T:System.IO.WatcherChangeTypes" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="fileSystemWatcher.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="38510-215">フォームまたは別のコンポーネントで使用する <see cref="T:System.IO.FileSystemWatcher" /> の初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="38510-215">Begins the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by another component.</span></span> <span data-ttu-id="38510-216">初期化は実行時に発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-216">The initialization occurs at run time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-217">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用されるコンポーネントの初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="38510-217">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component used on a form or used by another component.</span></span> <span data-ttu-id="38510-218"><xref:System.IO.FileSystemWatcher.EndInit%2A> メソッドは、初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="38510-218">The <xref:System.IO.FileSystemWatcher.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="38510-219"><xref:System.IO.FileSystemWatcher.BeginInit%2A> メソッドと <xref:System.IO.FileSystemWatcher.EndInit%2A> メソッドを使用すると、完全に初期化される前にコントロールが使用されなくなります。</span><span class="sxs-lookup"><span data-stu-id="38510-219">Using the <xref:System.IO.FileSystemWatcher.BeginInit%2A> and <xref:System.IO.FileSystemWatcher.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileSystemWatcher.EndInit" />
      </Docs>
    </Member>
    <Member MemberName="Changed">
      <MemberSignature Language="C#" Value="public event System.IO.FileSystemEventHandler Changed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.FileSystemEventHandler Changed" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Changed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Changed As FileSystemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::FileSystemEventHandler ^ Changed;" />
      <MemberSignature Language="F#" Value="member this.Changed : System.IO.FileSystemEventHandler " Usage="member this.Changed : System.IO.FileSystemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("Occurs when a file/directory change matches the filter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_Changed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38510-220">指定した <see cref="P:System.IO.FileSystemWatcher.Path" /> のファイルまたはディレクトリが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-220">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-221"><xref:System.IO.FileSystemWatcher.Changed> イベントは、監視されているディレクトリ内のファイルまたはディレクトリのサイズ、システム属性、最終書き込み時刻、最終アクセス時刻、またはセキュリティアクセス許可が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-221">The <xref:System.IO.FileSystemWatcher.Changed> event is raised when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38510-222">一般的なファイルシステム操作では、複数のイベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-222">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="38510-223">たとえば、あるディレクトリから別のディレクトリにファイルを移動すると、いくつかの <xref:System.IO.FileSystemWatcher.OnChanged%2A> と <xref:System.IO.FileSystemWatcher.OnCreated%2A> と <xref:System.IO.FileSystemWatcher.OnDeleted%2A> イベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-223">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="38510-224">ファイルの移動は、複数の単純な操作で構成される複雑な操作であるため、複数のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-224">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="38510-225">同様に、一部のアプリケーション (ウイルス対策ソフトウェアなど) では、<xref:System.IO.FileSystemWatcher>によって検出された追加のファイルシステムイベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-225">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
 <span data-ttu-id="38510-226">このイベントが処理されるときに発生する通知の数を制限するには、<xref:System.IO.FileSystemWatcher.NotifyFilter%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="38510-226">Use <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> to restrict the number of notifications raised when this event is handled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38510-227"><xref:System.IO.FileSystemWatcher.Changed> イベントは、ファイルの名前が変更されたときに予期せず発生しますが、ディレクトリの名前が変更されたときには発生しません。</span><span class="sxs-lookup"><span data-stu-id="38510-227">The <xref:System.IO.FileSystemWatcher.Changed> event is raised unexpectedly when a file is renamed, but is not raised when a directory is renamed.</span></span> <span data-ttu-id="38510-228">名前の変更を監視するには、<xref:System.IO.FileSystemWatcher.Renamed> イベントを使用します。</span><span class="sxs-lookup"><span data-stu-id="38510-228">To watch for renaming, use the <xref:System.IO.FileSystemWatcher.Renamed> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38510-229">他の <xref:System.IO.FileSystemWatcher> イベントに関連して <xref:System.IO.FileSystemWatcher.Changed> イベントが発生する順序は、<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> プロパティが `null`ない場合に変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-229">The order in which the <xref:System.IO.FileSystemWatcher.Changed> event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38510-230">次の例では、<xref:System.IO.FileSystemWatcher.Changed> イベントを使用して、監視対象のファイルが変更されるたびにコンソールへのファイルパスを表示します。</span><span class="sxs-lookup"><span data-stu-id="38510-230">The following example uses the <xref:System.IO.FileSystemWatcher.Changed> event to display the file path to the console whenever the watched file is changed.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Created">
      <MemberSignature Language="C#" Value="public event System.IO.FileSystemEventHandler Created;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.FileSystemEventHandler Created" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Created" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Created As FileSystemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::FileSystemEventHandler ^ Created;" />
      <MemberSignature Language="F#" Value="member this.Created : System.IO.FileSystemEventHandler " Usage="member this.Created : System.IO.FileSystemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("Occurs when a file/directory creation matches the filter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_Created")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38510-231">指定した <see cref="P:System.IO.FileSystemWatcher.Path" /> のファイルまたはディレクトリが作成されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-231">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-232">ファイルやディレクトリのコピーや移動など、いくつかの一般的な原因はイベントに直接対応していませんが、これらの発生によってイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-232">Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</span></span> <span data-ttu-id="38510-233">ファイルまたはディレクトリをコピーすると、そのディレクトリが監視されている場合、ファイルのコピー先のディレクトリに <xref:System.IO.FileSystemWatcher.Created> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-233">When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched.</span></span> <span data-ttu-id="38510-234">コピー元のディレクトリが <xref:System.IO.FileSystemWatcher>の別のインスタンスによって監視されていた場合、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="38510-234">If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised.</span></span> <span data-ttu-id="38510-235">たとえば、<xref:System.IO.FileSystemWatcher>の2つのインスタンスを作成したとします。</span><span class="sxs-lookup"><span data-stu-id="38510-235">For example, you create two instances of <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="38510-236">FileSystemWatcher1 は "C:\My Documents" を監視するように設定されており、FileSystemWatcher2 は "C:\ your Documents" を監視するように設定されています。</span><span class="sxs-lookup"><span data-stu-id="38510-236">FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</span></span> <span data-ttu-id="38510-237">"マイドキュメント" から "ドキュメント" にファイルをコピーすると <xref:System.IO.FileSystemWatcher.Created>、FileSystemWatcher2 によってイベントが発生しますが、FileSystemWatcher1 に対してイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="38510-237">If you copy a file from "My Documents" into "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</span></span> <span data-ttu-id="38510-238">コピーとは異なり、ファイルまたはディレクトリを移動すると、2つのイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-238">Unlike copying, moving a file or directory would raise two events.</span></span> <span data-ttu-id="38510-239">前の例では、ファイルを "My Documents" から "your Documents" に移動した場合、FileSystemWatcher2 によって <xref:System.IO.FileSystemWatcher.Created> イベントが発生し、FileSystemWatcher1 によってイベントが発生 <xref:System.IO.FileSystemWatcher.Deleted> します。</span><span class="sxs-lookup"><span data-stu-id="38510-239">From the previous example, if you moved a file from "My Documents" to "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38510-240">一般的なファイルシステム操作では、複数のイベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-240">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="38510-241">たとえば、あるディレクトリから別のディレクトリにファイルを移動すると、いくつかの <xref:System.IO.FileSystemWatcher.OnChanged%2A> と <xref:System.IO.FileSystemWatcher.OnCreated%2A> と <xref:System.IO.FileSystemWatcher.OnDeleted%2A> イベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-241">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="38510-242">ファイルの移動は、複数の単純な操作で構成される複雑な操作であるため、複数のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-242">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="38510-243">同様に、一部のアプリケーション (ウイルス対策ソフトウェアなど) では、<xref:System.IO.FileSystemWatcher>によって検出された追加のファイルシステムイベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-243">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38510-244">他の <xref:System.IO.FileSystemWatcher> イベントに関連して <xref:System.IO.FileSystemWatcher.Created> イベントが発生する順序は、<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> プロパティが `null`ない場合に変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-244">The order in which the <xref:System.IO.FileSystemWatcher.Created> event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.</span></span>  
  
 <span data-ttu-id="38510-245"><xref:System.IO.FileSystemWatcher.OnCreated%2A> イベントは、ファイルが作成されるとすぐに発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-245">The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created.</span></span> <span data-ttu-id="38510-246">監視対象のディレクトリにファイルをコピーまたは転送する場合、<xref:System.IO.FileSystemWatcher.OnCreated%2A> イベントが直ちに発生し、その後に1つ以上の <xref:System.IO.FileSystemWatcher.OnChanged%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-246">If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38510-247">次の例では、<xref:System.IO.FileSystemWatcher.Created> イベントを使用して、監視対象のファイルが作成されるたびにコンソールへのファイルパスを表示します。</span><span class="sxs-lookup"><span data-stu-id="38510-247">The following example uses the <xref:System.IO.FileSystemWatcher.Created> event to display the file path to the console whenever the watched file is created.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.IO.FileSystemWatcher.Deleted" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.IO.FileSystemEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.FileSystemEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As FileSystemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::FileSystemEventHandler ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : System.IO.FileSystemEventHandler " Usage="member this.Deleted : System.IO.FileSystemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("Occurs when a file/directory deletion matches the filter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_Deleted")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38510-248">指定した <see cref="P:System.IO.FileSystemWatcher.Path" /> のファイルまたはディレクトリが削除されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-248">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is deleted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-249">ファイルやディレクトリのコピーや移動など、いくつかの一般的な原因はイベントに直接対応していませんが、これらの発生によってイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-249">Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</span></span> <span data-ttu-id="38510-250">ファイルまたはディレクトリをコピーすると、そのディレクトリが監視されている場合、ファイルのコピー先のディレクトリに <xref:System.IO.FileSystemWatcher.Created> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-250">When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched.</span></span> <span data-ttu-id="38510-251">コピー元のディレクトリが <xref:System.IO.FileSystemWatcher>の別のインスタンスによって監視されていた場合、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="38510-251">If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised.</span></span> <span data-ttu-id="38510-252">たとえば、<xref:System.IO.FileSystemWatcher>の2つのインスタンスを作成したとします。</span><span class="sxs-lookup"><span data-stu-id="38510-252">For example, you create two instances of <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="38510-253">FileSystemWatcher1 は "C:\My Documents" を監視するように設定されており、FileSystemWatcher2 は "C:\ your Documents" を監視するように設定されています。</span><span class="sxs-lookup"><span data-stu-id="38510-253">FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</span></span> <span data-ttu-id="38510-254">"マイドキュメント" から "ドキュメント" にファイルをコピーすると <xref:System.IO.FileSystemWatcher.Created>、FileSystemWatcher2 によってイベントが発生しますが、FileSystemWatcher1 に対してイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="38510-254">If you copy a file from "My Documents" into "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</span></span> <span data-ttu-id="38510-255">コピーとは異なり、ファイルまたはディレクトリを移動すると、2つのイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-255">Unlike copying, moving a file or directory would raise two events.</span></span> <span data-ttu-id="38510-256">前の例では、ファイルを "My Documents" から "your Documents" に移動した場合、FileSystemWatcher2 によって <xref:System.IO.FileSystemWatcher.Created> イベントが発生し、FileSystemWatcher1 によってイベントが発生 <xref:System.IO.FileSystemWatcher.Deleted> します。</span><span class="sxs-lookup"><span data-stu-id="38510-256">From the previous example, if you moved a file from "My Documents" to "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38510-257">一般的なファイルシステム操作では、複数のイベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-257">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="38510-258">たとえば、あるディレクトリから別のディレクトリにファイルを移動すると、いくつかの <xref:System.IO.FileSystemWatcher.OnChanged%2A> と <xref:System.IO.FileSystemWatcher.OnCreated%2A> と <xref:System.IO.FileSystemWatcher.OnDeleted%2A> イベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-258">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="38510-259">ファイルの移動は、複数の単純な操作で構成される複雑な操作であるため、複数のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-259">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="38510-260">同様に、一部のアプリケーション (ウイルス対策ソフトウェアなど) では、<xref:System.IO.FileSystemWatcher>によって検出された追加のファイルシステムイベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-260">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38510-261">他の <xref:System.IO.FileSystemWatcher> イベントに関連して <xref:System.IO.FileSystemWatcher.Deleted> イベントが発生する順序は、<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> プロパティが `null`ない場合に変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-261">The order in which the <xref:System.IO.FileSystemWatcher.Deleted> event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38510-262">次の例では、<xref:System.IO.FileSystemWatcher.Deleted> イベントを使用して、監視対象のファイルが削除されるたびにコンソールへのファイルパスを表示します。</span><span class="sxs-lookup"><span data-stu-id="38510-262">The following example uses the <xref:System.IO.FileSystemWatcher.Deleted> event to display the file path to the console whenever the watched file is deleted.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.IO.FileSystemWatcher.Created" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="fileSystemWatcher.Dispose " FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="F#" Value="override this.Dispose : unit -&gt; unit" Usage="fileSystemWatcher.Dispose " FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="38510-263"><see cref="T:System.IO.FileSystemWatcher" /> によって使用されているアンマネージ リソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="38510-263">Releases the unmanaged resources used by the <see cref="T:System.IO.FileSystemWatcher" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="fileSystemWatcher.Dispose disposing" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="fileSystemWatcher.Dispose disposing" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="38510-264">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="38510-264"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="38510-265"><see cref="T:System.IO.FileSystemWatcher" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="38510-265">Releases the unmanaged resources used by the <see cref="T:System.IO.FileSystemWatcher" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-266">このメソッドは、パブリックな <xref:System.ComponentModel.Component.Dispose%2A> メソッドと <xref:System.Object.Finalize%2A> メソッドによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="38510-266">This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="38510-267"><xref:System.ComponentModel.Component.Dispose%2A> は、`disposing` パラメーターを `true`に設定して、protected <xref:System.IO.FileSystemWatcher.Dispose%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="38510-267"><xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.FileSystemWatcher.Dispose%2A> method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="38510-268"><xref:System.Object.Finalize%2A> は `disposing` を `false`に設定して <xref:System.IO.FileSystemWatcher.Dispose%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="38510-268"><xref:System.Object.Finalize%2A> invokes <xref:System.IO.FileSystemWatcher.Dispose%2A> with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="38510-269">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.IO.Compression.DeflateStream> が参照しているすべてのマネージド オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="38510-269">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.Compression.DeflateStream> references.</span></span> <span data-ttu-id="38510-270">このメソッドは、参照される各オブジェクトの <xref:System.ComponentModel.Component.Dispose%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="38510-270">This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="38510-271">
            <see cref="M:System.ComponentModel.Component.Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="38510-271">
            <see cref="M:System.ComponentModel.Component.Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="38510-272">をオーバーライドする場合は <see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /> 以前に <see cref="M:System.ComponentModel.Component.Dispose" />を呼び出したときに破棄されたオブジェクトを参照しないように注意してください。</span><span class="sxs-lookup"><span data-stu-id="38510-272">When overriding <see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see cref="M:System.ComponentModel.Component.Dispose" />.</span></span> <span data-ttu-id="38510-273"><see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" />を実装する方法の詳細については、「 [Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="38510-273">For more information about how to implement <see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="38510-274"><see cref="M:System.ComponentModel.Component.Dispose" /> と <see cref="M:System.Object.Finalize" />の詳細については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="38510-274">For more information about <see cref="M:System.ComponentModel.Component.Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EnableRaisingEvents">
      <MemberSignature Language="C#" Value="public bool EnableRaisingEvents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableRaisingEvents" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.EnableRaisingEvents" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableRaisingEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableRaisingEvents { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableRaisingEvents : bool with get, set" Usage="System.IO.FileSystemWatcher.EnableRaisingEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("Flag to indicate if this instance is active")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_Enabled")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38510-275">コンポーネントが有効かどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-275">Gets or sets a value indicating whether the component is enabled.</span></span></summary>
        <value><span data-ttu-id="38510-276">コンポーネントが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="38510-276"><see langword="true" /> if the component is enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="38510-277">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="38510-277">The default is <see langword="false" />.</span></span> <span data-ttu-id="38510-278">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] のデザイナーでコンポーネントを使用している場合、既定値は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="38510-278">If you are using the component on a designer in [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], the default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-279"><xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> を `true`に設定しない限り、コンポーネントはイベントを発生させません。</span><span class="sxs-lookup"><span data-stu-id="38510-279">The component will not raise events unless you set <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38510-280"><xref:System.IO.FileSystemWatcher.Path%2A> プロパティが設定され、<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> が `true`されるまで、指定したディレクトリはコンポーネントによって監視されません。</span><span class="sxs-lookup"><span data-stu-id="38510-280">The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> property has been set and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.</span></span>  
  
 <span data-ttu-id="38510-281"><xref:System.IO.FileSystemWatcher.WaitForChanged%2A> メソッドを使用すると、このプロパティが `false`に設定されている場合でも、ファイルの変更に応答するためにイベントハンドラーを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="38510-281">The <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> method allows event handlers to be invoked to respond to file changes even if this property is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38510-282">次の例では、実行時に指定されたディレクトリを監視する <xref:System.IO.FileSystemWatcher> を作成します。</span><span class="sxs-lookup"><span data-stu-id="38510-282">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="38510-283">コンポーネントは、ディレクトリ内のテキストファイルの `LastWrite` と `LastAccess` 時刻、作成、削除、または名前変更を監視するように設定されています。</span><span class="sxs-lookup"><span data-stu-id="38510-283">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="38510-284">ファイルが変更、作成、または削除された場合、ファイルへのパスがコンソールに出力されます。</span><span class="sxs-lookup"><span data-stu-id="38510-284">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="38510-285">ファイルの名前を変更すると、古いパスと新しいパスがコンソールに出力されます。</span><span class="sxs-lookup"><span data-stu-id="38510-285">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="38510-286"><see cref="T:System.IO.FileSystemWatcher" /> オブジェクトは破棄されました。</span><span class="sxs-lookup"><span data-stu-id="38510-286">The <see cref="T:System.IO.FileSystemWatcher" /> object has been disposed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="38510-287">現在のオペレーティング システムは Microsoft Windows NT 以降ではありません。</span><span class="sxs-lookup"><span data-stu-id="38510-287">The current operating system is not Microsoft Windows NT or later.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="38510-288"><see cref="P:System.IO.FileSystemWatcher.Path" /> で指定したディレクトリが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="38510-288">The directory specified in <see cref="P:System.IO.FileSystemWatcher.Path" /> could not be found.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38510-289"><see cref="P:System.IO.FileSystemWatcher.Path" /> が設定されていないか、無効です。</span><span class="sxs-lookup"><span data-stu-id="38510-289"><see cref="P:System.IO.FileSystemWatcher.Path" /> has not been set or is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="fileSystemWatcher.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="38510-290">フォームまたは別のコンポーネントで使用する <see cref="T:System.IO.FileSystemWatcher" /> の初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="38510-290">Ends the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by another component.</span></span> <span data-ttu-id="38510-291">初期化は実行時に発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-291">The initialization occurs at run time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-292">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用されるコンポーネントの初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="38510-292">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component used on a form or used by another component.</span></span> <span data-ttu-id="38510-293"><xref:System.IO.FileSystemWatcher.BeginInit%2A> メソッドは、初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="38510-293">The <xref:System.IO.FileSystemWatcher.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="38510-294"><xref:System.IO.FileSystemWatcher.BeginInit%2A> メソッドと <xref:System.IO.FileSystemWatcher.EndInit%2A> メソッドを使用すると、完全に初期化される前にコントロールが使用されなくなります。</span><span class="sxs-lookup"><span data-stu-id="38510-294">Using the <xref:System.IO.FileSystemWatcher.BeginInit%2A> and <xref:System.IO.FileSystemWatcher.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileSystemWatcher.BeginInit" />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.IO.ErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.ErrorEventHandler Error" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Error" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As ErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::ErrorEventHandler ^ Error;" />
      <MemberSignature Language="F#" Value="member this.Error : System.IO.ErrorEventHandler " Usage="member this.Error : System.IO.ErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.ErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38510-295"><see cref="T:System.IO.FileSystemWatcher" /> のインスタンスが変更の監視を続けられない場合、または内部バッファー オーバーフローの場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-295">Occurs when the instance of <see cref="T:System.IO.FileSystemWatcher" /> is unable to continue monitoring changes or when the internal buffer overflows.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-296">このイベントは、<xref:System.IO.FileSystemWatcher> オブジェクトが変更を監視できないようにするたびに発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-296">This event is raised whenever something prevents the <xref:System.IO.FileSystemWatcher> object from monitoring changes.</span></span> <span data-ttu-id="38510-297">たとえば、オブジェクトがリモートディレクトリの変更を監視していて、そのディレクトリへの接続が失われた場合、<xref:System.IO.FileSystemWatcher.Error> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-297">For example, if the object is monitoring changes in a remote directory and the connection to that directory is lost, the <xref:System.IO.FileSystemWatcher.Error> event is raised.</span></span>  
  
 <span data-ttu-id="38510-298">システムは、ファイルの変更を通知し、コンポーネントによって作成および Api に渡されるバッファーにそれらの変更を保存します。</span><span class="sxs-lookup"><span data-stu-id="38510-298">The system notifies you of file changes, and it stores those changes in a buffer that the component creates and passes to the APIs.</span></span> <span data-ttu-id="38510-299">短時間で多くの変更が加えられた場合、バッファーがオーバーフローする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-299">If there are many changes in a short time, the buffer can overflow.</span></span> <span data-ttu-id="38510-300">これにより、コンポーネントはディレクトリの変更を追跡できなくなり、一括通知のみが提供されます。</span><span class="sxs-lookup"><span data-stu-id="38510-300">This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</span></span> <span data-ttu-id="38510-301">バッファーのサイズを大きくすると、ディスクにスワップできないページングされていないメモリからのものであるため、サイズが大きくなります。バッファーはできるだけ小さくしてください。</span><span class="sxs-lookup"><span data-stu-id="38510-301">Increasing the size of the buffer is expensive, because it comes from non paged memory that cannot be swapped out to disk, so keep the buffer as small as possible.</span></span> <span data-ttu-id="38510-302">バッファーオーバーフローを回避するには、<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>、<xref:System.IO.FileSystemWatcher.Filter%2A>、および <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> の各プロパティを使用して、不要な変更通知を除外します。</span><span class="sxs-lookup"><span data-stu-id="38510-302">To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.Filter%2A>, and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties to filter out unwanted change notifications.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38510-303">一般的なファイルシステム操作では、複数のイベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-303">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="38510-304">たとえば、あるディレクトリから別のディレクトリにファイルを移動すると、いくつかの <xref:System.IO.FileSystemWatcher.OnChanged%2A> と <xref:System.IO.FileSystemWatcher.OnCreated%2A> と <xref:System.IO.FileSystemWatcher.OnDeleted%2A> イベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-304">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="38510-305">ファイルの移動は、複数の単純な操作で構成される複雑な操作であるため、複数のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-305">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="38510-306">同様に、一部のアプリケーション (ウイルス対策ソフトウェアなど) では、<xref:System.IO.FileSystemWatcher>によって検出された追加のファイルシステムイベントが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-306">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="T:System.IO.ErrorEventArgs" />
        <altmember cref="T:System.IO.ErrorEventHandler" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public string Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Filter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Filter : string with get, set" Usage="System.IO.FileSystemWatcher.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue("*.*")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("File name filter pattern")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_Filter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38510-307">ディレクトリで監視するファイルを決定するために使用するフィルター文字列を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-307">Gets or sets the filter string used to determine what files are monitored in a directory.</span></span></summary>
        <value><span data-ttu-id="38510-308">フィルター文字列。</span><span class="sxs-lookup"><span data-stu-id="38510-308">The filter string.</span></span> <span data-ttu-id="38510-309">既定値は "\* です。\*"(すべてのファイルを監視)</span><span class="sxs-lookup"><span data-stu-id="38510-309">The default is "\*.\*" (Watches all files.)</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-310">すべてのファイルの変更を監視するには、<xref:System.IO.FileSystemWatcher.Filter%2A> プロパティを空の文字列 ("") に設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-310">To watch changes in all files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to an empty string ("").</span></span> <span data-ttu-id="38510-311">特定のファイルを監視するには、[<xref:System.IO.FileSystemWatcher.Filter%2A>] プロパティにファイル名を設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-311">To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.</span></span> <span data-ttu-id="38510-312">たとえば、MyDoc ファイルの変更を監視するには、<xref:System.IO.FileSystemWatcher.Filter%2A> プロパティを "MyDoc" に設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-312">For example, to watch for changes in the file MyDoc.txt, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "MyDoc.txt".</span></span> <span data-ttu-id="38510-313">また、特定の種類のファイルの変更を監視することもできます。</span><span class="sxs-lookup"><span data-stu-id="38510-313">You can also watch for changes in a certain type of file.</span></span> <span data-ttu-id="38510-314">たとえば、テキストファイルの変更を監視するには、<xref:System.IO.FileSystemWatcher.Filter%2A> プロパティを "\* .txt" に設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-314">For example, to watch for changes in any text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "\*.txt".</span></span> <span data-ttu-id="38510-315">"\*.txt&#124;\*.doc" などの複数のフィルターの使用はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="38510-315">Use of multiple filters such as "\*.txt&#124;\*.doc" is not supported.</span></span>  
  
 <span data-ttu-id="38510-316"><xref:System.IO.FileSystemWatcher.Filter%2A> プロパティは、<xref:System.IO.FileSystemWatcher> オブジェクトがイベントの受信を開始した後に変更できます。</span><span class="sxs-lookup"><span data-stu-id="38510-316">The <xref:System.IO.FileSystemWatcher.Filter%2A> property can be changed after the <xref:System.IO.FileSystemWatcher> object has started receiving events.</span></span>  
  
 <span data-ttu-id="38510-317">不要な通知を除外する方法の詳細については、<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>、<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>、および <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> の各プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="38510-317">For more information about filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.</span></span>  
  
 <span data-ttu-id="38510-318"><xref:System.IO.FileSystemWatcher.Filter%2A> では、次の例に示すように、一致するファイルに対してワイルドカードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="38510-318"><xref:System.IO.FileSystemWatcher.Filter%2A> accepts wildcards for matching files, as shown in the following examples.</span></span>  
  
|<span data-ttu-id="38510-319">フィルター文字列</span><span class="sxs-lookup"><span data-stu-id="38510-319">Filter string</span></span>|<span data-ttu-id="38510-320">次のファイルを監視します</span><span class="sxs-lookup"><span data-stu-id="38510-320">Watches the following files</span></span>|  
|-------------------|---------------------------------|  
|<span data-ttu-id="38510-321">\*.\*</span><span class="sxs-lookup"><span data-stu-id="38510-321">\*.\*</span></span>|<span data-ttu-id="38510-322">すべてのファイル (既定)。</span><span class="sxs-lookup"><span data-stu-id="38510-322">All files (default).</span></span> <span data-ttu-id="38510-323">空の文字列 ("") もすべてのファイルを監視します。</span><span class="sxs-lookup"><span data-stu-id="38510-323">An empty string ("") also watches all files.</span></span>|  
|<span data-ttu-id="38510-324">\*.txt</span><span class="sxs-lookup"><span data-stu-id="38510-324">\*.txt</span></span>|<span data-ttu-id="38510-325">"Txt" 拡張子を持つすべてのファイル。</span><span class="sxs-lookup"><span data-stu-id="38510-325">All files with a "txt" extension.</span></span>|  
|<span data-ttu-id="38510-326">\*recipe.doc</span><span class="sxs-lookup"><span data-stu-id="38510-326">\*recipe.doc</span></span>|<span data-ttu-id="38510-327">"レシピ" で終わるすべてのファイルを "doc" 拡張機能と共に使用します。</span><span class="sxs-lookup"><span data-stu-id="38510-327">All files ending in "recipe" with a "doc" extension.</span></span>|  
|<span data-ttu-id="38510-328">win\* .xml</span><span class="sxs-lookup"><span data-stu-id="38510-328">win\*.xml</span></span>|<span data-ttu-id="38510-329">"Xml" 拡張機能を持つ "win" で始まるすべてのファイル。</span><span class="sxs-lookup"><span data-stu-id="38510-329">All files beginning with "win" with an "xml" extension.</span></span>|  
|<span data-ttu-id="38510-330">売上 \* 200?。xls</span><span class="sxs-lookup"><span data-stu-id="38510-330">Sales\*200?.xls</span></span>|<span data-ttu-id="38510-331">次のものと一致します。</span><span class="sxs-lookup"><span data-stu-id="38510-331">Matches the following:</span></span><br /><br /><span data-ttu-id="38510-332">-Sales (2001 年7月) .xls</span><span class="sxs-lookup"><span data-stu-id="38510-332">- Sales July 2001.xls</span></span> <br/><span data-ttu-id="38510-333">-Sales (2002 年8月) .xls</span><span class="sxs-lookup"><span data-stu-id="38510-333">- Sales Aug 2002.xls</span></span> <br/><span data-ttu-id="38510-334">-Sales (2004 年3月) .xls</span><span class="sxs-lookup"><span data-stu-id="38510-334">- Sales March 2004.xls</span></span><br /><br /> <span data-ttu-id="38510-335">が一致しません。</span><span class="sxs-lookup"><span data-stu-id="38510-335">but does not match:</span></span><br /><br /><span data-ttu-id="38510-336">-Sales 11 月 .xls</span><span class="sxs-lookup"><span data-stu-id="38510-336">- Sales Nov 1999.xls</span></span>|  
|<span data-ttu-id="38510-337">MyReport.Doc</span><span class="sxs-lookup"><span data-stu-id="38510-337">MyReport.Doc</span></span>|<span data-ttu-id="38510-338">MyReport .doc のみを監視します</span><span class="sxs-lookup"><span data-stu-id="38510-338">Watches only MyReport.doc</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="38510-339">次の例では、実行時に指定されたディレクトリを監視する <xref:System.IO.FileSystemWatcher> を作成します。</span><span class="sxs-lookup"><span data-stu-id="38510-339">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="38510-340">コンポーネントは、ディレクトリ内のテキストファイルの `LastWrite` と `LastAccess` 時刻、作成、削除、または名前変更を監視するように設定されています。</span><span class="sxs-lookup"><span data-stu-id="38510-340">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="38510-341">ファイルが変更、作成、または削除された場合、ファイルへのパスがコンソールに出力されます。</span><span class="sxs-lookup"><span data-stu-id="38510-341">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="38510-342">ファイルの名前を変更すると、古いパスと新しいパスがコンソールに出力されます。</span><span class="sxs-lookup"><span data-stu-id="38510-342">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
      </Docs>
    </Member>
    <Member MemberName="Filters">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; Filters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; Filters" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Filters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Filters As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ Filters { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Filters : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.IO.FileSystemWatcher.Filters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38510-343">ディレクトリ内で監視するファイルを決定するために、使用されているすべてのフィルターのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="38510-343">Gets the collection of all the filters used to determine what files are monitored in a directory.</span></span></summary>
        <value><span data-ttu-id="38510-344">フィルターコレクション。</span><span class="sxs-lookup"><span data-stu-id="38510-344">A filter collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~FileSystemWatcher ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!FileSystemWatcher ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="fileSystemWatcher.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="38510-345">現在のインスタンスに保持されているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="38510-345">Releases the resources held by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> <span data-ttu-id="38510-346">アプリケーションコードはこのメソッドを呼び出しません。ガベージコレクターによる終了処理が無効になっていない限り、ガベージコレクションの実行中に自動的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="38510-346">Application code does not call this method; it is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled.</span></span> <span data-ttu-id="38510-347">詳細については、次のトピックを参照してください。 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> および <xref:System.Object.Finalize></span><span class="sxs-lookup"><span data-stu-id="38510-347">For more information, see <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> and <xref:System.Object.Finalize>.</span></span> <span data-ttu-id="38510-348">このメソッドは、<xref:System.Object.Finalize> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="38510-348">This method overrides <xref:System.Object.Finalize>.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeSubdirectories">
      <MemberSignature Language="C#" Value="public bool IncludeSubdirectories { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeSubdirectories" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeSubdirectories As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeSubdirectories { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeSubdirectories : bool with get, set" Usage="System.IO.FileSystemWatcher.IncludeSubdirectories" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("Flag to indicate we want to watch subdirectories")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_IncludeSubdirectories")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38510-349">指定したパスのサブディレクトリを監視するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-349">Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</span></span></summary>
        <value><span data-ttu-id="38510-350">サブディレクトリを監視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="38510-350"><see langword="true" /> if you want to monitor subdirectories; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="38510-351">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="38510-351">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-352"><xref:System.IO.FileSystemWatcher.Path%2A> プロパティおよびそのサブディレクトリによって指定されたディレクトリ内に含まれるファイルとディレクトリの変更通知を監視する場合は、<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> を `true` に設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-352">Set <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> to `true` when you want to watch for change notifications for files and directories contained within the directory specified through the <xref:System.IO.FileSystemWatcher.Path%2A> property, and its subdirectories.</span></span> <span data-ttu-id="38510-353"><xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> プロパティを `false` に設定すると、内部バッファーに送信される通知の数を減らすことができます。</span><span class="sxs-lookup"><span data-stu-id="38510-353">Setting the <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> property to `false` helps reduce the number of notifications sent to the internal buffer.</span></span> <span data-ttu-id="38510-354">不要な通知を除外する方法の詳細については、<xref:System.IO.FileSystemWatcher.NotifyFilter%2A> と <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> のプロパティに関する説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="38510-354">For more information on filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.</span></span>  
  
 <span data-ttu-id="38510-355">`true`すると、<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> は直下の子ディレクトリだけでなく、サブツリー全体を再帰的に処理します。</span><span class="sxs-lookup"><span data-stu-id="38510-355">When `true`, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> is recursive through the entire sub tree, not just the immediate child directories.</span></span> <span data-ttu-id="38510-356">サブツリー内のファイルまたはディレクトリへの相対パスは、監視している変更に応じて、<xref:System.IO.FileSystemEventArgs> の [<xref:System.IO.FileSystemEventArgs.Name%2A>] プロパティと <xref:System.IO.RenamedEventArgs>の <xref:System.IO.RenamedEventArgs.OldName%2A> プロパティに戻ります。</span><span class="sxs-lookup"><span data-stu-id="38510-356">The relative path to a file or directory within the sub tree returns in the <xref:System.IO.FileSystemEventArgs.Name%2A> property of <xref:System.IO.FileSystemEventArgs> and the <xref:System.IO.RenamedEventArgs.OldName%2A> property of <xref:System.IO.RenamedEventArgs>, depending on changes you are watching for.</span></span> <span data-ttu-id="38510-357">監視している変更に応じて、<xref:System.IO.FileSystemEventArgs> の [<xref:System.IO.FileSystemEventArgs.FullPath%2A>] プロパティと <xref:System.IO.RenamedEventArgs>の <xref:System.IO.RenamedEventArgs.OldFullPath%2A> プロパティから完全修飾パスを取得できます。</span><span class="sxs-lookup"><span data-stu-id="38510-357">You can get the fully qualified path from the <xref:System.IO.FileSystemEventArgs.FullPath%2A> property of <xref:System.IO.FileSystemEventArgs> and the <xref:System.IO.RenamedEventArgs.OldFullPath%2A> property of <xref:System.IO.RenamedEventArgs>, depending on the changes you are watching for.</span></span>  
  
 <span data-ttu-id="38510-358">監視しているディレクトリのサブツリーにディレクトリが作成され、<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> が `true`場合、そのディレクトリは自動的に監視されます。</span><span class="sxs-lookup"><span data-stu-id="38510-358">If a directory is created in the sub tree of the directory you are watching, and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> is `true`, that directory will automatically be watched.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemEventArgs.FullPath" />
        <altmember cref="P:System.IO.RenamedEventArgs.OldFullPath" />
        <altmember cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
        <altmember cref="P:System.IO.FileSystemEventArgs.Name" />
        <altmember cref="P:System.IO.RenamedEventArgs.OldName" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="InternalBufferSize">
      <MemberSignature Language="C#" Value="public int InternalBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InternalBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.InternalBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property InternalBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int InternalBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.InternalBufferSize : int with get, set" Usage="System.IO.FileSystemWatcher.InternalBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(8192)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38510-359">内部バッファーのサイズ (バイト単位) を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-359">Gets or sets the size (in bytes) of the internal buffer.</span></span></summary>
        <value><span data-ttu-id="38510-360">内部バッファー サイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="38510-360">The internal buffer size in bytes.</span></span> <span data-ttu-id="38510-361">既定値は 8192 (8 KB) です。</span><span class="sxs-lookup"><span data-stu-id="38510-361">The default is 8192 (8 KB).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-362">バッファーは 4 KB 以上に設定できますが、64 KB を超えることはできません。</span><span class="sxs-lookup"><span data-stu-id="38510-362">You can set the buffer to 4 KB or larger, but it must not exceed 64 KB.</span></span> <span data-ttu-id="38510-363"><xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> プロパティを4096バイト未満に設定しようとすると、値は破棄され、<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> プロパティは4096バイトに設定されます。</span><span class="sxs-lookup"><span data-stu-id="38510-363">If you try to set the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property to less than 4096 bytes, your value is discarded and the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property is set to 4096 bytes.</span></span> <span data-ttu-id="38510-364">最高のパフォーマンスを得るには、Intel ベースのコンピューターで 4 KB の倍数を使用します。</span><span class="sxs-lookup"><span data-stu-id="38510-364">For best performance, use a multiple of 4 KB on Intel-based computers.</span></span>  
  
 <span data-ttu-id="38510-365">システムは、ファイルの変更をコンポーネントに通知し、コンポーネントが作成して Api に渡すバッファーにそれらの変更を保存します。</span><span class="sxs-lookup"><span data-stu-id="38510-365">The system notifies the component of file changes, and it stores those changes in a buffer the component creates and passes to the APIs.</span></span> <span data-ttu-id="38510-366">各イベントは、16バイトまでのメモリを使用できます。ファイル名は含まれません。</span><span class="sxs-lookup"><span data-stu-id="38510-366">Each event can use up to 16 bytes of memory, not including the file name.</span></span> <span data-ttu-id="38510-367">短時間で多くの変更が加えられた場合、バッファーがオーバーフローする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-367">If there are many changes in a short time, the buffer can overflow.</span></span> <span data-ttu-id="38510-368">これにより、コンポーネントはディレクトリの変更を追跡できなくなり、一括通知のみが提供されます。</span><span class="sxs-lookup"><span data-stu-id="38510-368">This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</span></span> <span data-ttu-id="38510-369">バッファーのサイズを大きくすると、ファイルシステムの変更イベントが見つからない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-369">Increasing the size of the buffer can prevent missing file system change events.</span></span> <span data-ttu-id="38510-370">ただし、バッファーサイズの増加は、ディスクにスワップアウトできない非ページメモリからのものであるため、コストが高くなります。バッファーはできるだけ小さくしてください。</span><span class="sxs-lookup"><span data-stu-id="38510-370">However, increasing buffer size is expensive, because it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small as possible.</span></span> <span data-ttu-id="38510-371">バッファーオーバーフローを回避するには、<xref:System.IO.FileSystemWatcher.NotifyFilter%2A> と <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> のプロパティを使用して、不要な変更通知を除外します。</span><span class="sxs-lookup"><span data-stu-id="38510-371">To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties to filter out unwanted change notifications.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
      </Docs>
    </Member>
    <Member MemberName="NotifyFilter">
      <MemberSignature Language="C#" Value="public System.IO.NotifyFilters NotifyFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.NotifyFilters NotifyFilter" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.NotifyFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyFilter As NotifyFilters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::NotifyFilters NotifyFilter { System::IO::NotifyFilters get(); void set(System::IO::NotifyFilters value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyFilter : System.IO.NotifyFilters with get, set" Usage="System.IO.FileSystemWatcher.NotifyFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("Flag to indicate which change event we want to monitor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_ChangedFilter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.NotifyFilters</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38510-372">ウォッチする変更の種類を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-372">Gets or sets the type of changes to watch for.</span></span></summary>
        <value><span data-ttu-id="38510-373"><see cref="T:System.IO.NotifyFilters" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="38510-373">One of the <see cref="T:System.IO.NotifyFilters" /> values.</span></span> <span data-ttu-id="38510-374">既定値は <see langword="LastWrite" />、<see langword="FileName" />、および <see langword="DirectoryName" /> のビットごとの OR の組み合わせです。</span><span class="sxs-lookup"><span data-stu-id="38510-374">The default is the bitwise OR combination of <see langword="LastWrite" />, <see langword="FileName" />, and <see langword="DirectoryName" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-375"><xref:System.IO.NotifyFilters> 列挙体のメンバーを組み合わせて、一度に複数の種類の変更を監視することができます。</span><span class="sxs-lookup"><span data-stu-id="38510-375">You can combine the members of the <xref:System.IO.NotifyFilters> enumeration to watch for more than one type of change at a time.</span></span> <span data-ttu-id="38510-376">たとえば、ファイルのサイズの変更や、`LastWrite` 時の変更を監視できます。</span><span class="sxs-lookup"><span data-stu-id="38510-376">For example, you can watch for changes in size of a file, and for changes in the `LastWrite` time.</span></span> <span data-ttu-id="38510-377">これにより、ファイルまたはフォルダーのサイズが変更された場合、またはファイルまたはフォルダーの `LastWrite` 時に変更があった場合に、常にイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-377">This raises an event anytime there is a change in file or folder size, or a change in the `LastWrite` time of the file or folder.</span></span>  
  
 <span data-ttu-id="38510-378">これは、不要な通知を除外するための1つの方法です。</span><span class="sxs-lookup"><span data-stu-id="38510-378">This is one way to filter out unwanted notifications.</span></span> <span data-ttu-id="38510-379">不要な通知を除外する方法の詳細については、<xref:System.IO.FileSystemWatcher.Filter%2A>、<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>、および <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> の各プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="38510-379">For more information on filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.Filter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38510-380">次の例では、実行時に指定されたディレクトリを監視する <xref:System.IO.FileSystemWatcher> を作成します。</span><span class="sxs-lookup"><span data-stu-id="38510-380">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="38510-381">コンポーネントは、ディレクトリ内のテキストファイルの `LastWrite` と `LastAccess` 時刻、作成、削除、または名前変更を監視するように設定されています。</span><span class="sxs-lookup"><span data-stu-id="38510-381">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="38510-382">ファイルが変更、作成、または削除された場合、ファイルへのパスがコンソールに出力されます。</span><span class="sxs-lookup"><span data-stu-id="38510-382">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="38510-383">ファイルの名前を変更すると、古いパスと新しいパスがコンソールに出力されます。</span><span class="sxs-lookup"><span data-stu-id="38510-383">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38510-384">値が、<see cref="T:System.IO.NotifyFilters" /> 値の有効なビットごとの OR の組み合わせになっていません。</span><span class="sxs-lookup"><span data-stu-id="38510-384">The value is not a valid bitwise OR combination of the <see cref="T:System.IO.NotifyFilters" /> values.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="38510-385">設定されようとしている値が無効です。</span><span class="sxs-lookup"><span data-stu-id="38510-385">The value that is being set is not valid.</span></span></exception>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (System.IO.FileSystemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(class System.IO.FileSystemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (e As FileSystemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::IO::FileSystemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnChanged : System.IO.FileSystemEventArgs -&gt; unit" Usage="fileSystemWatcher.OnChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.FileSystemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="38510-386">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.IO.FileSystemEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="38510-386">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="38510-387"><see cref="E:System.IO.FileSystemWatcher.Changed" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="38510-387">Raises the <see cref="E:System.IO.FileSystemWatcher.Changed" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-388"><xref:System.IO.FileSystemWatcher.OnChanged%2A> は、監視されているディレクトリ内のファイルまたはディレクトリのサイズ、システム属性、最終書き込み時刻、最終アクセス時刻、またはセキュリティアクセス許可が変更されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="38510-388"><xref:System.IO.FileSystemWatcher.OnChanged%2A> is called when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</span></span>  
  
 <span data-ttu-id="38510-389"><xref:System.IO.FileSystemWatcher.Changed> イベントが処理されるときに発生するイベントの数を制限するには、<xref:System.IO.FileSystemWatcher.NotifyFilter%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="38510-389">Use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> property to restrict the number of events raised when the <xref:System.IO.FileSystemWatcher.Changed> event is handled.</span></span>  
  
 <span data-ttu-id="38510-390"><xref:System.IO.FileSystemWatcher.OnCreated%2A> イベントは、ファイルが作成されるとすぐに発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-390">The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created.</span></span> <span data-ttu-id="38510-391">監視対象のディレクトリにファイルをコピーまたは転送する場合、<xref:System.IO.FileSystemWatcher.OnCreated%2A> イベントが直ちに発生し、その後に1つ以上の <xref:System.IO.FileSystemWatcher.OnChanged%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-391">If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.</span></span>  
  
 <span data-ttu-id="38510-392">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="38510-392">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="38510-393">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="38510-393">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="38510-394">派生クラスで <see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /> をオーバーライドする場合は、必ず基底クラスの <see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="38510-394">When overriding <see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /> method.</span></span></para></block>
        <altmember cref="E:System.IO.FileSystemWatcher.Changed" />
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnCreated">
      <MemberSignature Language="C#" Value="protected void OnCreated (System.IO.FileSystemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnCreated(class System.IO.FileSystemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnCreated (e As FileSystemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnCreated(System::IO::FileSystemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnCreated : System.IO.FileSystemEventArgs -&gt; unit" Usage="fileSystemWatcher.OnCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.FileSystemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="38510-395">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.IO.FileSystemEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="38510-395">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="38510-396"><see cref="E:System.IO.FileSystemWatcher.Created" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="38510-396">Raises the <see cref="E:System.IO.FileSystemWatcher.Created" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-397"><xref:System.IO.FileSystemWatcher.OnCreated%2A> は、監視対象のディレクトリにファイルまたはディレクトリが作成されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="38510-397"><xref:System.IO.FileSystemWatcher.OnCreated%2A> is called when a file or directory is created in the directory being monitored.</span></span>  
  
 <span data-ttu-id="38510-398">ファイルやディレクトリのコピーや移動など、いくつかの一般的な原因はイベントに直接対応していませんが、これらの発生によってイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-398">Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</span></span> <span data-ttu-id="38510-399">ファイルまたはディレクトリをコピーすると、そのディレクトリが監視されている場合、ファイルのコピー先のディレクトリに <xref:System.IO.FileSystemWatcher.Created> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-399">When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched.</span></span> <span data-ttu-id="38510-400">コピー元のディレクトリが <xref:System.IO.FileSystemWatcher>の別のインスタンスによって監視されていた場合、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="38510-400">If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised.</span></span> <span data-ttu-id="38510-401">たとえば、<xref:System.IO.FileSystemWatcher>の2つのインスタンスを作成したとします。</span><span class="sxs-lookup"><span data-stu-id="38510-401">For example, you create two instances of <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="38510-402">FileSystemWatcher1 は "C:\My Documents" を監視するように設定されており、FileSystemWatcher2 は "C:\ your Documents" を監視するように設定されています。</span><span class="sxs-lookup"><span data-stu-id="38510-402">FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</span></span> <span data-ttu-id="38510-403">"マイドキュメント" からファイルをコピーして "your Documents" に貼り付けると、FileSystemWatcher2 で <xref:System.IO.FileSystemWatcher.Created> イベントが発生しますが、FileSystemWatcher1 に対してイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="38510-403">If you copy a file from "My Documents" and paste it into "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event will be raised in FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</span></span> <span data-ttu-id="38510-404">コピーとは異なり、ファイルまたはディレクトリを移動すると、2つのイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-404">Unlike copying, moving a file or directory raises two events.</span></span> <span data-ttu-id="38510-405">前の例では、ファイルを "My Documents" から "your Documents" に移動した場合、FileSystemWatcher2 で <xref:System.IO.FileSystemWatcher.Created> イベントが発生し、FileSystemWatcher1 で <xref:System.IO.FileSystemWatcher.Deleted> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-405">From the previous example, if you moved a file from "My Documents" to "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event would be raised in FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised in FileSystemWatcher1.</span></span>  
  
 <span data-ttu-id="38510-406"><xref:System.IO.FileSystemWatcher.OnCreated%2A> イベントは、ファイルが作成されるとすぐに発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-406">The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created.</span></span> <span data-ttu-id="38510-407">監視対象のディレクトリにファイルをコピーまたは転送する場合、<xref:System.IO.FileSystemWatcher.OnCreated%2A> イベントが直ちに発生し、その後に1つ以上の <xref:System.IO.FileSystemWatcher.OnChanged%2A> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-407">If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.</span></span>  
  
 <span data-ttu-id="38510-408">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="38510-408">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="38510-409">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="38510-409">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="38510-410">派生クラスで <see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /> をオーバーライドする場合は、必ず基底クラスの <see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="38510-410">When overriding <see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /> method.</span></span></para></block>
        <altmember cref="E:System.IO.FileSystemWatcher.Created" />
        <altmember cref="E:System.IO.FileSystemWatcher.Deleted" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnDeleted">
      <MemberSignature Language="C#" Value="protected void OnDeleted (System.IO.FileSystemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnDeleted(class System.IO.FileSystemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnDeleted (e As FileSystemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnDeleted(System::IO::FileSystemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnDeleted : System.IO.FileSystemEventArgs -&gt; unit" Usage="fileSystemWatcher.OnDeleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.FileSystemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="38510-411">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.IO.FileSystemEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="38510-411">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="38510-412"><see cref="E:System.IO.FileSystemWatcher.Deleted" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="38510-412">Raises the <see cref="E:System.IO.FileSystemWatcher.Deleted" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-413"><xref:System.IO.FileSystemWatcher.OnDeleted%2A> は、監視されているディレクトリ内のファイルまたはディレクトリが削除されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="38510-413"><xref:System.IO.FileSystemWatcher.OnDeleted%2A> is called when a file or directory, within the directory being monitored, is deleted.</span></span>  
  
 <span data-ttu-id="38510-414">ファイルやディレクトリのコピーや移動など、いくつかの一般的な原因はイベントに直接対応していませんが、これらの発生によってイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-414">Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</span></span> <span data-ttu-id="38510-415">ファイルまたはディレクトリをコピーすると、そのディレクトリが監視されている場合、ファイルのコピー先のディレクトリに <xref:System.IO.FileSystemWatcher.Created> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-415">When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched.</span></span> <span data-ttu-id="38510-416">コピー元のディレクトリが <xref:System.IO.FileSystemWatcher>の別のインスタンスによって監視されていた場合、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="38510-416">If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised.</span></span> <span data-ttu-id="38510-417">たとえば、<xref:System.IO.FileSystemWatcher>の2つのインスタンスを作成したとします。</span><span class="sxs-lookup"><span data-stu-id="38510-417">For example, you create two instances of <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="38510-418">FileSystemWatcher1 は "C:\My Documents" を監視するように設定されており、FileSystemWatcher2 は "C:\ your Documents" を監視するように設定されています。</span><span class="sxs-lookup"><span data-stu-id="38510-418">FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</span></span> <span data-ttu-id="38510-419">"マイドキュメント" から "ドキュメント" にファイルをコピーすると <xref:System.IO.FileSystemWatcher.Created>、FileSystemWatcher2 によってイベントが発生しますが、FileSystemWatcher1 に対してイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="38510-419">If you copy a file from "My Documents" into "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</span></span> <span data-ttu-id="38510-420">コピーとは異なり、ファイルまたはディレクトリを移動すると、2つのイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-420">Unlike copying, moving a file or directory raises two events.</span></span> <span data-ttu-id="38510-421">前の例では、ファイルを "My Documents" から "your Documents" に移動した場合、FileSystemWatcher2 によって <xref:System.IO.FileSystemWatcher.Created> イベントが発生し、FileSystemWatcher1 によってイベントが発生 <xref:System.IO.FileSystemWatcher.Deleted> します。</span><span class="sxs-lookup"><span data-stu-id="38510-421">From the previous example, if you moved a file from "My Documents" to "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.</span></span>  
  
 <span data-ttu-id="38510-422">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="38510-422">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="38510-423">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="38510-423">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="38510-424">派生クラスで <see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /> をオーバーライドする場合は、必ず基底クラスの <see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="38510-424">When overriding <see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /> method.</span></span></para></block>
        <altmember cref="E:System.IO.FileSystemWatcher.Created" />
        <altmember cref="E:System.IO.FileSystemWatcher.Deleted" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnError">
      <MemberSignature Language="C#" Value="protected void OnError (System.IO.ErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnError(class System.IO.ErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnError (e As ErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnError(System::IO::ErrorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnError : System.IO.ErrorEventArgs -&gt; unit" Usage="fileSystemWatcher.OnError e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.ErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="38510-425">イベント データを格納している <see cref="T:System.IO.ErrorEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="38510-425">An <see cref="T:System.IO.ErrorEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="38510-426"><see cref="E:System.IO.FileSystemWatcher.Error" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="38510-426">Raises the <see cref="E:System.IO.FileSystemWatcher.Error" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-427"><xref:System.IO.FileSystemWatcher.OnError%2A> は、エラーが発生したときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="38510-427"><xref:System.IO.FileSystemWatcher.OnError%2A> is called when an error occurs.</span></span>  
  
 <span data-ttu-id="38510-428">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="38510-428">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="38510-429">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="38510-429">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="38510-430">派生クラスで <see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /> をオーバーライドする場合は、必ず基底クラスの <see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="38510-430">When overriding <see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /> method.</span></span></para></block>
        <altmember cref="E:System.IO.FileSystemWatcher.Error" />
        <altmember cref="T:System.IO.ErrorEventArgs" />
        <altmember cref="T:System.IO.ErrorEventHandler" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
      </Docs>
    </Member>
    <Member MemberName="OnRenamed">
      <MemberSignature Language="C#" Value="protected void OnRenamed (System.IO.RenamedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnRenamed(class System.IO.RenamedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnRenamed (e As RenamedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnRenamed(System::IO::RenamedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnRenamed : System.IO.RenamedEventArgs -&gt; unit" Usage="fileSystemWatcher.OnRenamed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.RenamedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="38510-431">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.IO.RenamedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="38510-431">A <see cref="T:System.IO.RenamedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="38510-432"><see cref="E:System.IO.FileSystemWatcher.Renamed" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="38510-432">Raises the <see cref="E:System.IO.FileSystemWatcher.Renamed" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-433"><xref:System.IO.FileSystemWatcher.OnRenamed%2A> は、監視されているディレクトリ内のファイルまたはディレクトリの名前が変更されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="38510-433"><xref:System.IO.FileSystemWatcher.OnRenamed%2A> is called when a file or directory within the directory being monitored is renamed.</span></span> <span data-ttu-id="38510-434"><xref:System.IO.RenamedEventArgs> の引数には、変更の種類、古いパスと新しいパス、新旧の名前など、名前の変更操作に関する情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="38510-434">Its <xref:System.IO.RenamedEventArgs> argument contains information about the renaming operation, such as the type of change, the old and new path, and the old and new name.</span></span> <span data-ttu-id="38510-435"><xref:System.IO.FileSystemWatcher> がオペレーティングシステムから古い名前と新しい名前のイベントを取得しない場合、名前が変更されたイベントの <xref:System.IO.FileSystemEventArgs.Name> プロパティは null になることがあります。</span><span class="sxs-lookup"><span data-stu-id="38510-435">Note that its <xref:System.IO.FileSystemEventArgs.Name> property may be null for renamed events if the <xref:System.IO.FileSystemWatcher> does not get matching old and new name events from the operating system.</span></span> 
  
 <span data-ttu-id="38510-436">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="38510-436">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="38510-437">詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="38510-437">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="38510-438">派生クラスで <see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /> をオーバーライドする場合は、必ず基底クラスの <see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="38510-438">When overriding <see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /> method.</span></span></para></block>
        <altmember cref="E:System.IO.FileSystemWatcher.Renamed" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.IO.FileSystemWatcher.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Diagnostics.Design.FSWPathEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("The directory to monitor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Editor("System.Diagnostics.Design.FSWPathEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_Path")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Diagnostics.Design.FSWPathEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38510-439">ウォッチするディレクトリのパスを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-439">Gets or sets the path of the directory to watch.</span></span></summary>
        <value><span data-ttu-id="38510-440">監視するパス。</span><span class="sxs-lookup"><span data-stu-id="38510-440">The path to monitor.</span></span> <span data-ttu-id="38510-441">既定値は、空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="38510-441">The default is an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-442">これは、ディレクトリへの完全修飾パスです。</span><span class="sxs-lookup"><span data-stu-id="38510-442">This is a fully qualified path to a directory.</span></span> <span data-ttu-id="38510-443"><xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> プロパティが `true`の場合、このディレクトリはシステムが変更を監視するルートになります。それ以外の場合は、監視されている唯一のディレクトリです。</span><span class="sxs-lookup"><span data-stu-id="38510-443">If the <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> property is `true`, this directory is the root at which the system watches for changes; otherwise it is the only directory watched.</span></span> <span data-ttu-id="38510-444">特定のファイルを監視するには、<xref:System.IO.FileSystemWatcher.Path%2A> プロパティを完全修飾、正しいディレクトリ、および <xref:System.IO.FileSystemWatcher.Filter%2A> プロパティをファイル名に設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-444">To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Path%2A> property to the fully qualified, correct directory, and the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.</span></span>  
  
 <span data-ttu-id="38510-445"><xref:System.IO.FileSystemWatcher.Path%2A> プロパティは、汎用名前付け規則 (UNC) のパスをサポートします。</span><span class="sxs-lookup"><span data-stu-id="38510-445">The <xref:System.IO.FileSystemWatcher.Path%2A> property supports Universal Naming Convention (UNC) paths.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38510-446">コンポーネントが変更を監視できるようにするには、このプロパティを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="38510-446">This property must be set before the component can watch for changes.</span></span>  
  
 <span data-ttu-id="38510-447">ディレクトリの名前を変更すると、<xref:System.IO.FileSystemWatcher> は、新しく名前を変更した項目に自動的に再アタッチされます。</span><span class="sxs-lookup"><span data-stu-id="38510-447">When a directory is renamed, the <xref:System.IO.FileSystemWatcher> automatically reattaches itself to the newly renamed item.</span></span> <span data-ttu-id="38510-448">たとえば、<xref:System.IO.FileSystemWatcher.Path%2A> プロパティを "C:\My Documents" に設定した後、ディレクトリの名前を "C:\ your Documents" に手動で変更した場合、コンポーネントは、新しく名前を変更したディレクトリで変更通知のリッスンを続行します。</span><span class="sxs-lookup"><span data-stu-id="38510-448">For example, if you set the <xref:System.IO.FileSystemWatcher.Path%2A> property to "C:\My Documents" and then manually rename the directory to "C:\Your Documents", the component continues listening for change notifications on the newly renamed directory.</span></span> <span data-ttu-id="38510-449">ただし、<xref:System.IO.FileSystemWatcher.Path%2A> プロパティを要求するときに、古いパスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="38510-449">However, when you ask for the <xref:System.IO.FileSystemWatcher.Path%2A> property, it contains the old path.</span></span> <span data-ttu-id="38510-450">これは、コンポーネントが、ディレクトリの名前ではなく、ハンドルに基づいてどのディレクトリを監視するかを決定するために発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-450">This happens because the component determines what directory watches based on the handle, rather than the name of the directory.</span></span> <span data-ttu-id="38510-451">名前を変更してもハンドルには影響しません。</span><span class="sxs-lookup"><span data-stu-id="38510-451">Renaming does not affect the handle.</span></span> <span data-ttu-id="38510-452">そのため、コンポーネントを破棄し、<xref:System.IO.FileSystemWatcher.Path%2A> プロパティを更新せずにコンポーネントを再作成すると、ディレクトリが存在しなくなったため、アプリケーションは失敗します。</span><span class="sxs-lookup"><span data-stu-id="38510-452">So, if you destroy the component, and then recreate it without updating the <xref:System.IO.FileSystemWatcher.Path%2A> property, your application will fail because the directory no longer exists.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38510-453">次の例では、実行時に指定されたディレクトリを監視する <xref:System.IO.FileSystemWatcher> を作成します。</span><span class="sxs-lookup"><span data-stu-id="38510-453">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="38510-454">コンポーネントは、ディレクトリ内のテキストファイルの `LastWrite` と `LastAccess` 時刻、作成、削除、または名前変更を監視するように設定されています。</span><span class="sxs-lookup"><span data-stu-id="38510-454">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="38510-455">ファイルが変更、作成、または削除された場合、ファイルへのパスがコンソールに出力されます。</span><span class="sxs-lookup"><span data-stu-id="38510-455">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="38510-456">ファイルの名前を変更すると、古いパスと新しいパスがコンソールに出力されます。</span><span class="sxs-lookup"><span data-stu-id="38510-456">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="38510-457">指定されたパスが存在しないか、見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="38510-457">The specified path does not exist or could not be found.</span></span>  
  
 <span data-ttu-id="38510-458">または</span><span class="sxs-lookup"><span data-stu-id="38510-458">-or-</span></span>  
  
 <span data-ttu-id="38510-459">指定したパスにワイルドカード文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="38510-459">The specified path contains wildcard characters.</span></span>  
  
 <span data-ttu-id="38510-460">または</span><span class="sxs-lookup"><span data-stu-id="38510-460">-or-</span></span>  
  
 <span data-ttu-id="38510-461">指定したパスに無効なパス文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="38510-461">The specified path contains invalid path characters.</span></span></exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
      </Docs>
    </Member>
    <Member MemberName="Renamed">
      <MemberSignature Language="C#" Value="public event System.IO.RenamedEventHandler Renamed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.RenamedEventHandler Renamed" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Renamed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Renamed As RenamedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::RenamedEventHandler ^ Renamed;" />
      <MemberSignature Language="F#" Value="member this.Renamed : System.IO.RenamedEventHandler " Usage="member this.Renamed : System.IO.RenamedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("Occurs when a file/directory rename matches the filter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_Renamed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.RenamedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38510-462">指定した <see cref="P:System.IO.FileSystemWatcher.Path" /> のファイルまたはディレクトリの名前が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-462">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is renamed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-463">`Renamed` イベントは、次のシグネチャを持つ <xref:System.IO.RenamedEventHandler> デリゲートです。</span><span class="sxs-lookup"><span data-stu-id="38510-463">The `Renamed` event is an <xref:System.IO.RenamedEventHandler> delegate that has the following signature:</span></span>

 ```csharp
public delegate void Renamed(object sender, RenamedEventArgs e);
 ```
 ```vb
Public Delegate Sub RenamedEventHandler(sender As Object, e As RenamedEventArgs)
 ```
 <span data-ttu-id="38510-464"><xref:System.IO.RenamedEventArgs> オブジェクトは、名前変更操作に関する情報を提供します。たとえば、名前変更の種類 (<xref:System.IO.FileSystemEventArgs.ChangeType> プロパティ)、新旧の名前、新旧のパスなどです。</span><span class="sxs-lookup"><span data-stu-id="38510-464">The <xref:System.IO.RenamedEventArgs> object provides information about the renaming operation, such as the type of the rename (the <xref:System.IO.FileSystemEventArgs.ChangeType> property), the old and new name, and the old and new path.</span></span> <span data-ttu-id="38510-465"><xref:System.IO.FileSystemWatcher> がオペレーティングシステムから古い名前と新しい名前のイベントを取得しない場合、名前が変更されたイベントでは、<xref:System.IO.FileSystemEventArgs.Name> プロパティが null になることがあります。</span><span class="sxs-lookup"><span data-stu-id="38510-465">Note that the <xref:System.IO.FileSystemEventArgs.Name> property may be null for renamed events if the <xref:System.IO.FileSystemWatcher> does not get matching old and new name events from the operating system.</span></span>

 <span data-ttu-id="38510-466">監視しているディレクトリの名前を変更しても、通知は生成されません。</span><span class="sxs-lookup"><span data-stu-id="38510-466">Renaming the directory you are watching will not raise a notification.</span></span> <span data-ttu-id="38510-467">通知は、監視しているディレクトリ内のエントリに対してのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="38510-467">Notifications are only raised for entries inside the directory you are watching.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38510-468">次の例では、<xref:System.IO.FileSystemWatcher.Renamed> イベントを使用して、監視対象のファイルの名前が変更されるたびに、コンソールへのファイルパスを表示します。</span><span class="sxs-lookup"><span data-stu-id="38510-468">The following example uses the <xref:System.IO.FileSystemWatcher.Renamed> event to display the file path to the console whenever the watched file is renamed.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.IO.FileSystemWatcher.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38510-469"><see cref="T:System.ComponentModel.ISite" /> の <see cref="T:System.IO.FileSystemWatcher" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-469">Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.IO.FileSystemWatcher" />.</span></span></summary>
        <value><span data-ttu-id="38510-470"><see cref="T:System.ComponentModel.ISite" /> の <see cref="T:System.IO.FileSystemWatcher" />。</span><span class="sxs-lookup"><span data-stu-id="38510-470">An <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.IO.FileSystemWatcher" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-471">サイトは、<xref:System.ComponentModel.Component> を <xref:System.ComponentModel.Design.IDesignerHost.Container%2A> にバインドし、それらの間の通信を可能にします。また、コンテナーがそのコンポーネントを管理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="38510-471">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Design.IDesignerHost.Container%2A> and enable communication between them, as well as provide a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.IO.FileSystemWatcher.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("The object used to marshal the event handler calls resulting from a directory change")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_SynchronizingObject")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="38510-472">ディレクトリ変更の結果として発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="38510-472">Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.</span></span></summary>
        <value><span data-ttu-id="38510-473">ディレクトリ変更の結果として発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを表す <see cref="T:System.ComponentModel.ISynchronizeInvoke" />。</span><span class="sxs-lookup"><span data-stu-id="38510-473">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> that represents the object used to marshal the event handler calls issued as a result of a directory change.</span></span> <span data-ttu-id="38510-474">既定値は、<see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="38510-474">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-475"><xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> が `null`場合、<xref:System.IO.FileSystemWatcher.Changed>、<xref:System.IO.FileSystemWatcher.Created>、<xref:System.IO.FileSystemWatcher.Deleted>、および <xref:System.IO.FileSystemWatcher.Renamed> の各イベントを処理するメソッドは、システムスレッドプールからのスレッドで呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="38510-475">When <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> is `null`, methods handling the <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, and <xref:System.IO.FileSystemWatcher.Renamed> events are called on a thread from the system thread pool.</span></span> <span data-ttu-id="38510-476">システムスレッドプールの詳細については、「<xref:System.Threading.ThreadPool>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="38510-476">For more information on system thread pools, see <xref:System.Threading.ThreadPool>.</span></span>  
  
 <span data-ttu-id="38510-477"><xref:System.IO.FileSystemWatcher.Changed>、<xref:System.IO.FileSystemWatcher.Created>、<xref:System.IO.FileSystemWatcher.Deleted>、および <xref:System.IO.FileSystemWatcher.Renamed> イベントが Windows フォームなどのビジュアル <xref:System.Windows.Forms.Button>コンポーネントによって処理される場合、システムスレッドプールを介してコンポーネントにアクセスすると、機能しないことがあります。または、例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="38510-477">When the <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, and <xref:System.IO.FileSystemWatcher.Renamed> events are handled by a visual Windows Forms component, such as a <xref:System.Windows.Forms.Button>, accessing the component through the system thread pool might not work, or may result in an exception.</span></span> <span data-ttu-id="38510-478">これを回避するには、<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> を Windows フォームコンポーネントに設定します。これにより、<xref:System.IO.FileSystemWatcher.Changed>、<xref:System.IO.FileSystemWatcher.Created>、<xref:System.IO.FileSystemWatcher.Deleted>、および <xref:System.IO.FileSystemWatcher.Renamed> のイベントを処理するメソッドが、コンポーネントが作成されたのと同じスレッド上で呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="38510-478">Avoid this by setting <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> to a Windows Forms component, which causes the methods that handle the <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, and <xref:System.IO.FileSystemWatcher.Renamed> events to be called on the same thread on which the component was created.</span></span>  
  
 <span data-ttu-id="38510-479"><xref:System.IO.FileSystemWatcher> が Windows フォームデザイナーの [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] 内で使用されている場合、<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> は <xref:System.IO.FileSystemWatcher>を含むコントロールに自動的に設定されます。</span><span class="sxs-lookup"><span data-stu-id="38510-479">If the <xref:System.IO.FileSystemWatcher> is used inside [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] in a Windows Forms designer, <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> automatically sets to the control that contains the <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="38510-480">たとえば、Form1 のデザイナー (<xref:System.Windows.Forms.Form>から継承) に <xref:System.IO.FileSystemWatcher> を配置した場合、<xref:System.IO.FileSystemWatcher> の <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> プロパティは、Form1 のインスタンスに設定されます。</span><span class="sxs-lookup"><span data-stu-id="38510-480">For example, if you place a <xref:System.IO.FileSystemWatcher> on a designer for Form1 (which inherits from <xref:System.Windows.Forms.Form>) the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property of <xref:System.IO.FileSystemWatcher> is set to the instance of Form1.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForChanged">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="38510-481">発生した変更についての固有な情報を格納する構造体を返す同期メソッド。</span><span class="sxs-lookup"><span data-stu-id="38510-481">A synchronous method that returns a structure that contains specific information on the change that occurred.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForChanged">
      <MemberSignature Language="C#" Value="public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.IO.WaitForChangedResult WaitForChanged(valuetype System.IO.WatcherChangeTypes changeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForChanged (changeType As WatcherChangeTypes) As WaitForChangedResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::WaitForChangedResult WaitForChanged(System::IO::WatcherChangeTypes changeType);" />
      <MemberSignature Language="F#" Value="member this.WaitForChanged : System.IO.WatcherChangeTypes -&gt; System.IO.WaitForChangedResult" Usage="fileSystemWatcher.WaitForChanged changeType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.WaitForChangedResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeType" Type="System.IO.WatcherChangeTypes" />
      </Parameters>
      <Docs>
        <param name="changeType"><span data-ttu-id="38510-482">ウォッチする <see cref="T:System.IO.WatcherChangeTypes" />。</span><span class="sxs-lookup"><span data-stu-id="38510-482">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</span></span></param>
        <summary><span data-ttu-id="38510-483">監視する変更の種類を指定して、発生した変更についての固有な情報を格納する構造体を返す同期メソッド。</span><span class="sxs-lookup"><span data-stu-id="38510-483">A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</span></span></summary>
        <returns><span data-ttu-id="38510-484">発生した変更についての固有な情報を格納する <see cref="T:System.IO.WaitForChangedResult" />。</span><span class="sxs-lookup"><span data-stu-id="38510-484">A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-485">このメソッドは、最初の変更が発生するまで無期限に待機してから、を返します。</span><span class="sxs-lookup"><span data-stu-id="38510-485">This method waits indefinitely until the first change occurs and then returns.</span></span> <span data-ttu-id="38510-486">これは、`timeout` パラメーターを-1 に設定して <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> を使用する場合と同じです。</span><span class="sxs-lookup"><span data-stu-id="38510-486">This is the same as using <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> with the `timeout` parameter set to -1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38510-487">このメソッドを使用すると、<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> プロパティが `false`に設定されている場合でも、ファイルの変更に応答するためにイベントハンドラーを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="38510-487">This method allows an event handler to be invoked to respond to file changes even if the <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> property is set to `false`.</span></span>  
  
 <span data-ttu-id="38510-488">システムによっては、<xref:System.IO.FileSystemWatcher> が短い8.3 ファイル名形式を使用してファイルに変更を報告する場合があります。</span><span class="sxs-lookup"><span data-stu-id="38510-488">In some systems, <xref:System.IO.FileSystemWatcher> reports changes to files using the short 8.3 file name format.</span></span> <span data-ttu-id="38510-489">たとえば、"LongFileName. Longfilename" への変更は、"Longfilename ~" として報告されます。Lon "。</span><span class="sxs-lookup"><span data-stu-id="38510-489">For example, a change to  "LongFileName.LongExtension" could be reported as "LongFi~.Lon".</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.WaitForChangedResult" />
      </Docs>
    </Member>
    <Member MemberName="WaitForChanged">
      <MemberSignature Language="C#" Value="public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.IO.WaitForChangedResult WaitForChanged(valuetype System.IO.WatcherChangeTypes changeType, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForChanged (changeType As WatcherChangeTypes, timeout As Integer) As WaitForChangedResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::WaitForChangedResult WaitForChanged(System::IO::WatcherChangeTypes changeType, int timeout);" />
      <MemberSignature Language="F#" Value="member this.WaitForChanged : System.IO.WatcherChangeTypes * int -&gt; System.IO.WaitForChangedResult" Usage="fileSystemWatcher.WaitForChanged (changeType, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.WaitForChangedResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeType" Type="System.IO.WatcherChangeTypes" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="changeType"><span data-ttu-id="38510-490">ウォッチする <see cref="T:System.IO.WatcherChangeTypes" />。</span><span class="sxs-lookup"><span data-stu-id="38510-490">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</span></span></param>
        <param name="timeout"><span data-ttu-id="38510-491">タイムアウトまでの待機時間 (ミリ秒単位)。</span><span class="sxs-lookup"><span data-stu-id="38510-491">The time (in milliseconds) to wait before timing out.</span></span></param>
        <summary><span data-ttu-id="38510-492">監視する変更の種類とタイムアウトまでの待機時間 (ミリ秒単位) を指定して、発生した変更についての固有な情報を格納する構造体を返す同期メソッド。</span><span class="sxs-lookup"><span data-stu-id="38510-492">A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</span></span></summary>
        <returns><span data-ttu-id="38510-493">発生した変更についての固有な情報を格納する <see cref="T:System.IO.WaitForChangedResult" />。</span><span class="sxs-lookup"><span data-stu-id="38510-493">A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38510-494">このメソッドは、変更が発生するか、タイムアウトになるまで待機します。`timeout` パラメーターの値-1 は、無期限に待機することを意味します。</span><span class="sxs-lookup"><span data-stu-id="38510-494">This method waits until a change occurs or it has timed out. A value of -1 for the `timeout` parameter means wait indefinitely.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38510-495">このメソッドを使用すると、<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> プロパティが `false`に設定されている場合でも、ファイルの変更に応答するためにイベントハンドラーを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="38510-495">This method allows an event handler to be invoked to respond to file changes even if the <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> property is set to `false`.</span></span>  
  
 <span data-ttu-id="38510-496">システムによっては、<xref:System.IO.FileSystemWatcher> が短い8.3 ファイル名形式を使用してファイルに変更を報告する場合があります。</span><span class="sxs-lookup"><span data-stu-id="38510-496">In some systems, <xref:System.IO.FileSystemWatcher> reports changes to files using the short 8.3 file name format.</span></span> <span data-ttu-id="38510-497">たとえば、"LongFileName. Longfilename" への変更は、"Longfilename ~" として報告されます。Lon "。</span><span class="sxs-lookup"><span data-stu-id="38510-497">For example, a change to  "LongFileName.LongExtension" could be reported as "LongFi~.Lon".</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.WaitForChangedResult" />
      </Docs>
    </Member>
  </Members>
</Type>
