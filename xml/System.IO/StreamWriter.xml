<Type Name="StreamWriter" FullName="System.IO.StreamWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2e8140cfb9447ca282d39c503b18547fa7ac6fdc" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83954024" /></Metadata><TypeSignature Language="C#" Value="public class StreamWriter : System.IO.TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StreamWriter extends System.IO.TextWriter" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.IO.StreamWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class StreamWriter&#xA;Inherits TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class StreamWriter : System::IO::TextWriter" />
  <TypeSignature Language="F#" Value="type StreamWriter = class&#xA;    inherit TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit StreamWriter extends System.IO.TextWriter" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.IO</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.IO" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.IO" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Runtime.Extensions" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.IO" FromVersion="4.2.0.0" To="System.Runtime.Extensions" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.IO" FromVersion="4.2.1.0" To="System.Runtime.Extensions" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.IO" FromVersion="4.2.2.0" To="System.Runtime.Extensions" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.IO.TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2f8a3-101">文字を特定のエンコーディングでストリームに書き込むための <see cref="T:System.IO.TextWriter" /> を実装しています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-101">Implements a <see cref="T:System.IO.TextWriter" /> for writing characters to a stream in a particular encoding.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-102"><xref:System.IO.StreamWriter> は、特定のエンコードでの文字出力用に設計されています。一方、<xref:System.IO.Stream> から派生したクラスは、バイト入出力用に設計されています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-102"><xref:System.IO.StreamWriter> is designed for character output in a particular encoding, whereas classes derived from <xref:System.IO.Stream> are designed for byte input and output.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2f8a3-103">この型は <xref:System.IDisposable> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-103">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="2f8a3-104">型の使用が完了したら、直接的または間接的に型を破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-104">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="2f8a3-105">直接的に型を破棄するには、`try` / `catch` ブロック内で <xref:System.IDisposable.Dispose%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-105">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="2f8a3-106">間接的に型を破棄するには、`using` (C# の場合) または `Using` (Visual Basic 言語) などの言語構成要素を使用します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-106">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="2f8a3-107">詳細については、<xref:System.IDisposable> インターフェイスに関するトピック内の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-107">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="2f8a3-108">特に指定しない限り、<xref:System.IO.StreamWriter> 既定で <xref:System.Text.UTF8Encoding> のインスタンスが使用されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-108"><xref:System.IO.StreamWriter> defaults to using an instance of <xref:System.Text.UTF8Encoding> unless specified otherwise.</span></span> <span data-ttu-id="2f8a3-109">この `UTF8Encoding` のインスタンスは、バイトオーダーマーク (BOM) を使用せずに構築されます。そのため、<xref:System.Text.Encoding.GetPreamble%2A> メソッドは空のバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-109">This instance of `UTF8Encoding` is constructed without a byte order mark (BOM), so its <xref:System.Text.Encoding.GetPreamble%2A> method returns an empty byte array.</span></span> <span data-ttu-id="2f8a3-110">このコンストラクターの既定の UTF-8 エンコーディングでは、無効なバイトで例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-110">The default UTF-8 encoding for this constructor throws an exception on invalid bytes.</span></span> <span data-ttu-id="2f8a3-111">この動作は、<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> プロパティの encoding オブジェクトによって提供される動作とは異なります。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-111">This behavior is different from the behavior provided by the encoding object in the <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="2f8a3-112">BOM を指定し、無効なバイトに対して例外がスローされるかどうかを判断するには、<xref:System.IO.StreamWriter.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Text.Encoding%29> や <xref:System.IO.StreamWriter.%23ctor%2A>などのパラメーターとしてエンコーディングオブジェクトを受け取るコンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-112">To specify a BOM and determine whether an exception is thrown on invalid bytes, use a constructor that accepts an encoding object as a parameter, such as <xref:System.IO.StreamWriter.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Text.Encoding%29> or <xref:System.IO.StreamWriter.%23ctor%2A>.</span></span>  
  
 <span data-ttu-id="2f8a3-113">既定では、<xref:System.IO.StreamWriter> はスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-113">By default, a <xref:System.IO.StreamWriter> is not thread safe.</span></span> <span data-ttu-id="2f8a3-114">スレッドセーフラッパーについては、「<xref:System.IO.TextWriter.Synchronized%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-114">See <xref:System.IO.TextWriter.Synchronized%2A?displayProperty=nameWithType> for a thread-safe wrapper.</span></span>  
  
 <span data-ttu-id="2f8a3-115">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-115">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-116">次の例では、<xref:System.IO.StreamWriter> オブジェクトを使用して、C ドライブ上のディレクトリの一覧を示すファイルを作成し、<xref:System.IO.StreamReader> オブジェクトを使用して各ディレクトリ名を読み取り、表示する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-116">The following example shows how to use a <xref:System.IO.StreamWriter> object to write a file that lists the directories on the C drive, and then uses a <xref:System.IO.StreamReader> object to read and display each directory name.</span></span> <span data-ttu-id="2f8a3-117">アンマネージリソースが正しく破棄されるように、これらのオブジェクトを `using` ステートメントで使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-117">A good practice is to use these objects in a `using` statement so that the unmanaged resources are correctly disposed.</span></span> <span data-ttu-id="2f8a3-118">`using` ステートメントは、それを使用しているコードが完了すると、オブジェクトの <xref:System.IDisposable.Dispose%2A> を自動的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-118">The `using` statement automatically calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="2f8a3-119">この例で使用するコンストラクターは、[!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] アプリでの使用はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-119">The constructor used in this example is not supported for use in [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] Apps.</span></span>  
  
 [!code-csharp[StreamReadWrite#1](~/samples/snippets/csharp/VS_Snippets_CLR/streamreadwrite/cs/program.cs#1)]
 [!code-vb[StreamReadWrite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/streamreadwrite/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Stream" />
    <altmember cref="T:System.IO.StreamReader" />
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Encoding" />
    <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-120">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-120">File and Stream I/O</span></span></related>
    <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-121">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-121">How to: Read Text from a File</span></span></related>
    <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-122">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-122">How to: Write Text to a File</span></span></related>
    <related type="Article" href="/dotnet/standard/io/how-to-read-and-write-to-a-newly-created-data-file"><span data-ttu-id="2f8a3-123">方法 : 新しく作成されたデータ ファイルに対して読み書きする</span><span class="sxs-lookup"><span data-stu-id="2f8a3-123">How to: Read and Write to a Newly Created Data File</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2f8a3-124"><see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-124">Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StreamWriter (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StreamWriter(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.IO.StreamWriter : System.IO.Stream -&gt; System.IO.StreamWriter" Usage="new System.IO.StreamWriter stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="2f8a3-125">書き込み先のストリーム。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-125">The stream to write to.</span></span></param>
        <summary><span data-ttu-id="2f8a3-126">UTF-8 エンコーディングと既定のバッファー サイズを使用して、指定したストリーム用の <see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-126">Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified stream by using UTF-8 encoding and the default buffer size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-127">このコンストラクターは、バイト順マーク (BOM) を使用せずに UTF-8 エンコーディングを使用して <xref:System.IO.StreamWriter> を作成します。そのため、<xref:System.Text.Encoding.GetPreamble%2A> メソッドは空のバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-127">This constructor creates a <xref:System.IO.StreamWriter> with UTF-8 encoding without a Byte-Order Mark (BOM), so its <xref:System.Text.Encoding.GetPreamble%2A> method returns an empty byte array.</span></span> <span data-ttu-id="2f8a3-128">このコンストラクターの既定の UTF-8 エンコーディングでは、無効なバイトで例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-128">The default UTF-8 encoding for this constructor throws an exception on invalid bytes.</span></span> <span data-ttu-id="2f8a3-129">この動作は、<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> プロパティの encoding オブジェクトによって提供される動作とは異なります。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-129">This behavior is different from the behavior provided by the encoding object in the <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="2f8a3-130">無効なバイトに対して例外がスローされるかどうかを指定するには、<xref:System.IO.StreamWriter.%23ctor%2A>などのパラメーターとしてエンコーディングオブジェクトを受け取るコンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-130">To specify whether an exception is thrown on invalid bytes, use a constructor that accepts an encoding object as a parameter, such as <xref:System.IO.StreamWriter.%23ctor%2A>.</span></span> <span data-ttu-id="2f8a3-131"><xref:System.IO.StreamWriter.BaseStream%2A> プロパティは、`stream` パラメーターを使用して初期化されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-131">The <xref:System.IO.StreamWriter.BaseStream%2A> property is initialized using the `stream` parameter.</span></span> <span data-ttu-id="2f8a3-132">ストリームの位置はリセットされません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-132">The position of the stream is not reset.</span></span>  
  
 <span data-ttu-id="2f8a3-133"><xref:System.IO.StreamWriter> オブジェクトは <xref:System.IO.StreamWriter.Dispose%2A?displayProperty=nameWithType> が呼び出されたときに、指定された <xref:System.IO.Stream> オブジェクトで <xref:System.IO.Stream.Dispose> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-133">The <xref:System.IO.StreamWriter> object calls <xref:System.IO.Stream.Dispose> on the provided <xref:System.IO.Stream> object when <xref:System.IO.StreamWriter.Dispose%2A?displayProperty=nameWithType> is called.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2f8a3-134">特定のカルチャ設定を使用して文字セットをコンパイルし、異なるカルチャ設定で同じ文字を取得すると、文字が解釈されず、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-134">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2f8a3-135">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-135">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-136">次のコード例は、このコンストラクターを示しています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-136">The following code example demonstrates this constructor.</span></span>  
  
 [!code-csharp[System.IO.StreamWriter.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.streamwriter.ctor/cs/program1.cs#1)]
 [!code-vb[System.IO.StreamWriter.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.streamwriter.ctor/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f8a3-137"><paramref name="stream" /> が書き込み可能ではありません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-137"><paramref name="stream" /> is not writable.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f8a3-138"><paramref name="stream" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-138"><paramref name="stream" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-139">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-139">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-140">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-140">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-141">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-141">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StreamWriter (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StreamWriter(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.IO.StreamWriter : string -&gt; System.IO.StreamWriter" Usage="new System.IO.StreamWriter path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2f8a3-142">書き込まれる完全なファイルパス。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-142">The complete file path to write to.</span></span> <span data-ttu-id="2f8a3-143"><paramref name="path" /> はファイル名にすることもできます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-143"><paramref name="path" /> can be a file name.</span></span></param>
        <summary><span data-ttu-id="2f8a3-144">既定のエンコーディングとバッファー サイズを使用して、指定したファイル用の <see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-144">Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file by using the default encoding and buffer size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-145">このコンストラクターは、バイト順マーク (BOM) を使用せずに UTF-8 エンコーディングを使用して <xref:System.IO.StreamWriter> を作成します。そのため、<xref:System.Text.Encoding.GetPreamble%2A> メソッドは空のバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-145">This constructor creates a <xref:System.IO.StreamWriter> with UTF-8 encoding without a Byte-Order Mark (BOM), so its <xref:System.Text.Encoding.GetPreamble%2A> method returns an empty byte array.</span></span> <span data-ttu-id="2f8a3-146">このコンストラクターの既定の UTF-8 エンコーディングでは、無効なバイトで例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-146">The default UTF-8 encoding for this constructor throws an exception on invalid bytes.</span></span> <span data-ttu-id="2f8a3-147">この動作は、<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> プロパティの encoding オブジェクトによって提供される動作とは異なります。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-147">This behavior is different from the behavior provided by the encoding object in the <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="2f8a3-148">BOM を指定し、無効なバイトに対して例外がスローされるかどうかを判断するには、<xref:System.IO.StreamWriter.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Text.Encoding%29>などのパラメーターとしてエンコーディングオブジェクトを受け取るコンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-148">To specify a BOM and determine whether an exception is thrown on invalid bytes, use a constructor that accepts an encoding object as a parameter, such as <xref:System.IO.StreamWriter.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Text.Encoding%29>.</span></span>  
  
 <span data-ttu-id="2f8a3-149">`path` パラメーターには、汎用名前付け規則 (UNC) 共有上のファイルを含むファイル名を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-149">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span> <span data-ttu-id="2f8a3-150">ファイルが存在する場合は上書きされます。それ以外の場合は、新しいファイルが作成されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-150">If the file exists, it is overwritten; otherwise, a new file is created.</span></span>  
  
 <span data-ttu-id="2f8a3-151">`path` パラメーターは、ディスクに格納されているファイルである必要はありません。ストリームを使用したアクセスをサポートするシステムの任意の部分を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-151">The `path` parameter is not required to be a file stored on disk; it can be any part of a system that supports access using streams.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2f8a3-152">特定のカルチャ設定を使用して文字セットをコンパイルし、異なるカルチャ設定で同じ文字を取得すると、文字が解釈されず、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-152">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2f8a3-153">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-153">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-154">次のコード例は、このコンストラクターを示しています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-154">The following code example demonstrates this constructor.</span></span>  
  
 [!code-csharp[System.IO.StreamWriter.ctor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.streamwriter.ctor/cs/program5.cs#5)]
 [!code-vb[System.IO.StreamWriter.ctor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.streamwriter.ctor/vb/program5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="2f8a3-155">アクセスが拒否されました。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-155">Access is denied.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f8a3-156"><paramref name="path" /> が空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-156"><paramref name="path" /> is an empty string ("").</span></span>  
  
<span data-ttu-id="2f8a3-157">または</span><span class="sxs-lookup"><span data-stu-id="2f8a3-157">-or-</span></span> 
 <span data-ttu-id="2f8a3-158"><paramref name="path" /> には、システム デバイスの名前 (com1、com2 など) が含まれます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-158"><paramref name="path" /> contains the name of a system device (com1, com2, and so on).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f8a3-159"><paramref name="path" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-159"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="2f8a3-160">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-160">The specified path is invalid (for example, it is on an unmapped drive).</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="2f8a3-161">指定されたパスかファイル名、またはその両方がシステム定義の最大文字数を超えています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-161">The specified path, file name, or both exceed the system-defined maximum length.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="2f8a3-162"><paramref name="path" /> には、ファイル名、ディレクトリ名、またはボリューム ラベルの不正な構文または無効な構文が含まれています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-162"><paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="2f8a3-163">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-163">The caller does not have the required permission.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-164">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-164">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-165">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-165">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-166">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-166">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StreamWriter (System.IO.Stream stream, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream, encoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StreamWriter(System::IO::Stream ^ stream, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="new System.IO.StreamWriter : System.IO.Stream * System.Text.Encoding -&gt; System.IO.StreamWriter" Usage="new System.IO.StreamWriter (stream, encoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="2f8a3-167">書き込み先のストリーム。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-167">The stream to write to.</span></span></param>
        <param name="encoding"><span data-ttu-id="2f8a3-168">使用する文字エンコーディング。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-168">The character encoding to use.</span></span></param>
        <summary><span data-ttu-id="2f8a3-169">指定したエンコーディングと既定のバッファー サイズを使用して、指定したストリーム用の <see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-169">Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified stream by using the specified encoding and the default buffer size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-170">このコンストラクターは、encoding パラメーターを使用して <xref:System.IO.StreamWriter.Encoding%2A> プロパティを初期化し、ストリームパラメーターを使用して <xref:System.IO.StreamWriter.BaseStream%2A> プロパティを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-170">This constructor initializes the <xref:System.IO.StreamWriter.Encoding%2A> property using the encoding parameter, and the <xref:System.IO.StreamWriter.BaseStream%2A> property using the stream parameter.</span></span> <span data-ttu-id="2f8a3-171">ストリームの位置はリセットされません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-171">The position of the stream is not reset.</span></span> <span data-ttu-id="2f8a3-172">詳細については、「<xref:System.IO.TextWriter.Encoding%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-172">For additional information, see <xref:System.IO.TextWriter.Encoding%2A>.</span></span>  
  
 <span data-ttu-id="2f8a3-173"><xref:System.IO.StreamWriter> オブジェクトは <xref:System.IO.StreamWriter.Dispose%2A?displayProperty=nameWithType> が呼び出されたときに、指定された <xref:System.IO.Stream> オブジェクトで <xref:System.IO.Stream.Dispose> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-173">The <xref:System.IO.StreamWriter> object calls <xref:System.IO.Stream.Dispose> on the provided <xref:System.IO.Stream> object when <xref:System.IO.StreamWriter.Dispose%2A?displayProperty=nameWithType> is called.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2f8a3-174">特定のカルチャ設定を使用して文字セットをコンパイルし、異なるカルチャ設定で同じ文字を取得すると、文字が解釈されない可能性があり、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-174">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2f8a3-175">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-175">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-176">このコンストラクターの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-176">The following example demonstrates this constructor.</span></span>  
  
 [!code-csharp[System.IO.StreamWriter.ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.streamwriter.ctor/cs/program2.cs#2)]
 [!code-vb[System.IO.StreamWriter.ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.streamwriter.ctor/vb/program2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f8a3-177"><paramref name="stream" /> 、または <paramref name="encoding" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-177"><paramref name="stream" /> or <paramref name="encoding" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f8a3-178"><paramref name="stream" /> が書き込み可能ではありません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-178"><paramref name="stream" /> is not writable.</span></span></exception>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-179">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-179">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-180">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-180">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-181">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-181">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StreamWriter (string path, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, append As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StreamWriter(System::String ^ path, bool append);" />
      <MemberSignature Language="F#" Value="new System.IO.StreamWriter : string * bool -&gt; System.IO.StreamWriter" Usage="new System.IO.StreamWriter (path, append)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="append" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2f8a3-182">書き込まれる完全なファイルパス。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-182">The complete file path to write to.</span></span></param>
        <param name="append"><span data-ttu-id="2f8a3-183">データをファイルに追加する場合は <see langword="true" />、ファイルを上書きする場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-183"><see langword="true" /> to append data to the file; <see langword="false" /> to overwrite the file.</span></span> <span data-ttu-id="2f8a3-184">指定されたファイルが存在しない場合、このパラメーターは無効であり、コンストラクターは新しいファイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-184">If the specified file does not exist, this parameter has no effect, and the constructor creates a new file.</span></span></param>
        <summary><span data-ttu-id="2f8a3-185">既定のエンコーディングとバッファー サイズを使用して、指定したファイル用の <see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-185">Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file by using the default encoding and buffer size.</span></span> <span data-ttu-id="2f8a3-186">ファイルが存在する場合は、ファイルを上書きするか、またはファイルの末尾に追加できます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-186">If the file exists, it can be either overwritten or appended to.</span></span> <span data-ttu-id="2f8a3-187">ファイルが存在しない場合は、このコンストラクターが新しいファイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-187">If the file does not exist, this constructor creates a new file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-188">このコンストラクターは、バイト順マーク (BOM) を使用せずに UTF-8 エンコーディングを使用して <xref:System.IO.StreamWriter> を作成します。そのため、<xref:System.Text.Encoding.GetPreamble%2A> メソッドは空のバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-188">This constructor creates a <xref:System.IO.StreamWriter> with UTF-8 encoding without a Byte-Order Mark (BOM), so its <xref:System.Text.Encoding.GetPreamble%2A> method returns an empty byte array.</span></span> <span data-ttu-id="2f8a3-189">このコンストラクターの既定の UTF-8 エンコーディングでは、無効なバイトで例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-189">The default UTF-8 encoding for this constructor throws an exception on invalid bytes.</span></span> <span data-ttu-id="2f8a3-190">この動作は、<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> プロパティの encoding オブジェクトによって提供される動作とは異なります。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-190">This behavior is different from the behavior provided by the encoding object in the <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="2f8a3-191">BOM を指定し、無効なバイトに対して例外がスローされるかどうかを判断するには、<xref:System.IO.StreamWriter.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Text.Encoding%29>などのパラメーターとしてエンコーディングオブジェクトを受け取るコンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-191">To specify a BOM and determine whether an exception is thrown on invalid bytes, use a constructor that accepts an encoding object as a parameter, such as <xref:System.IO.StreamWriter.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Text.Encoding%29>.</span></span>  
  
 <span data-ttu-id="2f8a3-192">`path` パラメーターには、汎用名前付け規則 (UNC) 共有上のファイルを含むファイル名を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-192">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
 <span data-ttu-id="2f8a3-193">`path` パラメーターは、ディスクに格納されているファイルである必要はありません。ストリームを使用したアクセスをサポートするシステムの任意の部分を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-193">The `path` parameter is not required to be a file stored on disk; it can be any part of a system that supports access using streams.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2f8a3-194">特定のカルチャ設定を使用して文字セットをコンパイルし、異なるカルチャ設定で同じ文字を取得すると、文字が解釈されない可能性があり、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-194">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2f8a3-195">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-195">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-196">次のコード例は、このコンストラクターを示しています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-196">The following code example demonstrates this constructor.</span></span>  
  
 [!code-csharp[System.IO.StreamWriter.ctor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.streamwriter.ctor/cs/program6.cs#6)]
 [!code-vb[System.IO.StreamWriter.ctor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.streamwriter.ctor/vb/program6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="2f8a3-197">アクセスが拒否されました。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-197">Access is denied.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f8a3-198"><paramref name="path" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-198"><paramref name="path" /> is empty.</span></span>  
  
<span data-ttu-id="2f8a3-199">または</span><span class="sxs-lookup"><span data-stu-id="2f8a3-199">-or-</span></span> 
 <span data-ttu-id="2f8a3-200"><paramref name="path" /> には、システム デバイスの名前 (com1、com2 など) が含まれます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-200"><paramref name="path" /> contains the name of a system device (com1, com2, and so on).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f8a3-201"><paramref name="path" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-201"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="2f8a3-202">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-202">The specified path is invalid (for example, it is on an unmapped drive).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="2f8a3-203"><paramref name="path" /> には、ファイル名、ディレクトリ名、またはボリューム ラベルの不正な構文または無効な構文が含まれています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-203"><paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="2f8a3-204">指定されたパスかファイル名、またはその両方がシステム定義の最大文字数を超えています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-204">The specified path, file name, or both exceed the system-defined maximum length.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="2f8a3-205">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-205">The caller does not have the required permission.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-206">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-206">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-207">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-207">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-208">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-208">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StreamWriter (System.IO.Stream stream, System.Text.Encoding encoding, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding encoding, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream, encoding As Encoding, bufferSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StreamWriter(System::IO::Stream ^ stream, System::Text::Encoding ^ encoding, int bufferSize);" />
      <MemberSignature Language="F#" Value="new System.IO.StreamWriter : System.IO.Stream * System.Text.Encoding * int -&gt; System.IO.StreamWriter" Usage="new System.IO.StreamWriter (stream, encoding, bufferSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="2f8a3-209">書き込み先のストリーム。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-209">The stream to write to.</span></span></param>
        <param name="encoding"><span data-ttu-id="2f8a3-210">使用する文字エンコーディング。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-210">The character encoding to use.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="2f8a3-211">バイト単位のバッファー サイズ。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-211">The buffer size, in bytes.</span></span></param>
        <summary><span data-ttu-id="2f8a3-212">指定したエンコーディングとバッファー サイズを使用して、指定したストリーム用の <see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-212">Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified stream by using the specified encoding and buffer size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-213">このコンストラクターは、`encoding` パラメーターを使用して <xref:System.IO.StreamWriter.Encoding%2A> プロパティを初期化し、`stream` パラメーターを使用して <xref:System.IO.StreamWriter.BaseStream%2A> プロパティを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-213">This constructor initializes the <xref:System.IO.StreamWriter.Encoding%2A> property using the `encoding` parameter, and the <xref:System.IO.StreamWriter.BaseStream%2A> property using the `stream` parameter.</span></span> <span data-ttu-id="2f8a3-214">ストリームの位置はリセットされません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-214">The position of the stream is not reset.</span></span> <span data-ttu-id="2f8a3-215">詳細については、「<xref:System.IO.TextWriter.Encoding%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-215">For additional information, see <xref:System.IO.TextWriter.Encoding%2A>.</span></span>  
  
 <span data-ttu-id="2f8a3-216"><xref:System.IO.StreamWriter> オブジェクトは <xref:System.IO.StreamWriter.Dispose%2A?displayProperty=nameWithType> が呼び出されたときに、指定された <xref:System.IO.Stream> オブジェクトで <xref:System.IO.Stream.Dispose> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-216">The <xref:System.IO.StreamWriter> object calls <xref:System.IO.Stream.Dispose> on the provided <xref:System.IO.Stream> object when <xref:System.IO.StreamWriter.Dispose%2A?displayProperty=nameWithType> is called.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2f8a3-217">特定のカルチャ設定を使用して文字セットをコンパイルし、異なるカルチャ設定で同じ文字を取得すると、文字が解釈されない可能性があり、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-217">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2f8a3-218">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-218">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-219">このコンストラクターの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-219">The following example demonstrates this constructor.</span></span>  
  
 [!code-csharp[System.IO.StreamWriter.ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.streamwriter.ctor/cs/program3.cs#3)]
 [!code-vb[System.IO.StreamWriter.ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.streamwriter.ctor/vb/program3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f8a3-220"><paramref name="stream" /> 、または <paramref name="encoding" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-220"><paramref name="stream" /> or <paramref name="encoding" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2f8a3-221"><paramref name="bufferSize" /> は負の値です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-221"><paramref name="bufferSize" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f8a3-222"><paramref name="stream" /> が書き込み可能ではありません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-222"><paramref name="stream" /> is not writable.</span></span></exception>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-223">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-223">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-224">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-224">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-225">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-225">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StreamWriter (string path, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, append As Boolean, encoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StreamWriter(System::String ^ path, bool append, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="new System.IO.StreamWriter : string * bool * System.Text.Encoding -&gt; System.IO.StreamWriter" Usage="new System.IO.StreamWriter (path, append, encoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="append" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="encoding" Type="System.Text.Encoding" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2f8a3-226">書き込まれる完全なファイルパス。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-226">The complete file path to write to.</span></span></param>
        <param name="append"><span data-ttu-id="2f8a3-227">データをファイルに追加する場合は <see langword="true" />、ファイルを上書きする場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-227"><see langword="true" /> to append data to the file; <see langword="false" /> to overwrite the file.</span></span> <span data-ttu-id="2f8a3-228">指定されたファイルが存在しない場合、このパラメーターは無効であり、コンストラクターは新しいファイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-228">If the specified file does not exist, this parameter has no effect, and the constructor creates a new file.</span></span></param>
        <param name="encoding"><span data-ttu-id="2f8a3-229">使用する文字エンコーディング。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-229">The character encoding to use.</span></span></param>
        <summary><span data-ttu-id="2f8a3-230">指定したエンコーディングと既定のバッファー サイズを使用して、指定したファイル用の <see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-230">Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file by using the specified encoding and default buffer size.</span></span> <span data-ttu-id="2f8a3-231">ファイルが存在する場合は、ファイルを上書きするか、またはファイルの末尾に追加できます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-231">If the file exists, it can be either overwritten or appended to.</span></span> <span data-ttu-id="2f8a3-232">ファイルが存在しない場合は、このコンストラクターが新しいファイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-232">If the file does not exist, this constructor creates a new file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-233">このコンストラクターは、encoding パラメーターを使用して <xref:System.IO.StreamWriter.Encoding%2A> プロパティを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-233">This constructor initializes the <xref:System.IO.StreamWriter.Encoding%2A> property using the encoding parameter.</span></span> <span data-ttu-id="2f8a3-234">詳細については、「<xref:System.IO.TextWriter.Encoding%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-234">For additional information, see <xref:System.IO.TextWriter.Encoding%2A>.</span></span>  
  
 <span data-ttu-id="2f8a3-235">`path` は、汎用名前付け規則 (UNC) 共有上のファイルを含むファイル名にすることができます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-235">`path` can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
 <span data-ttu-id="2f8a3-236">`path` は、ディスクに格納されているファイルである必要はありません。ストリーム経由のアクセスをサポートするシステムの任意の部分を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-236">`path` is not required to be a file stored on disk; it can be any part of a system that supports access via streams.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2f8a3-237">特定のカルチャ設定を使用して文字セットをコンパイルし、異なるカルチャ設定で同じ文字を取得すると、文字が解釈されない可能性があり、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-237">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2f8a3-238">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-238">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-239">このコンストラクターの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-239">The following example demonstrates this constructor.</span></span>  
  
 [!code-csharp[System.IO.StreamWriter.ctor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.streamwriter.ctor/cs/program7.cs#7)]
 [!code-vb[System.IO.StreamWriter.ctor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.streamwriter.ctor/vb/program7.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="2f8a3-240">アクセスが拒否されました。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-240">Access is denied.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f8a3-241"><paramref name="path" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-241"><paramref name="path" /> is empty.</span></span>  
  
<span data-ttu-id="2f8a3-242">または</span><span class="sxs-lookup"><span data-stu-id="2f8a3-242">-or-</span></span> 
 <span data-ttu-id="2f8a3-243"><paramref name="path" /> には、システム デバイスの名前 (com1、com2 など) が含まれます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-243"><paramref name="path" /> contains the name of a system device (com1, com2, and so on).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f8a3-244"><paramref name="path" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-244"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="2f8a3-245">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-245">The specified path is invalid (for example, it is on an unmapped drive).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="2f8a3-246"><paramref name="path" /> には、ファイル名、ディレクトリ名、またはボリューム ラベルの不正な構文または無効な構文が含まれています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-246"><paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="2f8a3-247">指定されたパスかファイル名、またはその両方がシステム定義の最大文字数を超えています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-247">The specified path, file name, or both exceed the system-defined maximum length.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="2f8a3-248">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-248">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-249">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-249">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-250">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-250">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-251">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-251">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StreamWriter (System.IO.Stream stream, System.Text.Encoding encoding, int bufferSize, bool leaveOpen);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding encoding, int32 bufferSize, bool leaveOpen) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream, encoding As Encoding, bufferSize As Integer, leaveOpen As Boolean)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StreamWriter(System::IO::Stream ^ stream, System::Text::Encoding ^ encoding, int bufferSize, bool leaveOpen);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="new System.IO.StreamWriter : System.IO.Stream * System.Text.Encoding * int * bool -&gt; System.IO.StreamWriter" Usage="new System.IO.StreamWriter (stream, encoding, bufferSize, leaveOpen)" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public StreamWriter (System.IO.Stream stream, System.Text.Encoding encoding = default, int bufferSize = -1, bool leaveOpen = false);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream, Optional encoding As Encoding = null, Optional bufferSize As Integer = -1, Optional leaveOpen As Boolean = false)" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="encoding" Type="System.Text.Encoding" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bufferSize" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="leaveOpen" Type="System.Boolean" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="2f8a3-252">書き込み先のストリーム。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-252">The stream to write to.</span></span></param>
        <param name="encoding"><span data-ttu-id="2f8a3-253">使用する文字エンコーディング。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-253">The character encoding to use.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="2f8a3-254">バイト単位のバッファー サイズ。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-254">The buffer size, in bytes.</span></span></param>
        <param name="leaveOpen"><span data-ttu-id="2f8a3-255"><see cref="T:System.IO.StreamWriter" /> オブジェクトを破棄した後にストリームを開いたままにする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-255"><see langword="true" /> to leave the stream open after the <see cref="T:System.IO.StreamWriter" /> object is disposed; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="2f8a3-256">指定した円コーディングとバッファー サイズを使用して、指定したストリーム用の <see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化し、必要に応じて、ストリームを開いたままにします。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-256">Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified stream by using the specified encoding and buffer size, and optionally leaves the stream open.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-257">`leaveOpen` パラメーターを `true`に設定しない限り、<xref:System.IO.StreamWriter> オブジェクトは <xref:System.IO.Stream> が呼び出されたときに、指定された <xref:System.IO.StreamWriter.Dispose%2A?displayProperty=nameWithType> オブジェクトの <xref:System.IO.Stream.Dispose> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-257">Unless you set the `leaveOpen` parameter to `true`, the <xref:System.IO.StreamWriter> object calls <xref:System.IO.Stream.Dispose> on the provided <xref:System.IO.Stream> object when <xref:System.IO.StreamWriter.Dispose%2A?displayProperty=nameWithType> is called.</span></span>  
  
 <span data-ttu-id="2f8a3-258">このコンストラクターは、`encoding` パラメーターを使用して <xref:System.IO.StreamWriter.Encoding%2A> プロパティを初期化し、`stream` パラメーターを使用して <xref:System.IO.StreamWriter.BaseStream%2A> プロパティを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-258">This constructor initializes the <xref:System.IO.StreamWriter.Encoding%2A> property by using the `encoding` parameter, and initializes the <xref:System.IO.StreamWriter.BaseStream%2A> property by using the `stream` parameter.</span></span> <span data-ttu-id="2f8a3-259">ストリームの位置はリセットされません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-259">The position of the stream is not reset.</span></span> <span data-ttu-id="2f8a3-260">詳細については、<xref:System.IO.TextWriter.Encoding%2A> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-260">For additional information, see the <xref:System.IO.TextWriter.Encoding%2A> property.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2f8a3-261">特定のカルチャ設定を使用して文字セットをコンパイルし、異なるカルチャ設定で同じ文字を取得すると、文字が解釈されない可能性があり、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-261">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-262">このコンストラクターの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-262">The following example demonstrates this constructor.</span></span>  
  
 [!code-csharp[System.IO.StreamWriter.ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.streamwriter.ctor/cs/program4.cs#4)]
 [!code-vb[System.IO.StreamWriter.ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.streamwriter.ctor/vb/program4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f8a3-263"><paramref name="stream" /> 、または <paramref name="encoding" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-263"><paramref name="stream" /> or <paramref name="encoding" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2f8a3-264"><paramref name="bufferSize" /> は負の値です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-264"><paramref name="bufferSize" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f8a3-265"><paramref name="stream" /> が書き込み可能ではありません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-265"><paramref name="stream" /> is not writable.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StreamWriter (string path, bool append, System.Text.Encoding encoding, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, bool append, class System.Text.Encoding encoding, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, append As Boolean, encoding As Encoding, bufferSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StreamWriter(System::String ^ path, bool append, System::Text::Encoding ^ encoding, int bufferSize);" />
      <MemberSignature Language="F#" Value="new System.IO.StreamWriter : string * bool * System.Text.Encoding * int -&gt; System.IO.StreamWriter" Usage="new System.IO.StreamWriter (path, append, encoding, bufferSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="append" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="encoding" Type="System.Text.Encoding" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="bufferSize" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2f8a3-266">書き込まれる完全なファイルパス。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-266">The complete file path to write to.</span></span></param>
        <param name="append"><span data-ttu-id="2f8a3-267">データをファイルに追加する場合は <see langword="true" />、ファイルを上書きする場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-267"><see langword="true" /> to append data to the file; <see langword="false" /> to overwrite the file.</span></span> <span data-ttu-id="2f8a3-268">指定されたファイルが存在しない場合、このパラメーターは無効であり、コンストラクターは新しいファイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-268">If the specified file does not exist, this parameter has no effect, and the constructor creates a new file.</span></span></param>
        <param name="encoding"><span data-ttu-id="2f8a3-269">使用する文字エンコーディング。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-269">The character encoding to use.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="2f8a3-270">バイト単位のバッファー サイズ。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-270">The buffer size, in bytes.</span></span></param>
        <summary><span data-ttu-id="2f8a3-271">指定したエンコーディングとバッファー サイズを使用して、指定したパス上の指定したファイル用の <see cref="T:System.IO.StreamWriter" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-271">Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file on the specified path, using the specified encoding and buffer size.</span></span> <span data-ttu-id="2f8a3-272">ファイルが存在する場合は、ファイルを上書きするか、またはファイルの末尾に追加できます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-272">If the file exists, it can be either overwritten or appended to.</span></span> <span data-ttu-id="2f8a3-273">ファイルが存在しない場合は、このコンストラクターが新しいファイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-273">If the file does not exist, this constructor creates a new file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-274">このコンストラクターは、encoding パラメーターを使用して <xref:System.IO.StreamWriter.Encoding%2A> プロパティを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-274">This constructor initializes the <xref:System.IO.StreamWriter.Encoding%2A> property using the encoding parameter.</span></span> <span data-ttu-id="2f8a3-275">詳細については、「<xref:System.IO.TextWriter.Encoding%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-275">For additional information, see <xref:System.IO.TextWriter.Encoding%2A>.</span></span>  
  
 <span data-ttu-id="2f8a3-276">`path` は、汎用名前付け規則 (UNC) 共有上のファイルを含むファイル名にすることができます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-276">`path` can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
 <span data-ttu-id="2f8a3-277">`path` は、ディスクに格納されているファイルである必要はありません。ストリーム経由のアクセスをサポートするシステムの任意の部分を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-277">`path` is not required to be a file stored on disk; it can be any part of a system that supports access via streams.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2f8a3-278">特定のカルチャ設定を使用して文字セットをコンパイルし、異なるカルチャ設定で同じ文字を取得すると、文字が解釈されない可能性があり、例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-278">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2f8a3-279">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-279">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-280">このコンストラクターの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-280">The following example demonstrates this constructor.</span></span>  
  
 [!code-csharp[System.IO.StreamWriter.ctor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.streamwriter.ctor/cs/program8.cs#8)]
 [!code-vb[System.IO.StreamWriter.ctor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.streamwriter.ctor/vb/program8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f8a3-281"><paramref name="path" /> が空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-281"><paramref name="path" /> is an empty string ("").</span></span>  
  
<span data-ttu-id="2f8a3-282">または</span><span class="sxs-lookup"><span data-stu-id="2f8a3-282">-or-</span></span> 
 <span data-ttu-id="2f8a3-283"><paramref name="path" /> には、システム デバイスの名前 (com1、com2 など) が含まれます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-283"><paramref name="path" /> contains the name of a system device (com1, com2, and so on).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f8a3-284"><paramref name="path" /> 、または <paramref name="encoding" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-284"><paramref name="path" /> or <paramref name="encoding" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2f8a3-285"><paramref name="bufferSize" /> は負の値です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-285"><paramref name="bufferSize" /> is negative.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="2f8a3-286"><paramref name="path" /> には、ファイル名、ディレクトリ名、またはボリューム ラベルの不正な構文または無効な構文が含まれています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-286"><paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="2f8a3-287">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-287">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="2f8a3-288">アクセスが拒否されました。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-288">Access is denied.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="2f8a3-289">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-289">The specified path is invalid (for example, it is on an unmapped drive).</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="2f8a3-290">指定されたパスかファイル名、またはその両方がシステム定義の最大文字数を超えています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-290">The specified path, file name, or both exceed the system-defined maximum length.</span></span></exception>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-291">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-291">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-292">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-292">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-293">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-293">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public virtual bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:System.IO.StreamWriter.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoFlush : bool with get, set" Usage="System.IO.StreamWriter.AutoFlush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2f8a3-294"><see cref="T:System.IO.StreamWriter" /> が呼び出されるたびに、<see cref="M:System.IO.StreamWriter.Write(System.Char)" /> によって基になるストリームに対するバッファーをフラッシュするかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-294">Gets or sets a value indicating whether the <see cref="T:System.IO.StreamWriter" /> will flush its buffer to the underlying stream after every call to <see cref="M:System.IO.StreamWriter.Write(System.Char)" />.</span></span></summary>
        <value><span data-ttu-id="2f8a3-295"><see cref="T:System.IO.StreamWriter" /> に強制的にバッファーをフラッシュさせる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-295"><see langword="true" /> to force <see cref="T:System.IO.StreamWriter" /> to flush its buffer; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-296">明示的に <xref:System.IO.StreamWriter.Flush%2A> または <xref:System.IO.StreamWriter.Close%2A>を呼び出さない限り、ストリームをフラッシュしても、基になるエンコーダーはフラッシュされません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-296">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.IO.StreamWriter.Flush%2A> or <xref:System.IO.StreamWriter.Close%2A>.</span></span> <span data-ttu-id="2f8a3-297"><xref:System.IO.StreamWriter.AutoFlush%2A> を `true` に設定すると、書き込み操作の後、バッファーからストリームにデータがフラッシュされますが、エンコーダーの状態はフラッシュされません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-297">Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream after each write operation, but the encoder state will not be flushed.</span></span> <span data-ttu-id="2f8a3-298">これにより、エンコーダーは次の文字ブロックを正しくエンコードできるように、その状態 (部分文字) を保持できます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-298">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="2f8a3-299">このシナリオは、エンコーダーが隣接する文字を受け取ると、特定の文字のみをエンコードできる UTF8 と UTF7 に影響します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-299">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
 <span data-ttu-id="2f8a3-300">`AutoFlush` が `false`に設定されている場合、`StreamWriter` は、内部的に、およびエンコーダー内で渡されたエンコーディングからのバッファーの量を制限します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-300">When `AutoFlush` is set to `false`, `StreamWriter` will do a limited amount of buffering, both internally and potentially in the encoder from the encoding you passed in.</span></span> <span data-ttu-id="2f8a3-301">`StreamWriter`での書き込みが完了したときに常に `Close` (または少なくとも `Flush`) を呼び出すことを前提として、`AutoFlush` を `false`に設定することにより、パフォーマンスを向上させることができます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-301">You can get better performance by setting `AutoFlush` to `false`, assuming that you always call `Close` (or at least `Flush`) when you're done writing with a `StreamWriter`.</span></span>  
  
 <span data-ttu-id="2f8a3-302">たとえば、ユーザーがすぐにフィードバックを受け取るデバイスに書き込むときに、`AutoFlush` を `true` に設定します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-302">For example, set `AutoFlush` to `true` when you are writing to a device where the user expects immediate feedback.</span></span> <span data-ttu-id="2f8a3-303">`Console.Out` は、<xref:System.IO.StreamWriter.Write%2A?displayProperty=nameWithType>へのすべての呼び出しの後に、エンコーダーの状態を除くすべての内部状態をフラッシュ `Console` に書き込むために内部的に使用される `StreamWriter` です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-303">`Console.Out` is one of these cases: The `StreamWriter` used internally for writing to `Console` flushes all its internal state except the encoder state after every call to <xref:System.IO.StreamWriter.Write%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2f8a3-304">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-304">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-305">次の例は、`AutoFlush` プロパティを使用するための構文を示しています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-305">The following example shows the syntax for using the `AutoFlush` property.</span></span>  
  
 [!code-cpp[System.IO.StreamWriter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StreamWriter/CPP/logger.cpp#5)]
 [!code-csharp[System.IO.StreamWriter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StreamWriter/CS/logger.cs#5)]
 [!code-vb[System.IO.StreamWriter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StreamWriter/VB/logger.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-306">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-306">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-307">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-307">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-308">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-308">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BaseStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream BaseStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BaseStream" />
      <MemberSignature Language="DocId" Value="P:System.IO.StreamWriter.BaseStream" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BaseStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::IO::Stream ^ BaseStream { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseStream : System.IO.Stream" Usage="System.IO.StreamWriter.BaseStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2f8a3-309">バッキング ストアと連結する、基になるストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-309">Gets the underlying stream that interfaces with a backing store.</span></span></summary>
        <value><span data-ttu-id="2f8a3-310">この <see langword="StreamWriter" /> が書き込むストリーム。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-310">The stream this <see langword="StreamWriter" /> is writing to.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-311">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-311">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-312">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-312">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-313">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-313">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-314">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-314">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="streamWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2f8a3-315">現在の <see langword="StreamWriter" /> オブジェクトと基になるストリームを閉じます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-315">Closes the current <see langword="StreamWriter" /> object and the underlying stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-316">このメソッドは、<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-316">This method overrides <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2f8a3-317">この <xref:System.IO.StreamWriter.Close%2A> の実装では、`true` 値を渡す <xref:System.IO.StreamWriter.Dispose%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-317">This implementation of <xref:System.IO.StreamWriter.Close%2A> calls the <xref:System.IO.StreamWriter.Dispose%2A> method passing a `true` value.</span></span>  
  
 <span data-ttu-id="2f8a3-318">すべてのデータが基になるストリームに正しく書き込まれるようにするには、<xref:System.IO.StreamWriter.Close%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-318">You must call <xref:System.IO.StreamWriter.Close%2A> to ensure that all data is correctly written out to the underlying stream.</span></span> <span data-ttu-id="2f8a3-319"><xref:System.IO.StreamWriter.Close%2A>の呼び出しに続くと、<xref:System.IO.StreamWriter> での操作によって例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-319">Following a call to <xref:System.IO.StreamWriter.Close%2A>, any operations on the <xref:System.IO.StreamWriter> might raise exceptions.</span></span> <span data-ttu-id="2f8a3-320">ディスクに十分な空き領域がない場合は、<xref:System.IO.StreamWriter.Close%2A> を呼び出すと例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-320">If there is insufficient space on the disk, calling <xref:System.IO.StreamWriter.Close%2A> will raise an exception.</span></span>  
  
 <span data-ttu-id="2f8a3-321">明示的に <xref:System.IO.StreamWriter.Flush%2A> または <xref:System.IO.StreamWriter.Close%2A>を呼び出さない限り、ストリームをフラッシュしても、基になるエンコーダーはフラッシュされません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-321">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.IO.StreamWriter.Flush%2A> or <xref:System.IO.StreamWriter.Close%2A>.</span></span> <span data-ttu-id="2f8a3-322"><xref:System.IO.StreamWriter.AutoFlush%2A> を `true` に設定すると、バッファーからストリームにデータがフラッシュされますが、エンコーダーの状態はフラッシュされません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-322">Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="2f8a3-323">これにより、エンコーダーは次の文字ブロックを正しくエンコードできるように、その状態 (部分文字) を保持できます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-323">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="2f8a3-324">このシナリオは、エンコーダーが隣接する文字を受け取ると、特定の文字のみをエンコードできる UTF8 と UTF7 に影響します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-324">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-325">次のコード例は、`Close` メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-325">The following code example demonstrates the `Close` method.</span></span>  
  
 [!code-cpp[System.IO.StreamWriter#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StreamWriter/CPP/logger.cpp#17)]
 [!code-csharp[System.IO.StreamWriter#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StreamWriter/CS/logger.cs#17)]
 [!code-vb[System.IO.StreamWriter#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StreamWriter/VB/logger.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="2f8a3-326">現在のエンコードは、Unicode サロゲート ペアの片方の表示をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-326">The current encoding does not support displaying half of a Unicode surrogate pair.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-327">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-327">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-328">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-328">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-329">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-329">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="streamWriter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="2f8a3-330">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-330"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="2f8a3-331">バッファーに入れられたデータが基になるストリームに書き込まれ、<see cref="T:System.IO.StreamWriter" /> によって使用されているアンマネージド リソースが解放されます。必要に応じてマネージド リソースも解放されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-331">Causes any buffered data to be written to the underlying stream, releases the unmanaged resources used by the <see cref="T:System.IO.StreamWriter" />, and optionally the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-332">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.IO.StreamWriter> が参照しているすべてのマネージド オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-332">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.StreamWriter> references.</span></span> <span data-ttu-id="2f8a3-333">このメソッドは、参照される各オブジェクトの `Dispose` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-333">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="2f8a3-334">現在のエンコードは、Unicode サロゲート ペアの片方の表示をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-334">The current encoding does not support displaying half of a Unicode surrogate pair.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="2f8a3-335">
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-335">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="2f8a3-336"><see langword="Dispose" />をオーバーライドする場合は、以前に <see langword="Dispose" />を呼び出したときに破棄されたオブジェクトを参照しないように注意してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-336">When overriding <see langword="Dispose" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span></span>  
  
<span data-ttu-id="2f8a3-337">このメソッドは、<see cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />基底クラスの dispose メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-337">This method calls the dispose method of the base class, <see cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />.</span></span></para></block>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-338">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-338">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-339">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-339">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-340">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-340">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="streamWriter.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2f8a3-341">バッファーされたデータを基になるストリームに非同期で書き込み、<see cref="T:System.IO.StreamWriter" /> で使用されるアンマネージド リソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-341">Asynchronously writes any buffered data to the underlying stream and releases the unmanaged resources used by the <see cref="T:System.IO.StreamWriter" />.</span></span></summary>
        <returns><span data-ttu-id="2f8a3-342">非同期の破棄操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-342">A task that represents the asynchronous dispose operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.IO.StreamWriter.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.IO.StreamWriter.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2f8a3-343">出力の書き込みに使用する <see cref="T:System.Text.Encoding" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-343">Gets the <see cref="T:System.Text.Encoding" /> in which the output is written.</span></span></summary>
        <value><span data-ttu-id="2f8a3-344">現在のインスタンスのコンストラクターで指定した <see cref="T:System.Text.Encoding" />。エンコーディングを指定しなかった場合は、<see cref="T:System.Text.UTF8Encoding" />。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-344">The <see cref="T:System.Text.Encoding" /> specified in the constructor for the current instance, or <see cref="T:System.Text.UTF8Encoding" /> if an encoding was not specified.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-345">このプロパティは、<xref:System.IO.StreamWriter>によって使用されるエンコーディングを含むヘッダーを書き込む必要がある一部の XML シナリオで必要です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-345">This property is necessary for some XML scenarios where a header must be written containing the encoding used by the <xref:System.IO.StreamWriter>.</span></span> <span data-ttu-id="2f8a3-346">これにより、XML コードは任意の <xref:System.IO.StreamWriter> を使用し、正しい XML ヘッダーを生成することができます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-346">This allows the XML code to consume an arbitrary <xref:System.IO.StreamWriter> and generate the correct XML header.</span></span>  
  
 <span data-ttu-id="2f8a3-347">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-347">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-348">次の例では、指定された <xref:System.IO.StreamWriter> インスタンスのエンコーディングを取得します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-348">The following example retrieves the encoding of the specified <xref:System.IO.StreamWriter> instance.</span></span>  
  
 [!code-cpp[System.IO.StreamWriter#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StreamWriter/CPP/logger.cpp#11)]
 [!code-csharp[System.IO.StreamWriter#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StreamWriter/CS/logger.cs#11)]
 [!code-vb[System.IO.StreamWriter#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StreamWriter/VB/logger.vb#11)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-349">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-349">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-350">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-350">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-351">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-351">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~StreamWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!StreamWriter ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="streamWriter.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2f8a3-352">現在の <see cref="T:System.IO.StreamWriter" /> のリソースを解放し、ガベージ コレクターで再生します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-352">Frees the resources of the current <see cref="T:System.IO.StreamWriter" /> before it is reclaimed by the garbage collector.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
<span data-ttu-id="2f8a3-353">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-353">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>

]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-354">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-354">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-355">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-355">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-356">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-356">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="streamWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2f8a3-357">現在のライターで使用したすべてのバッファーをクリアし、バッファー内のすべてのデータを基になるストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-357">Clears all buffers for the current writer and causes any buffered data to be written to the underlying stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-358">このメソッドは、<xref:System.IO.TextWriter.Flush%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-358">This method overrides <xref:System.IO.TextWriter.Flush%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2f8a3-359">明示的に `Flush` または <xref:System.IO.StreamWriter.Close%2A>を呼び出さない限り、ストリームをフラッシュしても、基になるエンコーダーはフラッシュされません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-359">Flushing the stream will not flush its underlying encoder unless you explicitly call `Flush` or <xref:System.IO.StreamWriter.Close%2A>.</span></span> <span data-ttu-id="2f8a3-360"><xref:System.IO.StreamWriter.AutoFlush%2A> を `true` に設定すると、書き込み操作の後、バッファーからストリームにデータがフラッシュされますが、エンコーダーの状態はフラッシュされません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-360">Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream after each write operation, but the encoder state will not be flushed.</span></span> <span data-ttu-id="2f8a3-361">これにより、エンコーダーは次の文字ブロックを正しくエンコードできるように、その状態 (部分文字) を保持できます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-361">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="2f8a3-362">このシナリオは、エンコーダーが隣接する文字を受け取ると、特定の文字のみをエンコードできる UTF8 と UTF7 に影響します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-362">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
 <span data-ttu-id="2f8a3-363">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-363">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2f8a3-364">現在のライターがクローズされています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-364">The current writer is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="2f8a3-365">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-365">An I/O error has occurred.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="2f8a3-366">現在のエンコードは、Unicode サロゲート ペアの片方の表示をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-366">The current encoding does not support displaying half of a Unicode surrogate pair.</span></span></exception>
        <altmember cref="M:System.IO.Stream.Close" />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-367">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-367">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-368">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-368">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-369">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-369">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.FlushAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FlushAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync();" />
      <MemberSignature Language="F#" Value="override this.FlushAsync : unit -&gt; System.Threading.Tasks.Task" Usage="streamWriter.FlushAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2f8a3-370">このストリームのすべてのバッファーを非同期にクリアし、バッファー内のデータを基になるデバイスに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-370">Clears all buffers for this stream asynchronously and causes any buffered data to be written to the underlying device.</span></span></summary>
        <returns><span data-ttu-id="2f8a3-371">非同期のフラッシュ操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-371">A task that represents the asynchronous flush operation.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2f8a3-372">ストリームは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-372">The stream has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.IO.StreamWriter Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.IO.StreamWriter Null" />
      <MemberSignature Language="DocId" Value="F:System.IO.StreamWriter.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As StreamWriter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::IO::StreamWriter ^ Null;" />
      <MemberSignature Language="F#" Value=" staticval mutable Null : System.IO.StreamWriter" Usage="System.IO.StreamWriter.Null" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2f8a3-373">バッキング ストアを持たない書き込み専用の <see langword="StreamWriter" /> を提供します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-373">Provides a <see langword="StreamWriter" /> with no backing store that can be written to, but not read from.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-374">オペレーティングシステムのリソースを使用しない `StreamWriter` に出力をリダイレクトするには、`Null` を使用します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-374">Use `Null` to redirect output to a `StreamWriter` that will not consume any operating system resources.</span></span>  
  
 <span data-ttu-id="2f8a3-375">`StreamWriter.Write` メソッドが `Null`で呼び出されると、呼び出しは単にを返し、どのバッキングストアにもデータは実際には書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-375">When the `StreamWriter.Write` methods are invoked on `Null`, the call simply returns, and no data is actually written to any backing store.</span></span>  
  
 <span data-ttu-id="2f8a3-376">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-376">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-377">次の例では、`Null` フィールドの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-377">The following example demonstrates a use of the `Null` field.</span></span>  
  
 [!code-cpp[System.IO.StreamWriter#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StreamWriter/CPP/logger.cpp#6)]
 [!code-csharp[System.IO.StreamWriter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StreamWriter/CS/logger.cs#6)]
 [!code-vb[System.IO.StreamWriter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StreamWriter/VB/logger.vb#6)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-378">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-378">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-379">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-379">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-380">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-380">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2f8a3-381">ストリームにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-381">Writes data to the stream.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(char value);" />
      <MemberSignature Language="F#" Value="override this.Write : char -&gt; unit" Usage="streamWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2f8a3-382">ストリームに書き込む文字。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-382">The character to write to the stream.</span></span></param>
        <summary><span data-ttu-id="2f8a3-383">ストリームに文字を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-383">Writes a character to the stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-384">このメソッドは、<xref:System.IO.TextWriter.Write%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-384">This method overrides <xref:System.IO.TextWriter.Write%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2f8a3-385">ストリームの末尾に到達しない限り、指定した文字が基になるストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-385">The specified character is written to the underlying stream unless the end of the stream is reached prematurely.</span></span> <span data-ttu-id="2f8a3-386"><xref:System.IO.StreamWriter.AutoFlush%2A> が `true`場合、<xref:System.IO.StreamWriter.Flush%2A> は自動的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-386">If <xref:System.IO.StreamWriter.AutoFlush%2A> is `true`, <xref:System.IO.StreamWriter.Flush%2A> is invoked automatically.</span></span>  
  
 <span data-ttu-id="2f8a3-387">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-387">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="2f8a3-388">I/O エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-388">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2f8a3-389"><see cref="P:System.IO.StreamWriter.AutoFlush" /> が true または <see cref="T:System.IO.StreamWriter" /> バッファーがいっぱいで、現在のライターが閉じられています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-389"><see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and current writer is closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2f8a3-390"><see cref="P:System.IO.StreamWriter.AutoFlush" /> が true または <see cref="T:System.IO.StreamWriter" /> バッファーがいっぱいで、<see cref="T:System.IO.StreamWriter" /> がストリームの末尾にあるため、基になる固定サイズのストリームにバッファーの内容を書き込むことができません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-390"><see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter" /> is at the end the stream.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-391">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-391">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-392">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-392">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-393">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-393">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="override this.Write : char[] -&gt; unit" Usage="streamWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="2f8a3-394">書き込むデータを格納する文字配列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-394">A character array containing the data to write.</span></span> <span data-ttu-id="2f8a3-395"><paramref name="buffer" /> が <see langword="null" /> の場合は、何も書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-395">If <paramref name="buffer" /> is <see langword="null" />, nothing is written.</span></span></param>
        <summary><span data-ttu-id="2f8a3-396">ストリームに文字配列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-396">Writes a character array to the stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-397">このメソッドは、<xref:System.IO.TextWriter.Write%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-397">This method overrides <xref:System.IO.TextWriter.Write%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2f8a3-398">ストリームの末尾に到達しない限り、指定した文字が基になるストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-398">The specified characters are written to the underlying stream unless the end of the stream is reached prematurely.</span></span> <span data-ttu-id="2f8a3-399"><xref:System.IO.StreamWriter.AutoFlush%2A> が `true`場合、<xref:System.IO.StreamWriter.Flush%2A> は自動的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-399">If <xref:System.IO.StreamWriter.AutoFlush%2A> is `true`, <xref:System.IO.StreamWriter.Flush%2A> is invoked automatically.</span></span>  
  
 <span data-ttu-id="2f8a3-400">この方法では、チェックする引数が少数であるため `Write` (`char[],``int,``int`) よりもパフォーマンスが向上する場合があります。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-400">This method might provide faster performance than `Write` (`char[],``int,``int`) because it has fewer arguments to check.</span></span>  
  
 <span data-ttu-id="2f8a3-401">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-401">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="2f8a3-402">I/O エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-402">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2f8a3-403"><see cref="P:System.IO.StreamWriter.AutoFlush" /> が true または <see cref="T:System.IO.StreamWriter" /> バッファーがいっぱいで、現在のライターが閉じられています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-403"><see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and current writer is closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2f8a3-404"><see cref="P:System.IO.StreamWriter.AutoFlush" /> が true または <see cref="T:System.IO.StreamWriter" /> バッファーがいっぱいで、<see cref="T:System.IO.StreamWriter" /> がストリームの末尾にあるため、基になる固定サイズのストリームにバッファーの内容を書き込むことができません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-404"><see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter" /> is at the end the stream.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-405">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-405">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-406">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-406">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-407">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-407">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (ReadOnlySpan&lt;char&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(valuetype System.ReadOnlySpan`1&lt;char&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.Write(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(ReadOnlySpan&lt;char&gt; buffer);" />
      <MemberSignature Language="F#" Value="override this.Write : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="streamWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="2f8a3-408">書き込む文字スパン。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-408">The character span to write.</span></span></param>
        <summary><span data-ttu-id="2f8a3-409">文字スパンをストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-409">Writes a character span to the stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ value);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="streamWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2f8a3-410">ストリームに書き込む文字列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-410">The string to write to the stream.</span></span> <span data-ttu-id="2f8a3-411"><paramref name="value" /> が null の場合は、何も書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-411">If <paramref name="value" /> is null, nothing is written.</span></span></param>
        <summary><span data-ttu-id="2f8a3-412">ストリームに文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-412">Writes a string to the stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-413">このメソッドは、<xref:System.IO.TextWriter.Write%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-413">This method overrides <xref:System.IO.TextWriter.Write%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2f8a3-414">ストリームの末尾に到達しない限り、指定された <xref:System.String> は基になるストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-414">The specified <xref:System.String> is written to the underlying stream unless the end of the stream is reached prematurely.</span></span>  
  
 <span data-ttu-id="2f8a3-415"><xref:System.IO.StreamWriter.AutoFlush%2A> が `true`場合は、<xref:System.IO.StreamWriter.Flush%2A> が自動的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-415"><xref:System.IO.StreamWriter.Flush%2A> is invoked automatically if <xref:System.IO.StreamWriter.AutoFlush%2A> is `true`.</span></span> <span data-ttu-id="2f8a3-416">`value` が `null`場合、エントリは書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-416">If `value` is `null`, no entries are written.</span></span>  
  
 <span data-ttu-id="2f8a3-417">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-417">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2f8a3-418"><see cref="P:System.IO.StreamWriter.AutoFlush" /> が true または <see cref="T:System.IO.StreamWriter" /> バッファーがいっぱいで、現在のライターが閉じられています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-418"><see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and current writer is closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2f8a3-419"><see cref="P:System.IO.StreamWriter.AutoFlush" /> が true または <see cref="T:System.IO.StreamWriter" /> バッファーがいっぱいで、<see cref="T:System.IO.StreamWriter" /> がストリームの末尾にあるため、基になる固定サイズのストリームにバッファーの内容を書き込むことができません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-419"><see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter" /> is at the end the stream.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="2f8a3-420">I/O エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-420">An I/O error occurs.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-421">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-421">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-422">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-422">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-423">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-423">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj -&gt; unit" Usage="streamWriter.Write (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="2f8a3-424">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-424">A composite format string.</span></span></param>
        <param name="arg0"><span data-ttu-id="2f8a3-425">書式設定および書き込みをするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-425">The object to format and write.</span></span></param>
        <summary><span data-ttu-id="2f8a3-426"><see cref="M:System.String.Format(System.String,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列をストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-426">Writes a formatted string to the stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2f8a3-427">提供される複合書式指定機能の説明については、「<xref:System.IO.TextWriter.Write(System.String,System.Object)>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-427">See <xref:System.IO.TextWriter.Write(System.String,System.Object)> for a description of the composite formatting capabilities offered.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj[] -&gt; unit" Usage="streamWriter.Write (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="arg" Type="System.Object[]" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="2f8a3-428">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-428">A composite format string.</span></span></param>
        <param name="arg"><span data-ttu-id="2f8a3-429">書式設定および書き込みをする 0 個以上のオブジェクトを含むオブジェクト配列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-429">An object array that contains zero or more objects to format and write.</span></span></param>
        <summary><span data-ttu-id="2f8a3-430"><see cref="M:System.String.Format(System.String,System.Object[])" /> メソッドと同じセマンティクスを使用して、書式設定された文字列をストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-430">Writes a formatted string to the stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object[])" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2f8a3-431">提供される複合書式指定機能の説明については、「<xref:System.IO.TextWriter.Write(System.String,System.Object[])>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-431">See <xref:System.IO.TextWriter.Write(System.String,System.Object[])> for a description of the composite formatting capabilities offered.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : char[] * int * int -&gt; unit" Usage="streamWriter.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="2f8a3-432">書き込むデータを格納する文字配列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-432">A character array that contains the data to write.</span></span></param>
        <param name="index"><span data-ttu-id="2f8a3-433">データの読み取りを開始する、バッファー内の文字位置。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-433">The character position in the buffer at which to start reading data.</span></span></param>
        <param name="count"><span data-ttu-id="2f8a3-434">書き込む文字の最大数。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-434">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="2f8a3-435">ストリームに文字配列の一部を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-435">Writes a subarray of characters to the stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-436">このメソッドは、<xref:System.IO.TextWriter.Write%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-436">This method overrides <xref:System.IO.TextWriter.Write%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2f8a3-437">これらの文字は、`index` から開始し、`index` + (`count`-1) を続ける `buffer` から読み取られます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-437">The characters are read from `buffer` beginning at `index` and continuing through `index` + (`count` - 1).</span></span> <span data-ttu-id="2f8a3-438">基になるストリームの末尾に到達しない限り、すべての文字が基になるストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-438">All characters are written to the underlying stream unless the end of the underlying stream is reached prematurely.</span></span> <span data-ttu-id="2f8a3-439"><xref:System.IO.StreamWriter.AutoFlush%2A> が `true`場合は、<xref:System.IO.StreamWriter.Flush%2A> が自動的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-439"><xref:System.IO.StreamWriter.Flush%2A> is invoked automatically if <xref:System.IO.StreamWriter.AutoFlush%2A> is `true`.</span></span>  
  
 <span data-ttu-id="2f8a3-440">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-440">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-441">この例では、配列の3番目の要素を開始位置として、13個の要素から成る配列の8文字をファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-441">This example writes eight characters from a 13-element array to a file, beginning at the third element of the array.</span></span>  
  
 [!code-cpp[Classic StreamWriter.Write2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic StreamWriter.Write2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic StreamWriter.Write2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic StreamWriter.Write2 Example/CS/source.cs#1)]
 [!code-vb[Classic StreamWriter.Write2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic StreamWriter.Write2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f8a3-442"><paramref name="buffer" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-442"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f8a3-443">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-443">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2f8a3-444"><paramref name="index" /> または <paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-444"><paramref name="index" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="2f8a3-445">I/O エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-445">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2f8a3-446"><see cref="P:System.IO.StreamWriter.AutoFlush" /> が true または <see cref="T:System.IO.StreamWriter" /> バッファーがいっぱいで、現在のライターが閉じられています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-446"><see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and current writer is closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2f8a3-447"><see cref="P:System.IO.StreamWriter.AutoFlush" /> が true または <see cref="T:System.IO.StreamWriter" /> バッファーがいっぱいで、<see cref="T:System.IO.StreamWriter" /> がストリームの末尾にあるため、基になる固定サイズのストリームにバッファーの内容を書き込むことができません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-447"><see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter" /> is at the end the stream.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="2f8a3-448">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="2f8a3-448">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="2f8a3-449">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="2f8a3-449">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="2f8a3-450">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="2f8a3-450">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj * obj -&gt; unit" Usage="streamWriter.Write (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="2f8a3-451">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-451">A composite format string.</span></span></param>
        <param name="arg0"><span data-ttu-id="2f8a3-452">書式設定および書き込みをする最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-452">The first object to format and write.</span></span></param>
        <param name="arg1"><span data-ttu-id="2f8a3-453">書式設定および書き込みをする 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-453">The second object to format and write.</span></span></param>
        <summary><span data-ttu-id="2f8a3-454"><see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列をストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-454">Writes a formatted string to the stream using the same semantics  as the <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> method..</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2f8a3-455">提供される複合書式指定機能の説明については、「<xref:System.IO.TextWriter.Write(System.String,System.Object,System.Object)>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-455">See <xref:System.IO.TextWriter.Write(System.String,System.Object,System.Object)> for a description of the composite formatting capabilities offered.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.Write(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj * obj * obj -&gt; unit" Usage="streamWriter.Write (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="arg2" Type="System.Object" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="2f8a3-456">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-456">A composite format string.</span></span></param>
        <param name="arg0"><span data-ttu-id="2f8a3-457">書式設定および書き込みをする最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-457">The first object to format and write.</span></span></param>
        <param name="arg1"><span data-ttu-id="2f8a3-458">書式設定および書き込みをする 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-458">The second object to format and write.</span></span></param>
        <param name="arg2"><span data-ttu-id="2f8a3-459">書式設定および書き込みをする 3 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-459">The third object to format and write.</span></span></param>
        <summary><span data-ttu-id="2f8a3-460"><see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列をストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-460">Writes a formatted string to the stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2f8a3-461">提供される複合書式指定機能の説明については、「<xref:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-461">See <xref:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)> for a description of the composite formatting capabilities offered.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2f8a3-462">データをストリームに非同期で書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-462">Asynchronously writes data to the stream.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteAsync (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteAsync(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.WriteAsync(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WriteAsync (value As Char) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteAsync(char value);" />
      <MemberSignature Language="F#" Value="override this.WriteAsync : char -&gt; System.Threading.Tasks.Task" Usage="streamWriter.WriteAsync value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2f8a3-463">ストリームに書き込む文字。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-463">The character to write to the stream.</span></span></param>
        <summary><span data-ttu-id="2f8a3-464">文字を非同期でストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-464">Asynchronously writes a character to the stream.</span></span></summary>
        <returns><span data-ttu-id="2f8a3-465">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-465">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2f8a3-466">次の例では、<xref:System.IO.StreamWriter.WriteAsync%28System.Char%29> メソッドを使用して、1つの文字 (文字 "a") をテキストファイルに書き込む方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-466">The following example shows how to write a single character (the letter "a") to a text file by using the <xref:System.IO.StreamWriter.WriteAsync%28System.Char%29> method.</span></span>  
  
 [!code-csharp[System.IO.StreamWriter#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StreamWriter/CS/example20.cs#20)]
 [!code-vb[System.IO.StreamWriter#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StreamWriter/VB/example20.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2f8a3-467">ストリーム ライターは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-467">The stream writer is disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2f8a3-468">ストリーム ライターは現在、前の書き込み操作で使用中です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-468">The stream writer is currently in use by a previous write operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteAsync (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteAsync(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.WriteAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WriteAsync (value As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteAsync(System::String ^ value);" />
      <MemberSignature Language="F#" Value="override this.WriteAsync : string -&gt; System.Threading.Tasks.Task" Usage="streamWriter.WriteAsync value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2f8a3-469">ストリームに書き込む文字列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-469">The string to write to the stream.</span></span> <span data-ttu-id="2f8a3-470"><paramref name="value" /> が <see langword="null" /> の場合は、何も書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-470">If <paramref name="value" /> is <see langword="null" />, nothing is written.</span></span></param>
        <summary><span data-ttu-id="2f8a3-471">文字列をストリームに非同期で書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-471">Asynchronously writes a string to the stream.</span></span></summary>
        <returns><span data-ttu-id="2f8a3-472">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-472">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2f8a3-473">次の例は、<xref:System.IO.StreamWriter.WriteAsync%28System.String%29> メソッドを使用してテキストファイルに文字列を書き込む方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-473">The following example shows how to write a string to a text file by using the <xref:System.IO.StreamWriter.WriteAsync%28System.String%29> method.</span></span>  
  
 [!code-csharp[System.IO.StreamWriter#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StreamWriter/CS/example21.cs#21)]
 [!code-vb[System.IO.StreamWriter#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StreamWriter/VB/example21.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2f8a3-474">ストリーム ライターは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-474">The stream writer is disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2f8a3-475">ストリーム ライターは現在、前の書き込み操作で使用中です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-475">The stream writer is currently in use by a previous write operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteAsync (ReadOnlyMemory&lt;char&gt; buffer, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteAsync(valuetype System.ReadOnlyMemory`1&lt;char&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WriteAsync (buffer As ReadOnlyMemory(Of Char), Optional cancellationToken As CancellationToken = null) As Task" />
      <MemberSignature Language="F#" Value="override this.WriteAsync : ReadOnlyMemory&lt;char&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="streamWriter.WriteAsync (buffer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlyMemory&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="2f8a3-476">ストリームに書き込む文字メモリ領域。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-476">The character memory region to write to the stream.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="2f8a3-477">キャンセル要求を監視するトークン。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-477">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="2f8a3-478">既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-478">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="2f8a3-479">文字メモリ領域をストリームに非同期で書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-479">Asynchronously writes a character memory region to the stream.</span></span></summary>
        <returns><span data-ttu-id="2f8a3-480">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-480">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WriteAsync (buffer As Char(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteAsync : char[] * int * int -&gt; System.Threading.Tasks.Task" Usage="streamWriter.WriteAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="2f8a3-481">書き込むデータを格納する文字配列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-481">A character array that contains the data to write.</span></span></param>
        <param name="index"><span data-ttu-id="2f8a3-482">データの読み取りを開始する、バッファー内の文字位置。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-482">The character position in the buffer at which to begin reading data.</span></span></param>
        <param name="count"><span data-ttu-id="2f8a3-483">書き込む文字の最大数。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-483">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="2f8a3-484">文字の部分配列をストリームに非同期で書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-484">Asynchronously writes a subarray of characters to the stream.</span></span></summary>
        <returns><span data-ttu-id="2f8a3-485">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-485">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2f8a3-486">次の例では、<xref:System.IO.StreamWriter.WriteAsync%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> メソッドを使用して、テキストファイルに複数の文字を書き込む方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-486">The following example shows how to write multiple characters to a text file by using the <xref:System.IO.StreamWriter.WriteAsync%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method.</span></span>  
  
 [!code-csharp[System.IO.StreamWriter#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StreamWriter/CS/example24.cs#24)]
 [!code-vb[System.IO.StreamWriter#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StreamWriter/VB/example24.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f8a3-487"><paramref name="buffer" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-487"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f8a3-488"><paramref name="index" /> に <paramref name="count" /> を加算した値がバッファーの長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-488">The <paramref name="index" /> plus <paramref name="count" /> is greater than the buffer length.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2f8a3-489"><paramref name="index" /> または <paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-489"><paramref name="index" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2f8a3-490">ストリーム ライターは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-490">The stream writer is disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2f8a3-491">ストリーム ライターは現在、前の書き込み操作で使用中です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-491">The stream writer is currently in use by a previous write operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (ReadOnlySpan&lt;char&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(valuetype System.ReadOnlySpan`1&lt;char&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.WriteLine(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(ReadOnlySpan&lt;char&gt; buffer);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="streamWriter.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="2f8a3-492">ストリームに書き込む文字スパン。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-492">The character span to write to the stream.</span></span></param>
        <summary><span data-ttu-id="2f8a3-493">文字スパンのテキスト表現、続いて行終端記号をストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-493">Writes the text representation of a character span to the stream, followed by a line terminator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="2f8a3-494">指定された値のテキスト表現は、ReadOnlySpan<Char>を呼び出すことによって生成され[ます。ToString](xref:System.ReadOnlySpan%601.ToString%2A)メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-494">The text representation of the specified value is produced by calling the [ReadOnlySpan<Char>.ToString](xref:System.ReadOnlySpan%601.ToString%2A) method.</span></span>

<span data-ttu-id="2f8a3-495">行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-495">The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.</span></span>

<span data-ttu-id="2f8a3-496">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-496">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="streamWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2f8a3-497">書き込む文字列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-497">The string to write.</span></span> <span data-ttu-id="2f8a3-498"><paramref name="value" /> が <see langword="null" /> の場合は、行終端記号だけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-498">If <paramref name="value" /> is <see langword="null" />, only the line terminator is written.</span></span></param>
        <summary><span data-ttu-id="2f8a3-499">文字列を、続いて行終端記号をストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-499">Writes a string to the stream, followed by a line terminator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2f8a3-500">このオーバーロードは、<xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29?displayProperty=nameWithType> のオーバーロードに相当します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-500">This overload is equivalent to the <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29?displayProperty=nameWithType> overload.</span></span>

<span data-ttu-id="2f8a3-501">行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-501">The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.</span></span>

<span data-ttu-id="2f8a3-502">このメソッドは、指定した文字列で個別の改行文字 (16 進数で 0x000a) を検索しないため、改行文字は <xref:System.IO.TextWriter.NewLine%2A> に置き換えられません。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-502">This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref:System.IO.TextWriter.NewLine%2A>.</span></span>

<span data-ttu-id="2f8a3-503">共通 I/O タスクの一覧は、 [共通 I/O タスク](/dotnet/standard/io/common-i-o-tasks) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-503">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj -&gt; unit" Usage="streamWriter.WriteLine (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="2f8a3-504">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-504">A composite format string.</span></span></param>
        <param name="arg0"><span data-ttu-id="2f8a3-505">書式設定および書き込みをするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-505">The object to format and write.</span></span></param>
        <summary><span data-ttu-id="2f8a3-506"><see cref="M:System.String.Format(System.String,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列と新しい行をストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-506">Writes a formatted string and a new line to the stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2f8a3-507">提供される複合書式指定機能の説明については、「<xref:System.IO.TextWriter.WriteLine(System.String,System.Object)>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-507">See <xref:System.IO.TextWriter.WriteLine(System.String,System.Object)> for a description of the composite formatting capabilities offered.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj[] -&gt; unit" Usage="streamWriter.WriteLine (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="arg" Type="System.Object[]" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="2f8a3-508">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-508">A composite format string.</span></span></param>
        <param name="arg"><span data-ttu-id="2f8a3-509">書式設定および書き込みをする 0 個以上のオブジェクトを含むオブジェクト配列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-509">An object array that contains zero or more objects to format and write.</span></span></param>
        <summary><span data-ttu-id="2f8a3-510"><see cref="M:System.String.Format(System.String,System.Object)" /> と同じセマンティクスを使用して、書式設定された文字列と新しい行をストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-510">Writes out a formatted string and a new line to the stream, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2f8a3-511">提供される複合書式指定機能の説明については、「<xref:System.IO.TextWriter.WriteLine(System.String,System.Object[])>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-511">See <xref:System.IO.TextWriter.WriteLine(System.String,System.Object[])> for a description of the composite formatting capabilities offered.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj * obj -&gt; unit" Usage="streamWriter.WriteLine (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="2f8a3-512">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-512">A composite format string.</span></span></param>
        <param name="arg0"><span data-ttu-id="2f8a3-513">書式設定および書き込みをする最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-513">The first object to format and write.</span></span></param>
        <param name="arg1"><span data-ttu-id="2f8a3-514">書式設定および書き込みをする 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-514">The second object to format and write.</span></span></param>
        <summary><span data-ttu-id="2f8a3-515"><see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列と新しい行をストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-515">Writes a formatted string and a new line to the stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2f8a3-516">提供される複合書式指定機能の説明については、「<xref:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-516">See <xref:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)> for a description of the composite formatting capabilities offered.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.WriteLine(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj * obj * obj -&gt; unit" Usage="streamWriter.WriteLine (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="arg2" Type="System.Object" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="2f8a3-517">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-517">A composite format string.</span></span></param>
        <param name="arg0"><span data-ttu-id="2f8a3-518">書式設定および書き込みをする最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-518">The first object to format and write.</span></span></param>
        <param name="arg1"><span data-ttu-id="2f8a3-519">書式設定および書き込みをする 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-519">The second object to format and write.</span></span></param>
        <param name="arg2"><span data-ttu-id="2f8a3-520">書式設定および書き込みをする 3 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-520">The third object to format and write.</span></span></param>
        <summary><span data-ttu-id="2f8a3-521"><see cref="M:System.String.Format(System.String,System.Object)" /> と同じセマンティクスを使用して、書式設定された文字列と新しい行をストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-521">Writes out a formatted string and a new line to the stream, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2f8a3-522">提供される複合書式指定機能の説明については、「<xref:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-522">See <xref:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)> for a description of the composite formatting capabilities offered.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLineAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2f8a3-523">データを、続いて行終端記号を非同期でストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-523">Asynchronously writes data to the stream, followed by a line terminator.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteLineAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteLineAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.WriteLineAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WriteLineAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteLineAsync();" />
      <MemberSignature Language="F#" Value="override this.WriteLineAsync : unit -&gt; System.Threading.Tasks.Task" Usage="streamWriter.WriteLineAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2f8a3-524">行終端記号をストリームに非同期で書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-524">Asynchronously writes a line terminator to the stream.</span></span></summary>
        <returns><span data-ttu-id="2f8a3-525">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-525">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-526">行終端記号は、<xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> プロパティによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-526">The line terminator is defined by the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2f8a3-527">ストリーム ライターは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-527">The stream writer is disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2f8a3-528">ストリーム ライターは現在、前の書き込み操作で使用中です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-528">The stream writer is currently in use by a previous write operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteLineAsync (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteLineAsync(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.WriteLineAsync(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WriteLineAsync (value As Char) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteLineAsync(char value);" />
      <MemberSignature Language="F#" Value="override this.WriteLineAsync : char -&gt; System.Threading.Tasks.Task" Usage="streamWriter.WriteLineAsync value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2f8a3-529">ストリームに書き込む文字。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-529">The character to write to the stream.</span></span></param>
        <summary><span data-ttu-id="2f8a3-530">文字を、続いて行終端記号を非同期でストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-530">Asynchronously writes a character to the stream, followed by a line terminator.</span></span></summary>
        <returns><span data-ttu-id="2f8a3-531">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-531">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-532">行終端記号は、<xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> プロパティによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-532">The line terminator is defined by the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-533">次の例では、<xref:System.IO.StreamWriter.WriteLineAsync%28System.Char%29> メソッドを使用して、1つの文字 (文字 "a") をテキストファイル内の行に、その後に1つの文字を含む別の行 (文字 "b") を書き込む方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-533">The following example shows how to write a single character (the letter "a") to a line in a text file, followed by another line that contains a single character (the letter "b"), by using the <xref:System.IO.StreamWriter.WriteLineAsync%28System.Char%29> method.</span></span>  
  
 [!code-csharp[System.IO.StreamWriter#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StreamWriter/CS/example22.cs#22)]
 [!code-vb[System.IO.StreamWriter#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StreamWriter/VB/example22.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2f8a3-534">ストリーム ライターは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-534">The stream writer is disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2f8a3-535">ストリーム ライターは現在、前の書き込み操作で使用中です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-535">The stream writer is currently in use by a previous write operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteLineAsync (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteLineAsync(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.WriteLineAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WriteLineAsync (value As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteLineAsync(System::String ^ value);" />
      <MemberSignature Language="F#" Value="override this.WriteLineAsync : string -&gt; System.Threading.Tasks.Task" Usage="streamWriter.WriteLineAsync value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2f8a3-536">書き込む文字列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-536">The string to write.</span></span> <span data-ttu-id="2f8a3-537">値が <see langword="null" />の場合は、行終端記号だけが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-537">If the value is <see langword="null" />, only a line terminator is written.</span></span></param>
        <summary><span data-ttu-id="2f8a3-538">文字列を、続いて行終端記号を非同期でストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-538">Asynchronously writes a string to the stream, followed by a line terminator.</span></span></summary>
        <returns><span data-ttu-id="2f8a3-539">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-539">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-540">行終端記号は、<xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> プロパティによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-540">The line terminator is defined by the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-541">次の例では、<xref:System.IO.StreamWriter.WriteLineAsync%28System.String%29> メソッドを使用して、文字列値で構成される2つの行をテキストファイルに書き込む方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-541">The following example shows how to write two lines that consist of string values to a text file by using the <xref:System.IO.StreamWriter.WriteLineAsync%28System.String%29> method.</span></span>  
  
 [!code-csharp[System.IO.StreamWriter#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StreamWriter/CS/example23.cs#23)]
 [!code-vb[System.IO.StreamWriter#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StreamWriter/VB/example23.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2f8a3-542">ストリーム ライターは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-542">The stream writer is disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2f8a3-543">ストリーム ライターは現在、前の書き込み操作で使用中です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-543">The stream writer is currently in use by a previous write operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteLineAsync (ReadOnlyMemory&lt;char&gt; buffer, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteLineAsync(valuetype System.ReadOnlyMemory`1&lt;char&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WriteLineAsync (buffer As ReadOnlyMemory(Of Char), Optional cancellationToken As CancellationToken = null) As Task" />
      <MemberSignature Language="F#" Value="override this.WriteLineAsync : ReadOnlyMemory&lt;char&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="streamWriter.WriteLineAsync (buffer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlyMemory&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="2f8a3-544">ストリームに書き込む文字メモリ領域。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-544">The character memory region to write to the stream.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="2f8a3-545">キャンセル要求を監視するトークン。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-545">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="2f8a3-546">既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-546">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="2f8a3-547">文字メモリ領域のテキスト表現を、続いて行終端記号を非同期でストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-547">Asynchronously writes the text representation of a character memory region to the stream, followed by a line terminator.</span></span></summary>
        <returns><span data-ttu-id="2f8a3-548">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-548">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="2f8a3-549">行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-549">The line terminator is defined by the <xref:System.IO.TextWriter.CoreNewLine> field.</span></span>
 
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteLineAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteLineAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WriteLineAsync (buffer As Char(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteLineAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteLineAsync : char[] * int * int -&gt; System.Threading.Tasks.Task" Usage="streamWriter.WriteLineAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="2f8a3-550">データの書き込み元の文字配列。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-550">The character array to write data from.</span></span></param>
        <param name="index"><span data-ttu-id="2f8a3-551">データの読み取りを開始する、バッファー内の文字位置。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-551">The character position in the buffer at which to start reading data.</span></span></param>
        <param name="count"><span data-ttu-id="2f8a3-552">書き込む文字の最大数。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-552">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="2f8a3-553">文字の部分配列を、続いて行終端記号を非同期でストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-553">Asynchronously writes a subarray of characters to the stream, followed by a line terminator.</span></span></summary>
        <returns><span data-ttu-id="2f8a3-554">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-554">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f8a3-555">行終端記号は、<xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> プロパティによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-555">The line terminator is defined by the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f8a3-556">次の例では、<xref:System.IO.StreamWriter.WriteLineAsync%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> メソッドを使用して、テキストファイル内の2つの異なる行に文字を書き込む方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-556">The following example shows how to write characters to two separate lines in a text file by using the <xref:System.IO.StreamWriter.WriteLineAsync%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="2f8a3-557">最初の行には、文字列の最初の11文字 ("最初の行" の後にスペースが続く文字) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-557">The first line contains the first 11 characters from the string (the letters "First line" followed by a space).</span></span> <span data-ttu-id="2f8a3-558">2行目には、文字列の残りの文字 (文字 "と2行目") が含まれています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-558">The second line contains the remaining characters from the string (the letters "and second line").</span></span>  
  
 [!code-csharp[System.IO.StreamWriter#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StreamWriter/CS/example25.cs#25)]
 [!code-vb[System.IO.StreamWriter#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StreamWriter/VB/example25.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2f8a3-559"><paramref name="buffer" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-559"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2f8a3-560"><paramref name="index" /> に <paramref name="count" /> を加算した値がバッファーの長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-560">The <paramref name="index" /> plus <paramref name="count" /> is greater than the buffer length.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2f8a3-561"><paramref name="index" /> または <paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-561"><paramref name="index" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2f8a3-562">ストリーム ライターは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-562">The stream writer is disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2f8a3-563">ストリーム ライターは現在、前の書き込み操作で使用中です。</span><span class="sxs-lookup"><span data-stu-id="2f8a3-563">The stream writer is currently in use by a previous write operation.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
