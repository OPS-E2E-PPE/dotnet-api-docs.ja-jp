<Type Name="StringReader" FullName="System.IO.StringReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="531fa09ef0c07cbcc4066b2a2476167611924879" /><Meta Name="ms.sourcegitcommit" Value="81ab118287bf69d10df7204c332592eac20b1b60" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/11/2019" /><Meta Name="ms.locfileid" Value="75003794" /></Metadata><TypeSignature Language="C#" Value="public class StringReader : System.IO.TextReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit StringReader extends System.IO.TextReader" />
  <TypeSignature Language="DocId" Value="T:System.IO.StringReader" />
  <TypeSignature Language="VB.NET" Value="Public Class StringReader&#xA;Inherits TextReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringReader : System::IO::TextReader" />
  <TypeSignature Language="F#" Value="type StringReader = class&#xA;    inherit TextReader" />
  <AssemblyInfo>
    <AssemblyName>System.IO</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.TextReader</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="463e8-101">文字列から読み取る <see cref="T:System.IO.TextReader" /> を実装します。</span><span class="sxs-lookup"><span data-stu-id="463e8-101">Implements a <see cref="T:System.IO.TextReader" /> that reads from a string.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="463e8-102"><xref:System.IO.StringReader> を使用すると、文字列を同期的または非同期的に読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="463e8-102"><xref:System.IO.StringReader> enables you to read a string synchronously or asynchronously.</span></span> <span data-ttu-id="463e8-103"><xref:System.IO.StringReader.Read%2A> または <xref:System.IO.StringReader.ReadAsync%2A> メソッド、<xref:System.IO.StringReader.ReadLine%2A> または <xref:System.IO.StringReader.ReadLineAsync%2A> メソッドを使用して一度に1行ずつ、または <xref:System.IO.StringReader.ReadToEnd%2A> または <xref:System.IO.StringReader.ReadToEndAsync%2A> メソッドを使用して文字列全体を読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="463e8-103">You can read a character at a time with the <xref:System.IO.StringReader.Read%2A> or the <xref:System.IO.StringReader.ReadAsync%2A> method, a line at a time using the <xref:System.IO.StringReader.ReadLine%2A> or the <xref:System.IO.StringReader.ReadLineAsync%2A> method and an entire string using the <xref:System.IO.StringReader.ReadToEnd%2A> or the <xref:System.IO.StringReader.ReadToEndAsync%2A> method.</span></span>  
  
[!INCLUDE[note_unnecessary_dispose](~/includes/note-unnecessary-dispose.md)]
  
 <span data-ttu-id="463e8-104">次の表に、その他の一般的な i/o タスクと関連する i/o タスクの例を示します。</span><span class="sxs-lookup"><span data-stu-id="463e8-104">The following table lists examples of other typical or related I/O tasks.</span></span>  
  
|<span data-ttu-id="463e8-105">目的</span><span class="sxs-lookup"><span data-stu-id="463e8-105">To do this...</span></span>|<span data-ttu-id="463e8-106">参照項目</span><span class="sxs-lookup"><span data-stu-id="463e8-106">See the example in this topic...</span></span>|  
|-------------------|--------------------------------------|  
|<span data-ttu-id="463e8-107">テキスト ファイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="463e8-107">Create a text file.</span></span>|[<span data-ttu-id="463e8-108">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-108">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="463e8-109">テキストファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="463e8-109">Write to a text file.</span></span>|[<span data-ttu-id="463e8-110">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-110">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="463e8-111">テキストファイルからの読み取り。</span><span class="sxs-lookup"><span data-stu-id="463e8-111">Read from a text file.</span></span>|[<span data-ttu-id="463e8-112">方法: ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="463e8-112">How to: Read Text from a File</span></span>](~/docs/standard/io/how-to-read-text-from-a-file.md)|  
|<span data-ttu-id="463e8-113">ファイルにテキストを追加します。</span><span class="sxs-lookup"><span data-stu-id="463e8-113">Append text to a file.</span></span>|[<span data-ttu-id="463e8-114">方法: ログ ファイルを開いて情報を追加する</span><span class="sxs-lookup"><span data-stu-id="463e8-114">How to: Open and Append to a Log File</span></span>](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=nameWithType><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-115">ファイルのサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="463e8-115">Get the size of a file.</span></span>|<xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-116">ファイルの属性を取得します。</span><span class="sxs-lookup"><span data-stu-id="463e8-116">Get the attributes of a file.</span></span>|<xref:System.IO.File.GetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-117">ファイルの属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="463e8-117">Set the attributes of a file.</span></span>|<xref:System.IO.File.SetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-118">ファイルが存在するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="463e8-118">Determine if a file exists.</span></span>|<xref:System.IO.File.Exists%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-119">バイナリファイルから読み取ります。</span><span class="sxs-lookup"><span data-stu-id="463e8-119">Read from a binary file.</span></span>|[<span data-ttu-id="463e8-120">方法: 新しく作成されたデータ ファイルに対して読み書きする</span><span class="sxs-lookup"><span data-stu-id="463e8-120">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
|<span data-ttu-id="463e8-121">バイナリファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="463e8-121">Write to a binary file.</span></span>|[<span data-ttu-id="463e8-122">方法: 新しく作成されたデータ ファイルに対して読み書きする</span><span class="sxs-lookup"><span data-stu-id="463e8-122">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
  
   
  
## Examples  
 <span data-ttu-id="463e8-123">次の例は、文字列全体を非同期に読み取る方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="463e8-123">The following example shows how to read an entire string asynchronously.</span></span>  
  
 [!code-csharp[System.IO.StringReader#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringreader/cs/example2.cs#2)]
 [!code-vb[System.IO.StringReader#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringreader/vb/example2.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.TextReader" />
    <altmember cref="T:System.IO.StringWriter" />
    <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="463e8-124">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="463e8-124">File and Stream I/O</span></span></related>
    <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="463e8-125">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="463e8-125">How to: Read Text from a File</span></span></related>
    <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="463e8-126">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-126">How to: Write Text to a File</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringReader (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StringReader(System::String ^ s);" />
      <MemberSignature Language="F#" Value="new System.IO.StringReader : string -&gt; System.IO.StringReader" Usage="new System.IO.StringReader s" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="463e8-127"><see cref="T:System.IO.StringReader" /> を初期化する目的の文字列。</span><span class="sxs-lookup"><span data-stu-id="463e8-127">The string to which the <see cref="T:System.IO.StringReader" /> should be initialized.</span></span></param>
        <summary><span data-ttu-id="463e8-128">指定した文字列から読み取る <see cref="T:System.IO.StringReader" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="463e8-128">Initializes a new instance of the <see cref="T:System.IO.StringReader" /> class that reads from the specified string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="463e8-129">次の表に、その他の一般的な i/o タスクと関連する i/o タスクの例を示します。</span><span class="sxs-lookup"><span data-stu-id="463e8-129">The following table lists examples of other typical or related I/O tasks.</span></span>  
  
|<span data-ttu-id="463e8-130">目的</span><span class="sxs-lookup"><span data-stu-id="463e8-130">To do this...</span></span>|<span data-ttu-id="463e8-131">参照項目</span><span class="sxs-lookup"><span data-stu-id="463e8-131">See the example in this topic...</span></span>|  
|-------------------|--------------------------------------|  
|<span data-ttu-id="463e8-132">テキスト ファイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="463e8-132">Create a text file.</span></span>|[<span data-ttu-id="463e8-133">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-133">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="463e8-134">テキストファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="463e8-134">Write to a text file.</span></span>|[<span data-ttu-id="463e8-135">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-135">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="463e8-136">テキストファイルからの読み取り。</span><span class="sxs-lookup"><span data-stu-id="463e8-136">Read from a text file.</span></span>|[<span data-ttu-id="463e8-137">方法: ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="463e8-137">How to: Read Text from a File</span></span>](~/docs/standard/io/how-to-read-text-from-a-file.md)|  
|<span data-ttu-id="463e8-138">ファイルにテキストを追加します。</span><span class="sxs-lookup"><span data-stu-id="463e8-138">Append text to a file.</span></span>|[<span data-ttu-id="463e8-139">方法: ログ ファイルを開いて情報を追加する</span><span class="sxs-lookup"><span data-stu-id="463e8-139">How to: Open and Append to a Log File</span></span>](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=nameWithType><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-140">ファイルのサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="463e8-140">Get the size of a file.</span></span>|<xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-141">ファイルの属性を取得します。</span><span class="sxs-lookup"><span data-stu-id="463e8-141">Get the attributes of a file.</span></span>|<xref:System.IO.File.GetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-142">ファイルの属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="463e8-142">Set the attributes of a file.</span></span>|<xref:System.IO.File.SetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-143">ファイルが存在するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="463e8-143">Determine if a file exists.</span></span>|<xref:System.IO.File.Exists%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-144">バイナリファイルから読み取ります。</span><span class="sxs-lookup"><span data-stu-id="463e8-144">Read from a binary file.</span></span>|[<span data-ttu-id="463e8-145">方法: 新しく作成されたデータ ファイルに対して読み書きする</span><span class="sxs-lookup"><span data-stu-id="463e8-145">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
|<span data-ttu-id="463e8-146">バイナリファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="463e8-146">Write to a binary file.</span></span>|[<span data-ttu-id="463e8-147">方法: 新しく作成されたデータ ファイルに対して読み書きする</span><span class="sxs-lookup"><span data-stu-id="463e8-147">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
  
   
  
## Examples  
 <span data-ttu-id="463e8-148">このコード例は、<xref:System.IO.StringReader> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="463e8-148">This code example is part of a larger example provided for the <xref:System.IO.StringReader> class.</span></span>  
  
 [!code-cpp[System.IO.StringReaderWriter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CPP/stringrw.cpp#2)]
 [!code-csharp[System.IO.StringReaderWriter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CS/stringrw.cs#2)]
 [!code-vb[System.IO.StringReaderWriter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringReaderWriter/VB/stringrw.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="463e8-149"><paramref name="s" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="463e8-149">The <paramref name="s" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="463e8-150">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="463e8-150">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="463e8-151">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="463e8-151">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="463e8-152">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-152">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="stringReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="463e8-153"><see cref="T:System.IO.StringReader" /> を閉じます。</span><span class="sxs-lookup"><span data-stu-id="463e8-153">Closes the <see cref="T:System.IO.StringReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="463e8-154">ファイルを作成し、ファイルにテキストを書き込む例については、「[方法: ファイルにテキストを書き込む](~/docs/standard/io/how-to-write-text-to-a-file.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="463e8-154">For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md).</span></span> <span data-ttu-id="463e8-155">ファイルからテキストを読み取る例については、「[方法: ファイルからテキストを読み取る](~/docs/standard/io/how-to-read-text-from-a-file.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="463e8-155">For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md).</span></span> <span data-ttu-id="463e8-156">バイナリファイルの読み取りと書き込みの例については、「[方法: 新しく作成されたデータファイルに対して読み取りと書き込みを](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)行う」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="463e8-156">For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md).</span></span>  
  
<span data-ttu-id="463e8-157">このメソッドは、<xref:System.IO.TextReader.Close%2A?displayProperty=nameWithType> メソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="463e8-157">This method overrides the <xref:System.IO.TextReader.Close%2A?displayProperty=nameWithType> method.</span></span>  
  
<span data-ttu-id="463e8-158">この `Close` の実装では、<xref:System.IO.StringReader.Dispose%2A>、`true` 値を渡すメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="463e8-158">This implementation of `Close` calls the <xref:System.IO.StringReader.Dispose%2A>, method passing a `true` value.</span></span> <span data-ttu-id="463e8-159">`Close`の呼び出しの後に、他のメソッドが例外をスローする場合があります。</span><span class="sxs-lookup"><span data-stu-id="463e8-159">Following a call to `Close`, other methods might throw an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="463e8-160">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="463e8-160">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="463e8-161">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="463e8-161">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="463e8-162">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-162">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="stringReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="463e8-163">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="463e8-163"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="463e8-164"><see cref="T:System.IO.StringReader" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="463e8-164">Releases the unmanaged resources used by the <see cref="T:System.IO.StringReader" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="463e8-165">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.IO.StringReader> が参照しているすべてのマネージド オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="463e8-165">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.StringReader> references.</span></span> <span data-ttu-id="463e8-166">このメソッドは、参照される各オブジェクトの `Dispose` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="463e8-166">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="463e8-167">
            <see cref="M:System.IO.StringReader.Dispose(System.Boolean)" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="463e8-167">
            <see cref="M:System.IO.StringReader.Dispose(System.Boolean)" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="463e8-168"><see cref="M:System.IO.StringReader.Dispose(System.Boolean)" />をオーバーライドする場合は、以前に <see cref="M:System.IO.StringReader.Dispose(System.Boolean)" />を呼び出したときに破棄されたオブジェクトを参照しないように注意してください。</span><span class="sxs-lookup"><span data-stu-id="463e8-168">When overriding <see cref="M:System.IO.StringReader.Dispose(System.Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see cref="M:System.IO.StringReader.Dispose(System.Boolean)" />.</span></span></para></block>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="463e8-169">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="463e8-169">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="463e8-170">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="463e8-170">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="463e8-171">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-171">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public override int Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Peek () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Peek();" />
      <MemberSignature Language="F#" Value="override this.Peek : unit -&gt; int" Usage="stringReader.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="463e8-172">使用可能な次の文字を返しますが、その文字は使用されません。</span><span class="sxs-lookup"><span data-stu-id="463e8-172">Returns the next available character but does not consume it.</span></span></summary>
        <returns><span data-ttu-id="463e8-173">読み取り対象の次の文字を表す整数。使用できる文字がないか、ストリームがシークをサポートしていない場合は -1。</span><span class="sxs-lookup"><span data-stu-id="463e8-173">An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="463e8-174"><xref:System.IO.StringReader.Peek%2A> メソッドは、ファイルの末尾または別のエラーが発生したかどうかを判断するために、整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="463e8-174">The <xref:System.IO.StringReader.Peek%2A> method returns an integer value in order to determine whether the end of the file, or another error has occurred.</span></span> <span data-ttu-id="463e8-175">これにより、ユーザーは最初に、返された値が-1 であるかどうかを <xref:System.Char> 型にキャストする前に確認できます。</span><span class="sxs-lookup"><span data-stu-id="463e8-175">This allows a user to first check if the returned value is -1 before casting it to a <xref:System.Char> type.</span></span>  
  
 <span data-ttu-id="463e8-176">このメソッドは、<xref:System.IO.TextReader.Peek%2A?displayProperty=nameWithType> メソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="463e8-176">This method overrides the <xref:System.IO.TextReader.Peek%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="463e8-177">`StringReader` の現在位置は、この操作によって変更されていません。</span><span class="sxs-lookup"><span data-stu-id="463e8-177">The current position of the `StringReader` is not changed by this operation.</span></span>  
  
 <span data-ttu-id="463e8-178">次の表に、その他の一般的な i/o タスクと関連する i/o タスクの例を示します。</span><span class="sxs-lookup"><span data-stu-id="463e8-178">The following table lists examples of other typical or related I/O tasks.</span></span>  
  
|<span data-ttu-id="463e8-179">目的</span><span class="sxs-lookup"><span data-stu-id="463e8-179">To do this...</span></span>|<span data-ttu-id="463e8-180">参照項目</span><span class="sxs-lookup"><span data-stu-id="463e8-180">See the example in this topic...</span></span>|  
|-------------------|--------------------------------------|  
|<span data-ttu-id="463e8-181">テキスト ファイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="463e8-181">Create a text file.</span></span>|[<span data-ttu-id="463e8-182">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-182">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="463e8-183">テキストファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="463e8-183">Write to a text file.</span></span>|[<span data-ttu-id="463e8-184">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-184">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="463e8-185">テキストファイルからの読み取り。</span><span class="sxs-lookup"><span data-stu-id="463e8-185">Read from a text file.</span></span>|[<span data-ttu-id="463e8-186">方法: ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="463e8-186">How to: Read Text from a File</span></span>](~/docs/standard/io/how-to-read-text-from-a-file.md)|  
|<span data-ttu-id="463e8-187">ファイルのサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="463e8-187">Get the size of a file.</span></span>|<xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="463e8-188">現在のリーダーが閉じています。</span><span class="sxs-lookup"><span data-stu-id="463e8-188">The current reader is closed.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="463e8-189">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="463e8-189">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="463e8-190">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="463e8-190">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="463e8-191">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-191">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Read">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="463e8-192">入力文字列から次の文字または次の文字セットを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="463e8-192">Reads the next character or next set of characters from the input string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read();" />
      <MemberSignature Language="F#" Value="override this.Read : unit -&gt; int" Usage="stringReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="463e8-193">入力文字列から次の文字を読み取り、1 文字分だけ文字位置を進めます。</span><span class="sxs-lookup"><span data-stu-id="463e8-193">Reads the next character from the input string and advances the character position by one character.</span></span></summary>
        <returns><span data-ttu-id="463e8-194">基になる文字列の次の文字。または使用できる文字がない場合は -1。</span><span class="sxs-lookup"><span data-stu-id="463e8-194">The next character from the underlying string, or -1 if no more characters are available.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="463e8-195">このメソッドは、<xref:System.IO.TextReader.Read%2A?displayProperty=nameWithType> メソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="463e8-195">This method overrides the <xref:System.IO.TextReader.Read%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="463e8-196">次の表に、その他の一般的な i/o タスクと関連する i/o タスクの例を示します。</span><span class="sxs-lookup"><span data-stu-id="463e8-196">The following table lists examples of other typical or related I/O tasks.</span></span>  
  
|<span data-ttu-id="463e8-197">目的</span><span class="sxs-lookup"><span data-stu-id="463e8-197">To do this...</span></span>|<span data-ttu-id="463e8-198">参照項目</span><span class="sxs-lookup"><span data-stu-id="463e8-198">See the example in this topic...</span></span>|  
|-------------------|--------------------------------------|  
|<span data-ttu-id="463e8-199">テキスト ファイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="463e8-199">Create a text file.</span></span>|[<span data-ttu-id="463e8-200">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-200">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="463e8-201">テキストファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="463e8-201">Write to a text file.</span></span>|[<span data-ttu-id="463e8-202">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-202">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="463e8-203">テキストファイルからの読み取り。</span><span class="sxs-lookup"><span data-stu-id="463e8-203">Read from a text file.</span></span>|[<span data-ttu-id="463e8-204">方法: ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="463e8-204">How to: Read Text from a File</span></span>](~/docs/standard/io/how-to-read-text-from-a-file.md)|  
|<span data-ttu-id="463e8-205">ファイルにテキストを追加します。</span><span class="sxs-lookup"><span data-stu-id="463e8-205">Append text to a file.</span></span>|[<span data-ttu-id="463e8-206">方法: ログ ファイルを開いて情報を追加する</span><span class="sxs-lookup"><span data-stu-id="463e8-206">How to: Open and Append to a Log File</span></span>](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=nameWithType><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-207">ファイルのサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="463e8-207">Get the size of a file.</span></span>|<xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-208">ファイルの属性を取得します。</span><span class="sxs-lookup"><span data-stu-id="463e8-208">Get the attributes of a file.</span></span>|<xref:System.IO.File.GetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-209">ファイルの属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="463e8-209">Set the attributes of a file.</span></span>|<xref:System.IO.File.SetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-210">ファイルが存在するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="463e8-210">Determine if a file exists.</span></span>|<xref:System.IO.File.Exists%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-211">バイナリファイルから読み取ります。</span><span class="sxs-lookup"><span data-stu-id="463e8-211">Read from a binary file.</span></span>|[<span data-ttu-id="463e8-212">方法: 新しく作成されたデータ ファイルに対して読み書きする</span><span class="sxs-lookup"><span data-stu-id="463e8-212">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
|<span data-ttu-id="463e8-213">バイナリファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="463e8-213">Write to a binary file.</span></span>|[<span data-ttu-id="463e8-214">方法: 新しく作成されたデータ ファイルに対して読み書きする</span><span class="sxs-lookup"><span data-stu-id="463e8-214">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
  
   
  
## Examples  
 <span data-ttu-id="463e8-215">このコード例は、<xref:System.IO.StringReader> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="463e8-215">This code example is part of a larger example provided for the <xref:System.IO.StringReader> class.</span></span>  
  
 [!code-cpp[System.IO.StringReaderWriter#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CPP/stringrw.cpp#3)]
 [!code-csharp[System.IO.StringReaderWriter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CS/stringrw.cs#3)]
 [!code-vb[System.IO.StringReaderWriter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringReaderWriter/VB/stringrw.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="463e8-216">現在のリーダーが閉じています。</span><span class="sxs-lookup"><span data-stu-id="463e8-216">The current reader is closed.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="463e8-217">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="463e8-217">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="463e8-218">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="463e8-218">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="463e8-219">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-219">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (Span&lt;char&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(valuetype System.Span`1&lt;char&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.Read(System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(Span&lt;char&gt; buffer);" />
      <MemberSignature Language="F#" Value="override this.Read : Span&lt;char&gt; -&gt; int" Usage="stringReader.Read buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="463e8-220">このメソッドから戻ったときは、現在のソースから読み取られた文字が格納されています。</span><span class="sxs-lookup"><span data-stu-id="463e8-220">When this method returns, contains the characters read from the current source.</span></span> <span data-ttu-id="463e8-221">読み取られた合計文字数が 0 の場合、スパンは変更されません。</span><span class="sxs-lookup"><span data-stu-id="463e8-221">If the total number of characters read is zero, the span remains unmodified.</span></span></param>
        <summary><span data-ttu-id="463e8-222">入力文字列の現在位置から開始してすべての文字を読み取り、現在位置を入力文字列の末尾に進めます。</span><span class="sxs-lookup"><span data-stu-id="463e8-222">Reads all the characters from the input string, starting at the current position, and advances the current position to the end of the input string.</span></span></summary>
        <returns><span data-ttu-id="463e8-223">バッファーに読み取られた合計文字数。</span><span class="sxs-lookup"><span data-stu-id="463e8-223">The total number of characters read into the buffer.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="463e8-224">現在の文字列リーダー インスタンスは閉じられます。</span><span class="sxs-lookup"><span data-stu-id="463e8-224">The current string reader instance is closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(char[] buffer, int32 index, int32 count) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : char[] * int * int -&gt; int" Usage="stringReader.Read (buffer, index, count)" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read([out] char[] buffer, int32 index, int32 count) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="463e8-225">このメソッドが戻るとき、指定した文字配列の <paramref name="index" /> から (<paramref name="index" /> + <paramref name="count" /> - 1) までの値が、現在のソースから読み取られた文字に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="463e8-225">When this method returns, contains the specified character array with the values between <paramref name="index" /> and (<paramref name="index" /> + <paramref name="count" /> - 1) replaced by the characters read from the current source.</span></span></param>
        <param name="index"><span data-ttu-id="463e8-226">バッファー内の開始インデックス。</span><span class="sxs-lookup"><span data-stu-id="463e8-226">The starting index in the buffer.</span></span></param>
        <param name="count"><span data-ttu-id="463e8-227">読み取る文字の数。</span><span class="sxs-lookup"><span data-stu-id="463e8-227">The number of characters to read.</span></span></param>
        <summary><span data-ttu-id="463e8-228">入力文字列から文字のブロックを読み取り、<paramref name="count" /> だけ文字位置を進めます。</span><span class="sxs-lookup"><span data-stu-id="463e8-228">Reads a block of characters from the input string and advances the character position by <paramref name="count" />.</span></span></summary>
        <returns><span data-ttu-id="463e8-229">バッファーに読み取られた合計文字数。</span><span class="sxs-lookup"><span data-stu-id="463e8-229">The total number of characters read into the buffer.</span></span> <span data-ttu-id="463e8-230">要求しただけの文字数を読み取ることができなかった場合、この値は要求した文字数より小さくなります。基になる文字列の末尾に到達した場合は 0 になることがあります。</span><span class="sxs-lookup"><span data-stu-id="463e8-230">This can be less than the number of characters requested if that many characters are not currently available, or zero if the end of the underlying string has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="463e8-231">このメソッドは、<xref:System.IO.TextReader.Read%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="463e8-231">This method overrides <xref:System.IO.TextReader.Read%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="463e8-232">メソッドは、<xref:System.IO.StringReader> から `buffer` 文字配列に `count` までの文字を読み取り、`index`位置から開始します。</span><span class="sxs-lookup"><span data-stu-id="463e8-232">The method will read up to `count` characters from the <xref:System.IO.StringReader> into the `buffer` character array starting at position `index`.</span></span> <span data-ttu-id="463e8-233">実際に読み取られた文字数を返します。文字列の末尾に到達し、文字が読み取られていない場合は0を返します。</span><span class="sxs-lookup"><span data-stu-id="463e8-233">Returns the actual number of characters read, or zero if the end of the string has been reached and no characters are read.</span></span>  
  
 <span data-ttu-id="463e8-234">次の表に、その他の一般的な i/o タスクと関連する i/o タスクの例を示します。</span><span class="sxs-lookup"><span data-stu-id="463e8-234">The following table lists examples of other typical or related I/O tasks.</span></span>  
  
|<span data-ttu-id="463e8-235">目的</span><span class="sxs-lookup"><span data-stu-id="463e8-235">To do this...</span></span>|<span data-ttu-id="463e8-236">参照項目</span><span class="sxs-lookup"><span data-stu-id="463e8-236">See the example in this topic...</span></span>|  
|-------------------|--------------------------------------|  
|<span data-ttu-id="463e8-237">テキスト ファイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="463e8-237">Create a text file.</span></span>|[<span data-ttu-id="463e8-238">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-238">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="463e8-239">テキストファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="463e8-239">Write to a text file.</span></span>|[<span data-ttu-id="463e8-240">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-240">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="463e8-241">テキストファイルからの読み取り。</span><span class="sxs-lookup"><span data-stu-id="463e8-241">Read from a text file.</span></span>|[<span data-ttu-id="463e8-242">方法: ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="463e8-242">How to: Read Text from a File</span></span>](~/docs/standard/io/how-to-read-text-from-a-file.md)|  
|<span data-ttu-id="463e8-243">ファイルにテキストを追加します。</span><span class="sxs-lookup"><span data-stu-id="463e8-243">Append text to a file.</span></span>|[<span data-ttu-id="463e8-244">方法: ログ ファイルを開いて情報を追加する</span><span class="sxs-lookup"><span data-stu-id="463e8-244">How to: Open and Append to a Log File</span></span>](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=nameWithType><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-245">ファイルのサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="463e8-245">Get the size of a file.</span></span>|<xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-246">ファイルの属性を取得します。</span><span class="sxs-lookup"><span data-stu-id="463e8-246">Get the attributes of a file.</span></span>|<xref:System.IO.File.GetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-247">ファイルの属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="463e8-247">Set the attributes of a file.</span></span>|<xref:System.IO.File.SetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-248">ファイルが存在するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="463e8-248">Determine if a file exists.</span></span>|<xref:System.IO.File.Exists%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-249">バイナリファイルから読み取ります。</span><span class="sxs-lookup"><span data-stu-id="463e8-249">Read from a binary file.</span></span>|[<span data-ttu-id="463e8-250">方法: 新しく作成されたデータ ファイルに対して読み書きする</span><span class="sxs-lookup"><span data-stu-id="463e8-250">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
|<span data-ttu-id="463e8-251">バイナリファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="463e8-251">Write to a binary file.</span></span>|[<span data-ttu-id="463e8-252">方法: 新しく作成されたデータ ファイルに対して読み書きする</span><span class="sxs-lookup"><span data-stu-id="463e8-252">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="463e8-253"><paramref name="buffer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="463e8-253"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="463e8-254">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</span><span class="sxs-lookup"><span data-stu-id="463e8-254">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="463e8-255"><paramref name="index" /> または <paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="463e8-255"><paramref name="index" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="463e8-256">現在のリーダーが閉じています。</span><span class="sxs-lookup"><span data-stu-id="463e8-256">The current reader is closed.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="463e8-257">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="463e8-257">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="463e8-258">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="463e8-258">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="463e8-259">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-259">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask&lt;int&gt; ReadAsync (Memory&lt;char&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;int32&gt; ReadAsync(valuetype System.Memory`1&lt;char&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.ReadAsync : Memory&lt;char&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int&gt;" Usage="stringReader.ReadAsync (buffer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Memory&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="463e8-260">このメソッドから戻ったときは、現在のソースから読み取られた文字が格納されています。</span><span class="sxs-lookup"><span data-stu-id="463e8-260">When this method returns, contains the characters read from the current source.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="463e8-261">キャンセル要求を監視するためのトークン。</span><span class="sxs-lookup"><span data-stu-id="463e8-261">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="463e8-262">既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</span><span class="sxs-lookup"><span data-stu-id="463e8-262">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="463e8-263">非同期的に、入力文字列の現在位置から開始してすべての文字を読み取り、現在位置を入力文字列の末尾に進めます。</span><span class="sxs-lookup"><span data-stu-id="463e8-263">Asynchronously reads all the characters from the input string, starting at the current position, and advances the current position to the end of the input string.</span></span></summary>
        <returns><span data-ttu-id="463e8-264">非同期の読み取り操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="463e8-264">A task that represents the asynchronous read operation.</span></span> <span data-ttu-id="463e8-265"><paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれる文字の合計数が含まれます。</span><span class="sxs-lookup"><span data-stu-id="463e8-265">The value of the <paramref name="TResult" /> parameter contains the total number of characters read into the buffer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ReadAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadAsync (buffer As Char(), index As Integer, count As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadAsync : char[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="stringReader.ReadAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="463e8-266">このメソッドが戻るとき、指定した文字配列の <paramref name="index" /> から (<paramref name="index" /> + <paramref name="count" /> - 1) までの値が、現在のソースから読み取られた文字に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="463e8-266">When this method returns, contains the specified character array with the values between <paramref name="index" /> and (<paramref name="index" /> + <paramref name="count" /> - 1) replaced by the characters read from the current source.</span></span></param>
        <param name="index"><span data-ttu-id="463e8-267">書き込みを開始する <paramref name="buffer" /> 内の位置。</span><span class="sxs-lookup"><span data-stu-id="463e8-267">The position in <paramref name="buffer" /> at which to begin writing.</span></span></param>
        <param name="count"><span data-ttu-id="463e8-268">読み取り対象の最大文字数。</span><span class="sxs-lookup"><span data-stu-id="463e8-268">The maximum number of characters to read.</span></span> <span data-ttu-id="463e8-269">指定された文字数をバッファーに書き込む前に文字列の末尾に到達した場合、メソッドは制御を返します。</span><span class="sxs-lookup"><span data-stu-id="463e8-269">If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.</span></span></param>
        <summary><span data-ttu-id="463e8-270">指定した最大文字数を現在の文字列から非同期的に読み取り、バッファーの指定したインデックス位置にそのデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="463e8-270">Reads a specified maximum number of characters from the current string asynchronously and writes the data to a buffer, beginning at the specified index.</span></span></summary>
        <returns><span data-ttu-id="463e8-271">非同期の読み取り操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="463e8-271">A task that represents the asynchronous read operation.</span></span> <span data-ttu-id="463e8-272"><paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。</span><span class="sxs-lookup"><span data-stu-id="463e8-272">The value of the <paramref name="TResult" /> parameter contains the total number of bytes read into the buffer.</span></span> <span data-ttu-id="463e8-273">現在使用できるバイト数が要求した数より小さい場合、結果の値は要求したバイト数より小さくなることがあります。また、文字列の末尾に到達した場合は 0 になることがあります。</span><span class="sxs-lookup"><span data-stu-id="463e8-273">The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="463e8-274">`count` パラメーターによって指定された文字数が読み取られるか、文字列の末尾に到達すると、タスクが完了します。</span><span class="sxs-lookup"><span data-stu-id="463e8-274">The task completes after either the number of characters specified by the `count` parameter are read or the end of the string is reached.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="463e8-275">次の例は、文字列の最初の23文字を非同期に読み取る方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="463e8-275">The following example shows how to read the first 23 characters of a string asynchronously.</span></span>  
  
 [!code-csharp[System.IO.StringReader#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringreader/cs/example1.cs#1)]
 [!code-vb[System.IO.StringReader#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringreader/vb/example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="463e8-276"><paramref name="buffer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="463e8-276"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="463e8-277"><paramref name="index" /> または <paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="463e8-277"><paramref name="index" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="463e8-278"><paramref name="index" /> と <paramref name="count" /> の合計が、バッファーの長さよりも大きいです。</span><span class="sxs-lookup"><span data-stu-id="463e8-278">The sum of <paramref name="index" /> and <paramref name="count" /> is larger than the buffer length.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="463e8-279">文字列リーダーは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="463e8-279">The string reader has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="463e8-280">リーダーは、前の読み取り操作によって現在使用されています。</span><span class="sxs-lookup"><span data-stu-id="463e8-280">The reader is currently in use by a previous read operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadBlock">
      <MemberSignature Language="C#" Value="public override int ReadBlock (Span&lt;char&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadBlock(valuetype System.Span`1&lt;char&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.ReadBlock(System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadBlock (buffer As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadBlock(Span&lt;char&gt; buffer);" />
      <MemberSignature Language="F#" Value="override this.ReadBlock : Span&lt;char&gt; -&gt; int" Usage="stringReader.ReadBlock buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="463e8-281">このメソッドから戻ったときは、現在のソースから読み取られた文字が格納されています。</span><span class="sxs-lookup"><span data-stu-id="463e8-281">When this method returns, contains the characters read from the current source.</span></span> <span data-ttu-id="463e8-282">読み取られた合計文字数が 0 の場合、スパンは変更されません。</span><span class="sxs-lookup"><span data-stu-id="463e8-282">If the total number of characters read is zero, the span remains unmodified.</span></span></param>
        <summary><span data-ttu-id="463e8-283">入力文字列の現在位置から開始してすべての文字を読み取り、現在位置を入力文字列の末尾に進めます。</span><span class="sxs-lookup"><span data-stu-id="463e8-283">Reads all the characters from the input string starting at the current position and advances the current position to the end of the input string.</span></span></summary>
        <returns><span data-ttu-id="463e8-284">バッファーに読み取られた合計文字数。</span><span class="sxs-lookup"><span data-stu-id="463e8-284">The total number of characters read into the buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="463e8-285"><xref:System.IO.StringReader.ReadBlock(System.Span{System.Char})> は、内部的に <xref:System.IO.StringReader.Read(System.Span{System.Char})> を直接呼び出します。</span><span class="sxs-lookup"><span data-stu-id="463e8-285"><xref:System.IO.StringReader.ReadBlock(System.Span{System.Char})> internally calls <xref:System.IO.StringReader.Read(System.Span{System.Char})> directly.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="463e8-286">現在の文字列リーダー インスタンスは閉じられます。</span><span class="sxs-lookup"><span data-stu-id="463e8-286">The current string reader instance is closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadBlockAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask&lt;int&gt; ReadBlockAsync (Memory&lt;char&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;int32&gt; ReadBlockAsync(valuetype System.Memory`1&lt;char&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.ReadBlockAsync : Memory&lt;char&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int&gt;" Usage="stringReader.ReadBlockAsync (buffer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Memory&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="463e8-287">このメソッドから戻ったときは、現在のソースから読み取られた文字が格納されています。</span><span class="sxs-lookup"><span data-stu-id="463e8-287">When this method returns, contains the characters read from the current source.</span></span> <span data-ttu-id="463e8-288">読み取られた合計文字数が 0 の場合、スパンは変更されません。</span><span class="sxs-lookup"><span data-stu-id="463e8-288">If the total number of characters read is zero, the span remains unmodified.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="463e8-289">キャンセル要求を監視するためのトークン。</span><span class="sxs-lookup"><span data-stu-id="463e8-289">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="463e8-290">既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</span><span class="sxs-lookup"><span data-stu-id="463e8-290">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="463e8-291">非同期的に、入力文字列の現在位置から開始してすべての文字を読み取り、現在位置を入力文字列の末尾に進めます。</span><span class="sxs-lookup"><span data-stu-id="463e8-291">Asynchronously reads all the characters from the input string starting at the current position and advances the current position to the end of the input string.</span></span></summary>
        <returns><span data-ttu-id="463e8-292">非同期読み取り操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="463e8-292">A task representing the asynchronous read operation.</span></span> <span data-ttu-id="463e8-293"><paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれる文字の合計数が含まれます。</span><span class="sxs-lookup"><span data-stu-id="463e8-293">The value of the <paramref name="TResult" /> parameter contains the total number of characters read into the buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="463e8-294"><xref:System.IO.StringReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)> は、非同期的に <xref:System.IO.StringReader.ReadBlock(System.Span{System.Char})> を呼び出し、<xref:System.IO.StringReader.Read(System.Span{System.Char})> 直接を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="463e8-294"><xref:System.IO.StringReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)> calls <xref:System.IO.StringReader.ReadBlock(System.Span{System.Char})> asynchronously, which in turn calls <xref:System.IO.StringReader.Read(System.Span{System.Char})> directly.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadBlockAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ReadBlockAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadBlockAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadBlockAsync (buffer As Char(), index As Integer, count As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;int&gt; ^ ReadBlockAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadBlockAsync : char[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="stringReader.ReadBlockAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="463e8-295">このメソッドが戻るとき、指定した文字配列の <paramref name="index" /> から (<paramref name="index" /> + <paramref name="count" /> - 1) までの値が、現在のソースから読み取られた文字に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="463e8-295">When this method returns, contains the specified character array with the values between <paramref name="index" /> and (<paramref name="index" /> + <paramref name="count" /> - 1) replaced by the characters read from the current source.</span></span></param>
        <param name="index"><span data-ttu-id="463e8-296">書き込みを開始する <paramref name="buffer" /> 内の位置。</span><span class="sxs-lookup"><span data-stu-id="463e8-296">The position in <paramref name="buffer" /> at which to begin writing.</span></span></param>
        <param name="count"><span data-ttu-id="463e8-297">読み取り対象の最大文字数。</span><span class="sxs-lookup"><span data-stu-id="463e8-297">The maximum number of characters to read.</span></span> <span data-ttu-id="463e8-298">指定された文字数をバッファーに書き込む前に文字列の末尾に到達した場合、メソッドは制御を返します。</span><span class="sxs-lookup"><span data-stu-id="463e8-298">If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.</span></span></param>
        <summary><span data-ttu-id="463e8-299">指定した最大文字数を現在の文字列から非同期的に読み取り、バッファーの指定したインデックス位置にそのデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="463e8-299">Reads a specified maximum number of characters from the current string asynchronously and writes the data to a buffer, beginning at the specified index.</span></span></summary>
        <returns><span data-ttu-id="463e8-300">非同期の読み取り操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="463e8-300">A task that represents the asynchronous read operation.</span></span> <span data-ttu-id="463e8-301"><paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。</span><span class="sxs-lookup"><span data-stu-id="463e8-301">The value of the <paramref name="TResult" /> parameter contains the total number of bytes read into the buffer.</span></span> <span data-ttu-id="463e8-302">現在使用できるバイト数が要求した数より小さい場合、結果の値は要求したバイト数より小さくなることがあります。また、文字列の末尾に到達した場合は 0 になることがあります。</span><span class="sxs-lookup"><span data-stu-id="463e8-302">The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="463e8-303">`count` パラメーターで指定された文字数が読み込まれるか、文字列の末尾に到達するまで、タスクは完了しません。</span><span class="sxs-lookup"><span data-stu-id="463e8-303">The task does not complete until either the number of characters specified by the `count` parameter are read, or the end of the string has been reached.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="463e8-304"><paramref name="buffer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="463e8-304"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="463e8-305"><paramref name="index" /> または <paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="463e8-305"><paramref name="index" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="463e8-306"><paramref name="index" /> と <paramref name="count" /> の合計が、バッファーの長さよりも大きいです。</span><span class="sxs-lookup"><span data-stu-id="463e8-306">The sum of <paramref name="index" /> and <paramref name="count" /> is larger than the buffer length.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="463e8-307">文字列リーダーは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="463e8-307">The string reader has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="463e8-308">リーダーは、前の読み取り操作によって現在使用されています。</span><span class="sxs-lookup"><span data-stu-id="463e8-308">The reader is currently in use by a previous read operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public override string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ReadLine();" />
      <MemberSignature Language="F#" Value="override this.ReadLine : unit -&gt; string" Usage="stringReader.ReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="463e8-309">現在の文字列から 1 行分の文字を読み取り、そのデータを文字列として返します。</span><span class="sxs-lookup"><span data-stu-id="463e8-309">Reads a line of characters from the current string and returns the data as a string.</span></span></summary>
        <returns><span data-ttu-id="463e8-310">現在の文字列の次の行。文字列の末尾に到達した場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="463e8-310">The next line from the current string, or <see langword="null" /> if the end of the string is reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="463e8-311">このメソッドは、<xref:System.IO.TextReader.ReadLine%2A?displayProperty=nameWithType> メソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="463e8-311">This method overrides the <xref:System.IO.TextReader.ReadLine%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="463e8-312">行は、文字のシーケンスの後に改行 ("\n")、復帰 ("\r")、キャリッジリターンの直後に改行文字 ("\r\n")、またはストリームの終端マーカーとして定義されます。</span><span class="sxs-lookup"><span data-stu-id="463e8-312">A line is defined as a sequence of characters followed by a line feed ("\n"), a carriage return ("\r"), a carriage return immediately followed by a line feed ("\r\n"), or the end-of-stream marker.</span></span> <span data-ttu-id="463e8-313">返される文字列には、終端の復帰またはラインフィードは含まれません。</span><span class="sxs-lookup"><span data-stu-id="463e8-313">The string that is returned does not contain the terminating carriage return or line feed.</span></span> <span data-ttu-id="463e8-314">ストリームの終端マーカーに達した場合、戻り値は `null` です。</span><span class="sxs-lookup"><span data-stu-id="463e8-314">The returned value is `null` if the end-of-stream marker has been reached.</span></span> <span data-ttu-id="463e8-315">つまり、最後に読み取られた行とストリームの末尾のマーカーの間に何もない場合、メソッドは `null`を返します。</span><span class="sxs-lookup"><span data-stu-id="463e8-315">That is to say, if there is nothing between the last line read and the end-of-stream marker, the method returns `null`.</span></span>  
  
 <span data-ttu-id="463e8-316">現在のメソッドが <xref:System.OutOfMemoryException>をスローした場合、基になる文字列内のリーダーの位置は、メソッドが読み取ることができる文字数だけ進んでいますが、内部 <xref:System.IO.StringReader.ReadLine%2A> バッファーに既に読み込まれている文字は破棄されます。</span><span class="sxs-lookup"><span data-stu-id="463e8-316">If the current method throws an <xref:System.OutOfMemoryException>, the reader's position in the underlying string is advanced by the number of characters the method was able to read, but the characters already read into the internal <xref:System.IO.StringReader.ReadLine%2A> buffer are discarded.</span></span> <span data-ttu-id="463e8-317">文字列内のリーダーの位置は変更できないため、既に読み取られている文字は回復できないため、<xref:System.IO.StringReader>を再初期化することによってのみアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="463e8-317">Because the position of the reader in the string cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.StringReader>.</span></span> <span data-ttu-id="463e8-318">このような状況を回避するには、<xref:System.IO.StringReader.Read%2A> メソッドを使用し、事前割り当て済みのバッファーに読み取り文字を格納します。</span><span class="sxs-lookup"><span data-stu-id="463e8-318">To avoid such a situation, use the <xref:System.IO.StringReader.Read%2A> method and store the read characters in a preallocated buffer.</span></span>  
  
 <span data-ttu-id="463e8-319">次の表に、その他の一般的な i/o タスクと関連する i/o タスクの例を示します。</span><span class="sxs-lookup"><span data-stu-id="463e8-319">The following table lists examples of other typical or related I/O tasks.</span></span>  
  
|<span data-ttu-id="463e8-320">目的</span><span class="sxs-lookup"><span data-stu-id="463e8-320">To do this...</span></span>|<span data-ttu-id="463e8-321">参照項目</span><span class="sxs-lookup"><span data-stu-id="463e8-321">See the example in this topic...</span></span>|  
|-------------------|--------------------------------------|  
|<span data-ttu-id="463e8-322">テキスト ファイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="463e8-322">Create a text file.</span></span>|[<span data-ttu-id="463e8-323">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-323">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="463e8-324">テキストファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="463e8-324">Write to a text file.</span></span>|[<span data-ttu-id="463e8-325">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-325">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="463e8-326">テキストファイルからの読み取り。</span><span class="sxs-lookup"><span data-stu-id="463e8-326">Read from a text file.</span></span>|[<span data-ttu-id="463e8-327">方法: ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="463e8-327">How to: Read Text from a File</span></span>](~/docs/standard/io/how-to-read-text-from-a-file.md)|  
|<span data-ttu-id="463e8-328">ファイルにテキストを追加します。</span><span class="sxs-lookup"><span data-stu-id="463e8-328">Append text to a file.</span></span>|[<span data-ttu-id="463e8-329">方法: ログ ファイルを開いて情報を追加する</span><span class="sxs-lookup"><span data-stu-id="463e8-329">How to: Open and Append to a Log File</span></span>](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=nameWithType><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-330">ファイルのサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="463e8-330">Get the size of a file.</span></span>|<xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-331">ファイルの属性を取得します。</span><span class="sxs-lookup"><span data-stu-id="463e8-331">Get the attributes of a file.</span></span>|<xref:System.IO.File.GetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-332">ファイルの属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="463e8-332">Set the attributes of a file.</span></span>|<xref:System.IO.File.SetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-333">ファイルが存在するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="463e8-333">Determine if a file exists.</span></span>|<xref:System.IO.File.Exists%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-334">バイナリファイルから読み取ります。</span><span class="sxs-lookup"><span data-stu-id="463e8-334">Read from a binary file.</span></span>|[<span data-ttu-id="463e8-335">方法: 新しく作成されたデータ ファイルに対して読み書きする</span><span class="sxs-lookup"><span data-stu-id="463e8-335">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
|<span data-ttu-id="463e8-336">バイナリファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="463e8-336">Write to a binary file.</span></span>|[<span data-ttu-id="463e8-337">方法: 新しく作成されたデータ ファイルに対して読み書きする</span><span class="sxs-lookup"><span data-stu-id="463e8-337">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
  
   
  
## Examples  
 <span data-ttu-id="463e8-338">このコード例は、<xref:System.IO.StringReader> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="463e8-338">This code example is part of a larger example provided for the <xref:System.IO.StringReader> class.</span></span>  
  
 [!code-cpp[System.IO.StringReaderWriter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CPP/stringrw.cpp#2)]
 [!code-csharp[System.IO.StringReaderWriter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CS/stringrw.cs#2)]
 [!code-vb[System.IO.StringReaderWriter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringReaderWriter/VB/stringrw.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="463e8-339">現在のリーダーが閉じています。</span><span class="sxs-lookup"><span data-stu-id="463e8-339">The current reader is closed.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="463e8-340">返却された文字列にバッファーを割り当てるには、メモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="463e8-340">There is insufficient memory to allocate a buffer for the returned string.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="463e8-341">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="463e8-341">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="463e8-342">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="463e8-342">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="463e8-343">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-343">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadLineAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;string&gt; ReadLineAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadLineAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.ReadLineAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadLineAsync () As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::String ^&gt; ^ ReadLineAsync();" />
      <MemberSignature Language="F#" Value="override this.ReadLineAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="stringReader.ReadLineAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="463e8-344">現在の文字列から非同期的に 1 行分の文字を読み取り、そのデータを文字列として返します。</span><span class="sxs-lookup"><span data-stu-id="463e8-344">Reads a line of characters asynchronously from the current string and returns the data as a string.</span></span></summary>
        <returns><span data-ttu-id="463e8-345">非同期の読み取り操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="463e8-345">A task that represents the asynchronous read operation.</span></span> <span data-ttu-id="463e8-346"><paramref name="TResult" /> パラメーターの値には、文字列リーダーの次の行が含まれます。または、すべての文字が読み取られた場合は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="463e8-346">The value of the <paramref name="TResult" /> parameter contains the next line from the string reader, or is <see langword="null" /> if all the characters have been read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="463e8-347">次の例は、一度に1つの行を文字列から非同期に読み取る方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="463e8-347">The following example shows how to read one line at a time from a string asynchronously.</span></span>  
  
 [!code-csharp[System.IO.StringReader#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringreader/cs/example3.cs#3)]
 [!code-vb[System.IO.StringReader#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringreader/vb/example3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="463e8-348">次の行に含まれる文字数が <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="463e8-348">The number of characters in the next line is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="463e8-349">文字列リーダーは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="463e8-349">The string reader has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="463e8-350">リーダーは、前の読み取り操作によって現在使用されています。</span><span class="sxs-lookup"><span data-stu-id="463e8-350">The reader is currently in use by a previous read operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public override string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadToEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ReadToEnd();" />
      <MemberSignature Language="F#" Value="override this.ReadToEnd : unit -&gt; string" Usage="stringReader.ReadToEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="463e8-351">現在位置から文字列の末尾まですべての文字を読み取り、1 つの文字列として返します。</span><span class="sxs-lookup"><span data-stu-id="463e8-351">Reads all characters from the current position to the end of the string and returns them as a single string.</span></span></summary>
        <returns><span data-ttu-id="463e8-352">基になる文字列の現在位置から末尾までの内容。</span><span class="sxs-lookup"><span data-stu-id="463e8-352">The content from the current position to the end of the underlying string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="463e8-353">このメソッドは、<xref:System.IO.TextReader.ReadToEnd%2A?displayProperty=nameWithType> メソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="463e8-353">This method overrides the <xref:System.IO.TextReader.ReadToEnd%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="463e8-354">現在のメソッドが <xref:System.OutOfMemoryException>をスローした場合、基になる文字列内のリーダーの位置は、メソッドが読み取ることができる文字数だけ進んでいますが、内部 <xref:System.IO.StringReader.ReadToEnd%2A> バッファーに既に読み込まれている文字は破棄されます。</span><span class="sxs-lookup"><span data-stu-id="463e8-354">If the current method throws an <xref:System.OutOfMemoryException>, the reader's position in the underlying string is advanced by the number of characters the method was able to read, but the characters already read into the internal <xref:System.IO.StringReader.ReadToEnd%2A> buffer are discarded.</span></span> <span data-ttu-id="463e8-355">文字列内のリーダーの位置は変更できないため、既に読み取られている文字は回復できないため、<xref:System.IO.StringReader>を再初期化することによってのみアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="463e8-355">Because the position of the reader in the string cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.StringReader>.</span></span> <span data-ttu-id="463e8-356">このような状況を回避するには、<xref:System.IO.StringReader.Read%2A> メソッドを使用し、事前割り当て済みのバッファーに読み取り文字を格納します。</span><span class="sxs-lookup"><span data-stu-id="463e8-356">To avoid such a situation, use the <xref:System.IO.StringReader.Read%2A> method and store the read characters in a preallocated buffer.</span></span>  
  
 <span data-ttu-id="463e8-357">次の表に、その他の一般的な i/o タスクと関連する i/o タスクの例を示します。</span><span class="sxs-lookup"><span data-stu-id="463e8-357">The following table lists examples of other typical or related I/O tasks.</span></span>  
  
|<span data-ttu-id="463e8-358">目的</span><span class="sxs-lookup"><span data-stu-id="463e8-358">To do this...</span></span>|<span data-ttu-id="463e8-359">参照項目</span><span class="sxs-lookup"><span data-stu-id="463e8-359">See the example in this topic...</span></span>|  
|-------------------|--------------------------------------|  
|<span data-ttu-id="463e8-360">テキスト ファイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="463e8-360">Create a text file.</span></span>|[<span data-ttu-id="463e8-361">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-361">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="463e8-362">テキストファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="463e8-362">Write to a text file.</span></span>|[<span data-ttu-id="463e8-363">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-363">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="463e8-364">テキストファイルからの読み取り。</span><span class="sxs-lookup"><span data-stu-id="463e8-364">Read from a text file.</span></span>|[<span data-ttu-id="463e8-365">方法: ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="463e8-365">How to: Read Text from a File</span></span>](~/docs/standard/io/how-to-read-text-from-a-file.md)|  
|<span data-ttu-id="463e8-366">ファイルにテキストを追加します。</span><span class="sxs-lookup"><span data-stu-id="463e8-366">Append text to a file.</span></span>|[<span data-ttu-id="463e8-367">方法: ログ ファイルを開いて情報を追加する</span><span class="sxs-lookup"><span data-stu-id="463e8-367">How to: Open and Append to a Log File</span></span>](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=nameWithType><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-368">ファイルのサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="463e8-368">Get the size of a file.</span></span>|<xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-369">ファイルの属性を取得します。</span><span class="sxs-lookup"><span data-stu-id="463e8-369">Get the attributes of a file.</span></span>|<xref:System.IO.File.GetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-370">ファイルの属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="463e8-370">Set the attributes of a file.</span></span>|<xref:System.IO.File.SetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-371">ファイルが存在するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="463e8-371">Determine if a file exists.</span></span>|<xref:System.IO.File.Exists%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="463e8-372">バイナリファイルから読み取ります。</span><span class="sxs-lookup"><span data-stu-id="463e8-372">Read from a binary file.</span></span>|[<span data-ttu-id="463e8-373">方法: 新しく作成されたデータ ファイルに対して読み書きする</span><span class="sxs-lookup"><span data-stu-id="463e8-373">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
|<span data-ttu-id="463e8-374">バイナリファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="463e8-374">Write to a binary file.</span></span>|[<span data-ttu-id="463e8-375">方法: 新しく作成されたデータ ファイルに対して読み書きする</span><span class="sxs-lookup"><span data-stu-id="463e8-375">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
  
   
  
## Examples  
 <span data-ttu-id="463e8-376">このコード例は、<xref:System.IO.TextReader> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="463e8-376">This code example is part of a larger example provided for the <xref:System.IO.TextReader> class.</span></span>  
  
 [!code-cpp[System.IO.TextReaderWriter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.TextReaderWriter/CPP/textrw.cpp#5)]
 [!code-csharp[System.IO.TextReaderWriter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.TextReaderWriter/CS/textrw.cs#5)]
 [!code-vb[System.IO.TextReaderWriter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.TextReaderWriter/VB/textrw.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="463e8-377">返却された文字列にバッファーを割り当てるには、メモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="463e8-377">There is insufficient memory to allocate a buffer for the returned string.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="463e8-378">現在のリーダーが閉じています。</span><span class="sxs-lookup"><span data-stu-id="463e8-378">The current reader is closed.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="463e8-379">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="463e8-379">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="463e8-380">方法 : ファイルからテキストを読み取る</span><span class="sxs-lookup"><span data-stu-id="463e8-380">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="463e8-381">方法 : ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="463e8-381">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadToEndAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;string&gt; ReadToEndAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadToEndAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.ReadToEndAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadToEndAsync () As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::String ^&gt; ^ ReadToEndAsync();" />
      <MemberSignature Language="F#" Value="override this.ReadToEndAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="stringReader.ReadToEndAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="463e8-382">現在位置から文字列の末尾まですべての文字を非同期的に読み取り、1 つの文字列として返します。</span><span class="sxs-lookup"><span data-stu-id="463e8-382">Reads all characters from the current position to the end of the string asynchronously and returns them as a single string.</span></span></summary>
        <returns><span data-ttu-id="463e8-383">非同期の読み取り操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="463e8-383">A task that represents the asynchronous read operation.</span></span> <span data-ttu-id="463e8-384"><paramref name="TResult" /> パラメーターの値には、現在位置から文字列の末尾までの文字から成る文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="463e8-384">The value of the <paramref name="TResult" /> parameter contains a string with the characters from the current position to the end of the string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="463e8-385">次の例は、文字列全体を非同期に読み取る方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="463e8-385">The following example shows how to read an entire string asynchronously.</span></span>  
  
 [!code-csharp[System.IO.StringReader#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringreader/cs/example2.cs#2)]
 [!code-vb[System.IO.StringReader#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringreader/vb/example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="463e8-386">文字数が <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="463e8-386">The number of characters is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="463e8-387">文字列リーダーは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="463e8-387">The string reader has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="463e8-388">リーダーは、前の読み取り操作によって現在使用されています。</span><span class="sxs-lookup"><span data-stu-id="463e8-388">The reader is currently in use by a previous read operation.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
