<Type Name="Rune" FullName="System.Text.Rune">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ff9c267452a86e0b4821e842a90dedf5d05b6760" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82303972" /></Metadata><TypeSignature Language="C#" Value="public struct Rune : IComparable&lt;System.Text.Rune&gt;, IEquatable&lt;System.Text.Rune&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Rune extends System.ValueType implements class System.IComparable`1&lt;valuetype System.Text.Rune&gt;, class System.IEquatable`1&lt;valuetype System.Text.Rune&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Text.Rune" />
  <TypeSignature Language="VB.NET" Value="Public Structure Rune&#xA;Implements IComparable(Of Rune), IEquatable(Of Rune)" />
  <TypeSignature Language="C++ CLI" Value="public value class Rune : IComparable&lt;System::Text::Rune&gt;, IEquatable&lt;System::Text::Rune&gt;" />
  <TypeSignature Language="F#" Value="type Rune = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Text.Rune&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Text.Rune&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7b217-101">Unicode スカラー値 ([ U+0000..U+D7FF ] (最初と最後の要素を含む) または [ U+E000..U+10FFFF ] (最初と最後の要素を含む)) を表します。</span><span class="sxs-lookup"><span data-stu-id="7b217-101">Represents a Unicode scalar value ([ U+0000..U+D7FF ], inclusive; or [ U+E000..U+10FFFF ], inclusive).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-102"><xref:System.Text.Rune> インスタンスは、Unicode スカラー値を表します。これは、サロゲート範囲を除く任意のコードポイント (U + D800..U + DFFF)。</span><span class="sxs-lookup"><span data-stu-id="7b217-102">A <xref:System.Text.Rune> instance represents a Unicode scalar value, which means any code point excluding the surrogate range (U+D800..U+DFFF).</span></span> <span data-ttu-id="7b217-103">型のコンストラクターと変換演算子によって入力が検証されるため、基になる <xref:System.Text.Rune> インスタンスが整形式であると仮定して、コンシューマーは Api を呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="7b217-103">The type's constructors and conversion operators validate the input, so consumers can call the APIs assuming that the underlying <xref:System.Text.Rune> instance is well formed.</span></span>

<span data-ttu-id="7b217-104">Unicode スカラー値、コードポイント、サロゲート範囲、および適切な形式の用語について詳しく理解していない場合は、「 [.net での文字エンコードの概要](/dotnet/standard/base-types/character-encoding-introduction)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-104">If you aren't familiar with the terms Unicode scalar value, code point, surrogate range, and well-formed, see [Introduction to character encoding in .NET](/dotnet/standard/base-types/character-encoding-introduction).</span></span>

<span data-ttu-id="7b217-105">次のセクションでは、について説明します。</span><span class="sxs-lookup"><span data-stu-id="7b217-105">The following sections explain:</span></span>

* [<span data-ttu-id="7b217-106">ルーン型を使用する場合</span><span class="sxs-lookup"><span data-stu-id="7b217-106">When to use the Rune type</span></span>](#when-to-use-the-rune-type)
* [<span data-ttu-id="7b217-107">ルーン型を使用しない場合</span><span class="sxs-lookup"><span data-stu-id="7b217-107">When not to use the Rune type</span></span>](#when-not-to-use-rune)
* [<span data-ttu-id="7b217-108">ルーンをインスタンス化する方法</span><span class="sxs-lookup"><span data-stu-id="7b217-108">How to instantiate a Rune</span></span>](#how-to-instantiate-a-rune)
* [<span data-ttu-id="7b217-109">ルーンインスタンスのプロパティを照会する方法</span><span class="sxs-lookup"><span data-stu-id="7b217-109">How to query properties of a Rune instance</span></span>](#query-properties-of-a-rune)
* [<span data-ttu-id="7b217-110">`Rune` を UTF-8 または UTF-16 に変換します。</span><span class="sxs-lookup"><span data-stu-id="7b217-110">Convert a `Rune` to UTF-8 or UTF-16</span></span>](#convert-a-rune-to-utf-8-or-utf-16)
* [<span data-ttu-id="7b217-111">.NET とその他の言語のルーン</span><span class="sxs-lookup"><span data-stu-id="7b217-111">Rune in .NET vs. other languages</span></span>](#rune-in-net-vs-other-languages)

### <a name="when-to-use-the-rune-type"></a><span data-ttu-id="7b217-112">ルーン型を使用する場合</span><span class="sxs-lookup"><span data-stu-id="7b217-112">When to use the Rune type</span></span>

<span data-ttu-id="7b217-113">コードを使用する場合は、`Rune` の種類を使用することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-113">Consider using the `Rune` type if your code:</span></span>

* <span data-ttu-id="7b217-114">Unicode スカラー値を必要とする Api を呼び出します</span><span class="sxs-lookup"><span data-stu-id="7b217-114">Calls APIs that require Unicode scalar values</span></span>
* <span data-ttu-id="7b217-115">サロゲートペアを明示的に処理します</span><span class="sxs-lookup"><span data-stu-id="7b217-115">Explicitly handles surrogate pairs</span></span>

#### <a name="apis-that-require-unicode-scalar-values"></a><span data-ttu-id="7b217-116">Unicode スカラー値を必要とする Api</span><span class="sxs-lookup"><span data-stu-id="7b217-116">APIs that require Unicode scalar values</span></span>

<span data-ttu-id="7b217-117">コードが `string` または `ReadOnlySpan<char>`内の `char` インスタンスを反復処理する場合、一部の `char` メソッドは、サロゲート範囲内の `char` インスタンスで正しく機能しません。</span><span class="sxs-lookup"><span data-stu-id="7b217-117">If your code iterates through the `char` instances in a `string` or a `ReadOnlySpan<char>`, some of the `char` methods won't work correctly on `char` instances that are in the surrogate range.</span></span> <span data-ttu-id="7b217-118">たとえば、次の Api では、正しく機能するために `char` スカラー値が必要です。</span><span class="sxs-lookup"><span data-stu-id="7b217-118">For example, the following APIs require a scalar value `char` to work correctly:</span></span>

* <xref:System.Char.GetNumericValue%2A?displayProperty=nameWithType>
* <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>
* <xref:System.Char.IsDigit%2A?displayProperty=nameWithType>
* <xref:System.Char.IsLetter%2A?displayProperty=nameWithType>
* <xref:System.Char.IsLetterOrDigit%2A?displayProperty=nameWithType>
* <xref:System.Char.IsLower%2A?displayProperty=nameWithType>
* <xref:System.Char.IsNumber%2A?displayProperty=nameWithType>
* <xref:System.Char.IsPunctuation%2A?displayProperty=nameWithType>
* <xref:System.Char.IsSymbol%2A?displayProperty=nameWithType>
* <xref:System.Char.IsUpper%2A?displayProperty=nameWithType>

<span data-ttu-id="7b217-119">次の例は、`char` インスタンスがサロゲートコードポイントである場合に正しく機能しないコードを示しています。</span><span class="sxs-lookup"><span data-stu-id="7b217-119">The following example shows code that won't work correctly if any of the `char` instances are surrogate code points:</span></span>

:::code language="csharp" source="~/snippets/System.Text/Rune/csharp/CountLettersInString.cs" id="SnippetBadExample":::

<span data-ttu-id="7b217-120">`ReadOnlySpan<char>`で動作する同等のコードを次に示します。</span><span class="sxs-lookup"><span data-stu-id="7b217-120">Here's equivalent code that works with a `ReadOnlySpan<char>`:</span></span>

:::code language="csharp" source="~/snippets/System.Text/Rune/csharp/CountLettersInSpan.cs" id="SnippetBadExample":::

<span data-ttu-id="7b217-121">上記のコードは、英語などの一部の言語で正しく動作します。</span><span class="sxs-lookup"><span data-stu-id="7b217-121">The preceding code works correctly with some languages such as English:</span></span>

```csharp
CountLettersInString("Hello")
// Returns 5
```

<span data-ttu-id="7b217-122">ただし、次のような基本的な多言語プレーン以外の言語では正しく機能しません。</span><span class="sxs-lookup"><span data-stu-id="7b217-122">But it won't work correctly for languages outside the Basic Multilingual Plane, such as Osage:</span></span>

```csharp
CountLettersInString("𐓏𐓘𐓻𐓘𐓻𐓟 𐒻𐓟")
// Returns 0
```

<span data-ttu-id="7b217-123">Osage テキストに対してこのメソッドが誤った結果を返す理由として、Osage 文字の `char` インスタンスがサロゲートコードポイントであることが挙げられます。</span><span class="sxs-lookup"><span data-stu-id="7b217-123">The reason this method returns incorrect results for Osage text is that the `char` instances for Osage letters are surrogate code points.</span></span> <span data-ttu-id="7b217-124">1つのサロゲートコードポイントには、それが文字かどうかを判断するのに十分な情報がありません。</span><span class="sxs-lookup"><span data-stu-id="7b217-124">No single surrogate code point has enough information to determine if it's a letter.</span></span>

<span data-ttu-id="7b217-125">このコードを `char`ではなく `Rune` を使用するように変更した場合、このメソッドは基本的な多言語プレーン以外のコードポイントと正常に動作します。</span><span class="sxs-lookup"><span data-stu-id="7b217-125">If you change this code to use `Rune` instead of `char`, the method works correctly with code points outside the Basic Multilingual Plane:</span></span>

:::code language="csharp" source="~/snippets/System.Text/Rune/csharp/CountLettersInString.cs" id="SnippetGoodExample":::

<span data-ttu-id="7b217-126">`ReadOnlySpan<char>`で動作する同等のコードを次に示します。</span><span class="sxs-lookup"><span data-stu-id="7b217-126">Here's equivalent code that works with a `ReadOnlySpan<char>`:</span></span>

:::code language="csharp" source="~/snippets/System.Text/Rune/csharp/CountLettersInSpan.cs" id="SnippetGoodExample":::

<span data-ttu-id="7b217-127">上記のコードでは、Osage 文字が正しくカウントされます。</span><span class="sxs-lookup"><span data-stu-id="7b217-127">The preceding code counts Osage letters correctly:</span></span>

```csharp
CountLettersInString("𐓏𐓘𐓻𐓘𐓻𐓟 𐒻𐓟")
// Returns 8
```

#### <a name="code-that-explicitly-handles-surrogate-pairs"></a><span data-ttu-id="7b217-128">サロゲートペアを明示的に処理するコード</span><span class="sxs-lookup"><span data-stu-id="7b217-128">Code that explicitly handles surrogate pairs</span></span>

<span data-ttu-id="7b217-129">コードがサロゲートコードポイントで明示的に操作する Api (次のメソッドなど) を呼び出す場合は、`Rune` の型を使用することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-129">Consider using the `Rune` type if your code calls APIs that explicitly operate on surrogate code points, such as the following methods:</span></span>

* <xref:System.Char.IsSurrogate%2A?displayProperty=nameWithType>
* <xref:System.Char.IsSurrogatePair%2A?displayProperty=nameWithType>
* <xref:System.Char.IsHighSurrogate%2A?displayProperty=nameWithType>
* <xref:System.Char.IsLowSurrogate%2A?displayProperty=nameWithType>
* <xref:System.Char.ConvertFromUtf32%2A?displayProperty=nameWithType>
* <xref:System.Char.ConvertToUtf32%2A?displayProperty=nameWithType>

<span data-ttu-id="7b217-130">たとえば、次のメソッドには、サロゲート `char` のペアを処理するための特別なロジックがあります。</span><span class="sxs-lookup"><span data-stu-id="7b217-130">For example, the following method has special logic to deal with surrogate `char` pairs:</span></span>

:::code language="csharp" source="~/snippets/System.Text/Rune/csharp/WorkWithSurrogates.cs" id="SnippetUseChar":::

<span data-ttu-id="7b217-131">このようなコードは、次の例のように `Rune`を使用すると、より簡単になります。</span><span class="sxs-lookup"><span data-stu-id="7b217-131">Such code is simpler if it uses `Rune`, as in the following example:</span></span>

:::code language="csharp" source="~/snippets/System.Text/Rune/csharp/WorkWithSurrogates.cs" id="SnippetUseRune":::

### <a name="when-not-to-use-rune"></a><span data-ttu-id="7b217-132">`Rune` を使用しない場合</span><span class="sxs-lookup"><span data-stu-id="7b217-132">When not to use `Rune`</span></span>

<span data-ttu-id="7b217-133">コードの場合、`Rune` の種類を使用する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="7b217-133">You don't need to use the `Rune` type if your code:</span></span>

* <span data-ttu-id="7b217-134">完全に一致する `char` を検索します</span><span class="sxs-lookup"><span data-stu-id="7b217-134">Looks for exact `char` matches</span></span>
* <span data-ttu-id="7b217-135">既知の char 値に文字列を分割します</span><span class="sxs-lookup"><span data-stu-id="7b217-135">Splits a string on a known char value</span></span>

<span data-ttu-id="7b217-136">`Rune` の型を使用すると、コードが次のような場合に正しくない結果を返すことがあります。</span><span class="sxs-lookup"><span data-stu-id="7b217-136">Using the `Rune` type may return incorrect results if your code:</span></span>

* <span data-ttu-id="7b217-137">`string` 内の表示文字数をカウントします</span><span class="sxs-lookup"><span data-stu-id="7b217-137">Counts the number of display characters in a `string`</span></span>

#### <a name="look-for-exact-char-matches"></a><span data-ttu-id="7b217-138">完全に一致する `char` を検索する</span><span class="sxs-lookup"><span data-stu-id="7b217-138">Look for exact `char` matches</span></span>

<span data-ttu-id="7b217-139">次のコードでは、特定の文字を検索する `string` を反復処理し、最初に一致した文字列のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-139">The following code iterates through a `string` looking for specific characters, returning the index of the first match.</span></span> <span data-ttu-id="7b217-140">コードが1つの `char`で表される文字を検索するため、`Rune`を使用するようにこのコードを変更する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="7b217-140">There's no need to change this code to use `Rune`, as the code is looking for characters that are represented by a single `char`.</span></span>

:::code language="csharp" source="~/snippets/System.Text/Rune/csharp/FindFirstLetter.cs" id="SnippetExample":::

#### <a name="split-a-string-on-a-known-char"></a><span data-ttu-id="7b217-141">既知の `char` で文字列を分割する</span><span class="sxs-lookup"><span data-stu-id="7b217-141">Split a string on a known `char`</span></span>

<span data-ttu-id="7b217-142">次の例のように、`string.Split` を呼び出し、`' '` (スペース) や `','` (コンマ) などの区切り記号を使用するのが一般的です。</span><span class="sxs-lookup"><span data-stu-id="7b217-142">It's common to call `string.Split` and use delimiters such as `' '` (space) or `','` (comma), as in the following example:</span></span>

:::code language="csharp" source="~/snippets/System.Text/Rune/csharp/SplitStringOnChar.cs" id="SnippetExample":::

<span data-ttu-id="7b217-143">このコードでは1つの `char`で表される文字を検索するため、ここでは `Rune` を使用する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="7b217-143">There is no need to use `Rune` here, because the code is looking for characters that are represented by a single `char`.</span></span>

#### <a name="count-the-number-of-display-characters-in-a-string"></a><span data-ttu-id="7b217-144">`string` 内の表示文字数をカウントする</span><span class="sxs-lookup"><span data-stu-id="7b217-144">Count the number of display characters in a `string`</span></span>

<span data-ttu-id="7b217-145">文字列内の `Rune` インスタンスの数が、文字列を表示するときに表示されるユーザー perceivable の文字数と一致しない場合があります。</span><span class="sxs-lookup"><span data-stu-id="7b217-145">The number of `Rune` instances in a string might not match the number of user-perceivable characters shown when displaying the string.</span></span>

<span data-ttu-id="7b217-146">`Rune` のインスタンスは Unicode スカラー値を表しているため、 [unicode テキストセグメントのガイドライン](https://www.unicode.org/reports/tr29/)に従うコンポーネントでは、`Rune` を表示文字をカウントするための構成要素として使用できます。</span><span class="sxs-lookup"><span data-stu-id="7b217-146">Since `Rune` instances represent Unicode scalar values, components that follow the [Unicode text segmentation guidelines](https://www.unicode.org/reports/tr29/) can use `Rune` as a building block for counting display characters.</span></span>

<span data-ttu-id="7b217-147"><xref:System.Globalization.StringInfo> 型は、表示文字をカウントするために使用できますが、.NET 5 以外の .NET の実装では、すべてのシナリオで適切にカウントされません。</span><span class="sxs-lookup"><span data-stu-id="7b217-147">The <xref:System.Globalization.StringInfo> type can be used to count display characters, but in implementations of .NET other than .NET 5 it doesn't count correctly in all scenarios.</span></span>

<span data-ttu-id="7b217-148">詳細については、「[書記素クラスター](/dotnet/standard/base-types/character-encoding-introduction#grapheme-clusters)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-148">For more information, see [Grapheme clusters](/dotnet/standard/base-types/character-encoding-introduction#grapheme-clusters).</span></span>

### <a name="how-to-instantiate-a-rune"></a><span data-ttu-id="7b217-149">`Rune` をインスタンス化する方法</span><span class="sxs-lookup"><span data-stu-id="7b217-149">How to instantiate a `Rune`</span></span>

<span data-ttu-id="7b217-150">`Rune` インスタンスを取得するには、いくつかの方法があります。</span><span class="sxs-lookup"><span data-stu-id="7b217-150">There are several ways to get a `Rune` instance.</span></span> <span data-ttu-id="7b217-151">コンストラクターを使用して、から直接 `Rune` を作成できます。</span><span class="sxs-lookup"><span data-stu-id="7b217-151">You can use a constructor to create a `Rune` directly from:</span></span>

* <span data-ttu-id="7b217-152">コードポイント。</span><span class="sxs-lookup"><span data-stu-id="7b217-152">A code point.</span></span>

  :::code language="csharp" source="~/snippets/System.Text/Rune/csharp/InstantiateRunes.cs" id="SnippetCodePoint":::

* <span data-ttu-id="7b217-153">1つの `char`。</span><span class="sxs-lookup"><span data-stu-id="7b217-153">A single `char`.</span></span>

  :::code language="csharp" source="~/snippets/System.Text/Rune/csharp/InstantiateRunes.cs" id="SnippetChar":::

* <span data-ttu-id="7b217-154">サロゲート `char` ペア。</span><span class="sxs-lookup"><span data-stu-id="7b217-154">A surrogate `char` pair.</span></span>

  :::code language="csharp" source="~/snippets/System.Text/Rune/csharp/InstantiateRunes.cs" id="SnippetSurrogate":::

<span data-ttu-id="7b217-155">入力が有効な Unicode スカラー値を表していない場合、すべてのコンストラクターは `ArgumentException` をスローします。</span><span class="sxs-lookup"><span data-stu-id="7b217-155">All of the constructors throw an `ArgumentException` if the input doesn't represent a valid Unicode scalar value.</span></span>

<span data-ttu-id="7b217-156">エラー発生時に例外がスローされないようにする呼び出し元には、<xref:System.Text.Rune.TryCreate%2A?displayProperty=nameWithType> メソッドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="7b217-156">There are <xref:System.Text.Rune.TryCreate%2A?displayProperty=nameWithType> methods available for callers who don't want exceptions to be thrown on failure.</span></span>

<span data-ttu-id="7b217-157">`Rune` インスタンスは、既存の入力シーケンスから読み取ることもできます。</span><span class="sxs-lookup"><span data-stu-id="7b217-157">`Rune` instances can also be read from existing input sequences.</span></span> <span data-ttu-id="7b217-158">たとえば、UTF-16 データを表す `ReadOnlySpan<char>` を指定した場合、<xref:System.Text.Rune.DecodeFromUtf16%2A?displayProperty=nameWithType> メソッドは、入力スパンの先頭にある最初の `Rune` インスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-158">For instance, given a `ReadOnlySpan<char>` that represents UTF-16 data, the <xref:System.Text.Rune.DecodeFromUtf16%2A?displayProperty=nameWithType> method returns the first `Rune` instance at the beginning of the input span.</span></span> <span data-ttu-id="7b217-159"><xref:System.Text.Rune.DecodeFromUtf8%2A?displayProperty=nameWithType> メソッドは同様に動作し、UTF-8 データを表す `ReadOnlySpan<byte>` パラメーターを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="7b217-159">The <xref:System.Text.Rune.DecodeFromUtf8%2A?displayProperty=nameWithType> method operates similarly, accepting a `ReadOnlySpan<byte>` parameter that represents UTF-8 data.</span></span> <span data-ttu-id="7b217-160">スパンの先頭ではなく、スパンの末尾から読み取る同等のメソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="7b217-160">There are equivalent methods to read from the end of the span instead of the beginning of the span.</span></span>

### <a name="query-properties-of-a-rune"></a><span data-ttu-id="7b217-161">`Rune` のクエリプロパティ</span><span class="sxs-lookup"><span data-stu-id="7b217-161">Query properties of a `Rune`</span></span>

<span data-ttu-id="7b217-162">`Rune` インスタンスの整数コードポイント値を取得するには、<xref:System.Text.Rune.Value?displayProperty=nameWithType> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="7b217-162">To get the integer code point value of a `Rune` instance, use the <xref:System.Text.Rune.Value?displayProperty=nameWithType> property.</span></span>

:::code language="csharp" source="~/snippets/System.Text/Rune/csharp/InstantiateRunes.cs" id="SnippetValue":::

<span data-ttu-id="7b217-163">`char` の種類で使用できる静的 Api の多くは、`Rune` の種類でも使用できます。</span><span class="sxs-lookup"><span data-stu-id="7b217-163">Many of the static APIs available on the `char` type are also available on the `Rune` type.</span></span> <span data-ttu-id="7b217-164">たとえば、<xref:System.Text.Rune.IsWhiteSpace%2A?displayProperty=nameWithType> と <xref:System.Text.Rune.GetUnicodeCategory%2A?displayProperty=nameWithType> は <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> メソッドと <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> メソッドに相当します。</span><span class="sxs-lookup"><span data-stu-id="7b217-164">For instance, <xref:System.Text.Rune.IsWhiteSpace%2A?displayProperty=nameWithType> and <xref:System.Text.Rune.GetUnicodeCategory%2A?displayProperty=nameWithType> are equivalents to <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> and <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="7b217-165">`Rune` メソッドは、サロゲートペアを正しく処理します。</span><span class="sxs-lookup"><span data-stu-id="7b217-165">The `Rune` methods correctly handle surrogate pairs.</span></span>

<span data-ttu-id="7b217-166">次のコード例では、入力として `ReadOnlySpan<char>` を受け取り、文字または数字ではない `Rune` ごとにスパンの先頭と末尾の両方からトリムしています。</span><span class="sxs-lookup"><span data-stu-id="7b217-166">The following example code takes a `ReadOnlySpan<char>` as input and trims from both the start and the end of the span every `Rune` that isn't a letter or a digit.</span></span>

:::code language="csharp" source="~/snippets/System.Text/Rune/csharp/TrimNonLettersAndNonDigits.cs" id="SnippetExample":::

<span data-ttu-id="7b217-167">`char` と `Rune`には API の違いがいくつかあります。</span><span class="sxs-lookup"><span data-stu-id="7b217-167">There are some API differences between `char` and `Rune`.</span></span> <span data-ttu-id="7b217-168">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="7b217-168">For example:</span></span>

* <span data-ttu-id="7b217-169">定義によって `Rune` インスタンスをサロゲートコードポイントにすることはできないため、<xref:System.Char.IsSurrogate(System.Char)?displayProperty=nameWithType>に相当する `Rune` はありません。</span><span class="sxs-lookup"><span data-stu-id="7b217-169">There is no `Rune` equivalent  to <xref:System.Char.IsSurrogate(System.Char)?displayProperty=nameWithType>, since `Rune` instances by definition can never be surrogate code points.</span></span>
* <span data-ttu-id="7b217-170"><xref:System.Text.Rune.GetUnicodeCategory%2A?displayProperty=nameWithType> は、必ずしも <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>と同じ結果を返しません。</span><span class="sxs-lookup"><span data-stu-id="7b217-170">The <xref:System.Text.Rune.GetUnicodeCategory%2A?displayProperty=nameWithType> doesn't always return the same result as <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7b217-171"><xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>と同じ値が返されます。</span><span class="sxs-lookup"><span data-stu-id="7b217-171">It does return the same value as <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7b217-172">詳細については、<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>の**解説**を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-172">For more information, see the **Remarks** on <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>.</span></span>

### <a name="convert-a-rune-to-utf-8-or-utf-16"></a><span data-ttu-id="7b217-173">`Rune` を UTF-8 または UTF-16 に変換します。</span><span class="sxs-lookup"><span data-stu-id="7b217-173">Convert a `Rune` to UTF-8 or UTF-16</span></span>

<span data-ttu-id="7b217-174">`Rune` は Unicode スカラー値であるため、UTF-8、UTF-16、または32エンコードに変換することができます。</span><span class="sxs-lookup"><span data-stu-id="7b217-174">Since a `Rune` is a Unicode scalar value, it can be converted to UTF-8, UTF-16, or UTF-32 encoding.</span></span> <span data-ttu-id="7b217-175">`Rune` 型には、UTF-8 および UTF-16 に変換するためのサポートが組み込まれています。</span><span class="sxs-lookup"><span data-stu-id="7b217-175">The `Rune` type has built-in support for conversion to UTF-8 and UTF-16.</span></span>

<span data-ttu-id="7b217-176"><xref:System.Text.Rune.EncodeToUtf16%2A?displayProperty=nameWithType> は、`Rune` インスタンスを `char` インスタンスに変換します。</span><span class="sxs-lookup"><span data-stu-id="7b217-176">The <xref:System.Text.Rune.EncodeToUtf16%2A?displayProperty=nameWithType> converts a `Rune` instance to `char` instances.</span></span> <span data-ttu-id="7b217-177">`Rune` インスタンスを UTF-16 に変換した結果として得られる `char` インスタンスの数を照会するには、<xref:System.Text.Rune.Utf16SequenceLength?displayProperty=nameWithType> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="7b217-177">To query the number of `char` instances that would result from converting a `Rune` instance to UTF-16, use the <xref:System.Text.Rune.Utf16SequenceLength?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="7b217-178">UTF-8 変換でも同様のメソッドが存在します。</span><span class="sxs-lookup"><span data-stu-id="7b217-178">Similar methods exist for UTF-8 conversion.</span></span>

<span data-ttu-id="7b217-179">次の例では、`Rune` インスタンスを `char` 配列に変換します。</span><span class="sxs-lookup"><span data-stu-id="7b217-179">The following example converts a `Rune` instance to a `char` array.</span></span> <span data-ttu-id="7b217-180">このコードは、`rune` 変数に `Rune` インスタンスがあることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="7b217-180">The code assumes you have a `Rune` instance in the `rune` variable:</span></span>

:::code language="csharp" source="~/snippets/System.Text/Rune/csharp/EncodeRune.cs" id="SnippetUtf16CharArray":::

<span data-ttu-id="7b217-181">`string` は一連の UTF-16 文字であるため、次の例では、`Rune` のインスタンスも UTF-16 に変換します。</span><span class="sxs-lookup"><span data-stu-id="7b217-181">Since a `string` is a sequence of UTF-16 chars, the following example also converts a `Rune` instance to UTF-16:</span></span>

:::code language="csharp" source="~/snippets/System.Text/Rune/csharp/EncodeRune.cs" id="SnippetUtf16String":::

<span data-ttu-id="7b217-182">次の例では、`Rune` インスタンスを `UTF-8` バイト配列に変換します。</span><span class="sxs-lookup"><span data-stu-id="7b217-182">The following example converts a `Rune` instance to a `UTF-8` byte array:</span></span>

:::code language="csharp" source="~/snippets/System.Text/Rune/csharp/EncodeRune.cs" id="SnippetUtf8ByteArray":::

<span data-ttu-id="7b217-183"><xref:System.Text.Rune.EncodeToUtf16%2A?displayProperty=nameWithType> メソッドと <xref:System.Text.Rune.EncodeToUtf8%2A?displayProperty=nameWithType> メソッドは、書き込まれた実際の要素数を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-183">The <xref:System.Text.Rune.EncodeToUtf16%2A?displayProperty=nameWithType> and <xref:System.Text.Rune.EncodeToUtf8%2A?displayProperty=nameWithType> methods return the actual number of elements written.</span></span> <span data-ttu-id="7b217-184">コピー先のバッファーが短すぎて結果を格納できない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7b217-184">They throw an exception if the destination buffer is too short to contain the result.</span></span> <span data-ttu-id="7b217-185">例外を回避する必要がある呼び出し元に対して、スローされない <xref:System.Text.Rune.TryEncodeToUtf8%2A> および <xref:System.Text.Rune.EncodeToUtf16%2A> メソッドもあります。</span><span class="sxs-lookup"><span data-stu-id="7b217-185">There are non-throwing <xref:System.Text.Rune.TryEncodeToUtf8%2A> and <xref:System.Text.Rune.EncodeToUtf16%2A> methods as well for callers who want to avoid exceptions.</span></span>

### <a name="rune-in-net-vs-other-languages"></a><span data-ttu-id="7b217-186">.NET とその他の言語のルーン</span><span class="sxs-lookup"><span data-stu-id="7b217-186">Rune in .NET vs. other languages</span></span>

<span data-ttu-id="7b217-187">"ルーン" という用語は、Unicode 規格で定義されていません。</span><span class="sxs-lookup"><span data-stu-id="7b217-187">The term "rune" is not defined in the Unicode Standard.</span></span> <span data-ttu-id="7b217-188">日付という用語は、 [utf-8 の作成](https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt)に戻ります。</span><span class="sxs-lookup"><span data-stu-id="7b217-188">The term dates back to [the creation of UTF-8](https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt).</span></span> <span data-ttu-id="7b217-189">渡シャーマンと Ken Thompson は、最終的にコードポイントとして知られることを説明する用語を探していました。</span><span class="sxs-lookup"><span data-stu-id="7b217-189">Rob Pike and Ken Thompson were looking for a term to describe what would eventually become known as a code point.</span></span> <span data-ttu-id="7b217-190">[これらは "ルーン" という用語で決済](https://twitter.com/rob_pike/status/732353233474064384)され、後で渡シャーマンが Popularize のようなプログラミング言語に影響を及ぼします。</span><span class="sxs-lookup"><span data-stu-id="7b217-190">[They settled on the term "rune"](https://twitter.com/rob_pike/status/732353233474064384), and Rob Pike's later influence over the Go programming language helped popularize the term.</span></span>

<span data-ttu-id="7b217-191">ただし、.NET `Rune` の種類は、[`rune` の種類] と同じではありません。</span><span class="sxs-lookup"><span data-stu-id="7b217-191">However, the .NET `Rune` type is not the equivalent of the Go `rune` type.</span></span> <span data-ttu-id="7b217-192">外出先では、`rune` の種類は[`int32`のエイリアス](https://blog.golang.org/strings)です。</span><span class="sxs-lookup"><span data-stu-id="7b217-192">In Go, the `rune` type is an [alias for `int32`](https://blog.golang.org/strings).</span></span> <span data-ttu-id="7b217-193">ゴールーンは、Unicode コードポイントを表すことを目的としていますが、サロゲートコードポイントや有効な Unicode コードポイントではない値など、任意の32ビット値にすることができます。</span><span class="sxs-lookup"><span data-stu-id="7b217-193">A Go rune is intended to represent a Unicode code point, but it can be any 32-bit value, including surrogate code points and values that are not legal Unicode code points.</span></span>

<span data-ttu-id="7b217-194">他のプログラミング言語の類似する型については、「 [Rust のプリミティブ `char` type](https://doc.rust-lang.org/std/primitive.char.html) 」または「 [Swift の `Unicode.Scalar` 型](https://developer.apple.com/documentation/swift/unicode/scalar)」を参照してください。どちらも Unicode スカラー値を表します。</span><span class="sxs-lookup"><span data-stu-id="7b217-194">For similar types in other programming languages, see [Rust's primitive `char` type](https://doc.rust-lang.org/std/primitive.char.html) or [Swift's `Unicode.Scalar` type](https://developer.apple.com/documentation/swift/unicode/scalar), both of which represent Unicode scalar values.</span></span> <span data-ttu-id="7b217-195">と同様の機能を提供します。NET の `Rune` 型で、有効な Unicode スカラー値ではない値のインスタンス化を許可しません。</span><span class="sxs-lookup"><span data-stu-id="7b217-195">They provide functionality similar to .NET's `Rune` type, and they disallow instantiation of values that are not legal Unicode scalar values.</span></span>

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rune (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.#ctor(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ch As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rune(char ch);" />
      <MemberSignature Language="F#" Value="new System.Text.Rune : char -&gt; System.Text.Rune" Usage="new System.Text.Rune ch" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch"><span data-ttu-id="7b217-196">UTF-16 コード単位。</span><span class="sxs-lookup"><span data-stu-id="7b217-196">A UTF-16 code unit.</span></span></param>
        <summary><span data-ttu-id="7b217-197">指定された UTF-16 コード単位から <see cref="T:System.Text.Rune" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="7b217-197">Creates a <see cref="T:System.Text.Rune" /> from the provided UTF-16 code unit.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7b217-198"><paramref name="ch" /> は、UTF-16 サロゲート コード ポイント (U+D800..U+DFFF、最初と最後の要素を含む) を表します。</span><span class="sxs-lookup"><span data-stu-id="7b217-198"><paramref name="ch" /> represents a UTF-16 surrogate code point (U+D800..U+DFFF, inclusive).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rune (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rune(int value);" />
      <MemberSignature Language="F#" Value="new System.Text.Rune : int -&gt; System.Text.Rune" Usage="new System.Text.Rune value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-199">Unicode スカラー値。</span><span class="sxs-lookup"><span data-stu-id="7b217-199">A Unicode scalar value.</span></span></param>
        <summary><span data-ttu-id="7b217-200">Unicode スカラー値を表す、指定された 32 ビット整数から <see cref="T:System.Text.Rune" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="7b217-200">Creates a <see cref="T:System.Text.Rune" /> from the specified 32-bit integer that represents a Unicode scalar value.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7b217-201"><paramref name="value" /> は Unicode スカラー値を表しません。</span><span class="sxs-lookup"><span data-stu-id="7b217-201"><paramref name="value" /> does not represent a Unicode scalar value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rune (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.#ctor(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rune(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="new System.Text.Rune : uint32 -&gt; System.Text.Rune" Usage="new System.Text.Rune value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-202">Unicode スカラー値。</span><span class="sxs-lookup"><span data-stu-id="7b217-202">A Unicode scalar value.</span></span></param>
        <summary><span data-ttu-id="7b217-203">Unicode スカラー値を表す、指定された符号なし 32 ビット整数から <see cref="T:System.Text.Rune" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="7b217-203">Creates a <see cref="T:System.Text.Rune" /> from the specified 32-bit unsigned integer that represents a Unicode scalar value.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7b217-204"><paramref name="value" /> は Unicode スカラー値を表しません。</span><span class="sxs-lookup"><span data-stu-id="7b217-204"><paramref name="value" /> does not represent a Unicode scalar value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rune (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.#ctor(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (highSurrogate As Char, lowSurrogate As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rune(char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="F#" Value="new System.Text.Rune : char * char -&gt; System.Text.Rune" Usage="new System.Text.Rune (highSurrogate, lowSurrogate)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" />
        <Parameter Name="lowSurrogate" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="highSurrogate"><span data-ttu-id="7b217-205">サロゲート ペアの上位サロゲート。</span><span class="sxs-lookup"><span data-stu-id="7b217-205">The high surrogate of the surrogate pair.</span></span></param>
        <param name="lowSurrogate"><span data-ttu-id="7b217-206">サロゲート ペアの下位サロゲート。</span><span class="sxs-lookup"><span data-stu-id="7b217-206">The low surrogate of the surrogate pair.</span></span></param>
        <summary><span data-ttu-id="7b217-207">指定された UTF-16 サロゲート ペアから <see cref="T:System.Text.Rune" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="7b217-207">Creates a <see cref="T:System.Text.Rune" /> from the provided UTF-16 surrogate pair.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7b217-208"><paramref name="highSurrogate" /> は UTF-16 上位サロゲート コード ポイントを表しません。</span><span class="sxs-lookup"><span data-stu-id="7b217-208"><paramref name="highSurrogate" /> does not represent a UTF-16 high surrogate code point.</span></span>
          
<span data-ttu-id="7b217-209">- または -</span><span class="sxs-lookup"><span data-stu-id="7b217-209">-or-</span></span>

<span data-ttu-id="7b217-210"><paramref name="lowSurrogate" /> は UTF-16 下位サロゲート コード ポイントを表しません。</span><span class="sxs-lookup"><span data-stu-id="7b217-210"><paramref name="lowSurrogate" /> does not represent a UTF-16 low surrogate code point.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.Text.Rune other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.Text.Rune other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.CompareTo(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Rune) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Text::Rune other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : System.Text.Rune -&gt; int&#xA;override this.CompareTo : System.Text.Rune -&gt; int" Usage="rune.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="7b217-211">現在のインスタンスと比較するインスタンス。</span><span class="sxs-lookup"><span data-stu-id="7b217-211">The instance to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="7b217-212">現在のインスタンスを、指定された <see cref="T:System.Text.Rune" /> インスタンスと比較します。</span><span class="sxs-lookup"><span data-stu-id="7b217-212">Compares the current instance to the specified <see cref="T:System.Text.Rune" /> instance.</span></span></summary>
        <returns><span data-ttu-id="7b217-213">並べ替え順序において、<paramref name="other" /> との関係でこのインスタンスの位置を示す符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="7b217-213">A signed integer indicating the position of this instance in the sort order in relation to <paramref name="other" />:</span></span> <br /><span data-ttu-id="7b217-214">- 0 未満:このインスタンスの位置が <paramref name="other" /> よりも前です。</span><span class="sxs-lookup"><span data-stu-id="7b217-214">- Less than zero: This instance precedes <paramref name="other" />.</span></span> 
<br /><span data-ttu-id="7b217-215">- ゼロ:並べ替え順序においてインスタンスの位置が <paramref name="other" /> と同じです。</span><span class="sxs-lookup"><span data-stu-id="7b217-215">- Zero: The instance has the same position in the sort order as <paramref name="other" />.</span></span>
<br /><span data-ttu-id="7b217-216">- 0 より大きい:このインスタンスの位置が <paramref name="other" /> よりも後ろです。</span><span class="sxs-lookup"><span data-stu-id="7b217-216">- Greater than zero: This instance follows <paramref name="other" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeFromUtf16">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus DecodeFromUtf16 (ReadOnlySpan&lt;char&gt; source, out System.Text.Rune result, out int charsConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus DecodeFromUtf16(valuetype System.ReadOnlySpan`1&lt;char&gt; source, [out] valuetype System.Text.Rune&amp; result, [out] int32&amp; charsConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.DecodeFromUtf16(System.ReadOnlySpan{System.Char},System.Text.Rune@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeFromUtf16 (source As ReadOnlySpan(Of Char), ByRef result As Rune, ByRef charsConsumed As Integer) As OperationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::OperationStatus DecodeFromUtf16(ReadOnlySpan&lt;char&gt; source, [Runtime::InteropServices::Out] System::Text::Rune % result, [Runtime::InteropServices::Out] int % charsConsumed);" />
      <MemberSignature Language="F#" Value="static member DecodeFromUtf16 : ReadOnlySpan&lt;char&gt; * Rune * int -&gt; System.Buffers.OperationStatus" Usage="System.Text.Rune.DecodeFromUtf16 (source, result, charsConsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.Text.Rune" RefType="out" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="7b217-217">読み取り専用 UTF-16 文字スパン。</span><span class="sxs-lookup"><span data-stu-id="7b217-217">A read-only UTF-16 character span.</span></span></param>
        <param name="result"><span data-ttu-id="7b217-218">このメソッドから制御が戻るときに、デコードされたルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-218">When this method returns, the decoded rune.</span></span></param>
        <param name="charsConsumed"><span data-ttu-id="7b217-219">このメソッドから制御が戻るときに、ルーンを作成するために読み取られた文字数。</span><span class="sxs-lookup"><span data-stu-id="7b217-219">When this method returns, the number of characters read to create the rune.</span></span></param>
        <summary><span data-ttu-id="7b217-220">指定された UTF-16 ソース バッファーの先頭で <see cref="T:System.Text.Rune" /> を復号します。</span><span class="sxs-lookup"><span data-stu-id="7b217-220">Decodes the <see cref="T:System.Text.Rune" /> at the beginning of the provided UTF-16 source buffer.</span></span></summary>
        <returns><span data-ttu-id="7b217-221">UTF-16 でエンコードされた有効なスカラー値でソース バッファーが始まる場合、<see cref="F:System.Buffers.OperationStatus.Done" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-221"><see cref="F:System.Buffers.OperationStatus.Done" /> if the source buffer begins with a valid UTF-16 encoded scalar value.</span></span> <span data-ttu-id="7b217-222">結果として、復号された <see cref="T:System.Text.Rune" /> が <paramref name="result" /> に含まれます。<paramref name="charsConsumed" /> には <see cref="T:System.Text.Rune" /> をエンコードする目的で入力バッファーで使用される <see cref="T:System.Char" /> 値の数が含まれます。</span><span class="sxs-lookup"><span data-stu-id="7b217-222"><paramref name="result" /> then contains the decoded <see cref="T:System.Text.Rune" />, and <paramref name="charsConsumed" /> contains the number of <see cref="T:System.Char" /> values used in the input buffer to encode the <see cref="T:System.Text.Rune" />.</span></span>
            
<span data-ttu-id="7b217-223">ソース バッファーが空か、スタンドアロンの UTF-16 上位サロゲート文字のみが含まれる場合、<see cref="F:System.Buffers.OperationStatus.NeedMoreData" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-223"><see cref="F:System.Buffers.OperationStatus.NeedMoreData" /> if the source buffer is empty or contains only a standalone UTF-16 high surrogate character.</span></span> <span data-ttu-id="7b217-224">結果として、<paramref name="result" /> に <see cref="P:System.Text.Rune.ReplacementChar" /> が含まれ、<paramref name="charsConsumed" /> には入力バッファーの長さが含まれます。</span><span class="sxs-lookup"><span data-stu-id="7b217-224"><paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="charsConsumed" /> contains the length of the input buffer.</span></span>
            
<span data-ttu-id="7b217-225">UTF-16 でエンコードされた、形式が正しくないスカラー値でソース バッファーが始まる場合、<see cref="F:System.Buffers.OperationStatus.InvalidData" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-225"><see cref="F:System.Buffers.OperationStatus.InvalidData" /> if the source buffer begins with an ill-formed UTF-16 encoded scalar value.</span></span> <span data-ttu-id="7b217-226">結果として、<paramref name="result" /> に <see cref="P:System.Text.Rune.ReplacementChar" /> が含まれ、<paramref name="charsConsumed" /> には形式が正しくないシーケンスをエンコードした <see cref="T:System.Char" /> 値の数が含まれます。</span><span class="sxs-lookup"><span data-stu-id="7b217-226"><paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="charsConsumed" /> contains the number of <see cref="T:System.Char" /> values used to encode the ill-formed sequence.</span></span>
<span data-ttu-id="7b217-227">.</span><span class="sxs-lookup"><span data-stu-id="7b217-227">.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-228">一般的な規則では、ループ内でこのメソッドを呼び出し、ループの各反復処理の `charsConsumed` 要素によって、`source` バッファーをスライスします。</span><span class="sxs-lookup"><span data-stu-id="7b217-228">The general convention is to call this method in a loop, slicing the `source` buffer by `charsConsumed` elements on each iteration of the loop.</span></span> <span data-ttu-id="7b217-229">ループの各反復処理では、データが正常にデコードされた場合は、実際のスカラー値が `result` に含まれます。データが正常にデコードされなかった場合は <xref:System.Text.Rune.ReplacementChar?displayProperty=nameWithType> が含まれます。</span><span class="sxs-lookup"><span data-stu-id="7b217-229">On each iteration of the loop, `result` contains the real scalar value if the data was successfully decoded, or it contains <xref:System.Text.Rune.ReplacementChar?displayProperty=nameWithType> if the data was not successfully decoded.</span></span> <span data-ttu-id="7b217-230">このパターンを使用すると、ループの反復処理中に、無効なシーケンスを自動的に U + FFFD で置き換えることができます。</span><span class="sxs-lookup"><span data-stu-id="7b217-230">This pattern provides convenient automatic U+FFFD substitution of invalid sequences while iterating through the loop.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeFromUtf8">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus DecodeFromUtf8 (ReadOnlySpan&lt;byte&gt; source, out System.Text.Rune result, out int bytesConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus DecodeFromUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.Text.Rune&amp; result, [out] int32&amp; bytesConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Text.Rune@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeFromUtf8 (source As ReadOnlySpan(Of Byte), ByRef result As Rune, ByRef bytesConsumed As Integer) As OperationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::OperationStatus DecodeFromUtf8(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] System::Text::Rune % result, [Runtime::InteropServices::Out] int % bytesConsumed);" />
      <MemberSignature Language="F#" Value="static member DecodeFromUtf8 : ReadOnlySpan&lt;byte&gt; * Rune * int -&gt; System.Buffers.OperationStatus" Usage="System.Text.Rune.DecodeFromUtf8 (source, result, bytesConsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="result" Type="System.Text.Rune" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="7b217-231">UTF-8 でエンコードされた読み取り専用バイト スパン。</span><span class="sxs-lookup"><span data-stu-id="7b217-231">A read-only UTF-8 encoded byte span.</span></span></param>
        <param name="result"><span data-ttu-id="7b217-232">このメソッドから制御が戻るときに、デコードされたルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-232">When this method returns, the decoded rune.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="7b217-233">このメソッドから制御が戻るときに、ルーンを作成するために読み取られたバイト数。</span><span class="sxs-lookup"><span data-stu-id="7b217-233">When this method returns, the number of bytes read to create the rune.</span></span></param>
        <summary><span data-ttu-id="7b217-234">指定された UTF-8 ソース バッファーの先頭で <see cref="T:System.Text.Rune" /> を復号します。</span><span class="sxs-lookup"><span data-stu-id="7b217-234">Decodes the <see cref="T:System.Text.Rune" /> at the beginning of the provided UTF-8 source buffer.</span></span></summary>
        <returns><span data-ttu-id="7b217-235">UTF-8 でエンコードされた有効なスカラー値でソース バッファーが始まる場合、<see cref="F:System.Buffers.OperationStatus.Done" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-235"><see cref="F:System.Buffers.OperationStatus.Done" /> if the source buffer begins with a valid UTF-8 encoded scalar value.</span></span> <span data-ttu-id="7b217-236">結果として、復号された <see cref="T:System.Text.Rune" /> が <paramref name="result" /> に含まれます。<paramref name="bytesConsumed" /> には <see cref="T:System.Text.Rune" /> をエンコードする目的で入力バッファーで使用される <see cref="T:System.Byte" /> 値の数が含まれます。</span><span class="sxs-lookup"><span data-stu-id="7b217-236"><paramref name="result" /> then contains the decoded <see cref="T:System.Text.Rune" />, and <paramref name="bytesConsumed" /> contains the number of <see cref="T:System.Byte" /> values used in the input buffer to encode the <see cref="T:System.Text.Rune" />.</span></span>
            
<span data-ttu-id="7b217-237">ソース バッファーが空か、スタンドアロンの UTF-8 上位サロゲート文字のみが含まれる場合、<see cref="F:System.Buffers.OperationStatus.NeedMoreData" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-237"><see cref="F:System.Buffers.OperationStatus.NeedMoreData" /> if the source buffer is empty or contains only a standalone UTF-8 high surrogate character.</span></span> <span data-ttu-id="7b217-238">結果として、<paramref name="result" /> に <see cref="P:System.Text.Rune.ReplacementChar" /> が含まれ、<paramref name="bytesConsumed" /> には入力バッファーの長さが含まれます。</span><span class="sxs-lookup"><span data-stu-id="7b217-238"><paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="bytesConsumed" /> contains the length of the input buffer.</span></span>
            
<span data-ttu-id="7b217-239">UTF-8 でエンコードされた、形式が正しくないスカラー値で入力バッファーが始まる場合、<see cref="F:System.Buffers.OperationStatus.InvalidData" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-239"><see cref="F:System.Buffers.OperationStatus.InvalidData" /> if the source buffer begins with an ill-formed UTF-8 encoded scalar value.</span></span> <span data-ttu-id="7b217-240">結果として、<paramref name="result" /> に <see cref="P:System.Text.Rune.ReplacementChar" /> が含まれ、<paramref name="bytesConsumed" /> には形式が正しくないシーケンスをエンコードする目的で入力バッファーで使用された <see cref="T:System.Byte" /> 値の数が含まれます。</span><span class="sxs-lookup"><span data-stu-id="7b217-240"><paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="bytesConsumed" /> contains the number of <see cref="T:System.Byte" /> values used in the input buffer to encode the ill-formed sequence.</span></span>
<span data-ttu-id="7b217-241">.</span><span class="sxs-lookup"><span data-stu-id="7b217-241">.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-242">一般的な規則では、ループ内でこのメソッドを呼び出し、ループの各反復処理の `bytesConsumed` 要素によって、`source` バッファーをスライスします。</span><span class="sxs-lookup"><span data-stu-id="7b217-242">The general convention is to call this method in a loop, slicing the `source` buffer by `bytesConsumed` elements on each iteration of the loop.</span></span> <span data-ttu-id="7b217-243">ループの各反復処理では、`result` が正常にデコードされた場合は実際のスカラー値が含まれ、データが正常にデコードされなかった場合は <xref:System.Text.Rune.ReplacementChar?displayProperty=nameWithType> が含まれます。</span><span class="sxs-lookup"><span data-stu-id="7b217-243">On each iteration of the loop, `result` contains the real scalar value if successfully decoded, or it contains <xref:System.Text.Rune.ReplacementChar?displayProperty=nameWithType> if the data could not be successfully decoded.</span></span> <span data-ttu-id="7b217-244">このパターンを使用すると、ループの反復処理中に、無効なシーケンスを自動的に U + FFFD で置き換えることができます。</span><span class="sxs-lookup"><span data-stu-id="7b217-244">This pattern provides convenient automatic U+FFFD substitution of invalid sequences while iterating through the loop.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeLastFromUtf16">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus DecodeLastFromUtf16 (ReadOnlySpan&lt;char&gt; source, out System.Text.Rune result, out int charsConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus DecodeLastFromUtf16(valuetype System.ReadOnlySpan`1&lt;char&gt; source, [out] valuetype System.Text.Rune&amp; result, [out] int32&amp; charsConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.DecodeLastFromUtf16(System.ReadOnlySpan{System.Char},System.Text.Rune@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeLastFromUtf16 (source As ReadOnlySpan(Of Char), ByRef result As Rune, ByRef charsConsumed As Integer) As OperationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::OperationStatus DecodeLastFromUtf16(ReadOnlySpan&lt;char&gt; source, [Runtime::InteropServices::Out] System::Text::Rune % result, [Runtime::InteropServices::Out] int % charsConsumed);" />
      <MemberSignature Language="F#" Value="static member DecodeLastFromUtf16 : ReadOnlySpan&lt;char&gt; * Rune * int -&gt; System.Buffers.OperationStatus" Usage="System.Text.Rune.DecodeLastFromUtf16 (source, result, charsConsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.Text.Rune" RefType="out" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="7b217-245">UTF-16 でエンコードされた読み取り専用文字スパン。</span><span class="sxs-lookup"><span data-stu-id="7b217-245">A read-only UTF-16 encoded character span.</span></span></param>
        <param name="result"><span data-ttu-id="7b217-246">このメソッドから制御が戻るときに、デコードされたルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-246">When this method returns, the decoded rune.</span></span></param>
        <param name="charsConsumed"><span data-ttu-id="7b217-247">このメソッドから制御が戻るときに、ルーンを作成するために読み取られたバイト数。</span><span class="sxs-lookup"><span data-stu-id="7b217-247">When this method returns, the number of bytes read to create the rune.</span></span></param>
        <summary><span data-ttu-id="7b217-248">指定された UTF-16 ソース バッファーの末尾で <see cref="T:System.Text.Rune" /> を復号します。</span><span class="sxs-lookup"><span data-stu-id="7b217-248">Decodes the <see cref="T:System.Text.Rune" /> at the end of the provided UTF-16 source buffer.</span></span></summary>
        <returns><span data-ttu-id="7b217-249">UTF-16 でエンコードされた有効なスカラー値でソース バッファーが始まる場合、<see cref="F:System.Buffers.OperationStatus.Done" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-249"><see cref="F:System.Buffers.OperationStatus.Done" /> if the source buffer begins with a valid UTF-16 encoded scalar value.</span></span> <span data-ttu-id="7b217-250">結果として、復号された <see cref="T:System.Text.Rune" /> が <paramref name="result" /> に含まれます。<paramref name="charsConsumed" /> には <see cref="T:System.Text.Rune" /> をエンコードする目的で入力バッファーで使用される <see cref="T:System.Char" /> 値の数が含まれます。</span><span class="sxs-lookup"><span data-stu-id="7b217-250"><paramref name="result" /> then contains the decoded <see cref="T:System.Text.Rune" />, and <paramref name="charsConsumed" /> contains the number of <see cref="T:System.Char" /> values used in the input buffer to encode the <see cref="T:System.Text.Rune" />.</span></span>
            
<span data-ttu-id="7b217-251">ソース バッファーが空か、スタンドアロンの UTF-16 上位サロゲート文字のみが含まれる場合、<see cref="F:System.Buffers.OperationStatus.NeedMoreData" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-251"><see cref="F:System.Buffers.OperationStatus.NeedMoreData" /> if the source buffer is empty or contains only a standalone UTF-16 high surrogate character.</span></span> <span data-ttu-id="7b217-252">結果として、<paramref name="result" /> に <see cref="P:System.Text.Rune.ReplacementChar" /> が含まれ、<paramref name="charsConsumed" /> には入力バッファーの長さが含まれます。</span><span class="sxs-lookup"><span data-stu-id="7b217-252"><paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="charsConsumed" /> contains the length of the input buffer.</span></span>
            
<span data-ttu-id="7b217-253">UTF-16 でエンコードされた、形式が正しくないスカラー値でソース バッファーが始まる場合、<see cref="F:System.Buffers.OperationStatus.InvalidData" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-253"><see cref="F:System.Buffers.OperationStatus.InvalidData" /> if the source buffer begins with an ill-formed UTF-16 encoded scalar value.</span></span> <span data-ttu-id="7b217-254">結果として、<paramref name="result" /> に <see cref="P:System.Text.Rune.ReplacementChar" /> が含まれ、<paramref name="charsConsumed" /> には形式が正しくないシーケンスをエンコードした <see cref="T:System.Char" /> 値の数が含まれます。</span><span class="sxs-lookup"><span data-stu-id="7b217-254"><paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="charsConsumed" /> contains the number of <see cref="T:System.Char" /> values used to encode the ill-formed sequence.</span></span>
<span data-ttu-id="7b217-255">.</span><span class="sxs-lookup"><span data-stu-id="7b217-255">.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-256">このメソッドは <xref:System.Text.Rune.DecodeFromUtf16(System.ReadOnlySpan{System.Char},System.Text.Rune@,System.Int32@)>とよく似ていますが、呼び出し元は前方ではなく逆方向にループすることができます。</span><span class="sxs-lookup"><span data-stu-id="7b217-256">This method is very similar to <xref:System.Text.Rune.DecodeFromUtf16(System.ReadOnlySpan{System.Char},System.Text.Rune@,System.Int32@)>, except it allows the caller to loop backward instead of forward.</span></span> <span data-ttu-id="7b217-257">一般的な呼び出し規則では、ループの各反復処理で、呼び出し元が `source` バッファーの最後の `charsConsumed` 要素からスライスする必要があります。</span><span class="sxs-lookup"><span data-stu-id="7b217-257">The typical calling convention is that on each iteration of the loop, the caller should slice off the final `charsConsumed` elements of the `source` buffer.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeLastFromUtf8">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus DecodeLastFromUtf8 (ReadOnlySpan&lt;byte&gt; source, out System.Text.Rune value, out int bytesConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus DecodeLastFromUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.Text.Rune&amp; value, [out] int32&amp; bytesConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.DecodeLastFromUtf8(System.ReadOnlySpan{System.Byte},System.Text.Rune@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeLastFromUtf8 (source As ReadOnlySpan(Of Byte), ByRef value As Rune, ByRef bytesConsumed As Integer) As OperationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::OperationStatus DecodeLastFromUtf8(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] System::Text::Rune % value, [Runtime::InteropServices::Out] int % bytesConsumed);" />
      <MemberSignature Language="F#" Value="static member DecodeLastFromUtf8 : ReadOnlySpan&lt;byte&gt; * Rune * int -&gt; System.Buffers.OperationStatus" Usage="System.Text.Rune.DecodeLastFromUtf8 (source, value, bytesConsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Text.Rune" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="7b217-258">UTF-8 でエンコードされた読み取り専用バイト スパン。</span><span class="sxs-lookup"><span data-stu-id="7b217-258">A read-only UTF-8 encoded byte span.</span></span></param>
        <param name="value"><span data-ttu-id="7b217-259">このメソッドから制御が戻るときに、デコードされたルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-259">When this method returns, the decoded rune.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="7b217-260">このメソッドから制御が戻るときに、ルーンを作成するために読み取られたバイト数。</span><span class="sxs-lookup"><span data-stu-id="7b217-260">When this method returns, the number of bytes read to create the rune.</span></span></param>
        <summary><span data-ttu-id="7b217-261">指定された UTF-8 ソース バッファーの末尾で <see cref="T:System.Text.Rune" /> を復号します。</span><span class="sxs-lookup"><span data-stu-id="7b217-261">Decodes the <see cref="T:System.Text.Rune" /> at the end of the provided UTF-8 source buffer.</span></span></summary>
        <returns><span data-ttu-id="7b217-262">UTF-8 でエンコードされた有効なスカラー値でソース バッファーが終わる場合、<see cref="F:System.Buffers.OperationStatus.Done" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-262"><see cref="F:System.Buffers.OperationStatus.Done" /> if the source buffer ends with a valid UTF-8 encoded scalar value.</span></span> <span data-ttu-id="7b217-263">結果として、復号された <see cref="T:System.Text.Rune" /> が <paramref name="result" /> に含まれます。<paramref name="bytesConsumed" /> には <see cref="T:System.Text.Rune" /> をエンコードする目的で入力バッファーで使用される <see cref="T:System.Byte" /> 値の数が含まれます。</span><span class="sxs-lookup"><span data-stu-id="7b217-263"><paramref name="result" /> then contains the decoded <see cref="T:System.Text.Rune" />, and <paramref name="bytesConsumed" /> contains the number of <see cref="T:System.Byte" /> values used in the input buffer to encode the <see cref="T:System.Text.Rune" />.</span></span>
            
<span data-ttu-id="7b217-264">ソース バッファーが空か、スタンドアロンの UTF-8 上位サロゲート文字のみが含まれる場合、<see cref="F:System.Buffers.OperationStatus.NeedMoreData" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-264"><see cref="F:System.Buffers.OperationStatus.NeedMoreData" /> if the source buffer is empty or contains only a standalone UTF-8 high surrogate character.</span></span> <span data-ttu-id="7b217-265">結果として、<paramref name="result" /> に <see cref="P:System.Text.Rune.ReplacementChar" /> が含まれ、<paramref name="bytesConsumed" /> には入力バッファーの長さが含まれます。</span><span class="sxs-lookup"><span data-stu-id="7b217-265"><paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="bytesConsumed" /> contains the length of the input buffer.</span></span>
            
<span data-ttu-id="7b217-266">UTF-8 でエンコードされた、形式が正しくないスカラー値でソース バッファーが終わる場合、<see cref="F:System.Buffers.OperationStatus.InvalidData" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-266"><see cref="F:System.Buffers.OperationStatus.InvalidData" /> if the source buffer ends with an ill-formed UTF-8 encoded scalar value.</span></span> <span data-ttu-id="7b217-267">結果として、<paramref name="result" /> に <see cref="P:System.Text.Rune.ReplacementChar" /> が含まれ、<paramref name="bytesConsumed" /> には形式が正しくないシーケンスをエンコードする目的で入力バッファーで使用された <see cref="T:System.Byte" /> 値の数が含まれます。</span><span class="sxs-lookup"><span data-stu-id="7b217-267"><paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="bytesConsumed" /> contains the number of <see cref="T:System.Byte" /> values used in the input buffer to encode the ill-formed sequence.</span></span>
<span data-ttu-id="7b217-268">.</span><span class="sxs-lookup"><span data-stu-id="7b217-268">.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-269">このメソッドは <xref:System.Text.Rune.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Text.Rune@,System.Int32@)>とよく似ていますが、呼び出し元は前方ではなく逆方向にループすることができます。</span><span class="sxs-lookup"><span data-stu-id="7b217-269">This method is very similar to <xref:System.Text.Rune.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Text.Rune@,System.Int32@)>, except it allows the caller to loop backward instead of forward.</span></span> <span data-ttu-id="7b217-270">一般的な呼び出し規則では、ループの各反復処理で、呼び出し元が `source` バッファーの最後の `bytesConsumed` 要素からスライスする必要があります。</span><span class="sxs-lookup"><span data-stu-id="7b217-270">The typical calling convention is that on each iteration of the loop, the caller should slice off the final `bytesConsumed` elements of the `source` buffer.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToUtf16">
      <MemberSignature Language="C#" Value="public int EncodeToUtf16 (Span&lt;char&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EncodeToUtf16(valuetype System.Span`1&lt;char&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.EncodeToUtf16(System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToUtf16 (destination As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EncodeToUtf16(Span&lt;char&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.EncodeToUtf16 : Span&lt;char&gt; -&gt; int" Usage="rune.EncodeToUtf16 destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="7b217-271">UTF-16 として、この値の書き込み先となるバッファー。</span><span class="sxs-lookup"><span data-stu-id="7b217-271">The buffer to which to write this value as UTF-16.</span></span></param>
        <summary><span data-ttu-id="7b217-272">この <see cref="T:System.Text.Rune" /> を UTF-16 ターゲット バッファーにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="7b217-272">Encodes this <see cref="T:System.Text.Rune" /> to a UTF-16 destination buffer.</span></span></summary>
        <returns><span data-ttu-id="7b217-273"><paramref name="destination" /> に書き込まれた <see cref="T:System.Char" /> 値の数。</span><span class="sxs-lookup"><span data-stu-id="7b217-273">The number of <see cref="T:System.Char" /> values written to <paramref name="destination" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7b217-274"><paramref name="destination" /> は出力を保持できるほど大きくありません。</span><span class="sxs-lookup"><span data-stu-id="7b217-274"><paramref name="destination" /> is not large enough to hold the output.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EncodeToUtf8">
      <MemberSignature Language="C#" Value="public int EncodeToUtf8 (Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EncodeToUtf8(valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.EncodeToUtf8(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeToUtf8 (destination As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EncodeToUtf8(Span&lt;System::Byte&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.EncodeToUtf8 : Span&lt;byte&gt; -&gt; int" Usage="rune.EncodeToUtf8 destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="7b217-275">UTF-8 として、この値の書き込み先となるバッファー。</span><span class="sxs-lookup"><span data-stu-id="7b217-275">The buffer to which to write this value as UTF-8.</span></span></param>
        <summary><span data-ttu-id="7b217-276">この <see cref="T:System.Text.Rune" /> をエンコードし、UTF-8 ターゲット バッファーに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="7b217-276">Encodes this <see cref="T:System.Text.Rune" /> to a UTF-8 destination buffer.</span></span></summary>
        <returns><span data-ttu-id="7b217-277"><paramref name="destination" /> に書き込まれた <see cref="T:System.Byte" /> 値の数。</span><span class="sxs-lookup"><span data-stu-id="7b217-277">The number of <see cref="T:System.Byte" /> values written to <paramref name="destination" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7b217-278"><paramref name="destination" /> は出力を保持できるほど大きくありません。</span><span class="sxs-lookup"><span data-stu-id="7b217-278"><paramref name="destination" /> is not large enough to hold the output.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="rune.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="7b217-279">現在のインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7b217-279">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="7b217-280">現在のインスタンスと、指定されたオブジェクトが等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-280">Returns a value that indicates whether the current instance and a specified object are equal.</span></span></summary>
        <returns><span data-ttu-id="7b217-281"><paramref name="obj" /> の型が <see cref="T:System.Text.Rune" /> で、現在のインスタンスに等しければ <see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-281"><see langword="true" /> if <paramref name="obj" /> is of type <see cref="T:System.Text.Rune" /> and is equal to the current instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Text.Rune other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Text.Rune other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.Equals(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Text::Rune other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Text.Rune -&gt; bool" Usage="rune.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="7b217-282">現在のインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7b217-282">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="7b217-283">現在のインスタンスと指定されたルーンが等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-283">Returns a value that indicates whether the current instance and a specified rune are equal.</span></span></summary>
        <returns><span data-ttu-id="7b217-284">現在のインスタンスと <paramref name="other" /> が等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-284"><see langword="true" /> if the current instance and <paramref name="other" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="rune.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7b217-285">このインスタンスのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-285">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="7b217-286">対象のインスタンスのハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="7b217-286">The hash code for this instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.GetNumericValue(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (value As Rune) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : System.Text.Rune -&gt; double" Usage="System.Text.Rune.GetNumericValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-287">数値を取得する対象のルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-287">The rune for which to get the numeric value.</span></span></param>
        <summary><span data-ttu-id="7b217-288">指定されたルーンに関連付けられている数値を取得します。</span><span class="sxs-lookup"><span data-stu-id="7b217-288">Gets the numeric value associated with the specified rune.</span></span></summary>
        <returns><span data-ttu-id="7b217-289"><paramref name="value" /> に関連付けられている数値。または、<paramref name="value" /> が数字を表していない場合は -1。</span><span class="sxs-lookup"><span data-stu-id="7b217-289">The numeric value associated with <paramref name="value" />, or -1 if <paramref name="value" /> doesn't represent a numeric character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-290">このメソッドには、<xref:System.Globalization.CharUnicodeInfo.GetNumericValue%2A?displayProperty=nameWithType>と同じ動作があります。</span><span class="sxs-lookup"><span data-stu-id="7b217-290">This method has behavior equivalent to <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7b217-291">詳細については、こちらのドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-291">Refer to that documentation for more information.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRuneAt">
      <MemberSignature Language="C#" Value="public static System.Text.Rune GetRuneAt (string input, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.Rune GetRuneAt(string input, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.GetRuneAt(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRuneAt (input As String, index As Integer) As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Rune GetRuneAt(System::String ^ input, int index);" />
      <MemberSignature Language="F#" Value="static member GetRuneAt : string * int -&gt; System.Text.Rune" Usage="System.Text.Rune.GetRuneAt (input, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="7b217-292">ルーン作成の元になる文字列。</span><span class="sxs-lookup"><span data-stu-id="7b217-292">The string from which to create the rune.</span></span></param>
        <param name="index"><span data-ttu-id="7b217-293"><paramref name="input" /> において、ルーンの作成を開始する位置。</span><span class="sxs-lookup"><span data-stu-id="7b217-293">The starting position in <paramref name="input" /> at which to create the rune.</span></span></param>
        <summary><span data-ttu-id="7b217-294">文字列において指定された位置から始まる <see cref="T:System.Text.Rune" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="7b217-294">Gets the <see cref="T:System.Text.Rune" /> that begins at a specified position in a string.</span></span></summary>
        <returns><span data-ttu-id="7b217-295">指定された <paramref name="index" /> にある <paramref name="input" /> から取得されたルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-295">The rune obtained from <paramref name="input" /> at the specified <paramref name="index" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7b217-296"><paramref name="input" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7b217-296"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7b217-297"><paramref name="index" /> は、<paramref name="input" /> において、有効なスカラー値の開始を参照しません。</span><span class="sxs-lookup"><span data-stu-id="7b217-297"><paramref name="index" /> does not reference the start of a valid scalar value in <paramref name="input" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7b217-298"><paramref name="index" /> が <paramref name="input" /> の範囲の外にあります。</span><span class="sxs-lookup"><span data-stu-id="7b217-298"><paramref name="index" /> is outside the range of <paramref name="input" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (value As Rune) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : System.Text.Rune -&gt; System.Globalization.UnicodeCategory" Usage="System.Text.Rune.GetUnicodeCategory value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-299">Unicode カテゴリを取得する対象のルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-299">The rune for which to get the Unicode category.</span></span></param>
        <summary><span data-ttu-id="7b217-300">指定されたルーンに関連付けられている Unicode カテゴリを取得します。</span><span class="sxs-lookup"><span data-stu-id="7b217-300">Gets the Unicode category associated with the specified rune.</span></span></summary>
        <returns><span data-ttu-id="7b217-301"><paramref name="value" /> に関連付けられている Unicode カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="7b217-301">The Unicode category associated with <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-302">このメソッドには、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>と同じ動作があります。</span><span class="sxs-lookup"><span data-stu-id="7b217-302">This method has behavior equivalent to <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7b217-303">詳細については、こちらのドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-303">Refer to that documentation for more information.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAscii">
      <MemberSignature Language="C#" Value="public bool IsAscii { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAscii" />
      <MemberSignature Language="DocId" Value="P:System.Text.Rune.IsAscii" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAscii As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAscii { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAscii : bool" Usage="System.Text.Rune.IsAscii" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7b217-304">この <see cref="T:System.Text.Rune" /> に関連付けられているスカラー値が ASCII エンコード範囲内であるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="7b217-304">Gets a value that indicates whether the scalar value associated with this <see cref="T:System.Text.Rune" /> is within the ASCII encoding range.</span></span></summary>
        <value><span data-ttu-id="7b217-305">関連付けられているスカラー値が ASCII エンコード範囲 ([U + 0000.. U + 007F]) 内にあり、1つの UTF-8 コード単位で表現可能な場合は、<see langword="true" /> ます。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="7b217-305"><see langword="true" /> if the scalar value associated is within the ASCII encoding range ([ U+0000..U+007F ]) and therefore representable by a single UTF-8 code unit; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBmp">
      <MemberSignature Language="C#" Value="public bool IsBmp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBmp" />
      <MemberSignature Language="DocId" Value="P:System.Text.Rune.IsBmp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBmp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBmp { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBmp : bool" Usage="System.Text.Rune.IsBmp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7b217-306">この <see cref="T:System.Text.Rune" /> に関連付けられているスカラー値が BMP エンコード範囲内であるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="7b217-306">Gets a value that indicates whether the scalar value associated with this <see cref="T:System.Text.Rune" /> is within the BMP encoding range.</span></span></summary>
        <value><span data-ttu-id="7b217-307">関連付けられているスカラー値が BMP エンコード範囲 ([U + 0000.. U + FFFF]) 内にあり、1つの UTF-16 コード単位で表現可能な場合は <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="7b217-307"><see langword="true" /> if the scalar value associated is within the BMP encoding range ([ U+0000..U+FFFF ]) and therefore representable by a single UTF-16 code unit; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsControl(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsControl (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsControl(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsControl : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsControl value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-308">評価するルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-308">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="7b217-309">指定されたルーンが制御文字として分類されているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-309">Returns a value that indicates whether the specified rune is categorized as a control character.</span></span></summary>
        <returns><span data-ttu-id="7b217-310"><paramref name="value" /> が制御文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-310"><see langword="true" /> if <paramref name="value" /> is a control character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-311">このメソッドは、<xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> に対してクエリを実行し、結果を <xref:System.Globalization.UnicodeCategory.Control>と比較することと同じです。</span><span class="sxs-lookup"><span data-stu-id="7b217-311">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against <xref:System.Globalization.UnicodeCategory.Control>.</span></span>

<span data-ttu-id="7b217-312">[Unicode の安定性ポリシー](https://www.unicode.org/policies/stability_policy.html)ごとに、制御文字のセットは `[ U+0000..U+001F ]` と `[ U+007F..U+009F ]`の和集合として永続的に固定されます。</span><span class="sxs-lookup"><span data-stu-id="7b217-312">Per [Unicode stability policies](https://www.unicode.org/policies/stability_policy.html), the set of control characters is permanently fixed to be the union of `[ U+0000..U+001F ]` and `[ U+007F..U+009F ]`.</span></span>

<span data-ttu-id="7b217-313">詳細については、「<xref:System.Char.IsControl%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-313">For more information, see <xref:System.Char.IsControl%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsDigit(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDigit (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDigit(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsDigit : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsDigit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-314">評価するルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-314">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="7b217-315">指定されたルーンが 10 進数の数字として分類されているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-315">Returns a value that indicates whether the specified rune is categorized as a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="7b217-316"><see langword="true" /> が 10 進数の数字の場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-316"><see langword="true" /> if <paramref name="value" /> is a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-317">このメソッドは、<xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> に対してクエリを実行し、結果を <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>と比較することと同じです。</span><span class="sxs-lookup"><span data-stu-id="7b217-317">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>.</span></span>

<span data-ttu-id="7b217-318">詳細については、「<xref:System.Char.IsDigit%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-318">For more information, see <xref:System.Char.IsDigit%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsLetter(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetter (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetter(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsLetter : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsLetter value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-319">評価するルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-319">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="7b217-320">指定されたルーンが文字として分類されているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-320">Returns a value that indicates whether the specified rune is categorized as a letter.</span></span></summary>
        <returns><span data-ttu-id="7b217-321"><see langword="true" /> が文字である場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-321"><see langword="true" /> if <paramref name="value" /> is a letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-322">このメソッドは、<xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> に対してクエリを実行し、その結果を <xref:System.Globalization.UnicodeCategory.UppercaseLetter>、<xref:System.Globalization.UnicodeCategory.LowercaseLetter>、<xref:System.Globalization.UnicodeCategory.TitlecaseLetter>、<xref:System.Globalization.UnicodeCategory.ModifierLetter>、<xref:System.Globalization.UnicodeCategory.OtherLetter>のいずれかの値と比較することと同じです。</span><span class="sxs-lookup"><span data-stu-id="7b217-322">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against any of the values <xref:System.Globalization.UnicodeCategory.UppercaseLetter>, <xref:System.Globalization.UnicodeCategory.LowercaseLetter>, <xref:System.Globalization.UnicodeCategory.TitlecaseLetter>, <xref:System.Globalization.UnicodeCategory.ModifierLetter>, and <xref:System.Globalization.UnicodeCategory.OtherLetter>.</span></span>

<span data-ttu-id="7b217-323">詳細については、「<xref:System.Char.IsLetter%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-323">For more information, see <xref:System.Char.IsLetter%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsLetterOrDigit(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetterOrDigit (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetterOrDigit(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsLetterOrDigit : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsLetterOrDigit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-324">評価するルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-324">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="7b217-325">指定されたルーンが文字または 10 進数の数字として分類されているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-325">Returns a value that indicates whether the specified rune is categorized as a letter or a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="7b217-326"><see langword="true" /> が文字または 10 進数の数字の場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-326"><see langword="true" /> if <paramref name="value" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-327">このメソッドは、<xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> に対してクエリを実行し、その結果を <xref:System.Globalization.UnicodeCategory.UppercaseLetter>、<xref:System.Globalization.UnicodeCategory.LowercaseLetter>、<xref:System.Globalization.UnicodeCategory.TitlecaseLetter>、<xref:System.Globalization.UnicodeCategory.ModifierLetter>、<xref:System.Globalization.UnicodeCategory.OtherLetter>、および <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>の値と比較することと同じです。</span><span class="sxs-lookup"><span data-stu-id="7b217-327">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against any of the values <xref:System.Globalization.UnicodeCategory.UppercaseLetter>, <xref:System.Globalization.UnicodeCategory.LowercaseLetter>, <xref:System.Globalization.UnicodeCategory.TitlecaseLetter>, <xref:System.Globalization.UnicodeCategory.ModifierLetter>, <xref:System.Globalization.UnicodeCategory.OtherLetter>, and <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>.</span></span>

<span data-ttu-id="7b217-328">詳細については、「<xref:System.Char.IsLetterOrDigit%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-328">For more information, see <xref:System.Char.IsLetterOrDigit%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsLower(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLower (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLower(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsLower : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsLower value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-329">評価するルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-329">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="7b217-330">指定されたルーンが小文字として分類されているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-330">Returns a value that indicates whether the specified rune is categorized as a lowercase letter.</span></span></summary>
        <returns><span data-ttu-id="7b217-331"><paramref name="value" /> が小文字の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-331"><see langword="true" /> if <paramref name="value" /> is a lowercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-332">このメソッドは、<xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> に対してクエリを実行し、結果を <xref:System.Globalization.UnicodeCategory.LowercaseLetter>と比較することと同じです。</span><span class="sxs-lookup"><span data-stu-id="7b217-332">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against <xref:System.Globalization.UnicodeCategory.LowercaseLetter>.</span></span>

<span data-ttu-id="7b217-333">詳細については、「<xref:System.Char.IsLower%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-333">For more information, see <xref:System.Char.IsLower%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsNumber(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNumber (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumber(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsNumber : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsNumber value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-334">評価するルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-334">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="7b217-335">指定されたルーンが数字として分類されているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-335">Returns a value that indicates whether the specified rune is categorized as a number.</span></span></summary>
        <returns><span data-ttu-id="7b217-336"><see langword="true" /> が数字である場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-336"><see langword="true" /> if <paramref name="value" /> is a number; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-337">このメソッドは、<xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> に対してクエリを実行し、その結果を <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>、<xref:System.Globalization.UnicodeCategory.LetterNumber>、および <xref:System.Globalization.UnicodeCategory.OtherNumber>のいずれかの値と比較することと同じです。</span><span class="sxs-lookup"><span data-stu-id="7b217-337">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against any of the values <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>, <xref:System.Globalization.UnicodeCategory.LetterNumber>, and <xref:System.Globalization.UnicodeCategory.OtherNumber>.</span></span>

<span data-ttu-id="7b217-338">詳細については、「<xref:System.Char.IsNumber%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-338">For more information, see <xref:System.Char.IsNumber%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsPunctuation(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPunctuation (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPunctuation(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsPunctuation : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsPunctuation value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-339">評価するルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-339">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="7b217-340">指定されたルーンが区切り記号として分類されているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-340">Returns a value that indicates whether the specified rune is categorized as a punctuation mark.</span></span></summary>
        <returns><span data-ttu-id="7b217-341"><see langword="true" /> が区切り記号の場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-341"><see langword="true" /> if <paramref name="value" /> is a punctuation mark; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-342">このメソッドは、<xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> に対してクエリを実行し、結果を <xref:System.Globalization.UnicodeCategory.ConnectorPunctuation>、<xref:System.Globalization.UnicodeCategory.DashPunctuation>、<xref:System.Globalization.UnicodeCategory.OpenPunctuation>、<xref:System.Globalization.UnicodeCategory.ClosePunctuation>、<xref:System.Globalization.UnicodeCategory.InitialQuotePunctuation>、<xref:System.Globalization.UnicodeCategory.FinalQuotePunctuation>、<xref:System.Globalization.UnicodeCategory.OtherPunctuation>のいずれかの値と比較することと同じです。</span><span class="sxs-lookup"><span data-stu-id="7b217-342">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against any of the values <xref:System.Globalization.UnicodeCategory.ConnectorPunctuation>, <xref:System.Globalization.UnicodeCategory.DashPunctuation>, <xref:System.Globalization.UnicodeCategory.OpenPunctuation>, <xref:System.Globalization.UnicodeCategory.ClosePunctuation>, <xref:System.Globalization.UnicodeCategory.InitialQuotePunctuation>, <xref:System.Globalization.UnicodeCategory.FinalQuotePunctuation>, and <xref:System.Globalization.UnicodeCategory.OtherPunctuation>.</span></span>

<span data-ttu-id="7b217-343">詳細については、「<xref:System.Char.IsPunctuation%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-343">For more information, see <xref:System.Char.IsPunctuation%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="C#" Value="public static bool IsSeparator (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsSeparator(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSeparator (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSeparator(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsSeparator : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsSeparator value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-344">評価するルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-344">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="7b217-345">指定されたルーンが区切り文字として分類されているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-345">Returns a value that indicates whether the specified rune is categorized as a separator character.</span></span></summary>
        <returns><span data-ttu-id="7b217-346"><see langword="true" /> が区切り文字である場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-346"><see langword="true" /> if <paramref name="value" /> is a separator character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-347">このメソッドは、<xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> に対してクエリを実行し、その結果を <xref:System.Globalization.UnicodeCategory.SpaceSeparator>、<xref:System.Globalization.UnicodeCategory.LineSeparator>、および <xref:System.Globalization.UnicodeCategory.ParagraphSeparator>のいずれかの値と比較することと同じです。</span><span class="sxs-lookup"><span data-stu-id="7b217-347">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against any of the values <xref:System.Globalization.UnicodeCategory.SpaceSeparator>, <xref:System.Globalization.UnicodeCategory.LineSeparator>, and <xref:System.Globalization.UnicodeCategory.ParagraphSeparator>.</span></span>

<span data-ttu-id="7b217-348">詳細については、「<xref:System.Char.IsSeparator%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-348">For more information, see <xref:System.Char.IsSeparator%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsSymbol(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSymbol (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSymbol(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsSymbol : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsSymbol value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-349">評価するルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-349">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="7b217-350">指定されたルーンが記号として分類されているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-350">Returns a value that indicates whether the specified rune is categorized as a symbol character.</span></span></summary>
        <returns><span data-ttu-id="7b217-351"><paramref name="value" /> が記号である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-351"><see langword="true" /> if <paramref name="value" /> is a symbol character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-352">このメソッドは、<xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> に対してクエリを実行し、その結果を <xref:System.Globalization.UnicodeCategory.MathSymbol>、<xref:System.Globalization.UnicodeCategory.CurrencySymbol>、<xref:System.Globalization.UnicodeCategory.ModifierSymbol>、および <xref:System.Globalization.UnicodeCategory.OtherSymbol>のいずれかの値と比較することと同じです。</span><span class="sxs-lookup"><span data-stu-id="7b217-352">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against any of the values <xref:System.Globalization.UnicodeCategory.MathSymbol>, <xref:System.Globalization.UnicodeCategory.CurrencySymbol>, <xref:System.Globalization.UnicodeCategory.ModifierSymbol>, and <xref:System.Globalization.UnicodeCategory.OtherSymbol>.</span></span>

<span data-ttu-id="7b217-353">詳細については、「<xref:System.Char.IsSymbol%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-353">For more information, see <xref:System.Char.IsSymbol%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsUpper(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUpper (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUpper(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsUpper : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsUpper value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-354">評価するルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-354">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="7b217-355">指定されたルーンが大文字として分類されているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-355">Returns a value that indicates whether the specified rune is categorized as an uppercase letter.</span></span></summary>
        <returns><span data-ttu-id="7b217-356"><paramref name="value" /> が大文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-356"><see langword="true" /> if <paramref name="value" /> is an uppercase letter; otherwise,<see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-357">このメソッドは、<xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> に対してクエリを実行し、結果を <xref:System.Globalization.UnicodeCategory.UppercaseLetter>と比較することと同じです。</span><span class="sxs-lookup"><span data-stu-id="7b217-357">This method is equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against <xref:System.Globalization.UnicodeCategory.UppercaseLetter>.</span></span>

<span data-ttu-id="7b217-358">詳細については、「<xref:System.Char.IsUpper%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-358">For more information, see <xref:System.Char.IsUpper%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsValid(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsValid (value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(int value);" />
      <MemberSignature Language="F#" Value="static member IsValid : int -&gt; bool" Usage="System.Text.Rune.IsValid value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-359">Unicode スカラー値。</span><span class="sxs-lookup"><span data-stu-id="7b217-359">The Unicode scalar value.</span></span></param>
        <summary><span data-ttu-id="7b217-360">32 ビットの符号付き整数が有効な Unicode スカラー値、すなわち、[ U+0000..U+D7FF ] (最初と最後の要素を含む) または [ U+E000..U+10FFFF ] (最初と最後の要素を含む) という範囲内にあるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-360">Returns a value that indicates whether a 32-bit signed integer represents a valid Unicode scalar value; that is, it is in the range [ U+0000..U+D7FF ], inclusive; or [ U+E000..U+10FFFF ], inclusive.</span></span></summary>
        <returns><span data-ttu-id="7b217-361"><paramref name="value" /> が有効な Unicode スカラー値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-361"><see langword="true" /> if <paramref name="value" /> is a valid Unicode scalar value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsValid(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsValid (value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member IsValid : uint32 -&gt; bool" Usage="System.Text.Rune.IsValid value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-362">Unicode スカラー値。</span><span class="sxs-lookup"><span data-stu-id="7b217-362">The Unicode scalar value.</span></span></param>
        <summary><span data-ttu-id="7b217-363">32 ビットの符号なし整数が有効な Unicode スカラー値、すなわち、[ U+0000..U+D7FF ] (最初と最後の要素を含む) または [ U+E000..U+10FFFF ] (最初と最後の要素を含む) という範囲内にあるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-363">Returns a value that indicates whether a 32-bit unsigned integer represents a valid Unicode scalar value; that is, it is in the range [ U+0000..U+D7FF ], inclusive, or [ U+E000..U+10FFFF ], inclusive.</span></span></summary>
        <returns><span data-ttu-id="7b217-364"><paramref name="value" /> が有効な Unicode スカラー値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-364"><see langword="true" /> if <paramref name="value" /> is a valid Unicode scalar value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.IsWhiteSpace(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsWhiteSpace (value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWhiteSpace(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member IsWhiteSpace : System.Text.Rune -&gt; bool" Usage="System.Text.Rune.IsWhiteSpace value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-365">評価するルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-365">The rune to evaluate.</span></span></param>
        <summary><span data-ttu-id="7b217-366">指定されたルーンが空白文字として分類されているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-366">Returns a value that indicates whether the specified rune is categorized as a white space character.</span></span></summary>
        <returns><span data-ttu-id="7b217-367"><paramref name="value" /> が空白文字の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-367"><see langword="true" /> if <paramref name="value" /> is a white space character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-368">このメソッドは、通常、<xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> に対してクエリを実行し、その結果を <xref:System.Globalization.UnicodeCategory.SpaceSeparator>、<xref:System.Globalization.UnicodeCategory.LineSeparator>、および <xref:System.Globalization.UnicodeCategory.ParagraphSeparator>のいずれかの値と比較することと同じです。</span><span class="sxs-lookup"><span data-stu-id="7b217-368">This method is generally equivalent to querying <xref:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)> and comparing the result against any of the values <xref:System.Globalization.UnicodeCategory.SpaceSeparator>, <xref:System.Globalization.UnicodeCategory.LineSeparator>, and <xref:System.Globalization.UnicodeCategory.ParagraphSeparator>.</span></span> <span data-ttu-id="7b217-369">ただし、<xref:System.Globalization.UnicodeCategory.Control> カテゴリにはいくつかの <xref:System.Text.Rune>があります。これは空白文字としても分類され、このメソッドはこれらの値に対してアカウントを持ちます。</span><span class="sxs-lookup"><span data-stu-id="7b217-369">However, there are some <xref:System.Text.Rune>s in the <xref:System.Globalization.UnicodeCategory.Control> category which are also classified as white space characters, and this method accounts for those values.</span></span>

<span data-ttu-id="7b217-370">詳細については、「<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7b217-370">For more information, see <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Text.Rune left, System.Text.Rune right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Text.Rune left, valuetype System.Text.Rune right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_Equality(System.Text.Rune,System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Rune, right As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Text::Rune left, System::Text::Rune right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Text.Rune * System.Text.Rune -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Text.Rune" />
        <Parameter Name="right" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="7b217-371">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="7b217-371">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="7b217-372">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="7b217-372">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="7b217-373">2 つの <see cref="T:System.Text.Rune" /> インスタンスが等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-373">Returns a value that indicates whether two <see cref="T:System.Text.Rune" /> instances are equal.</span></span></summary>
        <returns><span data-ttu-id="7b217-374"><paramref name="left" /> と <paramref name="right" /> が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-374"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Text.Rune (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Text.Rune op_Explicit(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_Explicit(System.Char)~System.Text.Rune" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (ch As Char) As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Text::Rune(char ch);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : char -&gt; System.Text.Rune" Usage="System.Text.Rune.op_Explicit ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch"><span data-ttu-id="7b217-375">変換する 16 ビットの Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="7b217-375">The 16-bit Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="7b217-376">16 ビットの Unicode 文字の <see cref="T:System.Text.Rune" /> への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="7b217-376">Defines an explicit conversion of a 16-bit Unicode character to a <see cref="T:System.Text.Rune" />.</span></span></summary>
        <returns><span data-ttu-id="7b217-377">32 ビットの Unicode 文字としての <paramref name="ch" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-377"><paramref name="ch" /> as a 32-bit Unicode character.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7b217-378"><paramref name="ch" /> は、サロゲート コード ポイントを表す Unicode スカラーです。</span><span class="sxs-lookup"><span data-stu-id="7b217-378"><paramref name="ch" /> is a Unicode scalar that represents a surrogate code point.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Text.Rune (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Text.Rune op_Explicit(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_Explicit(System.Int32)~System.Text.Rune" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Integer) As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Text::Rune(int value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : int -&gt; System.Text.Rune" Usage="System.Text.Rune.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-379">変換する 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="7b217-379">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="7b217-380">32 ビット符号付き整数の <see cref="T:System.Text.Rune" /> への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="7b217-380">Defines an explicit conversion of a 32-bit signed integer to a <see cref="T:System.Text.Rune" />.</span></span></summary>
        <returns><span data-ttu-id="7b217-381">32 ビットの Unicode 文字としての <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-381"><paramref name="value" /> as a 32-bit Unicode character.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7b217-382"><paramref name="value" /> は無効な Unicode スカラーです。</span><span class="sxs-lookup"><span data-stu-id="7b217-382"><paramref name="value" /> is an invalid Unicode scalar.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Text.Rune (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Text.Rune op_Explicit(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_Explicit(System.UInt32)~System.Text.Rune" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As UInteger) As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Text::Rune(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : uint32 -&gt; System.Text.Rune" Usage="System.Text.Rune.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-383">変換する 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="7b217-383">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="7b217-384">32 ビット符号なし整数の <see cref="T:System.Text.Rune" /> への明示的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="7b217-384">Defines an explicit conversion of a 32-bit unsigned integer to a <see cref="T:System.Text.Rune" />.</span></span></summary>
        <returns><span data-ttu-id="7b217-385">32 ビットの Unicode 文字としての <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-385"><paramref name="value" /> as a 32-bit Unicode character.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7b217-386"><paramref name="value" /> は無効な Unicode スカラーです。</span><span class="sxs-lookup"><span data-stu-id="7b217-386"><paramref name="value" /> is an invalid Unicode scalar.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Text.Rune left, System.Text.Rune right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Text.Rune left, valuetype System.Text.Rune right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_GreaterThan(System.Text.Rune,System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Rune, right As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Text::Rune left, System::Text::Rune right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Text.Rune * System.Text.Rune -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Text.Rune" />
        <Parameter Name="right" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="7b217-387">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="7b217-387">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="7b217-388">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="7b217-388">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="7b217-389">指定した <see cref="T:System.Text.Rune" /> が、指定した別の <see cref="T:System.Text.Rune" /> より大きいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-389">Returns a value indicating whether a specified <see cref="T:System.Text.Rune" /> is greater than another specified <see cref="T:System.Text.Rune" />.</span></span></summary>
        <returns><span data-ttu-id="7b217-390"><paramref name="left" /> が <paramref name="right" /> より大きい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-390"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Text.Rune left, System.Text.Rune right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Text.Rune left, valuetype System.Text.Rune right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_GreaterThanOrEqual(System.Text.Rune,System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Rune, right As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Text::Rune left, System::Text::Rune right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Text.Rune * System.Text.Rune -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Text.Rune" />
        <Parameter Name="right" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="7b217-391">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="7b217-391">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="7b217-392">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="7b217-392">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="7b217-393">指定した <see cref="T:System.Text.Rune" /> が、指定した別の <see cref="T:System.Text.Rune" /> 以上かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-393">Returns a value indicating whether a specified <see cref="T:System.Text.Rune" /> is greater than or equal to another specified <see cref="T:System.Text.Rune" />.</span></span></summary>
        <returns><span data-ttu-id="7b217-394"><paramref name="left" /> が <paramref name="right" /> 以上の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-394"><see langword="true" /> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Text.Rune left, System.Text.Rune right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Text.Rune left, valuetype System.Text.Rune right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_Inequality(System.Text.Rune,System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Rune, right As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Text::Rune left, System::Text::Rune right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Text.Rune * System.Text.Rune -&gt; bool" Usage="System.Text.Rune.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Text.Rune" />
        <Parameter Name="right" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="7b217-395">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="7b217-395">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="7b217-396">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="7b217-396">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="7b217-397">2 つの <see cref="T:System.Text.Rune" /> インスタンスの値が異なるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-397">Returns a value that indicates whether two <see cref="T:System.Text.Rune" /> instances have different values.</span></span></summary>
        <returns><span data-ttu-id="7b217-398"><paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-398"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Text.Rune left, System.Text.Rune right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Text.Rune left, valuetype System.Text.Rune right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_LessThan(System.Text.Rune,System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Rune, right As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Text::Rune left, System::Text::Rune right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Text.Rune * System.Text.Rune -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Text.Rune" />
        <Parameter Name="right" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="7b217-399">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="7b217-399">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="7b217-400">比較する 2 番目の値。</span><span class="sxs-lookup"><span data-stu-id="7b217-400">the second value to compare.</span></span></param>
        <summary><span data-ttu-id="7b217-401">指定した <see cref="T:System.Text.Rune" /> が、指定した別の <see cref="T:System.Text.Rune" /> より小さいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-401">Returns a value indicating whether a specified <see cref="T:System.Text.Rune" /> is less than another specified <see cref="T:System.Text.Rune" />.</span></span></summary>
        <returns><span data-ttu-id="7b217-402"><paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-402"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Text.Rune left, System.Text.Rune right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Text.Rune left, valuetype System.Text.Rune right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.op_LessThanOrEqual(System.Text.Rune,System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Rune, right As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Text::Rune left, System::Text::Rune right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Text.Rune * System.Text.Rune -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Text.Rune" />
        <Parameter Name="right" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="7b217-403">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="7b217-403">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="7b217-404">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="7b217-404">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="7b217-405">指定した <see cref="T:System.Text.Rune" /> が、指定したもう 1 つの <see cref="T:System.Text.Rune" /> 以下であるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-405">Returns a value indicating whether a specified <see cref="T:System.Text.Rune" /> is less than or equal to another specified <see cref="T:System.Text.Rune" />.</span></span></summary>
        <returns><span data-ttu-id="7b217-406"><paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-406"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Plane">
      <MemberSignature Language="C#" Value="public int Plane { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Plane" />
      <MemberSignature Language="DocId" Value="P:System.Text.Rune.Plane" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Plane As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Plane { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Plane : int" Usage="System.Text.Rune.Plane" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7b217-407">このスカラーを含む Unicode 平面 (0 から 16 まで、0 と 16 を含む) を取得します。</span><span class="sxs-lookup"><span data-stu-id="7b217-407">Gets the Unicode plane (0 to 16, inclusive) that contains this scalar.</span></span></summary>
        <value><span data-ttu-id="7b217-408">このスカラーを含む Unicode 平面 (0 ~ 16)。</span><span class="sxs-lookup"><span data-stu-id="7b217-408">The Unicode plane (0 to 16, inclusive) that contains this scalar.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplacementChar">
      <MemberSignature Language="C#" Value="public static System.Text.Rune ReplacementChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Text.Rune ReplacementChar" />
      <MemberSignature Language="DocId" Value="P:System.Text.Rune.ReplacementChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ReplacementChar As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Rune ReplacementChar { System::Text::Rune get(); };" />
      <MemberSignature Language="F#" Value="member this.ReplacementChar : System.Text.Rune" Usage="System.Text.Rune.ReplacementChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7b217-409">Unicode 置換文字 U+FFFD を表す <see cref="T:System.Text.Rune" /> インスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="7b217-409">Gets a <see cref="T:System.Text.Rune" /> instance that represents the Unicode replacement character U+FFFD.</span></span></summary>
        <value><span data-ttu-id="7b217-410">Unicode 置換文字 U+FFFD を表す <see cref="T:System.Text.Rune" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="7b217-410">A <see cref="T:System.Text.Rune" /> instance that represents the Unicode replacement character U+FFFD.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static System.Text.Rune ToLower (System.Text.Rune value, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.Rune ToLower(valuetype System.Text.Rune value, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.ToLower(System.Text.Rune,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLower (value As Rune, culture As CultureInfo) As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Rune ToLower(System::Text::Rune value, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToLower : System.Text.Rune * System.Globalization.CultureInfo -&gt; System.Text.Rune" Usage="System.Text.Rune.ToLower (value, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-411">変換する 32 ビットの Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="7b217-411">The 32-bit Unicode character to convert.</span></span></param>
        <param name="culture"><span data-ttu-id="7b217-412">カルチャ固有の大文字と小文字の規則を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7b217-412">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="7b217-413">指定されたカルチャの大文字と小文字の規則を使用して、指定された <see cref="T:System.Text.Rune" /> のコピーを小文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-413">Returns a copy of the specified <see cref="T:System.Text.Rune" /> converted to lowercase, using the casing rules of the specified culture.</span></span></summary>
        <returns><span data-ttu-id="7b217-414"><paramref name="value" /> の小文字表現。</span><span class="sxs-lookup"><span data-stu-id="7b217-414">The lowercase equivalent of <paramref name="value" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public static System.Text.Rune ToLowerInvariant (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.Rune ToLowerInvariant(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.ToLowerInvariant(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLowerInvariant (value As Rune) As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Rune ToLowerInvariant(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member ToLowerInvariant : System.Text.Rune -&gt; System.Text.Rune" Usage="System.Text.Rune.ToLowerInvariant value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-415">変換する 32 ビットの Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="7b217-415">The 32-bit Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="7b217-416">インバリアント カルチャの大文字と小文字の規則を使用して、指定された <see cref="T:System.Text.Rune" /> のコピーを小文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-416">Returns a copy of the specified <see cref="T:System.Text.Rune" /> converted to lowercase using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="7b217-417"><paramref name="value" /> の小文字表現。</span><span class="sxs-lookup"><span data-stu-id="7b217-417">The lowercase equivalent of <paramref name="value" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="rune.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7b217-418">この <see cref="T:System.Text.Rune" /> オブジェクトの文字列表現を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-418">Returns the string representation of this <see cref="T:System.Text.Rune" /> instance.</span></span></summary>
        <returns><span data-ttu-id="7b217-419">このルーンの文字列形式。</span><span class="sxs-lookup"><span data-stu-id="7b217-419">The string representation of this rune.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static System.Text.Rune ToUpper (System.Text.Rune value, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.Rune ToUpper(valuetype System.Text.Rune value, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.ToUpper(System.Text.Rune,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpper (value As Rune, culture As CultureInfo) As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Rune ToUpper(System::Text::Rune value, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToUpper : System.Text.Rune * System.Globalization.CultureInfo -&gt; System.Text.Rune" Usage="System.Text.Rune.ToUpper (value, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-420">変換する 32 ビットの Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="7b217-420">The 32-bit Unicode character to convert.</span></span></param>
        <param name="culture"><span data-ttu-id="7b217-421">カルチャ固有の大文字と小文字の規則を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7b217-421">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="7b217-422">指定されたカルチャの大文字と小文字の規則を使用して、指定された <see cref="T:System.Text.Rune" /> のコピーを大文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-422">Returns a copy of the specified <see cref="T:System.Text.Rune" /> converted to uppercase, using the casing rules of the specified culture.</span></span></summary>
        <returns><span data-ttu-id="7b217-423"><paramref name="value" /> の大文字表現。</span><span class="sxs-lookup"><span data-stu-id="7b217-423">The uppercase equivalent of <paramref name="value" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public static System.Text.Rune ToUpperInvariant (System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.Rune ToUpperInvariant(valuetype System.Text.Rune value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.ToUpperInvariant(System.Text.Rune)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpperInvariant (value As Rune) As Rune" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Rune ToUpperInvariant(System::Text::Rune value);" />
      <MemberSignature Language="F#" Value="static member ToUpperInvariant : System.Text.Rune -&gt; System.Text.Rune" Usage="System.Text.Rune.ToUpperInvariant value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Rune</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Rune" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-424">変換する 32 ビットの Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="7b217-424">The 32-bit Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="7b217-425">インバリアント カルチャの大文字と小文字の規則を使用して、指定された <see cref="T:System.Text.Rune" /> のコピーを大文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-425">Returns a copy of the specified <see cref="T:System.Text.Rune" /> converted to uppercase using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="7b217-426"><paramref name="value" /> の大文字表現。</span><span class="sxs-lookup"><span data-stu-id="7b217-426">The uppercase equivalent of <paramref name="value" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreate">
      <MemberSignature Language="C#" Value="public static bool TryCreate (char ch, out System.Text.Rune result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryCreate(char ch, [out] valuetype System.Text.Rune&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.TryCreate(System.Char,System.Text.Rune@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCreate (ch As Char, ByRef result As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryCreate(char ch, [Runtime::InteropServices::Out] System::Text::Rune % result);" />
      <MemberSignature Language="F#" Value="static member TryCreate : char * Rune -&gt; bool" Usage="System.Text.Rune.TryCreate (ch, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
        <Parameter Name="result" Type="System.Text.Rune" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ch"><span data-ttu-id="7b217-427">ルーン作成の元になる文字。</span><span class="sxs-lookup"><span data-stu-id="7b217-427">The character from which to create the rune.</span></span></param>
        <param name="result"><span data-ttu-id="7b217-428">このメソッドから制御が戻るときに、<paramref name="ch" /> に対応するルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-428">When this method returns, the rune that corresponds to <paramref name="ch" />.</span></span></param>
        <summary><span data-ttu-id="7b217-429">指定された文字から <see cref="T:System.Text.Rune" /> の作成を試し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-429">Attempts to create a <see cref="T:System.Text.Rune" /> from a specified character and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="7b217-430">メソッドが成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-430"><see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreate">
      <MemberSignature Language="C#" Value="public static bool TryCreate (int value, out System.Text.Rune result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryCreate(int32 value, [out] valuetype System.Text.Rune&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.TryCreate(System.Int32,System.Text.Rune@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCreate (value As Integer, ByRef result As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryCreate(int value, [Runtime::InteropServices::Out] System::Text::Rune % result);" />
      <MemberSignature Language="F#" Value="static member TryCreate : int * Rune -&gt; bool" Usage="System.Text.Rune.TryCreate (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="result" Type="System.Text.Rune" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-431">Unicode スカラー値。</span><span class="sxs-lookup"><span data-stu-id="7b217-431">The Unicode scalar value.</span></span></param>
        <param name="result"><span data-ttu-id="7b217-432">このメソッドから制御が戻るときに、<paramref name="value" /> に対応するルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-432">When this method returns, the rune that corresponds to <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="7b217-433">Unicode スカラー値を表す指定された符号付き整数から <see cref="T:System.Text.Rune" /> の作成を試します。</span><span class="sxs-lookup"><span data-stu-id="7b217-433">Attempts to create a <see cref="T:System.Text.Rune" /> from a specified signed integer that represents a Unicode scalar value.</span></span></summary>
        <returns><span data-ttu-id="7b217-434">メソッドが成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-434"><see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreate">
      <MemberSignature Language="C#" Value="public static bool TryCreate (uint value, out System.Text.Rune result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryCreate(unsigned int32 value, [out] valuetype System.Text.Rune&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.TryCreate(System.UInt32,System.Text.Rune@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCreate (value As UInteger, ByRef result As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryCreate(System::UInt32 value, [Runtime::InteropServices::Out] System::Text::Rune % result);" />
      <MemberSignature Language="F#" Value="static member TryCreate : uint32 * Rune -&gt; bool" Usage="System.Text.Rune.TryCreate (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="result" Type="System.Text.Rune" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7b217-435">Unicode スカラー値。</span><span class="sxs-lookup"><span data-stu-id="7b217-435">The Unicode scalar value.</span></span></param>
        <param name="result"><span data-ttu-id="7b217-436">このメソッドから制御が戻るときに、<paramref name="value" /> に対応するルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-436">When this method returns, the rune that corresponds to <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="7b217-437">Unicode スカラー値を表す、指定された符号付き 32 ビット整数から <see cref="T:System.Text.Rune" /> の作成を試します。</span><span class="sxs-lookup"><span data-stu-id="7b217-437">Attempts to create a <see cref="T:System.Text.Rune" /> from the specified 32-bit unsigned integer that represents a Unicode scalar value.</span></span></summary>
        <returns><span data-ttu-id="7b217-438">メソッドが成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-438"><see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreate">
      <MemberSignature Language="C#" Value="public static bool TryCreate (char highSurrogate, char lowSurrogate, out System.Text.Rune result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryCreate(char highSurrogate, char lowSurrogate, [out] valuetype System.Text.Rune&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.TryCreate(System.Char,System.Char,System.Text.Rune@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCreate (highSurrogate As Char, lowSurrogate As Char, ByRef result As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryCreate(char highSurrogate, char lowSurrogate, [Runtime::InteropServices::Out] System::Text::Rune % result);" />
      <MemberSignature Language="F#" Value="static member TryCreate : char * char * Rune -&gt; bool" Usage="System.Text.Rune.TryCreate (highSurrogate, lowSurrogate, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" />
        <Parameter Name="lowSurrogate" Type="System.Char" />
        <Parameter Name="result" Type="System.Text.Rune" RefType="out" />
      </Parameters>
      <Docs>
        <param name="highSurrogate"><span data-ttu-id="7b217-439">サロゲート ペアの上位サロゲート。</span><span class="sxs-lookup"><span data-stu-id="7b217-439">The high surrogate of the surrogate pair.</span></span></param>
        <param name="lowSurrogate"><span data-ttu-id="7b217-440">サロゲート ペアの下位サロゲート。</span><span class="sxs-lookup"><span data-stu-id="7b217-440">The low surrogate of the surrogate pair.</span></span></param>
        <param name="result"><span data-ttu-id="7b217-441">指定のサロゲート ペアに対応するルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-441">The rune that corresponds to the specified surrogate pair.</span></span></param>
        <summary><span data-ttu-id="7b217-442">指定された UTF-16 サロゲート ペアから <see cref="T:System.Text.Rune" /> の作成を試し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-442">Attempts to create a <see cref="T:System.Text.Rune" /> from the specified UTF-16 surrogate pair and returns a value that indicates whether the operation was successful.</span></span></summary>
        <returns><span data-ttu-id="7b217-443">操作が成功した場合は <see langword="true" />。入力値が形式の正しい UTF-16 サロゲート ペアを表さない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-443"><see langword="true" /> if the operation succeeded; <see langword="false" /> if the input values don't represent a well-formed UTF-16 surrogate pair.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryEncodeToUtf16">
      <MemberSignature Language="C#" Value="public bool TryEncodeToUtf16 (Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEncodeToUtf16(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.TryEncodeToUtf16(System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEncodeToUtf16 (destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEncodeToUtf16(Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberSignature Language="F#" Value="member this.TryEncodeToUtf16 : Span&lt;char&gt; * int -&gt; bool" Usage="rune.TryEncodeToUtf16 (destination, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="7b217-444">UTF-16 でエンコードされた値として、この値の書き込み先となるバッファー。</span><span class="sxs-lookup"><span data-stu-id="7b217-444">The buffer to which to write this value as UTF-16 encoded value.</span></span></param>
        <param name="charsWritten"><span data-ttu-id="7b217-445"><paramref name="destination" /> に書き込まれた <see cref="T:System.Char" /> 値の数。あるいは、ターゲット バッファーに出力を入れる大きさがない場合は 0。</span><span class="sxs-lookup"><span data-stu-id="7b217-445">The number of <see cref="T:System.Char" /> values written to <paramref name="destination" />, or 0 if the destination buffer is not large enough to contain the output.</span></span></param>
        <summary><span data-ttu-id="7b217-446">この <see cref="T:System.Text.Rune" /> を、UTF-16 でエンコードされたターゲット バッファーにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="7b217-446">Encodes this <see cref="T:System.Text.Rune" /> to a UTF-16 encoded destination buffer.</span></span></summary>
        <returns><span data-ttu-id="7b217-447">値がバッファーに書き込まれた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-447"><see langword="true" /> if the value was written to the buffer; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
## Remarks

<span data-ttu-id="7b217-448"><xref:System.Text.Rune.Utf16SequenceLength> プロパティは、`destination` バッファーに必要なサイズを決定するために事前に照会できます。</span><span class="sxs-lookup"><span data-stu-id="7b217-448">The <xref:System.Text.Rune.Utf16SequenceLength> property can be queried ahead of time to determine the required size of the `destination` buffer.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryEncodeToUtf8">
      <MemberSignature Language="C#" Value="public bool TryEncodeToUtf8 (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEncodeToUtf8(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.TryEncodeToUtf8(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEncodeToUtf8 (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEncodeToUtf8(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TryEncodeToUtf8 : Span&lt;byte&gt; * int -&gt; bool" Usage="rune.TryEncodeToUtf8 (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="7b217-449">UTF-8 でエンコードされた値の書き込み先となるバッファー。</span><span class="sxs-lookup"><span data-stu-id="7b217-449">The buffer to which to write the UTF-8 encoded value.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="7b217-450"><paramref name="destination" /> に書き込まれた <see cref="T:System.Byte" /> 値の数。あるいは、ターゲット バッファーに出力を入れる大きさがない場合は 0。</span><span class="sxs-lookup"><span data-stu-id="7b217-450">The number of <see cref="T:System.Byte" /> values written to <paramref name="destination" />, or 0 if the destination buffer is not large enough to contain the output.</span></span></param>
        <summary><span data-ttu-id="7b217-451">この <see cref="T:System.Text.Rune" /> を、UTF-8 でエンコードされたターゲット バッファーにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="7b217-451">Encodes this <see cref="T:System.Text.Rune" /> to a UTF-8 encoded destination buffer.</span></span></summary>
        <returns><span data-ttu-id="7b217-452">値がバッファーに書き込まれた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-452"><see langword="true" /> if the value was written to the buffer; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
## Remarks

<span data-ttu-id="7b217-453"><xref:System.Text.Rune.Utf8SequenceLength> プロパティは、`destination` バッファーに必要なサイズを決定するために事前に照会できます。</span><span class="sxs-lookup"><span data-stu-id="7b217-453">The <xref:System.Text.Rune.Utf8SequenceLength> property can be queried ahead of time to determine the required size of the `destination` buffer.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetRuneAt">
      <MemberSignature Language="C#" Value="public static bool TryGetRuneAt (string input, int index, out System.Text.Rune value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetRuneAt(string input, int32 index, [out] valuetype System.Text.Rune&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Rune.TryGetRuneAt(System.String,System.Int32,System.Text.Rune@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetRuneAt (input As String, index As Integer, ByRef value As Rune) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetRuneAt(System::String ^ input, int index, [Runtime::InteropServices::Out] System::Text::Rune % value);" />
      <MemberSignature Language="F#" Value="static member TryGetRuneAt : string * int * Rune -&gt; bool" Usage="System.Text.Rune.TryGetRuneAt (input, index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Text.Rune" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="7b217-454">ルーンを抽出する文字列。</span><span class="sxs-lookup"><span data-stu-id="7b217-454">The string from which to extract the rune.</span></span></param>
        <param name="index"><span data-ttu-id="7b217-455">ルーンの抽出元となる、0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="7b217-455">The zero-based index from which to extract the rune.</span></span></param>
        <param name="value"><span data-ttu-id="7b217-456">このメソッドから制御が戻るときに、デコードされたルーン。</span><span class="sxs-lookup"><span data-stu-id="7b217-456">When this method returns, the decoded rune.</span></span></param>
        <summary><span data-ttu-id="7b217-457">文字列において指定された位置から始まる <see cref="T:System.Text.Rune" /> の取得を試し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="7b217-457">Attempts to get the <see cref="T:System.Text.Rune" /> that begins at a specified position in a string, and return a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="7b217-458">スカラー値が指定のインデックスから正常に抽出された場合は <see langword="true" />。データが無効なため、値を抽出できなかった場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7b217-458"><see langword="true" /> if a scalar value was successfully extracted from the specified index; <see langword="false" /> if a value could not be extracted because of invalid data.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7b217-459"><paramref name="input" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="7b217-459"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7b217-460"><paramref name="index" /> は <paramref name="input" /> の範囲外です。</span><span class="sxs-lookup"><span data-stu-id="7b217-460"><paramref name="index" /> is out of the range of <paramref name="input" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Utf16SequenceLength">
      <MemberSignature Language="C#" Value="public int Utf16SequenceLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Utf16SequenceLength" />
      <MemberSignature Language="DocId" Value="P:System.Text.Rune.Utf16SequenceLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Utf16SequenceLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Utf16SequenceLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Utf16SequenceLength : int" Usage="System.Text.Rune.Utf16SequenceLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7b217-461">このスカラー値を表すために必要な UTF-16 シーケンスのコード単位 (<see cref="T:System.Char" />) の長さを取得します。</span><span class="sxs-lookup"><span data-stu-id="7b217-461">Gets the length in code units (<see cref="T:System.Char" />) of the UTF-16 sequence required to represent this scalar value.</span></span></summary>
        <value><span data-ttu-id="7b217-462">このスカラー値を表すために必要な UTF-16 シーケンスのコード単位 (<see cref="T:System.Char" />) の長さ。</span><span class="sxs-lookup"><span data-stu-id="7b217-462">The length in code units (<see cref="T:System.Char" />) of the UTF-16 sequence required to represent this scalar value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-463">戻り値は1または2になります。</span><span class="sxs-lookup"><span data-stu-id="7b217-463">The return value will be 1 or 2.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utf8SequenceLength">
      <MemberSignature Language="C#" Value="public int Utf8SequenceLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Utf8SequenceLength" />
      <MemberSignature Language="DocId" Value="P:System.Text.Rune.Utf8SequenceLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Utf8SequenceLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Utf8SequenceLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Utf8SequenceLength : int" Usage="System.Text.Rune.Utf8SequenceLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7b217-464">このスカラー値を表すために必要な UTF-8 シーケンスのコード単位の長さを取得します。</span><span class="sxs-lookup"><span data-stu-id="7b217-464">Gets the length in code units of the UTF-8 sequence required to represent this scalar value.</span></span></summary>
        <value><span data-ttu-id="7b217-465">このスカラー値を表すために必要な UTF-8 シーケンスのコード単位の長さ。</span><span class="sxs-lookup"><span data-stu-id="7b217-465">The length in code units of the UTF-8 sequence required to represent this scalar value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7b217-466">戻り値は 1 ~ 4 の範囲です。</span><span class="sxs-lookup"><span data-stu-id="7b217-466">The return value will be 1 through 4, inclusive.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public int Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Value" />
      <MemberSignature Language="DocId" Value="P:System.Text.Rune.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Value { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : int" Usage="System.Text.Rune.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7b217-467">Unicode スカラー値を整数として取得します。</span><span class="sxs-lookup"><span data-stu-id="7b217-467">Gets the Unicode scalar value as an integer.</span></span></summary>
        <value><span data-ttu-id="7b217-468">整数としての Unicode スカラー値。</span><span class="sxs-lookup"><span data-stu-id="7b217-468">The Unicode scalar value as an integer.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
