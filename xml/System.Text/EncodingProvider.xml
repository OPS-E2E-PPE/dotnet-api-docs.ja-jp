<Type Name="EncodingProvider" FullName="System.Text.EncodingProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9095cc2041817c59bf18eceff1fa6a9a1d7eef88" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75118764" /></Metadata><TypeSignature Language="C#" Value="public abstract class EncodingProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncodingProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncodingProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncodingProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncodingProvider abstract" />
  <TypeSignature Language="F#" Value="type EncodingProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>特定のプラットフォームで利用できないエンコードを提供する、エンコーディング プロバイダーの基底クラスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 エンコーディングプロバイダーは、特定のターゲットプラットフォームでは使用できないエンコーディングを提供します。  
  
 Windows デスクトップの .NET Framework では、多数の文字エンコーディングとコードページがサポートされています。 <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType> メソッドを呼び出すことにより、Windows デスクトップの .NET Framework で使用可能なエンコーディングの完全な一覧を取得できます。 一方、.NET Core では、既定では次のエンコーディングのみがサポートされます。  
  
-   ASCII (コードページ 20127)。 <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType> プロパティによって返されます。  
  
-   ISO-8859-1 (コードページ 28591)。  
  
-   UTF-7 (コードページ 65000)。これは <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType> プロパティによって返されます。  
  
-   UTF-8 (コードページ 65001)。 <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> プロパティによって返されます。  
  
-   UTF-16 および 16LE (コードページ 1200)。これは <xref:System.Text.Encoding.Unicode%2A> プロパティによって返されます。  
  
-   UTF-16 BE (コードページ 1201)。 `bigEndian` 値が `true`の <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> または <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> コンストラクターを呼び出すことによってインスタンス化されます。  
  
-   32 UTF-8 と UTF-16 LE (コードページ 12000)。 <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> プロパティによって返されます。  
  
-   UTF (コードページ 12001) は、`bigEndian` パラメーターを持ち、メソッド呼び出しで `true` の値を提供する <xref:System.Text.UTF32Encoding> コンストラクターを呼び出すことによってインスタンス化されます。  
  
 .NET Framework 4.6 以降、<xref:System.Text.EncodingProvider> は、.NET Framework で使用できないエンコードを使用できるようにする基本クラスです。 これには、次の手順が含まれます。  
  
1.  2つの抽象 <xref:System.Text.EncodingProvider.GetEncoding%2A> オーバーロード、<xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> および <xref:System.Text.EncodingProvider.GetEncoding%28System.String%29>をオーバーライドする <xref:System.Text.EncodingProvider> のサブクラスを定義します。 これらのオーバーロードは、コードページ識別子および名前によって、サポートされていないエンコードを返します。 引数0を指定して <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> メソッドを呼び出すと、既定のエンコーディングを返すこともできます。  
  
2.  必要に応じて、仮想 <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> および <xref:System.Text.EncodingProvider.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> メソッドをオーバーライドできます。 基本クラスには既定の実装が用意されているため、ほとんどの場合、これは必要ありません。  
  
3.  <xref:System.Text.EncodingProvider> インスタンスを <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> メソッドに渡して、<xref:System.Text.EncodingProvider> オブジェクトによって提供されるエンコーディングを共通言語ランタイムで使用できるようにします。  
  
4.  <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> オーバーロードを呼び出して、エンコーディングを取得します。 <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> メソッドは、対応する <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType> を呼び出して、要求されたエンコーディングを提供できるかどうかを判断します。  
  
 .NET Framework クラスライブラリには、1つの静的プロパティ <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>が用意されています。これは <xref:System.Text.EncodingProvider> オブジェクトを返します。これにより、デスクトップ .NET Framework クラスライブラリで使用可能なエンコーディングの完全なセットを [!INCLUDE[net_core](~/includes/net-core-md.md)] アプリケーションで使用できるようになります。 さらに、<xref:System.Text.EncodingProvider> クラスから派生させて、独自のエンコーディングを使用できるようにすることができます。  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/system.text.codepagesencodingprovider.instance(v=vs.110).aspx">System.text.codepagesencodingprovider プロパティ</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncodingProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncodingProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Text.EncodingProvider" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>エンコーディングを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding codepage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codepage">要求されたエンコーディングのコード ページ ID。</param>
        <summary>指定したコード ページ ID に関連付けられたエンコーディングを返します。</summary>
        <returns>指定されたコード ページに関連付けられたエンコード。または、この <see langword="null" /> が <see cref="T:System.Text.EncodingProvider" /> に対応する有効なエンコーディングを返すことができない場合は <paramref name="codepage" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 

## Remarks

### <a name="notes-to-inheritors"></a>継承に関する注意事項

[Encoding.getencoding (Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>)メソッドをオーバーライドして、<xref:System.Text.EncodingProvider> サブクラスでサポートされているエンコーディングまたはエンコーディングを返します。 ユーザーコードが[encoding.getencoding (Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>)メソッドを呼び出すことによってエンコーディングを取得しようとすると、メソッドは、有効なエンコーディングを返すまで、登録されているすべてのエンコーディングプロバイダーに `codepage` 識別子を渡します。 有効なエンコーディングが返されない場合、 [encoding.getencoding (Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>)メソッドは、コードページ識別子が `codepage`であるキャッシュされたエンコーディングを取得しようとします。 このため、`codepage` がサポートするエンコーディングのコードページ識別子でない場合、メソッドは `null`を返す必要があります。例外がスローされることはありません。
        
`codepage` 引数の値が0の場合は、既定のコードページを返すように選択することもできます。

## <a name="notes-to-callers"></a>呼び出し元へのメモ
        
このメソッドは、 [encoding.getencoding (Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>)メソッドによって呼び出されます。 ユーザーコードから直接呼び出すことはできません。

        ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> メソッドをオーバーライドして、<see cref="T:System.Text.EncodingProvider" /> サブクラスでサポートされているエンコーディングまたはエンコーディングを返します。 ユーザーコードが <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> メソッドを呼び出すことによってエンコーディングを取得しようとすると、メソッドは、1つのが有効なエンコーディングを返すまで、すべての登録済みエンコードプロバイダーに <paramref name="codepage" /> 識別子を渡します。 有効なエンコーディングが返されない場合、<see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> メソッドは、コードページ識別子が <paramref name="codepage" />であるキャッシュされたエンコーディングを取得しようとします。 このため、<paramref name="codepage" /> がサポートするエンコーディングのコードページ識別子でない場合、メソッドは <see langword="null" />を返す必要があります。例外がスローされることはありません。</para></block>
        <block subset="none" type="usage"><para>このメソッドは、<see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> メソッドによって呼び出されます。 ユーザーコードから直接呼び出すことはできません。</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">要求されたエンコーディングの名前。</param>
        <summary>指定した名前のエンコーディングを返します。</summary>
        <returns>指定された名前に関連付けられたエンコーディング。または、この <see langword="null" /> が <see cref="T:System.Text.EncodingProvider" /> に対応する有効なエンコーディングを返すことができない場合は <paramref name="name" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 
      
## <a name="notes-to-inheritors"></a>継承に関する注意事項 
                  
[Encoding.getencoding (String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>)メソッドをオーバーライドして、<xref:System.Text.EncodingProvider> サブクラスでサポートされているエンコーディングまたはエンコーディングを返します。 ユーザーコードが[encoding.getencoding (String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>)メソッドを呼び出すことによってエンコーディングを取得しようとすると、メソッドは、有効なエンコーディングを返すまで、登録されているすべてのエンコーディングプロバイダーに `name` 引数を渡します。 有効なエンコーディングが返されない場合、 [encoding.getencoding (String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>)メソッドは、名前が `name`であるキャッシュされたエンコーディングを取得しようとします。 このため、`name` がサポートするエンコーディングの名前ではない場合、メソッドは `null`を返す必要があります。 メソッドが例外をスローする唯一のケースは、`name` が `null`場合です。

## <a name="notes-to-callers"></a>呼び出し元へのメモ

このメソッドは、 [encoding.getencoding (String)](<xref:System.Text.Encoding.GetEncoding(System.String)>)メソッドによって呼び出されます。 ユーザーコードから直接呼び出すことはできません。
        ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> メソッドをオーバーライドして、<see cref="T:System.Text.EncodingProvider" /> サブクラスでサポートされているエンコーディングまたはエンコーディングを返します。 ユーザーコードが <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> メソッドを呼び出すことによってエンコーディングを取得しようとすると、メソッドは、1つのが有効なエンコーディングを返すまで、すべての登録済みエンコードプロバイダーに <paramref name="name" /> 引数を渡します。 有効なエンコーディングが返されない場合、<see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> メソッドは、名前が <paramref name="name" />であるキャッシュされたエンコーディングを取得しようとします。 このため、<paramref name="name" /> がサポートするエンコーディングの名前ではない場合、メソッドは <see langword="null" />を返す必要があります。 メソッドが例外をスローする唯一のケースは、<paramref name="name" /> が <see langword="null" />場合です。</para></block>
        <block subset="none" type="usage"><para>このメソッドは、<see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> メソッドによって呼び出されます。 ユーザーコードから直接呼び出すことはできません。</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (codepage, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codepage">要求されたエンコーディングのコード ページ ID。</param>
        <param name="encoderFallback">このエンコーディングで文字をエンコードできない場合にエラー処理プロシージャを提供するオブジェクト。</param>
        <param name="decoderFallback">このエンコーディングでバイト シーケンスをデコードできない場合にエラー処理プロシージャを提供するオブジェクト。</param>
        <summary>指定したコード ページ ID に関連付けられたエンコーディングを返します。 パラメーターには、エンコードできない文字とデコードできないバイト シーケンスのためのエラー ハンドラーを指定します。</summary>
        <returns>指定されたコード ページに関連付けられたエンコード。または、この <see langword="null" /> が <see cref="T:System.Text.EncodingProvider" /> に対応する有効なエンコーディングを返すことができない場合は <paramref name="codepage" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `encoderFallback` パラメーターと `decoderFallback` パラメーターは、エンコーダーが文字をバイトシーケンスに変換できない場合、またはデコーダーがバイトシーケンスを文字に変換できない場合に使用されるフォールバックストラテジを定義するオブジェクトです。 .NET Framework には、次のフォールバックメカニズムが用意されています。  
  
-   例外フォールバック。 `encoderFallback` 引数が <xref:System.Text.EncoderExceptionFallback>のインスタンスである場合、または `decoderExceptionFallback` 引数が <xref:System.Text.DecoderExceptionFallback>のインスタンスである場合、エンコードメソッドは、文字をエンコードできない場合に例外をスローします。バイトシーケンスをデコードできない場合は、デコードメソッドによって例外がスローされます。  
  
-   置換フォールバック。 `encoderFallback` 引数が <xref:System.Text.EncoderReplacementFallback>のインスタンスである場合、または `decoderExceptionFallback` 引数が <xref:System.Text.DecoderReplacementFallback>のインスタンスの場合、エンコードメソッドとデコードメソッドは、エンコードできない文字とバイトシーケンスをデコードできない文字を置換文字列に置き換えます。 パラメーターなしのコンストラクターを呼び出すことによって置換フォールバックオブジェクトをインスタンス化した場合、置換文字は "?" になります。 <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> または <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> コンストラクターを呼び出す場合は、置換後の文字列を指定できます。  
  
-   最適フォールバック。 <xref:System.Text.EncoderFallback> または <xref:System.Text.DecoderFallback> クラスから派生させて、最適な置換機構を実装することができます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>このメソッドの呼び出しは <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> メソッドの実装を使用するため、オーバーライドする必要はありません。 ユーザーコードが <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> メソッドを呼び出すことによってエンコーディングを取得しようとすると、メソッドは、1つのが有効なエンコーディングを返すまで、すべての登録済みエンコードプロバイダーに <paramref name="codepage" /> 識別子を渡します。 有効なエンコーディングが返されない場合、<see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> メソッドは、コードページ識別子が <paramref name="codepage" />であるキャッシュされたエンコーディングを取得しようとします。 このため、<see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> メソッドをオーバーライドすることを選択した場合、サポートされているエンコーディングのコードページ識別子で <paramref name="codepage" /> ない場合、オーバーライドは <see langword="null" /> を返す必要があります。例外がスローされることはありません。</para></block>
        <block subset="none" type="usage"><para>このメソッドは、<see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> メソッドによって呼び出されます。 ユーザーコードから直接呼び出すことはできません。</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (name, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="name">使用するエンコーディングの名前。</param>
        <param name="encoderFallback">このエンコーディングで文字をエンコードできない場合にエラー処理プロシージャを提供するオブジェクト。</param>
        <param name="decoderFallback">現在のエンコーディングでバイト シーケンスをデコードできない場合にエラー処理プロシージャを提供するオブジェクト。</param>
        <summary>指定した名前に関連付けられたエンコーディングを返します。 パラメーターには、エンコードできない文字とデコードできないバイト シーケンスのためのエラー ハンドラーを指定します。</summary>
        <returns>指定された名前に関連付けられたエンコーディング。または、この <see langword="null" /> が <see cref="T:System.Text.EncodingProvider" /> に対応する有効なエンコーディングを返すことができない場合は <paramref name="name" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `encoderFallback` パラメーターと `decoderFallback` パラメーターは、エンコーダーが文字をバイトシーケンスに変換できない場合、またはデコーダーがバイトシーケンスを文字に変換できない場合に使用されるフォールバックストラテジを定義するオブジェクトです。 .NET Framework には、次のフォールバックメカニズムが用意されています。  
  
-   例外フォールバック。 `encoderFallback` 引数が <xref:System.Text.EncoderExceptionFallback>のインスタンスである場合、または `decoderExceptionFallback` 引数が <xref:System.Text.DecoderExceptionFallback>のインスタンスである場合、エンコードメソッドは、文字をエンコードできない場合に例外をスローします。バイトシーケンスをデコードできない場合は、デコードメソッドによって例外がスローされます。  
  
-   置換フォールバック。 `encoderFallback` 引数が <xref:System.Text.EncoderReplacementFallback>のインスタンスである場合、または `decoderExceptionFallback` 引数が <xref:System.Text.DecoderReplacementFallback>のインスタンスの場合、エンコードメソッドとデコードメソッドは、エンコードできない文字とバイトシーケンスをデコードできない文字を置換文字列に置き換えます。 パラメーターなしのコンストラクターを呼び出すことによって置換フォールバックオブジェクトをインスタンス化した場合、置換文字は "?" になります。 <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> または <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> コンストラクターを呼び出す場合は、置換後の文字列を指定できます。  
  
-   最適フォールバック。 <xref:System.Text.EncoderFallback> または <xref:System.Text.DecoderFallback> クラスから派生させて、最適な置換機構を実装することができます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>このメソッドの呼び出しは <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> メソッドの実装を使用するため、オーバーライドする必要はありません。 ユーザーコードが <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> メソッドを呼び出すことによってエンコーディングを取得しようとすると、メソッドは、1つのが有効なエンコーディングを返すまで、すべての登録済みエンコードプロバイダーに <paramref name="codepage" /> 識別子を渡します。 有効なエンコーディングが返されない場合、<see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> メソッドは、コードページ識別子が <paramref name="codepage" />であるキャッシュされたエンコーディングを取得しようとします。 このため、<see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> メソッドをオーバーライドすることを選択した場合、サポートされているエンコーディングのコードページ識別子で <paramref name="codepage" /> ない場合、オーバーライドは <see langword="null" /> を返す必要があります。例外がスローされることはありません。</para></block>
        <block subset="none" type="usage"><para>このメソッドは、<see cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> メソッドによって呼び出されます。 ユーザーコードから直接呼び出すことはできません。</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
  </Members>
</Type>
