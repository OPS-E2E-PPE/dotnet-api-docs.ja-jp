<Type Name="UTF8Encoding" FullName="System.Text.UTF8Encoding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="efce37071091e8b65a540203f5d8081a8cf031aa" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83960355" /></Metadata><TypeSignature Language="C#" Value="public class UTF8Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UTF8Encoding extends System.Text.Encoding" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF8Encoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UTF8Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF8Encoding : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UTF8Encoding = class&#xA;    inherit Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UTF8Encoding extends System.Text.Encoding" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Text.Encoding.Extensions" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Text.Encoding.Extensions" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2cdf1-101">Unicode 文字の UTF-8 エンコーディングを表します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-101">Represents a UTF-8 encoding of Unicode characters.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-102">エンコーディングは、Unicode 文字のセットをバイト シーケンスに変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="2cdf1-103">デコードとは、エンコードされたバイトシーケンスを Unicode 文字のセットに変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="2cdf1-104">UTF-8 は、各コードポイントを 1 ~ 4 バイトのシーケンスとして表す Unicode エンコーディングです。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-104">UTF-8 is a Unicode encoding that represents each code point as a sequence of one to four bytes.</span></span> <span data-ttu-id="2cdf1-105">Utf-16 エンコードと 32 UTF-8 エンコードでは、UTF-8 エンコーディングには "エンディアン" は必要ありません。このエンコード方式は、プロセッサがビッグエンディアンであるかリトルエンディアンであるかに関係なく同じです。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-105">Unlike the UTF-16 and UTF-32 encodings, the UTF-8 encoding does not require "endianness"; the encoding scheme is the same regardless of whether the processor is big-endian or little-endian.</span></span> <span data-ttu-id="2cdf1-106"><xref:System.Text.UTF8Encoding> は、Windows コードページ65001に対応しています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-106"><xref:System.Text.UTF8Encoding> corresponds to the Windows code page 65001.</span></span> <span data-ttu-id="2cdf1-107">UTFs および <xref:System.Text>でサポートされているその他のエンコーディングの詳細については、 [.NET Framework の「文字エンコーディング](/dotnet/standard/base-types/character-encoding)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-107">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](/dotnet/standard/base-types/character-encoding).</span></span>  
  
 <span data-ttu-id="2cdf1-108">バイトオーダーマーク (BOM) を提供するかどうか、およびエラー検出を有効にするかどうかに応じて、さまざまな方法で <xref:System.Text.UTF8Encoding> オブジェクトをインスタンス化できます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-108">You can instantiate a <xref:System.Text.UTF8Encoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM) and whether you want to enable error detection.</span></span> <span data-ttu-id="2cdf1-109">次の表に、<xref:System.Text.UTF8Encoding> オブジェクトを返すコンストラクターと <xref:System.Text.Encoding> プロパティを示します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-109">The following table lists the constructors and the <xref:System.Text.Encoding> property that return a <xref:System.Text.UTF8Encoding> object.</span></span>  
  
|<span data-ttu-id="2cdf1-110">メンバー</span><span class="sxs-lookup"><span data-stu-id="2cdf1-110">Member</span></span>|<span data-ttu-id="2cdf1-111">消費</span><span class="sxs-lookup"><span data-stu-id="2cdf1-111">BOM</span></span>|<span data-ttu-id="2cdf1-112">エラー検出</span><span class="sxs-lookup"><span data-stu-id="2cdf1-112">Error detection</span></span>|  
|------------|---------|---------------------|  
|<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>|<span data-ttu-id="2cdf1-113">はい</span><span class="sxs-lookup"><span data-stu-id="2cdf1-113">Yes</span></span>|<span data-ttu-id="2cdf1-114">いいえ (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="2cdf1-114">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor?displayProperty=nameWithType>|<span data-ttu-id="2cdf1-115">いいえ</span><span class="sxs-lookup"><span data-stu-id="2cdf1-115">No</span></span>|<span data-ttu-id="2cdf1-116">いいえ (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="2cdf1-116">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="2cdf1-117">構成可能</span><span class="sxs-lookup"><span data-stu-id="2cdf1-117">Configurable</span></span>|<span data-ttu-id="2cdf1-118">いいえ (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="2cdf1-118">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="2cdf1-119">構成可能</span><span class="sxs-lookup"><span data-stu-id="2cdf1-119">Configurable</span></span>|<span data-ttu-id="2cdf1-120">構成可能</span><span class="sxs-lookup"><span data-stu-id="2cdf1-120">Configurable</span></span>|  
  
 <span data-ttu-id="2cdf1-121"><xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドは、Unicode 文字のセットをエンコードするためのバイト数を決定し、<xref:System.Text.UTF8Encoding.GetBytes%2A> メソッドは実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-121">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF8Encoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="2cdf1-122">同様に、<xref:System.Text.UTF8Encoding.GetCharCount%2A> メソッドは、バイトシーケンスをデコードする文字数を決定し、<xref:System.Text.UTF8Encoding.GetChars%2A> メソッドと <xref:System.Text.UTF8Encoding.GetString%2A> メソッドが実際のデコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-122">Likewise, the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF8Encoding.GetChars%2A> and <xref:System.Text.UTF8Encoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="2cdf1-123">複数のブロックにまたがるデータをエンコードまたはデコードするときに状態情報を保存できるエンコーダーまたはデコーダー (10万文字セグメントでエンコードされた100万文字の文字列など) では、<xref:System.Text.UTF8Encoding.GetEncoder%2A> プロパティと <xref:System.Text.UTF8Encoding.GetDecoder%2A> プロパティをそれぞれ使用します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-123">For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UTF8Encoding.GetEncoder%2A> and <xref:System.Text.UTF8Encoding.GetDecoder%2A> properties, respectively.</span></span>  
  
 <span data-ttu-id="2cdf1-124">必要に応じて、<xref:System.Text.UTF8Encoding> オブジェクトはバイト順マーク (BOM) を提供します。これは、エンコーディングプロセスによって生成されるバイトストリームの先頭にプレフィックスを付けることができるバイトの配列です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-124">Optionally, the <xref:System.Text.UTF8Encoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the beginning of the byte stream that results from the encoding process.</span></span> <span data-ttu-id="2cdf1-125">UTF-8 でエンコードされたバイトストリームの前にバイトオーダーマーク (BOM) が付いている場合は、デコーダーがバイト順と変換形式または UTF を決定するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-125">If a UTF-8 encoded byte stream is prefaced with a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.</span></span> <span data-ttu-id="2cdf1-126">ただし、Unicode 標準では、UTF-8 でエンコードされたストリームで BOM を要求することも推奨されないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-126">Note, however, that the Unicode Standard neither requires nor recommends a BOM in UTF-8 encoded streams.</span></span> <span data-ttu-id="2cdf1-127">バイト順とバイト順マークの詳細については、unicode[ホームページ](https://go.microsoft.com/fwlink/?LinkId=37123)の unicode 標準を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-127">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
 <span data-ttu-id="2cdf1-128">エンコーダーが BOM を提供するように構成されている場合は、<xref:System.Text.UTF8Encoding.GetPreamble%2A> メソッドを呼び出すことによって取得できます。それ以外の場合、メソッドは空の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-128">If the encoder is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method; otherwise, the method returns an empty array.</span></span> <span data-ttu-id="2cdf1-129"><xref:System.Text.UTF8Encoding> オブジェクトが BOM サポート用に構成されている場合でも、必要に応じて、エンコードされたバイトストリームの先頭に BOM を含める必要があることに注意してください。<xref:System.Text.UTF8Encoding> クラスのエンコーディングメソッドでは、これは自動的には行われません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-129">Note that, even if a <xref:System.Text.UTF8Encoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UTF8Encoding> class do not do this automatically.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2cdf1-130">エラー検出を有効にし、クラスインスタンスのセキュリティを強化するには、<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> コンストラクターを呼び出し、`throwOnInvalidBytes` パラメーターを `true`に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-130">To enable error detection and to make the class instance more secure, you should call the <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> constructor and set the `throwOnInvalidBytes` parameter to `true`.</span></span> <span data-ttu-id="2cdf1-131">エラー検出が有効になっていると、無効な文字またはバイトのシーケンスを検出するメソッドが <xref:System.ArgumentException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-131">With error detection enabled, a method that detects an invalid sequence of characters or bytes throws an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="2cdf1-132">エラー検出を行わないと、例外はスローされず、無効なシーケンスは通常は無視されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-132">Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2cdf1-133">オブジェクトが異なる .NET Framework バージョンを使用してシリアル化および逆シリアル化されている場合、UTF-8 でエンコードされたオブジェクトの状態は保持されません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-133">The state of a UTF-8 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cdf1-134">次の例では、<xref:System.Text.UTF8Encoding> オブジェクトを使用して、Unicode 文字の文字列をエンコードし、バイト配列に格納します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-134">The following example uses a <xref:System.Text.UTF8Encoding> object to encode a string of Unicode characters and store them in a byte array.</span></span> <span data-ttu-id="2cdf1-135">Unicode 文字列には、Pi (U + 03A0) とシグマ (U + 03A3) の2つの文字が含まれています。これは、ASCII 文字の範囲外です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-135">The Unicode string includes two characters, Pi (U+03A0) and Sigma (U+03A3), that are outside the ASCII character range.</span></span> <span data-ttu-id="2cdf1-136">エンコードされたバイト配列を文字列にデコードすると、Pi とシグマの文字は引き続き存在します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-136">When the encoded byte array is decoded back to a string, the Pi and Sigma characters are still present.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UTF8Encoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/VB/snippet.vb#1)]  
  
 <span data-ttu-id="2cdf1-137">次の例では、前の例と同じ文字列を使用します。ただし、エンコードされたバイトをファイルに書き込み、バイトストリームのプレフィックスをバイト順マーク (BOM) にします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-137">The following example uses the same string as the previous example, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</span></span> <span data-ttu-id="2cdf1-138">次に、<xref:System.IO.StreamReader> オブジェクトを使用したテキストファイルとして、ファイルを2つの異なる方法で読み取ります。バイナリファイルとして。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-138">It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file.</span></span> <span data-ttu-id="2cdf1-139">予想どおり、新しく読み込まれた文字列には BOM が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-139">As you would expect, neither newly-read string includes the BOM.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UTF8Encoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.Encoder" />
    <related type="Article" href="/dotnet/standard/base-types/character-encoding"><span data-ttu-id="2cdf1-140">エンコーディングについて</span><span class="sxs-lookup"><span data-stu-id="2cdf1-140">Understanding Encodings</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2cdf1-141"><see cref="T:System.Text.UTF8Encoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-141">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2cdf1-142"><see cref="T:System.Text.UTF8Encoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-142">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-143">このコンストラクターは、Unicode バイト順マークを提供しないインスタンスを作成し、無効なエンコーディングが検出された場合に例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-143">This constructor creates an instance that does not provide a Unicode byte order mark and does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2cdf1-144">セキュリティ上の理由から、`throwOnInvalidBytes` パラメーターを持つコンストラクターを呼び出し、その値を `true`に設定することによって、エラー検出を有効にすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-144">For security reasons, we recommend that you enable error detection by calling a constructor with a `throwOnInvalidBytes` parameter and setting its value to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cdf1-145">次の例では、新しい <xref:System.Text.UTF8Encoding> インスタンスを作成し、その名前を表示します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-145">The following example creates a new <xref:System.Text.UTF8Encoding> instance and displays its name.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool encoderShouldEmitUTF8Identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoderShouldEmitUTF8Identifier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding(bool encoderShouldEmitUTF8Identifier);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF8Encoding : bool -&gt; System.Text.UTF8Encoding" Usage="new System.Text.UTF8Encoding encoderShouldEmitUTF8Identifier" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoderShouldEmitUTF8Identifier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoderShouldEmitUTF8Identifier"><span data-ttu-id="2cdf1-146"><see cref="M:System.Text.UTF8Encoding.GetPreamble" /> メソッドが Unicode バイト順マークを返すよう指定する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-146"><see langword="true" /> to specify that the <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="2cdf1-147"><see cref="T:System.Text.UTF8Encoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-147">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span></span> <span data-ttu-id="2cdf1-148">Unicode バイト順マークを付加するかどうかを指定するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-148">A parameter specifies whether to provide a Unicode byte order mark.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-149">このコンストラクターは、無効なエンコーディングが検出された場合に例外をスローしないインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-149">This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2cdf1-150">セキュリティ上の理由から、`throwOnInvalidBytes` パラメーターを含むコンストラクターを呼び出し、その値を `true`に設定することによって、エラー検出を有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-150">For security reasons, you should enable error detection by calling a constructor that includes a `throwOnInvalidBytes` parameter and setting its value to `true`.</span></span>  
  
 <span data-ttu-id="2cdf1-151">`encoderShouldEmitUTF8Identifier` パラメーターは、<xref:System.Text.UTF8Encoding.GetPreamble%2A> メソッドの操作を制御します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-151">The `encoderShouldEmitUTF8Identifier` parameter controls the operation of the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="2cdf1-152">`true`した場合、メソッドは Unicode バイト順マーク (BOM) を UTF-8 形式で格納しているバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-152">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-8 format.</span></span>  <span data-ttu-id="2cdf1-153">`false`した場合、長さ0のバイト配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-153">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="2cdf1-154">ただし、`encoderShouldEmitUTF8Identifier` を `true` に設定しても、<xref:System.Text.UTF8Encoding.GetBytes%2A> メソッドでは、バイト配列の先頭にある BOM の前にプレフィックスが付けられません。また、<xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドでは、BOM のバイト数がバイト数に含まれることもありません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-154">However, setting `encoderShouldEmitUTF8Identifier` to `true` does not cause the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cdf1-155">次の例では、新しい <xref:System.Text.UTF8Encoding> インスタンスを作成し、<xref:System.Text.UTF8Encoding.GetPreamble%2A> メソッドによって Unicode バイト順マークのプレフィックスが生成されるように指定しています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-155">The following example creates a new <xref:System.Text.UTF8Encoding> instance and specifies that a Unicode byte order mark prefix should be emitted by the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="2cdf1-156"><xref:System.Text.UTF8Encoding.GetPreamble%2A> メソッドは、Unicode バイト順マークのプレフィックスを返します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-156">The <xref:System.Text.UTF8Encoding.GetPreamble%2A> method then returns the Unicode byte order mark prefix.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/CPP/ctor-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/CS/ctor-boolean.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/VB/ctor-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoderShouldEmitUTF8Identifier As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF8Encoding : bool * bool -&gt; System.Text.UTF8Encoding" Usage="new System.Text.UTF8Encoding (encoderShouldEmitUTF8Identifier, throwOnInvalidBytes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoderShouldEmitUTF8Identifier" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoderShouldEmitUTF8Identifier"><span data-ttu-id="2cdf1-157"><see cref="M:System.Text.UTF8Encoding.GetPreamble" /> メソッドが Unicode バイト順マークを返すよう指定する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-157"><see langword="true" /> to specify that the <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> method should return a Unicode byte order mark; otherwise, <see langword="false" />.</span></span></param>
        <param name="throwOnInvalidBytes"><span data-ttu-id="2cdf1-158">無効なエンコードが検出されたときに例外をスローする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-158"><see langword="true" /> to throw an exception when an invalid encoding is detected; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="2cdf1-159"><see cref="T:System.Text.UTF8Encoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-159">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span></span> <span data-ttu-id="2cdf1-160">パラメーターでは、Unicode バイト順マークを付加するかどうか、および無効なエンコードが検出されたときに例外をスローするかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-160">Parameters specify whether to provide a Unicode byte order mark and whether to throw an exception when an invalid encoding is detected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-161">`encoderShouldEmitUTF8Identifier` パラメーターは、<xref:System.Text.UTF8Encoding.GetPreamble%2A> メソッドの操作を制御します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-161">The `encoderShouldEmitUTF8Identifier` parameter controls the operation of the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="2cdf1-162">`true`した場合、メソッドは Unicode バイト順マーク (BOM) を UTF-8 形式で格納しているバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-162">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-8 format.</span></span>  <span data-ttu-id="2cdf1-163">`false`した場合、長さ0のバイト配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-163">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="2cdf1-164">ただし、`encoderShouldEmitUTF8Identifier` を `true` に設定しても、<xref:System.Text.UTF8Encoding.GetBytes%2A> メソッドでは、バイト配列の先頭にある BOM の前にプレフィックスが付けられません。また、<xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドでは、BOM のバイト数がバイト数に含まれることもありません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-164">However, setting `encoderShouldEmitUTF8Identifier` to `true` does not cause the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
 <span data-ttu-id="2cdf1-165">`throwOnInvalidBytes` が `true`場合、無効なバイトシーケンスを検出するメソッドは <xref:System.ArgumentException?displayProperty=nameWithType> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-165">If `throwOnInvalidBytes` is `true`, a method that detects an invalid byte sequence throws an <xref:System.ArgumentException?displayProperty=nameWithType> exception.</span></span> <span data-ttu-id="2cdf1-166">それ以外の場合、メソッドは例外をスローせず、無効なシーケンスは無視されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-166">Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2cdf1-167">セキュリティ上の理由から、`throwOnInvalidBytes` パラメーターを含むコンストラクターを呼び出し、そのパラメーターを `true`に設定することによって、エラー検出を有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-167">For security reasons, you should enable error detection by calling a constructor that includes a `throwOnInvalidBytes` parameter and setting that parameter to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cdf1-168">次の例では、新しい <xref:System.Text.UTF8Encoding> インスタンスを作成し、<xref:System.Text.UTF8Encoding.GetPreamble%2A> メソッドが Unicode バイト順マークプレフィックスを生成しないように指定し、無効なエンコーディングが検出された場合に例外をスローする必要があることを指定します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-168">The following example creates a new <xref:System.Text.UTF8Encoding> instance, specifying that the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method should not emit a Unicode byte order mark prefix, and an exception should be thrown when an invalid encoding is detected.</span></span> <span data-ttu-id="2cdf1-169">このコンストラクターの動作は、既定の <xref:System.Text.UTF8Encoding.%23ctor> コンストラクターと比較されます。これにより、無効なエンコーディングが検出された場合に例外がスローされることはありません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-169">The behavior of this constructor is compared to the default <xref:System.Text.UTF8Encoding.%23ctor> constructor, which does not throw an exception when an invalid encoding is detected.</span></span> <span data-ttu-id="2cdf1-170">2つの <xref:System.Text.UTF8Encoding> インスタンスは、2つの上位サロゲート (U + D801 および U + D802) を含む文字配列を、無効な文字シーケンスである行内にエンコードします。上位サロゲートの後には、常に下位サロゲートが必要です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-170">The two <xref:System.Text.UTF8Encoding> instances encode a character array that contains two high surrogates (U+D801 and U+D802) in a row, which is an invalid character sequence; a high surrogate should always be followed by a low surrogate.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="uTF8Encoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2cdf1-171">現在のインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-171">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="2cdf1-172">指定のオブジェクトが現在の <see cref="T:System.Text.UTF8Encoding" /> オブジェクトと等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-172">Determines whether the specified object is equal to the current <see cref="T:System.Text.UTF8Encoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-173"><paramref name="value" /> が <see cref="T:System.Text.UTF8Encoding" /> のインスタンスで、現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-173"><see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UTF8Encoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-174">次の条件がすべて当てはまる場合は、2つの <xref:System.Text.UTF8Encoding> オブジェクトが等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-174">Two <xref:System.Text.UTF8Encoding> objects are considered equal if all of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="2cdf1-175">両方のオブジェクトがバイト順マークを提供するか、両方とも指定しません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-175">Both objects provide the byte order mark, or both do not.</span></span>  
  
-   <span data-ttu-id="2cdf1-176">どちらのオブジェクトも、同じエンコーダーフォールバックを使用します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-176">Both objects use the same encoder fallback.</span></span>  
  
-   <span data-ttu-id="2cdf1-177">どちらのオブジェクトも、同じデコーダーフォールバックを使用します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-177">Both objects use the same decoder fallback.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cdf1-178">次の例では、<xref:System.Text.UTF8Encoding.Equals%2A> メソッドを使用して、現在の <xref:System.Text.UTF8Encoding> オブジェクトが別の <xref:System.Text.UTF8Encoding> オブジェクトと等しいかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-178">The following example uses the <xref:System.Text.UTF8Encoding.Equals%2A> method to test whether the current <xref:System.Text.UTF8Encoding> object is equal to a different <xref:System.Text.UTF8Encoding> object.</span></span> <span data-ttu-id="2cdf1-179">4つの <xref:System.Text.UTF8Encoding> オブジェクトが作成され、比較されて、比較の結果が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-179">Four <xref:System.Text.UTF8Encoding> objects are created and compared and the results of the comparisons are displayed.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/CPP/equals-object.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/CS/equals-object.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/VB/equals-object.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2cdf1-180">文字のセットをエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-180">Calculates the number of bytes produced by encoding a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (ReadOnlySpan&lt;char&gt; chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(valuetype System.ReadOnlySpan`1&lt;char&gt; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As ReadOnlySpan(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(ReadOnlySpan&lt;char&gt; chars);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : ReadOnlySpan&lt;char&gt; -&gt; int" Usage="uTF8Encoding.GetByteCount chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="2cdf1-181">エンコードする文字のセットを格納するスパン。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-181">The span that contains the set of characters to encode.</span></span></param>
        <summary><span data-ttu-id="2cdf1-182">指定された文字スパンをエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-182">Calculates the number of bytes produced by encoding the specified character span.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-183">指定された文字スパンをエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-183">The number of bytes produced by encoding the specified character span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-184">結果のバイトを格納するために <xref:System.Text.UTF8Encoding.GetBytes%2A> が必要とする正確なサイズを計算するには、<xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-184">To calculate the exact size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-185">最大サイズを計算するには、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-185">To calculate the maximum size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-186"><xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドは通常、より少ないメモリを割り当てますが、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドは通常、より高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-186">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="2cdf1-187">エラー検出を使用すると、無効なシーケンスによってこのメソッドが <xref:System.ArgumentException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-187">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="2cdf1-188">エラー検出を行わないと、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-188">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="2cdf1-189">エンコードされたバイトがファイルまたはストリームとして保存されるときに正しくデコードされるようにするには、エンコードされたバイトのストリームにプリアンブルを付けることができます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-189">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="2cdf1-190">ファイルに書き込む一連のバイトの先頭にあるような、バイトストリームの先頭にプリアンブルを挿入するのは開発者の責任であり、プリアンブル内のバイト数は、<xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドによって返される値には反映されません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-190">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2cdf1-191">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-191">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="2cdf1-192">フォールバックが発生しました (詳細な説明は、「<see href="/dotnet/standard/base-types/character-encoding">.NET での文字エンコード</see>」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-192">A fallback occurred (see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see> for complete explanation).</span></span>
  
<span data-ttu-id="2cdf1-193">および</span><span class="sxs-lookup"><span data-stu-id="2cdf1-193">-and-</span></span> 
 <span data-ttu-id="2cdf1-194"><see cref="P:System.Text.Encoding.EncoderFallback" /> は <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-194"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ chars);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="uTF8Encoding.GetByteCount chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="2cdf1-195">エンコード対象の文字のセットを格納している <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-195">The <see cref="T:System.String" /> containing the set of characters to encode.</span></span></param>
        <summary><span data-ttu-id="2cdf1-196">指定した <see cref="T:System.String" /> 内の文字をエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-196">Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-197">指定した文字をエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-197">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-198"><xref:System.Text.UTF8Encoding.GetBytes%2A> が結果のバイトを格納するために必要な配列の正確なサイズを計算するには、<xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-198">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-199">配列の最大サイズを計算するには、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-199">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-200"><xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドは通常、より少ないメモリを割り当てますが、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドは通常、より高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-200">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="2cdf1-201">エラー検出を使用すると、無効なシーケンスによってこのメソッドが <xref:System.ArgumentException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-201">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="2cdf1-202">エラー検出を行わないと、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-202">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="2cdf1-203">エンコードされたバイトがファイルまたはストリームとして保存されるときに正しくデコードされるようにするには、エンコードされたバイトのストリームにプリアンブルを付けることができます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-203">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="2cdf1-204">ファイルに書き込む一連のバイトの先頭にあるような、バイトストリームの先頭にプリアンブルを挿入するのは開発者の責任であり、プリアンブル内のバイト数は、<xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドによって返される値には反映されません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-204">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cdf1-205">次の例では、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> と <xref:System.Text.UTF8Encoding.GetByteCount%28System.String%29> メソッドを呼び出して、文字列をエンコードするために必要な最大バイト数と実際のバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-205">The following example calls the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> and <xref:System.Text.UTF8Encoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string.</span></span> <span data-ttu-id="2cdf1-206">また、バイト順マーク付きでバイトストリームを格納するために必要な実際のバイト数も表示されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-206">It also displays the actual number of bytes required to store a byte stream with a byte order mark.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2cdf1-207"><paramref name="chars" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-207"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2cdf1-208">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-208">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2cdf1-209">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-209">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="2cdf1-210">フォールバックが発生しました (詳細については「<see href="/dotnet/standard/base-types/character-encoding">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="2cdf1-210">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="2cdf1-211">および</span><span class="sxs-lookup"><span data-stu-id="2cdf1-211">-and-</span></span> 
 <span data-ttu-id="2cdf1-212"><see cref="P:System.Text.Encoding.EncoderFallback" /> は <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-212"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF8Encoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="2cdf1-213">エンコードする最初の文字へのポインター。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-213">A pointer to the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="2cdf1-214">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-214">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="2cdf1-215">指定した文字ポインターで始まる文字のセットをエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-215">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-216">指定した文字をエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-216">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-217"><xref:System.Text.UTF8Encoding.GetBytes%2A> メソッドが結果のバイトを格納するために必要な配列の正確なサイズを計算するには、<xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-217">To calculate the exact array size required by the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-218">配列の最大サイズを計算するには、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-218">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-219"><xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドは通常、より少ないメモリを割り当てますが、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドは通常、より高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-219">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="2cdf1-220">エラー検出を使用すると、無効なシーケンスによってこのメソッドが <xref:System.ArgumentException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-220">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="2cdf1-221">エラー検出を行わないと、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-221">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="2cdf1-222">エンコードされたバイトがファイルまたはストリームとして保存されるときに正しくデコードされるようにするには、エンコードされたバイトのストリームにプリアンブルを付けることができます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-222">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="2cdf1-223">ファイルに書き込む一連のバイトの先頭にあるような、バイトストリームの先頭にプリアンブルを挿入するのは開発者の責任であり、プリアンブル内のバイト数は、<xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドによって返される値には反映されません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-223">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2cdf1-224"><paramref name="chars" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-224"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2cdf1-225"><paramref name="count" /> に 0 より小さい値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-225"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="2cdf1-226">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-226">-or-</span></span> 
<span data-ttu-id="2cdf1-227">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-227">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2cdf1-228">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-228">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="2cdf1-229">フォールバックが発生しました (詳細な説明は、「<see href="/dotnet/standard/base-types/character-encoding">.NET での文字エンコード</see>」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-229">A fallback occurred (see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see> for a complete explanation).</span></span>
  
<span data-ttu-id="2cdf1-230">および</span><span class="sxs-lookup"><span data-stu-id="2cdf1-230">-and-</span></span> 
 <span data-ttu-id="2cdf1-231"><see cref="P:System.Text.Encoding.EncoderFallback" /> は <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-231"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="uTF8Encoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="2cdf1-232">エンコード対象の文字のセットを格納している文字配列。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-232">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="2cdf1-233">エンコードする最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-233">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="2cdf1-234">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-234">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="2cdf1-235">指定した文字配列から文字のセットをエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-235">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-236">指定した文字をエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-236">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-237"><xref:System.Text.UTF8Encoding.GetBytes%2A> が結果のバイトを格納するために必要な配列の正確なサイズを計算するには、使用 <xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-237">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the uses <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-238">配列の最大サイズを計算するには、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-238">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-239"><xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドは通常、より少ないメモリを割り当てますが、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドは通常、より高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-239">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="2cdf1-240">エラー検出を使用すると、無効なシーケンスによってこのメソッドが <xref:System.ArgumentException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-240">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="2cdf1-241">エラー検出を行わないと、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-241">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="2cdf1-242">エンコードされたバイトがファイルまたはストリームとして保存されるときに正しくデコードされるようにするには、エンコードされたバイトのストリームにプリアンブルを付けることができます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-242">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="2cdf1-243">ファイルに書き込む一連のバイトの先頭にあるような、バイトストリームの先頭にプリアンブルを挿入するのは開発者の責任であり、プリアンブル内のバイト数は、<xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドによって返される値には反映されません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-243">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cdf1-244">次の例では、アルファベットの大文字と小文字を含む配列を設定し、<xref:System.Text.UTF8Encoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> メソッドを呼び出して、ラテン文字の小文字をエンコードするために必要なバイト数を決定します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-244">The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UTF8Encoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="2cdf1-245">次に、バイトオーダーマークが追加された場合に、必要な合計バイト数と共にこの情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-245">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="2cdf1-246">この数値と <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドによって返される値を比較します。これは、ラテンの小文字をエンコードするために必要な最大バイト数を示します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-246">It compares this number with the value returned by the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UTF8Encoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2cdf1-247"><paramref name="chars" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-247"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2cdf1-248"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-248"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="2cdf1-249">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-249">-or-</span></span> 
 <span data-ttu-id="2cdf1-250"><paramref name="index" /> および <paramref name="count" /> は <paramref name="chars" />において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-250"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="2cdf1-251">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-251">-or-</span></span> 
<span data-ttu-id="2cdf1-252">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-252">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2cdf1-253">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-253">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="2cdf1-254">フォールバックが発生しました (詳細については「<see href="/dotnet/standard/base-types/character-encoding">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="2cdf1-254">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="2cdf1-255">および</span><span class="sxs-lookup"><span data-stu-id="2cdf1-255">-and-</span></span> 
<span data-ttu-id="2cdf1-256"><see cref="P:System.Text.Encoding.EncoderFallback" /> プロパティは <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-256">The <see cref="P:System.Text.Encoding.EncoderFallback" /> property is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2cdf1-257">文字セットを一連のバイトにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-257">Encodes a set of characters into a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string -&gt; byte[]" Usage="uTF8Encoding.GetBytes s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="2cdf1-258">エンコードする文字列。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-258">The character string to encode.</span></span></param>
        <summary><span data-ttu-id="2cdf1-259">指定した <see cref="T:System.String" /> オブジェクトに含まれる文字をバイト シーケンスにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-259">Encodes the characters in a specified <see cref="T:System.String" /> object into a sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-260">s パラメーターで指定された文字列内のエンコードされた文字が格納されているバイト配列。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-260">A byte array that contains the encoded characters in the string specified by the s parameter.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (ReadOnlySpan&lt;char&gt; chars, Span&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(valuetype System.ReadOnlySpan`1&lt;char&gt; chars, valuetype System.Span`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.ReadOnlySpan{System.Char},System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As ReadOnlySpan(Of Char), bytes As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(ReadOnlySpan&lt;char&gt; chars, Span&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : ReadOnlySpan&lt;char&gt; * Span&lt;byte&gt; -&gt; int" Usage="uTF8Encoding.GetBytes (chars, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="2cdf1-261">エンコードする文字スパン。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-261">The character span to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="2cdf1-262">結果のバイト セットを格納するスパン。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-262">The span to contain the resulting set of bytes.</span></span></param>
        <summary><span data-ttu-id="2cdf1-263">指定された文字スパンを指定されたバイト スパンにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-263">Encodes the specified character span into the specified byte span.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-264"><paramref name="bytes" /> に書き込まれた実際のバイト数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-264">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-265">結果のバイトを格納するために <xref:System.Text.UTF8Encoding.GetBytes%2A> が必要とする正確なサイズを計算するには、<xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-265">To calculate the exact size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-266">最大サイズを計算するには、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-266">To calculate the maximum size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-267"><xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドは通常、より少ないメモリを割り当てますが、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドは通常、より高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-267">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="2cdf1-268">エラー検出を使用すると、無効なシーケンスによってこのメソッドが <xref:System.ArgumentException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-268">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="2cdf1-269">エラー検出を行わないと、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-269">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="2cdf1-270">ストリームから読み取られたデータなど、変換されるデータは、連続したブロックでのみ使用できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-270">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="2cdf1-271">この場合、またはデータ量が非常に大きく、小さいブロックに分割する必要がある場合は、それぞれ <xref:System.Text.UTF8Encoding.GetDecoder%2A> メソッドまたは <xref:System.Text.UTF8Encoding.GetEncoder%2A> メソッドによって返された <xref:System.Text.Decoder> または <xref:System.Text.Encoder> を使用します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-271">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> returned by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="2cdf1-272">エンコードされたバイトがファイルまたはストリームとして保存されるときに正しくデコードされるようにするには、エンコードされたバイトのストリームにプリアンブルを付けることができます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-272">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="2cdf1-273">ファイルに書き込む一連のバイトの先頭に、プリアンブルをバイトストリームの先頭に挿入することは、開発者の責任です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-273">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="2cdf1-274"><xref:System.Text.UTF8Encoding.GetBytes%2A> メソッドは、エンコードされたバイトシーケンスの先頭にプリアンブルを付加しません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-274">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF8Encoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Byte*" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="2cdf1-275">エンコードする最初の文字へのポインター。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-275">A pointer to the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="2cdf1-276">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-276">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="2cdf1-277">結果のバイト シーケンスの書き込みを開始する位置へのポインター。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-277">A pointer to the location at which to start writing the resulting sequence of bytes.</span></span></param>
        <param name="byteCount"><span data-ttu-id="2cdf1-278">書き込む最大バイト数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-278">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="2cdf1-279">指定した文字ポインターで始まる文字のセットを、指定したバイト ポインターを開始位置として格納されるバイト シーケンスにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-279">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-280"><paramref name="bytes" /> によって示される位置に書き込まれる実際のバイト数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-280">The actual number of bytes written at the location indicated by <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-281"><xref:System.Text.UTF8Encoding.GetBytes%2A> が結果のバイトを格納するために必要な配列の正確なサイズを計算するには、<xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-281">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-282">配列の最大サイズを計算するには、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-282">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-283"><xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドは通常、より少ないメモリを割り当てますが、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドは通常、より高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-283">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="2cdf1-284">エラー検出を使用すると、無効なシーケンスによってこのメソッドが <xref:System.ArgumentException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-284">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="2cdf1-285">エラー検出を行わないと、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-285">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="2cdf1-286">ストリームから読み取られたデータなど、変換されるデータは、連続したブロックでのみ使用できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-286">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="2cdf1-287">この場合、またはデータ量が非常に大きく、小さいブロックに分割する必要がある場合は、それぞれ <xref:System.Text.UTF8Encoding.GetDecoder%2A> メソッドまたは <xref:System.Text.UTF8Encoding.GetEncoder%2A> メソッドによって返された <xref:System.Text.Decoder> または <xref:System.Text.Encoder> を使用します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-287">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> returned by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="2cdf1-288">エンコードされたバイトがファイルまたはストリームとして保存されるときに正しくデコードされるようにするには、エンコードされたバイトのストリームにプリアンブルを付けることができます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-288">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="2cdf1-289">ファイルに書き込む一連のバイトの先頭に、プリアンブルをバイトストリームの先頭に挿入することは、開発者の責任です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-289">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="2cdf1-290"><xref:System.Text.UTF8Encoding.GetBytes%2A> メソッドは、エンコードされたバイトシーケンスの先頭にプリアンブルを付加しません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-290">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2cdf1-291"><paramref name="chars" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-291"><paramref name="chars" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2cdf1-292">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-292">-or-</span></span> 
 <span data-ttu-id="2cdf1-293"><paramref name="bytes" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-293"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2cdf1-294"><paramref name="charCount" /> または <paramref name="byteCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-294"><paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2cdf1-295">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-295">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="2cdf1-296">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-296">-or-</span></span> 
 <span data-ttu-id="2cdf1-297"><paramref name="byteCount" /> が結果のバイト数より少なくなっています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-297"><paramref name="byteCount" /> is less than the resulting number of bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="2cdf1-298">フォールバックが発生しました (詳細については「<see href="/dotnet/standard/base-types/character-encoding">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="2cdf1-298">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="2cdf1-299">および</span><span class="sxs-lookup"><span data-stu-id="2cdf1-299">-and-</span></span> 
 <span data-ttu-id="2cdf1-300"><see cref="P:System.Text.Encoding.EncoderFallback" /> は <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-300"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="uTF8Encoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="2cdf1-301">エンコード対象の文字のセットを格納している文字配列。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-301">The character array containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="2cdf1-302">エンコードする最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-302">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="2cdf1-303">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-303">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="2cdf1-304">結果のバイト シーケンスを格納するバイト配列。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-304">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="2cdf1-305">結果のバイト シーケンスを書き込む開始位置のインデックス。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-305">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="2cdf1-306">指定した文字配列に格納されている文字のセットを指定したバイト配列にエンコードします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-306">Encodes a set of characters from the specified character array into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-307"><paramref name="bytes" /> に書き込まれた実際のバイト数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-307">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-308"><xref:System.Text.UTF8Encoding.GetBytes%2A> が結果のバイトを格納するために必要な配列の正確なサイズを計算するには、<xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-308">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-309">配列の最大サイズを計算するには、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-309">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-310"><xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドは通常、より少ないメモリを割り当てますが、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドは通常、より高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-310">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="2cdf1-311">エラー検出を使用すると、無効なシーケンスによってこのメソッドが <xref:System.ArgumentException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-311">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="2cdf1-312">エラー検出を行わないと、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-312">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="2cdf1-313">ストリームから読み取られたデータなど、変換されるデータは、連続したブロックでのみ使用できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-313">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="2cdf1-314">この場合、またはデータ量が非常に大きく、小さいブロックに分割する必要がある場合は、それぞれ <xref:System.Text.UTF8Encoding.GetDecoder%2A> メソッドまたは <xref:System.Text.UTF8Encoding.GetEncoder%2A> メソッドによって提供される <xref:System.Text.Decoder> または <xref:System.Text.Encoder> を使用します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-314">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="2cdf1-315">エンコードされたバイトがファイルまたはストリームとして保存されるときに正しくデコードされるようにするには、エンコードされたバイトのストリームにプリアンブルを付けることができます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-315">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="2cdf1-316">ファイルに書き込む一連のバイトの先頭に、プリアンブルをバイトストリームの先頭に挿入することは、開発者の責任です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-316">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="2cdf1-317"><xref:System.Text.UTF8Encoding.GetBytes%2A> メソッドは、エンコードされたバイトシーケンスの先頭にプリアンブルを付加しません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-317">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cdf1-318">次の例では、<xref:System.Text.UTF8Encoding.GetBytes%2A> メソッドを使用して文字列から範囲の文字をエンコードし、バイト配列の要素範囲にエンコードされたバイトを格納します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-318">The following example uses the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to encode a range of characters from a string and stores the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2cdf1-319"><paramref name="chars" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-319"><paramref name="chars" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2cdf1-320">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-320">-or-</span></span> 
 <span data-ttu-id="2cdf1-321"><paramref name="bytes" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-321"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2cdf1-322"><paramref name="charIndex" /> または <paramref name="charCount" /> または <paramref name="byteIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-322"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="2cdf1-323">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-323">-or-</span></span> 
 <span data-ttu-id="2cdf1-324"><paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" />において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-324"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="2cdf1-325">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-325">-or-</span></span> 
 <span data-ttu-id="2cdf1-326"><paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-326"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2cdf1-327">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-327">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="2cdf1-328">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-328">-or-</span></span> 
 <span data-ttu-id="2cdf1-329"><paramref name="bytes" /> には、<paramref name="byteIndex" /> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-329"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="2cdf1-330">フォールバックが発生しました (詳細については「<see href="/dotnet/standard/base-types/character-encoding">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="2cdf1-330">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="2cdf1-331">および</span><span class="sxs-lookup"><span data-stu-id="2cdf1-331">-and-</span></span> 
 <span data-ttu-id="2cdf1-332"><see cref="P:System.Text.Encoding.EncoderFallback" /> は <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-332"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="uTF8Encoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="2cdf1-333">エンコード対象の文字のセットを格納している <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-333">The <see cref="T:System.String" /> containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="2cdf1-334">エンコードする最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-334">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="2cdf1-335">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-335">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="2cdf1-336">結果のバイト シーケンスを格納するバイト配列。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-336">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="2cdf1-337">結果のバイト シーケンスを書き込む開始位置のインデックス。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-337">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="2cdf1-338">指定した <see cref="T:System.String" /> の文字セットを、指定したバイト配列にエンコードします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-338">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-339"><paramref name="bytes" /> に書き込まれた実際のバイト数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-339">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-340"><xref:System.Text.UTF8Encoding.GetBytes%2A> が結果のバイトを格納するために必要な配列の正確なサイズを計算するには、<xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-340">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-341">配列の最大サイズを計算するには、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-341">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-342"><xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドは通常、より少ないメモリを割り当てますが、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドは通常、より高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-342">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="2cdf1-343">エラー検出を使用すると、無効なシーケンスによってこのメソッドが <xref:System.ArgumentException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-343">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="2cdf1-344">エラー検出を行わないと、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-344">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="2cdf1-345">ストリームから読み取られたデータなど、変換されるデータは、連続したブロックでのみ使用できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-345">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="2cdf1-346">この場合、またはデータ量が非常に大きく、小さいブロックに分割する必要がある場合は、それぞれ <xref:System.Text.UTF8Encoding.GetDecoder%2A> メソッドまたは <xref:System.Text.UTF8Encoding.GetEncoder%2A> メソッドによって提供される <xref:System.Text.Decoder> または <xref:System.Text.Encoder> を使用します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-346">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="2cdf1-347">エンコードされたバイトがファイルまたはストリームとして保存されるときに正しくデコードされるようにするには、エンコードされたバイトのストリームにプリアンブルを付けることができます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-347">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="2cdf1-348">ファイルに書き込む一連のバイトの先頭に、プリアンブルをバイトストリームの先頭に挿入することは、開発者の責任です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-348">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="2cdf1-349"><xref:System.Text.UTF8Encoding.GetBytes%2A> メソッドは、エンコードされたバイトシーケンスの先頭にプリアンブルを付加しません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-349">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cdf1-350">次の例では、<xref:System.Text.UTF8Encoding.GetBytes%2A> メソッドを使用して、Unicode 文字配列から要素の範囲をエンコードし、バイト配列の要素範囲にエンコードされたバイトを格納します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-350">The following example uses the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2cdf1-351"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-351"><paramref name="s" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2cdf1-352">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-352">-or-</span></span> 
 <span data-ttu-id="2cdf1-353"><paramref name="bytes" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-353"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2cdf1-354"><paramref name="charIndex" /> または <paramref name="charCount" /> または <paramref name="byteIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-354"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="2cdf1-355">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-355">-or-</span></span> 
 <span data-ttu-id="2cdf1-356"><paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" />において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-356"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="2cdf1-357">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-357">-or-</span></span> 
 <span data-ttu-id="2cdf1-358"><paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-358"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2cdf1-359">エラーの検出が有効になり、<paramref name="s" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-359">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="2cdf1-360">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-360">-or-</span></span> 
 <span data-ttu-id="2cdf1-361"><paramref name="bytes" /> には、<paramref name="byteIndex" /> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-361"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="2cdf1-362">フォールバックが発生しました (詳細については「<see href="/dotnet/standard/base-types/character-encoding">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="2cdf1-362">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="2cdf1-363">および</span><span class="sxs-lookup"><span data-stu-id="2cdf1-363">-and-</span></span> 
 <span data-ttu-id="2cdf1-364"><see cref="P:System.Text.Encoding.EncoderFallback" /> は <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-364"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2cdf1-365">バイト シーケンスをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-365">Calculates the number of characters produced by decoding a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As ReadOnlySpan(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : ReadOnlySpan&lt;byte&gt; -&gt; int" Usage="uTF8Encoding.GetCharCount bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="2cdf1-366">デコードするバイトのセットを格納しているスパン。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-366">The span containing the set of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="2cdf1-367">指定されたバイト スパンをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-367">Calculates the number of characters produced by decoding the specified byte span.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-368">指定されたバイト スパンをデコードすることによって生成される文字数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-368">The number of characters produced by decoding the specified byte span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-369">結果の文字を格納するために <xref:System.Text.UTF8Encoding.GetChars%2A> で必要とされる正確なサイズを計算するには、<xref:System.Text.UTF8Encoding.GetCharCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-369">To calculate the exact size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="2cdf1-370">最大サイズを計算するには、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-370">To calculate the maximum size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="2cdf1-371"><xref:System.Text.UTF8Encoding.GetCharCount%2A> メソッドは通常、より少ないメモリを割り当てますが、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> メソッドは通常、より高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-371">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="2cdf1-372">エラー検出を使用すると、無効なシーケンスによってこのメソッドが <xref:System.ArgumentException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-372">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="2cdf1-373">エラー検出を行わないと、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-373">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF8Encoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="2cdf1-374">デコードする最初のバイトへのポインター。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-374">A pointer to the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="2cdf1-375">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-375">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="2cdf1-376">指定したバイト ポインターで始まるバイト シーケンスをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-376">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-377">指定したバイト シーケンスをデコードすることによって生成される文字数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-377">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-378"><xref:System.Text.UTF8Encoding.GetChars%2A> が結果の文字を格納するために必要な配列の正確なサイズを計算するには、<xref:System.Text.UTF8Encoding.GetCharCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-378">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="2cdf1-379">配列の最大サイズを計算するには、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-379">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="2cdf1-380"><xref:System.Text.UTF8Encoding.GetCharCount%2A> メソッドは通常、より少ないメモリを割り当てますが、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> メソッドは通常、より高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-380">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="2cdf1-381">エラー検出を使用すると、無効なシーケンスによってこのメソッドが <xref:System.ArgumentException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-381">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="2cdf1-382">エラー検出を行わないと、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-382">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2cdf1-383"><paramref name="bytes" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-383"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2cdf1-384"><paramref name="count" /> に 0 より小さい値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-384"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="2cdf1-385">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-385">-or-</span></span> 
<span data-ttu-id="2cdf1-386">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-386">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2cdf1-387">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-387">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="2cdf1-388">フォールバックが発生しました (詳細については「<see href="/dotnet/standard/base-types/character-encoding">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="2cdf1-388">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="2cdf1-389">および</span><span class="sxs-lookup"><span data-stu-id="2cdf1-389">-and-</span></span> 
 <span data-ttu-id="2cdf1-390"><see cref="P:System.Text.Encoding.DecoderFallback" /> は <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-390"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.UTF8Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="uTF8Encoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="2cdf1-391">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-391">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="2cdf1-392">デコードする最初のバイトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-392">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="2cdf1-393">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-393">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="2cdf1-394">指定したバイト配列からバイト シーケンスをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-394">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-395">指定したバイト シーケンスをデコードすることによって生成される文字数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-395">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-396"><xref:System.Text.UTF8Encoding.GetChars%2A> が結果の文字を格納するために必要な配列の正確なサイズを計算するには、<xref:System.Text.UTF8Encoding.GetCharCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-396">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="2cdf1-397">配列の最大サイズを計算するには、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-397">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="2cdf1-398"><xref:System.Text.UTF8Encoding.GetCharCount%2A> メソッドは通常、より少ないメモリを割り当てますが、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> メソッドは通常、より高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-398">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="2cdf1-399">エラー検出を使用すると、無効なシーケンスによってこのメソッドが <xref:System.ArgumentException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-399">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="2cdf1-400">エラー検出を行わないと、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-400">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cdf1-401">次の例では、<xref:System.Text.UTF8Encoding.GetCharCount%2A> メソッドを使用して、バイト配列内の要素の範囲をデコードすることによって生成される文字数を返します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-401">The following example uses the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2cdf1-402"><paramref name="bytes" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-402"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2cdf1-403"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-403"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="2cdf1-404">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-404">-or-</span></span> 
 <span data-ttu-id="2cdf1-405"><paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" />において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-405"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="2cdf1-406">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-406">-or-</span></span> 
<span data-ttu-id="2cdf1-407">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-407">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2cdf1-408">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-408">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="2cdf1-409">フォールバックが発生しました (詳細については「<see href="/dotnet/standard/base-types/character-encoding">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="2cdf1-409">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="2cdf1-410">および</span><span class="sxs-lookup"><span data-stu-id="2cdf1-410">-and-</span></span> 
 <span data-ttu-id="2cdf1-411"><see cref="P:System.Text.Encoding.DecoderFallback" /> は <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-411"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.UTF8Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2cdf1-412">バイト シーケンスを文字のセットにデコードします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-412">Decodes a sequence of bytes into a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (ReadOnlySpan&lt;byte&gt; bytes, Span&lt;char&gt; chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, valuetype System.Span`1&lt;char&gt; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As ReadOnlySpan(Of Byte), chars As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(ReadOnlySpan&lt;System::Byte&gt; bytes, Span&lt;char&gt; chars);" />
      <MemberSignature Language="F#" Value="override this.GetChars : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; -&gt; int" Usage="uTF8Encoding.GetChars (bytes, chars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="chars" Type="System.Span&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="2cdf1-413">デコードするバイトを格納しているスパン。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-413">The span containing the bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="2cdf1-414">結果の文字セットを格納するスパン。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-414">The span to contain the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="2cdf1-415">指定されたバイト スパンを指定された文字スパンにデコードします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-415">Decodes the specified byte span into the specified character span.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-416"><paramref name="chars" /> に書き込まれた実際の文字数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-416">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-417">結果の文字を格納するために <xref:System.Text.UTF8Encoding.GetChars%2A> で必要とされる正確なサイズを計算するには、<xref:System.Text.UTF8Encoding.GetCharCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-417">To calculate the exact size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="2cdf1-418">最大サイズを計算するには、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-418">To calculate the maximum size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="2cdf1-419"><xref:System.Text.UTF8Encoding.GetCharCount%2A> メソッドは通常、より少ないメモリを割り当てますが、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> メソッドは通常、より高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-419">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="2cdf1-420">エラー検出を使用すると、無効なシーケンスによってこのメソッドが <xref:System.ArgumentException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-420">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="2cdf1-421">エラー検出を行わないと、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-421">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="2cdf1-422">デコードするバイトセットにバイトオーダーマーク (BOM) が含まれており、非 BOM 対応型のメソッドによってバイトの範囲が返された場合は、このメソッドによって返される文字の範囲に文字 `U+FFFE` が含まれます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-422">If the set of bytes to be decoded includes the byte order mark (BOM) and the span of bytes was returned by a method of a non-BOM aware type, the character `U+FFFE` is included in the span of characters returned by this method.</span></span> <span data-ttu-id="2cdf1-423"><xref:System.String.TrimStart%2A?displayProperty=nameWithType> メソッドを呼び出すことによって削除できます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-423">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="2cdf1-424">ストリームから読み取られたデータなど、変換されるデータは、連続したブロックでのみ使用できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-424">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="2cdf1-425">この場合、またはデータ量が非常に大きく、小さいブロックに分割する必要がある場合は、それぞれ <xref:System.Text.UTF8Encoding.GetDecoder%2A> メソッドまたは <xref:System.Text.UTF8Encoding.GetEncoder%2A> メソッドによって提供される <xref:System.Text.Decoder> または <xref:System.Text.Encoder> オブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-425">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF8Encoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="chars" Type="System.Char*" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="2cdf1-426">デコードする最初のバイトへのポインター。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-426">A pointer to the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="2cdf1-427">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-427">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="2cdf1-428">結果の文字セットの書き込みを開始する位置へのポインター。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-428">A pointer to the location at which to start writing the resulting set of characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="2cdf1-429">書き込む文字の最大数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-429">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="2cdf1-430">指定したバイト ポインターで始まるバイト シーケンスを、指定した文字ポインターを開始位置として格納される文字のセットにデコードします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-430">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-431"><paramref name="chars" /> によって示される位置に書き込まれる実際の文字数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-431">The actual number of characters written at the location indicated by <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-432"><xref:System.Text.UTF8Encoding.GetChars%2A> が結果の文字を格納するために必要な配列の正確なサイズを計算するには、<xref:System.Text.UTF8Encoding.GetCharCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-432">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="2cdf1-433">配列の最大サイズを計算するには、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-433">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="2cdf1-434"><xref:System.Text.UTF8Encoding.GetCharCount%2A> メソッドは通常、より少ないメモリを割り当てますが、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> メソッドは通常、より高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-434">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="2cdf1-435">エラー検出を使用すると、無効なシーケンスによってこのメソッドが <xref:System.ArgumentException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-435">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="2cdf1-436">エラー検出を行わないと、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-436">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="2cdf1-437">デコードするバイト範囲にバイトオーダーマーク (BOM) が含まれており、そのバイト配列が非 BOM 対応型のメソッドによって返された場合は、このメソッドによって返される文字配列に U + FFFE という文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-437">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="2cdf1-438"><xref:System.String.TrimStart%2A?displayProperty=nameWithType> メソッドを呼び出すことによって削除できます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-438">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="2cdf1-439">ストリームから読み取られたデータなど、変換されるデータは、連続したブロックでのみ使用できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-439">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="2cdf1-440">この場合、またはデータ量が非常に大きく、小さいブロックに分割する必要がある場合は、それぞれ <xref:System.Text.UTF8Encoding.GetDecoder%2A> メソッドまたは <xref:System.Text.UTF8Encoding.GetEncoder%2A> メソッドによって提供される <xref:System.Text.Decoder> または <xref:System.Text.Encoder> オブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-440">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2cdf1-441"><paramref name="bytes" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-441"><paramref name="bytes" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2cdf1-442">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-442">-or-</span></span> 
 <span data-ttu-id="2cdf1-443"><paramref name="chars" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-443"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2cdf1-444"><paramref name="byteCount" /> または <paramref name="charCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-444"><paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2cdf1-445">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-445">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="2cdf1-446">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-446">-or-</span></span> 
 <span data-ttu-id="2cdf1-447"><paramref name="charCount" /> が結果の文字数より少なくなっています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-447"><paramref name="charCount" /> is less than the resulting number of characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="2cdf1-448">フォールバックが発生しました (詳細については「<see href="/dotnet/standard/base-types/character-encoding">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="2cdf1-448">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="2cdf1-449">および</span><span class="sxs-lookup"><span data-stu-id="2cdf1-449">-and-</span></span> 
 <span data-ttu-id="2cdf1-450"><see cref="P:System.Text.Encoding.DecoderFallback" /> は <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-450"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="uTF8Encoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="2cdf1-451">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-451">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="2cdf1-452">デコードする最初のバイトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-452">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="2cdf1-453">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-453">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="2cdf1-454">結果の文字のセットを格納する文字配列。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-454">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="2cdf1-455">結果の文字のセットを書き込む開始位置のインデックス。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-455">The index at which to start writing the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="2cdf1-456">指定したバイト配列に格納されているバイト シーケンスを指定した文字配列にデコードします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-456">Decodes a sequence of bytes from the specified byte array into the specified character array.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-457"><paramref name="chars" /> に書き込まれた実際の文字数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-457">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-458"><xref:System.Text.UTF8Encoding.GetChars%2A> が結果の文字を格納するために必要な配列の正確なサイズを計算するには、<xref:System.Text.UTF8Encoding.GetCharCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-458">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="2cdf1-459">配列の最大サイズを計算するには、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-459">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="2cdf1-460"><xref:System.Text.UTF8Encoding.GetCharCount%2A> メソッドは通常、より少ないメモリを割り当てますが、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> メソッドは通常、より高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-460">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="2cdf1-461">エラー検出を使用すると、無効なシーケンスによってこのメソッドが <xref:System.ArgumentException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-461">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="2cdf1-462">エラー検出を行わないと、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-462">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="2cdf1-463">デコードするバイト範囲にバイトオーダーマーク (BOM) が含まれており、そのバイト配列が非 BOM 対応型のメソッドによって返された場合は、このメソッドによって返される文字配列に U + FFFE という文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-463">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="2cdf1-464"><xref:System.String.TrimStart%2A?displayProperty=nameWithType> メソッドを呼び出すことによって削除できます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-464">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="2cdf1-465">ストリームから読み取られたデータなど、変換されるデータは、連続したブロックでのみ使用できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-465">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="2cdf1-466">この場合、またはデータ量が非常に大きく、小さいブロックに分割する必要がある場合は、それぞれ <xref:System.Text.UTF8Encoding.GetDecoder%2A> メソッドまたは <xref:System.Text.UTF8Encoding.GetEncoder%2A> メソッドによって提供される <xref:System.Text.Decoder> または <xref:System.Text.Encoder> を使用します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-466">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cdf1-467">次の例では、<xref:System.Text.UTF8Encoding.GetChars%2A> メソッドを使用して、バイト配列内の要素の範囲をデコードし、その結果を文字配列に格納します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-467">The following example uses the <xref:System.Text.UTF8Encoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2cdf1-468"><paramref name="bytes" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-468"><paramref name="bytes" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2cdf1-469">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-469">-or-</span></span> 
 <span data-ttu-id="2cdf1-470"><paramref name="chars" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-470"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2cdf1-471"><paramref name="byteIndex" /> または <paramref name="byteCount" /> または <paramref name="charIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-471"><paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="2cdf1-472">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-472">-or-</span></span> 
 <span data-ttu-id="2cdf1-473"><paramref name="byteindex" /> および <paramref name="byteCount" /> は <paramref name="bytes" />において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-473"><paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="2cdf1-474">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-474">-or-</span></span> 
 <span data-ttu-id="2cdf1-475"><paramref name="charIndex" /> が <paramref name="chars" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-475"><paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2cdf1-476">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-476">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="2cdf1-477">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-477">-or-</span></span> 
 <span data-ttu-id="2cdf1-478"><paramref name="chars" /> には、<paramref name="charIndex" /> から配列の末尾までに十分なサイズがなく、結果の文字を格納できません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-478"><paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="2cdf1-479">フォールバックが発生しました (詳細については「<see href="/dotnet/standard/base-types/character-encoding">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="2cdf1-479">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="2cdf1-480">および</span><span class="sxs-lookup"><span data-stu-id="2cdf1-480">-and-</span></span> 
 <span data-ttu-id="2cdf1-481"><see cref="P:System.Text.Encoding.DecoderFallback" /> は <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-481"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="uTF8Encoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2cdf1-482">UTF-8 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換するデコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-482">Obtains a decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-483">UTF-8 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換するデコーダー。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-483">A decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-484"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> メソッドは、このクラスの <xref:System.Text.UTF8Encoding.GetChars%2A> メソッドと同様の方法で、バイトのシーケンシャルブロックを文字の連続したブロックに変換します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-484">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF8Encoding.GetChars%2A> method of this class.</span></span> <span data-ttu-id="2cdf1-485">ただし、<xref:System.Text.Decoder> は、複数のブロックにまたがるバイトシーケンスを正しくデコードできるように、呼び出しの間に状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-485">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="2cdf1-486">また <xref:System.Text.Decoder> は、データブロックの末尾で末尾のバイトを保持し、次のデコード操作で末尾のバイトを使用します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-486">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="2cdf1-487">そのため、<xref:System.Text.UTF8Encoding.GetDecoder%2A> と <xref:System.Text.UTF8Encoding.GetEncoder%2A> は、ネットワークの転送とファイル操作に役立ちます。これらの操作は、多くの場合、データストリーム全体ではなくデータブロックを処理するためです。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-487">Therefore, <xref:System.Text.UTF8Encoding.GetDecoder%2A> and <xref:System.Text.UTF8Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="2cdf1-488">エラー検出が有効になっている場合、つまり、コンストラクターの `throwOnInvalidCharacters` パラメーターが `true`に設定されている場合、このメソッドによって返される <xref:System.Text.Decoder> ではエラー検出も有効になります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-488">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method.</span></span> <span data-ttu-id="2cdf1-489">エラー検出が有効になっていて、無効なシーケンスが検出された場合、デコーダーの状態は未定義となり、処理を停止する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-489">If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cdf1-490">次の例では、<xref:System.Text.UTF8Encoding.GetDecoder%2A> メソッドを使用して、UTF-8 デコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-490">The following example uses the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method to obtain a UTF-8 decoder.</span></span> <span data-ttu-id="2cdf1-491">デコーダーは、バイトシーケンスを文字シーケンスに変換します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-491">The decoder converts a sequence of bytes into a sequence of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/CPP/getdecoder-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/CS/getdecoder-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/VB/getdecoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <related type="Article" href="/dotnet/standard/base-types/character-encoding"><span data-ttu-id="2cdf1-492">エンコーディングについて</span><span class="sxs-lookup"><span data-stu-id="2cdf1-492">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="uTF8Encoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2cdf1-493">Unicode 文字のシーケンスを UTF-8 でエンコードされたバイト シーケンスに変換するエンコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-493">Obtains an encoder that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-494">Unicode 文字のシーケンスを UTF-8 でエンコードされたバイト シーケンスに変換する <see cref="T:System.Text.Encoder" />。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-494">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-495"><xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> メソッドは、<xref:System.Text.UTF8Encoding.GetBytes%2A> メソッドと同様の方法で、文字の連続するブロックをバイトの連続するブロックに変換します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-495">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.UTF8Encoding.GetBytes%2A> method.</span></span> <span data-ttu-id="2cdf1-496">ただし、<xref:System.Text.Encoder> は、複数のブロックにまたがる文字シーケンスを正しくエンコードできるように、呼び出しの間に状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-496">However, a <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks.</span></span> <span data-ttu-id="2cdf1-497">また <xref:System.Text.Encoder> は、データブロックの末尾で末尾の文字を保持し、次のエンコーディング操作で末尾の文字を使用します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-497">The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="2cdf1-498">たとえば、データブロックの末尾が一致していない上位サロゲートで、一致する下位サロゲートが次のデータブロックに含まれている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-498">For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</span></span> <span data-ttu-id="2cdf1-499">そのため、<xref:System.Text.UTF8Encoding.GetDecoder%2A> と <xref:System.Text.UTF8Encoding.GetEncoder%2A> は、ネットワークの転送とファイル操作に役立ちます。これらの操作は、多くの場合、データストリーム全体ではなくデータブロックを処理するためです。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-499">Therefore, <xref:System.Text.UTF8Encoding.GetDecoder%2A> and <xref:System.Text.UTF8Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="2cdf1-500">エラー検出が有効になっている場合、つまり、コンストラクターの `throwOnInvalidCharacters` パラメーターが `true`に設定されている場合、このメソッドによって返される <xref:System.Text.Encoder> ではエラー検出も有効になります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-500">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> returned by this method.</span></span> <span data-ttu-id="2cdf1-501">エラー検出が有効になっていて、無効なシーケンスが検出された場合、エンコーダーの状態は未定義となり、処理を停止する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-501">If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cdf1-502">次の例では、<xref:System.Text.UTF8Encoding.GetEncoder%2A> メソッドを使用して、文字のシーケンスを UTF-8 でエンコードされたバイトシーケンスに変換するエンコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-502">The following example uses the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method to obtain an encoder to convert a sequence of characters into a UTF-8 encoded sequence of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/CPP/getencoder-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/CS/getencoder-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/VB/getencoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <related type="Article" href="/dotnet/standard/base-types/character-encoding"><span data-ttu-id="2cdf1-503">エンコーディングについて</span><span class="sxs-lookup"><span data-stu-id="2cdf1-503">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="uTF8Encoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2cdf1-504">現在のインスタンスのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-504">Returns the hash code for the current instance.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-505">現在のインスタンスのハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-505">The hash code for the current instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2cdf1-506">次の例では、<xref:System.Text.UTF8Encoding.GetHashCode%2A> メソッドを使用して、<xref:System.Text.UTF8Encoding> インスタンスのハッシュコードを返します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-506">The following example uses the <xref:System.Text.UTF8Encoding.GetHashCode%2A> method to return a hash code for <xref:System.Text.UTF8Encoding> instances.</span></span> <span data-ttu-id="2cdf1-507">このメソッドによって返されるハッシュコードは、<xref:System.Text.UTF8Encoding> オブジェクトの作成に使用されるコンストラクターによって異なることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-507">Notice that the hash code returned by this method depends on the constructor used to create the <xref:System.Text.UTF8Encoding> object.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/CPP/gethashcode-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/CS/gethashcode-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/VB/gethashcode-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="uTF8Encoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount"><span data-ttu-id="2cdf1-508">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-508">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="2cdf1-509">指定した文字数をエンコードすることによって生成される最大バイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-509">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-510">指定した文字数をエンコードすることによって生成される最大バイト数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-510">The maximum number of bytes produced by encoding the specified number of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-511"><xref:System.Text.UTF8Encoding.GetBytes%2A> が結果のバイトを格納するために必要な配列の正確なサイズを計算するには、<xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-511">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-512">配列の最大サイズを計算するには、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-512">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="2cdf1-513"><xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドは通常、より少ないメモリを割り当てますが、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドは通常、より高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-513">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="2cdf1-514"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> は、現在選択されている <xref:System.Text.EncoderFallback>の最悪のケースを含む、最悪の数値です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-514"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="2cdf1-515">大きな文字列を使用してフォールバックを選択した場合、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> は大きな値を返すことがあります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-515">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="2cdf1-516">ほとんどの場合、このメソッドは小さい文字列に対して適切な数値を返します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-516">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="2cdf1-517">大きな文字列の場合は、非常に大きなバッファーを使用するか、より適切なバッファーを超えた場合に、まれにエラーをキャッチするかを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-517">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="2cdf1-518"><xref:System.Text.UTF8Encoding.GetByteCount%2A> または <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>を使用した別の方法を検討することもできます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-518">You might also want to consider a different approach using <xref:System.Text.UTF8Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2cdf1-519">たとえば、英語とその他の多くの言語のテキストでは、文字を表すために必要な UTF-8 バイトは1つだけですが、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> によって返される数値は、変換される文字列が4バイトを必要とする文字だけで構成される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-519">For example, text in English and many other languages often needs only one UTF-8 byte to represent a character, but the number returned by <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> has to allow for the possibility that the string to be converted will consist entirely of characters that each require four bytes.</span></span>  
  
 <span data-ttu-id="2cdf1-520"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> に <xref:System.Text.UTF8Encoding.GetChars%2A>との関係はありません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-520"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF8Encoding.GetChars%2A>.</span></span> <span data-ttu-id="2cdf1-521"><xref:System.Text.UTF8Encoding.GetChars%2A>で使用する同様の機能がアプリケーションに必要な場合は、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-521">If your application needs a similar function to use with <xref:System.Text.UTF8Encoding.GetChars%2A>, it should use <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2cdf1-522">`GetMaxByteCount(N)` は、必ずしも `N* GetMaxByteCount(1)`と同じ値であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-522">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cdf1-523">次の例では、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> メソッドを使用して、指定された文字数をエンコードするために必要な最大バイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-523">The following example uses the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2cdf1-524"><paramref name="charCount" /> に 0 より小さい値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-524"><paramref name="charCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="2cdf1-525">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-525">-or-</span></span> 
<span data-ttu-id="2cdf1-526">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-526">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="2cdf1-527">フォールバックが発生しました (詳細については「<see href="/dotnet/standard/base-types/character-encoding">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="2cdf1-527">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="2cdf1-528">および</span><span class="sxs-lookup"><span data-stu-id="2cdf1-528">-and-</span></span> 
 <span data-ttu-id="2cdf1-529"><see cref="P:System.Text.Encoding.EncoderFallback" /> は <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-529"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="uTF8Encoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount"><span data-ttu-id="2cdf1-530">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-530">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="2cdf1-531">指定したバイト数をデコードすることによって生成される最大文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-531">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-532">指定したバイト数をデコードすることによって生成される最大文字数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-532">The maximum number of characters produced by decoding the specified number of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-533"><xref:System.Text.UTF8Encoding.GetChars%2A> が結果の文字を格納するために必要な配列の正確なサイズを計算するには、<xref:System.Text.UTF8Encoding.GetCharCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-533">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, you call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="2cdf1-534">配列の最大サイズを計算するには、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-534">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="2cdf1-535"><xref:System.Text.UTF8Encoding.GetCharCount%2A> メソッドは通常、より少ないメモリを割り当てますが、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> メソッドは通常、より高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-535">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="2cdf1-536"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> は、現在選択されている <xref:System.Text.DecoderFallback>の最悪のケースを含む、最悪の数値です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-536"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="2cdf1-537">大きな文字列を使用してフォールバックを選択した場合、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> は大きな値を返すことがあります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-537">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="2cdf1-538">ほとんどの場合、このメソッドは小さい文字列に対して適切な数値を返します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-538">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="2cdf1-539">大きな文字列の場合は、非常に大きなバッファーを使用するか、より適切なバッファーを超えた場合に、まれにエラーをキャッチするかを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-539">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span>  <span data-ttu-id="2cdf1-540"><xref:System.Text.UTF8Encoding.GetCharCount%2A> または <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>を使用した別の方法を検討することもできます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-540">You might also want to consider a different approach using <xref:System.Text.UTF8Encoding.GetCharCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2cdf1-541"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> に <xref:System.Text.UTF8Encoding.GetBytes%2A>との関係はありません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-541"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF8Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="2cdf1-542"><xref:System.Text.UTF8Encoding.GetBytes%2A>で使用する同様の機能がアプリケーションに必要な場合は、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-542">If your application needs a similar function to use with <xref:System.Text.UTF8Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2cdf1-543">`GetMaxCharCount(N)` は、必ずしも `N* GetMaxCharCount(1)`と同じ値であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-543">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cdf1-544">次の例では、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> メソッドを使用して、指定されたバイト数をデコードすることによって生成される最大文字数を返します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-544">The following example uses the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2cdf1-545"><paramref name="byteCount" /> に 0 より小さい値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-545"><paramref name="byteCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="2cdf1-546">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-546">-or-</span></span> 
<span data-ttu-id="2cdf1-547">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-547">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="2cdf1-548">フォールバックが発生しました (詳細については「<see href="/dotnet/standard/base-types/character-encoding">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="2cdf1-548">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="2cdf1-549">および</span><span class="sxs-lookup"><span data-stu-id="2cdf1-549">-and-</span></span> 
 <span data-ttu-id="2cdf1-550"><see cref="P:System.Text.Encoding.DecoderFallback" /> は <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-550"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberSignature Language="F#" Value="override this.GetPreamble : unit -&gt; byte[]" Usage="uTF8Encoding.GetPreamble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2cdf1-551"><see cref="T:System.Text.UTF8Encoding" /> エンコード オブジェクトが UTF-8 形式でエンコードされた Unicode バイト順マークを提供するように構成されている場合、そのようなマークが返されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-551">Returns a Unicode byte order mark encoded in UTF-8 format, if the <see cref="T:System.Text.UTF8Encoding" /> encoding object is configured to supply one.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-552"><see cref="T:System.Text.UTF8Encoding" /> エンコード オブジェクトが Unicode バイト順マークを提供するように構成されている場合、そうしたマークが格納されているバイト配列。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-552">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UTF8Encoding" /> encoding object is configured to supply one.</span></span> <span data-ttu-id="2cdf1-553">それ以外の場合、このメソッドは長さがゼロのバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-553">Otherwise, this method returns a zero-length byte array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-554"><xref:System.Text.UTF8Encoding> オブジェクトは、プリアンブルを提供できます。これは、エンコーディングプロセスによって生成されるバイトシーケンスにプレフィックスを付けることができるバイト配列です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-554">The <xref:System.Text.UTF8Encoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes that result from the encoding process.</span></span> <span data-ttu-id="2cdf1-555">バイト順マーク (コードポイント U + FEFF) を使用してエンコードされたバイトシーケンスを前に付けると、デコーダーはバイト順と変換形式 (UTF) を決定するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-555">Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format, or UTF.</span></span> <span data-ttu-id="2cdf1-556">Unicode バイト順マーク (BOM) は、0xEF 0Xef 0Xef としてシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-556">The Unicode byte order mark (BOM) is serialized as 0xEF 0xBB 0xBF.</span></span> <span data-ttu-id="2cdf1-557">Unicode 標準では、UTF-8 でエンコードされたストリームに BOM を使用する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-557">Note that the Unicode Standard neither requires nor recommends the use of a BOM for UTF-8 encoded streams.</span></span>  
  
 <span data-ttu-id="2cdf1-558"><xref:System.Text.UTF8Encoding.GetPreamble%2A> メソッドが有効な BOM を返す <xref:System.Text.UTF8Encoding> オブジェクトをインスタンス化するには、次の方法があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-558">You can instantiate a <xref:System.Text.UTF8Encoding> object whose <xref:System.Text.UTF8Encoding.GetPreamble%2A> method returns a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="2cdf1-559"><xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Text.UTF8Encoding> オブジェクトを取得する。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-559">By retrieving the <xref:System.Text.UTF8Encoding> object returned by the <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="2cdf1-560">`encoderShouldEmitUTF8Identifier` パラメーターを使用して <xref:System.Text.UTF8Encoding> コンストラクターを呼び出し、その値を `true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-560">By calling a <xref:System.Text.UTF8Encoding> constructor with a `encoderShouldEmitUTF8Identifier` parameter and setting its value set to `true`.</span></span>  
  
 <span data-ttu-id="2cdf1-561">その他すべての <xref:System.Text.UTF8Encoding> オブジェクトは、有効な BOM ではなく空の配列を返すように構成されています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-561">All other <xref:System.Text.UTF8Encoding> objects are configured to return an empty array rather than a valid BOM.</span></span>  
  
 <span data-ttu-id="2cdf1-562">BOM は、タグ付けされていない、または不適切なタグの付いた web データや、ビジネスに国際的な問題がない場合に保存されたランダムテキストファイルなど、エンコードへの参照が失われたファイルに対して、ほとんど特定のエンコードを識別します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-562">The BOM provide nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.</span></span> <span data-ttu-id="2cdf1-563">データが一貫して適切にタグ付けされている場合、ユーザーの問題が回避されることがよくあります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-563">Often user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="2cdf1-564">エンコードの種類を提供する標準の場合、BOM はやや冗長です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-564">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="2cdf1-565">ただし、このメソッドを使用して、サーバーが正しいエンコードヘッダーを送信できるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-565">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="2cdf1-566">または、エンコードが失われた場合にフォールバックとして使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-566">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="2cdf1-567">BOM の使用にはいくつかの欠点があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-567">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="2cdf1-568">たとえば、BOM を使用するデータベースフィールドを制限する方法を理解することは困難です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-568">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="2cdf1-569">ファイルの連結も問題になることがあります。たとえば、不要な文字がデータの途中で終了するような方法でファイルをマージする場合などです。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-569">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="2cdf1-570">ただし、いくつかの欠点がありますが、BOM を使用することを強くお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-570">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
 <span data-ttu-id="2cdf1-571">バイト順とバイト順マークの詳細については、unicode[ホームページ](https://go.microsoft.com/fwlink/?LinkId=37123)の unicode 標準を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-571">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2cdf1-572">エンコードされたバイトがファイルまたはストリームとして保存されるときに適切にデコードされるようにするには、エンコードされたバイトのストリームの先頭にプリアンブルを付けることができます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-572">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix the beginning of a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="2cdf1-573"><xref:System.Text.UTF8Encoding.GetBytes%2A> メソッドは、BOM をエンコードされたバイトシーケンスに付加しないことに注意してください。適切なバイトストリームの先頭に BOM を指定することは、開発者の責任です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-573">Note that the <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>
  
## Examples  
 <span data-ttu-id="2cdf1-574">次の例では、<xref:System.Text.UTF8Encoding.GetPreamble%2A> メソッドを使用して、UTF-8 形式でエンコードされた Unicode バイト順マークを返します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-574">The following example uses the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to return the Unicode byte order mark encoded in UTF-8 format.</span></span> <span data-ttu-id="2cdf1-575"><xref:System.Text.UTF8Encoding> のパラメーターなしのコンストラクターは、プリアンブルを提供しないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-575">Notice that the parameterless constructor for <xref:System.Text.UTF8Encoding> does not provide a preamble.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 <span data-ttu-id="2cdf1-576">次の例では<xref:System.Text.UTF8Encoding> 、2つのオブジェクトをインスタンス化<xref:System.Text.UTF8Encoding.%23ctor>します。最初のオブジェクトは、BOM を提供しないパラメーターなし<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29>のコンストラクターを`encoderShouldEmitUTF8Identifier`呼び出し、2番目のオブジェクトの引数をに設定してコンストラクターを呼び出します `true`。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-576">The following example instantiates two <xref:System.Text.UTF8Encoding> objects, the first by calling the parameterless <xref:System.Text.UTF8Encoding.%23ctor> constructor, which does not provide a BOM, and the second by calling the <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29> constructor with its `encoderShouldEmitUTF8Identifier` argument set to `true`.</span></span> <span data-ttu-id="2cdf1-577">次に、<xref:System.Text.UTF8Encoding.GetPreamble%2A> メソッドを呼び出して、UF8 エンコードされた文字列を書き込む前に BOM をファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-577">It then calls the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to write the BOM to a file before writing a UF8-encoded string.</span></span> <span data-ttu-id="2cdf1-578">この例のコンソール出力に示されているように、2番目のエンコーダーからバイトを保存するファイルには、最初のエンコーダーよりも3バイトが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-578">As the console output from the example shows, the file that saves the bytes from the second encoder has three more bytes than the first.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getpreamble/cs/getpreamble1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getpreamble/vb/getpreamble1.vb#1)]  
  
 <span data-ttu-id="2cdf1-579">また、コンソールウィンドウで `fc` コマンドを使用してファイルを比較したり、16進数の表示モードを含むテキストエディターでファイルを検査したりすることもできます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-579">You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</span></span> <span data-ttu-id="2cdf1-580">UTF-8 をサポートするエディターでファイルを開くと、BOM が表示されないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-580">Note that when the file is opened in an editor that supports UTF-8, the BOM is not displayed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="uTF8Encoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="2cdf1-581">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-581">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="2cdf1-582">デコードする最初のバイトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-582">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="2cdf1-583">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-583">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="2cdf1-584">バイト配列に格納されているある範囲のバイトを文字列にデコードします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-584">Decodes a range of bytes from a byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="2cdf1-585">指定したバイト シーケンスのデコード結果が格納されている <see cref="T:System.String" /> 。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-585">A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-586">エラー検出を使用すると、無効なシーケンスによってこのメソッドが <xref:System.ArgumentException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-586">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="2cdf1-587">エラー検出を行わないと、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-587">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="2cdf1-588">デコードするバイト範囲にバイトオーダーマーク (BOM) が含まれており、そのバイト配列が非 BOM 対応型のメソッドによって返された場合は、このメソッドによって返される文字配列に U + FFFE という文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-588">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="2cdf1-589"><xref:System.String.TrimStart%2A?displayProperty=nameWithType> メソッドを呼び出すことによって削除できます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-589">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="2cdf1-590">ストリームから読み取られたデータなど、変換されるデータは、連続したブロックでのみ使用できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-590">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="2cdf1-591">この場合、またはデータ量が非常に大きく、小さいブロックに分割する必要がある場合は、それぞれ <xref:System.Text.UTF8Encoding.GetDecoder%2A> メソッドまたは <xref:System.Text.UTF8Encoding.GetEncoder%2A> メソッドによって提供される <xref:System.Text.Decoder> または <xref:System.Text.Encoder> を使用します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-591">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cdf1-592">次の例では、<xref:System.Text.UTF8Encoding.GetByteCount%2A> メソッドを呼び出して配列を初期化し、エンコードされた文字列に必要なバイト数を正確に特定し、バイト順マーク (BOM) のサイズを追加します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-592">The following example initializes an array by calling the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</span></span> <span data-ttu-id="2cdf1-593">次に、<xref:System.Text.UTF8Encoding.GetBytes%2A> メソッドを呼び出して配列にエンコードされたバイトを格納する前に、<xref:System.Text.UTF8Encoding.GetPreamble%2A> メソッドを呼び出して、BOM を配列に格納します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-593">The example then calls the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to store the encoded bytes to the array.</span></span> <span data-ttu-id="2cdf1-594">次に、この例では、<xref:System.Text.UTF8Encoding.GetString%2A> メソッドを呼び出して文字列をデコードします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-594">The example then calls the <xref:System.Text.UTF8Encoding.GetString%2A> method to decode the string.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 <span data-ttu-id="2cdf1-595">この場合、デコードされた文字列は、16ビットのバイトオーダーマーク (U + FFFD) で始まるため、元の文字列とは異なります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-595">Note that in this case the decoded string differs from the original string, since it begins with a 16-bit byte order mark U+FFFD.</span></span> <span data-ttu-id="2cdf1-596">つまり、2つの文字列は等しくないものとして比較され、文字列が出力されると、BOM は置換文字 "?" として表示されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-596">This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</span></span> <span data-ttu-id="2cdf1-597">文字列の先頭にある BOM を削除するには、<xref:System.String.TrimStart%2A?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-597">To remove the BOM at the beginning of the string, you can call the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2cdf1-598"><paramref name="bytes" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-598"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2cdf1-599"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-599"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="2cdf1-600">または</span><span class="sxs-lookup"><span data-stu-id="2cdf1-600">-or-</span></span> 
 <span data-ttu-id="2cdf1-601"><paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" />において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-601"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2cdf1-602">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-602">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="2cdf1-603">フォールバックが発生しました (詳細については「<see href="/dotnet/standard/base-types/character-encoding">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="2cdf1-603">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="2cdf1-604">および</span><span class="sxs-lookup"><span data-stu-id="2cdf1-604">-and-</span></span> 
 <span data-ttu-id="2cdf1-605"><see cref="P:System.Text.Encoding.DecoderFallback" /> は <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-605"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Preamble">
      <MemberSignature Language="C#" Value="public override ReadOnlySpan&lt;byte&gt; Preamble { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; Preamble" />
      <MemberSignature Language="DocId" Value="P:System.Text.UTF8Encoding.Preamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Preamble As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property ReadOnlySpan&lt;System::Byte&gt; Preamble { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Preamble : ReadOnlySpan&lt;byte&gt;" Usage="System.Text.UTF8Encoding.Preamble" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cdf1-606">このオブジェクトが UTF-8 形式でエンコードされた Unicode バイト順マークを提供するように構成されている場合は、そのようなマークを取得します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-606">Gets a Unicode byte order mark encoded in UTF-8 format, if this object is configured to supply one.</span></span></summary>
        <value><span data-ttu-id="2cdf1-607">このオブジェクトが1を指定するように構成されている場合は、Unicode バイト順マークを格納しているバイト範囲。それ以外の場合は、既定のスパンです。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-607">A byte span containing the Unicode byte order mark, if this object is configured to supply one; otherwise, the default span.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cdf1-608"><xref:System.Text.UTF8Encoding> オブジェクトは、プリアンブルを提供できます。これは、エンコーディングプロセスによって生成されるバイトシーケンスにプレフィックスとして使用できるバイトの範囲です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-608">The <xref:System.Text.UTF8Encoding> object can provide a preamble, which is a span of bytes that can be prefixed to the sequence of bytes that result from the encoding process.</span></span> <span data-ttu-id="2cdf1-609">エンコードされたバイトシーケンスをバイト順マーク (コードポイント `U+FEFF`) で前に付けると、デコーダーはバイト順と変換形式 (UTF) を決定できます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-609">Prefacing a sequence of encoded bytes with a byte order mark (code point `U+FEFF`) helps the decoder determine the byte order and the transformation format, or UTF.</span></span> <span data-ttu-id="2cdf1-610">Unicode バイト順マーク (BOM) は、0xEF 0Xef 0Xef としてシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-610">The Unicode byte order mark (BOM) is serialized as 0xEF 0xBB 0xBF.</span></span> <span data-ttu-id="2cdf1-611">Unicode 標準では、UTF-8 でエンコードされたストリームに BOM を使用する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-611">Note that the Unicode Standard neither requires nor recommends the use of a BOM for UTF-8 encoded streams.</span></span>  
  
 <span data-ttu-id="2cdf1-612">`Preamble` が有効な BOM である <xref:System.Text.UTF8Encoding> オブジェクトをインスタンス化するには、次の方法があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-612">You can instantiate a <xref:System.Text.UTF8Encoding> object whose `Preamble` is a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="2cdf1-613"><xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Text.UTF8Encoding> オブジェクトを取得する。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-613">By retrieving the <xref:System.Text.UTF8Encoding> object returned by the <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="2cdf1-614">`encoderShouldEmitUTF8Identifier` パラメーターを使用して <xref:System.Text.UTF8Encoding> コンストラクターを呼び出し、その値を `true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-614">By calling a <xref:System.Text.UTF8Encoding> constructor with an `encoderShouldEmitUTF8Identifier` parameter and setting its value set to `true`.</span></span>  
  
 <span data-ttu-id="2cdf1-615">その他すべての <xref:System.Text.UTF8Encoding> オブジェクトは、有効な BOM ではなく既定のスパンを返すように構成されています。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-615">All other <xref:System.Text.UTF8Encoding> objects are configured to return a default span rather than a valid BOM.</span></span>  
  
 <span data-ttu-id="2cdf1-616">BOM は、タグ付けされていない、または不適切なタグの付いた web データや、ビジネスに国際的な関心事がない場合に保存されたランダムテキストファイルなど、エンコードへの参照が失われたファイルのエンコードをほぼ特定の方法で識別します。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-616">The BOM provides nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.</span></span> <span data-ttu-id="2cdf1-617">データが一貫して適切にタグ付けされている場合、ユーザーの問題が回避されることがよくあります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-617">Often user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="2cdf1-618">エンコードの種類を提供する標準の場合、BOM はやや冗長です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-618">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="2cdf1-619">ただし、このメソッドを使用して、サーバーが正しいエンコードヘッダーを送信できるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-619">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="2cdf1-620">または、エンコードが失われた場合にフォールバックとして使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-620">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="2cdf1-621">BOM の使用にはいくつかの欠点があります。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-621">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="2cdf1-622">たとえば、BOM を使用するデータベースフィールドを制限する方法を理解することは困難です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-622">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="2cdf1-623">ファイルの連結も問題になることがあります。たとえば、不要な文字がデータの途中で終了するような方法でファイルをマージする場合などです。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-623">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="2cdf1-624">ただし、いくつかの欠点がありますが、BOM を使用することを強くお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-624">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
 <span data-ttu-id="2cdf1-625">バイト順とバイト順マークの詳細については、unicode[ホームページ](https://go.microsoft.com/fwlink/?LinkId=37123)の unicode 標準を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-625">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2cdf1-626">エンコードされたバイトがファイルまたはストリームとして保存されるときに適切にデコードされるようにするには、エンコードされたバイトのストリームの先頭にプリアンブルを付けることができます。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-626">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix the beginning of a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="2cdf1-627"><xref:System.Text.UTF8Encoding.GetBytes%2A> メソッドは、BOM をエンコードされたバイトシーケンスに付加しないことに注意してください。適切なバイトストリームの先頭に BOM を指定することは、開発者の責任です。</span><span class="sxs-lookup"><span data-stu-id="2cdf1-627">Note that the <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
