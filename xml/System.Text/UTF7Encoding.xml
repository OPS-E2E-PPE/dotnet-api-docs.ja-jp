<Type Name="UTF7Encoding" FullName="System.Text.UTF7Encoding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0e8620bd6522459231fb83c56b6372a5f51d8ab5" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83493175" /></Metadata><TypeSignature Language="C#" Value="public class UTF7Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UTF7Encoding extends System.Text.Encoding" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF7Encoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UTF7Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF7Encoding : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UTF7Encoding = class&#xA;    inherit Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UTF7Encoding extends System.Text.Encoding" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Text.Encoding.Extensions" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a1d34-101">Unicode 文字の UTF-7 エンコードを表します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-101">Represents a UTF-7 encoding of Unicode characters.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-102">エンコーディングは、Unicode 文字のセットをバイト シーケンスに変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="a1d34-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="a1d34-103">デコードとは、エンコードされたバイトシーケンスを Unicode 文字のセットに変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="a1d34-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="a1d34-104">UTF-7 エンコーディングは、Unicode 文字を7ビット ASCII 文字のシーケンスとして表します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-104">The UTF-7 encoding represents Unicode characters as sequences of 7-bit ASCII characters.</span></span> <span data-ttu-id="a1d34-105">このエンコードは、必要な特定のプロトコル (ほとんどの場合、電子メールまたはニュースグループのプロトコル) をサポートします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-105">This encoding supports certain protocols for which it is required, most often email or newsgroup protocols.</span></span> <span data-ttu-id="a1d34-106">UTF-7 は特に安全でも堅牢でもないため、最新のシステムでは8ビットエンコーディングが許可されるため、utf-8 は通常、utf-8 にすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-106">Since UTF-7 is not particularly secure or robust, and most modern systems allow 8-bit encodings, UTF-8 should normally be preferred to UTF-7.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1d34-107"><xref:System.Text.UTF7Encoding> では、エラー検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-107"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1d34-108">セキュリティ上の理由から、アプリケーションでは <xref:System.Text.UTF8Encoding>、<xref:System.Text.UnicodeEncoding>、または <xref:System.Text.UTF32Encoding> を使用し、エラー検出を有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-108">For security reasons, the application should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
 <span data-ttu-id="a1d34-109">UTFs および <xref:System.Text>でサポートされているその他のエンコーディングの詳細については、 [.NET Framework の「文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a1d34-109">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="a1d34-110"><xref:System.Text.UTF7Encoding.GetByteCount%2A> メソッドは、Unicode 文字のセットをエンコードするためのバイト数を決定し、<xref:System.Text.UTF7Encoding.GetBytes%2A> メソッドは実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-110">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF7Encoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="a1d34-111">同様に、<xref:System.Text.UTF7Encoding.GetCharCount%2A> メソッドは、バイトシーケンスをデコードする文字数を決定し、<xref:System.Text.UTF7Encoding.GetChars%2A> メソッドと <xref:System.Text.UTF7Encoding.GetString%2A> メソッドが実際のデコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-111">Likewise, the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF7Encoding.GetChars%2A> and <xref:System.Text.UTF7Encoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="a1d34-112"><xref:System.Text.UTF7Encoding> は、Windows コードページ65000に対応しています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-112"><xref:System.Text.UTF7Encoding> corresponds to the Windows code page 65000.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1d34-113">オブジェクトが異なる .NET Framework バージョンを使用してシリアル化および逆シリアル化されている場合、UTF-7 でエンコードされたオブジェクトの状態は保持されません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-113">The state of a UTF-7 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1d34-114">次のコード例では、<xref:System.Text.UTF7Encoding> を使用して Unicode 文字の文字列をエンコードし、バイト配列に格納する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-114">The following code example demonstrates how to use a <xref:System.Text.UTF7Encoding> to encode a string of Unicode characters and store them in a byte array.</span></span> <span data-ttu-id="a1d34-115">バイト配列が文字列にデコードされると、データは失われないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="a1d34-115">Notice that when the byte array is decoded back to a string, no data is lost.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UTF7Encoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/VB/snippet.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.Encoder" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="a1d34-116">エンコーディングについて</span><span class="sxs-lookup"><span data-stu-id="a1d34-116">Understanding Encodings</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1d34-117"><see cref="T:System.Text.UTF7Encoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-117">Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF7Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF7Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1d34-118"><see cref="T:System.Text.UTF7Encoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-118">Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-119">このコンストラクターは、省略可能な文字を許可しないインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-119">This constructor creates an instance that does not allow optional characters.</span></span> <span data-ttu-id="a1d34-120"><xref:System.Text.UTF7Encoding.%23ctor%2A> コンストラクターを呼び出すことは、`allowOptionals` パラメーターを受け取り、そのパラメーターに `false` を指定する <xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType> コンストラクターを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="a1d34-120">Calling the <xref:System.Text.UTF7Encoding.%23ctor%2A> constructor is equivalent to calling the <xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType> constructor that takes an `allowOptionals` parameter and specifying `false` for that parameter.</span></span>  
  
 <span data-ttu-id="a1d34-121">インスタンスでオプションの文字が許可されている場合、Unicode コードポイントは、変更後の base 64 文字ではなく、対応する省略可能な文字でエンコードされます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-121">If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character.</span></span> <span data-ttu-id="a1d34-122">省略可能な文字は感嘆符 ("!") です。)、円記号 ("\\")、縦線 (" &#124; ")、二重引用符 ("" ")、シャープ記号 (" # ")、ドル記号 (" $ ")、パーセント記号 ("% ")、アンパサンド (" & ")、アスタリスク (" \* ")、セミコロン ("; ")、左山かっこ ("\<")、右山かっこ (" > ")、left 中かっこ (" {")、右中かっこ ("} ")、左角かっこ (" [")、右角かっこ ("] ")、等号 (" = ")、アットマーク (" @ ")、アクセント記号 (" ^ ")、アンダースコア (" _ ")、およびアクサングラーブ (" ' ")。</span><span class="sxs-lookup"><span data-stu-id="a1d34-122">The optional characters are exclamation point ("!"), backward slash ("\\"), vertical line ("&#124;"), double quote ("""), number sign ("#"), dollar sign ("$"), percent sign ("%"), ampersand ("&"), asterisk ("\*"), semicolon (";"), left angle bracket ("\<"), right angle bracket (">"), left curly bracket ("{"), right curly bracket ("}"), left square bracket ("["), right square bracket ("]"), equal sign ("="), at sign ("@"), circumflex accent ("^"), underscore ("_"), and grave accent ("\`").</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1d34-123"><xref:System.Text.UTF7Encoding> では、エラー検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-123"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1d34-124">セキュリティ上の理由から、<xref:System.Text.UTF8Encoding>、<xref:System.Text.UnicodeEncoding>、または <xref:System.Text.UTF32Encoding> を使用してエラー検出を有効にすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-124">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1d34-125">次のコード例は、新しい <xref:System.Text.UTF7Encoding> インスタンスを作成し、エンコーディングの名前を表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-125">The following code example demonstrates how to create a new <xref:System.Text.UTF7Encoding> instance and display the name of the encoding.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF7Encoding (bool allowOptionals);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool allowOptionals) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (allowOptionals As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF7Encoding(bool allowOptionals);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF7Encoding : bool -&gt; System.Text.UTF7Encoding" Usage="new System.Text.UTF7Encoding allowOptionals" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="allowOptionals" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowOptionals"><span data-ttu-id="a1d34-126">省略文字を許可するよう指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a1d34-126"><see langword="true" /> to specify that optional characters are allowed; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a1d34-127"><see cref="T:System.Text.UTF7Encoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-127">Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class.</span></span> <span data-ttu-id="a1d34-128">パラメーターでは、省略可能な文字を許可するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-128">A parameter specifies whether to allow optional characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-129">インスタンスでオプションの文字が許可されている場合、Unicode コードポイントは、変更後の base 64 文字ではなく、対応する省略可能な文字でエンコードされます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-129">If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character.</span></span> <span data-ttu-id="a1d34-130">省略可能な文字は感嘆符 ("!") です。)、円記号 ("\\")、縦線 (" &#124; ")、二重引用符 ("" ")、シャープ記号 (" # ")、ドル記号 (" $ ")、パーセント記号 ("% ")、アンパサンド (" & ")、アスタリスク (" \* ")、セミコロン ("; ")、左山かっこ ("\<")、右山かっこ (" > ")、left 中かっこ (" {")、右中かっこ ("} ")、左角かっこ (" [")、右角かっこ ("] ")、等号 (" = ")、アットマーク (" @ ")、アクセント記号 (" ^ ")、アンダースコア (" _ ")、およびアクサングラーブ (" ' ")。</span><span class="sxs-lookup"><span data-stu-id="a1d34-130">The optional characters are exclamation point ("!"), backward slash ("\\"), vertical line ("&#124;"), double quote ("""), number sign ("#"), dollar sign ("$"), percent sign ("%"), ampersand ("&"), asterisk ("\*"), semicolon (";"), left angle bracket ("\<"), right angle bracket (">"), left curly bracket ("{"), right curly bracket ("}"), left square bracket ("["), right square bracket ("]"), equal sign ("="), at sign ("@"), circumflex accent ("^"), underscore ("_"), and grave accent ("\`").</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1d34-131"><xref:System.Text.UTF7Encoding> では、エラー検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-131"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1d34-132">セキュリティ上の理由から、<xref:System.Text.UTF8Encoding>、<xref:System.Text.UnicodeEncoding>、または <xref:System.Text.UTF32Encoding> を使用してエラー検出を有効にすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-132">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1d34-133">次のコード例では、省略可能な文字を許可する新しい <xref:System.Text.UTF7Encoding> インスタンスを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-133">The following code example demonstrates how to create a new <xref:System.Text.UTF7Encoding> instance that allows optional characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/CPP/ctor-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/CS/ctor-boolean.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/VB/ctor-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="uTF7Encoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1d34-134">現在の <see cref="T:System.Text.UTF7Encoding" /> オブジェクトと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a1d34-134">An object to compare to the current <see cref="T:System.Text.UTF7Encoding" /> object.</span></span></param>
        <summary><span data-ttu-id="a1d34-135">指定されたオブジェクトと現在の <see cref="T:System.Text.UTF7Encoding" /> オブジェクトが等しいかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-135">Gets a value indicating whether the specified object is equal to the current <see cref="T:System.Text.UTF7Encoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="a1d34-136"><paramref name="value" /> が <see cref="T:System.Text.UTF7Encoding" /> オブジェクトで、現在の <see cref="T:System.Text.UTF7Encoding" /> オブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a1d34-136"><see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.Text.UTF7Encoding" /> object and is equal to the current <see cref="T:System.Text.UTF7Encoding" /> object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-137">2つの <xref:System.Text.UTF7Encoding> オブジェクトは、省略可能な文字を許可するか禁止するかを指定します。これらのオブジェクトの基になる <xref:System.Text.Encoding.EncoderFallback%2A> と <xref:System.Text.Encoding.DecoderFallback%2A> プロパティが等しい場合は、等しくなります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-137">Two <xref:System.Text.UTF7Encoding> objects are equal if they both either allow or disallow optional characters, and if their underlying <xref:System.Text.Encoding.EncoderFallback%2A> and <xref:System.Text.Encoding.DecoderFallback%2A> properties are equal.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="Overload:System.Text.UTF7Encoding.#ctor" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1d34-138">文字のセットをエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-138">Calculates the number of bytes produced by encoding a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="uTF7Encoding.GetByteCount s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="a1d34-139">エンコード対象の文字のセットを格納している <see cref="T:System.String" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a1d34-139">The <see cref="T:System.String" /> object containing the set of characters to encode.</span></span></param>
        <summary><span data-ttu-id="a1d34-140">指定した <see cref="T:System.String" /> オブジェクト内の文字をエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-140">Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="a1d34-141">指定した文字をエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-141">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-142">結果のバイトを格納するために <xref:System.Text.UTF7Encoding.GetBytes%2A> が必要とする正確な配列サイズを計算するために、アプリケーションは <xref:System.Text.UTF7Encoding.GetByteCount%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-142">To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="a1d34-143">配列の最大サイズを計算するには、アプリケーションで <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-143">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="a1d34-144"><xref:System.Text.UTF7Encoding.GetByteCount%2A> メソッドを使用すると、通常はより少ないメモリを割り当てることができますが、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> メソッドは一般に高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-144">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1d34-145">次のコード例は、<xref:System.Text.UTF7Encoding.GetByteCount%2A> メソッドを使用して、文字配列をエンコードするために必要なバイト数を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-145">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetByteCount%2A> method to return the number of bytes required to encode a character array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1d34-146"><paramref name="s" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-146"><paramref name="s" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a1d34-147">結果のバイト数が、int として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-147">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="a1d34-148">フォールバックが発生しました (詳細な説明は、「<see href="~/docs/standard/base-types/character-encoding.md">.NET での文字エンコード</see>」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="a1d34-148">A fallback occurred (see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see> for fuller explanation).</span></span>
  
<span data-ttu-id="a1d34-149">および</span><span class="sxs-lookup"><span data-stu-id="a1d34-149">-and-</span></span> 
 <span data-ttu-id="a1d34-150"><see cref="P:System.Text.Encoding.EncoderFallback" /> は <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-150"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF7Encoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="a1d34-151">エンコードする最初の文字へのポインター。</span><span class="sxs-lookup"><span data-stu-id="a1d34-151">A pointer to the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="a1d34-152">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-152">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="a1d34-153">指定した文字ポインターで始まる文字のセットをエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-153">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="a1d34-154">指定した文字をエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-154">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-155">結果のバイトを格納するために <xref:System.Text.UTF7Encoding.GetBytes%2A> が必要とする正確な配列サイズを計算するために、アプリケーションは <xref:System.Text.UTF7Encoding.GetByteCount%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-155">To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="a1d34-156">配列の最大サイズを計算するには、アプリケーションで <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-156">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="a1d34-157"><xref:System.Text.UTF7Encoding.GetByteCount%2A> メソッドを使用すると、通常はより少ないメモリを割り当てることができますが、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> メソッドは一般に高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-157">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1d34-158"><paramref name="chars" /> が <see langword="null" /> (Visual Basic .NET の場合は <see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-158"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" /> in Visual Basic .NET).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a1d34-159"><paramref name="count" /> に 0 より小さい値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-159"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="a1d34-160">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-160">-or-</span></span> 
<span data-ttu-id="a1d34-161">結果のバイト数が、int として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-161">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="a1d34-162">フォールバックが発生しました (詳細については「<see href="~/docs/standard/base-types/character-encoding.md">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="a1d34-162">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="a1d34-163">および</span><span class="sxs-lookup"><span data-stu-id="a1d34-163">-and-</span></span> 
 <span data-ttu-id="a1d34-164"><see cref="P:System.Text.Encoding.EncoderFallback" /> は <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-164"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="uTF7Encoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="a1d34-165">エンコード対象の文字のセットを格納している文字配列。</span><span class="sxs-lookup"><span data-stu-id="a1d34-165">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="a1d34-166">エンコードする最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="a1d34-166">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="a1d34-167">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-167">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="a1d34-168">指定した文字配列から文字のセットをエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-168">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span></span></summary>
        <returns><span data-ttu-id="a1d34-169">指定した文字をエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-169">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-170"><xref:System.Text.UTF7Encoding.GetBytes%2A> が結果のバイトを格納するために必要な配列の正確なサイズを計算するために、アプリケーションは <xref:System.Text.UTF7Encoding.GetByteCount%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-170">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="a1d34-171">配列の最大サイズを計算するには、アプリケーションで <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-171">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="a1d34-172"><xref:System.Text.UTF7Encoding.GetByteCount%2A> メソッドを使用すると、通常はより少ないメモリを割り当てることができますが、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> メソッドは一般に高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-172">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1d34-173">次のコード例は、<xref:System.Text.UTF7Encoding.GetByteCount%2A> メソッドを使用して、Unicode 文字の配列をエンコードするために必要なバイト数を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-173">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetByteCount%2A> method to return the number of bytes required to encode an array of Unicode characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1d34-174"><paramref name="chars" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-174"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a1d34-175"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-175"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="a1d34-176">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-176">-or-</span></span> 
 <span data-ttu-id="a1d34-177"><paramref name="index" /> および <paramref name="count" /> は <paramref name="chars" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-177"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="a1d34-178">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-178">-or-</span></span> 
<span data-ttu-id="a1d34-179">結果のバイト数が、int として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-179">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="a1d34-180">フォールバックが発生しました (詳細については「<see href="~/docs/standard/base-types/character-encoding.md">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="a1d34-180">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="a1d34-181">および</span><span class="sxs-lookup"><span data-stu-id="a1d34-181">-and-</span></span> 
 <span data-ttu-id="a1d34-182"><see cref="P:System.Text.Encoding.EncoderFallback" /> は <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-182"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1d34-183">文字セットを一連のバイトにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-183">Encodes a set of characters into a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF7Encoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Byte*" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="a1d34-184">エンコードする最初の文字へのポインター。</span><span class="sxs-lookup"><span data-stu-id="a1d34-184">A pointer to the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="a1d34-185">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-185">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="a1d34-186">結果のバイト シーケンスの書き込みを開始する位置へのポインター。</span><span class="sxs-lookup"><span data-stu-id="a1d34-186">A pointer to the location at which to start writing the resulting sequence of bytes.</span></span></param>
        <param name="byteCount"><span data-ttu-id="a1d34-187">書き込む最大バイト数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-187">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="a1d34-188">指定した文字ポインターで始まる文字のセットを、指定したバイト ポインターを開始位置として格納されるバイト シーケンスにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-188">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="a1d34-189"><paramref name="bytes" /> によって示される位置に書き込まれる実際のバイト数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-189">The actual number of bytes written at the location indicated by <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-190"><xref:System.Text.UTF7Encoding.GetBytes%2A> が結果のバイトを格納するために必要な配列の正確なサイズを計算するために、アプリケーションは <xref:System.Text.UTF7Encoding.GetByteCount%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-190">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="a1d34-191">配列の最大サイズを計算するには、アプリケーションで <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-191">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="a1d34-192"><xref:System.Text.UTF7Encoding.GetByteCount%2A> メソッドを使用すると、通常はより少ないメモリを割り当てることができますが、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> メソッドは一般に高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-192">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="a1d34-193">ストリームから読み取られたデータなど、変換されるデータは、連続したブロックでのみ使用できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-193">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="a1d34-194">この場合、またはデータ量が非常に大きく、小さいブロックに分割する必要がある場合、アプリケーションでは、<xref:System.Text.UTF7Encoding.GetDecoder%2A> メソッドまたは <xref:System.Text.UTF7Encoding.GetEncoder%2A> メソッドによって提供される <xref:System.Text.Decoder> または <xref:System.Text.Encoder> をそれぞれ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-194">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1d34-195"><xref:System.Text.UTF7Encoding> では、エラー検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-195"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1d34-196">無効な文字は、変更後の base 64 文字としてエンコードされます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-196">Invalid characters are encoded as a modified base 64 character.</span></span> <span data-ttu-id="a1d34-197">セキュリティ上の理由から、<xref:System.Text.UTF8Encoding>、<xref:System.Text.UnicodeEncoding>、または <xref:System.Text.UTF32Encoding> を使用してエラー検出を有効にすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-197">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1d34-198"><paramref name="chars" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-198"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="a1d34-199">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-199">-or-</span></span> 
 <span data-ttu-id="a1d34-200"><paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-200"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a1d34-201"><paramref name="charCount" /> または <paramref name="byteCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-201"><paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1d34-202"><paramref name="byteCount" /> が結果のバイト数より少なくなっています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-202"><paramref name="byteCount" /> is less than the resulting number of bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="a1d34-203">フォールバックが発生しました (詳細な説明は、「<see href="~/docs/standard/base-types/character-encoding.md">.NET での文字エンコード</see>」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="a1d34-203">A fallback occurred (see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see> for fuller explanation).</span></span>
  
<span data-ttu-id="a1d34-204">および</span><span class="sxs-lookup"><span data-stu-id="a1d34-204">-and-</span></span> 
 <span data-ttu-id="a1d34-205"><see cref="P:System.Text.Encoding.EncoderFallback" /> は <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-205"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="uTF7Encoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="a1d34-206">エンコード対象の文字のセットを格納している文字配列。</span><span class="sxs-lookup"><span data-stu-id="a1d34-206">The character array containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="a1d34-207">エンコードする最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="a1d34-207">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="a1d34-208">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-208">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="a1d34-209">結果のバイト シーケンスを格納するバイト配列。</span><span class="sxs-lookup"><span data-stu-id="a1d34-209">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="a1d34-210">結果のバイト シーケンスを書き込む開始位置のインデックス。</span><span class="sxs-lookup"><span data-stu-id="a1d34-210">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="a1d34-211">指定した文字配列に格納されている文字のセットを指定したバイト配列にエンコードします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-211">Encodes a set of characters from the specified character array into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="a1d34-212"><paramref name="bytes" /> に書き込まれた実際のバイト数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-212">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-213"><xref:System.Text.UTF7Encoding.GetBytes%2A> が結果のバイトを格納するために必要な配列の正確なサイズを計算するために、アプリケーションは <xref:System.Text.UTF7Encoding.GetByteCount%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-213">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="a1d34-214">配列の最大サイズを計算するには、アプリケーションで <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-214">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="a1d34-215"><xref:System.Text.UTF7Encoding.GetByteCount%2A> メソッドを使用すると、通常はより少ないメモリを割り当てることができますが、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> メソッドは一般に高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-215">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="a1d34-216">ストリームから読み取られたデータなど、変換されるデータは、連続したブロックでのみ使用できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-216">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="a1d34-217">この場合、またはデータ量が非常に大きく、小さいブロックに分割する必要がある場合、アプリケーションでは、<xref:System.Text.UTF7Encoding.GetDecoder%2A> メソッドまたは <xref:System.Text.UTF7Encoding.GetEncoder%2A> メソッドによって提供される <xref:System.Text.Decoder> または <xref:System.Text.Encoder> をそれぞれ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-217">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1d34-218"><xref:System.Text.UTF7Encoding> では、エラー検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-218"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1d34-219">無効な文字は、変更後の base 64 文字としてエンコードされます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-219">Invalid characters are encoded as a modified base 64 character.</span></span> <span data-ttu-id="a1d34-220">セキュリティ上の理由から、<xref:System.Text.UTF8Encoding>、<xref:System.Text.UnicodeEncoding>、または <xref:System.Text.UTF32Encoding> を使用してエラー検出を有効にすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-220">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1d34-221">次のコード例では、<xref:System.Text.UTF7Encoding.GetBytes%2A> メソッドを使用して <xref:System.String> から文字の範囲をエンコードし、バイト配列の要素範囲にエンコードされたバイトを格納する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-221">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetBytes%2A> method to encode a range of characters from a <xref:System.String> and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1d34-222"><paramref name="chars" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-222"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="a1d34-223">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-223">-or-</span></span> 
 <span data-ttu-id="a1d34-224"><paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-224"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a1d34-225"><paramref name="charIndex" />、<paramref name="charCount" />、または <paramref name="byteIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-225"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="a1d34-226">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-226">-or-</span></span> 
 <span data-ttu-id="a1d34-227"><paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-227"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="a1d34-228">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-228">-or-</span></span> 
 <span data-ttu-id="a1d34-229"><paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-229"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1d34-230"><paramref name="bytes" /> には、<paramref name="byteIndex" /> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-230"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="a1d34-231">フォールバックが発生しました (詳細な説明は、「<see href="~/docs/standard/base-types/character-encoding.md">.NET での文字エンコード</see>」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="a1d34-231">A fallback occurred (see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see> for fuller explanation).</span></span>
  
<span data-ttu-id="a1d34-232">および</span><span class="sxs-lookup"><span data-stu-id="a1d34-232">-and-</span></span> 
 <span data-ttu-id="a1d34-233"><see cref="P:System.Text.Encoding.EncoderFallback" /> は <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-233"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="uTF7Encoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Byte[]" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteIndex" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="a1d34-234">エンコード対象の文字のセットを格納している <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="a1d34-234">The <see cref="T:System.String" /> containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="a1d34-235">エンコードする最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="a1d34-235">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="a1d34-236">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-236">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="a1d34-237">結果のバイト シーケンスを格納するバイト配列。</span><span class="sxs-lookup"><span data-stu-id="a1d34-237">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="a1d34-238">結果のバイト シーケンスを書き込む開始位置のインデックス。</span><span class="sxs-lookup"><span data-stu-id="a1d34-238">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="a1d34-239">指定した <see cref="T:System.String" /> の文字セットを、指定したバイト配列にエンコードします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-239">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="a1d34-240"><paramref name="bytes" /> に書き込まれた実際のバイト数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-240">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-241"><xref:System.Text.UTF7Encoding.GetBytes%2A> が結果のバイトを格納するために必要な配列の正確なサイズを計算するために、アプリケーションは <xref:System.Text.UTF7Encoding.GetByteCount%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-241">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="a1d34-242">配列の最大サイズを計算するには、アプリケーションで <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-242">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="a1d34-243"><xref:System.Text.UTF7Encoding.GetByteCount%2A> メソッドを使用すると、通常はより少ないメモリを割り当てることができますが、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> メソッドは一般に高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-243">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="a1d34-244">ストリームから読み取られたデータなど、変換されるデータは、連続したブロックでのみ使用できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-244">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="a1d34-245">この場合、またはデータ量が非常に大きく、小さいブロックに分割する必要がある場合、アプリケーションでは、<xref:System.Text.UTF7Encoding.GetDecoder%2A> メソッドまたは <xref:System.Text.UTF7Encoding.GetEncoder%2A> メソッドによって提供される <xref:System.Text.Decoder> または <xref:System.Text.Encoder> をそれぞれ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-245">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1d34-246"><xref:System.Text.UTF7Encoding> では、エラー検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-246"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1d34-247">無効な文字は、変更後の base 64 文字としてエンコードされます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-247">Invalid characters are encoded as a modified base 64 character.</span></span> <span data-ttu-id="a1d34-248">セキュリティ上の理由から、<xref:System.Text.UTF8Encoding>、<xref:System.Text.UnicodeEncoding>、または <xref:System.Text.UTF32Encoding> を使用してエラー検出を有効にすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-248">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1d34-249">次のコード例は、<xref:System.Text.UTF7Encoding.GetBytes%2A> メソッドを使用して、Unicode 文字配列から要素の範囲をエンコードし、エンコードされたバイトをバイト配列の要素範囲に格納する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-249">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetBytes%2A> method to encode a range of elements from a Unicode character array, and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1d34-250"><paramref name="s" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-250"><paramref name="s" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="a1d34-251">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-251">-or-</span></span> 
 <span data-ttu-id="a1d34-252"><paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-252"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a1d34-253"><paramref name="charIndex" />、<paramref name="charCount" />、または <paramref name="byteIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-253"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="a1d34-254">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-254">-or-</span></span> 
 <span data-ttu-id="a1d34-255"><paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-255"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="a1d34-256">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-256">-or-</span></span> 
 <span data-ttu-id="a1d34-257"><paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-257"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1d34-258"><paramref name="bytes" /> には、<paramref name="byteIndex" /> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-258"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="a1d34-259">フォールバックが発生しました (詳細な説明は、「<see href="~/docs/standard/base-types/character-encoding.md">.NET での文字エンコード</see>」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="a1d34-259">A fallback occurred (see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see> for fuller explanation).</span></span>
  
<span data-ttu-id="a1d34-260">および</span><span class="sxs-lookup"><span data-stu-id="a1d34-260">-and-</span></span> 
 <span data-ttu-id="a1d34-261"><see cref="P:System.Text.Encoding.EncoderFallback" /> は <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-261"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1d34-262">バイト シーケンスをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-262">Calculates the number of characters produced by decoding a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF7Encoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="a1d34-263">デコードする最初のバイトへのポインター。</span><span class="sxs-lookup"><span data-stu-id="a1d34-263">A pointer to the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="a1d34-264">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-264">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="a1d34-265">指定したバイト ポインターで始まるバイト シーケンスをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-265">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="a1d34-266">指定したバイト シーケンスをデコードすることによって生成される文字数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-266">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-267"><xref:System.Text.UTF7Encoding.GetChars%2A> が結果の文字を格納するために必要な配列の正確なサイズを計算するには、<xref:System.Text.UTF7Encoding.GetCharCount%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-267">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="a1d34-268">配列の最大サイズを計算するには、アプリケーションで <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-268">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="a1d34-269"><xref:System.Text.UTF7Encoding.GetCharCount%2A> メソッドを使用すると、通常はより少ないメモリを割り当てることができますが、<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> メソッドは一般に高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-269">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1d34-270"><paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-270"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a1d34-271"><paramref name="count" /> に 0 より小さい値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-271"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="a1d34-272">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-272">-or-</span></span> 
<span data-ttu-id="a1d34-273">結果の文字数が、int として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-273">The resulting number of characters is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="a1d34-274">フォールバックが発生しました (詳細な説明は、「<see href="~/docs/standard/base-types/character-encoding.md">.NET での文字エンコード</see>」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="a1d34-274">A fallback occurred (see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see> for fuller explanation).</span></span>
  
<span data-ttu-id="a1d34-275">および</span><span class="sxs-lookup"><span data-stu-id="a1d34-275">-and-</span></span> 
 <span data-ttu-id="a1d34-276"><see cref="P:System.Text.Encoding.DecoderFallback" /> は <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-276"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.UTF7Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="uTF7Encoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="a1d34-277">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="a1d34-277">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="a1d34-278">デコードする最初のバイトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="a1d34-278">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="a1d34-279">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-279">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="a1d34-280">指定したバイト配列からバイト シーケンスをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-280">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="a1d34-281">指定したバイト シーケンスをデコードすることによって生成される文字数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-281">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-282"><xref:System.Text.UTF7Encoding.GetChars%2A> が結果の文字を格納するために必要な配列の正確なサイズを計算するには、<xref:System.Text.UTF7Encoding.GetCharCount%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-282">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="a1d34-283">配列の最大サイズを計算するには、アプリケーションで <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-283">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="a1d34-284"><xref:System.Text.UTF7Encoding.GetCharCount%2A> メソッドを使用すると、通常はより少ないメモリを割り当てることができますが、<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> メソッドは一般に高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-284">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1d34-285">次のコード例は、<xref:System.Text.UTF7Encoding.GetCharCount%2A> メソッドを使用して、バイト配列内の要素の範囲をデコードすることによって生成される文字数を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-285">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1d34-286"><paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-286"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a1d34-287"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-287"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="a1d34-288">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-288">-or-</span></span> 
 <span data-ttu-id="a1d34-289"><paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-289"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="a1d34-290">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-290">-or-</span></span> 
<span data-ttu-id="a1d34-291">結果の文字数が、int として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-291">The resulting number of characters is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="a1d34-292">フォールバックが発生しました (詳細については「<see href="~/docs/standard/base-types/character-encoding.md">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="a1d34-292">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="a1d34-293">および</span><span class="sxs-lookup"><span data-stu-id="a1d34-293">-and-</span></span> 
 <span data-ttu-id="a1d34-294"><see cref="P:System.Text.Encoding.DecoderFallback" /> は <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-294"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.UTF7Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1d34-295">バイト シーケンスを文字のセットにデコードします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-295">Decodes a sequence of bytes into a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF7Encoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="chars" Type="System.Char*" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="a1d34-296">デコードする最初のバイトへのポインター。</span><span class="sxs-lookup"><span data-stu-id="a1d34-296">A pointer to the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="a1d34-297">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-297">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="a1d34-298">結果の文字セットの書き込みを開始する位置へのポインター。</span><span class="sxs-lookup"><span data-stu-id="a1d34-298">A pointer to the location at which to start writing the resulting set of characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="a1d34-299">書き込む文字の最大数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-299">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="a1d34-300">指定したバイト ポインターで始まるバイト シーケンスを、指定した文字ポインターを開始位置として格納される文字のセットにデコードします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-300">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="a1d34-301"><paramref name="chars" /> によって示される位置に書き込まれる実際の文字数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-301">The actual number of characters written at the location indicated by <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-302"><xref:System.Text.UTF7Encoding.GetChars%2A> が結果の文字を格納するために必要な配列の正確なサイズを計算するには、<xref:System.Text.UTF7Encoding.GetCharCount%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-302">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="a1d34-303">配列の最大サイズを計算するには、アプリケーションで <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-303">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="a1d34-304"><xref:System.Text.UTF7Encoding.GetCharCount%2A> メソッドを使用すると、通常はより少ないメモリを割り当てることができますが、<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> メソッドは一般に高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-304">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="a1d34-305">ストリームから読み取られたデータなど、変換されるデータは、連続したブロックでのみ使用できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-305">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="a1d34-306">この場合、またはデータ量が非常に大きく、小さいブロックに分割する必要がある場合、アプリケーションでは、<xref:System.Text.UTF7Encoding.GetDecoder%2A> メソッドまたは <xref:System.Text.UTF7Encoding.GetEncoder%2A> メソッドによって提供される <xref:System.Text.Decoder> または <xref:System.Text.Encoder> をそれぞれ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-306">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1d34-307"><xref:System.Text.UTF7Encoding> では、エラー検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-307"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1d34-308">無効なバイトが検出された場合、<xref:System.Text.UTF7Encoding> は一般に無効なバイトを出力します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-308">When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes.</span></span> <span data-ttu-id="a1d34-309">バイトが16進数0x7F よりも大きい場合、バイト値は Unicode 文字にゼロ拡張され、結果は `chars` 配列に格納され、任意のシフトシーケンスが終了します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-309">If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated.</span></span> <span data-ttu-id="a1d34-310">たとえば、エンコードするバイトが16進0x81 の場合、結果として得られる文字は U + 0081 になります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-310">For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.</span></span> <span data-ttu-id="a1d34-311">セキュリティ上の理由から、<xref:System.Text.UTF8Encoding>、<xref:System.Text.UnicodeEncoding>、または <xref:System.Text.UTF32Encoding> を使用してエラー検出を有効にすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-311">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1d34-312"><paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-312"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="a1d34-313">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-313">-or-</span></span> 
 <span data-ttu-id="a1d34-314"><paramref name="chars" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-314"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a1d34-315"><paramref name="byteCount" /> または <paramref name="charCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-315"><paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1d34-316"><paramref name="charCount" /> が結果の文字数より少なくなっています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-316"><paramref name="charCount" /> is less than the resulting number of characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="a1d34-317">フォールバックが発生しました (詳細については「<see href="~/docs/standard/base-types/character-encoding.md">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="a1d34-317">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="a1d34-318">および</span><span class="sxs-lookup"><span data-stu-id="a1d34-318">-and-</span></span> 
 <span data-ttu-id="a1d34-319"><see cref="P:System.Text.Encoding.DecoderFallback" /> は <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-319"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="uTF7Encoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="a1d34-320">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="a1d34-320">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="a1d34-321">デコードする最初のバイトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="a1d34-321">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="a1d34-322">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-322">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="a1d34-323">結果の文字のセットを格納する文字配列。</span><span class="sxs-lookup"><span data-stu-id="a1d34-323">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="a1d34-324">結果の文字のセットを書き込む開始位置のインデックス。</span><span class="sxs-lookup"><span data-stu-id="a1d34-324">The index at which to start writing the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="a1d34-325">指定したバイト配列に格納されているバイト シーケンスを指定した文字配列にデコードします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-325">Decodes a sequence of bytes from the specified byte array into the specified character array.</span></span></summary>
        <returns><span data-ttu-id="a1d34-326"><paramref name="chars" /> に書き込まれた実際の文字数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-326">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-327"><xref:System.Text.UTF7Encoding.GetChars%2A> が結果の文字を格納するために必要な配列の正確なサイズを計算するには、<xref:System.Text.UTF7Encoding.GetCharCount%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-327">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="a1d34-328">配列の最大サイズを計算するには、アプリケーションで <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-328">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="a1d34-329"><xref:System.Text.UTF7Encoding.GetCharCount%2A> メソッドを使用すると、通常はより少ないメモリを割り当てることができますが、<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> メソッドは一般に高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-329">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="a1d34-330">ストリームから読み取られたデータなど、変換されるデータは、連続したブロックでのみ使用できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-330">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="a1d34-331">この場合、またはデータ量が非常に大きく、小さいブロックに分割する必要がある場合、アプリケーションでは、<xref:System.Text.UTF7Encoding.GetDecoder%2A> メソッドまたは <xref:System.Text.UTF7Encoding.GetEncoder%2A> メソッドによって提供される <xref:System.Text.Decoder> または <xref:System.Text.Encoder> をそれぞれ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-331">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1d34-332"><xref:System.Text.UTF7Encoding> では、エラー検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-332"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1d34-333">無効なバイトが検出された場合、<xref:System.Text.UTF7Encoding> は一般に無効なバイトを出力します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-333">When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes.</span></span> <span data-ttu-id="a1d34-334">バイトが16進数0x7F よりも大きい場合、バイト値は Unicode 文字にゼロ拡張され、結果は `chars` 配列に格納され、任意のシフトシーケンスが終了します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-334">If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated.</span></span> <span data-ttu-id="a1d34-335">たとえば、エンコードするバイトが16進0x81 の場合、結果として得られる文字は U + 0081 になります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-335">For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.</span></span> <span data-ttu-id="a1d34-336">セキュリティ上の理由から、<xref:System.Text.UTF8Encoding>、<xref:System.Text.UnicodeEncoding>、または <xref:System.Text.UTF32Encoding> を使用してエラー検出を有効にすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-336">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1d34-337">次のコード例は、<xref:System.Text.UTF7Encoding.GetChars%2A> メソッドを使用して、バイト配列内の要素の範囲をデコードし、その結果を文字配列に格納する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-337">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1d34-338"><paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-338"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="a1d34-339">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-339">-or-</span></span> 
 <span data-ttu-id="a1d34-340"><paramref name="chars" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-340"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a1d34-341"><paramref name="byteIndex" />、<paramref name="byteCount" />、または <paramref name="charIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-341"><paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="a1d34-342">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-342">-or-</span></span> 
 <span data-ttu-id="a1d34-343"><paramref name="byteindex" /> および <paramref name="byteCount" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-343"><paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="a1d34-344">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-344">-or-</span></span> 
 <span data-ttu-id="a1d34-345"><paramref name="charIndex" /> が <paramref name="chars" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-345"><paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1d34-346"><paramref name="chars" /> には、<paramref name="charIndex" /> から配列の末尾までに十分なサイズがなく、結果の文字を格納できません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-346"><paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="a1d34-347">フォールバックが発生しました (詳細については「<see href="~/docs/standard/base-types/character-encoding.md">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="a1d34-347">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="a1d34-348">および</span><span class="sxs-lookup"><span data-stu-id="a1d34-348">-and-</span></span> 
 <span data-ttu-id="a1d34-349"><see cref="P:System.Text.Encoding.DecoderFallback" /> は <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-349"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="uTF7Encoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1d34-350">UTF-7 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換するデコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-350">Obtains a decoder that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="a1d34-351">UTF-7 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換する <see cref="T:System.Text.Decoder" />。</span><span class="sxs-lookup"><span data-stu-id="a1d34-351">A <see cref="T:System.Text.Decoder" /> that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-352"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> メソッドは、このクラスの <xref:System.Text.UTF7Encoding.GetChars%2A> メソッドと同様の方法で、バイトのシーケンシャルブロックを文字の連続したブロックに変換します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-352">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method of this class.</span></span> <span data-ttu-id="a1d34-353">ただし、<xref:System.Text.Decoder> は、複数のブロックにまたがるバイトシーケンスを正しくデコードできるように、呼び出しの間に状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-353">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="a1d34-354">また <xref:System.Text.Decoder> は、データブロックの末尾で末尾のバイトを保持し、次のデコード操作で末尾のバイトを使用します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-354">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="a1d34-355">そのため、<xref:System.Text.UTF7Encoding.GetDecoder%2A> と <xref:System.Text.UTF7Encoding.GetEncoder%2A> は、ネットワークの転送とファイル操作に役立ちます。これらの操作は、多くの場合、データストリーム全体ではなくデータブロックを処理するためです。</span><span class="sxs-lookup"><span data-stu-id="a1d34-355">Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1d34-356">次のコード例は、<xref:System.Text.UTF7Encoding.GetDecoder%2A> メソッドを使用して、UTF-7 でエンコードされたバイトを文字シーケンスに変換するデコーダーを取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-356">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method to obtain a decoder to convert the UTF-7 encoded bytes into a sequence of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/CPP/getdecoder-.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/CS/getdecoder-.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/VB/getdecoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="a1d34-357">エンコーディングについて</span><span class="sxs-lookup"><span data-stu-id="a1d34-357">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="uTF7Encoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1d34-358">Unicode 文字のシーケンスを UTF-7 でエンコードされたバイト シーケンスに変換するエンコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-358">Obtains an encoder that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="a1d34-359">Unicode 文字のシーケンスを UTF-7 でエンコードされたバイト シーケンスに変換する <see cref="T:System.Text.Encoder" />。</span><span class="sxs-lookup"><span data-stu-id="a1d34-359">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-360"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> メソッドは、<xref:System.Text.UTF7Encoding.GetChars%2A> メソッドと同様の方法で、バイトのシーケンシャルブロックを文字の連続するブロックに変換します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-360">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method.</span></span> <span data-ttu-id="a1d34-361">ただし、<xref:System.Text.Decoder> は、複数のブロックにまたがるバイトシーケンスを正しくデコードできるように、呼び出しの間に状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-361">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="a1d34-362">また <xref:System.Text.Decoder> は、データブロックの末尾で末尾のバイトを保持し、次のデコード操作で末尾のバイトを使用します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-362">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="a1d34-363">そのため、<xref:System.Text.UTF7Encoding.GetDecoder%2A> と <xref:System.Text.UTF7Encoding.GetEncoder%2A> は、ネットワークの転送とファイル操作に役立ちます。これらの操作は、多くの場合、データストリーム全体ではなくデータブロックを処理するためです。</span><span class="sxs-lookup"><span data-stu-id="a1d34-363">Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1d34-364">次のコード例は、<xref:System.Text.UTF7Encoding.GetEncoder%2A> メソッドを使用して、文字のシーケンスを UTF-8 でエンコードされたバイトシーケンスに変換するエンコーダーを取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-364">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method to obtain an encoder to convert a sequence of characters into a UTF-7 encoded sequence of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/CPP/getencoder-.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/CS/getencoder-.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/VB/getencoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="a1d34-365">エンコーディングについて</span><span class="sxs-lookup"><span data-stu-id="a1d34-365">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="uTF7Encoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1d34-366">現在の <see cref="T:System.Text.UTF7Encoding" /> オブジェクトのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-366">Returns the hash code for the current <see cref="T:System.Text.UTF7Encoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="a1d34-367">32 ビットの符号付き整数のハッシュ コードです。</span><span class="sxs-lookup"><span data-stu-id="a1d34-367">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-368"><xref:System.Text.UTF7Encoding.GetHashCode%2A> メソッドによって返される値は、ある <xref:System.Text.UTF7Encoding> オブジェクトを別のオブジェクトと区別するのに適していません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-368">The value returned by the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method is not suitable for distinguishing one <xref:System.Text.UTF7Encoding> object from another.</span></span> <span data-ttu-id="a1d34-369">アプリケーションが一意のハッシュコードを必要とする場合は、<xref:System.Text.UTF7Encoding.GetHashCode%2A> メソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-369">If your application needs a unique hash code, it should override the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="uTF7Encoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount"><span data-ttu-id="a1d34-370">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-370">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="a1d34-371">指定した文字数をエンコードすることによって生成される最大バイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-371">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="a1d34-372">指定した文字数をエンコードすることによって生成される最大バイト数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-372">The maximum number of bytes produced by encoding the specified number of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-373"><xref:System.Text.UTF7Encoding.GetBytes%2A> が結果のバイトを格納するために必要な配列の正確なサイズを計算するために、アプリケーションは <xref:System.Text.UTF7Encoding.GetByteCount%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-373">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="a1d34-374">配列の最大サイズを計算するには、アプリケーションで <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-374">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="a1d34-375"><xref:System.Text.UTF7Encoding.GetByteCount%2A> メソッドを使用すると、通常はより少ないメモリを割り当てることができますが、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> メソッドは一般に高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-375">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="a1d34-376"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> は、現在選択されている <xref:System.Text.EncoderFallback>の最悪のケースを含む、最悪の数値です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-376"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="a1d34-377">大きな文字列を使用してフォールバックを選択した場合、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> は大きな値を返すことがあります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-377">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="a1d34-378">ほとんどの場合、このメソッドは小さい文字列に対して適切な数値を返します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-378">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="a1d34-379">大きな文字列の場合は、非常に大きなバッファーを使用するか、より適切なバッファーを超えた場合に、まれにエラーをキャッチするかを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-379">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="a1d34-380"><xref:System.Text.UTF7Encoding.GetByteCount%2A> または <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>を使用した別の方法を検討することもできます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-380">You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a1d34-381">UTF-7 は ASCII データをエンコードするときに非常に効率的ですが、1文字につき1バイトであるため、他のデータでは非常に非効率です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-381">While UTF-7 is very efficient at encoding ASCII data, one byte per character, it is extremely inefficient for other data.</span></span> <span data-ttu-id="a1d34-382">上の remarked と同様、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> は最悪のケースで処理されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-382">As remarked above, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> deals with a worst case.</span></span> <span data-ttu-id="a1d34-383">エンコードされるデータが主に ASCII である場合、特に ASCII 文字クラスターが相互に関連している場合は、このメソッドによって返される数値よりも UTF 7 の方がはるかに効率的です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-383">If the data to be encoded is largely ASCII, and especially if the ASCII characters cluster together, UTF-7 is significantly more efficient than the number returned by this method suggests.</span></span>  
  
 <span data-ttu-id="a1d34-384"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> に <xref:System.Text.UTF7Encoding.GetChars%2A>との関係はありません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-384"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetChars%2A>.</span></span> <span data-ttu-id="a1d34-385"><xref:System.Text.UTF7Encoding.GetChars%2A>で使用する同様の機能がアプリケーションに必要な場合は、<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-385">If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetChars%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1d34-386">`GetMaxByteCount(N)` は、必ずしも `N* GetMaxByteCount(1)`と同じ値であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-386">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1d34-387">次のコード例は、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> メソッドを使用して、指定された文字数をエンコードするために必要な最大バイト数を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-387">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a1d34-388"><paramref name="charCount" /> に 0 より小さい値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-388"><paramref name="charCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="a1d34-389">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-389">-or-</span></span> 
<span data-ttu-id="a1d34-390">結果のバイト数が、int として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-390">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="a1d34-391">フォールバックが発生しました (詳細については「<see href="~/docs/standard/base-types/character-encoding.md">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="a1d34-391">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="a1d34-392">および</span><span class="sxs-lookup"><span data-stu-id="a1d34-392">-and-</span></span> 
 <span data-ttu-id="a1d34-393"><see cref="P:System.Text.Encoding.EncoderFallback" /> は <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-393"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="uTF7Encoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount"><span data-ttu-id="a1d34-394">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-394">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="a1d34-395">指定したバイト数をデコードすることによって生成される最大文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-395">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="a1d34-396">指定したバイト数をデコードすることによって生成される最大文字数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-396">The maximum number of characters produced by decoding the specified number of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-397"><xref:System.Text.UTF7Encoding.GetChars%2A> が結果の文字を格納するために必要な配列の正確なサイズを計算するために、アプリケーションは <xref:System.Text.UTF7Encoding.GetCharCount%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-397">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="a1d34-398">配列の最大サイズを計算するには、アプリケーションで <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-398">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="a1d34-399"><xref:System.Text.UTF7Encoding.GetCharCount%2A> メソッドを使用すると、通常はより少ないメモリを割り当てることができますが、<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> メソッドは一般に高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-399">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="a1d34-400"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> は、現在選択されている <xref:System.Text.DecoderFallback>の最悪のケースを含む、最悪の数値です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-400"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="a1d34-401">大きな文字列を使用してフォールバックを選択した場合、<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> は大きな値を返すことがあります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-401">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="a1d34-402">ほとんどの場合、このメソッドは小さい文字列に対して適切な数値を返します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-402">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="a1d34-403">大きな文字列の場合は、非常に大きなバッファーを使用するか、より適切なバッファーを超えた場合に、まれにエラーをキャッチするかを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-403">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="a1d34-404"><xref:System.Text.UTF7Encoding.GetCharCount%2A> または <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>を使用した別の方法を検討することもできます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-404">You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="a1d34-405"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> に <xref:System.Text.UTF7Encoding.GetBytes%2A>との関係はありません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-405"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="a1d34-406"><xref:System.Text.UTF7Encoding.GetBytes%2A>で使用する同様の機能がアプリケーションに必要な場合は、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-406">If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1d34-407">`GetMaxCharCount(N)` は、必ずしも `N* GetMaxCharCount(1)`と同じ値であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-407">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1d34-408">次のコード例は、<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> メソッドを使用して、指定したバイト数をデコードすることによって生成される最大文字数を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-408">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a1d34-409"><paramref name="byteCount" /> に 0 より小さい値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-409"><paramref name="byteCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="a1d34-410">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-410">-or-</span></span> 
<span data-ttu-id="a1d34-411">結果の文字数が、int として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="a1d34-411">The resulting number of characters is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="a1d34-412">フォールバックが発生しました (詳細については「<see href="~/docs/standard/base-types/character-encoding.md">.NET での文字エンコード</see>」を参照)</span><span class="sxs-lookup"><span data-stu-id="a1d34-412">A fallback occurred (for more information, see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="a1d34-413">および</span><span class="sxs-lookup"><span data-stu-id="a1d34-413">-and-</span></span> 
 <span data-ttu-id="a1d34-414"><see cref="P:System.Text.Encoding.DecoderFallback" /> は <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-414"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="uTF7Encoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="a1d34-415">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="a1d34-415">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="a1d34-416">デコードする最初のバイトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="a1d34-416">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="a1d34-417">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="a1d34-417">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="a1d34-418">バイト配列に格納されているある範囲のバイトを文字列にデコードします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-418">Decodes a range of bytes from a byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="a1d34-419">指定したバイト シーケンスのデコード結果が格納されている <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="a1d34-419">A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1d34-420">ストリームから読み取られたデータなど、変換されるデータは、連続したブロックでのみ使用できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-420">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="a1d34-421">この場合、またはデータ量が非常に大きく、小さいブロックに分割する必要がある場合、アプリケーションでは、<xref:System.Text.UTF7Encoding.GetDecoder%2A> メソッドまたは <xref:System.Text.UTF7Encoding.GetEncoder%2A> メソッドによって提供される <xref:System.Text.Decoder> または <xref:System.Text.Encoder> をそれぞれ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-421">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1d34-422"><xref:System.Text.UTF7Encoding> では、エラー検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-422"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1d34-423">無効なバイトが検出された場合、<xref:System.Text.UTF7Encoding> は一般に無効なバイトを出力します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-423">When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes.</span></span> <span data-ttu-id="a1d34-424">バイトが16進数0x7F よりも大きい場合、バイト値は Unicode 文字にゼロ拡張され、結果は `chars` 配列に格納され、任意のシフトシーケンスが終了します。</span><span class="sxs-lookup"><span data-stu-id="a1d34-424">If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated.</span></span> <span data-ttu-id="a1d34-425">たとえば、エンコードするバイトが16進0x81 の場合、結果として得られる文字は U + 0081 になります。</span><span class="sxs-lookup"><span data-stu-id="a1d34-425">For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.</span></span> <span data-ttu-id="a1d34-426">セキュリティ上の理由から、<xref:System.Text.UTF8Encoding>、<xref:System.Text.UnicodeEncoding>、または <xref:System.Text.UTF32Encoding> を使用してエラー検出を有効にすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-426">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1d34-427">次のコード例では、文字列をバイト配列にエンコードした後、バイトを文字列にデコードします。</span><span class="sxs-lookup"><span data-stu-id="a1d34-427">The following code example encodes a string into an array of bytes, and then decodes the bytes back into a string.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/CPP/getstring.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/CS/getstring.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/VB/getstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1d34-428"><paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-428"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a1d34-429"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="a1d34-429"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="a1d34-430">または</span><span class="sxs-lookup"><span data-stu-id="a1d34-430">-or-</span></span> 
 <span data-ttu-id="a1d34-431"><paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="a1d34-431"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="a1d34-432">フォールバックが発生しました (詳細な説明は、「<see href="~/docs/standard/base-types/character-encoding.md">.NET での文字エンコード</see>」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="a1d34-432">A fallback occurred (see <see href="~/docs/standard/base-types/character-encoding.md">Character Encoding in .NET</see> for fuller explanation).</span></span>
  
<span data-ttu-id="a1d34-433">および</span><span class="sxs-lookup"><span data-stu-id="a1d34-433">-and-</span></span> 
 <span data-ttu-id="a1d34-434"><see cref="P:System.Text.Encoding.DecoderFallback" /> は <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a1d34-434"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>
