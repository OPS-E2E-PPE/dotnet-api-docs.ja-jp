<Type Name="AntiXssEncoder" FullName="System.Web.Security.AntiXss.AntiXssEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="31e388abcbc5c78d78481fd53c9856e9dff9d05e" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78772978" /></Metadata><TypeSignature Language="C#" Value="public class AntiXssEncoder : System.Web.Util.HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AntiXssEncoder extends System.Web.Util.HttpEncoder" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class AntiXssEncoder&#xA;Inherits HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class AntiXssEncoder : System::Web::Util::HttpEncoder" />
  <TypeSignature Language="F#" Value="type AntiXssEncoder = class&#xA;    inherit HttpEncoder" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Util.HttpEncoder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>HTML、XML、CSS、URL の文字列で使用できるように文字列をエンコードします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.AntiXss.AntiXssEncoder> クラスを使用すると、<xref:System.Web.HttpUtility>、<xref:System.Web.HttpServerUtility>、<xref:System.Net.HttpResponseHeader>などのクラスのメソッドで文字列をエンコードおよびデコードするために既定で使用される <xref:System.Web.Util.HttpEncoder> クラスをオーバーライドできます。  
  
 <xref:System.Web.Security.AntiXss.AntiXssEncoder> クラスでは、セーフリストにないすべての文字が <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode%2A> および <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode%2A> メソッドによってエンコードされます。  
  
 <xref:System.Web.Util.HttpEncoder> クラスを <xref:System.Web.Security.AntiXss.AntiXssEncoder> クラスに置き換えるには、次の例に示すように、web.config ファイルの httpRuntime 要素の `encoderType` 属性を使用して登録します。  
  
```  
<httpRuntime encoderType="System.Web.Security.AntiXss.AntiXssEncoder" />  
```  
  
 さまざまなエンコード方法の既定の安全な文字の一覧については、<xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode%2A>、<xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode%2A>、<xref:System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode%2A>、および <xref:System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode%2A> の各メソッドの解説を参照してください。 既定のセーフリストは、<xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> メソッドを使用して変更できます。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AntiXssEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AntiXssEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.Security.AntiXss.AntiXssEncoder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CssEncode">
      <MemberSignature Language="C#" Value="public static string CssEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CssEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.CssEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CssEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CssEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member CssEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.CssEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">エンコードする文字列。</param>
        <summary>指定した文字列をカスケード スタイル シート (CSS) で使用できるようにエンコードします。</summary>
        <returns>エンコードされた文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、セーフリストに含まれる文字を除くすべての文字をエンコードします。  
  
> [!NOTE]
>  カスケードスタイルシートに追加する前に、結果の文字列の周りに引用符 ("") を挿入します。  
  
 次の表に、既定の安全な文字の一覧を示します。 すべては、 [Unicode C0 コントロールと基本的なラテン](https://www.unicode.org/charts/PDF/U0000.pdf)文字範囲からのものです。
  
|文字|説明|  
|--------------------|-----------------|  
|A-Z|大文字の英字|  
|a-z|小文字の英字|  
|0-9|番号|  
  
 次の表は、入力とそれに対応するエンコードされた出力の例を示しています。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert\000028\000027XSS\000020Attack\000021\000027\000029\00003B`|  
|`user@contoso.com`|`user\000040contoso\00002Ecom`|  
|`Anti-Cross Site Scripting Namespace`|`Anti\00002DCross\000020Site\000020Scripting\000020Namespace`|  
  
 CSS 文字エスケープシーケンスは、円記号 (\\) と、ISO 10646 標準の文字コードを表す最大6桁の16進数で構成されます。 (ISO 10646 標準は、実質的には Unicode と同等です)。16進数字以外の文字は、エスケープシーケンスを終了します。 エスケープシーケンスの後に続く文字が有効な16進数の数字でもある場合は、エスケープシーケンスに6桁を含めるか、または空白文字を使用してエスケープシーケンスを終了する必要があります。 たとえば、`\000020` はスペースを表します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal override void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="antiXssEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">エンコードする文字列。</param>
        <param name="output">文字列を出力するために使用するテキスト ライター。</param>
        <summary>指定した文字列を HTML 属性で使用できるようにエンコードして出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、セーフリストに含まれる文字を除くすべての文字をエンコードします。 文字は `&#DECIMAL;` 表記を使用してエンコードされます。  
  
> [!NOTE]
>  ページに追加する前に、結果の文字列の前後に二重引用符 ("") または単一引用符 (' ') を配置してください。  
  
 次の表に、既定の安全な文字の一覧を示します。 [説明] 列に記載されていない限り、すべては Unicode [C0 コントロールと基本的なラテン](https://www.unicode.org/charts/PDF/U0000.pdf)文字範囲に含まれています。  
  
|文字|説明|  
|--------------------|-----------------|  
|A-Z|英大文字の英字|  
|a-z|英小文字の英字|  
|0-9|番号|  
|\!|感嘆符|  
|\#|番号記号、ハッシュ|  
|\$|ドル記号、ドルマーク|  
|\%|パーセント記号|  
|( )|かっこ|  
|\*|アスタリスク|  
|\+|タス|  
|\,|コンマ|  
|\-|ハイフン、マイナス|  
|\.|ピリオド、ドット、完全停止|  
|\/|/|  
|\:|コロン|  
|\;|セミコロン|  
|\=|等号 (=)|  
|\?|疑問符|  
|\@|コマーシャル/サインイン|  
|\[ \]|角かっこ|  
|\\ |円記号|  
|\^|キャレット|  
|\_|アンダースコア|  
|\`|グレーブ アクセント|  
|\{ \}|中かっこ、中かっこ|  
|\||垂直線|  
|\~|チルダ|  
|0x00A1 ~ 0X00a1|Unicode [C1 コントロールと Latin-1 補助](https://www.unicode.org/charts/PDF/U0080.pdf)文字範囲の 0x00a1 (161 decimal) と 0x00a1 (172 decimal) の間の特殊文字。|  
|0x00AE-0X00ae|Unicode [C1 コントロールと Latin-1 補助](https://www.unicode.org/charts/PDF/U0080.pdf)文字範囲の 0x00ae (174 decimal) と 0x00ae (255 decimal) の間の特殊文字。|  
|0x0100-0x017F|0x0100 (256 decimal) と 0x017F (383 decimal) の間の文字。 (Unicode [Latin 拡張](https://www.unicode.org/charts/PDF/U0100.pdf)文字の範囲)。|
|0x0180-0x024F|文字は、0x0180 (384 decimal) と 0x024F (591 decimal) の間にあります。 (Unicode[ラテン拡張 B](https://www.unicode.org/charts/PDF/U0180.pdf)文字の範囲)。|  
|0x0250-0X0250|0x0250 (592 decimal) と 0X0250 (687 decimal) の間の文字。 (Unicode の[IPA 拡張](https://www.unicode.org/charts/PDF/U0250.pdf)文字の範囲)。| 
|0x02B0-0X02b0|0x02B0 (688 decimal) と 0X02b0 (767 decimal) の間の文字。 (Unicode[スペーシング修飾子](https://www.unicode.org/charts/PDF/U02B0.pdf)文字の範囲)。|
|0x0300-0x036F|0x0300 (768 decimal) と 0x036F (879 decimal) の間の文字。 (Unicode[結合分音記号](https://www.unicode.org/charts/PDF/U0300.pdf)の文字の範囲)。|  
  
 次の表は、入力とそれに対応するエンコードされた出力の例を示しています。  
  
|入力の例| エンコードされた出力|  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 セーフリストをカスタマイズするには、<xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列を HTML マークアップのテキストとして使用できるようにエンコードします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlEncode (string input, bool useNamedEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlEncode(string input, bool useNamedEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlEncode (input As String, useNamedEntities As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlEncode(System::String ^ input, bool useNamedEntities);" />
      <MemberSignature Language="F#" Value="static member HtmlEncode : string * bool -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode (input, useNamedEntities)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="useNamedEntities" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="input">エンコードする文字列。</param>
        <param name="useNamedEntities">特定の文字エンコーディングに HTML 4.0 名前付きエンティティを使用する場合は <see langword="true" />、<c>&amp;#DECIMAL;</c> 表記のみを使用してエンコードする場合は <see langword="false" />。</param>
        <summary>HTML マークアップのテキストとして使用できるように指定した文字列をエンコードし、オプションとして HTML 4.0 の名前付きエンティティを使用するかどうかを指定します。</summary>
        <returns>エンコードされた文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、セーフリストに含まれる文字を除くすべての文字をエンコードします。 文字は `&#DECIMAL;` 表記を使用してエンコードされます。  
  
> [!NOTE]
>  ページに追加する前に、結果の文字列の前後に二重引用符 ("") または単一引用符 (' ') を配置してください。  
  
 次の表に、既定の安全な文字の一覧を示します。 [説明] 列に記載されている場合を除き、すべての文字が Unicode [C0 コントロールと基本ラテン](https://www.unicode.org/charts/PDF/U0000.pdf)文字範囲に含まれています。
  
|文字|説明|  
|--------------------|-----------------|  
|A-Z|英大文字の英字|  
|a-z|英小文字の英字|  
|0-9|番号|  
|行間|スペース|  
|!|感嘆符|  
|#|番号記号、ハッシュ|  
|$|ドル記号、ドルマーク|  
|%|パーセント記号|  
|( )|かっこ|  
|*|アスタリスク|  
|+|タス|  
|,|コンマ|  
|-|ハイフン、マイナス|  
|.|ピリオド、ドット、完全停止|  
|/|/|  
|:|コロン|  
|;|セミコロン|  
|=|等号 (=)|  
|?|疑問符|  
|@|商用|  
|[ ]|角かっこ|  
|&#92;|円記号|  
|^|キャレット|  
|_|アンダースコア|  
|\`|グレーブ アクセント|  
|{ }|中かっこ、中かっこ|  
|&#124;|垂直線|  
|~|チルダ|  
|0x00A1 ~ 0X00a1|Unicode [C1 コントロールと Latin-1 補助](https://www.unicode.org/charts/PDF/U0080.pdf)文字範囲の 0x00a1 (161 decimal) と 0x00a1 (172 decimal) の間の特殊文字。 この範囲の文字は `useNamedEntities` が `true`ときにエンコードされます。|  
|0x00AE-0X00ae|Unicode [C1 コントロールと Latin-1 補助](https://www.unicode.org/charts/PDF/U0080.pdf)文字範囲の 0x00ae (174 decimal) と 0x00ae (255 decimal) の間の特殊文字。 この範囲の文字は `useNamedEntities` が `true`ときにエンコードされます。|  
|0x0100-0x017F|0x0100 (256 decimal) と 0x017F (383 decimal) の間の文字。 (Unicode [Latin 拡張](https://www.unicode.org/charts/PDF/U0100.pdf)文字の範囲)。|
|0x0180-0x024F|文字は、0x0180 (384 decimal) と 0x024F (591 decimal) の間にあります。 (Unicode[ラテン拡張 B](https://www.unicode.org/charts/PDF/U0180.pdf)文字の範囲)。|  
|0x0250-0X0250|0x0250 (592 decimal) と 0X0250 (687 decimal) の間の文字。 (Unicode の[IPA 拡張](https://www.unicode.org/charts/PDF/U0250.pdf)文字の範囲)。|  
|0x02B0-0X02b0|0x02B0 (688 decimal) と 0X02b0 (767 decimal) の間の文字。 (Unicode[スペーシング修飾子](https://www.unicode.org/charts/PDF/U02B0.pdf)文字の範囲)。|
|0x0300-0x036F|0x0300 (768 decimal) と 0x036F (879 decimal) の間の文字。 (Unicode[結合分音記号](https://www.unicode.org/charts/PDF/U0300.pdf)の文字の範囲)。| 
  
 次の表は、入力とそれに対応するエンコードされた出力の例を示しています。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 セーフリストをカスタマイズするには、<xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal override void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="antiXssEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">エンコードする文字列。</param>
        <param name="output">文字列を出力するために使用するテキスト ライター。</param>
        <summary>指定した文字列を HTML マークアップ内のテキストとして使用できるようにエンコードし、指定したテキスト ライターを使用して文字列を出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、セーフリストに含まれる文字を除くすべての文字をエンコードします。 文字は `&#DECIMAL;` 表記を使用してエンコードされます。  
  
> [!NOTE]
>  ページに追加する前に、結果の文字列の前後に二重引用符 ("") または単一引用符 (' ') を配置してください。  
  
 次の表に、既定の安全な文字の一覧を示します。 [説明] 列に記載されている場合を除き、すべての文字が Unicode [C0 コントロールと基本ラテン](https://www.unicode.org/charts/PDF/U0000.pdf)文字範囲に含まれています。
  
|文字|説明|  
|--------------------|-----------------|  
|A-Z|英大文字の英字|  
|a-z|英小文字の英字|  
|0-9|番号|  
|行間|スペース|  
|!|感嘆符|  
|#|番号記号、ハッシュ|  
|$|ドル記号、ドルマーク|  
|%|パーセント記号|  
|( )|かっこ|  
|*|アスタリスク|  
|+|タス|  
|,|コンマ|  
|-|ハイフン、マイナス|  
|.|ピリオド、ドット、完全停止|  
|/|/|  
|:|コロン|  
|;|セミコロン|  
|=|等号 (=)|  
|?|疑問符|  
|@|商用|  
|[ ]|角かっこ|  
|&#92;|円記号|  
|^|キャレット|  
|_|アンダースコア|  
|\`|グレーブ アクセント|  
|{ }|中かっこ、中かっこ|  
|&#124;|垂直線|  
|~|チルダ|  
|0x00A1 ~ 0X00a1|Unicode [C1 コントロールと Latin-1 補助](https://www.unicode.org/charts/PDF/U0080.pdf)文字範囲の 0x00a1 (161 decimal) と 0x00a1 (172 decimal) の間の特殊文字。 この範囲の文字は `useNamedEntities` が `true`ときにエンコードされます。|  
|0x00AE-0X00ae|Unicode [C1 コントロールと Latin-1 補助](https://www.unicode.org/charts/PDF/U0080.pdf)文字範囲の 0x00ae (174 decimal) と 0x00ae (255 decimal) の間の特殊文字。 この範囲の文字は `useNamedEntities` が `true`ときにエンコードされます。|  
|0x0100-0x017F|0x0100 (256 decimal) と 0x017F (383 decimal) の間の文字。 (Unicode [Latin 拡張](https://www.unicode.org/charts/PDF/U0100.pdf)文字の範囲)。|
|0x0180-0x024F|文字は、0x0180 (384 decimal) と 0x024F (591 decimal) の間にあります。 (Unicode[ラテン拡張 B](https://www.unicode.org/charts/PDF/U0180.pdf)文字の範囲)。| 
|0x0250-0X0250|0x0250 (592 decimal) と 0X0250 (687 decimal) の間の文字。 (Unicode の[IPA 拡張](https://www.unicode.org/charts/PDF/U0250.pdf)文字の範囲)。| 
|0x02B0-0X02b0|0x02B0 (688 decimal) と 0X02b0 (767 decimal) の間の文字。 (Unicode[スペーシング修飾子](https://www.unicode.org/charts/PDF/U02B0.pdf)文字の範囲)。|
|0x0300-0x036F|0x0300 (768 decimal) と 0x036F (879 decimal) の間の文字。 (Unicode[結合分音記号](https://www.unicode.org/charts/PDF/U0300.pdf)の文字の範囲)。| 
  
 次の表は、入力とそれに対応するエンコードされた出力の例を示しています。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 セーフリストをカスタマイズするには、<xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlFormUrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列を、MIME タイプが "application/x-www-form-urlencoded" であるフォームの送信で使用できるようにエンコードします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">エンコードする文字列。</param>
        <summary>指定した文字列を、MIME タイプが "application/x-www-form-urlencoded" であるフォームの送信で使用できるようにエンコードします。</summary>
        <returns>エンコードされた文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、セーフリストに含まれる文字を除くすべての文字をエンコードします。 文字は `%SINGLE_BYTE_HEX` 表記を使用してエンコードされます。 
  
> [!NOTE]
>  ページに追加する前に、結果の文字列の前後に二重引用符 ("") または単一引用符 (' ') を配置してください。   

次の表に、既定の安全な文字の一覧を示します。 すべての文字は、Unicode [C0 コントロールと基本的なラテン](https://www.unicode.org/charts/PDF/U0000.pdf)文字の範囲に含まれています。 
    
|Unicode コードテーブル|文字|説明|  
|------------------------|--------------------|-----------------|  
|A-Z|大文字の英字|  
|a-z|小文字の英字|  
|0-9|番号|  
|-|ハイフン、マイナス|  
|.|ピリオド、ドット、完全停止|  
|_|アンダースコア|  
|~|チルダ|  
  
 次の表は、入力とそれに対応するエンコードされた出力の例を示しています。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user@contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input, int codePage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input, int32 codePage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String, codePage As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input, int codePage);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string * int -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode (input, codePage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="codePage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">エンコードする文字列。</param>
        <param name="codePage"><paramref name="input" /> 文字列のエンコードに使用するコード ページ。</param>
        <summary>指定したコード ページを使用して、MIME タイプが "application/x-www-form-urlencoded" であるフォームの送信で使用できるように指定した文字列をエンコードします。</summary>
        <returns>エンコードされた文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、セーフリストに含まれる文字を除くすべての文字をエンコードします。 文字は `%SINGLE_BYTE_HEX` 表記を使用してエンコードされます。  
  
> [!NOTE]
>  ページに追加する前に、結果の文字列の前後に二重引用符 ("") または単一引用符 (' ') を配置してください。  
  
 次の表に、既定の安全な文字の一覧を示します。 すべての文字は、Unicode [C0 コントロールと基本的なラテン](https://www.unicode.org/charts/PDF/U0000.pdf)文字の範囲に含まれています。 
  
|文字|説明|  
|--------------------|-----------------|  
|A-Z|大文字の英字|  
|a-z|小文字の英字|  
|0-9|番号|  
|-|ハイフン、マイナス|  
|.|ピリオド、ドット、完全停止|  
|_|アンダースコア|  
|~|チルダ|  
  
 次の表は、入力とそれに対応するエンコードされた出力の例を示しています。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input, System.Text.Encoding inputEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input, class System.Text.Encoding inputEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String, inputEncoding As Encoding) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input, System::Text::Encoding ^ inputEncoding);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string * System.Text.Encoding -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode (input, inputEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="inputEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="input">エンコードする文字列。</param>
        <param name="inputEncoding">入力エンコーディングの種類。</param>
        <summary>指定した文字エンコーディングの種類を使用して、MIME タイプが "application/x-www-form-urlencoded" であるフォームの送信の指定した文字列をエンコードします。</summary>
        <returns>エンコードされた文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、セーフリストに含まれる文字を除くすべての文字をエンコードします。 文字は `%SINGLE_BYTE_HEX` 表記を使用してエンコードされます。  
  
> [!NOTE]
>  ページに追加する前に、結果の文字列の前後に二重引用符 ("") または単一引用符 (' ') を配置してください。  
  
 次の表に、既定の安全な文字の一覧を示します。 すべての文字は、Unicode [C0 コントロールと基本的なラテン](https://www.unicode.org/charts/PDF/U0000.pdf)文字の範囲に含まれています。 
  
|文字|説明|  
|--------------------|-----------------|  
|A-Z|大文字の英字|  
|a-z|小文字の英字|  
|0-9|番号|  
|-|ハイフン、マイナス|  
|.|ピリオド、ドット、完全停止|  
|_|アンダースコア|  
|~|チルダ|  
  
 次の表は、入力とそれに対応するエンコードされた出力の例を示しています。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkAsSafe">
      <MemberSignature Language="C#" Value="public static void MarkAsSafe (System.Web.Security.AntiXss.LowerCodeCharts lowerCodeCharts, System.Web.Security.AntiXss.LowerMidCodeCharts lowerMidCodeCharts, System.Web.Security.AntiXss.MidCodeCharts midCodeCharts, System.Web.Security.AntiXss.UpperMidCodeCharts upperMidCodeCharts, System.Web.Security.AntiXss.UpperCodeCharts upperCodeCharts);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MarkAsSafe(valuetype System.Web.Security.AntiXss.LowerCodeCharts lowerCodeCharts, valuetype System.Web.Security.AntiXss.LowerMidCodeCharts lowerMidCodeCharts, valuetype System.Web.Security.AntiXss.MidCodeCharts midCodeCharts, valuetype System.Web.Security.AntiXss.UpperMidCodeCharts upperMidCodeCharts, valuetype System.Web.Security.AntiXss.UpperCodeCharts upperCodeCharts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe(System.Web.Security.AntiXss.LowerCodeCharts,System.Web.Security.AntiXss.LowerMidCodeCharts,System.Web.Security.AntiXss.MidCodeCharts,System.Web.Security.AntiXss.UpperMidCodeCharts,System.Web.Security.AntiXss.UpperCodeCharts)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MarkAsSafe (lowerCodeCharts As LowerCodeCharts, lowerMidCodeCharts As LowerMidCodeCharts, midCodeCharts As MidCodeCharts, upperMidCodeCharts As UpperMidCodeCharts, upperCodeCharts As UpperCodeCharts)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MarkAsSafe(System::Web::Security::AntiXss::LowerCodeCharts lowerCodeCharts, System::Web::Security::AntiXss::LowerMidCodeCharts lowerMidCodeCharts, System::Web::Security::AntiXss::MidCodeCharts midCodeCharts, System::Web::Security::AntiXss::UpperMidCodeCharts upperMidCodeCharts, System::Web::Security::AntiXss::UpperCodeCharts upperCodeCharts);" />
      <MemberSignature Language="F#" Value="static member MarkAsSafe : System.Web.Security.AntiXss.LowerCodeCharts * System.Web.Security.AntiXss.LowerMidCodeCharts * System.Web.Security.AntiXss.MidCodeCharts * System.Web.Security.AntiXss.UpperMidCodeCharts * System.Web.Security.AntiXss.UpperCodeCharts -&gt; unit" Usage="System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe (lowerCodeCharts, lowerMidCodeCharts, midCodeCharts, upperMidCodeCharts, upperCodeCharts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowerCodeCharts" Type="System.Web.Security.AntiXss.LowerCodeCharts" />
        <Parameter Name="lowerMidCodeCharts" Type="System.Web.Security.AntiXss.LowerMidCodeCharts" />
        <Parameter Name="midCodeCharts" Type="System.Web.Security.AntiXss.MidCodeCharts" />
        <Parameter Name="upperMidCodeCharts" Type="System.Web.Security.AntiXss.UpperMidCodeCharts" />
        <Parameter Name="upperCodeCharts" Type="System.Web.Security.AntiXss.UpperCodeCharts" />
      </Parameters>
      <Docs>
        <param name="lowerCodeCharts">安全としてマークする、下部のコード テーブルの組み合わせ。</param>
        <param name="lowerMidCodeCharts">セーフとしてマークする、下位中央のコード表の組み合わせ。</param>
        <param name="midCodeCharts">セーフとしてマークする、中央のコード表の組み合わせ。</param>
        <param name="upperMidCodeCharts">セーフとしてマークする、上位中央のコード表の組み合わせ。</param>
        <param name="upperCodeCharts">セーフとしてマークする、上位のコード表の組み合わせ。</param>
        <summary>指定された Unicode コード テーブルの文字を安全としてマークします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 セーフリストは、すべての HTML XML、CSS、および URL エンコードメソッドに影響します。  
  
 一部の例外では、Unicode コードグラフは、記述された言語に直接対応していません。 特定の言語または一連の言語のサポートを追加するには、多くの場合、複数のコードグラフを安全としてマークする必要があります。  
  
 英語を引き続き使用しながら日本語のサポートを追加するには、次の構文を使用します。  
  
```  
  
MarkAsSafe(  
            LowerCodeCharts.Default,  
            LowerMidCodeCharts.HangulJamo,  
            MidCodeCharts.None,  
            UpperMidCodeCharts.CjkRadicalsSupplement |   
            UpperMidCodeCharts.CjkSymbolsAndPunctuation |   
            UpperMidCodeCharts.Hiragana |   
            UpperMidCodeCharts.Katakana |   
            UpperMidCodeCharts.KatakanaPhoneticExtensions |   
            UpperMidCodeCharts.LatinExtendedD |  
            UpperMidCodeCharts.CjkUnifiedIdeographs,  
            UpperCodeCharts.None);  
```  
  
> [!NOTE]
>  <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> メソッドは、global.asax ファイルの `Application_Start` メソッドで呼び出す必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe(System.Web.Security.AntiXss.LowerCodeCharts,System.Web.Security.AntiXss.LowerMidCodeCharts,System.Web.Security.AntiXss.MidCodeCharts,System.Web.Security.AntiXss.UpperMidCodeCharts,System.Web.Security.AntiXss.UpperCodeCharts)" /> メソッドは、Global.asax ファイルの <see langword="Application_Start" /> メソッドの外側で呼び出されました。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>URL で使用できるように文字列とバイト配列をエンコードします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">エンコードする文字列。</param>
        <summary>指定した文字列を URL で使用できるようにエンコードします。</summary>
        <returns>エンコードされた文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、セーフリストに含まれる文字を除くすべての文字をエンコードします。 文字は `%SINGLE_BYTE_HEX` 表記を使用してエンコードされます。  
  
 次の表に、既定の安全な文字の一覧を示します。 すべての文字は、Unicode [C0 コントロールと基本的なラテン](https://www.unicode.org/charts/PDF/U0000.pdf)文字の範囲に含まれています。 
    
  
|文字|説明|  
|--------------------|-----------------|  
|A-Z|大文字の英字|  
|a-z|小文字の英字|  
|0-9|番号|  
|-|ハイフン、マイナス|  
|.|ピリオド、ドット、完全停止|  
|_|アンダースコア|  
|~|チルダ|  
  
 次の表は、入力とそれに対応するエンコードされた出力の例を示しています。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input, int codePage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input, int32 codePage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String, codePage As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input, int codePage);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string * int -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode (input, codePage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="codePage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">エンコードする文字列。</param>
        <param name="codePage"><paramref name="input" /> 文字列のエンコードに使用するコード ページ。</param>
        <summary>指定したコード ページを使用して、指定した文字列を URL で使用できるようにエンコードします。</summary>
        <returns>エンコードされた文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、セーフリストに含まれる文字を除くすべての文字をエンコードします。 文字は `%SINGLE_BYTE_HEX` 表記を使用してエンコードされます。  
  
 次の表に、既定の安全な文字の一覧を示します。 すべての文字は、Unicode [C0 コントロールと基本的なラテン](https://www.unicode.org/charts/PDF/U0000.pdf)文字の範囲に含まれています。 
    
  
|Unicode コードテーブル|文字|説明|  
|------------------------|--------------------|-----------------|  
|A-Z|大文字の英字|  
|a-z|小文字の英字|  
|0-9|番号|  
|-|ハイフン、マイナス|  
|.|ピリオド、ドット、完全停止|  
|_|アンダースコア|  
|~|チルダ|  
  
 次の表は、入力とそれに対応するエンコードされた出力の例を示しています。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input, System.Text.Encoding inputEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input, class System.Text.Encoding inputEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String, inputEncoding As Encoding) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input, System::Text::Encoding ^ inputEncoding);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string * System.Text.Encoding -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode (input, inputEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="inputEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="input">エンコードする文字列。</param>
        <param name="inputEncoding">入力エンコーディング タイプ。</param>
        <summary>指定した文字エンコーディングの種類を使用して、指定した文字列を URL で使用できるようにエンコードします。</summary>
        <returns>エンコードされた文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、セーフリストに含まれる文字を除くすべての文字をエンコードします。 文字は `%SINGLE_BYTE_HEX` 表記を使用してエンコードされます。  
  
 次の表に、既定の安全な文字の一覧を示します。 すべての文字は、Unicode [C0 コントロールと基本的なラテン](https://www.unicode.org/charts/PDF/U0000.pdf)文字の範囲に含まれています。 
    
  
|文字|説明|  
|--------------------|-----------------|  
|A-Z|大文字の英字|  
|a-z|小文字の英字|  
|0-9|番号|  
|-|ハイフン、マイナス|  
|.|ピリオド、ドット、完全停止|  
|_|アンダースコア|  
|~|チルダ|  
  
 次の表は、入力とそれに対応するエンコードされた出力の例を示しています。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal override byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="antiXssEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">エンコードするバイト配列。</param>
        <param name="offset">エンコードする最初のバイトのインデックス。</param>
        <param name="count">エンコードするバイト数。</param>
        <summary>指定したバイト配列を URL で使用できるようにエンコードします。エンコード処理は、バイト配列の指定したオフセットから、指定したバイト数だけ行います。</summary>
        <returns>エンコードされたバイト配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、セーフリストに含まれる文字を除くすべての文字をエンコードします。 文字は `%SINGLE_BYTE_HEX` 表記を使用してエンコードされます。  
  
 次の表に、既定の安全な文字の一覧を示します。 すべての文字は、Unicode [C0 コントロールと基本的なラテン](https://www.unicode.org/charts/PDF/U0000.pdf)文字の範囲に含まれています。 
   
  
|文字|説明|  
|--------------------|-----------------|  
|A-Z|大文字の英字|  
|a-z|小文字の英字|  
|0-9|番号|  
|-|ハイフン、マイナス|  
|.|ピリオド、ドット、完全停止|  
|_|アンダースコア|  
|~|チルダ|  
  
 次の表は、入力とそれに対応するエンコードされた出力の例を示しています。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal override string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="override this.UrlPathEncode : string -&gt; string" Usage="antiXssEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">エンコードする文字列。</param>
        <summary>URL で使用できるようにパス文字列をエンコードします。</summary>
        <returns>エンコードされたパスを含む URL。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
このメソッドは、セーフリストに含まれる文字を除くすべての文字をエンコードします。 文字は `%SINGLE_BYTE_HEX` 表記を使用してエンコードされます。  

次の表に、既定の安全な文字の一覧を示します。 すべての文字は、Unicode [C0 コントロールと基本的なラテン](https://www.unicode.org/charts/PDF/U0000.pdf)文字の範囲に含まれています。 
    
|文字|説明|  
|--------------------|-----------------|  
|A-Z|大文字の英字|  
|a-z|小文字の英字|  
|0-9|番号|  
|#|番号記号、ハッシュ|  
|%|パーセント記号|  
|( )|かっこ|  
|-|ハイフン、マイナス|  
|.|ピリオド、ドット、完全停止|  
|/|/|  
|&#92;|円記号|  
|_|アンダースコア|  
|{ }|中かっこ、中かっこ|  
|&#124;|垂直線|  
|~|チルダ|  
  
 次の表は、入力とそれに対応するエンコードされた出力の例を示しています。  
  
|||  
|-|-|  
|`http://www.contoso.com:8080/<en-us>/[page].htm?v={value1}#x=[amount]`|`http://www.contoso.com:8080/%3cen-us%3e/%5bpage%5d.htm?v={value1}#x=[amount]`|  
|`alert('XSS Attack!');`|`alert(%27XSS%20Attack%21%27)%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert(%27XSS%20Attack%21%27)%3b%3c/script%3e`|  
|`alert('XSSあAttack!');`|`alert(%27XSS%e3%81%82Attack%21%27)%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 このメソッドは、URL のパスのみをエンコードします。 この方法では、スキーム (たとえば、`http:`、`ftp:`、`file:`)、機関 (`www.northwind.com` や `www.contoso.com:8080`など)、クエリまたはフラグメント (`?v=s978dfs9#x=103`など) はエンコードされません。 文字列にスキームや機関が存在しない場合、文字列は相対パスであると見なされ、パスがエンコードされます。 次の URL では、部分文字列 `/default.htm` のみがエンコードされます。  
  
 `http://www.contoso.com:8080/default.htm?v=s978dfs9#x=103`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAttributeEncode">
      <MemberSignature Language="C#" Value="public static string XmlAttributeEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string XmlAttributeEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlAttributeEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ XmlAttributeEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member XmlAttributeEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">エンコードする文字列。</param>
        <summary>指定した文字列を XML 属性で使用できるようにエンコードします。</summary>
        <returns>エンコードされた文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、セーフリストに含まれる文字を除くすべての文字をエンコードします。 文字は `&#DECIMAL;` 表記を使用してエンコードされます。  
  
> [!NOTE]
>  ページに追加する前に、結果の文字列の前後に二重引用符 ("") または単一引用符 (' ') を配置してください。  
  
 次の表に、既定の安全な文字の一覧を示します。 [説明] 列に記載されている場合を除き、すべての文字が Unicode [C0 コントロールと基本ラテン](https://www.unicode.org/charts/PDF/U0000.pdf)文字範囲に含まれています。  
   
  
|Unicode コードテーブル|文字|説明|  
|------------------------|--------------------|-----------------|  
|A-Z|英大文字の英字|  
|a-z|英小文字の英字|  
|0-9|番号|  
|!|感嘆符|  
|#|番号記号、ハッシュ|  
|$|ドル記号、ドルマーク|  
|%|パーセント記号|  
|( )|かっこ|  
|*|アスタリスク|  
|+|タス|  
|,|コンマ|  
|-|ハイフン、マイナス|  
|.|ピリオド、ドット、完全停止|  
|/|/|  
|:|コロン|  
|;|セミコロン|  
|=|等号 (=)|  
|?|疑問符|  
|@|コマーシャル/サインイン|  
|[ ]|角かっこ|  
|&#92;|円記号|  
|^|キャレット|  
|_|アンダースコア|  
|\`|グレーブ アクセント|  
|{ }|中かっこ、中かっこ|  
|&#124;|垂直線|  
|~|チルダ|  
|0x00A1 ~ 0X00a1|Unicode [C1 コントロールと Latin-1 補助](https://www.unicode.org/charts/PDF/U0080.pdf)文字範囲の 0x00a1 (161 decimal) と 0x00a1 (172 decimal) の間の特殊文字。|  
|Unicode [C1 コントロールと Latin-1 補助](https://www.unicode.org/charts/PDF/U0080.pdf)文字範囲の 0x00ae (174 decimal) と 0x00ae (255 decimal) の間の特殊文字。|  
|0x0100-0x017F|0x0100 (256 decimal) と 0x017F (383 decimal) の間の文字。 (Unicode [Latin 拡張](https://www.unicode.org/charts/PDF/U0100.pdf)文字の範囲)。| 
|0x0180-0x024F|文字は、0x0180 (384 decimal) と 0x024F (591 decimal) の間にあります。 (Unicode[ラテン拡張 B](https://www.unicode.org/charts/PDF/U0180.pdf)文字の範囲)。| 
|0x0250-0X0250|0x0250 (592 decimal) と 0X0250 (687 decimal) の間の文字。 (Unicode の[IPA 拡張](https://www.unicode.org/charts/PDF/U0250.pdf)文字の範囲)。| 
|0x02B0-0X02b0|0x02B0 (688 decimal) と 0X02b0 (767 decimal) の間の文字。 (Unicode[スペーシング修飾子](https://www.unicode.org/charts/PDF/U02B0.pdf)文字の範囲)。|
|0x0300-0x036F|0x0300 (768 decimal) と 0x036F (879 decimal) の間の文字。 (Unicode[結合分音記号](https://www.unicode.org/charts/PDF/U0300.pdf)の文字の範囲)。|  
  
 次の表は、入力とそれに対応するエンコードされた出力の例を示しています。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&apos;XSS&#32;Attack!&apos;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&apos;XSS&#32;Attack!&apos;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&apos;XSS&#12354;Attack!&apos;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 セーフリストをカスタマイズするには、<xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncode">
      <MemberSignature Language="C#" Value="public static string XmlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string XmlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ XmlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member XmlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">エンコードする文字列。</param>
        <summary>指定した文字列を XML 属性で使用できるようにエンコードします。</summary>
        <returns>エンコードされた文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、セーフリストに含まれる文字を除くすべての文字をエンコードします。 文字は `&#DECIMAL;` 表記を使用してエンコードされます。  
  
> [!NOTE]
>  ページに追加する前に、結果の文字列の前後に二重引用符 ("") または単一引用符 (' ') を配置してください。  
  
 次の表に、既定の安全な文字の一覧を示します。 すべての文字は、[説明] 列に記載されている場合を除き、Unicode [C0 コントロールと基本的なラテン](https://www.unicode.org/charts/PDF/U0000.pdf)文字の範囲に含まれています。   
  
|文字|説明|  
|--------------------|-----------------|  
|A-Z|英大文字の英字|  
|a-z|英小文字の英字|  
|0-9|番号|  
|行間|スペース|  
|!|感嘆符|  
|#|番号記号、ハッシュ|  
|$|ドル記号、ドルマーク|  
|%|パーセント記号|  
|( )|かっこ|  
|*|アスタリスク|  
|+|タス|  
|,|コンマ|  
|-|ハイフン、マイナス|  
|.|期間|  
|/|/|  
|:|コロン|  
|;|セミコロン|  
|=|等号 (=)|  
|?|疑問符|  
|@|商用|  
|[ ]|角かっこ|  
|&#92;|円記号|  
|^|キャレット|  
|_|アンダースコア|  
|\`|グレーブ アクセント|  
|{ }|中かっこ、中かっこ|  
|&#124;|垂直線|  
|~|チルダ|  
|0x00A1 ~ 0X00a1|Unicode [C1 コントロールと Latin-1 補助](https://www.unicode.org/charts/PDF/U0080.pdf)文字範囲の 0x00a1 (161 decimal) と 0x00a1 (172 decimal) の間の特殊文字。 この範囲の文字は `useNamedEntities` が `true`ときにエンコードされます。|  
|0x00AE-0X00ae|Unicode [C1 コントロールと Latin-1 補助](https://www.unicode.org/charts/PDF/U0080.pdf)文字範囲の 0x00ae (174 decimal) と 0x00ae (255 decimal) の間の特殊文字。 この範囲の文字は `useNamedEntities` が `true`ときにエンコードされます。|  
|0x0100-0x017F|0x0100 (256 decimal) と 0x017F (383 decimal) の間の文字。 (Unicode [Latin 拡張](https://www.unicode.org/charts/PDF/U0100.pdf)文字の範囲)。| 
|0x0180-0x024F|文字は、0x0180 (384 decimal) と 0x024F (591 decimal) の間にあります。 (Unicode[ラテン拡張 B](https://www.unicode.org/charts/PDF/U0180.pdf)文字の範囲)。|
|0x0250-0X0250|0x0250 (592 decimal) と 0X0250 (687 decimal) の間の文字。 (Unicode の[IPA 拡張](https://www.unicode.org/charts/PDF/U0250.pdf)文字の範囲)。| 
|0x02B0-0X02b0|0x02B0 (688 decimal) と 0X02b0 (767 decimal) の間の文字。 (Unicode[スペーシング修飾子](https://www.unicode.org/charts/PDF/U02B0.pdf)文字の範囲)。|
|0x0300-0x036F|0x0300 (768 decimal) と 0x036F (879 decimal) の間の文字。 (Unicode[結合分音記号](https://www.unicode.org/charts/PDF/U0300.pdf)の文字の範囲)。| 
  
 次の表は、入力とそれに対応するエンコードされた出力の例を示しています。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&apos;XSS Attack!&apos;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&apos;XSS&#12354;Attack!&apos;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 セーフリストをカスタマイズするには、<xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
