<Type Name="IEndpointBehavior" FullName="System.ServiceModel.Description.IEndpointBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="283b414fd4ccba347996041278c44133845b9d7e" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83933394" /></Metadata><TypeSignature Language="C#" Value="public interface IEndpointBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEndpointBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IEndpointBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEndpointBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEndpointBehavior" />
  <TypeSignature Language="F#" Value="type IEndpointBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.6.0.0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.7.0.0" FrameworkAlternate="dotnet-plat-ext-3.1;dotnet-plat-ext-5.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="14e26-101">サービスまたはクライアント アプリケーションでエンドポイントのランタイム動作を拡張するために使用できるメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="14e26-101">Implements methods that can be used to extend run-time behavior for an endpoint in either a service or client application.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14e26-102">クライアントまたはサービス アプリケーションのいずれかで、エンドポイント全体にわたる実行の一部の側面をアプリケーション レベルで変更、確認、または拡張するには、<xref:System.ServiceModel.Description.IEndpointBehavior> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="14e26-102">Implement the <xref:System.ServiceModel.Description.IEndpointBehavior> interface to modify, examine, or extend some aspect of endpoint-wide execution at the application level for either client or service applications.</span></span>  
  
-   <span data-ttu-id="14e26-103"><xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> メソッドを使用して、実行時にカスタム データを渡して、バインディングがカスタム動作をサポートできるようにします。</span><span class="sxs-lookup"><span data-stu-id="14e26-103">Use the <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> method to pass custom data at runtime to enable bindings to support custom behavior.</span></span>  
  
-   <span data-ttu-id="14e26-104"><xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> メソッドを使用して、クライアント アプリケーションでエンドポイントを変更または確認したり、エンドポイントに拡張機能を挿入したりできます。</span><span class="sxs-lookup"><span data-stu-id="14e26-104">Use the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> method to modify, examine, or insert extensions to an endpoint in a client application.</span></span>  
  
-   <span data-ttu-id="14e26-105"><xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> メソッドを使用して、サービス アプリケーションでエンドポイント全体にわたる実行を変更または確認し、エンドポイント全体にわたる実行に拡張機能を挿入できます。</span><span class="sxs-lookup"><span data-stu-id="14e26-105">Use the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> method to modify, examine, or insert extensions to endpoint-wide execution in a service application.</span></span>  
  
-   <span data-ttu-id="14e26-106"><xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> メソッドを使用して、<xref:System.ServiceModel.Description.ServiceEndpoint> が特定の要件を満たしていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="14e26-106">Use the <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> method to confirm that a <xref:System.ServiceModel.Description.ServiceEndpoint> meets specific requirements.</span></span> <span data-ttu-id="14e26-107">このメソッドを使用して、エンドポイントで特定の構成設定が有効になっているかどうか、エンドポイントが特定の機能をサポートしているかどうかなどの要件を確認できます。</span><span class="sxs-lookup"><span data-stu-id="14e26-107">This can be used to ensure that an endpoint has a certain configuration setting enabled, supports a particular feature and other requirements.</span></span>  
  
 <span data-ttu-id="14e26-108"><xref:System.ServiceModel.Description.IEndpointBehavior> オブジェクトは、これらのメソッドのいずれかを使用できますが、多くの場合、重要なのは1つだけです。このような場合、使用されていないメソッドはを返し、アクションを実行することはできません。</span><span class="sxs-lookup"><span data-stu-id="14e26-108"><xref:System.ServiceModel.Description.IEndpointBehavior> objects can make use of any of these methods, but often only one is important; in such cases, the unused methods can return, performing no action.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="14e26-109">すべての <xref:System.ServiceModel.Description.IEndpointBehavior> メソッドは <xref:System.ServiceModel.Description.ServiceEndpoint> オブジェクトをパラメーターとして渡します。</span><span class="sxs-lookup"><span data-stu-id="14e26-109">All of the <xref:System.ServiceModel.Description.IEndpointBehavior> methods pass a <xref:System.ServiceModel.Description.ServiceEndpoint> object as a parameter.</span></span> <span data-ttu-id="14e26-110">このパラメーターは、検査にのみ使用されます。<xref:System.ServiceModel.Description.ServiceEndpoint> オブジェクトを変更した場合、実行の動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="14e26-110">This parameter is for examination only; if you modify the <xref:System.ServiceModel.Description.ServiceEndpoint> object the execution behavior is undefined.</span></span>  
  
 <span data-ttu-id="14e26-111"><xref:System.ServiceModel.Description.IEndpointBehavior> オブジェクトは通常、サービス アプリケーションの <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>、<xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>、<xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType>、<xref:System.ServiceModel.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> の各オブジェクト、および、クライアント アプリケーションの <xref:System.ServiceModel.Dispatcher.ClientRuntime?displayProperty=nameWithType> と <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> のさまざまなプロパティにアクセスするために使用します。</span><span class="sxs-lookup"><span data-stu-id="14e26-111"><xref:System.ServiceModel.Description.IEndpointBehavior> objects are typically used to access the various properties of the <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType>, and <xref:System.ServiceModel.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> objects in a service application and the <xref:System.ServiceModel.Dispatcher.ClientRuntime?displayProperty=nameWithType> and <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> in a client application.</span></span> <span data-ttu-id="14e26-112">また、<xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A?displayProperty=nameWithType> プロパティと <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> プロパティをそれぞれ使用して、双方向クライアントと双方向サービスのプロパティにアクセスすることもできます。</span><span class="sxs-lookup"><span data-stu-id="14e26-112">In addition, you can access the properties of duplex clients and services using the <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A?displayProperty=nameWithType> and <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> properties, respectively.</span></span>  
  
 <span data-ttu-id="14e26-113">使用できるさまざまなプロパティとカスタマイズの詳細については、「 [ServiceHost とサービスモデルレイヤーの拡張](/dotnet/framework/wcf/extending/extending-servicehost-and-the-service-model-layer)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="14e26-113">For a description of the various properties and customizations available, see [Extending ServiceHost and the Service Model Layer](/dotnet/framework/wcf/extending/extending-servicehost-and-the-service-model-layer).</span></span>  
  
 <span data-ttu-id="14e26-114">カスタマイズが決定され (必要に応じてカスタマイズインターフェイスが実装されている)、<xref:System.ServiceModel.Description.IEndpointBehavior> が適切なカスタマイズのスコープであることが決定されたら、<xref:System.ServiceModel.Description.IEndpointBehavior> を実装し、エンドポイントの動作をランタイムに追加することによって、Windows Communication Foundation (WCF) ランタイムにカスタマイズを挿入する必要があります。</span><span class="sxs-lookup"><span data-stu-id="14e26-114">Once a customization has been decided upon (and the customization interface implemented if necessary) and the <xref:System.ServiceModel.Description.IEndpointBehavior> has been decided is the appropriate scope of customization, the customization must be inserted into the Windows Communication Foundation (WCF) runtime by implementing <xref:System.ServiceModel.Description.IEndpointBehavior> and adding the endpoint behavior to the runtime.</span></span>  
  
 <span data-ttu-id="14e26-115">ランタイムに動作を追加するには、2 つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="14e26-115">There are two ways to add the behavior to the runtime:</span></span>  
  
-   <span data-ttu-id="14e26-116">サービス ホスト (サービス アプリケーションの場合) またはチャネル ファクトリ (クライアント アプリケーションの場合) を開く前に、プログラムを使用して、<xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> プロパティにエンドポイントのカスタム動作を追加します。</span><span class="sxs-lookup"><span data-stu-id="14e26-116">Programmatically add the custom endpoint behavior to the <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> property prior to the opening of the service host (in a service application) or the channel factory (in a client application).</span></span>  
  
-   <span data-ttu-id="14e26-117">アプリケーション構成ファイルを使用して動作を構成します。</span><span class="sxs-lookup"><span data-stu-id="14e26-117">Configure the behavior using an application configuration file.</span></span> <span data-ttu-id="14e26-118">詳細については、「&lt;の動作[拡張機能&gt;](/dotnet/framework/configure-apps/file-schema/wcf/behaviorextensions)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="14e26-118">For details, see [&lt;behaviorExtensions&gt;](/dotnet/framework/configure-apps/file-schema/wcf/behaviorextensions).</span></span>  
  
 <span data-ttu-id="14e26-119">想定されているサービス カスタマイズ タスクを実行するには、<xref:System.ServiceModel.Description.IEndpointBehavior> メソッドが <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> で呼び出されるときに行われるサービス ランタイムの構築の前に、<xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> オブジェクトを <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> プロパティに追加しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="14e26-119">To perform the service customization task for which it is intended, the <xref:System.ServiceModel.Description.IEndpointBehavior> object must be added to the <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> property prior to the construction of the service runtime, which occurs when <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>.</span></span> <span data-ttu-id="14e26-120">クライアント カスタマイズ タスクを実行するには、<xref:System.ServiceModel.Description.IEndpointBehavior> で <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> メソッドまたは <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> メソッドを呼び出す前に、<xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> オブジェクトを <xref:System.ServiceModel.ChannelFactory%601> プロパティに追加しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="14e26-120">To perform a client customization task, the <xref:System.ServiceModel.Description.IEndpointBehavior> object must be added to the <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> property before calling the <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> method or the <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method on <xref:System.ServiceModel.ChannelFactory%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14e26-121">サービス アプリケーションで <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> オブジェクトを追加するエンドポイント動作の実装を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="14e26-121">The following code example shows the implementation of an endpoint behavior that adds an <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> object in a service application.</span></span> <span data-ttu-id="14e26-122">この場合、`EndpointBehaviorMessageInspector` クラスは、受信および送信メッセージを調べるための <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType>、動作が適用されるすべてのエンドポイントの検査システムにインスペクター クラスを挿入するための <xref:System.ServiceModel.Description.IEndpointBehavior> インターフェイス、およびアプリケーション構成ファイルを使用してメッセージ インスペクターの動作ができるようにするための <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> を実装します。</span><span class="sxs-lookup"><span data-stu-id="14e26-122">In this case, the `EndpointBehaviorMessageInspector` class implements <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> to inspect the inbound and outbound message, the <xref:System.ServiceModel.Description.IEndpointBehavior> interface to insert the inspector class into the inspection system for all endpoints to which the behavior applies, and the <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> to enable the message inspector behavior using an application configuration file.</span></span>  
  
 <span data-ttu-id="14e26-123">最初にメッセージ インスペクターを実装します。</span><span class="sxs-lookup"><span data-stu-id="14e26-123">The first step is to implement the message inspector.</span></span>  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 <span data-ttu-id="14e26-124">メッセージ インスペクターを <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> プロパティに追加する <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> メソッドの使用法を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="14e26-124">The next code example shows the use of the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> method to add the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> property.</span></span>  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 <span data-ttu-id="14e26-125">構成ファイルからメッセージ インスペクター動作を使用できるようにするための <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> の実装を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="14e26-125">The following code example shows the implementation of <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> in order to enable use of the message inspector behavior from a configuration file.</span></span>  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 <span data-ttu-id="14e26-126">最後に、前の例を構成から使用できるようにする方法を次の構成ファイルに示します。</span><span class="sxs-lookup"><span data-stu-id="14e26-126">Finally, the following configuration file shows how the preceding example can be used from configuration.</span></span>  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBindingParameters (endpoint As ServiceEndpoint, bindingParameters As BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iEndpointBehavior.AddBindingParameters (endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="14e26-127">変更するエンドポイント。</span><span class="sxs-lookup"><span data-stu-id="14e26-127">The endpoint to modify.</span></span></param>
        <param name="bindingParameters"><span data-ttu-id="14e26-128">動作をサポートするためにバインド要素が要求するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="14e26-128">The objects that binding elements require to support the behavior.</span></span></param>
        <summary><span data-ttu-id="14e26-129">実行時にバインディングにデータを渡して、バインディングがカスタム動作をサポートできるようにするために実装します。</span><span class="sxs-lookup"><span data-stu-id="14e26-129">Implement to pass data at runtime to bindings to support custom behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14e26-130">エンドポイントの動作をサポートするために必要な追加のオブジェクトをバインド要素に提供するには、<xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="14e26-130">Implement the <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> method to provide binding elements with the extra objects they require to support the endpoint behavior.</span></span> <span data-ttu-id="14e26-131">これによってバインディング パラメーターが追加されると、チャネル リスナーまたはチャネル ファクトリが作成された場合に、バインディングがこれらのオブジェクトを検索できます。</span><span class="sxs-lookup"><span data-stu-id="14e26-131">When binding parameters are added here the binding can locate these objects when the channel listener or channel factory is created.</span></span> <span data-ttu-id="14e26-132"><xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> メソッドは通常、サポートするチャネルを正しく作成できるように、カスタム バインド要素にエンドポイントに関する情報を渡すために実装します。</span><span class="sxs-lookup"><span data-stu-id="14e26-132">Typically, you implement the <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> method to pass information about the endpoint to a custom binding element so that it can build a supporting channel correctly.</span></span> <span data-ttu-id="14e26-133">変更の必要がない場合は、値を返しません。</span><span class="sxs-lookup"><span data-stu-id="14e26-133">Return no value if no modifications are required.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyClientBehavior (endpoint As ServiceEndpoint, clientRuntime As ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iEndpointBehavior.ApplyClientBehavior (endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="14e26-134">カスタマイズ対象のエンドポイント。</span><span class="sxs-lookup"><span data-stu-id="14e26-134">The endpoint that is to be customized.</span></span></param>
        <param name="clientRuntime"><span data-ttu-id="14e26-135">カスタマイズ対象のクライアント ランタイム。</span><span class="sxs-lookup"><span data-stu-id="14e26-135">The client runtime to be customized.</span></span></param>
        <summary><span data-ttu-id="14e26-136">エンドポイント全体にわたってクライアントの変更または拡張を実装します。</span><span class="sxs-lookup"><span data-stu-id="14e26-136">Implements a modification or extension of the client across an endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14e26-137">エンドポイントで使用されるすべてのメッセージまたは特定の操作について、クライアント ランタイムを表示または変更したり、クライアント ランタイムにカスタム拡張機能を追加したりするには、<xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="14e26-137">Implement the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> method to view, modify, or add custom extension to the client runtime across all messages used with an endpoint or for specific operations.</span></span> <span data-ttu-id="14e26-138">クライアントのランタイム オブジェクトで実行できるカスタマイズの詳細については、<xref:System.ServiceModel.Dispatcher.ClientRuntime> および <xref:System.ServiceModel.Dispatcher.ClientOperation> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="14e26-138">For details about what customizations you can do with a client run-time object, see <xref:System.ServiceModel.Dispatcher.ClientRuntime> and <xref:System.ServiceModel.Dispatcher.ClientOperation>.</span></span>  
  
 <span data-ttu-id="14e26-139">動作をサービス アプリケーションでのみ使用する場合は、<xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> メソッドで <xref:System.NotImplementedException> をスローさせることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="14e26-139">It is recommended that the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> method throw a <xref:System.NotImplementedException> if the behavior is only intended for use in a service application.</span></span>  
  
 <span data-ttu-id="14e26-140">既に他の動作によって一部の操作が追加されるか、ランタイムから削除されている可能性があるので、<xref:System.ServiceModel.Dispatcher.DispatchOperation> プロパティにある <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> オブジェクトと同じ数の操作が説明に存在するという保証はありません。</span><span class="sxs-lookup"><span data-stu-id="14e26-140">Because other behaviors may have already added or removed some operations from the runtime there is no guarantee that there are the same number of operations in the description as there are <xref:System.ServiceModel.Dispatcher.DispatchOperation> objects in the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyDispatchBehavior (endpoint As ServiceEndpoint, endpointDispatcher As EndpointDispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::EndpointDispatcher ^ endpointDispatcher);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.EndpointDispatcher -&gt; unit" Usage="iEndpointBehavior.ApplyDispatchBehavior (endpoint, endpointDispatcher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="endpointDispatcher" Type="System.ServiceModel.Dispatcher.EndpointDispatcher" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="14e26-141">コントラクトを公開するエンドポイント。</span><span class="sxs-lookup"><span data-stu-id="14e26-141">The endpoint that exposes the contract.</span></span></param>
        <param name="endpointDispatcher"><span data-ttu-id="14e26-142">変更または拡張対象のエンドポイント ディスパッチャー。</span><span class="sxs-lookup"><span data-stu-id="14e26-142">The endpoint dispatcher to be modified or extended.</span></span></param>
        <summary><span data-ttu-id="14e26-143">エンドポイント全体にわたってサービスの変更または拡張を実装します。</span><span class="sxs-lookup"><span data-stu-id="14e26-143">Implements a modification or extension of the service across an endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14e26-144">エンドポイントのすべてのメッセージまたは特定の操作について、サービス ランタイムを表示、変更、または拡張するには、<xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="14e26-144">Implement the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> method to view, modify, or extend the service runtime across all messages or for specific operations in an endpoint.</span></span> <span data-ttu-id="14e26-145">サービス アプリケーションで実行できるカスタマイズの詳細については、<xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> および <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="14e26-145">For details about what customizations you can do in a service application, see <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> and <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="14e26-146">動作をクライアント アプリケーションでのみ使用する場合は、<xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> メソッドで <xref:System.NotImplementedException> 例外をスローさせることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="14e26-146">It is recommended that the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> method throw a <xref:System.NotImplementedException> exception if the behavior is only intended for use in a client application.</span></span>  
  
 <span data-ttu-id="14e26-147">コールバック コントラクト (各方向に 1 つずつの操作) を使用するときは、説明に同じ名前の操作が 2 つ存在する場合がありますので注意してください。</span><span class="sxs-lookup"><span data-stu-id="14e26-147">Note that there can be two operations with the same name in the description when using a callback contract (one operation in each direction).</span></span> <span data-ttu-id="14e26-148">操作の反復が必要な場合は、エンドポイント <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> と、<xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> プロパティによって返されるエンドポイント間で、メッセージの方向を関連付ける必要があります。</span><span class="sxs-lookup"><span data-stu-id="14e26-148">If you are iterating through operations, you must correlate the message direction between the endpoint <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> and what is returned by the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="14e26-149">また、既に他の動作によって一部の操作が追加されるか、ランタイムから削除されている可能性があるので、<xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> プロパティにある <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A?displayProperty=nameWithType> オブジェクトと同じ数の操作が説明に存在するという保証はありません。</span><span class="sxs-lookup"><span data-stu-id="14e26-149">In addition, because other behaviors may have already added or removed some operations from the runtime, there is no guarantee that there are the same number of operations in description as there are <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> objects in the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14e26-150">サービス アプリケーションで <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> オブジェクトを追加するエンドポイント動作の実装を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="14e26-150">The following code example shows the implementation of an endpoint behavior that adds an <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> object in a service application.</span></span> <span data-ttu-id="14e26-151">この場合、`EndpointBehaviorMessageInspector` クラスは、受信および送信メッセージを調べるための <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType>、動作が適用されるすべてのエンドポイントの検査システムにインスペクター クラスを挿入するための <xref:System.ServiceModel.Description.IEndpointBehavior> インターフェイス、およびアプリケーション構成ファイルを使用してメッセージ インスペクターの動作ができるようにするための <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> を実装します。</span><span class="sxs-lookup"><span data-stu-id="14e26-151">In this case, the `EndpointBehaviorMessageInspector` class implements <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> to inspect the inbound and outbound message, the <xref:System.ServiceModel.Description.IEndpointBehavior> interface to insert the inspector class into the inspection system for all endpoints to which the behavior applies, and the <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> to enable the message inspector behavior using an application configuration file.</span></span>  
  
 <span data-ttu-id="14e26-152">最初にメッセージ インスペクターを実装します。</span><span class="sxs-lookup"><span data-stu-id="14e26-152">The first step is to implement the message inspector.</span></span>  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 <span data-ttu-id="14e26-153">メッセージ インスペクターを <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> プロパティに追加する <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> メソッドの使用法を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="14e26-153">The next code example shows the use of the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> method to add the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> property.</span></span>  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 <span data-ttu-id="14e26-154">構成ファイルからメッセージ インスペクター動作を使用できるようにするための <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> の実装を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="14e26-154">The following code example shows the implementation of <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> in order to enable use of the message inspector behavior from a configuration file.</span></span>  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 <span data-ttu-id="14e26-155">最後に、前の例を構成から使用できるようにする方法を次の構成ファイルに示します。</span><span class="sxs-lookup"><span data-stu-id="14e26-155">Finally, the following configuration file shows how the preceding example can be used from configuration.</span></span>  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate (endpoint As ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iEndpointBehavior.Validate endpoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="14e26-156">検証対象のエンドポイント。</span><span class="sxs-lookup"><span data-stu-id="14e26-156">The endpoint to validate.</span></span></param>
        <summary><span data-ttu-id="14e26-157">エンドポイントが指定した基準を満たしていることを確認するために実装します。</span><span class="sxs-lookup"><span data-stu-id="14e26-157">Implement to confirm that the endpoint meets some intended criteria.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14e26-158">構造を調べて基準の設定を確認するために、<xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="14e26-158">Implement the <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> method to examine the structure to confirm any set of criteria.</span></span> <span data-ttu-id="14e26-159">このメソッドを使用するために <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A>、または <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> でカスタマイズを行う必要はありません。</span><span class="sxs-lookup"><span data-stu-id="14e26-159">It is not necessary to perform any customizations in <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> or <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> to make use of this method.</span></span> <span data-ttu-id="14e26-160">エンドポイントが検証にパスした場合は値を返します。それ以外の場合は、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="14e26-160">If the endpoint passes validation, return; otherwise, throw an exception.</span></span>  
  
 <span data-ttu-id="14e26-161">たとえば、<xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> メソッドを使用して、すべてのエンドポイントに承認された共通のバインディングが使用されているかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="14e26-161">For example, the <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> method can be use to ensure that all endpoints use an approved corporate binding.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
