<Type Name="IContractBehavior" FullName="System.ServiceModel.Description.IContractBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="486bd6b1f9a7dcc53c871dccf11df7892a4898a5" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75063891" /></Metadata><TypeSignature Language="C#" Value="public interface IContractBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContractBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IContractBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContractBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContractBehavior" />
  <TypeSignature Language="F#" Value="type IContractBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f0199-101">サービスまたはクライアント アプリケーションでコントラクトのランタイム動作を拡張するために使用できるメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="f0199-101">Implements methods that can be used to extend run-time behavior for a contract in either a service or client application.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0199-102">コントラクト全体にわたる実行の一部の側面を、アプリケーション レベルで変更、確認、または拡張するには、<xref:System.ServiceModel.Description.IContractBehavior> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="f0199-102">Implement the <xref:System.ServiceModel.Description.IContractBehavior> interface to modify, examine, or extend some aspect of contract-wide execution at the application level.</span></span> <span data-ttu-id="f0199-103"><xref:System.ServiceModel.Description.IServiceBehavior> オブジェクトは、<xref:System.ServiceModel.Description.IEndpointBehavior> オブジェクトおよび <xref:System.ServiceModel.Description.IContractBehavior> オブジェクトとは異なり、アプリケーション構成ファイルを使用してランタイムに追加することはできません。プログラムによって、または属性を使用することによってのみ追加できます。</span><span class="sxs-lookup"><span data-stu-id="f0199-103">Unlike <xref:System.ServiceModel.Description.IServiceBehavior> and <xref:System.ServiceModel.Description.IEndpointBehavior> objects, <xref:System.ServiceModel.Description.IContractBehavior> objects cannot be added to the runtime using an application configuration file; they can only be added programmatically or using an attribute.</span></span>  
  
 <span data-ttu-id="f0199-104">サービス、エンドポイント、およびコントラクトの動作の選択の詳細については、「動作を使用した[ランタイムの構成と拡張](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f0199-104">For more information about choosing between service, endpoint, and contract behaviors, see [Configuring and Extending the Runtime with Behaviors](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).</span></span>  
  
-   <span data-ttu-id="f0199-105"><xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> メソッドを使用して、動作をサポートするためのカスタム データをバインド要素に提供します。</span><span class="sxs-lookup"><span data-stu-id="f0199-105">Use the <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> method to provide binding elements with custom data to support the behavior.</span></span>  
  
-   <span data-ttu-id="f0199-106"><xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> メソッドを使用して、クライアント アプリケーションでコントラクトを変更または確認したり、コントラクトに拡張機能を挿入したりできます。</span><span class="sxs-lookup"><span data-stu-id="f0199-106">Use the <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> method to modify, examine, or insert extensions to a contract in a client application.</span></span>  
  
-   <span data-ttu-id="f0199-107"><xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> メソッドを使用して、サービス アプリケーションでコントラクトを変更または確認したり、コントラクトに拡張機能を挿入したりできます。</span><span class="sxs-lookup"><span data-stu-id="f0199-107">Use the <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> method to modify, examine, or insert extensions to a contract in a service application.</span></span>  
  
-   <span data-ttu-id="f0199-108"><xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> メソッドを使用して、コントラクトが特定の機能をサポートしていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="f0199-108">Use the <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> method to ensure that a contract can support a particular feature.</span></span>  
  
 <span data-ttu-id="f0199-109"><xref:System.ServiceModel.Description.IContractBehavior> オブジェクトは、これらのメソッドをどれでも使用できますが、通常は、重要なメソッドは 1 つだけです。この場合、使用されないメソッドは、値なしで戻ることができます。</span><span class="sxs-lookup"><span data-stu-id="f0199-109"><xref:System.ServiceModel.Description.IContractBehavior> objects can make use of any of these methods, but often only one is important; in such cases, the unused methods can return without any value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f0199-110">すべての <xref:System.ServiceModel.Description.IContractBehavior> メソッドは <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> および <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> をパラメーターとして渡します。</span><span class="sxs-lookup"><span data-stu-id="f0199-110">All of the <xref:System.ServiceModel.Description.IContractBehavior> methods pass <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> as parameters.</span></span> <span data-ttu-id="f0199-111">これらのパラメーターは、検査に使用されます。これらのオブジェクトを変更した場合、実行の動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="f0199-111">These parameters are for examination; if you modify the objects the execution behavior is undefined.</span></span>  
  
 <span data-ttu-id="f0199-112"><xref:System.ServiceModel.Description.IContractBehavior> の種類は、サービスまたはクライアントのどちらか一方または両方で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f0199-112"><xref:System.ServiceModel.Description.IContractBehavior> types can be used on either the service or the client, or both.</span></span> <span data-ttu-id="f0199-113">サービスでカスタマイズ タスクを実行するには、<xref:System.ServiceModel.Description.IContractBehavior> メソッドが <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> オブジェクトで呼び出されるときに行われるサービス ランタイムの構築の前に、<xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> オブジェクトを <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> プロパティに追加しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="f0199-113">To perform a customization task on the service, the <xref:System.ServiceModel.Description.IContractBehavior> object must be added to the <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> property prior to the construction of the service runtime, which occurs when the <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on the <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="f0199-114">これには、2 つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="f0199-114">There are two ways to do this.</span></span>  
  
 <span data-ttu-id="f0199-115">1 つは、<xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> メソッドが <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> オブジェクトで呼び出される前に、プログラムを使用して、<xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> プロパティにコントラクトのカスタム動作を追加する方法です。</span><span class="sxs-lookup"><span data-stu-id="f0199-115">The first method is to programmatically add the custom contract behavior to the <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> property prior to the point when the <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on the <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="f0199-116">この場合、動作は、エンドポイント上でそのコントラクトを使用して送信されるすべてのメッセージに適用されます。</span><span class="sxs-lookup"><span data-stu-id="f0199-116">When applied this way, the behavior is applied for all messages flowing through that contract on any endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f0199-117">動作は、同じ種類のすべてのコントラクトに適用されます。</span><span class="sxs-lookup"><span data-stu-id="f0199-117">The behavior is applied to all contracts of the same type.</span></span> <span data-ttu-id="f0199-118">たとえば、プログラムを使用して同じ種類のコントラクトを複数のエンドポイントに追加した場合、同じコントラクト オブジェクトを参照するすべてのエンドポイントで動作が変更されます。</span><span class="sxs-lookup"><span data-stu-id="f0199-118">For example, if you programmatically add the same contract type to more than one endpoint, the behavior modifies all endpoints that refer to the same contract object.</span></span>  
  
 <span data-ttu-id="f0199-119">もう 1 つは、<xref:System.ServiceModel.Description.IContractBehavior> を実装するカスタム属性を作成し、それを次のものに適用する方法です。</span><span class="sxs-lookup"><span data-stu-id="f0199-119">The second method is to create a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> and apply that to:</span></span>  
  
-   <span data-ttu-id="f0199-120">コントラクト インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="f0199-120">A contract interface.</span></span> <span data-ttu-id="f0199-121">この場合、動作は任意のエンドポイント内の該当の型のすべてのコントラクトに適用されます。</span><span class="sxs-lookup"><span data-stu-id="f0199-121">In this case, the behavior is applied to all contracts of that type in any endpoint.</span></span>  
  
-   <span data-ttu-id="f0199-122">サービス クラス。</span><span class="sxs-lookup"><span data-stu-id="f0199-122">A service class.</span></span>  <span data-ttu-id="f0199-123">この場合、動作はコントラクトとは関係なくすべてのエンドポイントに適用されます。</span><span class="sxs-lookup"><span data-stu-id="f0199-123">In this case, the behavior is applied to all endpoints regardless of contract.</span></span>  
  
-   <span data-ttu-id="f0199-124">コールバック クラス。</span><span class="sxs-lookup"><span data-stu-id="f0199-124">A callback class.</span></span>  <span data-ttu-id="f0199-125">この場合、動作は双方向クライアントのエンドポイントに適用されます。</span><span class="sxs-lookup"><span data-stu-id="f0199-125">In this case, the behavior is applied to the duplex client's endpoint.</span></span>  
  
 <span data-ttu-id="f0199-126">カスタム属性が <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=nameWithType> を同時に実装している場合、2 番目の方法の動作は少し異なります。</span><span class="sxs-lookup"><span data-stu-id="f0199-126">The behavior of the second approach varies slightly if the custom attribute also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f0199-127">この場合、動作は次のようになります。</span><span class="sxs-lookup"><span data-stu-id="f0199-127">In this case, the behavior is as follows:</span></span>  
  
-   <span data-ttu-id="f0199-128">コントラクト インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="f0199-128">A contract interface.</span></span> <span data-ttu-id="f0199-129">この場合、動作は任意のエンドポイントでその型のすべてのコントラクトに適用され、Windows Communication Foundation (WCF) は <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> プロパティの値を無視します。</span><span class="sxs-lookup"><span data-stu-id="f0199-129">In this case, the behavior is applied to all contracts of that type in any endpoint and Windows Communication Foundation (WCF) ignores the value of the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="f0199-130">サービス クラス。</span><span class="sxs-lookup"><span data-stu-id="f0199-130">A service class.</span></span>  <span data-ttu-id="f0199-131">この場合、動作はコントラクトが <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> プロパティの値であるエンドポイントにのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="f0199-131">In this case, the behavior is applied only to endpoints the contract of which is the value of the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="f0199-132">コールバック クラス。</span><span class="sxs-lookup"><span data-stu-id="f0199-132">A callback class.</span></span>  <span data-ttu-id="f0199-133">この場合、動作は双方向クライアントのエンドポイントに適用され、WCF は <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> プロパティの値を無視します。</span><span class="sxs-lookup"><span data-stu-id="f0199-133">In this case, the behavior is applied to the duplex client's endpoint and WCF ignores the value of the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="f0199-134">想定されているカスタマイズ タスクをクライアントで実行するには、<xref:System.ServiceModel.Description.IContractBehavior> が呼び出されるときに行われるクライアント ランタイムの構築の前に、<xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> オブジェクトを <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> プロパティに追加しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="f0199-134">To perform the customization task on the client for which it is intended, the <xref:System.ServiceModel.Description.IContractBehavior> object must be added to the <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> property prior to the construction of the client runtime, which occurs when <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> is called.</span></span> <span data-ttu-id="f0199-135">これには、2 つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="f0199-135">There are two ways to do this:</span></span>  
  
-   <span data-ttu-id="f0199-136"><xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> が呼び出される前に、プログラムを使用して、<xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> プロパティにコントラクトのカスタム動作を追加します。</span><span class="sxs-lookup"><span data-stu-id="f0199-136">Programmatically add the custom contract behavior to the <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> property prior to the point when the <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> is called.</span></span>  
  
-   <span data-ttu-id="f0199-137"><xref:System.ServiceModel.Description.IContractBehavior> を同時に実装するカスタム属性を作成します。</span><span class="sxs-lookup"><span data-stu-id="f0199-137">Create a custom attribute that also implements <xref:System.ServiceModel.Description.IContractBehavior>.</span></span>  
  
 <span data-ttu-id="f0199-138">プログラムによって <xref:System.ServiceModel.Description.IContractBehavior> 型をクライアントまたはサービスアプリケーションに追加する方法の詳細については、「動作を使用した[ランタイムの構成と拡張](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f0199-138">For more information on programmatically adding <xref:System.ServiceModel.Description.IContractBehavior> types to either the client or service application, see [Configuring and Extending the Runtime with Behaviors](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f0199-139">次のコード例は、カスタムの <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 実装が "シングルトン" 動作を提供する `ObjectProviderBehavior` を呼び出したことを前提としています。これは、常に同じサービス インスタンスを返し、リサイクルはしません。</span><span class="sxs-lookup"><span data-stu-id="f0199-139">The following code example assumes a custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider> implementation called `ObjectProviderBehavior` that provides a "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 <span data-ttu-id="f0199-140">インスタンス プロバイダーのカスタマイズを挿入するために、例では、`SingletonBehaviorAttribute` を実装するカスタム属性 (<xref:System.ServiceModel.Description.IContractBehavior>) を実装してカスタム サービス インスタンス プロバイダーを挿入する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f0199-140">To insert the instance provider customization, the example shows how to implement a custom attribute (`SingletonBehaviorAttribute`) that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="f0199-141">また、<xref:System.ServiceModel.Description.IContractBehaviorAttribute> も実装します。これは、その使用を `ISampleService` コントラクトにバインドします。</span><span class="sxs-lookup"><span data-stu-id="f0199-141">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to the `ISampleService` contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iContractBehavior.AddBindingParameters (contractDescription, endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="contractDescription"><span data-ttu-id="f0199-142">変更するコントラクトの説明。</span><span class="sxs-lookup"><span data-stu-id="f0199-142">The contract description to modify.</span></span></param>
        <param name="endpoint"><span data-ttu-id="f0199-143">変更するエンドポイント。</span><span class="sxs-lookup"><span data-stu-id="f0199-143">The endpoint to modify.</span></span></param>
        <param name="bindingParameters"><span data-ttu-id="f0199-144">動作をサポートするためにバインド要素が要求するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f0199-144">The objects that binding elements require to support the behavior.</span></span></param>
        <summary><span data-ttu-id="f0199-145">任意のバインド要素を、コントラクトの動作をサポートするように構成します。</span><span class="sxs-lookup"><span data-stu-id="f0199-145">Configures any binding elements to support the contract behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0199-146">コントラクトの動作をサポートするために必要な追加のオブジェクトをバインディング要素に提供するには、<xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="f0199-146">Implement the <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> method to provide binding elements with the extra objects they require to support the contract behavior.</span></span>  
  
 <span data-ttu-id="f0199-147">このメソッドは、指定されたサービス コントラクトを使用するエンドポイントごとに 1 回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f0199-147">This method is called once for each endpoint that uses the specified service contract.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iContractBehavior.ApplyClientBehavior (contractDescription, endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription"><span data-ttu-id="f0199-148">拡張対象のコントラクトの説明。</span><span class="sxs-lookup"><span data-stu-id="f0199-148">The contract description for which the extension is intended.</span></span></param>
        <param name="endpoint"><span data-ttu-id="f0199-149">エンドポイント。</span><span class="sxs-lookup"><span data-stu-id="f0199-149">The endpoint.</span></span></param>
        <param name="clientRuntime"><span data-ttu-id="f0199-150">クライアント ランタイム。</span><span class="sxs-lookup"><span data-stu-id="f0199-150">The client runtime.</span></span></param>
        <summary><span data-ttu-id="f0199-151">コントラクト全体にわたってクライアントの変更または拡張を実装します。</span><span class="sxs-lookup"><span data-stu-id="f0199-151">Implements a modification or extension of the client across a contract.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0199-152">すべてのメッセージまたは特定の 1 つの操作について、クライアント ランタイムを表示または変更したり、クライアント ランタイムにカスタム拡張機能を追加したりするには、<xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="f0199-152">Implement the <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> method to view, modify, or add custom extensions to the client runtime across all messages or for one specific operation.</span></span> <span data-ttu-id="f0199-153">クライアントのランタイム オブジェクトで実行できるカスタマイズの詳細については、<xref:System.ServiceModel.Dispatcher.ClientRuntime> および <xref:System.ServiceModel.Dispatcher.ClientOperation> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f0199-153">For details about what customizations you can do with a client run-time object, see <xref:System.ServiceModel.Dispatcher.ClientRuntime> and <xref:System.ServiceModel.Dispatcher.ClientOperation>.</span></span>  
  
 <span data-ttu-id="f0199-154">動作をサービス アプリケーションでのみ使用する場合は、<xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> メソッドで <xref:System.NotImplementedException> 例外をスローさせることができます。</span><span class="sxs-lookup"><span data-stu-id="f0199-154">The <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> method can throw a <xref:System.NotImplementedException> exception if the behavior is only intended for use in a service application.</span></span>  
  
 <span data-ttu-id="f0199-155">このメソッドは、指定されたサービス コントラクトを使用するエンドポイントごとに 1 回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f0199-155">This method is called once for each endpoint that uses the specified service contract.</span></span>  
  
 <span data-ttu-id="f0199-156">説明 (各方向に 1 つずつ) では同じ名前の操作が 2 つ存在する場合がありますので注意してください。このため、双方向コントラクトで操作の反復が必要な場合は、エンドポイント <xref:System.ServiceModel.Dispatcher.ClientRuntime> と、<xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A> プロパティによって返されるエンドポイント間で、メッセージの方向を関連付ける必要があります。</span><span class="sxs-lookup"><span data-stu-id="f0199-156">Note that there can be two operations with the same name in the description (one in each direction), so if you must iterate through operations where the contract is a duplex contract, you must correlate the message direction between the endpoint <xref:System.ServiceModel.Dispatcher.ClientRuntime> and that returned by the <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A> property.</span></span>  
  
 <span data-ttu-id="f0199-157">既に他の動作によって一部の操作が追加されているか、ランタイムから削除されている可能性があるので、<xref:System.ServiceModel.Dispatcher.ClientOperation> プロパティにある <xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A> オブジェクトと同じ数の操作が説明に存在するという保証はありません。</span><span class="sxs-lookup"><span data-stu-id="f0199-157">Because other behaviors may have already added or removed some operations from the runtime, there is no guarantee that there are the same number of operations in the description as there are <xref:System.ServiceModel.Dispatcher.ClientOperation> objects in the <xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f0199-158">次のコード例は、カスタムの <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 実装が "シングルトン" 動作を提供する `ObjectProviderBehavior` を呼び出したことを前提としています。これは、常に同じサービス インスタンスを返し、リサイクルはしません。</span><span class="sxs-lookup"><span data-stu-id="f0199-158">The following code example assumes a custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider> implementation called `ObjectProviderBehavior` that provides a "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 <span data-ttu-id="f0199-159">インスタンス プロバイダーのカスタマイズを挿入するために、例では、`SingletonBehaviorAttribute` を実装するカスタム属性 (<xref:System.ServiceModel.Description.IContractBehavior>) を実装してカスタム サービス インスタンス プロバイダーを挿入する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f0199-159">To insert the instance provider customization, the example shows how to implement a custom attribute (`SingletonBehaviorAttribute`) that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="f0199-160">また、<xref:System.ServiceModel.Description.IContractBehaviorAttribute> も実装します。これは、その使用を `ISampleService` コントラクトにバインドします。</span><span class="sxs-lookup"><span data-stu-id="f0199-160">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to the `ISampleService` contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::DispatchRuntime ^ dispatchRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.DispatchRuntime -&gt; unit" Usage="iContractBehavior.ApplyDispatchBehavior (contractDescription, endpoint, dispatchRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="dispatchRuntime" Type="System.ServiceModel.Dispatcher.DispatchRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription"><span data-ttu-id="f0199-161">変更するコントラクトの説明。</span><span class="sxs-lookup"><span data-stu-id="f0199-161">The contract description to be modified.</span></span></param>
        <param name="endpoint"><span data-ttu-id="f0199-162">コントラクトを公開するエンドポイント。</span><span class="sxs-lookup"><span data-stu-id="f0199-162">The endpoint that exposes the contract.</span></span></param>
        <param name="dispatchRuntime"><span data-ttu-id="f0199-163">サービス実行を制御するディスパッチ ランタイム。</span><span class="sxs-lookup"><span data-stu-id="f0199-163">The dispatch runtime that controls service execution.</span></span></param>
        <summary><span data-ttu-id="f0199-164">コントラクト全体にわたってクライアントの変更または拡張を実装します。</span><span class="sxs-lookup"><span data-stu-id="f0199-164">Implements a modification or extension of the client across a contract.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0199-165">特定のコントラクト内のすべてのメッセージまたはそのコントラクト内の特定の 1 つの操作について、サービス ランタイムを表示または変更したり、サービス ランタイムにカスタム拡張機能を追加したりするには、<xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> を実装します。</span><span class="sxs-lookup"><span data-stu-id="f0199-165">Implement the <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> to view, modify, or add custom extensions to the service runtime across all messages in a specific contract or for one specific operation in that contract.</span></span> <span data-ttu-id="f0199-166">サービス アプリケーションで実行できるカスタマイズの詳細については、<xref:System.ServiceModel.Dispatcher.DispatchRuntime> および <xref:System.ServiceModel.Dispatcher.DispatchOperation> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f0199-166">For details about what customizations you can perform in a service application, see <xref:System.ServiceModel.Dispatcher.DispatchRuntime> and <xref:System.ServiceModel.Dispatcher.DispatchOperation>.</span></span>  
  
 <span data-ttu-id="f0199-167">動作をクライアント アプリケーションでのみ使用する場合は、<xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> メソッドによって <xref:System.NotImplementedException> 例外をスローすることができます。</span><span class="sxs-lookup"><span data-stu-id="f0199-167">The <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> method can throw a <xref:System.NotImplementedException> exception if the behavior is only intended for use in a client application.</span></span>  
  
 <span data-ttu-id="f0199-168">このメソッドは、指定されたサービス コントラクトを使用するエンドポイントごとに 1 回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f0199-168">This method is called once for each endpoint that uses the specified service contract.</span></span>  
  
 <span data-ttu-id="f0199-169">説明 (各方向に 1 つずつ) では同じ名前の操作が 2 つ存在する場合がありますので注意してください。このため、双方向コントラクトで操作の反復が必要な場合は、エンドポイント <xref:System.ServiceModel.Dispatcher.DispatchRuntime> と、<xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A> プロパティによって返されるエンドポイント間で、メッセージの方向を関連付ける必要があります。</span><span class="sxs-lookup"><span data-stu-id="f0199-169">Note that there can be two operations with the same name in the description (one in each direction), so if you must iterate through operations where the contract is a duplex contract, you must correlate the message direction between the endpoint <xref:System.ServiceModel.Dispatcher.DispatchRuntime> and that returned by the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A> property.</span></span>  
  
 <span data-ttu-id="f0199-170">また、既に他の動作によって一部の操作が追加されるか、ランタイムから削除されている可能性があるので、<xref:System.ServiceModel.Dispatcher.DispatchOperation> プロパティにある <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> オブジェクトと同じ数の操作が説明に存在するという保証はありません。</span><span class="sxs-lookup"><span data-stu-id="f0199-170">In addition, because other behaviors may have already added or removed some operations from the runtime, there is no guarantee that there are the same number of operations in description as there are <xref:System.ServiceModel.Dispatcher.DispatchOperation> objects in the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f0199-171">次のコード例は、カスタムの <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 実装が "シングルトン" 動作を提供する `ObjectProviderBehavior` を呼び出したことを前提としています。これは、常に同じサービス インスタンスを返し、リサイクルはしません。</span><span class="sxs-lookup"><span data-stu-id="f0199-171">The following code example assumes a custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider> implementation called `ObjectProviderBehavior` that provides a "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 <span data-ttu-id="f0199-172">インスタンス プロバイダーのカスタマイズを挿入するために、例では、`SingletonBehaviorAttribute` を実装するカスタム属性 (<xref:System.ServiceModel.Description.IContractBehavior>) を実装してカスタム サービス インスタンス プロバイダーを挿入する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f0199-172">To insert the instance provider customization, the example shows how to implement a custom attribute (`SingletonBehaviorAttribute`) that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="f0199-173">また、<xref:System.ServiceModel.Description.IContractBehaviorAttribute> も実装します。これは、その使用を `ISampleService` コントラクトにバインドします。</span><span class="sxs-lookup"><span data-stu-id="f0199-173">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to the `ISampleService` contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iContractBehavior.Validate (contractDescription, endpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="contractDescription"><span data-ttu-id="f0199-174">検証対象のコントラクト。</span><span class="sxs-lookup"><span data-stu-id="f0199-174">The contract to validate.</span></span></param>
        <param name="endpoint"><span data-ttu-id="f0199-175">検証対象のエンドポイント。</span><span class="sxs-lookup"><span data-stu-id="f0199-175">The endpoint to validate.</span></span></param>
        <summary><span data-ttu-id="f0199-176">コントラクトおよびエンドポイントがコントラクトの動作をサポートしていることを確認するために実装します。</span><span class="sxs-lookup"><span data-stu-id="f0199-176">Implement to confirm that the contract and endpoint can support the contract behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0199-177">コントラクトの説明がコントラクトのカスタム動作をサポートするための要件を満たしていることを確認するには、<xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="f0199-177">Implement the <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> method to confirm that the contract description is sufficient to support the custom contract behavior.</span></span> <span data-ttu-id="f0199-178">実装では、説明を検査して値をスローするかまたは値を返さないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="f0199-178">Implementations can inspect the description and either throw or return no value.</span></span>  
  
 <span data-ttu-id="f0199-179">このメソッドは、指定されたサービス コントラクトを使用するエンドポイントごとに 1 回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f0199-179">This method is called once for each endpoint that uses the specified service contract.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
