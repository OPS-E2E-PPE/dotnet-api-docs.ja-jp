<Type Name="IContractBehavior" FullName="System.ServiceModel.Description.IContractBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="486bd6b1f9a7dcc53c871dccf11df7892a4898a5" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75063891" /></Metadata><TypeSignature Language="C#" Value="public interface IContractBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContractBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IContractBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContractBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContractBehavior" />
  <TypeSignature Language="F#" Value="type IContractBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>サービスまたはクライアント アプリケーションでコントラクトのランタイム動作を拡張するために使用できるメソッドを実装します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントラクト全体にわたる実行の一部の側面を、アプリケーション レベルで変更、確認、または拡張するには、<xref:System.ServiceModel.Description.IContractBehavior> インターフェイスを実装します。 <xref:System.ServiceModel.Description.IServiceBehavior> オブジェクトは、<xref:System.ServiceModel.Description.IEndpointBehavior> オブジェクトおよび <xref:System.ServiceModel.Description.IContractBehavior> オブジェクトとは異なり、アプリケーション構成ファイルを使用してランタイムに追加することはできません。プログラムによって、または属性を使用することによってのみ追加できます。  
  
 サービス、エンドポイント、およびコントラクトの動作の選択の詳細については、「動作を使用した[ランタイムの構成と拡張](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)」を参照してください。  
  
-   <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> メソッドを使用して、動作をサポートするためのカスタム データをバインド要素に提供します。  
  
-   <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> メソッドを使用して、クライアント アプリケーションでコントラクトを変更または確認したり、コントラクトに拡張機能を挿入したりできます。  
  
-   <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> メソッドを使用して、サービス アプリケーションでコントラクトを変更または確認したり、コントラクトに拡張機能を挿入したりできます。  
  
-   <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> メソッドを使用して、コントラクトが特定の機能をサポートしていることを確認します。  
  
 <xref:System.ServiceModel.Description.IContractBehavior> オブジェクトは、これらのメソッドをどれでも使用できますが、通常は、重要なメソッドは 1 つだけです。この場合、使用されないメソッドは、値なしで戻ることができます。  
  
> [!NOTE]
>  すべての <xref:System.ServiceModel.Description.IContractBehavior> メソッドは <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> および <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> をパラメーターとして渡します。 これらのパラメーターは、検査に使用されます。これらのオブジェクトを変更した場合、実行の動作は未定義になります。  
  
 <xref:System.ServiceModel.Description.IContractBehavior> の種類は、サービスまたはクライアントのどちらか一方または両方で使用できます。 サービスでカスタマイズ タスクを実行するには、<xref:System.ServiceModel.Description.IContractBehavior> メソッドが <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> オブジェクトで呼び出されるときに行われるサービス ランタイムの構築の前に、<xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> オブジェクトを <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> プロパティに追加しておく必要があります。 これには、2 つの方法があります。  
  
 1 つは、<xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> メソッドが <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> オブジェクトで呼び出される前に、プログラムを使用して、<xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> プロパティにコントラクトのカスタム動作を追加する方法です。 この場合、動作は、エンドポイント上でそのコントラクトを使用して送信されるすべてのメッセージに適用されます。  
  
> [!NOTE]
>  動作は、同じ種類のすべてのコントラクトに適用されます。 たとえば、プログラムを使用して同じ種類のコントラクトを複数のエンドポイントに追加した場合、同じコントラクト オブジェクトを参照するすべてのエンドポイントで動作が変更されます。  
  
 もう 1 つは、<xref:System.ServiceModel.Description.IContractBehavior> を実装するカスタム属性を作成し、それを次のものに適用する方法です。  
  
-   コントラクト インターフェイス。 この場合、動作は任意のエンドポイント内の該当の型のすべてのコントラクトに適用されます。  
  
-   サービス クラス。  この場合、動作はコントラクトとは関係なくすべてのエンドポイントに適用されます。  
  
-   コールバック クラス。  この場合、動作は双方向クライアントのエンドポイントに適用されます。  
  
 カスタム属性が <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=nameWithType> を同時に実装している場合、2 番目の方法の動作は少し異なります。 この場合、動作は次のようになります。  
  
-   コントラクト インターフェイス。 この場合、動作は任意のエンドポイントでその型のすべてのコントラクトに適用され、Windows Communication Foundation (WCF) は <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> プロパティの値を無視します。  
  
-   サービス クラス。  この場合、動作はコントラクトが <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> プロパティの値であるエンドポイントにのみ適用されます。  
  
-   コールバック クラス。  この場合、動作は双方向クライアントのエンドポイントに適用され、WCF は <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> プロパティの値を無視します。  
  
 想定されているカスタマイズ タスクをクライアントで実行するには、<xref:System.ServiceModel.Description.IContractBehavior> が呼び出されるときに行われるクライアント ランタイムの構築の前に、<xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> オブジェクトを <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> プロパティに追加しておく必要があります。 これには、2 つの方法があります。  
  
-   <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> が呼び出される前に、プログラムを使用して、<xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> プロパティにコントラクトのカスタム動作を追加します。  
  
-   <xref:System.ServiceModel.Description.IContractBehavior> を同時に実装するカスタム属性を作成します。  
  
 プログラムによって <xref:System.ServiceModel.Description.IContractBehavior> 型をクライアントまたはサービスアプリケーションに追加する方法の詳細については、「動作を使用した[ランタイムの構成と拡張](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、カスタムの <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 実装が "シングルトン" 動作を提供する `ObjectProviderBehavior` を呼び出したことを前提としています。これは、常に同じサービス インスタンスを返し、リサイクルはしません。  
  
 インスタンス プロバイダーのカスタマイズを挿入するために、例では、`SingletonBehaviorAttribute` を実装するカスタム属性 (<xref:System.ServiceModel.Description.IContractBehavior>) を実装してカスタム サービス インスタンス プロバイダーを挿入する方法を示しています。 また、<xref:System.ServiceModel.Description.IContractBehaviorAttribute> も実装します。これは、その使用を `ISampleService` コントラクトにバインドします。  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iContractBehavior.AddBindingParameters (contractDescription, endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="contractDescription">変更するコントラクトの説明。</param>
        <param name="endpoint">変更するエンドポイント。</param>
        <param name="bindingParameters">動作をサポートするためにバインド要素が要求するオブジェクト。</param>
        <summary>任意のバインド要素を、コントラクトの動作をサポートするように構成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントラクトの動作をサポートするために必要な追加のオブジェクトをバインディング要素に提供するには、<xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> メソッドを実装します。  
  
 このメソッドは、指定されたサービス コントラクトを使用するエンドポイントごとに 1 回呼び出されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iContractBehavior.ApplyClientBehavior (contractDescription, endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">拡張対象のコントラクトの説明。</param>
        <param name="endpoint">エンドポイント。</param>
        <param name="clientRuntime">クライアント ランタイム。</param>
        <summary>コントラクト全体にわたってクライアントの変更または拡張を実装します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべてのメッセージまたは特定の 1 つの操作について、クライアント ランタイムを表示または変更したり、クライアント ランタイムにカスタム拡張機能を追加したりするには、<xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> メソッドを実装します。 クライアントのランタイム オブジェクトで実行できるカスタマイズの詳細については、<xref:System.ServiceModel.Dispatcher.ClientRuntime> および <xref:System.ServiceModel.Dispatcher.ClientOperation> を参照してください。  
  
 動作をサービス アプリケーションでのみ使用する場合は、<xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> メソッドで <xref:System.NotImplementedException> 例外をスローさせることができます。  
  
 このメソッドは、指定されたサービス コントラクトを使用するエンドポイントごとに 1 回呼び出されます。  
  
 説明 (各方向に 1 つずつ) では同じ名前の操作が 2 つ存在する場合がありますので注意してください。このため、双方向コントラクトで操作の反復が必要な場合は、エンドポイント <xref:System.ServiceModel.Dispatcher.ClientRuntime> と、<xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A> プロパティによって返されるエンドポイント間で、メッセージの方向を関連付ける必要があります。  
  
 既に他の動作によって一部の操作が追加されているか、ランタイムから削除されている可能性があるので、<xref:System.ServiceModel.Dispatcher.ClientOperation> プロパティにある <xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A> オブジェクトと同じ数の操作が説明に存在するという保証はありません。  
  
   
  
## Examples  
 次のコード例は、カスタムの <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 実装が "シングルトン" 動作を提供する `ObjectProviderBehavior` を呼び出したことを前提としています。これは、常に同じサービス インスタンスを返し、リサイクルはしません。  
  
 インスタンス プロバイダーのカスタマイズを挿入するために、例では、`SingletonBehaviorAttribute` を実装するカスタム属性 (<xref:System.ServiceModel.Description.IContractBehavior>) を実装してカスタム サービス インスタンス プロバイダーを挿入する方法を示しています。 また、<xref:System.ServiceModel.Description.IContractBehaviorAttribute> も実装します。これは、その使用を `ISampleService` コントラクトにバインドします。  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::DispatchRuntime ^ dispatchRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.DispatchRuntime -&gt; unit" Usage="iContractBehavior.ApplyDispatchBehavior (contractDescription, endpoint, dispatchRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="dispatchRuntime" Type="System.ServiceModel.Dispatcher.DispatchRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">変更するコントラクトの説明。</param>
        <param name="endpoint">コントラクトを公開するエンドポイント。</param>
        <param name="dispatchRuntime">サービス実行を制御するディスパッチ ランタイム。</param>
        <summary>コントラクト全体にわたってクライアントの変更または拡張を実装します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 特定のコントラクト内のすべてのメッセージまたはそのコントラクト内の特定の 1 つの操作について、サービス ランタイムを表示または変更したり、サービス ランタイムにカスタム拡張機能を追加したりするには、<xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> を実装します。 サービス アプリケーションで実行できるカスタマイズの詳細については、<xref:System.ServiceModel.Dispatcher.DispatchRuntime> および <xref:System.ServiceModel.Dispatcher.DispatchOperation> を参照してください。  
  
 動作をクライアント アプリケーションでのみ使用する場合は、<xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> メソッドによって <xref:System.NotImplementedException> 例外をスローすることができます。  
  
 このメソッドは、指定されたサービス コントラクトを使用するエンドポイントごとに 1 回呼び出されます。  
  
 説明 (各方向に 1 つずつ) では同じ名前の操作が 2 つ存在する場合がありますので注意してください。このため、双方向コントラクトで操作の反復が必要な場合は、エンドポイント <xref:System.ServiceModel.Dispatcher.DispatchRuntime> と、<xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A> プロパティによって返されるエンドポイント間で、メッセージの方向を関連付ける必要があります。  
  
 また、既に他の動作によって一部の操作が追加されるか、ランタイムから削除されている可能性があるので、<xref:System.ServiceModel.Dispatcher.DispatchOperation> プロパティにある <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> オブジェクトと同じ数の操作が説明に存在するという保証はありません。  
  
   
  
## Examples  
 次のコード例は、カスタムの <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 実装が "シングルトン" 動作を提供する `ObjectProviderBehavior` を呼び出したことを前提としています。これは、常に同じサービス インスタンスを返し、リサイクルはしません。  
  
 インスタンス プロバイダーのカスタマイズを挿入するために、例では、`SingletonBehaviorAttribute` を実装するカスタム属性 (<xref:System.ServiceModel.Description.IContractBehavior>) を実装してカスタム サービス インスタンス プロバイダーを挿入する方法を示しています。 また、<xref:System.ServiceModel.Description.IContractBehaviorAttribute> も実装します。これは、その使用を `ISampleService` コントラクトにバインドします。  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iContractBehavior.Validate (contractDescription, endpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="contractDescription">検証対象のコントラクト。</param>
        <param name="endpoint">検証対象のエンドポイント。</param>
        <summary>コントラクトおよびエンドポイントがコントラクトの動作をサポートしていることを確認するために実装します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントラクトの説明がコントラクトのカスタム動作をサポートするための要件を満たしていることを確認するには、<xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> メソッドを実装します。 実装では、説明を検査して値をスローするかまたは値を返さないようにすることができます。  
  
 このメソッドは、指定されたサービス コントラクトを使用するエンドポイントごとに 1 回呼び出されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
