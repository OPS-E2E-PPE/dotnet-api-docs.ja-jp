<Type Name="Grammar" FullName="System.Speech.Recognition.Grammar">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7a4b7084c6d3b8fe6d362ccab4dce262396a2a6c" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82332442" /></Metadata><TypeSignature Language="C#" Value="public class Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Grammar extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Grammar" />
  <TypeSignature Language="VB.NET" Value="Public Class Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class Grammar" />
  <TypeSignature Language="F#" Value="type Grammar = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Grammar: {(_uri != null ? "uri=" + _uri.ToString () + " " : "") + "rule=" + _ruleName }")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>アプリケーションが音声認識の制約を定義するために使用できる、音声認識の文法を参照するランタイム オブジェクト。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 音声認識文法は、音声認識エンジンが意味のある入力として認識できることを定義する一連の規則または制約です。 音声認識文法の作成と使用の詳細については、「[音声認識](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14))」と「 [SrgsGrammar を使用](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361680(v%3doffice.14))した文法の作成」を参照してください。  
  
 文法を作成したら、音声認識エンジンが読み込むことができる <xref:System.Speech.Recognition.Grammar> オブジェクトにビルドし、アプリケーションが実行時に音声認識を管理するために使用できるようにする必要があります。 <xref:System.Speech.Recognition.Grammar.%23ctor%2A> コンストラクターを使用して、<xref:System.Speech.Recognition.GrammarBuilder> または <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> オブジェクト、またはサポートされている形式で文法の説明を含むファイルまたは <xref:System.IO.Stream> から <xref:System.Speech.Recognition.Grammar> インスタンスを作成できます。 サポートされている形式は次のとおりです。  
  
-   W3C[音声認識文法仕様 (SRGS) バージョン 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)に準拠する XML フォーマットファイル  
  
-   拡張子が cfg のバイナリファイルにコンパイルされた文法  
  
 引数で XML 形式の文法ファイルを受け取る文法コンストラクターは、XML 文法をバイナリ形式にコンパイルして、音声認識エンジンによる読み込みと使用のために最適化します。 <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> メソッドのいずれかを使用して事前に文法をコンパイルすることで、XML 形式の文法から <xref:System.Speech.Recognition.Grammar> オブジェクトを構築するために必要な時間を短縮できます。  
  
 <xref:System.Speech.Recognition.SpeechRecognizer> または <xref:System.Speech.Recognition.SpeechRecognitionEngine> オブジェクトによって管理されるアプリケーションの音声認識エンジンは、複数の音声認識文法を読み込むことができます。 アプリケーションでは、<xref:System.Speech.Recognition.Grammar.Enabled%2A> プロパティを設定して個々の文法を個別に有効または無効にしたり、<xref:System.Speech.Recognition.Grammar.Priority%2A> や <xref:System.Speech.Recognition.Grammar.Weight%2A> プロパティなどの <xref:System.Speech.Recognition.Grammar> プロパティを使用して認識動作を変更したりできます。  
  
 文法の <xref:System.Speech.Recognition.Grammar.SpeechRecognized> イベントは、入力が文法を通じたパスに一致したときに発生します。  
  
> [!NOTE]
>  <xref:System.Speech.Recognition.Grammar> オブジェクトの構築に使用される URI または DLL の安全性を確認することをお勧めします。  
>   
>  Windows および Speech プラットフォームは、DLL またはスクリプトをサポートする文法から <xref:System.Speech.Recognition.Grammar> インスタンスを構築するアプリケーションのセキュリティを提供します。  
>   
>  <xref:System.Speech.Recognition.Grammar> オブジェクトのスクリプトは、`Internet Zone`内の web ページからダウンロードした場合と同じように実行されます。 共通言語ランタイム (CLR) は、読み込まれたすべての DLL を分離して、文法の定義を取得します。  
  
   
  
## Examples  
 次の例では、XML ファイル (都市 .xml) で定義されている音声認識文法から <xref:System.Speech.Recognition.Grammar> オブジェクトを構築します。 次の XML の例では、都市 .xml ファイルの内容が表示されます。  
  
```csharp  
// Load a cities grammar from a local file and return the grammar object.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.Grammar.%23ctor%2A> コンストラクターを使用して、<xref:System.Speech.Recognition.GrammarBuilder> または <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> オブジェクト、またはサポートされている形式で文法の説明を含むファイルまたは <xref:System.IO.Stream> から <xref:System.Speech.Recognition.Grammar> インスタンスを作成できます。 サポートされている形式は次のとおりです。  
  
-   W3C[音声認識文法仕様 (SRGS) バージョン 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)に準拠する XML フォーマットファイル  
  
-   拡張子が cfg のバイナリファイルにコンパイルされた文法  
  
 引数で XML 形式の文法ファイルを受け取る文法コンストラクターは、XML 文法をバイナリ形式にコンパイルして、音声認識エンジンによる読み込みと使用のために最適化します。 <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> メソッドのいずれかを使用して事前に文法をコンパイルすることで、XML 形式の文法から <xref:System.Speech.Recognition.Grammar> オブジェクトを構築するために必要な時間を短縮できます。  
  
 音声認識の文法では、ルート規則を定義できます。 ルート規則として使用する規則を指定する <xref:System.Speech.Recognition.Grammar> オブジェクトを作成するには、`ruleName` パラメーターを受け取るコンストラクターを使用します。  
  
 相対規則参照を解決するためのベース URI を指定する <xref:System.Speech.Recognition.Grammar> オブジェクトを作成するには、`baseUri` パラメーターを受け取るコンストラクターを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Grammar ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Grammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">サポートされている形式で音声認識の文法を記述するストリーム。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> から <see cref="T:System.IO.Stream" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、初期化ハンドラーにパラメーターを渡しません。また、説明では、引数を必要とする初期化ハンドラーを定義しないでください。  
  
 このコンストラクターは、次の形式から <xref:System.Speech.Recognition.Grammar> インスタンスを作成できます。  
  
-   W3C[音声認識文法仕様 (SRGS) バージョン 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)に準拠する XML フォーマットファイル  
  
-   拡張子が cfg のバイナリファイルにコンパイルされた文法  
  
 このコンストラクターは、XML 形式の文法ファイルをバイナリ形式にコンパイルして、音声認識エンジンによる読み込みと使用のために最適化します。 <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> メソッドのいずれかを使用して事前に文法をコンパイルすることで、XML 形式の文法から <xref:System.Speech.Recognition.Grammar> オブジェクトを構築するために必要な時間を短縮できます。  
  
 SRGS 文法では、ルートルールを定義できます。 ストリームから <xref:System.Speech.Recognition.Grammar> オブジェクトを作成し、ルート規則を指定するには、<xref:System.Speech.Recognition.Grammar.%23ctor%2A> または <xref:System.Speech.Recognition.Grammar.%23ctor%2A> コンストラクターを使用します。  
  
 ストリームから <xref:System.Speech.Recognition.Grammar> オブジェクトを作成し、相対規則参照を解決するために使用するベース URI を指定するには、<xref:System.Speech.Recognition.Grammar.%23ctor%2A> コンストラクターを使用します。  
  
   
  
## Examples  
 次の例では、ファイルストリームを使用して、ローカルの SRGS ファイル (都市 .xml) から音声認識文法を作成します。 次C#の例のように、都市 .xml ファイルの内容が表示されます。  
  
```csharp  
  
// Load a cities grammar from an I/O stream and    
// return the new grammar.   
private static Grammar CreateGrammarFromStream()  
{  
  string fileName = @"c:\temp\cities.xml";  
  Grammar citiesGrammar =  
    new Grammar(new FileStream(fileName, FileMode.Open));  
  citiesGrammar.Name = "Stream Cities Grammar";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="stream" /> は、ルート ルールを含まない文法を表します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException">ストリームに文法の有効な説明が含まれていないか、解決できない規則の参照を含む文法について説明しています。</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar builder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">音声認識文法の制約を格納している <see cref="T:System.Speech.Recognition.GrammarBuilder" /> のインスタンス。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトから <see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[    
  
## Examples  
 次の例では、<xref:System.Speech.Recognition.Choices> および <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトを使用して、音声認識の文法を作成します。 <xref:System.Speech.Recognition.Grammar.%23ctor%2A> コンストラクターは、<xref:System.Speech.Recognition.GrammarBuilder> オブジェクトから <xref:System.Speech.Recognition.Grammar> オブジェクトを作成します。  
  
```csharp
// Create a grammar using a GrammarBuilder and return the new grammar.   
private static Grammar CreateGrammarBuilderGrammar()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  
  Choices cityChoice = new Choices (new string[]   
  {"Seattle", "New York", "Miami", "Los Angeles"});  
  
  builder.Append("I would like to fly from");  
  builder.Append(cityChoice);  
  builder.Append("to");  
  builder.Append(cityChoice);  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "GrammarBuilder Cities Grammar";  
  
  return citiesGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (srgsDocument As SrgsDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar srgsDocument" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">音声認識文法の制約。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトから <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、初期化ハンドラーにパラメーターを渡さず、<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> に引数を必要とする初期化ハンドラーを含めることはできません。  
  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> には、ルート規則を設定できます。 ルート規則を指定する <xref:System.Speech.Recognition.Grammar> オブジェクトを作成するには、<xref:System.Speech.Recognition.Grammar.%23ctor%2A> または <xref:System.Speech.Recognition.Grammar.%23ctor%2A> コンストラクターを使用します。  
  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> から音声認識 <xref:System.Speech.Recognition.Grammar> を作成し、相対規則参照を解決するために使用するベース URI を指定するには、<xref:System.Speech.Recognition.Grammar.%23ctor%2A> コンストラクターを使用します。  
  
   
  
## Examples  
 次の例では、<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> インスタンスに音声認識文法を作成し、<xref:System.Speech.Recognition.Grammar> オブジェクトを構築するために使用します。  
  
```csharp  
private static Grammar CreateSrgsDocumentGrammar()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Cities rule and add it to the document.  
  SrgsRule citiesRule = new SrgsRule("Cities");  
  
  SrgsOneOf cityChoice = new SrgsOneOf();  
  cityChoice.Add(new SrgsItem("Seattle"));  
  cityChoice.Add(new SrgsItem("Los Angeles"));  
  cityChoice.Add(new SrgsItem("New York"));  
  cityChoice.Add(new SrgsItem("Miami"));  
  
  citiesRule.Add(cityChoice);  
  document.Rules.Add(citiesRule);  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("I would like to fly from");  
  item.Add(new SrgsRuleRef(citiesRule));  
  item.Add(new SrgsText("to"));  
  item.Add(new SrgsRuleRef(citiesRule));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the Grammar object.  
  Grammar citiesGrammar = new Grammar(document);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar";  
  
  return citiesGrammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="srgsDocument" /> にはルート ルールが含まれていません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsDocument" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException"><paramref name="srgsDocument" /> には、解決できないルール参照が含まれています。</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">サポートされている形式で音声認識文法を記述するファイルのパス。</param>
        <summary>ファイルから <see cref="T:System.Speech.Recognition.Grammar" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、初期化ハンドラーにパラメーターを渡しません。また、説明では、引数を必要とする初期化ハンドラーを定義しないでください。  
  
 このコンストラクターは、次の形式から <xref:System.Speech.Recognition.Grammar> インスタンスを作成できます。  
  
-   W3C[音声認識文法仕様 (SRGS) バージョン 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)に準拠する XML フォーマットファイル  
  
-   拡張子が cfg のバイナリファイルにコンパイルされた文法  
  
 このコンストラクターは、XML 形式の文法ファイルをバイナリ形式にコンパイルして、音声認識エンジンによる読み込みと使用のために最適化します。 <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> メソッドのいずれかを使用して事前に文法をコンパイルすることで、XML 形式の文法から <xref:System.Speech.Recognition.Grammar> オブジェクトを構築するために必要な時間を短縮できます。  
  
 SRGS 文法では、ルートルールを定義できます。 文字列から <xref:System.Speech.Recognition.Grammar> オブジェクトを作成し、ルート規則を指定するには、<xref:System.Speech.Recognition.Grammar.%23ctor%2A> コンストラクターを使用します。  
  
 相対規則参照を解決するために使用するベース URI を指定する <xref:System.Speech.Recognition.Grammar> オブジェクトを作成するには、ファイルストリームでファイルを開き、<xref:System.Speech.Recognition.Grammar.%23ctor%2A?displayProperty=nameWithType> コンストラクターを使用します。  
  
   
  
## Examples  
 次の例では、ローカルの SRGS ファイルから音声認識文法を読み込み、<xref:System.Speech.Recognition.Grammar> オブジェクトを構築します。 このC#例の後に示す xml の例では、都市 .xml ファイルの内容が表示されます。  
  
```csharp  
// Load a cities grammar from a local file and  
// return the new grammar.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> に空の文字列 ("") を含むか、ルート規則を含まない文法についてファイルで定義します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException">ファイルに有効な説明が含まれていないか、解決できない規則の参照を含む文法について説明しています。</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream, ruleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">サポートされている形式で音声認識の文法を記述するストリーム。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子。または、文法の説明の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> と指定したルート ルールから <see cref="T:System.IO.Stream" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、初期化ハンドラーにパラメーターを渡しません。また、説明では、引数を必要とする初期化ハンドラーを定義しないでください。  
  
 このコンストラクターは、次の形式から <xref:System.Speech.Recognition.Grammar> インスタンスを作成できます。  
  
-   W3C[音声認識文法仕様 (SRGS) バージョン 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)に準拠する XML フォーマットファイル  
  
-   拡張子が cfg のバイナリファイルにコンパイルされた文法  
  
 このコンストラクターは、XML 形式の文法ファイルをバイナリ形式にコンパイルして、音声認識エンジンによる読み込みと使用のために最適化します。 <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> メソッドのいずれかを使用して事前に文法をコンパイルすることで、XML 形式の文法から <xref:System.Speech.Recognition.Grammar> オブジェクトを構築するために必要な時間を短縮できます。  
  
 ストリームから <xref:System.Speech.Recognition.Grammar> を作成し、相対規則参照を解決するために使用するベース URI を指定するには、<xref:System.Speech.Recognition.Grammar.%23ctor%2A> コンストラクターを使用します。  
  
   
  
## Examples  
 次の例では、ファイルストリームからローカルの SRGS ファイル (都市 .xml) を読み込み、文法のルートとして使用する規則を指定します。 このC#例の後に示す xml の例では、都市 .xml ファイルの内容が表示されます。  
  
```csharp  
  
// Load a cities grammar from an I/O stream, use a specific  
// rule as the root of the grammar, and return the new grammar.   
private static Grammar CreateGrammarFromStream2()  
{  
  FileInfo file = new FileInfo(@"c:\temp\cities.xml");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), "Main");  
  citiesGrammar.Name = "Stream Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ruleName" /> は解決できないか、パブリックではないか、<paramref name="ruleName" /> が <see langword="null" /> で文法の説明がルート規則を定義していません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException">ストリームに有効な説明が含まれていないか、解決できない規則の参照を含む文法について説明しています。</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (srgsDocument As SrgsDocument, ruleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">音声認識文法の制約。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子、または <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトと指定したルート ルールから <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、初期化ハンドラーにパラメーターを渡さず、<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> に引数を必要とする初期化ハンドラーを含めることはできません。  
  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> から <xref:System.Speech.Recognition.Grammar> オブジェクトを作成し、相対ルール参照を解決するために使用するベース URI を指定するには、<xref:System.Speech.Recognition.Grammar.%23ctor%2A> コンストラクターを使用します。  
  
   
  
## Examples  
 次の例では、<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> インスタンスに音声認識文法を作成し、文法のルート規則として使用する規則を指定します。 この例では、<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> インスタンスから <xref:System.Speech.Recognition.Grammar> オブジェクトを構築し、音声認識エンジンに読み込みます。  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create the SrgsDocument.  
        SrgsDocument document = new SrgsDocument();  
  
        // Create the Cities rule and add it to the document.  
        SrgsRule citiesRule = new SrgsRule("Cities");  
        citiesRule.Scope = SrgsRuleScope.Public;  
  
        SrgsOneOf cityChoice = new SrgsOneOf();  
        cityChoice.Add(new SrgsItem("Seattle"));  
        cityChoice.Add(new SrgsItem("Los Angeles"));  
        cityChoice.Add(new SrgsItem("New York"));  
        cityChoice.Add(new SrgsItem("Miami"));  
  
        citiesRule.Add(cityChoice);  
        document.Rules.Add(citiesRule);  
  
        // Create the Main rule and add it to the document.  
        SrgsRule mainRule = new SrgsRule("Main");  
        mainRule.Scope = SrgsRuleScope.Public;  
  
        mainRule.Add(new SrgsItem("I would like to fly from"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
        mainRule.Add(new SrgsItem("to"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
  
        document.Rules.Add(mainRule);  
  
        // Create the Grammar object and specify which rule to use as the root.  
        Grammar citiesGrammar = new Grammar(document,"Main");  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(citiesGrammar);  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ruleName" /> は解決できないか、パブリックではないか、<paramref name="ruleName" /> が <see langword="null" /> で <paramref name="srgsDocument" /> にルート規則が含まれていません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsDocument" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException"><paramref name="srgsDocument" /> には、解決できないルール参照が含まれています。</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : string * string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (path, ruleName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">サポートされている形式で音声認識文法を記述するファイルのパス。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子。または、文法の説明の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <summary>ファイルから <see cref="T:System.Speech.Recognition.Grammar" /> クラスの新しいインスタンスを初期化し、ルート ルールを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、初期化ハンドラーにパラメーターを渡しません。また、説明では、引数を必要とする初期化ハンドラーを定義しないでください。  
  
 このコンストラクターは、次の形式から <xref:System.Speech.Recognition.Grammar> インスタンスを作成できます。  
  
-   W3C[音声認識文法仕様 (SRGS) バージョン 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)に準拠する XML フォーマットファイル  
  
-   拡張子が cfg のバイナリファイルにコンパイルされた文法  
  
 このコンストラクターは、XML 形式の文法ファイルをバイナリ形式にコンパイルして、音声認識エンジンによる読み込みと使用のために最適化します。 <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> メソッドのいずれかを使用して事前に文法をコンパイルすることで、XML 形式の文法から <xref:System.Speech.Recognition.Grammar> オブジェクトを構築するために必要な時間を短縮できます。  
  
 相対規則参照を解決するために使用するベース URI を指定する <xref:System.Speech.Recognition.Grammar> を作成するには、ファイルのファイルストリームを開き、<xref:System.Speech.Recognition.Grammar.%23ctor%2A> コンストラクターを使用します。  
  
   
  
## Examples  
 次の例では、ファイルからローカルの SRGS ファイル (都市 .xml) を読み込み、文法のルートとして使用する規則を指定します。 このC#例の後に示す xml の例では、都市 .xml ファイルの内容が表示されます。  
  
```csharp  
  
// Load a cities grammar from a local file, use a specific  
// rule as the root of the grammar, and return the new grammar.  
private static Grammar CreateGrammarFromFile2()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml", "Main");  
  citiesGrammar.Name = "SRGS File Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ruleName" /> は解決できないか、パブリックではないか、<paramref name="path" /> が空の文字列 ("") か、<paramref name="ruleName" /> が <see langword="null" /> で文法の説明がルート規則を定義していません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException">ファイルに有効な説明が含まれていないか、解決できない規則の参照を含む文法について説明しています。</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream, ruleName As String, parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream">文法の仕様を含む入出力オブジェクト (ファイル、VisualStudio リソース、DLL など) に接続された <see cref="T:System.IO.Stream" />。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子。または、文法の説明の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <param name="parameters">エントリ ポイントの <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> プロパティによって指定された初期化ハンドラーに渡されるパラメーター、または作成する <see cref="T:System.Speech.Recognition.Grammar" /> のルート ルール。 このパラメーターは null でもかまいません。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> と指定したルート ルールから <see cref="T:System.IO.Stream" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初期化ハンドラーのパラメーターを指定することもできます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="stream" /> は、次のような文法に接続されています。 
-   <paramref name="ruleName" /> に指定された規則を含みません。  
  
-   <paramref name="parameters" /> で指定されたパラメーターと異なる初期化パラメーターが必要です。  
  
-   文法の既定のベース <see cref="T:System.Uri" /> ルールでは解決できない相対的なルール参照が含まれます。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream, ruleName As String, baseUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string * Uri -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName, baseUri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="stream">サポートされている形式で音声認識の文法を記述するストリーム。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子。または、文法の説明の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <param name="baseUri">文法の説明で相対的なルール参照を解決するために使用するベース URI または <see langword="null" />。</param>
        <summary>ストリームから <see cref="T:System.Speech.Recognition.Grammar" /> クラスの新しいインスタンスを初期化し、ルート規則を指定して、相対的な規則の参照を解決するためのベース URI (Uniform Resource Identifier) を定義します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、初期化ハンドラーにパラメーターを渡しません。また、説明では、引数を必要とする初期化ハンドラーを定義しないでください。  
  
 このコンストラクターは、次の形式から <xref:System.Speech.Recognition.Grammar> インスタンスを作成できます。  
  
-   W3C[音声認識文法仕様 (SRGS) バージョン 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)に準拠する XML フォーマットファイル  
  
-   拡張子が cfg のバイナリファイルにコンパイルされた文法  
  
 このコンストラクターは、XML 形式の文法ファイルをバイナリ形式にコンパイルして、音声認識エンジンによる読み込みと使用のために最適化します。 <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> メソッドのいずれかを使用して事前に文法をコンパイルすることで、XML 形式の文法から <xref:System.Speech.Recognition.Grammar> オブジェクトを構築するために必要な時間を短縮できます。  
  
 このコンストラクターは `baseUri`を検証しません。 ただし、<xref:System.Speech.Recognition.SpeechRecognitionEngine> または <xref:System.Speech.Recognition.SpeechRecognizer> オブジェクトの `LoadGrammar` メソッドは、文法の説明に含まれるすべての規則の参照を解決できない場合、例外をスローします。 `baseUri` が `null`されていない場合、`LoadGrammar` メソッドは URI を使用して、解決できない規則の参照を解決します。 `baseUri` がファイルを表している場合、`LoadGrammar` は、相対ルール参照を解決しようとするときに、指定されたファイルとファイルのディレクトリの両方を使用します。  
  
   
  
## Examples  
 次の例では、ファイルストリームからローカルの SRGS ファイル (シャトル .xml) を読み込みます。 このファイルには、都市 .xml ファイル内のルールに対する相対的なルール参照が含まれています。また、ルール参照を解決するために使用するベース URI を指定します。 このC#例に続く xml の例では、シャトル .xml ファイルと都市 .xml ファイルの内容が示されています。  
  
```csharp  
  
private static Grammar CreateGrammarFromStream3()  
{  
  FileInfo file = new FileInfo(@".\shuttle.xml");  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), null, baseUri);  
  citiesGrammar.Name = "Stream Cities Grammar 3";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- shuttle.xml:   
    Defines an SRGS grammar for asking about a shuttle service. This grammar  
    references a Cities rule that is defined in the cities.xml grammar. -->  
  
  <rule id="Main">  
    <item>  
      Can I get a shuttle in  
      <ruleref uri="cities.xml#Cities"/>  
    </item>  
  </rule>  
</grammar>  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ruleName" /> は解決できないか、パブリックではないか、<paramref name="ruleName" /> が <see langword="null" /> で文法の説明がルート規則を定義していません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException">ストリームに有効な説明が含まれていないか、解決できない規則の参照を含む文法について説明しています。</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (srgsDocument As SrgsDocument, ruleName As String, parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">音声認識文法の制約を格納している <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> のインスタンス。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子。または、文法の説明の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <param name="parameters">エントリ ポイントの <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> プロパティによって指定された初期化ハンドラーに渡されるパラメーター、または作成する <see cref="T:System.Speech.Recognition.Grammar" /> のルート ルール。 このパラメーターは null でもかまいません。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> のインスタンスから <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> クラスの新しいインスタンスを初期化し、文法へのエントリ ポイントである規則の名前を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初期化ハンドラーのパラメーターを指定することもできます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   いずれかのパラメーターに無効な値が含まれています。  
  
-   <paramref name="srgsDocument" /> で指定された <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> は、<paramref name="ruleName" /> が指定した規則を含みません。  
  
-   配置パラメーターの内容が、ルールのいずれの初期化ハンドラーの引数とも一致しません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (srgsDocument As SrgsDocument, ruleName As String, baseUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string * Uri -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName, baseUri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">音声認識文法の制約。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子、または <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <param name="baseUri"><see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> で相対的なルール参照を解決するために使用するベース URI または <see langword="null" />。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトから <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> クラスの新しいインスタンスを初期化します。ルート規則を指定し、相対的な規則の参照を解決するためにベース URI (Uniform Resource Identifier) を定義します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、初期化ハンドラーにパラメーターを渡さず、<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> に引数を必要とする初期化ハンドラーを含めることはできません。  
  
 このコンストラクターは `baseUri`を検証しません。 ただし、<xref:System.Speech.Recognition.SpeechRecognitionEngine> または <xref:System.Speech.Recognition.SpeechRecognizer> オブジェクトの `LoadGrammar` メソッドは、文法の説明に含まれるすべての規則の参照を解決できない場合、例外をスローします。 `baseUri` が `null`されていない場合、`LoadGrammar` メソッドは URI を使用して、解決できない規則の参照を解決します。 `baseUri` がファイルを表している場合、`LoadGrammar` メソッドは、相対ルール参照を解決しようとするときに、指定されたファイルとファイルのディレクトリの両方を使用します。  
  
   
  
## Examples  
 次の例では、都市 .xml ファイルへの相対ルール参照を含む <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> で音声認識文法を作成し、ルール参照を解決するために使用する URI を指定します。 このC#例の後に示す xml の例では、都市 .xml ファイルの内容が表示されます。  
  
```csharp  
  
private static Grammar CreateSrgsDocumentGrammar3()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("Can I get a shuttle in");  
  
  // Create a relative URI for the cities rule.  
  Uri ruleUri = new Uri("cities.xml#Cities", UriKind.Relative);  
  
  item.Add(new SrgsRuleRef(ruleUri));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the grammar.  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(document, null, baseUri);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar 3";  
  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ruleName" /> は解決できないか、パブリックではないか、<paramref name="ruleName" /> が <see langword="null" /> で <paramref name="srgsDocument" /> にルート規則が含まれていません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsDocument" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException"><paramref name="srgsDocument" /> には、解決できないルール参照が含まれています。</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String, parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : string * string * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (path, ruleName, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="path">文法仕様を含むファイル (DLL を含む) のパス。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子。または、文法の説明の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <param name="parameters">エントリ ポイントの <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> プロパティによって指定された初期化ハンドラーに渡されるパラメーター、または作成する <see cref="T:System.Speech.Recognition.Grammar" /> のルート ルール。 このパラメーターは null でもかまいません。</param>
        <summary>文法定義を含むファイルから <see cref="T:System.Speech.Recognition.Grammar" /> クラスの新しいインスタンスを初期化し、文法へのエントリ ポイントであるルールの名前を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初期化ハンドラーのパラメーターを指定することもできます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   いずれかのパラメーターに無効な値が含まれています。  
  
-   <paramref name="path" /> で指定されたファイルには、<paramref name="ruleName" /> で指定されている有効な文法または規則が含まれていません。  
  
-   配置パラメーターの内容が、ルールのいずれの初期化ハンドラーの引数とも一致しません。  
  
-   文法には、文法の既定のベース <see cref="T:System.Uri" /> ルールでは解決できない相対的なルール参照があります。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream, ruleName As String, baseUri As Uri, parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string * Uri * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName, baseUri, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream">文法の仕様を含む入出力オブジェクト (ファイル、VisualStudio リソース、DLL など) に接続された <see cref="T:System.IO.Stream" />。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子。または、文法の説明の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <param name="baseUri">文法の説明で相対的なルール参照を解決するために使用するベース URI または <see langword="null" />。</param>
        <param name="parameters">エントリ ポイントの <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> プロパティによって指定された初期化ハンドラーに渡されるパラメーター、または作成する <see cref="T:System.Speech.Recognition.Grammar" /> のルート ルール。 このパラメーターは null でもかまいません。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> クラスの新しいインスタンス <see cref="T:System.IO.Stream" /> を初期化し、ルート規則および相対参照を解決するためのベース URI を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初期化ハンドラーのパラメーターを指定することもできます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   いずれかのパラメーターに無効な値が含まれています。  
  
-   <paramref name="stream" /> は、 <paramref name="ruleName" /> で指定されている規則を含まない文法に接続されています。  
  
-   配置パラメーターの内容が、ルールのいずれの初期化ハンドラーの引数とも一致しません。  
  
-   文法には、文法の既定のベース <see cref="T:System.Uri" /> ルールまたは <paramref name="baseUri" /> によって提供された URI では解決できない相対的なルール参照が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (srgsDocument As SrgsDocument, ruleName As String, baseUri As Uri, parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string * Uri * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName, baseUri, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">音声認識文法の制約を格納している <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> のインスタンス。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子。または、文法の説明の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <param name="baseUri">文法の説明で相対的なルール参照を解決するために使用するベース URI または <see langword="null" />。</param>
        <param name="parameters">エントリ ポイントの <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> プロパティによって指定された初期化ハンドラーに渡されるパラメーター、または作成する <see cref="T:System.Speech.Recognition.Grammar" /> のルート ルール。 このパラメーターは null でもかまいません。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> のインスタンスから <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> クラスの新しいインスタンスを初期化し、文法へのエントリ ポイントである規則の名前と、相対参照を解決するためのベース URI を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初期化ハンドラーのパラメーターを指定することもできます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   いずれかのパラメーターに無効な値が含まれています。  
  
-   <paramref name="srgsDocument" /> で指定された <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> は、<paramref name="ruleName" /> が指定した規則を含みません。  
  
-   配置パラメーターの内容が、ルールのいずれの初期化ハンドラーの引数とも一致しません。  
  
-   文法には、文法の既定のベース <see cref="T:System.Uri" /> ルールまたは <paramref name="baseUri" /> によって提供された URI では解決できない相対的なルール参照があります。</exception>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Speech.Recognition.Grammar.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>音声認識エンジンが <see cref="T:System.Speech.Recognition.Grammar" /> を使用して認識を実行できるかどうかを制御する値を取得または設定します。</summary>
        <value><see langword="Enabled" /> プロパティは、音声認識エンジンが音声認識文法を使用して認識を実行している場合は <see langword="true" /> を、それ以外の場合は <see langword="false" /> を返します。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.Grammar> のインスタンスは、音声認識エンジンによって読み込まれたものとは無関係に有効または無効にすることができます。  
  
   
  
## Examples  
 次の例では、<xref:System.Speech.Recognition.Grammar> オブジェクトに関する情報を[コンソール](https://go.microsoft.com/fwlink/?LinkId=159613)に書き込みます。  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName="IsStg">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsStg { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStg" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.IsStg" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property IsStg As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool IsStg { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStg : bool" Usage="System.Speech.Recognition.Grammar.IsStg" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>文法が厳密に型指定されているかどうかを取得します。</summary>
        <value><see langword="IsStg" /> プロパティは、厳密に型指定された場合には <see langword="true" /> を返し、それ以外の場合は <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 厳密に型指定された <xref:System.Speech.Recognition.Grammar> オブジェクト (`IsStg` 等号 `true`) は、厳密に型指定された結果 (未加工テキストではなくオブジェクト) をクライアントアプリケーションに返すことができます。 たとえば、厳密に型指定された文法では、生の認識された入力ではなく <xref:System.DateTime> オブジェクトが返される場合があります。  
  
 文法の規則にコードをアタッチすることにより、厳密に型指定された文法を実装できます。 認識エンジンは、現在の部分的な結果を入力として取得して、特定の規則を処理するときに、関連付けられたコードが実行され、テキスト情報がリッチ型オブジェクトになります。 これにより、クライアントは、強化されたセマンティックチェック、複数のカルチャのサポート、および内部文法ロジックをより簡単に使用できるようになります。  
  
 厳密に型指定された <xref:System.Speech.Recognition.Grammar> オブジェクトのインスタンスは、通常、アセンブリ内のリソースから共通言語ランタイム (CLR) の <xref:System.Type> として取得されます。 さまざまな言語をサポートするために使用されるローカライズされた型は、そのような <xref:System.Speech.Recognition.Grammar> オブジェクトの例です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="T:System.Speech.Recognition.Grammar" /> から継承する厳密に型指定された文法は、<see langword="IsStg" />の既定の動作をオーバーライドする必要があります。これは <see langword="false" />を返します。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public bool Loaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Loaded" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Loaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Loaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Loaded : bool" Usage="System.Speech.Recognition.Grammar.Loaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> が音声認識エンジンによって読み込まれたかどうかを取得します。</summary>
        <value><see langword="Loaded" /> プロパティは、参照されている音声認識文法が音声認識エンジンに現在読み込まれている場合は <see langword="true" /> を、それ以外の場合は <see langword="false" /> を返します。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.Grammar> が読み込まれると、<xref:System.Speech.Recognition.Grammar.Weight%2A>の値と <xref:System.Speech.Recognition.Grammar.Priority%2A> を変更することはできません。  
  
   
  
## Examples  
 次の例では、<xref:System.Speech.Recognition.Grammar> オブジェクトに関する情報を[コンソール](https://go.microsoft.com/fwlink/?LinkId=159613)に書き込みます。  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="LoadLocalizedGrammarFromType">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType (Type type, params object[] onInitParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType(class System.Type type, object[] onInitParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(System.Type,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadLocalizedGrammarFromType (type As Type, ParamArray onInitParameters As Object()) As Grammar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::Grammar ^ LoadLocalizedGrammarFromType(Type ^ type, ... cli::array &lt;System::Object ^&gt; ^ onInitParameters);" />
      <MemberSignature Language="F#" Value="static member LoadLocalizedGrammarFromType : Type * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType (type, onInitParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="onInitParameters" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">アセンブリでは、<see cref="T:System.Type" /> に基づくオブジェクトの <see cref="T:System.Speech.Recognition.Grammar" /> です。</param>
        <param name="onInitParameters"><see cref="T:System.Speech.Recognition.Grammar" /> に基づいて localizedobject の初期化メソッドに渡すパラメーター。 このパラメーターは null でもかまいません。</param>
        <summary><see langword="LoadLocalizedGrammarFromType" /> メソッドは、<see cref="T:System.Speech.Recognition.Grammar" /> から派生する <see cref="T:System.Type" /> オブジェクトのローカライズ インスタンスを返します。</summary>
        <returns><see langword="LoadLocalizedGrammarFromType" /> メソッドは、<see cref="T:System.Speech.Recognition.Grammar" /> に基づいて有効なオブジェクトを返します。エラーがある場合は <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LoadLocalizedGrammarFromType` で取得したローカライズされた文法は、通常、厳密に型指定されています (厳密に型指定された文法の詳細については、<xref:System.Speech.Recognition.Grammar.IsStg%2A> を参照) `onInitParameters` が null 参照 (Visual Basic では Nothing) である場合、ローカライズされた文法には初期化メソッドがないか、引数を受け取らないメソッドが含まれている必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Speech.Recognition.Grammar.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトの名前を取得または設定します。</summary>
        <value><see langword="Name" /> プロパティは、<see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトの名前を返します。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、2つの <xref:System.Speech.Recognition.Grammar> オブジェクトを作成します。1つは数字、もう1つは分数です。 文法オブジェクトには、名前と相対的な重みと優先度が割り当てられ、インプロセス音声認識エンジンによって読み込まれます。 ここでは、`CreateDigitsGrammar`、`CreateFractionsGrammar`、および `recognizer_SpeechRecognized` の各メソッドについては説明していません。  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Priority { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : int with get, set" Usage="System.Speech.Recognition.Grammar.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトの優先順位の値を取得または設定します。</summary>
        <value><see langword="Priority" /> プロパティは、特定の <see cref="T:System.Speech.Recognition.Grammar" /> の相対的優先順位を表す整数値を返します。 範囲は -128 ～ 127 です。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複数の文法で同じ認識結果が生成される場合は、`Priority` プロパティを使用して文法を選択します。 音声認識エンジンに複数の音声認識文法が読み込まれ、入力に一致するものがある場合、その一致が認識エンジンによって最適な結果となります。そのため、認識エンジンでは、`Priority`が最も高い文法が使用されます。 同じ認識結果を生成する文法も同じ `Priority` 値を持つ場合、レコグナイザーが使用する文法は未定義です。  
  
   
  
## Examples  
 次の例では、2つの <xref:System.Speech.Recognition.Grammar> オブジェクトを作成します。1つは数字、もう1つは分数です。 <xref:System.Speech.Recognition.Grammar> オブジェクトには、名前と相対的な重みと優先度が割り当てられ、インプロセス音声認識エンジンによって読み込まれます。 ここでは、`CreateDigitsGrammar`、`CreateFractionsGrammar`、および `recognizer_SpeechRecognized` の各メソッドについては説明していません。  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Weight" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="ResourceName">
      <MemberSignature Language="C#" Value="protected string ResourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.ResourceName" />
      <MemberSignature Language="VB.NET" Value="Protected Property ResourceName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ ResourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ResourceName : string with get, set" Usage="System.Speech.Recognition.Grammar.ResourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Speech.Recognition.Grammar" /> を読み込むために使用されたバイナリ リソースの名前を示す値を取得または設定します。</summary>
        <value><see langword="ResourceName" /> プロパティは <see cref="T:System.Speech.Recognition.Grammar" /> で使用される厳密に型指定された文法が読み込まれたバイナリ リソースの名前を返します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuleName">
      <MemberSignature Language="C#" Value="public string RuleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RuleName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.RuleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RuleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RuleName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RuleName : string" Usage="System.Speech.Recognition.Grammar.RuleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトのルート規則またはエントリ ポイントの名前を取得します。</summary>
        <value><see langword="RuleName" /> プロパティは、参照先音声認識文法のルート規則の ID を返します。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.Grammar> オブジェクトを構築し、そのルートルールの名前を設定するには、`ruleName` パラメーターを受け取る <xref:System.Speech.Recognition.Grammar.%23ctor%2A> コンストラクターのいずれかを使用します。  
  
 <xref:System.Speech.Recognition.Grammar> のルートルールに名前がない場合、プロパティは `null`を返します。  
  
 <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトから構築された <xref:System.Speech.Recognition.Grammar> インスタンスのルート規則には、通常名前が付いていないため、<xref:System.Speech.Recognition.Grammar.RuleName%2A> は `null`を返します。  
  
   
  
## Examples  
 次の例では、<xref:System.Speech.Recognition.Grammar> オブジェクトに関する情報を[コンソール](https://go.microsoft.com/fwlink/?LinkId=159613)に書き込みます。  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognized : EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " Usage="member this.SpeechRecognized : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>音声認識エンジンが <see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトを使用して認識を実行するときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 また、音声認識エンジンは、入力を認識すると `SpeechRecognized` イベントを発生させます。 <xref:System.Speech.Recognition.Grammar> オブジェクトの <xref:System.Speech.Recognition.Grammar.SpeechRecognized> イベントは、音声認識エンジンの `SpeechRecognized` イベントの前に発生します。 詳細については、「<xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> イベント」を参照してください。  
  
 特定の文法に固有のタスクは、常に、<xref:System.Speech.Recognition.Grammar> オブジェクトの <xref:System.Speech.Recognition.Grammar.SpeechRecognized> イベントのハンドラーによって処理される必要があります。  
  
   
  
## Examples  
 次の例は、<xref:System.Speech.Recognition.Grammar> オブジェクトの <xref:System.Speech.Recognition.Grammar.SpeechRecognized> イベントに対してイベントハンドラーを使用する方法を示しています。 認識結果を[コンソール](https://go.microsoft.com/fwlink/?LinkId=159613)に出力します。  
  
```csharp  
public partial class Form1 : Form  
{  
  SpeechRecognitionEngine sre;  
  
  public Form1()  
  {  
  InitializeComponent();  
  
  // Create an in-process speech recognizer.  
  sre = new SpeechRecognitionEngine();  
  
  // Configure input to the speech recognizer.  
  sre.SetInputToDefaultAudioDevice();  
  
  // Create a simple grammar and load it.  
  Grammar testGrammar = new Grammar(new GrammarBuilder("testing"));  
  sre.LoadGrammarAsync(testGrammar);  
  
  // Add a handler for the grammar's speech recognized event.  
  testGrammar.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(testGrammar_SpeechRecognized);  
  
  // Start asynchronous speech recognition.  
  sre.RecognizeAsync();  
  }  
  
  // Handle the grammar's SpeechRecognized event, output the recognized text.  
  void testGrammar_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
  {  
    Console.WriteLine("Recognized text: " + e.Result.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="StgInit">
      <MemberSignature Language="C#" Value="protected void StgInit (object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void StgInit(object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.StgInit(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub StgInit (parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void StgInit(cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.StgInit : obj[] -&gt; unit" Usage="grammar.StgInit parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="parameters">厳密に型指定された文法を初期化するために渡すパラメーター。 このパラメーターは null でもかまいません。</param>
        <summary><see langword="StgInit" /> メソッドは、厳密に型指定された文法を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 厳密に型指定された <xref:System.Speech.Recognition.Grammar> オブジェクト (`IsStg` 等号 `true`) は、厳密に型指定された結果 (未加工テキストではなくオブジェクト) をクライアントアプリケーションに返すことができます。 たとえば、厳密に型指定された文法では、生の認識された入力ではなく <xref:System.DateTime> オブジェクトが返される場合があります。  
  
 文法の規則にコードをアタッチすることにより、厳密に型指定された文法を実装できます。 認識エンジンは、現在の部分的な結果を入力として取得して、特定の規則を処理するときに、関連付けられたコードが実行され、テキスト情報がリッチ型オブジェクトになります。 これにより、クライアントは、強化されたセマンティックチェック、複数のカルチャのサポート、および内部文法ロジックをより簡単に使用できるようになります。  
  
 厳密に型指定された <xref:System.Speech.Recognition.Grammar> オブジェクトのインスタンスは、通常、アセンブリ内のリソースから共通言語ランタイム (CLR) の <xref:System.Type> として取得されます。 さまざまな言語をサポートするために使用されるローカライズされた型は、そのような <xref:System.Speech.Recognition.Grammar> オブジェクトの例です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>厳密に型指定された文法で初期化が必要な場合は、コンストラクターまたは初期化メソッドで <see langword="StgInit" /> を呼び出す必要があります。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Weight">
      <MemberSignature Language="C#" Value="public float Weight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Weight" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Weight" />
      <MemberSignature Language="VB.NET" Value="Public Property Weight As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Weight { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.Weight : single with get, set" Usage="System.Speech.Recognition.Grammar.Weight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトの重さの値を取得または設定します。</summary>
        <value><see langword="Weight" /> プロパティは浮動小数点値を返し、認識エンジンのインスタンスが音声入力を処理するときに文法に割り当てる相対的な重みを示します。 範囲は 0.0 ~ 1.0 です。 既定値は1.0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 認識エンジンによる**重み**の使用は複雑であるため、特定の文法のパフォーマンスに与える影響は、<xref:System.Speech.Recognition.Grammar.Priority%2A>の場合とは直接的に予測できません。  
  
 音声認識は重み付けされたシステムです。 文法の重み、文法内の代替手段として定義されている重み、および音声モデルによって定義される確率の組み合わせに基づいて、すべての認識パスを評価します。 音声認識エンジンは、これらの重みと確率の組み合わせを使用して、潜在的な代替認識をランク付けします。 重みが高い文法は、重みの低い文法よりも認識の順位付けに寄与します。  
  
 音声認識エンジンの <xref:System.Speech.Recognition.Grammar.Weight%2A> プロパティの効果は、レコグナイザーの実装によって異なります。 <xref:System.Speech.Recognition.Grammar.Weight%2A> プロパティは、アプリケーションの音声認識の精度を調整するために使用できますが、特定の認識環境の診断スタディを制御した後で使用する必要があります。また、認識エンジンに関するすべての情報を使用します。  
  
   
  
## Examples  
 次の例では、2つの <xref:System.Speech.Recognition.Grammar> オブジェクトを作成します。1つは数字、もう1つは分数です。 <xref:System.Speech.Recognition.Grammar> オブジェクトには、名前と相対的な重みと優先度が割り当てられ、インプロセス音声認識エンジンによって読み込まれます。 ここでは、`CreateDigitsGrammar`、`CreateFractionsGrammar`、および `recognizer_SpeechRecognized` の各メソッドについては説明していません。  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Priority" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
  </Members>
</Type>
