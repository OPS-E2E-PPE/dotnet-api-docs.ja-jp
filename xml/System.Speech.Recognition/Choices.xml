<Type Name="Choices" FullName="System.Speech.Recognition.Choices">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dbcafc0a21ebb56737d5d4b15d093404d15e80dd" /><Meta Name="ms.sourcegitcommit" Value="8dc7427b3f8ede13c290b671feeb1dc33978e582" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/06/2020" /><Meta Name="ms.locfileid" Value="77044210" /></Metadata><TypeSignature Language="C#" Value="public class Choices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Choices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Choices" />
  <TypeSignature Language="VB.NET" Value="Public Class Choices" />
  <TypeSignature Language="C++ CLI" Value="public ref class Choices" />
  <TypeSignature Language="F#" Value="type Choices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_oneOf.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>音声認識文法の制約内の代替のセットを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.Choices> オブジェクトは、複数の値のいずれかを持つことができる語句のコンポーネントを表します。 このクラスは、<xref:System.Speech.Recognition.GrammarBuilder> オブジェクトから音声認識文法を作成する場合に使用します。  
  
 たとえば、<xref:System.Speech.Recognition.Choices> オブジェクトは、"色を*colorchoice*に変更する" という語句のコンポーネント*colorchoice*を表すことができます。この場合、 *colorchoice*に使用できる値は "red"、"green"、または "blue" です。  
  
> [!NOTE]
>  <xref:System.Speech.Recognition.Choices> オブジェクトを句でオプションのコンポーネントとして使用するには、<xref:System.Speech.Recognition.Choices> オブジェクトを作成し、`maxRepeat` `minRepeat` を使用して <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> オブジェクトに追加し、それぞれ0と1に設定します。 オプションのコンポーネントを含むフレーズは、オプションのコンポーネントが話されているかどうかを認識できます。  
  
 <xref:System.Speech.Recognition.Choices> クラスは、[音声認識文法仕様 (SRGS) バージョン 1.0](https://www.w3.org/TR/speech-grammar/)で定義されている `one-of` XML 要素と同じ機能を提供し、<xref:System.Speech.Recognition.SrgsGrammar> 名前空間の <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> クラスに似ています。  
  
 音声認識の文法を定義する方法の詳細については、「[音声認識](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14))」を参照してください。  
  
   
  
## Examples  
 次の例では、"背景を*Colorchoice*に設定する" という語句の音声認識文法を作成します。ここで、 *colorchoice*は定義された色のいずれかになります。 <xref:System.Speech.Recognition.GrammarBuilder> は、文法の制約を定義するために使用されます。  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  colorChoice.Add(new string[] {"cyan", "yellow", "magenta"});  
  
  // Construct the phrase.  
  GrammarBuilder builder = new GrammarBuilder("Set background to");  
  builder.Append(colorChoice);  
  
  // Create a grammar for the phrase.  
  Grammar colorGrammar = new Grammar(builder);  
  colorGrammar.Name = "SetBackground";  
  
  return colorGrammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様 (SRGS)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.Choices" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.Choices> オブジェクトを構築するには、パラメーターなしのコンストラクター (空のオブジェクトを返す)、<xref:System.String> オブジェクトのグループから、または <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトのセットからを使用します。  
  
 <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトは <xref:System.Speech.Recognition.SemanticResultValue> と <xref:System.Speech.Recognition.SemanticResultKey>からの暗黙的な変換をサポートしているため、キャストを使用して、これらのオブジェクトの配列から <xref:System.Speech.Recognition.Choices> を構築できます。  
  
   
  
## Examples  
 次の例では <xref:System.Speech.Recognition.Choices> オブジェクトを使用して、2つの代替リストを作成します。  
  
 最初の <xref:System.Speech.Recognition.Choices> オブジェクトは、<xref:System.String> オブジェクトの配列から構築されます。 もう1つの <xref:System.Speech.Recognition.Choices> オブジェクトは、キャストによって暗黙的に変換された <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトの配列から構築されます。  
  
 この例では、<xref:System.Speech.Recognition.GrammarBuilder> オブジェクトを使用して、<xref:System.Speech.Recognition.Choices> オブジェクトと2つの追加文字列を使用して語句をアセンブルします。これを使用すると、[phoneType] phone の "Call [contactlList]" の形式で音声入力を認識することができます。たとえば、"携帯電話で Jane を呼び出す" などです。  
  
```csharp
public GrammarBuilder ChoicesConstructor2 ()  
{  
    GrammarBuilder gb = new GrammarBuilder ();  
    Choices phoneType = new Choices (new string[] {"cell", "home", "work"});  
    Choices contactList = new Choices (new GrammarBuilder[] {(GrammarBuilder) "Mark", (GrammarBuilder) "Jane", (GrammarBuilder) "Frank"});  
    gb.Append ("Call");  
    gb.Append (contactList);  
    gb.Append ("on");  
    gb.Append (phoneType);  
    gb.Append ("phone");  
    return gb;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>空の代替セットを含む、<see cref="T:System.Speech.Recognition.Choices" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、代替の有効な空のセットを返します。 任意の <xref:System.Speech.Recognition.Choices.Add%2A> メソッドを使用して代替手段を追加できます。  
  
   
  
## Examples  
 次の例では、<xref:System.Speech.Recognition.Choices> と <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトを使用して、"セルで Anne を呼び出す" や "職場の電話で James を呼び出す" などの音声入力を認識するために使用できる語句を作成します。 この例では、<xref:System.Speech.Recognition.Choices> と <xref:System.String> からの暗黙的なキャストを使用して <xref:System.Speech.Recognition.GrammarBuilder>しています。  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices alternateChoices" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">代替のセットを格納する配列。</param>
        <summary>1 つ以上の <see cref="T:System.Speech.Recognition.Choices" /> オブジェクトを含む配列から <see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `alternateChoices` の各 <xref:System.Speech.Recognition.GrammarBuilder> は、代替手段を1つ定義します。 `alternateChoices` が空の配列の場合、コンストラクターは空の代替のセットを返します。 任意の <xref:System.Speech.Recognition.Choices.Add%2A> メソッドを使用して代替手段を追加できます。  
  
 コンストラクターは、`alternateChoices` が `null` 場合、または配列要素のいずれかが `null`場合に、<xref:System.ArgumentNullException> をスローします。  
  
 <xref:System.Speech.Recognition.GrammarBuilder> クラスは、<xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.SemanticResultValue>、および <xref:System.Speech.Recognition.SemanticResultKey> のオブジェクトを <xref:System.Speech.Recognition.GrammarBuilder> インスタンスに暗黙的に変換するためのサポートを提供するため、キャストを使用すると、このコンストラクターを使用して、これらのオブジェクトの任意の組み合わせの一覧から <xref:System.Speech.Recognition.Choices> オブジェクトを作成することもできます。  
  
   
  
## Examples  
 次の例では `Choices` と <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトを使用して、"セルに Anne を呼び出す" や "職場の電話で James を呼び出します" などの語句の <xref:System.Speech.Recognition.Grammar> を作成します。 この例では、`Choices` と <xref:System.String> からの暗黙的なキャストを使用して <xref:System.Speech.Recognition.GrammarBuilder>しています。  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : string[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices phrases" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">代替のセットを格納する配列。</param>
        <summary>1 つ以上の <see cref="T:System.Speech.Recognition.Choices" /> オブジェクトを含む配列から <see cref="T:System.String" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `phrases` の各 <xref:System.String> は、代替手段を1つ定義します。 音声認識エンジンでは、文字列配列内のいずれかの項目を使用して、音声入力を一致させることができます。 `phrases` が空の配列の場合、コンストラクターは空の代替のセットを返します。 任意の <xref:System.Speech.Recognition.Choices.Add%2A> メソッドを使用して代替手段を追加できます。  
  
 コンストラクターは、`phrases` が `null` 場合、または配列要素のいずれかが `null`場合に、<xref:System.ArgumentNullException> をスローします。 配列内のいずれかの要素が空の文字列 ("") である場合、コンストラクターは <xref:System.ArgumentException> をスローします。  
  
   
  
## Examples  
 次の例では <xref:System.Speech.Recognition.Choices> と <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトを使用して、"セルに Anne を呼び出す" や "職場の電話で James を呼び出します" などの語句の <xref:System.Speech.Recognition.Grammar> を作成します。 この例では、`Choices` と <xref:System.String> からの暗黙的なキャストを使用して <xref:System.Speech.Recognition.GrammarBuilder>しています。  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>代替のセットに項目を追加します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Speech.Recognition.GrammarBuilder[] -&gt; unit" Usage="choices.Add alternateChoices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">この <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトに追加する <see cref="T:System.Speech.Recognition.Choices" /> オブジェクト。</param>
        <summary>1 つ以上の <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトを含む配列を代替のセットに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.SemanticResultKey>、および <xref:System.Speech.Recognition.SemanticResultValue> オブジェクトから <xref:System.Speech.Recognition.GrammarBuilder>への暗黙的な変換がサポートされているため、これら3つのクラスを <xref:System.Speech.Recognition.Choices> インスタンスに追加することもできます。  
  
 `alternateChoices` が空の配列の場合、このメソッドは代替のセットを更新しません。  
  
 アプリケーションでは、<xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> と <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> の両方を使用して、<xref:System.Speech.Recognition.Choices> オブジェクトに代替手段を追加できます。  
  
 このメソッドは、`alternateChoices` が `null` 場合、または配列要素のいずれかが `null`場合に、<xref:System.ArgumentNullException> をスローします。  
  
   
  
## Examples  
 次の例では、"携帯電話で Anne を呼び出す" や "職場の電話で James を呼び出す" などの語句について、音声認識の文法を作成します。 この例では、<xref:System.Speech.Recognition.Choices.Add%2A> メソッドの両方のオーバーロードを使用して文法を構築します。  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="member this.Add : string[] -&gt; unit" Usage="choices.Add phrases" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">この <see cref="T:System.Speech.Recognition.Choices" /> オブジェクトに追加する文字列。</param>
        <summary>1 つ以上の <see cref="T:System.String" /> オブジェクトを含む配列を代替のセットに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションでは、<xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> と <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> の両方を使用して、<xref:System.Speech.Recognition.Choices> オブジェクトに代替手段を追加できます。  
  
 `phrases` が空の配列の場合、このメソッドは代替のセットを更新しません。  
  
 このメソッドは、`phrases` が `null` 場合、または配列要素のいずれかが `null`場合に、<xref:System.ArgumentNullException> をスローします。 配列内のいずれかの要素が空の文字列 ("") の場合、このメソッドは <xref:System.ArgumentException> をスローします。  
  
   
  
## Examples  
 次の例では、"自分のセルで Anne を呼び出す" や "職場の電話で James を呼び出す" のような語句の音声認識文法を作成します。 この例では、<xref:System.Speech.Recognition.Choices.Add%2A> メソッドの両方のオーバーロードを使用して文法を構築します。  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="choices.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトから <see cref="T:System.Speech.Recognition.Choices" /> オブジェクトを返します。</summary>
        <returns>この <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトと一致する <see cref="T:System.Speech.Recognition.Choices" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドによって返される <xref:System.Speech.Recognition.GrammarBuilder> は、次のいずれかによって返されるものと同じです。  
  
-   このオブジェクトをパラメーターとして使用して、<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> コンストラクターを呼び出します。  
  
-   このオブジェクトの暗黙的または明示的なキャストを <xref:System.Speech.Recognition.GrammarBuilder>に使用します。  
  
   
  
## Examples  
 次の例では、背景色を変更するための音声認識文法を作成します。  
  
```csharp  
  
private Grammar CreateColorChoice()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append(new Choices(new string[] {"Set", "Change"}));  
  gb.Append("background to");  
  gb.Append(colorChoice.ToGrammarBuilder());  
  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "modify background color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
  </Members>
</Type>
