<Type Name="GrammarBuilder" FullName="System.Speech.Recognition.GrammarBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d4dc4b7f6ec7aeae31f26b9a0c8d9052df4d3a64" /><Meta Name="ms.sourcegitcommit" Value="f9576bf8c61e3d46834aeeff50f858359f2a99ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/09/2020" /><Meta Name="ms.locfileid" Value="77104757" /></Metadata><TypeSignature Language="C#" Value="public class GrammarBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GrammarBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.GrammarBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class GrammarBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class GrammarBuilder" />
  <TypeSignature Language="F#" Value="type GrammarBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="893d4-101">音声認識文法の制約をプログラムでビルドするための機構を提供します。</span><span class="sxs-lookup"><span data-stu-id="893d4-101">Provides a mechanism for programmatically building the constraints for a speech recognition grammar.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-102">音声認識文法は、一般に、[音声認識文法仕様 (SRGS) バージョン 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)で定義されている XML 形式で作成されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-102">Speech recognition grammars are commonly authored in the XML format defined by the [Speech Recognition Grammar Specification (SRGS) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201761).</span></span> <span data-ttu-id="893d4-103">SRGS に慣れていても、プログラムで文法を生成する場合は、<xref:System.Speech.Recognition.SrgsGrammar> 名前空間を使用できます。この名前空間は、SRGS によって定義される要素と属性に厳密に対応しています。</span><span class="sxs-lookup"><span data-stu-id="893d4-103">If you are familiar with SRGS but want to generate the grammars programmatically, you can use the <xref:System.Speech.Recognition.SrgsGrammar> namespace, whose members correspond closely to the elements and attributes defined by SRGS.</span></span> <span data-ttu-id="893d4-104">SRGS に慣れていない場合、または多くの一般的なシナリオを効率的に実行できるように、軽量でプログラムによる文法を作成する必要がある場合は、<xref:System.Speech.Recognition.GrammarBuilder> クラスと <xref:System.Speech.Recognition.Choices> クラスを使用できます。</span><span class="sxs-lookup"><span data-stu-id="893d4-104">If you are unfamiliar with SRGS, or you want a lightweight, programmatic approach to authoring grammars with which you can efficiently accomplish many common scenarios; you can use the <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> classes.</span></span>  
  
 <span data-ttu-id="893d4-105"><xref:System.Speech.Recognition.GrammarBuilder> オブジェクトを使用して、<xref:System.Speech.Recognition.Choices> オブジェクトで構成される階層ツリーを構築します。これらのオブジェクトには、各ノードにプリアンブルと事後の語句を混在させることができます。また、アプリケーションに意味を伝えるセマンティック値を使用してシード処理を行うこともできます。</span><span class="sxs-lookup"><span data-stu-id="893d4-105">Use <xref:System.Speech.Recognition.GrammarBuilder> objects to build a hierarchical tree composed of <xref:System.Speech.Recognition.Choices> objects that contain alternate phrases, interspersed with preamble and post-amble phrases at each node, and seeded with semantic values that convey  meaning back to the application.</span></span>  
  
 <span data-ttu-id="893d4-106"><xref:System.Speech.Recognition.GrammarBuilder> を使用して <xref:System.Speech.Recognition.Grammar> オブジェクトを作成するには、次の手順に従います。</span><span class="sxs-lookup"><span data-stu-id="893d4-106">To use a <xref:System.Speech.Recognition.GrammarBuilder> to create a <xref:System.Speech.Recognition.Grammar> object, use the following steps.</span></span>  
  
1.  <span data-ttu-id="893d4-107"><xref:System.Speech.Recognition.GrammarBuilder> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-107">Create a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
2.  <span data-ttu-id="893d4-108">制約を <xref:System.Speech.Recognition.GrammarBuilder>に追加します。たとえば、<xref:System.String> オブジェクト、<xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.SemanticResultKey>、<xref:System.Speech.Recognition.SemanticResultValue>、<xref:System.Speech.Recognition.DictationGrammar>、文法の制約を定義するその他の <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトなどです。</span><span class="sxs-lookup"><span data-stu-id="893d4-108">Append constraints to the <xref:System.Speech.Recognition.GrammarBuilder>, such as <xref:System.String> objects, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.DictationGrammar>, and other <xref:System.Speech.Recognition.GrammarBuilder> objects that define the constraints for the grammar.</span></span>  
  
3.  <span data-ttu-id="893d4-109"><xref:System.Speech.Recognition.Grammar.%23ctor%2A> コンストラクターのいずれかを使用して、完成した <xref:System.Speech.Recognition.GrammarBuilder> 文法から <xref:System.Speech.Recognition.Grammar> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-109">Use one of the <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructors to create a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder> grammar.</span></span>  
  
 <span data-ttu-id="893d4-110"><xref:System.Speech.Recognition.GrammarBuilder> を使用したオーサリングは、リストを含む単一の規則 (場合によってはリストのリスト) を持つ文法に最適です。</span><span class="sxs-lookup"><span data-stu-id="893d4-110">Authoring with <xref:System.Speech.Recognition.GrammarBuilder> is best suited to grammars that have a single rule containing lists, or perhaps lists of lists.</span></span> <span data-ttu-id="893d4-111">複数の規則を持つ、または内部規則参照を作成する必要がある文法をプログラムで作成するには、<xref:System.Speech.Recognition.SrgsGrammar> 名前空間のクラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="893d4-111">To programmatically build grammars that have multiple rules, or that need to make internal rule references, use the classes of the <xref:System.Speech.Recognition.SrgsGrammar> namespace.</span></span>  
  
 <span data-ttu-id="893d4-112"><xref:System.Speech.Recognition.GrammarBuilder> のインスタンスは、他の特定のクラスからの暗黙的な変換によって取得することもできます。また、<xref:System.Speech.Recognition.GrammarBuilder> と、文法の制約を含む2番目のオブジェクトとを組み合わせることによって取得することもできます。</span><span class="sxs-lookup"><span data-stu-id="893d4-112">Instances of <xref:System.Speech.Recognition.GrammarBuilder> can also be obtained by implicit conversions from certain other classes or by combining a  <xref:System.Speech.Recognition.GrammarBuilder> with a second object that contains constraints for a grammar..</span></span> <span data-ttu-id="893d4-113">詳細については、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> および <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> の演算子と <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-113">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators and the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods.</span></span>  
  
 <span data-ttu-id="893d4-114">既存の <xref:System.Speech.Recognition.GrammarBuilder>に規則を追加するには、<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>、<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>、<xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>、<xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>、および <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> の各メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="893d4-114">To add rules to an existing <xref:System.Speech.Recognition.GrammarBuilder>, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-115">同じキー名または複数のセマンティック要素を持つ重複するセマンティック要素が含まれている音声認識文法を使用すると、音声認識エンジンは例外をスローし、同じセマンティック要素の値を繰り返し変更する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-115">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> 
  
 <span data-ttu-id="893d4-116">デバッグを支援するために、<xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A> プロパティは、<xref:System.Speech.Recognition.GrammarBuilder> の現在の状態を文字列として返します。</span><span class="sxs-lookup"><span data-stu-id="893d4-116">To help with debugging, the <xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A> property returns the current status of the <xref:System.Speech.Recognition.GrammarBuilder> as a string.</span></span>  
  
## Examples  
 <span data-ttu-id="893d4-117">次の例では、<xref:System.Speech.Recognition.GrammarBuilder> と <xref:System.Speech.Recognition.Choices> オブジェクトを使用して、"背景*色の選択*" または "背景を*Colorchoice*に設定する" という2つのフレーズのいずれかを認識できる文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-117">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="893d4-118">この例では、<xref:System.Speech.Recognition.Choices> オブジェクトを使用して、<xref:System.String> オブジェクトの配列から*Colorchoice*に使用できる値のリストを作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-118">The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects.</span></span> <span data-ttu-id="893d4-119"><xref:System.Speech.Recognition.Choices> オブジェクトは、SRGS 仕様の `one-of` 要素に似ています。一連の代替語句が含まれています。これらはいずれも、話されたときに認識できます。</span><span class="sxs-lookup"><span data-stu-id="893d4-119">A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken.</span></span> <span data-ttu-id="893d4-120">また、この例では、<xref:System.Speech.Recognition.Choices> オブジェクトを使用して、2つの <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトの配列を、結果の文法が認識できる代替語句のペアにグループ化します。</span><span class="sxs-lookup"><span data-stu-id="893d4-120">The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize.</span></span> <span data-ttu-id="893d4-121">代替語または句は、ほとんどの文法のコンポーネントであり、<xref:System.Speech.Recognition.Choices> オブジェクトは、<xref:System.Speech.Recognition.GrammarBuilder>で構築された文法にこの機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="893d4-121">Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="893d4-122">この例では、最後に <xref:System.Speech.Recognition.Choices> オブジェクトから構築された <xref:System.Speech.Recognition.GrammarBuilder> から <xref:System.Speech.Recognition.Grammar> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-122">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Choices" />
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="893d4-123"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="893d4-123">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-124">このクラスのインスタンスは、他のクラスからの暗黙的な変換や、新しい <xref:System.Speech.Recognition.GrammarBuilder>からの2番目のオブジェクトとの <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトの結合によって取得することもできます。</span><span class="sxs-lookup"><span data-stu-id="893d4-124">Instances of this class can also be obtained by implicit conversions from other classes or by combining a <xref:System.Speech.Recognition.GrammarBuilder> object with a second object to from a new <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="893d4-125">詳細については、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> メソッドと <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-125">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> methods.</span></span>  
  
 <span data-ttu-id="893d4-126">既存の <xref:System.Speech.Recognition.GrammarBuilder>に制約を追加するには、<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>、<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>、<xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>、<xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>、および <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> の各メソッドと、<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> 演算子を使用します。</span><span class="sxs-lookup"><span data-stu-id="893d4-126">To add constraints to an existing <xref:System.Speech.Recognition.GrammarBuilder>, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods, and the <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operator.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-127">同じキー名または複数のセマンティック要素を持つ重複するセマンティック要素が含まれている音声認識文法を使用すると、音声認識エンジンは例外をスローし、同じセマンティック要素の値を繰り返し変更する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-127">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span>
  
 <span data-ttu-id="893d4-128">音声認識文法の作成と使用の詳細については、「[音声認識](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-128">For more information about building and using speech recognition grammars, see [Speech Recognition](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="893d4-129"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しい空のインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="893d4-129">Initializes a new, empty instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-130">既存の <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトに規則を追加するには、<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>、<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>、<xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>、<xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>、および <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> の各メソッドと、<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> 演算子を使用します。</span><span class="sxs-lookup"><span data-stu-id="893d4-130">To add rules to an existing <xref:System.Speech.Recognition.GrammarBuilder> object, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods, and the <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operator.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-131">同じキー名または複数のセマンティック要素を持つ重複するセマンティック要素が含まれている音声認識文法を使用すると、音声認識エンジンは例外をスローし、同じセマンティック要素の値を繰り返し変更する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-131">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="893d4-132">次の例では、<xref:System.Speech.Recognition.GrammarBuilder> と <xref:System.Speech.Recognition.Choices> オブジェクトを使用して、"背景*色の選択*" または "背景を*Colorchoice*に設定する" という2つのフレーズのいずれかを認識できる文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-132">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="893d4-133">この例では、<xref:System.Speech.Recognition.Choices> オブジェクトを使用して、<xref:System.String> オブジェクトの配列から*Colorchoice*に使用できる値のリストを作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-133">The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects.</span></span> <span data-ttu-id="893d4-134"><xref:System.Speech.Recognition.Choices> オブジェクトは、SRGS 仕様の `one-of` 要素に似ています。一連の代替語句が含まれており、そのいずれかを話されたときに認識させることができます。</span><span class="sxs-lookup"><span data-stu-id="893d4-134">A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any one of which can be recognized when spoken.</span></span> <span data-ttu-id="893d4-135">また、この例では、<xref:System.Speech.Recognition.Choices> オブジェクトを使用して、2つの <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトの配列を、結果の文法が認識できる代替語句のペアにグループ化します。</span><span class="sxs-lookup"><span data-stu-id="893d4-135">The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize.</span></span> <span data-ttu-id="893d4-136">代替語または句は、ほとんどの文法のコンポーネントであり、<xref:System.Speech.Recognition.Choices> オブジェクトは、<xref:System.Speech.Recognition.GrammarBuilder>で構築された文法にこの機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="893d4-136">Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="893d4-137">この例では、最後に <xref:System.Speech.Recognition.Choices> オブジェクトから構築された <xref:System.Speech.Recognition.GrammarBuilder> から <xref:System.Speech.Recognition.Grammar> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-137">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  GrammarBuilder bothPhrases = new GrammarBuilder();  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  bothPhrases.Append(bothChoices);  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.Choices alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.Choices alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (alternateChoices As Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::Choices ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : System.Speech.Recognition.Choices -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder alternateChoices" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="alternateChoices"><span data-ttu-id="893d4-138">代替のセット。</span><span class="sxs-lookup"><span data-stu-id="893d4-138">The set of alternatives.</span></span></param>
        <summary><span data-ttu-id="893d4-139">代替のセットから <see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="893d4-139">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a set of alternatives.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-140">代替手段を含む音声認識文法を構築する方法の詳細については、「[選択肢を使用して GrammarBuilder 文法を作成する](https://msdn.microsoft.com/library/5b18db18-a5f6-46a3-aa77-6d3141544efd)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-140">For more information about building a speech recognition grammar that contains alternatives, see [Using Choices to Create a GrammarBuilder Grammar](https://msdn.microsoft.com/library/5b18db18-a5f6-46a3-aa77-6d3141544efd).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="893d4-141">次の例では、<xref:System.Speech.Recognition.GrammarBuilder> と <xref:System.Speech.Recognition.Choices> オブジェクトを使用して、"背景*色の選択*" または "背景を*Colorchoice*に設定する" という2つのフレーズのいずれかを認識できる文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-141">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="893d4-142">この例では、<xref:System.Speech.Recognition.Choices> オブジェクトを使用して、<xref:System.String> オブジェクトの配列から*Colorchoice*に使用できる値のリストを作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-142">The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects.</span></span> <span data-ttu-id="893d4-143"><xref:System.Speech.Recognition.Choices> オブジェクトは、SRGS 仕様の `one-of` 要素に似ています。一連の代替語句が含まれています。これらはいずれも、話されたときに認識できます。</span><span class="sxs-lookup"><span data-stu-id="893d4-143">A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken.</span></span> <span data-ttu-id="893d4-144">また、この例では、<xref:System.Speech.Recognition.Choices> オブジェクトを使用して、2つの <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトの配列を、結果の文法が認識できる代替語句のペアにグループ化します。</span><span class="sxs-lookup"><span data-stu-id="893d4-144">The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize.</span></span> <span data-ttu-id="893d4-145">代替語または句は、ほとんどの文法のコンポーネントであり、<xref:System.Speech.Recognition.Choices> オブジェクトは、<xref:System.Speech.Recognition.GrammarBuilder>で構築された文法にこの機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="893d4-145">Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="893d4-146">この例では、最後に <xref:System.Speech.Recognition.Choices> オブジェクトから構築された <xref:System.Speech.Recognition.GrammarBuilder> から <xref:System.Speech.Recognition.Grammar> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-146">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.SemanticResultKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SemanticResultKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As SemanticResultKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::SemanticResultKey ^ key);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : System.Speech.Recognition.SemanticResultKey -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="893d4-147">セマンティクス キー。</span><span class="sxs-lookup"><span data-stu-id="893d4-147">The semantic key.</span></span></param>
        <summary><span data-ttu-id="893d4-148">セマンティクス キーから <see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="893d4-148">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a semantic key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-149"><xref:System.Speech.Recognition.SemanticResultValue> オブジェクトから <xref:System.Speech.Recognition.GrammarBuilder> インスタンスを作成する場合は、認識結果で返すことができるセマンティック情報を文法に追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-149">When you create a <xref:System.Speech.Recognition.GrammarBuilder> instance from a <xref:System.Speech.Recognition.SemanticResultValue> object, you add semantic information to the grammar that can be returned in the recognition result.</span></span> <span data-ttu-id="893d4-150">認識結果のセマンティック情報にアクセスするには、<xref:System.Speech.Recognition.RecognizedPhrase>の <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> プロパティを使用します。これは、`SpeechRecognized` イベントのハンドラーで使用できます。</span><span class="sxs-lookup"><span data-stu-id="893d4-150">You can access the semantic information in the recognition result using the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property of <xref:System.Speech.Recognition.RecognizedPhrase>, which is available in the handler for the `SpeechRecognized` event.</span></span> <span data-ttu-id="893d4-151"><xref:System.Speech.Recognition.GrammarBuilder> が <xref:System.Speech.Recognition.SemanticResultKey>を定義している場合は、これを使用して、キーに関連付けられている認識結果のセマンティック情報を取得できます。</span><span class="sxs-lookup"><span data-stu-id="893d4-151">If the <xref:System.Speech.Recognition.GrammarBuilder> defines a <xref:System.Speech.Recognition.SemanticResultKey>, this can be used to retrieve the semantic information in a recognition result that is associated with the key.</span></span> <span data-ttu-id="893d4-152"><xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>の例を参照し、<xref:System.Speech.Recognition.SemanticResultValue> と <xref:System.Speech.Recognition.SemanticResultKey>も参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-152">See the example for <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, and also see <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-153"><xref:System.Speech.Recognition.SemanticResultValue> または <xref:System.Speech.Recognition.SemanticResultKey> インスタンスを含む <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトを構築する場合は、同じキー名または複数のセマンティック要素を持つ重複するセマンティック要素を作成しないようにしてください。この場合、<xref:System.Speech.Recognition.SemanticValue> オブジェクトの <xref:System.Speech.Recognition.SemanticValue.Value%2A> プロパティを繰り返し変更することができます。</span><span class="sxs-lookup"><span data-stu-id="893d4-153">When you construct <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="893d4-154">このような状況が発生した場合、音声認識エンジンは例外をスローすることがあります。</span><span class="sxs-lookup"><span data-stu-id="893d4-154">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> 
  
   
  
## Examples  
 <span data-ttu-id="893d4-155">次の例では、"背景色の*選択*を行う" と "背景を*Colorchoice*に設定する" という2つの語句を認識できる音声認識文法を作成します。色のセットから*colorchoice*を選択します。</span><span class="sxs-lookup"><span data-stu-id="893d4-155">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *colorChoice*" and "Set background to *colorChoice*", where *colorChoice* is selected from a set of colors.</span></span> <span data-ttu-id="893d4-156">文法を使用すると、ユーザーはいくつかの色の名前を読み上げ、認識された色の名前に関するセマンティック情報をアプリケーションに返すことができます。</span><span class="sxs-lookup"><span data-stu-id="893d4-156">The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.</span></span>  
  
 <span data-ttu-id="893d4-157">この例では、ユーザーが読み上げた色に関連付けられている <xref:System.Speech.Recognition.SemanticValue> を取得できる1つの <xref:System.Speech.Recognition.SemanticResultKey> を使用します。</span><span class="sxs-lookup"><span data-stu-id="893d4-157">The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user.</span></span> <span data-ttu-id="893d4-158">たとえば、入力に "背景を赤に設定する" という語句が含まれている場合、認識結果には "#FF0000" というセマンティック値が含まれます。これは、`SpeechRecognized` イベントのハンドラーを使用して取得できます。</span><span class="sxs-lookup"><span data-stu-id="893d4-158">For example, if the input contains the phrase, "Set background to red", the recognition result contains the semantic value of "#FF0000", which you can retrieve using a handler for the `SpeechRecognized` event.</span></span>  
  
 <span data-ttu-id="893d4-159">この例では、<xref:System.String>、<xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.SemanticResultKey>、<xref:System.Speech.Recognition.SemanticResultValue>、および <xref:System.Speech.Recognition.GrammarBuilder> の各オブジェクトを使用して、最後の <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトに含まれるすべての制約 (`bothPhrases`) を構築します。</span><span class="sxs-lookup"><span data-stu-id="893d4-159">The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`.</span></span> <span data-ttu-id="893d4-160">最後に、この例では、完了した <xref:System.Speech.Recognition.GrammarBuilder>から <xref:System.Speech.Recognition.Grammar> オブジェクトを構築します。</span><span class="sxs-lookup"><span data-stu-id="893d4-160">Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  // Include semantic information about each of the colors.  
  Choices colorChoice = new Choices();  
  
  GrammarBuilder colorBuilder = new GrammarBuilder("red");  
  SemanticResultValue colorValue =  
    new SemanticResultValue(colorBuilder, "#FF0000");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("green");  
  colorValue = new SemanticResultValue(colorBuilder, "#00FF00");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("blue");  
  colorValue = new SemanticResultValue(colorBuilder, "#0000FF");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices object for the two alternative phrases.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  // Create the semantic key for referencing the color information.  
  SemanticResultKey colorKey =  
    new SemanticResultKey("ColorCode", bothPhrases);  
  bothPhrases = new GrammarBuilder(colorKey);  
  
  // Construct the Grammar object from the GrammarBuilder.  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.SemanticResultValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SemanticResultValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As SemanticResultValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::SemanticResultValue ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : System.Speech.Recognition.SemanticResultValue -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="893d4-161">セマンティクス値または名前と値のペア。</span><span class="sxs-lookup"><span data-stu-id="893d4-161">The semantic value or name/value pair.</span></span></param>
        <summary><span data-ttu-id="893d4-162">セマンティクス値から <see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="893d4-162">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a semantic value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-163"><xref:System.Speech.Recognition.SemanticResultValue> オブジェクトから <xref:System.Speech.Recognition.GrammarBuilder> インスタンスを作成する場合は、認識結果で返すことができるセマンティック情報を文法に追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-163">When you create a <xref:System.Speech.Recognition.GrammarBuilder> instance from a <xref:System.Speech.Recognition.SemanticResultValue> object, you add semantic information to the grammar that can be returned in the recognition result.</span></span> <span data-ttu-id="893d4-164">認識結果のセマンティック情報にアクセスするには、<xref:System.Speech.Recognition.RecognizedPhrase>の <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> プロパティを使用します。これは、`SpeechRecognized` イベントのハンドラーで使用できます。</span><span class="sxs-lookup"><span data-stu-id="893d4-164">You can access the semantic information in the recognition result using the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property of <xref:System.Speech.Recognition.RecognizedPhrase>, which is available in the handler for the `SpeechRecognized` event.</span></span> <span data-ttu-id="893d4-165"><xref:System.Speech.Recognition.GrammarBuilder> が <xref:System.Speech.Recognition.SemanticResultKey>を定義している場合は、これを使用して、キーに関連付けられている認識結果のセマンティック情報を取得できます。</span><span class="sxs-lookup"><span data-stu-id="893d4-165">If the <xref:System.Speech.Recognition.GrammarBuilder> defines a <xref:System.Speech.Recognition.SemanticResultKey>, this can be used to retrieve the semantic information in a recognition result that is associated with the key.</span></span> <span data-ttu-id="893d4-166"><xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>の例を参照し、<xref:System.Speech.Recognition.SemanticResultValue> と <xref:System.Speech.Recognition.SemanticResultKey>も参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-166">See the example for <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, and also see <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-167"><xref:System.Speech.Recognition.SemanticResultValue> または <xref:System.Speech.Recognition.SemanticResultKey> インスタンスを含む <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトを構築する場合は、同じキー名または複数のセマンティック要素を持つ重複するセマンティック要素を作成しないようにしてください。この場合、<xref:System.Speech.Recognition.SemanticValue> オブジェクトの <xref:System.Speech.Recognition.SemanticValue.Value%2A> プロパティを繰り返し変更することができます。</span><span class="sxs-lookup"><span data-stu-id="893d4-167">When you construct <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="893d4-168">このような状況が発生した場合、音声認識エンジンは例外をスローすることがあります。</span><span class="sxs-lookup"><span data-stu-id="893d4-168">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> 
  
   
  
## Examples  
 <span data-ttu-id="893d4-169">次の例では、"背景色の*選択*を行う" と "背景を*Colorchoice*に設定する" という2つの語句を認識できる音声認識文法を作成します。色のセットから*colorchoice*を選択します。</span><span class="sxs-lookup"><span data-stu-id="893d4-169">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *colorChoice*" and "Set background to *colorChoice*", where *colorChoice* is selected from a set of colors.</span></span> <span data-ttu-id="893d4-170">文法を使用すると、ユーザーはいくつかの色の名前を読み上げ、認識された色の名前に関するセマンティック情報をアプリケーションに返すことができます。</span><span class="sxs-lookup"><span data-stu-id="893d4-170">The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.</span></span>  
  
 <span data-ttu-id="893d4-171">この例では、ユーザーが読み上げた色に関連付けられている <xref:System.Speech.Recognition.SemanticValue> を取得できる1つの <xref:System.Speech.Recognition.SemanticResultKey> を使用します。</span><span class="sxs-lookup"><span data-stu-id="893d4-171">The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user.</span></span> <span data-ttu-id="893d4-172">たとえば、入力に "背景を赤に設定する" という語句が含まれている場合、認識結果には "#FF0000" というセマンティック値が含まれます。これは、`SpeechRecognized` イベントのハンドラーを使用して取得できます。</span><span class="sxs-lookup"><span data-stu-id="893d4-172">For example, if the input contains the phrase, "Set background to red", the recognition result contains the semantic value of "#FF0000", which you can retrieve using a handler for the `SpeechRecognized` event.</span></span>  
  
 <span data-ttu-id="893d4-173">この例では、<xref:System.String>、<xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.SemanticResultKey>、<xref:System.Speech.Recognition.SemanticResultValue>、および <xref:System.Speech.Recognition.GrammarBuilder> の各オブジェクトを使用して、最後の <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトに含まれるすべての制約 (`bothPhrases`) を構築します。</span><span class="sxs-lookup"><span data-stu-id="893d4-173">The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`.</span></span> <span data-ttu-id="893d4-174">最後に、この例では、完了した <xref:System.Speech.Recognition.GrammarBuilder>から <xref:System.Speech.Recognition.Grammar> オブジェクトを構築します。</span><span class="sxs-lookup"><span data-stu-id="893d4-174">Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  // Include semantic information about each of the colors.  
  Choices colorChoice = new Choices();  
  
  GrammarBuilder colorBuilder = new GrammarBuilder("red");  
  SemanticResultValue colorValue =  
    new SemanticResultValue(colorBuilder, "#FF0000");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("green");  
  colorValue = new SemanticResultValue(colorBuilder, "#00FF00");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("blue");  
  colorValue = new SemanticResultValue(colorBuilder, "#0000FF");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  // Create the semantic key for referencing the color information.  
  SemanticResultKey colorKey =  
    new SemanticResultKey("ColorCode", bothPhrases);  
  bothPhrases = new GrammarBuilder(colorKey);  
  
  // Construct the grammar from the grammar builder.  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : string -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder phrase" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="893d4-175">言葉のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="893d4-175">The sequence of words.</span></span></param>
        <summary><span data-ttu-id="893d4-176">言葉のシーケンスから <see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="893d4-176">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a sequence of words.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-177">語句は、音声認識の文法で認識できる、完全に読み上げられた語句を表します。</span><span class="sxs-lookup"><span data-stu-id="893d4-177">The phrase represents an exact spoken phrase that the speech recognition grammar can recognize.</span></span> <span data-ttu-id="893d4-178">文字列を含む音声認識文法を構築する方法の詳細については、「文字列を使用して[GrammarBuilder 文法を作成する](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-178">For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="893d4-179">次の例では、<xref:System.Speech.Recognition.GrammarBuilder> と <xref:System.Speech.Recognition.Choices> オブジェクトを使用して、"背景*色の選択*" または "背景を*Colorchoice*に設定する" という2つのフレーズのいずれかを認識できる文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-179">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="893d4-180"><xref:System.Speech.Recognition.Choices> オブジェクトを使用して*Colorchoice*に許容される値のリストを作成した後、引数として文字列を使用して、`makePhrase` と `setPhrase`の2つの <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトを初期化します。</span><span class="sxs-lookup"><span data-stu-id="893d4-180">After creating a list of acceptable values for *colorChoice* using a <xref:System.Speech.Recognition.Choices> object, the example initializes two <xref:System.Speech.Recognition.GrammarBuilder> objects, `makePhrase` and `setPhrase`, using a string as an argument.</span></span>  
  
 <span data-ttu-id="893d4-181">この例では、最後に <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトにキャストされた <xref:System.Speech.Recognition.Choices> オブジェクトから <xref:System.Speech.Recognition.Grammar> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-181">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.Choices> object cast to a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, valuetype System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, subsetMatchingCriteria As SubsetMatchingMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase, System::Speech::Recognition::SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : string * System.Speech.Recognition.SubsetMatchingMode -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder (phrase, subsetMatchingCriteria)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="subsetMatchingCriteria" Type="System.Speech.Recognition.SubsetMatchingMode" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="893d4-182">言葉のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="893d4-182">The sequence of words.</span></span></param>
        <param name="subsetMatchingCriteria"><span data-ttu-id="893d4-183">句を認識するために音声認識文法が使用する一致モード。</span><span class="sxs-lookup"><span data-stu-id="893d4-183">The matching mode the speech recognition grammar uses to recognize the phrase.</span></span></param>
        <summary><span data-ttu-id="893d4-184">言葉のシーケンスのサブセットについて、<see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="893d4-184">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class for a subset of a sequence of words.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-185">`phrase` パラメーターは、音声認識の文法で認識できる語句を表します。</span><span class="sxs-lookup"><span data-stu-id="893d4-185">The `phrase` parameter represents the phrase that the speech recognition grammar can recognize.</span></span> <span data-ttu-id="893d4-186">`subsetMatchingMode` パラメーターは、語句全体を正常に認識するために読み上げることができる語句のサブセットを指定します。</span><span class="sxs-lookup"><span data-stu-id="893d4-186">The `subsetMatchingMode` parameter specifies a subset of the phrase that can be spoken to achieve successful recognition of the entire phrase.</span></span> <span data-ttu-id="893d4-187">これを使用すると、ユーザーが項目に一致する名前全体を話す必要がなく、長い名前を持つエントリのリストを含む文法を作成できます。</span><span class="sxs-lookup"><span data-stu-id="893d4-187">You can use this to create a grammar with a list of entries that have long names, without requiring users to speak an entire name to match an item.</span></span>  
  
 <span data-ttu-id="893d4-188">照合モードの詳細については、「<xref:System.Speech.Recognition.SubsetMatchingMode>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-188">For more information about the matching modes, see <xref:System.Speech.Recognition.SubsetMatchingMode>.</span></span> <span data-ttu-id="893d4-189">文字列を含む音声認識文法を構築する方法の詳細については、「文字列を使用して[GrammarBuilder 文法を作成する](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-189">For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="893d4-190">次の例では、<xref:System.Speech.Recognition.SubsetMatchingMode> 値ごとに音声認識文法を作成し、一致モード文法を選択するための文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-190">The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value and a grammar for choosing between the matching mode grammars.</span></span> <span data-ttu-id="893d4-191">`phrase` の値が "1 2 3 4 5 6 7" の場合、サブシーケンス文法は入力 "2 3 4" を認識しますが、入力 "1 3 5" は認識しません。</span><span class="sxs-lookup"><span data-stu-id="893d4-191">If the value of `phrase` is "one two three four five six seven", then the Subsequence grammar recognizes the input "two three four", but not the input "one three five".</span></span> <span data-ttu-id="893d4-192">ただし、順序付けられたサブセット文法では、両方の入力が認識されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-192">However, the Ordered Subset grammar recognizes both of these inputs.</span></span>  
  
```csharp  
  
private static IEnumerable<Grammar>  
  CreateMatchingModeGrammars(string phrase)  
{  
  List<Grammar> grammars = new List<Grammar>(5);  
  
  Choices modeChoice = new Choices();  
  Type enumType = typeof(SubsetMatchingMode);  
  foreach (SubsetMatchingMode mode in Enum.GetValues(enumType))  
  {  
    string modeName = Enum.GetName(enumType, mode);  
    modeName = BreakAtCaps(modeName);  
  
    GrammarBuilder builder = new GrammarBuilder(phrase, mode);  
    Grammar modeGrammar = new Grammar(builder);  
    modeGrammar.Name = modeName;  
    modeGrammar.Enabled = false;  
    grammars.Add(modeGrammar);  
  
    modeChoice.Add(modeName);  
  }  
  
  Grammar choiceGrammar = new Grammar(modeChoice);  
  choiceGrammar.Name = "choice";  
  grammars.Add(choiceGrammar);  
  
  return grammars;  
}  
  
// Insert spaces preceding each uppercase letter in a string.   
private static string BreakAtCaps(string item)  
{  
  if (item == null || item.Length == 0)  
  {  
    return item;  
  }  
  
  StringBuilder sb = new StringBuilder(item[0].ToString());  
  for (int i = 1; i < item.Length; i++)  
  {  
    char c = item[i];  
    if (char.IsUpper(c))  
    {  
      sb.Append(" ");  
    }  
    sb.Append(c);  
  }  
  
  return sb.ToString();  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SubsetMatchingMode" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::GrammarBuilder ^ builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : System.Speech.Recognition.GrammarBuilder * int * int -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder (builder, minRepeat, maxRepeat)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="893d4-193">繰り返される要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-193">The repeated element.</span></span></param>
        <param name="minRepeat"><span data-ttu-id="893d4-194"><paramref name="builder" /> によって定義される要素と一致する入力が、一致を構成するために発生する必要がある最小回数。</span><span class="sxs-lookup"><span data-stu-id="893d4-194">The minimum number of times that input matching the element defined by <paramref name="builder" /> must occur to constitute a match.</span></span></param>
        <param name="maxRepeat"><span data-ttu-id="893d4-195"><paramref name="builder" /> によって定義される要素と一致する入力が、一致を構成するために発生できる最大回数。</span><span class="sxs-lookup"><span data-stu-id="893d4-195">The maximum number of times that input matching the element defined by <paramref name="builder" /> can occur to constitute a match.</span></span></param>
        <summary><span data-ttu-id="893d4-196">繰り返し要素から <see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="893d4-196">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a repeated element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-197">`minRepeat` の値が0の場合、新しい <xref:System.Speech.Recognition.GrammarBuilder> は省略可能な要素を表します。</span><span class="sxs-lookup"><span data-stu-id="893d4-197">If the value of `minRepeat` is 0, then the new <xref:System.Speech.Recognition.GrammarBuilder> represents an optional element.</span></span>  
  
 <span data-ttu-id="893d4-198">`minRepeat` の値は、0以上、`maxRepeat`の値以下である必要があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-198">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-199"><xref:System.Speech.Recognition.SemanticResultValue> または <xref:System.Speech.Recognition.SemanticResultKey> インスタンスを含む <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトに対して繰り返しを指定する場合は、同じキー名または複数のセマンティック要素を持つ重複するセマンティック要素を作成しないようにして、<xref:System.Speech.Recognition.SemanticValue> オブジェクトの <xref:System.Speech.Recognition.SemanticValue.Value%2A> プロパティを繰り返し変更できるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-199">When you specify repeats for <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="893d4-200">このような状況が発生した場合、音声認識エンジンは例外をスローすることがあります。</span><span class="sxs-lookup"><span data-stu-id="893d4-200">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> 
  
   
  
## Examples  
 <span data-ttu-id="893d4-201">次の例では、ピザの注文用に音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-201">The following example creates a speech recognition grammar for ordering a pizza.</span></span> <span data-ttu-id="893d4-202">これは、省略可能な、開始語句、1 ~ 4 トッピング、"ピザ" という語で終了します。</span><span class="sxs-lookup"><span data-stu-id="893d4-202">It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word "pizza".</span></span>  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object from a string array of alternative toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : string * int * int -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder (phrase, minRepeat, maxRepeat)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="893d4-203">繰り返される言葉のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="893d4-203">The repeated sequence of words.</span></span></param>
        <param name="minRepeat"><span data-ttu-id="893d4-204">その句と一致する入力が、一致を構成するために発生する必要がある最小回数。</span><span class="sxs-lookup"><span data-stu-id="893d4-204">The minimum number of times that input matching the phrase must occur to constitute a match.</span></span></param>
        <param name="maxRepeat"><span data-ttu-id="893d4-205">その句と一致する入力が、一致を構成するために発生できる最大回数。</span><span class="sxs-lookup"><span data-stu-id="893d4-205">The maximum number of times that input matching the phrase can occur to constitute a match.</span></span></param>
        <summary><span data-ttu-id="893d4-206"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> の単語のシーケンスから <see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、<see cref="T:System.String" /> を繰り返すことができる回数を指定します。</span><span class="sxs-lookup"><span data-stu-id="893d4-206">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from the sequence of words in a <see cref="T:System.String" /> and specifies how many times the <see cref="T:System.String" /> can be repeated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-207">`minRepeat` の値が0の場合、新しい <xref:System.Speech.Recognition.GrammarBuilder> は省略可能な要素を表します。</span><span class="sxs-lookup"><span data-stu-id="893d4-207">If the value of `minRepeat` is 0, then the new <xref:System.Speech.Recognition.GrammarBuilder> represents an optional element.</span></span>  
  
 <span data-ttu-id="893d4-208">`minRepeat` の値は、0以上、`maxRepeat`の値以下である必要があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-208">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span> <span data-ttu-id="893d4-209">文字列を含む音声認識文法を構築する方法の詳細については、「文字列を使用して[GrammarBuilder 文法を作成する](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-209">For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="893d4-210">次の例では、ピザの注文用に音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-210">The following example creates a speech recognition grammar for ordering a pizza.</span></span> <span data-ttu-id="893d4-211">これは、省略可能な、開始語句、1 ~ 4 トッピング、"ピザ" という語で終了します。</span><span class="sxs-lookup"><span data-stu-id="893d4-211">It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word "pizza".</span></span>  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="893d4-212">2 つの文法要素のシーケンスを含む新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-212">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a sequence of two grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-213">静的 <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> メソッドでは、さまざまな型を組み合わせて、<xref:System.Speech.Recognition.GrammarBuilder>を使用して構築された文法の多様性と柔軟性を実現する別のメカニズムが提供されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-213">The static <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods provide another mechanism by which you can combine various types to create diversity and flexibility in grammars built with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="893d4-214">これらのメソッドは、<xref:System.Speech.Recognition.GrammarBuilder> クラスでも定義されている静的 <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> メソッドに対応しています。</span><span class="sxs-lookup"><span data-stu-id="893d4-214">These methods correspond to the static <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> methods, which are also defined on the <xref:System.Speech.Recognition.GrammarBuilder> class.</span></span> <span data-ttu-id="893d4-215">新しい <xref:System.Speech.Recognition.GrammarBuilder>内の要素の順序は、パラメーターの順序によって決まります。</span><span class="sxs-lookup"><span data-stu-id="893d4-215">The order of the parameters determines the order of the elements in the new <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="893d4-216"><xref:System.Speech.Recognition.GrammarBuilder> は、<xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.SemanticResultKey>、<xref:System.Speech.Recognition.SemanticResultValue>、および[String](https://go.microsoft.com/fwlink/?LinkId=159733)オブジェクトから取得することもできます。</span><span class="sxs-lookup"><span data-stu-id="893d4-216">A <xref:System.Speech.Recognition.GrammarBuilder> can also be obtained from <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and [String](https://go.microsoft.com/fwlink/?LinkId=159733) objects.</span></span> <span data-ttu-id="893d4-217">詳細については、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> と <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> の演算子に関する説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-217">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-218">同じキー名または複数のセマンティック要素を持つ重複するセマンティック要素が含まれている音声認識文法を使用すると、音声認識エンジンは例外をスローし、同じセマンティック要素の値を繰り返し変更する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-218">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> 
  
 <span data-ttu-id="893d4-219">音声認識文法の作成と使用の詳細については、「[音声認識](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-219">For more information about building and using speech recognition grammars, see [Speech Recognition](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.Choices choices, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::Choices ^ choices, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member Add : System.Speech.Recognition.Choices * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (choices, builder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="choices"><span data-ttu-id="893d4-220">代替候補セットを表す、最初の grammer 要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-220">The first grammar element, which represents a set of alternatives.</span></span></param>
        <param name="builder"><span data-ttu-id="893d4-221">2 番目の grammer 要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-221">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="893d4-222"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトが後続している <see cref="T:System.Speech.Recognition.Choices" /> オブジェクトを含んでいる、新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-222">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.Choices" /> object followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="893d4-223"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> 要素が後続している <paramref name="choices" /> 要素のシーケンスの<paramref name="builder" />。</span><span class="sxs-lookup"><span data-stu-id="893d4-223">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="choices" /> element followed by the <paramref name="builder" /> element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-224"><xref:System.Speech.Recognition.GrammarBuilder> は、次のクラスからの暗黙的な変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="893d4-224"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="893d4-225">このメソッドは、上に示したオブジェクトを `builder` パラメーターに受け入れます。</span><span class="sxs-lookup"><span data-stu-id="893d4-225">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="893d4-226">詳細については、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> と <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> の演算子に関する説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-226">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-227"><xref:System.Speech.Recognition.Choices> <xref:System.Speech.Recognition.GrammarBuilder> と、<xref:System.Speech.Recognition.SemanticResultValue> または <xref:System.Speech.Recognition.SemanticResultKey> のインスタンスを含むオブジェクトを結合する場合は、同じキー名または複数のセマンティック要素を持つ重複したセマンティック要素を作成しないようにして、<xref:System.Speech.Recognition.SemanticValue.Value%2A> オブジェクトの <xref:System.Speech.Recognition.SemanticValue> プロパティを繰り返し変更できるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-227">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="893d4-228">このような状況が発生した場合、音声認識エンジンは例外をスローすることがあります。</span><span class="sxs-lookup"><span data-stu-id="893d4-228">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="893d4-229">セマンティック情報が含まれている音声認識文法を構築する方法の詳細については、「 [GrammarBuilder 文法へのセマンティクスの追加](https://msdn.microsoft.com/library/hh361581.aspx)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-229">For more information about building a speech recognition grammar that contains semantic information, see [Add Semantics to a GrammarBuilder Grammar](https://msdn.microsoft.com/library/hh361581.aspx).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder, class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder, System::Speech::Recognition::Choices ^ choices);" />
      <MemberSignature Language="F#" Value="static member Add : System.Speech.Recognition.GrammarBuilder * System.Speech.Recognition.Choices -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (builder, choices)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="893d4-230">最初の文法要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-230">The first grammar element.</span></span></param>
        <param name="choices"><span data-ttu-id="893d4-231">2 番目の文法要素で、代替のセットを表します。</span><span class="sxs-lookup"><span data-stu-id="893d4-231">The second grammar element, which represents a set of alternatives.</span></span></param>
        <summary><span data-ttu-id="893d4-232"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトが後続している <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトを含んでいる、新しい <see cref="T:System.Speech.Recognition.Choices" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-232">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object followed by a <see cref="T:System.Speech.Recognition.Choices" /> object.</span></span></summary>
        <returns><span data-ttu-id="893d4-233"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> 要素が後続している <paramref name="builder" /> 要素のシーケンスの<paramref name="choices" />。</span><span class="sxs-lookup"><span data-stu-id="893d4-233">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> element followed by the <paramref name="choices" /> element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-234"><xref:System.Speech.Recognition.GrammarBuilder> は、次のクラスからの暗黙的な変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="893d4-234"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="893d4-235">このメソッドは、上に示したオブジェクトを `builder` パラメーターに受け入れます。</span><span class="sxs-lookup"><span data-stu-id="893d4-235">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="893d4-236">詳細については、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> と <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> の演算子に関する説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-236">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-237"><xref:System.Speech.Recognition.Choices> <xref:System.Speech.Recognition.GrammarBuilder> と、<xref:System.Speech.Recognition.SemanticResultValue> または <xref:System.Speech.Recognition.SemanticResultKey> のインスタンスを含むオブジェクトを他の文法要素と組み合わせて使用する場合は、同じキー名または複数のセマンティック要素を持つ重複するセマンティック要素を作成しないようにしてください。これにより、<xref:System.Speech.Recognition.SemanticValue.Value%2A> オブジェクトの <xref:System.Speech.Recognition.SemanticValue> プロパティを繰り返し変更することができます。</span><span class="sxs-lookup"><span data-stu-id="893d4-237">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="893d4-238">このような状況が発生した場合、音声認識エンジンは例外をスローすることがあります。</span><span class="sxs-lookup"><span data-stu-id="893d4-238">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> 
  
   
  
## Examples  
 <span data-ttu-id="893d4-239">次の例では、一連の色から*色*を選択して、"背景*色*を設定する" と "背景を*色*に設定する" という2つの語句を認識できる音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-239">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="893d4-240">[文字列](https://go.microsoft.com/fwlink/?LinkId=159733)、<xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.GrammarBuilder> オブジェクトなど、最終的な文法を構築するためにさまざまな型が使用されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-240">Various types are used to build the final grammar, such as [String](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="893d4-241"><xref:System.Speech.Recognition.GrammarBuilder.Add%2A> メソッドの呼び出しでは、明示的なキャスト演算子は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="893d4-241">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder1, class System.Speech.Recognition.GrammarBuilder builder2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (builder1 As GrammarBuilder, builder2 As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder1, System::Speech::Recognition::GrammarBuilder ^ builder2);" />
      <MemberSignature Language="F#" Value="static member Add : System.Speech.Recognition.GrammarBuilder * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (builder1, builder2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder1" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="builder2" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder1"><span data-ttu-id="893d4-242">最初の文法要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-242">The first grammar element.</span></span></param>
        <param name="builder2"><span data-ttu-id="893d4-243">2 番目の grammer 要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-243">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="893d4-244">2 つの <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトのシーケンスを含む新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-244">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a sequence of two <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects.</span></span></summary>
        <returns><span data-ttu-id="893d4-245"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> 要素が後続している <paramref name="builder1" /> 要素のシーケンスの<paramref name="builder2" />。</span><span class="sxs-lookup"><span data-stu-id="893d4-245">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder1" /> element followed by the <paramref name="builder2" /> element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-246"><xref:System.Speech.Recognition.GrammarBuilder> は、次のクラスからの暗黙的な変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="893d4-246"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="893d4-247">このメソッドは、上に示したオブジェクトを `builder1` または `builder2` パラメーターに受け入れます。</span><span class="sxs-lookup"><span data-stu-id="893d4-247">This method accepts the objects listed above for the `builder1` or `builder2` parameter.</span></span>  
  
 <span data-ttu-id="893d4-248">詳細については、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> と <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> の演算子に関する説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-248">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-249"><xref:System.Speech.Recognition.Choices> <xref:System.Speech.Recognition.GrammarBuilder> と、<xref:System.Speech.Recognition.SemanticResultValue> または <xref:System.Speech.Recognition.SemanticResultKey> のインスタンスを含むオブジェクトを他の文法要素と組み合わせて使用する場合は、同じキー名または複数のセマンティック要素を持つ重複するセマンティック要素を作成しないようにしてください。これにより、<xref:System.Speech.Recognition.SemanticValue.Value%2A> オブジェクトの <xref:System.Speech.Recognition.SemanticValue> プロパティを繰り返し変更することができます。</span><span class="sxs-lookup"><span data-stu-id="893d4-249">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="893d4-250">このような状況が発生した場合、音声認識エンジンは例外をスローすることがあります。</span><span class="sxs-lookup"><span data-stu-id="893d4-250">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> 
  
   
  
## Examples  
 <span data-ttu-id="893d4-251">次の例では、一連の色から*色*を選択して、"背景*色*を設定する" と "背景を*色*に設定する" という2つの語句を認識できる音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-251">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="893d4-252">[文字列](https://go.microsoft.com/fwlink/?LinkId=159733)、<xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.GrammarBuilder> オブジェクトなど、最終的な文法を構築するためにさまざまな型が使用されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-252">Various types are used to build the final grammar, such as [String](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="893d4-253"><xref:System.Speech.Recognition.GrammarBuilder.Add%2A> メソッドの呼び出しでは、明示的なキャスト演算子は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="893d4-253">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder, string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (builder As GrammarBuilder, phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder, System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="static member Add : System.Speech.Recognition.GrammarBuilder * string -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (builder, phrase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="893d4-254">最初の文法要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-254">The first grammar element.</span></span></param>
        <param name="phrase"><span data-ttu-id="893d4-255">2 番目の文法要素で、言葉のシーケンスを表します。</span><span class="sxs-lookup"><span data-stu-id="893d4-255">The second grammar element, which represents a sequence of words.</span></span></param>
        <summary><span data-ttu-id="893d4-256"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトとその後ろにフレーズを含む新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-256">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object followed by a phrase.</span></span></summary>
        <returns><span data-ttu-id="893d4-257"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> 要素が後続している <paramref name="builder" /> 要素のシーケンスの<paramref name="phrase" />。</span><span class="sxs-lookup"><span data-stu-id="893d4-257">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> element followed by the <paramref name="phrase" /> element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-258"><xref:System.Speech.Recognition.GrammarBuilder> は、次のクラスからの暗黙的な変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="893d4-258"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="893d4-259">このメソッドは、上に示したオブジェクトを `builder` パラメーターに受け入れます。</span><span class="sxs-lookup"><span data-stu-id="893d4-259">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="893d4-260">詳細については、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> と <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> の演算子に関する説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-260">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="893d4-261">次の例では、一連の色から*色*を選択して、"背景*色*を設定する" と "背景を*色*に設定する" という2つの語句を認識できる音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-261">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="893d4-262">[文字列](https://go.microsoft.com/fwlink/?LinkId=159733)、<xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.GrammarBuilder> オブジェクトなど、最終的な文法を構築するためにさまざまな型が使用されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-262">Various types are used to build the final grammar, such as [String](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="893d4-263"><xref:System.Speech.Recognition.GrammarBuilder.Add%2A> メソッドの呼び出しでは、明示的なキャスト演算子は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="893d4-263">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (string phrase, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(string phrase, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (phrase As String, builder As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::String ^ phrase, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member Add : string * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (phrase, builder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="893d4-264">最初の文法要素で、言葉のシーケンスを表します。</span><span class="sxs-lookup"><span data-stu-id="893d4-264">The first grammar element, which represents a sequence of words.</span></span></param>
        <param name="builder"><span data-ttu-id="893d4-265">2 番目の grammer 要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-265">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="893d4-266">フレーズとその後ろに <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトを含む新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-266">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a phrase followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="893d4-267"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> 要素が後続している <paramref name="phrase" /> 要素のシーケンスの<paramref name="builder" />。</span><span class="sxs-lookup"><span data-stu-id="893d4-267">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="phrase" /> element followed by the <paramref name="builder" /> element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-268"><xref:System.Speech.Recognition.GrammarBuilder> は、次のクラスからの暗黙的な変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="893d4-268"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="893d4-269">このメソッドは、上に示したオブジェクトを `builder` パラメーターに受け入れます。</span><span class="sxs-lookup"><span data-stu-id="893d4-269">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="893d4-270">詳細については、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> と <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> の演算子に関する説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-270">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="893d4-271">次の例では、一連の色から*色*を選択して、"背景*色*を設定する" と "背景を*色*に設定する" という2つの語句を認識できる音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-271">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="893d4-272">[文字列](https://go.microsoft.com/fwlink/?LinkId=159733)、<xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.GrammarBuilder> オブジェクトなど、最終的な文法を構築するためにさまざまな型が使用されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-272">Various types are used to build the final grammar, such as [String](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="893d4-273"><xref:System.Speech.Recognition.GrammarBuilder.Add%2A> メソッドの呼び出しでは、明示的なキャスト演算子は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="893d4-273">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Append">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="893d4-274">文法要素の現在のシーケンスに文法要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-274">Appends a grammar element to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-275">これらのメソッドを使用して、既存の <xref:System.Speech.Recognition.GrammarBuilder>に文法要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-275">Use these methods to append grammar elements to an existing <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="893d4-276">文法要素を作成するときに、それらを既存のビルダーに追加して、音声認識文法の制約を段階的に開発することができます。</span><span class="sxs-lookup"><span data-stu-id="893d4-276">As you create grammar elements, you can append them to the existing builder to progressively develop the constraints for a speech recognition grammar.</span></span> <span data-ttu-id="893d4-277">各要素は、要素の現在のシーケンスの末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-277">Each element is added to the end of the current sequence of elements.</span></span>  
  
 <span data-ttu-id="893d4-278">このメソッドには、<xref:System.Speech.Recognition.GrammarBuilder>、<xref:System.String>、<xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.SemanticResultKey>、および <xref:System.Speech.Recognition.SemanticResultValue> オブジェクトを追加するためのオーバーロードがあります。</span><span class="sxs-lookup"><span data-stu-id="893d4-278">This method has overloads for appending <xref:System.Speech.Recognition.GrammarBuilder>, <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, and <xref:System.Speech.Recognition.SemanticResultValue> objects.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-279">同じキー名または複数のセマンティック要素を持つ重複するセマンティック要素が含まれている音声認識文法を使用すると、音声認識エンジンは例外をスローし、同じセマンティック要素の値を繰り返し変更する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-279">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> 
  
 <span data-ttu-id="893d4-280">音声認識文法の作成と使用の詳細については、「[音声認識](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-280">For more information about building and using speech recognition grammars, see [Speech Recognition](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.Choices alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.Choices alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (alternateChoices As Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::Choices ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.Choices -&gt; unit" Usage="grammarBuilder.Append alternateChoices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="alternateChoices"><span data-ttu-id="893d4-281">追加する代替のセット。</span><span class="sxs-lookup"><span data-stu-id="893d4-281">The set of alternatives to append.</span></span></param>
        <summary><span data-ttu-id="893d4-282">文法要素の現在のシーケンスに代替のセットを追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-282">Appends a set of alternatives to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-283">要素の現在のシーケンスの末尾に `alternateChoices` が追加されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-283">`alternateChoices` is added to the end of the current sequence of elements.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-284"><xref:System.Speech.Recognition.SemanticResultValue> または <xref:System.Speech.Recognition.SemanticResultKey> インスタンスを含む <xref:System.Speech.Recognition.Choices> オブジェクトを <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトに追加する場合は、同じキー名または複数のセマンティック要素を持つ重複したセマンティック要素を作成しないようにして、<xref:System.Speech.Recognition.SemanticValue.Value%2A> オブジェクトの <xref:System.Speech.Recognition.SemanticValue> プロパティを繰り返し変更できるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-284">When you append <xref:System.Speech.Recognition.Choices> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="893d4-285">このような状況が発生した場合、音声認識エンジンは例外をスローすることがあります。</span><span class="sxs-lookup"><span data-stu-id="893d4-285">The speech recognizer can throw an exception if it encounters these circumstances.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="893d4-286">次の例では、"phone" という単語は任意で、"phone" という単語が任意である語句について、音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-286">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="893d4-287">この例では、<xref:System.Speech.Recognition.GrammarBuilder.Append%2A> メソッドの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="893d4-287">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.GrammarBuilder -&gt; unit" Usage="grammarBuilder.Append builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="893d4-288">追加する文法要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-288">The grammar element to append.</span></span></param>
        <summary><span data-ttu-id="893d4-289">文法要素の現在のシーケンスに文法要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-289">Appends a grammar element to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-290">文法要素の現在のシーケンスの末尾に `builder` が追加されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-290">`builder` is added to the end of the current sequence of grammar elements.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="893d4-291"><xref:System.Speech.Recognition.SemanticResultValue> または <xref:System.Speech.Recognition.SemanticResultKey> インスタンスを含む <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトを <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトに追加する場合は、同じキー名または複数のセマンティック要素を持つ重複したセマンティック要素を作成しないようにして、<xref:System.Speech.Recognition.SemanticValue.Value%2A> オブジェクトの <xref:System.Speech.Recognition.SemanticValue> プロパティを繰り返し変更できるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-291">When you append <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="893d4-292">このような状況が発生した場合、音声認識エンジンは例外をスローすることがあります。</span><span class="sxs-lookup"><span data-stu-id="893d4-292">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> 
  
   
  
## Examples  
 <span data-ttu-id="893d4-293">次の例では、"phone" という単語は任意で、"phone" という単語が任意である語句について、音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-293">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="893d4-294"><xref:System.Speech.Recognition.GrammarBuilder> オブジェクトと <xref:System.Speech.Recognition.Choices> オブジェクトを使用して文法を構築します。</span><span class="sxs-lookup"><span data-stu-id="893d4-294"><xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar.</span></span> <span data-ttu-id="893d4-295">この例では、<xref:System.Speech.Recognition.GrammarBuilder.Append%2A> メソッドの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="893d4-295">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.SemanticResultKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.SemanticResultKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (key As SemanticResultKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::SemanticResultKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.SemanticResultKey -&gt; unit" Usage="grammarBuilder.Append key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="893d4-296">追加するセマンティクス キー。</span><span class="sxs-lookup"><span data-stu-id="893d4-296">The semantic key to append.</span></span></param>
        <summary><span data-ttu-id="893d4-297">文法要素の現在のシーケンスにセマンティクス キーを追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-297">Appends a semantic key to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-298">要素の現在のシーケンスの末尾に `key` が追加されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-298">`key` is added to the end of the current sequence of elements.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-299"><xref:System.Speech.Recognition.SemanticResultValue> または <xref:System.Speech.Recognition.SemanticResultKey> のインスタンスを <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトに追加する場合は、同じキー名または複数のセマンティック要素を持つ重複するセマンティック要素を作成しないようにしてください。この場合、<xref:System.Speech.Recognition.SemanticValue> オブジェクトの <xref:System.Speech.Recognition.SemanticValue.Value%2A> プロパティを繰り返し変更することができます。</span><span class="sxs-lookup"><span data-stu-id="893d4-299">When you append  <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="893d4-300">このような状況が発生した場合、音声認識エンジンは例外をスローすることがあります。</span><span class="sxs-lookup"><span data-stu-id="893d4-300">The speech recognizer can throw an exception if it encounters these circumstances.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="893d4-301">次の例は、フライトの発信元と送信先の市区町村を選択するためのコンソールアプリケーションの一部です。</span><span class="sxs-lookup"><span data-stu-id="893d4-301">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="893d4-302">アプリケーションでは、"マイアミからシカゴに向けて飛ぶことができます" などの語句を認識します。</span><span class="sxs-lookup"><span data-stu-id="893d4-302">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span> <span data-ttu-id="893d4-303"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベントのハンドラーは、<xref:System.Speech.Recognition.SemanticResultKey> を使用して、原点と宛先の都市の <xref:System.Speech.Recognition.SemanticResultValue> で指定されている空港コードを抽出します。</span><span class="sxs-lookup"><span data-stu-id="893d4-303">The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a Choices object and add  cities and airport codes  
        // using SemanticResultValue objects.  
        Choices cities = new Choices();  
        cities.Add(new SemanticResultValue("Chicago", "ORD"));  
        cities.Add(new SemanticResultValue("Boston", "BOS"));  
        cities.Add(new SemanticResultValue("Miami", "MIA"));  
        cities.Add(new SemanticResultValue("Dallas", "DFW"));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Load the grammar object and start recognition.  
        recognizer.LoadGrammarAsync(bookFlight);  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.SemanticResultValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.SemanticResultValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (value As SemanticResultValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::SemanticResultValue ^ value);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.SemanticResultValue -&gt; unit" Usage="grammarBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="893d4-304">追加するセマンティクス値。</span><span class="sxs-lookup"><span data-stu-id="893d4-304">The semantic value to append.</span></span></param>
        <summary><span data-ttu-id="893d4-305">文法要素の現在のシーケンスにセマンティクス値を追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-305">Appends a semantic value to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-306">要素の現在のシーケンスの末尾に `value` が追加されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-306">`value` is added to the end of the current sequence of elements.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-307"><xref:System.Speech.Recognition.SemanticResultValue> または <xref:System.Speech.Recognition.SemanticResultKey> のインスタンスを <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトに追加する場合は、同じキー名または複数のセマンティック要素を持つ重複するセマンティック要素を作成しないようにしてください。この場合、<xref:System.Speech.Recognition.SemanticValue> オブジェクトの <xref:System.Speech.Recognition.SemanticValue.Value%2A> プロパティを繰り返し変更することができます。</span><span class="sxs-lookup"><span data-stu-id="893d4-307">When you append  <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="893d4-308">このような状況が発生した場合、音声認識エンジンは例外をスローすることがあります。</span><span class="sxs-lookup"><span data-stu-id="893d4-308">The speech recognizer can throw an exception if it encounters these circumstances.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="893d4-309">次の例は、フライトの発信元と送信先の市区町村を選択するためのコンソールアプリケーションの一部です。</span><span class="sxs-lookup"><span data-stu-id="893d4-309">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="893d4-310">アプリケーションでは、"マイアミからシカゴに向けて飛ぶことができます" などの語句を認識します。</span><span class="sxs-lookup"><span data-stu-id="893d4-310">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span> <span data-ttu-id="893d4-311"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベントのハンドラーは、<xref:System.Speech.Recognition.SemanticResultKey> を使用して、原点と宛先の都市の <xref:System.Speech.Recognition.SemanticResultValue> で指定されている空港コードを抽出します。</span><span class="sxs-lookup"><span data-stu-id="893d4-311">The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create GrammarBuilder objects and append SemanticResultValue objects   
        // that contain cities and airport codes.  
  
        GrammarBuilder chicago = new GrammarBuilder();  
        chicago.Append(new SemanticResultValue("Chicago", "ORD"));  
  
        GrammarBuilder boston = new GrammarBuilder();  
        boston.Append(new SemanticResultValue("Boston", "BOS"));  
  
        GrammarBuilder miami = new GrammarBuilder();  
        miami.Append(new SemanticResultValue("Miami", "MIA"));  
  
        GrammarBuilder dallas = new GrammarBuilder();  
        dallas.Append(new SemanticResultValue("Dallas", "DFW"));  
  
        // Create a Choices object and add the cities using implicit conversion from   
        // SemanticResultValue to GrammarBuilder.  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Load the grammar object and start recognition.  
        recognizer.LoadGrammarAsync(bookFlight);  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="member this.Append : string -&gt; unit" Usage="grammarBuilder.Append phrase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="893d4-312">追加する言葉のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="893d4-312">The sequence of words to append.</span></span></param>
        <summary><span data-ttu-id="893d4-313">文法要素の現在のシーケンスに語句を追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-313">Appends a phrase to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-314">要素の現在のシーケンスの末尾に `phrase` が追加されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-314">`phrase` is added to the end of the current sequence of elements.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase, valuetype System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String, subsetMatchingCriteria As SubsetMatchingMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase, System::Speech::Recognition::SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="F#" Value="member this.Append : string * System.Speech.Recognition.SubsetMatchingMode -&gt; unit" Usage="grammarBuilder.Append (phrase, subsetMatchingCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="subsetMatchingCriteria" Type="System.Speech.Recognition.SubsetMatchingMode" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="893d4-315">追加する言葉のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="893d4-315">The sequence of words to append.</span></span></param>
        <param name="subsetMatchingCriteria"><span data-ttu-id="893d4-316">句を認識するために文法が使用する一致モード。</span><span class="sxs-lookup"><span data-stu-id="893d4-316">The matching mode the grammar uses to recognize the phrase.</span></span></param>
        <summary><span data-ttu-id="893d4-317">文法要素の現在のシーケンスに、語句のサブセットの要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-317">Appends an element for a subset of a phrase to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-318">サブセット要素は、要素の現在のシーケンスの末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-318">The subset element is added to the end of the current sequence of elements.</span></span> <span data-ttu-id="893d4-319">文字列を使用して音声認識文法を構築する方法の詳細については、「文字列を使用して[GrammarBuilder 文法を作成する](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-319">For more information about building a speech recognition grammar using strings, see [Using Strings to Create a GrammarBuilder Grammar](https://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
 <span data-ttu-id="893d4-320">サブセット一致モードの使用方法の詳細については、「<xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-320">For detailed information on the use of subset matching modes, see <xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="893d4-321">次の例では、<xref:System.Speech.Recognition.SubsetMatchingMode> 値ごとに音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-321">The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value.</span></span> <span data-ttu-id="893d4-322">たとえば、生成された `OrderedSubset` 文法は、"3 4 5" および "1 3 5" という語句を認識しますが、文法 `Subsequence` は "3 4 5" という語句を認識しますが、"1 3 5" という語句は認識しません。</span><span class="sxs-lookup"><span data-stu-id="893d4-322">For example, the generated grammar `OrderedSubset` recognizes the phrases, "three four five" and "one three five", and the grammar `Subsequence` recognizes the phrase "three four five", but not the phrase, "one three five".</span></span>  
  
```csharp  
  
private Grammar[] CreateSubsetMatchTest()  
{  
  List<Grammar> grammars = new List<Grammar>(4);  
  
  string phrase = "one two three four five six";  
  foreach (SubsetMatchingMode mode in  
    Enum.GetValues(typeof(SubsetMatchingMode)))  
  {  
    GrammarBuilder gb = new GrammarBuilder();  
    gb.Append(phrase, mode);  
  
    Grammar grammar = new Grammar(gb);  
    grammar.Name = mode.ToString();  
    grammars.Add(grammar);  
  }  
  
  return grammars.ToArray();  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.GrammarBuilder builder, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (builder As GrammarBuilder, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::GrammarBuilder ^ builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.GrammarBuilder * int * int -&gt; unit" Usage="grammarBuilder.Append (builder, minRepeat, maxRepeat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="893d4-323">追加する繰り返される文法要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-323">The repeated grammar element to append.</span></span></param>
        <param name="minRepeat"><span data-ttu-id="893d4-324"><paramref name="builder" /> によって定義される要素と一致する入力が、一致を構成するために発生する必要がある最小回数。</span><span class="sxs-lookup"><span data-stu-id="893d4-324">The minimum number of times that input matching the element defined by <paramref name="builder" /> must occur to constitute a match.</span></span></param>
        <param name="maxRepeat"><span data-ttu-id="893d4-325"><paramref name="builder" /> によって定義される要素と一致する入力が、一致を構成するために発生できる最大回数。</span><span class="sxs-lookup"><span data-stu-id="893d4-325">The maximum number of times that input matching the element defined by <paramref name="builder" /> can occur to constitute a match.</span></span></param>
        <summary><span data-ttu-id="893d4-326">文法要素の現在のシーケンスに繰り返される文法要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-326">Appends a repeated grammar element to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-327">`minRepeat` の値は、0以上、`maxRepeat`の値以下である必要があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-327">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-328"><xref:System.Speech.Recognition.SemanticResultValue> または <xref:System.Speech.Recognition.SemanticResultKey> インスタンスを含む <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトを <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトに追加する場合は、同じキー名または複数のセマンティック要素を持つ重複したセマンティック要素を作成しないようにして、<xref:System.Speech.Recognition.SemanticValue.Value%2A> オブジェクトの <xref:System.Speech.Recognition.SemanticValue> プロパティを繰り返し変更できるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-328">When you append <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="893d4-329">このような状況が発生した場合、音声認識エンジンは例外をスローすることがあります。</span><span class="sxs-lookup"><span data-stu-id="893d4-329">The speech recognizer can throw an exception if it encounters these circumstances.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="893d4-330">次の例では、"phone" という単語は任意で、"phone" という単語が任意である語句について、音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-330">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="893d4-331"><xref:System.Speech.Recognition.GrammarBuilder> オブジェクトと <xref:System.Speech.Recognition.Choices> オブジェクトを使用して文法を構築します。</span><span class="sxs-lookup"><span data-stu-id="893d4-331"><xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar.</span></span> <span data-ttu-id="893d4-332">この例では、<xref:System.Speech.Recognition.GrammarBuilder.Append%2A> メソッドの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="893d4-332">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="F#" Value="member this.Append : string * int * int -&gt; unit" Usage="grammarBuilder.Append (phrase, minRepeat, maxRepeat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="893d4-333">追加する繰り返される言葉のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="893d4-333">The repeated sequence of words to append.</span></span></param>
        <param name="minRepeat"><span data-ttu-id="893d4-334"><paramref name="phrase" /> と一致する入力が、一致を構成するために発生する必要がある最小回数。</span><span class="sxs-lookup"><span data-stu-id="893d4-334">The minimum number of times that input matching <paramref name="phrase" /> must occur to constitute a match.</span></span></param>
        <param name="maxRepeat"><span data-ttu-id="893d4-335"><paramref name="phrase" /> と一致する入力が、一致を構成するために発生できる最大回数。</span><span class="sxs-lookup"><span data-stu-id="893d4-335">The maximum number of times that input matching <paramref name="phrase" /> can occur to constitute a match.</span></span></param>
        <summary><span data-ttu-id="893d4-336">文法要素の現在のシーケンスに繰り返される語句を追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-336">Appends a repeated phrase to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-337">`minRepeat` の値は、0以上、`maxRepeat`の値以下である必要があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-337">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="893d4-338">次の例では、"phone" という単語は任意で、"phone" という単語が任意である語句について、音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-338">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="893d4-339"><xref:System.Speech.Recognition.GrammarBuilder> オブジェクトと <xref:System.Speech.Recognition.Choices> オブジェクトを使用して文法を構築します。</span><span class="sxs-lookup"><span data-stu-id="893d4-339"><xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar.</span></span> <span data-ttu-id="893d4-340">この例では、<xref:System.Speech.Recognition.GrammarBuilder.Append%2A> メソッドの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="893d4-340">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendDictation">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="893d4-341">文法要素の現在のシーケンスに口述文法を追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-341">Appends a dictation grammar to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-342"><xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A> メソッドを使用すると、ディクテーションの文法をルールとして <xref:System.Speech.Recognition.GrammarBuilder>に追加できます。</span><span class="sxs-lookup"><span data-stu-id="893d4-342">The <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A> methods allow you to append a dictation grammar as a rule to a <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="893d4-343">ディクテーションの文法の詳細については、「<xref:System.Speech.Recognition.DictationGrammar>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-343">For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendDictation">
      <MemberSignature Language="C#" Value="public void AppendDictation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendDictation() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendDictation ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendDictation();" />
      <MemberSignature Language="F#" Value="member this.AppendDictation : unit -&gt; unit" Usage="grammarBuilder.AppendDictation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="893d4-344">文法要素の現在のシーケンスに既定の口述文法を追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-344">Appends the default dictation grammar to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-345">ディクテーションの文法の詳細については、「<xref:System.Speech.Recognition.DictationGrammar>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-345">For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="893d4-346">次の例では、ディクテーションを組み込んだ音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-346">The following example creates a speech recognition grammar that incorporates dictation.</span></span>  
  
```csharp  
  
GrammarBuilder builder = new GrammarBuilder();  
builder.Append("begin");  
builder.AppendDictation();  
builder.Append("end");  
Grammar grammarWithDictation = new Grammar(builder);  
grammarWithDictation.Name = "Grammar with Dictation";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DictationGrammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendDictation">
      <MemberSignature Language="C#" Value="public void AppendDictation (string category);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendDictation(string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendDictation (category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendDictation(System::String ^ category);" />
      <MemberSignature Language="F#" Value="member this.AppendDictation : string -&gt; unit" Usage="grammarBuilder.AppendDictation category" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category"><span data-ttu-id="893d4-347">追加する口述文法のカテゴリ。</span><span class="sxs-lookup"><span data-stu-id="893d4-347">The category of the dictation grammar to append.</span></span></param>
        <summary><span data-ttu-id="893d4-348">文法要素の現在のシーケンスに指定された口述文法を追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-348">Appends the specified dictation grammar to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-349">スペルディクテーションの文法を使用するには、`category` を `spelling`に設定します。</span><span class="sxs-lookup"><span data-stu-id="893d4-349">To use the spelling dictation grammar, set `category` to `spelling`.</span></span>  
  
 <span data-ttu-id="893d4-350">ディクテーションの文法の詳細については、「<xref:System.Speech.Recognition.DictationGrammar>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-350">For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="893d4-351">次の例では、スペルディクテーションの文法規則を組み込んだ音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-351">The following example creates a speech recognition grammar that incorporates the spelling dictation grammar rules.</span></span>  
  
```csharp  
  
GrammarBuilder builder = new GrammarBuilder();  
builder.Append("begin");  
builder.AppendDictation("spelling");  
builder.Append("end");  
Grammar grammarWithDictation = new Grammar(builder);  
grammarWithDictation.Name = "Grammar with Dictation";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DictationGrammar" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendRuleReference">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="893d4-352">文法要素の現在のシーケンスに文法ファイルまたは文法ルールを追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-352">Appends a grammar file or a grammar rule to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-353"><xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> メソッドでは、ファイルから文法ファイルまたは文法規則を追加できます。</span><span class="sxs-lookup"><span data-stu-id="893d4-353">The <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> methods can append a grammar file or a grammar rule from a file.</span></span> <span data-ttu-id="893d4-354">これらのメソッドを使用すると、アプリケーションは、事前に配置された、または公開されている文法規則を利用できます。</span><span class="sxs-lookup"><span data-stu-id="893d4-354">These methods allow applications to make use of pre-deployed or publicly available grammar rules.</span></span> <span data-ttu-id="893d4-355">アプリケーションは、指定された文法ファイルの場所に対する読み取りアクセス権を持っている必要があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-355">The application must have read access to the location of specified grammar files.</span></span>  
  
 <span data-ttu-id="893d4-356">これらのメソッドは、次の形式から音声認識の文法を読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="893d4-356">These methods can read a speech recognition grammar from the following formats.</span></span>  
  
-   <span data-ttu-id="893d4-357">W3C[音声認識文法仕様 (SRGS) バージョン 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)に準拠する XML フォーマットファイル</span><span class="sxs-lookup"><span data-stu-id="893d4-357">XML-format files that conform to the W3C [Speech Recognition Grammar Specification (SRGS) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)</span></span>  
  
-   <span data-ttu-id="893d4-358">Microsoft 音声認識文法バイナリ形式 (cfg ファイル拡張子) に準拠するバイナリファイル</span><span class="sxs-lookup"><span data-stu-id="893d4-358">Binary files that conform to the Microsoft Speech Recognition Grammar Binary Format (.cfg file extension)</span></span>  
  
 <span data-ttu-id="893d4-359">XML 形式の SRGS 文法ファイルを拡張子が cfg のバイナリ文法ファイルにコンパイルすると、特に文法で多数の単語や語句を認識する必要がある場合に、検索によって使用される時間が短縮されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-359">Compiling an XML-format SRGS grammar file to a binary grammar file with the .cfg extension can reduce the time consumed by searches for a match, especially if the grammar requires recognition of a large number of words and phrases.</span></span> <span data-ttu-id="893d4-360">SRGS 文法を CFG バイナリ形式にコンパイルする方法の詳細については、「<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-360">For information about compiling SRGS grammars to the CFG binary format, see <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendRuleReference">
      <MemberSignature Language="C#" Value="public void AppendRuleReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendRuleReference(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendRuleReference (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendRuleReference(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendRuleReference : string -&gt; unit" Usage="grammarBuilder.AppendRuleReference path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="893d4-361">サポートされている形式で音声認識文法を記述するファイルのパスまたは URI (Universal Resource Identifier)。</span><span class="sxs-lookup"><span data-stu-id="893d4-361">The path or Universal Resource Identifier (URI) of the file that describes a speech recognition grammar in a supported format.</span></span></param>
        <summary><span data-ttu-id="893d4-362">文法要素の現在のシーケンスに文法定義ファイルを追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-362">Appends a grammar definition file to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-363">`path` 引数によって提供される URI は、ローカルまたはリモートにすることができます。</span><span class="sxs-lookup"><span data-stu-id="893d4-363">The URI provided by the `path` argument may be local or remote.</span></span> <span data-ttu-id="893d4-364">アプリケーションは、指定された文法ファイルの場所に対する読み取りアクセス権を持っている必要があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-364">The application must have read access to the location of specified grammar files.</span></span>  
  
 <span data-ttu-id="893d4-365">W3C 音声認識文法仕様 (SRGS) 表現では、ルート規則を定義できます。</span><span class="sxs-lookup"><span data-stu-id="893d4-365">A W3C Speech Recognition Grammar Specification (SRGS) representation can define a root rule.</span></span> <span data-ttu-id="893d4-366">このメソッドは、ルート規則で始まる文法を文法要素の現在のシーケンスに追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-366">This method appends the grammar, beginning with its root rule, to the current sequence of grammar elements.</span></span> <span data-ttu-id="893d4-367">特定の文法規則を追加するには、<xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="893d4-367">To append a specific grammar rule, use the <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="893d4-368">次C#の例では、ローカルの SRGS ファイルである `Cities` という名前の規則を使用する音声認識文法を作成します。 grxml.</span><span class="sxs-lookup"><span data-stu-id="893d4-368">The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml.</span></span> <span data-ttu-id="893d4-369">次のC#コード例の下に、都市. grxml ファイルの内容が表示されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-369">The content of the cities.grxml file appears below the C# code example.</span></span>  
  
```csharp  
  
private static Grammar CreateCitiesGrammar1()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.AppendRuleReference("file://c:/temp/cities.grxml");  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "Cities Grammar 1";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-16" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.grxml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendRuleReference">
      <MemberSignature Language="C#" Value="public void AppendRuleReference (string path, string rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendRuleReference(string path, string rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendRuleReference (path As String, rule As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendRuleReference(System::String ^ path, System::String ^ rule);" />
      <MemberSignature Language="F#" Value="member this.AppendRuleReference : string * string -&gt; unit" Usage="grammarBuilder.AppendRuleReference (path, rule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="rule" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="893d4-370">サポートされている形式で音声認識文法を記述するファイルのファイル パスまたは URI (Universal Resource Identifier)。</span><span class="sxs-lookup"><span data-stu-id="893d4-370">The file path or Universal Resource Identifier (URI) of the file that describes a speech recognition grammar in a supported format.</span></span></param>
        <param name="rule"><span data-ttu-id="893d4-371">追加するルールの識別子、または文法ファイルの既定のルート ルールを追加する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="893d4-371">The identifier of the rule to append, or <see langword="null" /> to append the default root rule of the grammar file.</span></span></param>
        <summary><span data-ttu-id="893d4-372">文法要素の現在のシーケンスに文法定義ファイルの指定されたルールを追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-372">Appends the specified rule of a grammar definition file to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-373">`path` 引数によって提供される URI は、ローカルまたはリモートにすることができます。</span><span class="sxs-lookup"><span data-stu-id="893d4-373">The URI provided by the `path` argument may be local or remote.</span></span> <span data-ttu-id="893d4-374">アプリケーションは、指定された文法ファイルの場所に対する読み取りアクセス権を持っている必要があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-374">The application must have read access to the location of specified grammar files.</span></span>  
  
 <span data-ttu-id="893d4-375"><xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> メソッドを使用して、ルートルールで始まる文法ファイルを追加できます。</span><span class="sxs-lookup"><span data-stu-id="893d4-375">You can use the use the <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> method to append a grammar file beginning with its root rule.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="893d4-376">次C#の例では、ローカルの SRGS ファイルである `Cities` という名前の規則を使用する音声認識文法を作成します。 grxml.</span><span class="sxs-lookup"><span data-stu-id="893d4-376">The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml.</span></span> <span data-ttu-id="893d4-377">次のC#コード例の下に、都市. grxml ファイルの内容が表示されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-377">The content of the cities.grxml file appears below the C# code example.</span></span>  
  
```csharp  
  
private static Grammar CreateCitiesGrammar2()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.Append("Does");  
  builder.AppendRuleReference(@"c:\temp\cities.grxml", "Cities");  
  builder.Append("have a shuttle");  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.grxml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendWildcard">
      <MemberSignature Language="C#" Value="public void AppendWildcard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendWildcard() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendWildcard ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendWildcard();" />
      <MemberSignature Language="F#" Value="member this.AppendWildcard : unit -&gt; unit" Usage="grammarBuilder.AppendWildcard " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="893d4-378">文法要素の現在のシーケンスに、すべての入力に一致する認識文法要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="893d4-378">Appends a recognition grammar element that matches any input to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-379">ワイルドカード要素は、要素の現在のシーケンスの末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-379">The wildcard element is added to the end of the current sequence of elements.</span></span>  
  
 <span data-ttu-id="893d4-380">ワイルドカード要素は、読み上げられた単語と一致します。</span><span class="sxs-lookup"><span data-stu-id="893d4-380">The wildcard element matches any spoken word.</span></span> <span data-ttu-id="893d4-381">バックグラウンドノイズや無音には一致しません。</span><span class="sxs-lookup"><span data-stu-id="893d4-381">It does not match background noise or silence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="893d4-382">次の例では、パスワード入力をワイルドカードとして受け取る文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-382">The following example creates a grammar that accepts password input as a wildcard.</span></span> <span data-ttu-id="893d4-383">この例では、パスワード入力を検証する文法に <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> イベントハンドラーをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="893d4-383">The example attaches a <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> event handler to the grammar that validates the password input.</span></span>  
  
```csharp  
private Grammar CreatePasswordGrammar()  
{  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey passwordKey =  
    new SemanticResultKey("Password", wildcardBuilder);  
  
  GrammarBuilder passwordBuilder =  
    new GrammarBuilder("My Password is");  
  passwordBuilder.Append(passwordKey);  
  
  Grammar passwordGrammar = new Grammar(passwordBuilder);  
  passwordGrammar.Name = "Password input";  
  
  passwordGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      PasswordInputHandler);  
  
  return passwordGrammar;  
}  
  
// Handle the SpeechRecognized event for the password grammar.  
private void PasswordInputHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  SemanticValue semantics = e.Result.Semantics;  
  
  if (semantics.ContainsKey("Password"))  
  {  
    RecognizedAudio passwordAudio =  
      result.GetAudioForWordRange(  
        result.Words[3], result.Words[result.Words.Count - 1]);  
  
    if (IsValidPassword(passwordAudio))  
    {  
      Console.WriteLine("Password accepted.");  
  
      // Add code to handle a valid password here.  
    }  
    else  
    {  
      Console.WriteLine("Invalid password.");  
  
      // Add code to handle an invalid password here.  
    }  
  }  
}  
  
// Validate the password input.   
private bool IsValidPassword(RecognizedAudio passwordAudio)  
{  
  Console.WriteLine("Validating password.");  
  
  // Add password validation code here.  
  
  return false;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.GrammarBuilder.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Recognition.GrammarBuilder.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="893d4-384">音声認識文法のカルチャを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="893d4-384">Gets or sets the culture of the speech recognition grammar.</span></span></summary>
        <value><span data-ttu-id="893d4-385"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> のカルチャ。</span><span class="sxs-lookup"><span data-stu-id="893d4-385">The culture of the <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span></span> <span data-ttu-id="893d4-386">既定では、スレッドの <see cref="P:System.Threading.Thread.CurrentUICulture" /> プロパティが実行されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-386">The default is the executing thread's <see cref="P:System.Threading.Thread.CurrentUICulture" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-387"><xref:System.Speech.Recognition.Grammar.%23ctor%2A> コンストラクターは、対応するカルチャの音声認識エンジンで使用できる <xref:System.Speech.Recognition.Grammar> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-387">The <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor creates a <xref:System.Speech.Recognition.Grammar> object that can be used by a speech recognizer of the corresponding culture.</span></span> <span data-ttu-id="893d4-388">文法コンストラクターにパラメーターとして指定された <xref:System.Speech.Recognition.GrammarBuilder> の <xref:System.Speech.Recognition.GrammarBuilder.Culture%2A> プロパティのみが、結果として得られる音声認識文法のカルチャを設定するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-388">Only the <xref:System.Speech.Recognition.GrammarBuilder.Culture%2A> property of the <xref:System.Speech.Recognition.GrammarBuilder> that is provided as the parameter to the Grammar constructor is used to set the culture of the resulting speech recognition grammar.</span></span>  
  
 <span data-ttu-id="893d4-389">Microsoft Windows とシステム。 Speech API 有効な国コードをすべて受け入れます。</span><span class="sxs-lookup"><span data-stu-id="893d4-389">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="893d4-390">`Culture` プロパティで指定された言語を使用して音声認識を実行するには、その言語の国コードをサポートする音声認識エンジンがインストールされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-390">To perform speech recognition using the language specified in the `Culture` property, a speech recognition engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="893d4-391">Microsoft Windows 7 に付属している音声認識エンジンは、次の言語の国コードを使用して動作します。</span><span class="sxs-lookup"><span data-stu-id="893d4-391">The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.</span></span>  
  
-   <span data-ttu-id="893d4-392">en-GB.</span><span class="sxs-lookup"><span data-stu-id="893d4-392">en-GB.</span></span> <span data-ttu-id="893d4-393">ウェールズ語 (イギリス)</span><span class="sxs-lookup"><span data-stu-id="893d4-393">English (United Kingdom)</span></span>  
  
-   <span data-ttu-id="893d4-394">en-US.</span><span class="sxs-lookup"><span data-stu-id="893d4-394">en-US.</span></span> <span data-ttu-id="893d4-395">英語 (U.S.)</span><span class="sxs-lookup"><span data-stu-id="893d4-395">English (United States)</span></span>  
  
-   <span data-ttu-id="893d4-396">de-de.</span><span class="sxs-lookup"><span data-stu-id="893d4-396">de-DE.</span></span> <span data-ttu-id="893d4-397">ドイツ語 (ドイツ)</span><span class="sxs-lookup"><span data-stu-id="893d4-397">German (Germany)</span></span>  
  
-   <span data-ttu-id="893d4-398">es-ES.</span><span class="sxs-lookup"><span data-stu-id="893d4-398">es-ES.</span></span> <span data-ttu-id="893d4-399">スペイン語 (スペイン)</span><span class="sxs-lookup"><span data-stu-id="893d4-399">Spanish (Spain)</span></span>  
  
-   <span data-ttu-id="893d4-400">fr-FR.</span><span class="sxs-lookup"><span data-stu-id="893d4-400">fr-FR.</span></span> <span data-ttu-id="893d4-401">フランス語 (フランス)</span><span class="sxs-lookup"><span data-stu-id="893d4-401">French (France)</span></span>  
  
-   <span data-ttu-id="893d4-402">ja-JP.</span><span class="sxs-lookup"><span data-stu-id="893d4-402">ja-JP.</span></span> <span data-ttu-id="893d4-403">日本語 (日本)</span><span class="sxs-lookup"><span data-stu-id="893d4-403">Japanese (Japan)</span></span>  
  
-   <span data-ttu-id="893d4-404">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="893d4-404">zh-CN.</span></span> <span data-ttu-id="893d4-405">中国語 (中国)</span><span class="sxs-lookup"><span data-stu-id="893d4-405">Chinese (China)</span></span>  
  
-   <span data-ttu-id="893d4-406">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="893d4-406">zh-TW.</span></span> <span data-ttu-id="893d4-407">中国語 (台湾)</span><span class="sxs-lookup"><span data-stu-id="893d4-407">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="893d4-408">"en"、"fr"などの 2 文字の言語コードまたは"es"も使用できます。</span><span class="sxs-lookup"><span data-stu-id="893d4-408">Two-letter language codes such as "en", "fr", or "es" are also permitted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="893d4-409">次の例では、最大4つのトッピングを使用してピザを注文するための音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-409">The following example creates a speech recognition grammar for ordering a pizza with up to four toppings.</span></span> <span data-ttu-id="893d4-410">具体的には、<xref:System.Speech.Recognition.GrammarBuilder> オブジェクトのカルチャを英語 (米国) に設定します。</span><span class="sxs-lookup"><span data-stu-id="893d4-410">It specifically sets the <xref:System.Speech.Recognition.GrammarBuilder> object's culture to English (United States).</span></span>  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognizerInfo" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="DebugShowPhrases">
      <MemberSignature Language="C#" Value="public string DebugShowPhrases { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DebugShowPhrases" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DebugShowPhrases As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DebugShowPhrases { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DebugShowPhrases : string" Usage="System.Speech.Recognition.GrammarBuilder.DebugShowPhrases" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="893d4-411"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> に含まれる文法の内容と構造を表す文字列を取得します。</span><span class="sxs-lookup"><span data-stu-id="893d4-411">Gets a string that shows the contents and structure of the grammar contained by the <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span></span></summary>
        <value><span data-ttu-id="893d4-412"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> の現在のコンテンツと構造体。</span><span class="sxs-lookup"><span data-stu-id="893d4-412">The current content and structure of the <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="893d4-413">次の例では、最大4つのトッピングを使用してピザを注文するための音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-413">The following example creates a speech recognition grammar for ordering a pizza with up to four toppings.</span></span> <span data-ttu-id="893d4-414">文法を作成する前に、コンソールに <xref:System.Speech.Recognition.GrammarBuilder> のステータスを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="893d4-414">It writes the status of the <xref:System.Speech.Recognition.GrammarBuilder> to the console before creating the grammar.</span></span> <span data-ttu-id="893d4-415">このメソッドは、次の出力を生成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-415">This method generates the following output:</span></span>  
  
-   `GrammarBuilder status: I would like a [cheese,mushroom,tomato,onion,anchovy,chic ken,pepperoni] and [cheese,mushroom,tomato,onion,anchovy,chicken,pepperoni] pizza`  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Write the contents and structure of the GrammarBuilder to the console.  
  Console.WriteLine("Grammar content and structure: {0}", gb.DebugShowPhrases);  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361640(v%3doffice.14)"><span data-ttu-id="893d4-416">GrammarBuilder を使用して文法を作成する</span><span class="sxs-lookup"><span data-stu-id="893d4-416">Create Grammars Using GrammarBuilder</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="893d4-417">2 つの文法要素のシーケンスに一致する新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-417">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that corresponds to a sequence of two grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-418">オペランドの順序によって、新しい <xref:System.Speech.Recognition.GrammarBuilder>内の要素の順序が決まります。</span><span class="sxs-lookup"><span data-stu-id="893d4-418">The order of the operands determines the order of the elements in the new <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-419"><xref:System.Speech.Recognition.SemanticResultValue> または <xref:System.Speech.Recognition.SemanticResultKey> のインスタンスを含むオブジェクトを他の文法要素と組み合わせて <xref:System.Speech.Recognition.Choices> または <xref:System.Speech.Recognition.GrammarBuilder> する場合は、注意が必要です。</span><span class="sxs-lookup"><span data-stu-id="893d4-419">Caution is recommended when combining <xref:System.Speech.Recognition.Choices> or <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements.</span></span> <span data-ttu-id="893d4-420">同じキー名または複数のセマンティック要素を持つ重複するセマンティック要素が含まれている音声認識文法を使用すると、音声認識エンジンは例外をスローし、同じセマンティック要素の値を繰り返し変更する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-420">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> 
  
 <span data-ttu-id="893d4-421">音声認識文法の作成と使用の詳細については、「[音声認識](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-421">For more information about building and using speech recognition grammars, see [Speech Recognition](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.Choices choices, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::Choices ^ choices, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Speech.Recognition.Choices * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="choices + builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="choices"><span data-ttu-id="893d4-422">代替候補セットを表す、最初の grammer 要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-422">The first grammar element, which represents a set of alternatives.</span></span></param>
        <param name="builder"><span data-ttu-id="893d4-423">2 番目の grammer 要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-423">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="893d4-424"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトが後続している <see cref="T:System.Speech.Recognition.Choices" /> オブジェクトを含んでいる、新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-424">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.Choices" /> object followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="893d4-425"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> パラメーターの次に <paramref name="choices" /> パラメーターが続くシーケンスの <paramref name="builder" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="893d4-425">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="choices" /> parameter followed by the <paramref name="builder" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-426"><xref:System.Speech.Recognition.GrammarBuilder> は、次のクラスからの変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="893d4-426"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="893d4-427">このメソッドは、上に示したオブジェクトを `builder` パラメーターに受け入れます。</span><span class="sxs-lookup"><span data-stu-id="893d4-427">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="893d4-428">詳細については、「<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 演算子」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-428">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-429"><xref:System.Speech.Recognition.Choices> <xref:System.Speech.Recognition.GrammarBuilder> と、<xref:System.Speech.Recognition.SemanticResultValue> または <xref:System.Speech.Recognition.SemanticResultKey> のインスタンスを含むオブジェクトを結合する場合は、同じキー名または複数のセマンティック要素を持つ重複したセマンティック要素を作成しないようにして、<xref:System.Speech.Recognition.SemanticValue.Value%2A> オブジェクトの <xref:System.Speech.Recognition.SemanticValue> プロパティを繰り返し変更できるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-429">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="893d4-430">このような状況が発生した場合、音声認識エンジンは例外をスローすることがあります。</span><span class="sxs-lookup"><span data-stu-id="893d4-430">The speech recognizer can throw an exception if it encounters these circumstances.</span></span>
  
 <span data-ttu-id="893d4-431">この演算子の同等のメソッドは <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.Choices%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="893d4-431">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.Choices%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder, class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder, System::Speech::Recognition::Choices ^ choices);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Speech.Recognition.GrammarBuilder * System.Speech.Recognition.Choices -&gt; System.Speech.Recognition.GrammarBuilder" Usage="builder + choices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="893d4-432">最初の文法要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-432">The first grammar element.</span></span></param>
        <param name="choices"><span data-ttu-id="893d4-433">2 番目の文法要素で、代替要素のセットを表します。</span><span class="sxs-lookup"><span data-stu-id="893d4-433">The second grammar element, which represents a set of alternative elements.</span></span></param>
        <summary><span data-ttu-id="893d4-434"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> とその後ろに <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を含む新しい <see cref="T:System.Speech.Recognition.Choices" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-434">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> followed by a <see cref="T:System.Speech.Recognition.Choices" />.</span></span></summary>
        <returns><span data-ttu-id="893d4-435"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> パラメーターの次に <paramref name="builder" /> パラメーターが続くシーケンスの <paramref name="choices" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="893d4-435">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> parameter followed by the <paramref name="choices" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-436"><xref:System.Speech.Recognition.GrammarBuilder> は、次のクラスからの変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="893d4-436"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="893d4-437">このメソッドは、上に示したオブジェクトを `builder` パラメーターに受け入れます。</span><span class="sxs-lookup"><span data-stu-id="893d4-437">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="893d4-438">詳細については、「<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 演算子」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-438">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-439"><xref:System.Speech.Recognition.Choices> <xref:System.Speech.Recognition.GrammarBuilder> と、<xref:System.Speech.Recognition.SemanticResultValue> または <xref:System.Speech.Recognition.SemanticResultKey> のインスタンスを含むオブジェクトを結合する場合は、同じキー名または複数のセマンティック要素を持つ重複したセマンティック要素を作成しないようにして、<xref:System.Speech.Recognition.SemanticValue.Value%2A> オブジェクトの <xref:System.Speech.Recognition.SemanticValue> プロパティを繰り返し変更できるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-439">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="893d4-440">このような状況が発生した場合、音声認識エンジンは例外をスローすることがあります。</span><span class="sxs-lookup"><span data-stu-id="893d4-440">The speech recognizer can throw an exception if it encounters these circumstances.</span></span>
  
 <span data-ttu-id="893d4-441">この演算子の同等のメソッドは <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.Choices%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="893d4-441">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.Choices%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="893d4-442">次の例では、一連の色から*色*を選択して、"背景*色*を設定する" と "背景を*色*に設定する" という2つの語句を認識できる音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-442">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="893d4-443">[文字列](https://go.microsoft.com/fwlink/?LinkId=159733)、<xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.GrammarBuilder> オブジェクトなど、最終的な文法を構築するためにさまざまな型が使用されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-443">Various types are used to build the final grammar, such as [String](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] { "red", "green", "blue" });  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    (GrammarBuilder)"Make background" + colorChoice;  
  GrammarBuilder setPhrase =  
    "Set background to" + (GrammarBuilder)colorChoice;  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder1, class System.Speech.Recognition.GrammarBuilder builder2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (builder1 As GrammarBuilder, builder2 As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder1, System::Speech::Recognition::GrammarBuilder ^ builder2);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Speech.Recognition.GrammarBuilder * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="builder1 + builder2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder1" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="builder2" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder1"><span data-ttu-id="893d4-444">最初の文法要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-444">The first grammar element.</span></span></param>
        <param name="builder2"><span data-ttu-id="893d4-445">2 番目の grammer 要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-445">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="893d4-446">2 つの <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトのシーケンスを含む新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-446">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a sequence of two <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects.</span></span></summary>
        <returns><span data-ttu-id="893d4-447"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> パラメーターの次に <paramref name="builder1" /> パラメーターが続くシーケンスの <paramref name="builder2" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="893d4-447">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder1" /> parameter followed by the <paramref name="builder2" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-448"><xref:System.Speech.Recognition.GrammarBuilder> は、次のクラスからの変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="893d4-448"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="893d4-449">このメソッドは、上に示したオブジェクトを使用して、`builder1` および `builder2` パラメーターを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="893d4-449">This method accepts the objects listed above for the `builder1` and `builder2` parameters.</span></span> <span data-ttu-id="893d4-450">詳細については、「<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 演算子」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-450">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="893d4-451"><xref:System.Speech.Recognition.SemanticResultValue> または <xref:System.Speech.Recognition.SemanticResultKey> インスタンスを含む <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトを結合する場合は、同じキー名または複数のセマンティック要素を持つ重複したセマンティック要素を作成しないようにして、<xref:System.Speech.Recognition.SemanticValue> オブジェクトの <xref:System.Speech.Recognition.SemanticValue.Value%2A> プロパティを繰り返し変更できるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="893d4-451">When you combine <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="893d4-452">このような状況が発生した場合、音声認識エンジンは例外をスローすることがあります。</span><span class="sxs-lookup"><span data-stu-id="893d4-452">The speech recognizer can throw an exception if it encounters these circumstances.</span></span>
  
 <span data-ttu-id="893d4-453">この演算子の同等のメソッドは <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="893d4-453">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder, string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder, string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (builder As GrammarBuilder, phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder, System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Speech.Recognition.GrammarBuilder * string -&gt; System.Speech.Recognition.GrammarBuilder" Usage="builder + phrase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="893d4-454">最初の文法要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-454">The first grammar element.</span></span></param>
        <param name="phrase"><span data-ttu-id="893d4-455">2 番目の文法要素で、言葉のシーケンスを表します。</span><span class="sxs-lookup"><span data-stu-id="893d4-455">The second grammar element, which represents a sequence of words.</span></span></param>
        <summary><span data-ttu-id="893d4-456"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> とその後ろにフレーズを含む新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-456">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> followed by a phrase.</span></span></summary>
        <returns><span data-ttu-id="893d4-457"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> パラメーターの次に <paramref name="builder" /> パラメーターが続くシーケンスの <paramref name="phrase" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="893d4-457">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> parameter followed by the <paramref name="phrase" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-458"><xref:System.Speech.Recognition.GrammarBuilder> は、次のクラスからの変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="893d4-458"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="893d4-459">このメソッドは、上に示したオブジェクトを `builder` パラメーターに受け入れます。</span><span class="sxs-lookup"><span data-stu-id="893d4-459">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="893d4-460">詳細については、「<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 演算子」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-460">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
 <span data-ttu-id="893d4-461">この演算子の同等のメソッドは <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.String%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="893d4-461">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.String%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (string phrase, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(string phrase, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (phrase As String, builder As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::String ^ phrase, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member ( + ) : string * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="phrase + builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="893d4-462">最初の文法要素で、言葉のシーケンスを表します。</span><span class="sxs-lookup"><span data-stu-id="893d4-462">The first grammar element, which represents a sequence of words.</span></span></param>
        <param name="builder"><span data-ttu-id="893d4-463">2 番目の grammer 要素。</span><span class="sxs-lookup"><span data-stu-id="893d4-463">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="893d4-464">フレーズとその後ろに <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を含む新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-464">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a phrase followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span></span></summary>
        <returns><span data-ttu-id="893d4-465"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> パラメーターの次に <paramref name="phrase" /> パラメーターが続くシーケンスの <paramref name="builder" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="893d4-465">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="phrase" /> parameter followed by the <paramref name="builder" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-466"><xref:System.Speech.Recognition.GrammarBuilder> は、次のクラスからの変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="893d4-466"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="893d4-467">このメソッドは、上に示したオブジェクトを `builder` パラメーターに受け入れます。</span><span class="sxs-lookup"><span data-stu-id="893d4-467">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="893d4-468">詳細については、「<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 演算子」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="893d4-468">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
 <span data-ttu-id="893d4-469">この演算子の同等のメソッドは <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.String%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="893d4-469">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.String%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="893d4-470">次の例では、一連の色から*色*を選択して、"背景*色*を設定する" と "背景を*色*に設定する" という2つの語句を認識できる音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-470">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="893d4-471">[文字列](https://go.microsoft.com/fwlink/?LinkId=159733)、<xref:System.Speech.Recognition.Choices>、<xref:System.Speech.Recognition.GrammarBuilder> オブジェクトなど、最終的な文法を構築するためにさまざまな型が使用されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-471">Various types are used to build the final grammar, such as [String](https://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] { "red", "green", "blue" });  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    (GrammarBuilder)"Make background" + colorChoice;  
  GrammarBuilder setPhrase =  
    "Set background to" + (GrammarBuilder)colorChoice;  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="893d4-472">別の型を <see cref="T:System.Speech.Recognition.GrammarBuilder" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="893d4-472">Converts another type to a <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-473">暗黙的な変換では、<xref:System.Speech.Recognition.GrammarBuilder>の新しいインスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-473">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="893d4-474">次の各クラスを <xref:System.Speech.Recognition.GrammarBuilder>にキャストできます。</span><span class="sxs-lookup"><span data-stu-id="893d4-474">You can cast each of the following classes to a <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="893d4-475">暗黙の各キャストは、コンストラクターを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="893d4-475">Each of the implicit casts is equivalent to calling the constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::Choices ^ choices);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Speech.Recognition.Choices -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.op_Implicit choices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="choices"><span data-ttu-id="893d4-476">変換する代替のセット。</span><span class="sxs-lookup"><span data-stu-id="893d4-476">The set of alternatives to convert.</span></span></param>
        <summary><span data-ttu-id="893d4-477"><see cref="T:System.Speech.Recognition.Choices" /> オブジェクトを <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="893d4-477">Converts a <see cref="T:System.Speech.Recognition.Choices" /> object to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="893d4-478">変換された <see cref="T:System.Speech.Recognition.Choices" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="893d4-478">The converted <see cref="T:System.Speech.Recognition.Choices" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-479">暗黙的な変換では、<xref:System.Speech.Recognition.GrammarBuilder>の新しいインスタンスが作成されます。この変換演算子は、<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> を呼び出し、`alternateChoices`に `choices` を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="893d4-479">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying `choices` for the `alternateChoices`.</span></span>  
  
 <span data-ttu-id="893d4-480">この演算子の同等のメソッドは <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.Choices%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="893d4-480">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.Choices%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="893d4-481">次の例では、"yes" または "no" の質問への応答を認識できる音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-481">The following example creates a speech recognition grammar that can recognize a response to a "yes" or "no" question.</span></span> <span data-ttu-id="893d4-482">暗黙的な変換演算子は、<xref:System.Speech.Recognition.Choices> オブジェクトからの <xref:System.Speech.Recognition.SemanticResultValue> オブジェクトの構築、2つの <xref:System.Speech.Recognition.SemanticResultValue> オブジェクトからの <xref:System.Speech.Recognition.Choices> オブジェクトの構築、および <xref:System.Speech.Recognition.Grammar> オブジェクトからの <xref:System.Speech.Recognition.SemanticResultKey> オブジェクトの構築に使用されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-482">The implicit conversion operator is used in the construction of a <xref:System.Speech.Recognition.SemanticResultValue> object from a <xref:System.Speech.Recognition.Choices> object, in the construction of a <xref:System.Speech.Recognition.Choices> object from two <xref:System.Speech.Recognition.SemanticResultValue> objects, and in the construction of a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.SemanticResultKey> object.</span></span>  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.SemanticResultKey semanticKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.SemanticResultKey semanticKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (semanticKey As SemanticResultKey) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::SemanticResultKey ^ semanticKey);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Speech.Recognition.SemanticResultKey -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.op_Implicit semanticKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticKey" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="semanticKey"><span data-ttu-id="893d4-483">変換するセマンティクス キー。</span><span class="sxs-lookup"><span data-stu-id="893d4-483">The semantic key to convert.</span></span></param>
        <summary><span data-ttu-id="893d4-484"><see cref="T:System.Speech.Recognition.SemanticResultKey" /> オブジェクトを <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="893d4-484">Converts a <see cref="T:System.Speech.Recognition.SemanticResultKey" /> object to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="893d4-485">変換された <see cref="T:System.Speech.Recognition.SemanticResultKey" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="893d4-485">The converted <see cref="T:System.Speech.Recognition.SemanticResultKey" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-486">暗黙的な変換では、<xref:System.Speech.Recognition.GrammarBuilder>の新しいインスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-486">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="893d4-487">この変換演算子は、<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> を呼び出し、`key`に `semanticKey` を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="893d4-487">This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying `semanticKey` for the `key`.</span></span>  
  
 <span data-ttu-id="893d4-488">この演算子の同等のメソッドは <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="893d4-488">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="893d4-489">次の例では、"yes" または "no" の質問への応答を認識できる音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-489">The following example creates a speech recognition grammar that can recognize a response to a "yes" or "no" question.</span></span> <span data-ttu-id="893d4-490">暗黙的な変換演算子は、<xref:System.Speech.Recognition.Choices> オブジェクトからの <xref:System.Speech.Recognition.SemanticResultValue> オブジェクトの構築、2つの <xref:System.Speech.Recognition.SemanticResultValue> オブジェクトからの <xref:System.Speech.Recognition.Choices> オブジェクトの構築、および <xref:System.Speech.Recognition.Grammar> オブジェクトからの <xref:System.Speech.Recognition.SemanticResultKey> オブジェクトの構築に使用されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-490">The implicit conversion operator is used in the construction of a <xref:System.Speech.Recognition.SemanticResultValue> object from a <xref:System.Speech.Recognition.Choices> object, in the construction of a <xref:System.Speech.Recognition.Choices> object from two <xref:System.Speech.Recognition.SemanticResultValue> objects, and in the construction of a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.SemanticResultKey> object.</span></span>  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.SemanticResultValue semanticValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.SemanticResultValue semanticValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (semanticValue As SemanticResultValue) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::SemanticResultValue ^ semanticValue);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Speech.Recognition.SemanticResultValue -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.op_Implicit semanticValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticValue" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="semanticValue"><span data-ttu-id="893d4-491">変換対象の <see cref="T:System.Speech.Recognition.SemanticResultValue" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="893d4-491">The <see cref="T:System.Speech.Recognition.SemanticResultValue" /> object to convert.</span></span></param>
        <summary><span data-ttu-id="893d4-492"><see cref="T:System.Speech.Recognition.SemanticResultValue" /> オブジェクトを <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="893d4-492">Converts a <see cref="T:System.Speech.Recognition.SemanticResultValue" /> object to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="893d4-493">変換された <see cref="T:System.Speech.Recognition.SemanticResultValue" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="893d4-493">The converted <see cref="T:System.Speech.Recognition.SemanticResultValue" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-494">暗黙的な変換では、<xref:System.Speech.Recognition.GrammarBuilder>の新しいインスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-494">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="893d4-495">この変換演算子は、<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> を呼び出し、`value`に `semanticValue` を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="893d4-495">This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying `semanticValue` for the `value`.</span></span>  
  
 <span data-ttu-id="893d4-496">この演算子の同等のメソッドは <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="893d4-496">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="893d4-497">次の例では、"yes" または "no" の質問への応答を認識できる音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-497">The following example creates a speech recognition grammar that can recognize a response to a "yes" or "no" question.</span></span> <span data-ttu-id="893d4-498">暗黙的な変換演算子は、<xref:System.Speech.Recognition.Choices>オブジェクトからの <xref:System.Speech.Recognition.SemanticResultValue> オブジェクトの構築、2つの <xref:System.Speech.Recognition.SemanticResultValue> オブジェクトからの <xref:System.Speech.Recognition.Choices> オブジェクトの構築、および <xref:System.Speech.Recognition.Grammar> オブジェクトからの <xref:System.Speech.Recognition.SemanticResultKey> オブジェクトの構築に使用されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-498">The implicit conversion operator is used in the construction of a <xref:System.Speech.Recognition.SemanticResultValue> object from a <xref:System.Speech.Recognition.Choices>object, in the construction of a <xref:System.Speech.Recognition.Choices> object from two <xref:System.Speech.Recognition.SemanticResultValue> objects, and in the construction of a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.SemanticResultKey> object.</span></span>  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.op_Implicit phrase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="893d4-499">変換する文字列。</span><span class="sxs-lookup"><span data-stu-id="893d4-499">The string to convert.</span></span></param>
        <summary><span data-ttu-id="893d4-500">文字列を <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="893d4-500">Converts a string to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="893d4-501">変換された文字列。</span><span class="sxs-lookup"><span data-stu-id="893d4-501">The converted string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="893d4-502">暗黙的な変換では、<xref:System.Speech.Recognition.GrammarBuilder>の新しいインスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="893d4-502">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="893d4-503">この変換演算子は <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> を呼び出して同じ `phrase`を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="893d4-503">This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying the same `phrase`.</span></span>  
  
 <span data-ttu-id="893d4-504">この演算子の同等のメソッドは <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.String%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="893d4-504">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.String%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="893d4-505">次の例では、<xref:System.Speech.Recognition.GrammarBuilder> と <xref:System.Speech.Recognition.Choices> オブジェクトを使用して、"背景*色の選択*" または "背景を*Colorchoice*に設定する" という2つのフレーズのいずれかを認識できる文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-505">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="893d4-506"><xref:System.Speech.Recognition.Choices> オブジェクトを使用して*Colorchoice*に許容される値のリストを作成した後、文字列オブジェクトからの暗黙的な変換を使用して、`makePhrase` と `setPhrase`の2つの <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトを初期化します。</span><span class="sxs-lookup"><span data-stu-id="893d4-506">After creating a list of acceptable values for *colorChoice* using a <xref:System.Speech.Recognition.Choices> object, the example initializes two <xref:System.Speech.Recognition.GrammarBuilder> objects, `makePhrase` and `setPhrase`, using implicit conversion from string objects.</span></span>  
  
 <span data-ttu-id="893d4-507">この例では、最後に <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトにキャストされた <xref:System.Speech.Recognition.Choices> オブジェクトから <xref:System.Speech.Recognition.Grammar> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="893d4-507">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.Choices> object cast to a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
```csharp  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
  </Members>
</Type>
