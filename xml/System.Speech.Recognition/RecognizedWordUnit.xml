<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0f287f3f343522f1ec7d08fb3ed9beae35ec9e92" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77238949" /></Metadata><TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <TypeSignature Language="F#" Value="type RecognizedWordUnit = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="50700-101">認識される音声のアトミック単位を提供します。</span><span class="sxs-lookup"><span data-stu-id="50700-101">Provides the atomic unit of recognized speech.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50700-102">認識エンジンによって返されるすべての結果は <xref:System.Speech.Recognition.RecognizedWordUnit> オブジェクトで構築されます。</span><span class="sxs-lookup"><span data-stu-id="50700-102">All results returned by a recognition engine are constructed of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span>  
  
 <span data-ttu-id="50700-103"><xref:System.Speech.Recognition.RecognizedWordUnit> オブジェクトの配列は、<xref:System.Speech.Recognition.RecognizedPhrase> オブジェクトの <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> プロパティを使用して認識操作を行うことができます。</span><span class="sxs-lookup"><span data-stu-id="50700-103">An array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects is accessible for any recognition operation through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
 <span data-ttu-id="50700-104"><xref:System.Speech.Recognition.RecognizedWordUnit> インスタンスでは、認識の確実性 (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) を提供するだけでなく、次の機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="50700-104">In addition to providing a measure of recognition certainty (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) a <xref:System.Speech.Recognition.RecognizedWordUnit> instance provides:</span></span>  
  
-   <span data-ttu-id="50700-105">認識された単語に対して、正規化された正確な (または構文的な) テキスト表現。</span><span class="sxs-lookup"><span data-stu-id="50700-105">Normalized and exact (or lexical) text representations for a recognized word.</span></span> <span data-ttu-id="50700-106">詳細については、「<xref:System.Speech.Recognition.ReplacementText>」、「<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>」、および「<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="50700-106">For more information, see <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</span></span>  
  
-   <span data-ttu-id="50700-107">国際音声記号 (IPA) やユニバーサル電話セット (UPS) など、サポートされている発音記号の文字を使用した発音情報。</span><span class="sxs-lookup"><span data-stu-id="50700-107">Pronunciation information using characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span></span> <span data-ttu-id="50700-108">詳細については、「<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="50700-108">For more information see <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</span></span>  
  
-   <span data-ttu-id="50700-109">印刷用の書式設定。</span><span class="sxs-lookup"><span data-stu-id="50700-109">Formatting for printing.</span></span> <span data-ttu-id="50700-110">詳細については、<xref:System.Speech.Recognition.DisplayAttributes> クラスとその <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="50700-110">For more information see the <xref:System.Speech.Recognition.DisplayAttributes> class and its <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50700-111">次の例は、文字列を生成するユーティリティルーチン (`stringFromWordArray`) を示しています。</span><span class="sxs-lookup"><span data-stu-id="50700-111">The following example shows a utility routine (`stringFromWordArray`) that generates strings.</span></span> <span data-ttu-id="50700-112">文字列には、字句出力 (<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>を使用)、正規化されたテキスト (<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>を使用)、または国際音声記号 (<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>を使用) の発音文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="50700-112">The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="50700-113">文字列は、<xref:System.Speech.Recognition.RecognizedWordUnit> オブジェクトの <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> から <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> プロパティから取得した <xref:System.Speech.Recognition.DisplayAttributes> オブジェクトを使用して書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="50700-113">Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="50700-114"><xref:System.Speech.Recognition.RecognizedWordUnit> オブジェクトは、<xref:System.Speech.Recognition.RecognizedPhrase> オブジェクトの <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> プロパティから取得されます。</span><span class="sxs-lookup"><span data-stu-id="50700-114">The <xref:System.Speech.Recognition.RecognizedWordUnit> objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.RecognizedWordUnit : string * single * string * string * System.Speech.Recognition.DisplayAttributes * TimeSpan * TimeSpan -&gt; System.Speech.Recognition.RecognizedWordUnit" Usage="new System.Speech.Recognition.RecognizedWordUnit (text, confidence, pronunciation, lexicalForm, displayAttributes, audioPosition, audioDuration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="50700-115">認識された単語の正規化テキスト。</span><span class="sxs-lookup"><span data-stu-id="50700-115">The normalized text for a recognized word.</span></span>  
  
<span data-ttu-id="50700-116">この値には、<see langword="null" />、""、または <see cref="F:System.String.Empty" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="50700-116">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="confidence"><span data-ttu-id="50700-117">用語認識の確実性を示す 0.0 ～ 1.0 の <see langword="float" /> 値。</span><span class="sxs-lookup"><span data-stu-id="50700-117">A <see langword="float" /> value from 0.0 through 1.0 indicating the certainty of word recognition.</span></span></param>
        <param name="pronunciation"><span data-ttu-id="50700-118">認識された単語の音声スペル。</span><span class="sxs-lookup"><span data-stu-id="50700-118">The phonetic spelling of a recognized word.</span></span>  
  
<span data-ttu-id="50700-119">この値には、<see langword="null" />、""、または <see cref="F:System.String.Empty" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="50700-119">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="lexicalForm"><span data-ttu-id="50700-120">認識された単語の正規化されていないテキスト。</span><span class="sxs-lookup"><span data-stu-id="50700-120">The unnormalized text for a recognized word.</span></span>  
  
<span data-ttu-id="50700-121">この引数は必須で、<see langword="null" />、""、または <see cref="F:System.String.Empty" /> にはできません。</span><span class="sxs-lookup"><span data-stu-id="50700-121">This argument is required and may not be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="displayAttributes"><span data-ttu-id="50700-122">認識されたテキストを表示するために、空白の使用を定義します。</span><span class="sxs-lookup"><span data-stu-id="50700-122">Defines the use of white space to display recognized words.</span></span></param>
        <param name="audioPosition"><span data-ttu-id="50700-123">オーディオ入力ストリーム内の認識された単語の場所。</span><span class="sxs-lookup"><span data-stu-id="50700-123">The location of the recognized word in the audio input stream.</span></span>  
  
<span data-ttu-id="50700-124">この値には <see cref="F:System.TimeSpan.Zero" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="50700-124">This value can be <see cref="F:System.TimeSpan.Zero" />.</span></span></param>
        <param name="audioDuration"><span data-ttu-id="50700-125">認識された単語に対応するオーディオ入力の長さ。</span><span class="sxs-lookup"><span data-stu-id="50700-125">The length of the audio input corresponding to the recognized word.</span></span>  
  
<span data-ttu-id="50700-126">この値には <see cref="F:System.TimeSpan.Zero" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="50700-126">This value can be <see cref="F:System.TimeSpan.Zero" />.</span></span></param>
        <summary><span data-ttu-id="50700-127"><see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="50700-127">Initializes a new instance of the <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50700-128">`text` または `pronunciation` が `null`、""、または <xref:System.String.Empty> で、認識操作で <xref:System.Speech.Recognition.RecognizedWordUnit> が使用されている場合、認識エンジンは出力 <xref:System.Speech.Recognition.RecognizedWordUnit> インスタンスに適切な値を生成します。</span><span class="sxs-lookup"><span data-stu-id="50700-128">If `text` or `pronunciation` are `null`, "", or <xref:System.String.Empty> and the <xref:System.Speech.Recognition.RecognizedWordUnit> is used in a recognition operation, the recognition engine will generate appropriate values in any output <xref:System.Speech.Recognition.RecognizedWordUnit> instance.</span></span>  
  
 <span data-ttu-id="50700-129"><xref:System.Speech.Recognition.RecognizedWordUnit> インスタンスの直接構築は、通常、<xref:System.Speech.Recognition.SpeechRecognitionEngine> クラスの <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> メソッド、および <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> クラスの <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> メソッドまたは <xref:System.Speech.Recognition.SpeechRecognizer> メソッドを使用して認識操作をエミュレートする場合にのみ使用されます。</span><span class="sxs-lookup"><span data-stu-id="50700-129">Direct construction of <xref:System.Speech.Recognition.RecognizedWordUnit> instances is typically used only when emulating recognition operations using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognizer> class.</span></span>  
  
 <span data-ttu-id="50700-130">実際のアプリケーションの場合、<xref:System.Speech.Recognition.RecognizedPhrase> オブジェクトの <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> プロパティを通じて取得するのではなく、<xref:System.Speech.Recognition.RecognizedWordUnit>を直接構築しないでください。</span><span class="sxs-lookup"><span data-stu-id="50700-130">For actual applications, do not directly construct <xref:System.Speech.Recognition.RecognizedWordUnit>, rather obtain it through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50700-131">次の例は、新しい単語が入力から生成され、エミュレーターに渡され、検証される、エミュレーションのやや不自然なテストです。</span><span class="sxs-lookup"><span data-stu-id="50700-131">The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.</span></span>  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://www.internationalphoneticassociation.org/content/ipa-chart"><span data-ttu-id="50700-132">国際音声記号</span><span class="sxs-lookup"><span data-stu-id="50700-132">International Phonetic Alphabet</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="50700-133">認識されたテキストが特定の入力と一致する確率を表す値 (認識エンジンによって割り当てられます) を取得します。</span><span class="sxs-lookup"><span data-stu-id="50700-133">Gets a value, assigned by the recognizer, that represents the likelihood that a recognized word matches a given input.</span></span></summary>
        <value><span data-ttu-id="50700-134">単語の正しい認識の確実性の相対値。</span><span class="sxs-lookup"><span data-stu-id="50700-134">A relative measure of the certainty of correct recognition for a word.</span></span> <span data-ttu-id="50700-135">値は 0.0 から 1.0 までであり、低い数字ほど信頼度が低くなります。</span><span class="sxs-lookup"><span data-stu-id="50700-135">The value is from 0.0 to 1.0, for low to high confidence, respectively.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50700-136">信頼度スコアは、単語が正しく認識された場合の絶対確率を示すものではありません。</span><span class="sxs-lookup"><span data-stu-id="50700-136">Confidence scores do not indicate the absolute likelihood that a word was recognized correctly.</span></span> <span data-ttu-id="50700-137">代わりに、信頼スコアは、特定の入力に対する複数の認識代替の相対的な精度を比較するためのメカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="50700-137">Instead, confidence scores provide a mechanism for comparing the relative accuracy of multiple recognition alternates for a given input.</span></span> <span data-ttu-id="50700-138">これにより、最も正確な認識結果が返されます。</span><span class="sxs-lookup"><span data-stu-id="50700-138">This facilitates returning the most accurate recognition result.</span></span> <span data-ttu-id="50700-139">たとえば、認識された単語の信頼スコアが0.8 である場合、これは、その80単語の入力が正しい一致であるということを意味するわけではありません。</span><span class="sxs-lookup"><span data-stu-id="50700-139">For example, if a recognized word has a confidence score of 0.8, this does not mean that the word has an 80% chance of being the correct match for the input.</span></span>  <span data-ttu-id="50700-140">これは、単語が、信頼スコアが0.8 未満の他の結果とは、入力の正しい一致である可能性が高いことを意味します。</span><span class="sxs-lookup"><span data-stu-id="50700-140">It means that the word is more likely to be the correct match for the input than other results that have confidence scores less than 0.8.</span></span>  
  
 <span data-ttu-id="50700-141">同じ認識操作から、または同じ入力の前の認識から比較する別の結果がない場合を除き、信頼スコアは独自に意味がありません。</span><span class="sxs-lookup"><span data-stu-id="50700-141">A confidence score on its own is not meaningful unless you have alternative results to compare against, either from the same recognition operation or from previous recognitions of the same input.</span></span>  
  
 <span data-ttu-id="50700-142"><xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> によって返される値は、各認識エンジンに対して相対的で一意です。</span><span class="sxs-lookup"><span data-stu-id="50700-142">The values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> are relative and unique to each recognition engine.</span></span> <span data-ttu-id="50700-143">2つの異なる認識エンジン間の信頼度値の比較、および個々の <xref:System.Speech.Recognition.RecognizedWordUnit> オブジェクトの <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> による <xref:System.Speech.Recognition.RecognizedPhrase>の <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> の定義方法は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="50700-143">There is no definition of how confidence values between two different recognition engines compare, nor how the <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> of individual <xref:System.Speech.Recognition.RecognizedWordUnit> objects define the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> of a <xref:System.Speech.Recognition.RecognizedPhrase>.</span></span>  
  
 <span data-ttu-id="50700-144">音声認識エンジンは、読み上げ入力に対して、背景の干渉、音声による認識、予期しない単語やワードシーケンスなど、さまざまな理由で信頼度の低いスコアを割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="50700-144">A speech recognition engine may assign a low confidence score to spoken input for various reasons, including background interference, inarticulate speech, or unanticipated words or word sequences.</span></span> <span data-ttu-id="50700-145">アプリケーションで <xref:System.Speech.Recognition.SpeechRecognitionEngine> インスタンスを使用している場合は、いずれかの <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> 方法で音声入力が受け入れられるか拒否されるかを示す信頼レベルを変更できます。</span><span class="sxs-lookup"><span data-stu-id="50700-145">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="50700-146"><xref:System.Speech.Recognition.SpeechRecognizer>によって管理される共有レコグナイザーの信頼しきい値は、ユーザープロファイルに関連付けられ、Windows レジストリに格納されます。</span><span class="sxs-lookup"><span data-stu-id="50700-146">Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry.</span></span> <span data-ttu-id="50700-147">アプリケーションでは、共有認識エンジンのプロパティに対する変更をレジストリに書き込むことはできません。</span><span class="sxs-lookup"><span data-stu-id="50700-147">Applications should not write changes to the registry for the properties of the shared recognizer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayAttributes : System.Speech.Recognition.DisplayAttributes" Usage="System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="50700-148">現在の <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> インスタンスからテキスト出力を作成するために使用される書式設定情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="50700-148">Gets formatting information used to create the text output from the current <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> instance.</span></span></summary>
        <value><span data-ttu-id="50700-149"><see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> オブジェクトのコンテンツの表示に空白を使用することを指定します。</span><span class="sxs-lookup"><span data-stu-id="50700-149">Specifies the use of white space to display of the contents of a <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50700-150"><xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> プロパティによって返される <xref:System.Speech.Recognition.DisplayAttributes> オブジェクトは、特定の単語に使用される先頭および末尾のスペースを指定します (存在する場合)。</span><span class="sxs-lookup"><span data-stu-id="50700-150">The <xref:System.Speech.Recognition.DisplayAttributes> object returned by the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property specifies the leading and trailing spaces to be used with a given word, if any.</span></span>  
  
 <span data-ttu-id="50700-151">この書式設定情報の使用方法の詳細については、「<xref:System.Speech.Recognition.DisplayAttributes> 列挙型」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="50700-151">For more information about how to use this formatting information, see the <xref:System.Speech.Recognition.DisplayAttributes> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50700-152">次の例は、構文的 (<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>を使用)、正規化された (<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>を使用)、または発音 (<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>を使用) の3つの方法のいずれかで書式設定された文字列を生成するユーティリティルーチン (`stringFromWordArray`) を示しています。</span><span class="sxs-lookup"><span data-stu-id="50700-152">The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="50700-153">テキスト出力は <xref:System.Speech.Recognition.RecognizedWordUnit> オブジェクトの <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> の <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> プロパティから取得されます。これは、<xref:System.Speech.Recognition.RecognizedPhrase> オブジェクトの <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> プロパティから取得されます。</span><span class="sxs-lookup"><span data-stu-id="50700-153">The text output is obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LexicalForm : string" Usage="System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="50700-154">認識された単語の正規化されていないテキストを取得します。</span><span class="sxs-lookup"><span data-stu-id="50700-154">Gets the unnormalized text of a recognized word.</span></span></summary>
        <value><span data-ttu-id="50700-155">正規化を使用せず、認識された語のテキストを含む <see cref="T:System.String" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="50700-155">Returns a <see cref="T:System.String" /> containing the text of a recognized word, without any normalization.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50700-156">ほとんどの場合、<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> と <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> によって返される値は同じです。</span><span class="sxs-lookup"><span data-stu-id="50700-156">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> are identical.</span></span> <span data-ttu-id="50700-157">ただし、認識エンジンは音声の正規化を使用して、音声入力のユーザーフレンドリまたは普通テキスト表現をさらに表示できます。</span><span class="sxs-lookup"><span data-stu-id="50700-157">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="50700-158">音声の正規化とは、特殊な構成要素または記号を使用して音声の書き込みを表現することです。</span><span class="sxs-lookup"><span data-stu-id="50700-158">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="50700-159">たとえば、正規化によって、読み上げられた単語 "a ドルと16セント" を出力テキストの "$1.16" に置き換えることができます。</span><span class="sxs-lookup"><span data-stu-id="50700-159">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50700-160">次の例では、構文 (<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>を使用)、正規化された (<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>を使用)、および発音 (<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>を使用) の3つの形式のいずれかでテキストを生成するユーティリティルーチンを示しています。</span><span class="sxs-lookup"><span data-stu-id="50700-160">The following example shows a utility routine that generates text in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="50700-161">テキスト出力は <xref:System.Speech.Recognition.RecognizedWordUnit> オブジェクトの <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> から取得されます。これは、<xref:System.Speech.Recognition.RecognizedPhrase> オブジェクトの <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> プロパティから取得されます。</span><span class="sxs-lookup"><span data-stu-id="50700-161">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="50700-162">認識された単語の音声スペルを取得します。</span><span class="sxs-lookup"><span data-stu-id="50700-162">Gets the phonetic spelling of a recognized word.</span></span></summary>
        <value><span data-ttu-id="50700-163">国際音声記号 (IPA) や汎用音素セット (UPS) など、サポートされる発音記号を含む文字列。</span><span class="sxs-lookup"><span data-stu-id="50700-163">A string of characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50700-164"><xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> の内容は、音声認識エンジンが、読み込まれた <xref:System.Speech.Recognition.Grammar> オブジェクトの1つに音声入力を一致させるために使用した発音を示します。</span><span class="sxs-lookup"><span data-stu-id="50700-164">The contents of <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="50700-165">発音は、音声認識エンジンの内部辞書、読み込まれた <xref:System.Speech.Recognition.Grammar> オブジェクトの認識文法からリンクされている辞書ドキュメント、または読み込んだ <xref:System.Speech.Recognition.Grammar> オブジェクトの認識文法でインラインで定義できます。</span><span class="sxs-lookup"><span data-stu-id="50700-165">Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object, or inline in a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="50700-166">音声認識エンジンでは、音声認識エンジンが現在アクセスしている辞書や文法で発音が定義されていない一般的な単語の発音を作成することもできます。</span><span class="sxs-lookup"><span data-stu-id="50700-166">A speech recognition engine may also create pronunciations for uncommon words whose pronunciations are not defined in a lexicon or grammar to which the speech recognition engine currently has access.</span></span>  
  
 <span data-ttu-id="50700-167">Courier New など、多くの Windows ベースの Unicode フォントでは、IPA 文字列の表示がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="50700-167">Many Windows-based Unicode fonts, such as Courier New, support the display of IPA strings.</span></span> <span data-ttu-id="50700-168">詳細については、「[国際音声](https://www.internationalphoneticassociation.org/content/ipa-chart)記号」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="50700-168">For more information, see [International Phonetic Alphabet](https://www.internationalphoneticassociation.org/content/ipa-chart).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50700-169">次の例は、構文 (<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>を使用)、正規化された (<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>を使用)、および発音 (<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>を使用) のいずれかを使用して文字列を生成するユーティリティルーチンを示しています。</span><span class="sxs-lookup"><span data-stu-id="50700-169">The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="50700-170">テキスト出力は <xref:System.Speech.Recognition.RecognizedWordUnit> オブジェクトの <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> から取得されます。これは、<xref:System.Speech.Recognition.RecognizedPhrase> オブジェクトの <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> プロパティから取得されます。</span><span class="sxs-lookup"><span data-stu-id="50700-170">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://www.internationalphoneticassociation.org/content/ipa-chart"><span data-ttu-id="50700-171">国際音声記号</span><span class="sxs-lookup"><span data-stu-id="50700-171">International Phonetic Alphabet</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="50700-172">認識された単語の正規化されたテキストを取得します。</span><span class="sxs-lookup"><span data-stu-id="50700-172">Gets the normalized text for a recognized word.</span></span></summary>
        <value><span data-ttu-id="50700-173">指定した入力語句の正規化されたテキスト出力を含む文字列。</span><span class="sxs-lookup"><span data-stu-id="50700-173">A string that contains the normalized text output for a given input word.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50700-174">ほとんどの場合、<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> と <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> によって返される値は同じになります。</span><span class="sxs-lookup"><span data-stu-id="50700-174">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> will be identical.</span></span> <span data-ttu-id="50700-175">ただし、認識エンジンは音声の正規化を使用して、音声入力のユーザーフレンドリまたは普通テキスト表現をさらに表示できます。</span><span class="sxs-lookup"><span data-stu-id="50700-175">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="50700-176">音声の正規化とは、特殊な構成要素または記号を使用して音声の書き込みを表現することです。</span><span class="sxs-lookup"><span data-stu-id="50700-176">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="50700-177">たとえば、正規化によって、読み上げられた単語 "a ドルと16セント" を出力テキストの "$1.16" に置き換えることができます。</span><span class="sxs-lookup"><span data-stu-id="50700-177">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50700-178">次の例は、構文 (<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>を使用)、正規化された (<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>を使用)、および phonetic (<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>を使用) のいずれかの形式で文字列を生成するユーティリティルーチンを示しています。</span><span class="sxs-lookup"><span data-stu-id="50700-178">The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="50700-179">テキスト出力は <xref:System.Speech.Recognition.RecognizedWordUnit> オブジェクトの <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> から取得されます。これは、<xref:System.Speech.Recognition.RecognizedPhrase> オブジェクトの <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> プロパティから取得されます。</span><span class="sxs-lookup"><span data-stu-id="50700-179">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
