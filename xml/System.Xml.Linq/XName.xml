<Type Name="XName" FullName="System.Xml.Linq.XName">
  <Metadata><Meta Name="ms.openlocfilehash" Value="15bc554b5af132c1b6bfb54e773ff791c4a1f046" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82496138" /></Metadata><TypeSignature Language="C#" Value="public sealed class XName : IEquatable&lt;System.Xml.Linq.XName&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XName extends System.Object implements class System.IEquatable`1&lt;class System.Xml.Linq.XName&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XName" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XName&#xA;Implements IEquatable(Of XName)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class XName sealed : IEquatable&lt;System::Xml::Linq::XName ^&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type XName = class&#xA;    interface IEquatable&lt;XName&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public sealed class XName : IEquatable&lt;System.Xml.Linq.XName&gt;, System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XName extends System.Object implements class System.IEquatable`1&lt;class System.Xml.Linq.XName&gt;, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XName&#xA;Implements IEquatable(Of XName), ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class XName sealed : IEquatable&lt;System::Xml::Linq::XName ^&gt;, System::Runtime::Serialization::ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type XName = class&#xA;    interface IEquatable&lt;XName&gt;&#xA;    interface ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit XName extends System.Object implements class System.IEquatable`1&lt;class System.Xml.Linq.XName&gt;, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Xml.Linq" FromVersion="4.0.0.0" To="System.Xml.XDocument" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xml.Linq.XName&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.Xml.Linq.NameSerializer))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e94f6-101">XML 要素または属性の名前を表します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-101">Represents a name of an XML element or attribute.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e94f6-102">XML 名には、名前空間とローカル名が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-102">XML names include a namespace and a local name.</span></span> <span data-ttu-id="e94f6-103">*完全修飾名*は、名前空間とローカル名を組み合わせたものです。</span><span class="sxs-lookup"><span data-stu-id="e94f6-103">A *fully qualified name* is the combination of the namespace and local name.</span></span>  
  
## <a name="creating-an-xname-object"></a><span data-ttu-id="e94f6-104">XName オブジェクトの作成</span><span class="sxs-lookup"><span data-stu-id="e94f6-104">Creating an XName Object</span></span>  
 <span data-ttu-id="e94f6-105"><xref:System.Xml.Linq.XName> には、パブリックコンストラクターが含まれていません。</span><span class="sxs-lookup"><span data-stu-id="e94f6-105"><xref:System.Xml.Linq.XName> does not contain any public constructors.</span></span> <span data-ttu-id="e94f6-106">代わりに、このクラスは、<xref:System.Xml.Linq.XName>を作成するための <xref:System.String> からの暗黙の型変換を提供します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-106">Instead, this class provides an implicit conversion from <xref:System.String> that allows you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e94f6-107">この変換を使用する最も一般的な場所は、要素または属性を構築する場合です。 <xref:System.Xml.Linq.XElement> コンストラクターの最初の引数は <xref:System.Xml.Linq.XName>です。</span><span class="sxs-lookup"><span data-stu-id="e94f6-107">The most common place you use this conversion is when constructing an element or attribute: The first argument to the <xref:System.Xml.Linq.XElement> constructor is an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e94f6-108">文字列を渡すことにより、暗黙的な変換を利用できます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-108">By passing a string, you take advantage of the implicit conversion.</span></span> <span data-ttu-id="e94f6-109">次のコードでは、名前空間にない名前の要素が作成されます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-109">The following code creates an element with a name that is in no namespace:</span></span>  
  
```csharp  
XElement root = new XElement("ElementName", "content");  
Console.WriteLine(root);  
```  
  
 <span data-ttu-id="e94f6-110">Visual Basic では、XML リテラルを使用する方が適しています。</span><span class="sxs-lookup"><span data-stu-id="e94f6-110">In Visual Basic, it is more appropriate to use XML literals:</span></span>  
  
```vb  
Dim root As XElement = <ElementName>content</ElementName>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e94f6-111">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-111">This example produces the following output:</span></span>  
  
```xml  
<ElementName>content</ElementName>  
```  
  
 <span data-ttu-id="e94f6-112">文字列を <xref:System.Xml.Linq.XName> に割り当てると、<xref:System.String>からの暗黙的な変換が使用されます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-112">Assigning a string to an <xref:System.Xml.Linq.XName> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="e94f6-113">Visual Basic の例では、XML リテラルを使用して <xref:System.Xml.Linq.XElement> を作成します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-113">The Visual Basic example creates the <xref:System.Xml.Linq.XElement> using XML literals.</span></span> <span data-ttu-id="e94f6-114">XML リテラルが使用されている場合でも、<xref:System.Xml.Linq.XElement>に対して <xref:System.Xml.Linq.XName> オブジェクトが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-114">Even though XML literals are used, an <xref:System.Xml.Linq.XName> object is created for the <xref:System.Xml.Linq.XElement>.</span></span>  
  
 <span data-ttu-id="e94f6-115">また、<xref:System.Xml.Linq.XName> オブジェクトの <xref:System.Xml.Linq.XName.Get%2A> メソッドを呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-115">In addition, you can call the <xref:System.Xml.Linq.XName.Get%2A> method for an <xref:System.Xml.Linq.XName> object.</span></span> <span data-ttu-id="e94f6-116">ただし、string からの暗黙的な変換を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e94f6-116">However, the recommended way is to use the implicit conversion from string.</span></span>  
  
## <a name="creating-an-xname-in-a-namespace"></a><span data-ttu-id="e94f6-117">名前空間での XName の作成</span><span class="sxs-lookup"><span data-stu-id="e94f6-117">Creating an XName in a Namespace</span></span>  
 <span data-ttu-id="e94f6-118">XML の場合と同様に、<xref:System.Xml.Linq.XName> は名前空間に存在することも、名前空間に含まれないこともあります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-118">As with XML, an <xref:System.Xml.Linq.XName> can be in a namespace, or it can be in no namespace.</span></span>  
  
 <span data-ttu-id="e94f6-119">でC#は、名前空間の <xref:System.Xml.Linq.XName> を作成するための推奨される方法は、<xref:System.Xml.Linq.XNamespace> オブジェクトを宣言してから、加算演算子のオーバーライドを使用することです。</span><span class="sxs-lookup"><span data-stu-id="e94f6-119">For C#, the recommended approach for creating an <xref:System.Xml.Linq.XName> in a namespace is to declare the <xref:System.Xml.Linq.XNamespace> object, then use the override of the addition operator.</span></span>  
  
 <span data-ttu-id="e94f6-120">Visual Basic には、XML リテラルとグローバル名前空間宣言を使用して、名前空間に含まれる XML を作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e94f6-120">For Visual Basic, the recommended approach is to use XML literals and global namespace declarations to create XML that is in a namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "ElementName", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <ElementName>content</ElementName>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e94f6-121">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-121">This example produces the following output:</span></span>  
  
```xml  
<ElementName xmlns="http://www.adventure-works.com">content</ElementName>  
```  
  
## <a name="creating-an-xname-in-no-namespace"></a><span data-ttu-id="e94f6-122">名前空間なしでの XName の作成</span><span class="sxs-lookup"><span data-stu-id="e94f6-122">Creating an XName in no Namespace</span></span>  
 <span data-ttu-id="e94f6-123"><xref:System.Xml.Linq.XName> オブジェクトの <xref:System.Xml.Linq.XName.Namespace%2A> プロパティは、null でないことが保証されます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-123">The <xref:System.Xml.Linq.XName.Namespace%2A> property of an <xref:System.Xml.Linq.XName> object is guaranteed to not be null.</span></span> <span data-ttu-id="e94f6-124"><xref:System.Xml.Linq.XName> が名前空間にない場合、<xref:System.Xml.Linq.XName.Namespace%2A> プロパティは <xref:System.Xml.Linq.XNamespace.None%2A>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-124">If the <xref:System.Xml.Linq.XName> is in no namespace, then the <xref:System.Xml.Linq.XName.Namespace%2A> property will be set to <xref:System.Xml.Linq.XNamespace.None%2A>.</span></span> <span data-ttu-id="e94f6-125">次のコードはこれを示しています。</span><span class="sxs-lookup"><span data-stu-id="e94f6-125">The following code demonstrates this:</span></span>  
  
```csharp  
XElement root = new XElement("ElementName", "content");  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("The element is in no namespace.");  
else  
    Console.WriteLine("The element is in a namespace.");  
```  
  
```vb  
Dim root As XElement = <ElementName>content</ElementName>  
If (root.Name.Namespace Is XNamespace.None) Then  
    Console.WriteLine("The element is in no namespace.")  
Else  
    Console.WriteLine("The element is in a namespace.")  
End If  
```  
  
 <span data-ttu-id="e94f6-126">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-126">This example produces the following output:</span></span>  
  
```  
The element is in no namespace.  
```  
  
## <a name="using-expanded-names"></a><span data-ttu-id="e94f6-127">拡張名の使用</span><span class="sxs-lookup"><span data-stu-id="e94f6-127">Using Expanded Names</span></span>  
 <span data-ttu-id="e94f6-128">また、`{namespace}localname`の形式で拡張 XML 名から <xref:System.Xml.Linq.XName> を作成することもできます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-128">You can also create an <xref:System.Xml.Linq.XName> from a expanded XML name in the form `{namespace}localname`:</span></span>  
  
```csharp  
XElement root = new XElement("{http://www.adventure-works.com}ElementName", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = New XElement("{http://www.adventure-works.com}ElementName", "content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e94f6-129">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-129">This example produces the following output:</span></span>  
  
```xml  
<ElementName xmlns="http://www.adventure-works.com">content</ElementName>  
```  
  
 <span data-ttu-id="e94f6-130">拡張名を使用して <xref:System.Xml.Linq.XName> を作成する方が、<xref:System.Xml.Linq.XNamespace> オブジェクトを作成し、加算演算子のオーバーライドを使用するよりも効率が悪くなることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e94f6-130">Be aware that creating an <xref:System.Xml.Linq.XName> through an expanded name is less efficient than creating an <xref:System.Xml.Linq.XNamespace> object and using the override of the addition operator.</span></span> <span data-ttu-id="e94f6-131">また、グローバル名前空間をインポートし、Visual Basic で XML リテラルを使用するよりも効率が悪くなります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-131">It is also less efficient than importing a global namespace and using XML literals in Visual Basic.</span></span>  
  
 <span data-ttu-id="e94f6-132">展開された名前を使用して <xref:System.Xml.Linq.XName> を作成する場合、LINQ to XML によって、アトミック化された名前空間のインスタンスを検索する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-132">If you create an <xref:System.Xml.Linq.XName> using an expanded name, LINQ to XML must find the atomized instance of a namespace.</span></span> <span data-ttu-id="e94f6-133">この作業は、展開された名前を使用するたびに繰り返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-133">This work must be repeated for every use of an expanded name.</span></span> <span data-ttu-id="e94f6-134">この追加の時間は、LINQ クエリを記述するときにはほとんど発生しません。ただし、大きな XML ツリーを作成する場合は重要な場合があります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-134">This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.</span></span>  
  
## <a name="xname-objects-are-atomized"></a><span data-ttu-id="e94f6-135">XName オブジェクトを最小化する</span><span class="sxs-lookup"><span data-stu-id="e94f6-135">XName Objects are Atomized</span></span>  
 <span data-ttu-id="e94f6-136"><xref:System.Xml.Linq.XName> オブジェクトは、最小化されることが保証されます。つまり、2つの <xref:System.Xml.Linq.XName> オブジェクトの名前空間がまったく同じで、ローカル名が同じ場合、それらのオブジェクトは同じインスタンスを共有します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-136"><xref:System.Xml.Linq.XName> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XName> objects have exactly the same namespace and exactly the same local name, they will share the same instance.</span></span> <span data-ttu-id="e94f6-137">等値演算子と比較演算子も、この目的のために明示的に指定されています。</span><span class="sxs-lookup"><span data-stu-id="e94f6-137">The equality and comparison operators are also provided explicitly for this purpose.</span></span>  
  
 <span data-ttu-id="e94f6-138">他にも利点があります。この機能を使用すると、クエリをより迅速に実行できます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-138">Among other benefits, this feature allows for faster execution of queries.</span></span> <span data-ttu-id="e94f6-139">要素または属性の名前に基づいてフィルター処理を行う場合、述語で表される比較では、値の比較ではなく、id 比較が使用されます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-139">When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison.</span></span> <span data-ttu-id="e94f6-140">2つの文字列を比較するよりも、2つの参照が同じオブジェクトを実際に参照していることを確認する方がはるかに高速です。</span><span class="sxs-lookup"><span data-stu-id="e94f6-140">It is much faster to determine that two references actually refer to the same object than to compare two strings.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="e94f6-141">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="e94f6-141">LINQ to XML</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xName.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="e94f6-142">現在の <see cref="T:System.Xml.Linq.XName" /> と比較する <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="e94f6-142">The <see cref="T:System.Xml.Linq.XName" /> to compare to the current <see cref="T:System.Xml.Linq.XName" />.</span></span></param>
        <summary><span data-ttu-id="e94f6-143">指定した <see cref="T:System.Xml.Linq.XName" /> が、この <see cref="T:System.Xml.Linq.XName" /> と等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-143">Determines whether the specified <see cref="T:System.Xml.Linq.XName" /> is equal to this <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="e94f6-144">指定した <see langword="true" /> が現在の <see cref="T:System.Xml.Linq.XName" /> と等しい場合は <see cref="T:System.Xml.Linq.XName" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e94f6-144"><see langword="true" /> if the specified <see cref="T:System.Xml.Linq.XName" /> is equal to the current <see cref="T:System.Xml.Linq.XName" />; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e94f6-145">2つの <xref:System.Xml.Linq.XName> オブジェクトが等しい場合は、同じ展開名を持つ必要があります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-145">For two <xref:System.Xml.Linq.XName> objects to be equal, they must have the same expanded name.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="e94f6-146">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="e94f6-146">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Get">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e94f6-147"><see cref="T:System.Xml.Linq.XName" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-147">Gets an <see cref="T:System.Xml.Linq.XName" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e94f6-148">このメソッドは、拡張 XML 名から <xref:System.Xml.Linq.XName> を作成できるようにするオーバーロードを提供します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-148">This method provides overloads that allow you to create an <xref:System.Xml.Linq.XName> from a expanded XML name.</span></span> <span data-ttu-id="e94f6-149">`{namespace}localname`形式の文字列、または名前空間とローカル名を別に指定して、<xref:System.Xml.Linq.XName> を作成できます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-149">You can create an <xref:System.Xml.Linq.XName> from a string in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="e94f6-150"><xref:System.Xml.Linq.XName> を作成するためのより一般的で簡単な方法は、文字列からの暗黙的な変換を使用することです。</span><span class="sxs-lookup"><span data-stu-id="e94f6-150">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span> <span data-ttu-id="e94f6-151">名前空間に含まれる名前を作成するには、一般的な方法として、<xref:System.Xml.Linq.XNamespace> オブジェクトと文字列を組み合わせることができる加算演算子オーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-151">To create a name that is in a namespace, the common approach is to use the addition operator overload that allows you to combine an <xref:System.Xml.Linq.XNamespace> object and a string.</span></span>  
  
 <span data-ttu-id="e94f6-152">詳細と例については、「[方法: 名前空間を持つドキュメントC#を作成する (LINQ to XML)](https://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e94f6-152">For more information and examples, see [How to: Create a Document with Namespaces (C#) (LINQ to XML)](https://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c).</span></span>  
  
 <span data-ttu-id="e94f6-153">Visual Basic での名前空間の使用の詳細については、「 [Visual Basic の名前空間 (LINQ to XML)](https://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e94f6-153">For more information on using namespaces in Visual Basic, see [Namespaces in Visual Basic (LINQ to XML)](https://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc).</span></span>  
  
 <span data-ttu-id="e94f6-154"><xref:System.Xml.Linq.XName> オブジェクトは最小単位に分割されるため、まったく同じ名前の既存の <xref:System.Xml.Linq.XName> がある場合、割り当てられた変数は既存の <xref:System.Xml.Linq.XName>を参照します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-154">Because <xref:System.Xml.Linq.XName> objects are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e94f6-155">既存の <xref:System.Xml.Linq.XName>がない場合は、新しいものが作成され、初期化されます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-155">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="e94f6-156">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="e94f6-156">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName Get (string expandedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XName Get(string expandedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (expandedName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ Get(System::String ^ expandedName);" />
      <MemberSignature Language="F#" Value="static member Get : string -&gt; System.Xml.Linq.XName" Usage="System.Xml.Linq.XName.Get expandedName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expandedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expandedName"><span data-ttu-id="e94f6-157"><see cref="T:System.String" />{namespace}localname<c>という形式の拡張 XML 名を含む</c>。</span><span class="sxs-lookup"><span data-stu-id="e94f6-157">A <see cref="T:System.String" /> that contains an expanded XML name in the format <c>{namespace}localname</c>.</span></span></param>
        <summary><span data-ttu-id="e94f6-158"><see cref="T:System.Xml.Linq.XName" /> オブジェクトを拡張名から取得します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-158">Gets an <see cref="T:System.Xml.Linq.XName" /> object from an expanded name.</span></span></summary>
        <returns><span data-ttu-id="e94f6-159">拡張名から作成された <see cref="T:System.Xml.Linq.XName" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e94f6-159">An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e94f6-160">このメソッドには、<xref:System.Xml.Linq.XName>を作成できるオーバーロードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e94f6-160">This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e94f6-161">これは、`{namespace}localname`の形式で展開された XML 名から作成するか、名前空間とローカル名を個別に指定して作成できます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-161">You can create it from a expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="e94f6-162"><xref:System.Xml.Linq.XName> を作成するためのより一般的で簡単な方法は、文字列からの暗黙的な変換を使用することです。</span><span class="sxs-lookup"><span data-stu-id="e94f6-162">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span>  
  
 <span data-ttu-id="e94f6-163"><xref:System.Xml.Linq.XName> は最小単位に分割されるため、同じ名前の既存の <xref:System.Xml.Linq.XName> がある場合、割り当てられた変数は既存の <xref:System.Xml.Linq.XName>を参照します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-163">Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e94f6-164">既存の <xref:System.Xml.Linq.XName>がない場合は、新しいものが作成され、初期化されます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-164">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e94f6-165">このメソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-165">The following example shows the use of this method.</span></span>  
  
```csharp  
XName name = XName.Get("{http://www.adventure-works.com}Root");  
XElement el = new XElement(name, "content");  
Console.WriteLine(el);  
  
// This is the preferred approach for specifying the XName in the  
// constructor of XElement.  
XNamespace aw = "http://www.adventure-works.com";  
XElement el2 = new XElement(aw + "Root", "content");  
Console.WriteLine(el2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim name As XName = XName.Get("{http://www.adventure-works.com}Root")  
        Dim el As XElement = New XElement(name, "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach for specifying an XName in a namespace  
        ' for Visual Basic is to import a global namespace.  
        Dim el2 As XElement = <Root>content</Root>  
        Console.WriteLine(el2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e94f6-166">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-166">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="e94f6-167">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="e94f6-167">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName Get (string localName, string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XName Get(string localName, string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Get(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (localName As String, namespaceName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ Get(System::String ^ localName, System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member Get : string * string -&gt; System.Xml.Linq.XName" Usage="System.Xml.Linq.XName.Get (localName, namespaceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName"><span data-ttu-id="e94f6-168">ローカル (非修飾) 名。</span><span class="sxs-lookup"><span data-stu-id="e94f6-168">A local (unqualified) name.</span></span></param>
        <param name="namespaceName"><span data-ttu-id="e94f6-169">XML 名前空間。</span><span class="sxs-lookup"><span data-stu-id="e94f6-169">An XML namespace.</span></span></param>
        <summary><span data-ttu-id="e94f6-170">ローカル名および名前空間から <see cref="T:System.Xml.Linq.XName" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-170">Gets an <see cref="T:System.Xml.Linq.XName" /> object from a local name and a namespace.</span></span></summary>
        <returns><span data-ttu-id="e94f6-171">指定されたローカル名と名前空間から作成された <see cref="T:System.Xml.Linq.XName" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e94f6-171">An <see cref="T:System.Xml.Linq.XName" /> object created from the specified local name and namespace.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e94f6-172">このメソッドには、<xref:System.Xml.Linq.XName>を作成できるオーバーロードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e94f6-172">This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e94f6-173">これは、`{namespace}localname`の形式で展開された XML 名から作成するか、名前空間とローカル名を個別に指定して作成できます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-173">You can create it from an expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="e94f6-174"><xref:System.Xml.Linq.XName> を作成するためのより一般的で簡単な方法は、文字列からの暗黙的な変換を使用することです。</span><span class="sxs-lookup"><span data-stu-id="e94f6-174">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span>  
  
 <span data-ttu-id="e94f6-175"><xref:System.Xml.Linq.XName> は最小単位に分割されるため、同じ名前の既存の <xref:System.Xml.Linq.XName> がある場合、割り当てられた変数は既存の <xref:System.Xml.Linq.XName>を参照します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-175">Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e94f6-176">既存の <xref:System.Xml.Linq.XName>がない場合は、新しいものが作成され、初期化されます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-176">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e94f6-177">このメソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-177">The following example shows the use of this method.</span></span>  
  
```csharp  
XName name = XName.Get("Root", "http://www.adventure-works.com");  
XElement el = new XElement(name, "content");  
Console.WriteLine(el);  
  
// This is the preferred form.  
XNamespace aw = "http://www.adventure-works.com";  
XElement el2 = new XElement(aw + "Root", "content");  
Console.WriteLine(el2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim name As XName = XName.Get("{http://www.adventure-works.com}Root")  
        Dim el As XElement = New XElement(name, "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach for specifying an XName in a namespace  
        ' for Visual Basic is to import a global namespace.  
        Dim el2 As XElement = <Root>content</Root>  
        Console.WriteLine(el2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e94f6-178">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-178">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="e94f6-179">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="e94f6-179">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xName.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e94f6-180">この <see cref="T:System.Xml.Linq.XName" /> のハッシュ コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-180">Gets a hash code for this <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="e94f6-181"><see cref="T:System.Int32" /> のハッシュ コードを格納している <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="e94f6-181">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e94f6-182">このメソッドは、<xref:System.Xml.Linq.XName>のハッシュ関数として機能します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-182">This method serves as a hash function for <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e94f6-183"><xref:System.Xml.Linq.XName.GetHashCode%2A> は、ハッシュアルゴリズムや、ハッシュテーブルなどのデータ構造で使用できます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-183">You can use <xref:System.Xml.Linq.XName.GetHashCode%2A> in hashing algorithms, or in data structures such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="e94f6-184">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="e94f6-184">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="System.Xml.Linq.XName.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e94f6-185">名前のローカル (非修飾) 部を取得します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-185">Gets the local (unqualified) part of the name.</span></span></summary>
        <value><span data-ttu-id="e94f6-186">修飾名のローカル (非修飾) 部を含む <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="e94f6-186">A <see cref="T:System.String" /> that contains the local (unqualified) part of the name.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e94f6-187">このプロパティは `null`されていないことが保証されます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-187">This property is guaranteed to not be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e94f6-188">このプロパティの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-188">The following example shows the use of this property.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e94f6-189">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-189">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XName.Namespace" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="e94f6-190">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="e94f6-190">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNamespace Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Namespace As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNamespace ^ Namespace { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XName.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e94f6-191">完全修飾名の名前空間部分を取得します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-191">Gets the namespace part of the fully qualified name.</span></span></summary>
        <value><span data-ttu-id="e94f6-192">名前の名前空間部分を含む <see cref="T:System.Xml.Linq.XNamespace" />。</span><span class="sxs-lookup"><span data-stu-id="e94f6-192">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace part of the name.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e94f6-193"><xref:System.Xml.Linq.XName.Namespace%2A> プロパティが `null` になることはありません。</span><span class="sxs-lookup"><span data-stu-id="e94f6-193">The <xref:System.Xml.Linq.XName.Namespace%2A> property is guaranteed to not be `null`.</span></span> <span data-ttu-id="e94f6-194"><xref:System.Xml.Linq.XName> が名前空間にない場合、このプロパティは <xref:System.Xml.Linq.XNamespace.None%2A>を返します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-194">If an <xref:System.Xml.Linq.XName> is in no namespace, this property returns <xref:System.Xml.Linq.XNamespace.None%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e94f6-195">このプロパティの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-195">The following example shows the use of this property.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e94f6-196">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-196">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="e94f6-197">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="e94f6-197">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceName : string" Usage="System.Xml.Linq.XName.NamespaceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e94f6-198">この <see cref="T:System.Xml.Linq.XNamespace" /> の <see cref="T:System.Xml.Linq.XName" /> の URI を返します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-198">Returns the URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <value><span data-ttu-id="e94f6-199">この <see cref="T:System.Xml.Linq.XNamespace" /> の <see cref="T:System.Xml.Linq.XName" /> の URI。</span><span class="sxs-lookup"><span data-stu-id="e94f6-199">The URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e94f6-200">これは、<xref:System.Xml.Linq.XName>から名前空間名を取得するための便利なプロパティです。</span><span class="sxs-lookup"><span data-stu-id="e94f6-200">This is a convenience property to get the namespace name from an <xref:System.Xml.Linq.XName>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e94f6-201">この例では、名前空間に要素を作成し、要素の名前空間を出力します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-201">This example creates an element in a namespace, and then prints the element's namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root");  
Console.WriteLine(root.Name.NamespaceName);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e94f6-202">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-202">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="e94f6-203">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="e94f6-203">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XName left, System.Xml.Linq.XName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XName left, class System.Xml.Linq.XName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XName, right As XName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XName ^ left, System::Xml::Linq::XName ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xml.Linq.XName * System.Xml.Linq.XName -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XName" />
        <Parameter Name="right" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e94f6-204">比較対象となる最初の <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="e94f6-204">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e94f6-205">比較対象となる 2 番目の <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="e94f6-205">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</span></span></param>
        <summary><span data-ttu-id="e94f6-206"><see cref="T:System.Xml.Linq.XName" /> の 2 つのインスタンスが等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-206">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are equal.</span></span></summary>
        <returns><span data-ttu-id="e94f6-207"><see langword="true" /> と <paramref name="left" /> が等しい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e94f6-207"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e94f6-208">演算子のオーバーロード `==` と `!=` は、<xref:System.Xml.Linq.XName> と `string`(`element.Name == "SomeElementName"`など) との比較を可能にするために含まれています。</span><span class="sxs-lookup"><span data-stu-id="e94f6-208">The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a `string`, such as`element.Name == "SomeElementName"`.</span></span> <span data-ttu-id="e94f6-209">の定義済みの参照等C#値演算子では、参照変換のみを使用して1つのオペランドを他方の型に変換可能にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-209">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</span></span> <span data-ttu-id="e94f6-210">これらの演算子では、文字列から <xref:System.Xml.Linq.XName>への暗黙的な変換は考慮されません。</span><span class="sxs-lookup"><span data-stu-id="e94f6-210">These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span>  
  
## Examples  
 <span data-ttu-id="e94f6-211">次の例では、<xref:System.Xml.Linq.XName> オブジェクトと文字列の比較を示します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-211">The following example shows some comparisons between <xref:System.Xml.Linq.XName> objects and strings.</span></span>  
  
```csharp  
XName xn;  
xn = XName.Get("Root");  
Console.WriteLine(xn == "Root");  
  
xn = XName.Get("Root", "http://www.adventure-works.com");  
Console.WriteLine(xn == "{http://www.adventure-works.com}Root");  
  
XElement root = new XElement("Root", "content");  
Console.WriteLine(root.Name == "Root");  
```  
  
```vb  
Dim xn As XName  
xn = XName.Get("Root")  
Console.WriteLine(xn = "Root")  
  
xn = XName.Get("Root", "http://www.adventure-works.com")  
Console.WriteLine(xn = "{http://www.adventure-works.com}Root")  
  
Dim root As XElement = New XElement("Root", "content")  
Console.WriteLine(root.Name = "Root")  
```  
  
 <span data-ttu-id="e94f6-212">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-212">This example produces the following output:</span></span>  
  
```  
True  
True  
True  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="e94f6-213">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="e94f6-213">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XName (string expandedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Implicit(string expandedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expandedName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XName ^(System::String ^ expandedName);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; System.Xml.Linq.XName" Usage="System.Xml.Linq.XName.op_Implicit expandedName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expandedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expandedName"><span data-ttu-id="e94f6-214"><c>{namespace}localname</c> という形式の拡張 XML 名を含む文字列。</span><span class="sxs-lookup"><span data-stu-id="e94f6-214">A string that contains an expanded XML name in the format <c>{namespace}localname</c>.</span></span></param>
        <summary><span data-ttu-id="e94f6-215">拡張 XML 名として書式設定された文字列 (<c>{namespace}localname</c>) を <see cref="T:System.Xml.Linq.XName" /> オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-215">Converts a string formatted as an expanded XML name (that is,<c>{namespace}localname</c>) to an <see cref="T:System.Xml.Linq.XName" /> object.</span></span></summary>
        <returns><span data-ttu-id="e94f6-216">拡張名から作成された <see cref="T:System.Xml.Linq.XName" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e94f6-216">An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e94f6-217">この暗黙の演算子は、適切なコンストラクターに文字列を渡すことによって <xref:System.Xml.Linq.XElement> または <xref:System.Xml.Linq.XAttribute> を作成するときに使用します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-217">You are using this implicit operator when you create an <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> by passing a string to the appropriate constructor.</span></span>  
  
## Examples  
 <span data-ttu-id="e94f6-218">次の例では、文字列を割り当てることによって <xref:System.Xml.Linq.XName> を作成し、この暗黙の変換演算子を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-218">The following example creates an <xref:System.Xml.Linq.XName> by assigning a string to it, which invokes this implicit conversion operator.</span></span>  
  
```csharp  
XElement el = new XElement("{http://www.adventure-works.com}Root", "content");  
Console.WriteLine(el);  
  
// The preferred approach is to initialize an XNamespace object  
// and use the overload of the addition operator.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim el As XElement = New XElement("{http://www.adventure-works.com}Root", "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach is to import a global namespace and   
        ' use an XML literal.  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e94f6-219">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-219">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="e94f6-220">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="e94f6-220">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XName left, System.Xml.Linq.XName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XName left, class System.Xml.Linq.XName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XName, right As XName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XName ^ left, System::Xml::Linq::XName ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xml.Linq.XName * System.Xml.Linq.XName -&gt; bool" Usage="System.Xml.Linq.XName.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XName" />
        <Parameter Name="right" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e94f6-221">比較対象となる最初の <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="e94f6-221">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e94f6-222">比較対象となる 2 番目の <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="e94f6-222">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</span></span></param>
        <summary><span data-ttu-id="e94f6-223"><see cref="T:System.Xml.Linq.XName" /> の 2 つのインスタンスが等しくないかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-223">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are not equal.</span></span></summary>
        <returns><span data-ttu-id="e94f6-224"><see langword="true" /> と <paramref name="left" /> が等しくない場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e94f6-224"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e94f6-225">演算子のオーバーロード `==` と `!=` は、<xref:System.Xml.Linq.XName> と文字列 (`element.Name == "SomeElementName"`など) との比較を可能にするために含まれています。</span><span class="sxs-lookup"><span data-stu-id="e94f6-225">The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a string, such as`element.Name == "SomeElementName"`.</span></span> <span data-ttu-id="e94f6-226">の定義済みの参照等C#値演算子では、参照変換のみを使用して1つのオペランドを他方の型に変換可能にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-226">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</span></span> <span data-ttu-id="e94f6-227">これらの演算子では、文字列から <xref:System.Xml.Linq.XName>への暗黙的な変換は考慮されません。</span><span class="sxs-lookup"><span data-stu-id="e94f6-227">These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span>  
  
## Examples  
 <span data-ttu-id="e94f6-228">次C#の例では、この演算子を呼び出す文字列と <xref:System.Xml.Linq.XName> オブジェクトを比較します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-228">The following C# example compares an <xref:System.Xml.Linq.XName> object to a string, which invokes this operator.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "content");  
  
Console.WriteLine(root.Name != "{http://www.adventure-works.com}Root");  
  
// the following is the preferred idiom  
Console.WriteLine(root.Name != aw + "Root");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root.Name <> "{http://www.adventure-works.com}Root")  
  
        ' the following is the preferred idiom  
        Console.WriteLine(root.Name <> GetXmlNamespace() + "Root")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e94f6-229">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-229">This example produces the following output:</span></span>  
  
```  
False  
False  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="e94f6-230">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="e94f6-230">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals">
      <MemberSignature Language="C#" Value="bool IEquatable&lt;XName&gt;.Equals (System.Xml.Linq.XName other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals(class System.Xml.Linq.XName other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.System#IEquatable&lt;System#Xml#Linq#XName&gt;#Equals(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As XName) As Boolean Implements IEquatable(Of XName).Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals(System::Xml::Linq::XName ^ other) = IEquatable&lt;System::Xml::Linq::XName ^&gt;::Equals;" />
      <MemberSignature Language="F#" Value="abstract member System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals : System.Xml.Linq.XName -&gt; bool&#xA;override this.System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals : System.Xml.Linq.XName -&gt; bool" Usage="xName.System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="e94f6-231">この <see cref="T:System.Xml.Linq.XName" /> と比較する <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="e94f6-231">The <see cref="T:System.Xml.Linq.XName" /> to compare with this <see cref="T:System.Xml.Linq.XName" />.</span></span></param>
        <summary><span data-ttu-id="e94f6-232">現在の <see cref="T:System.Xml.Linq.XName" /> が指定した <see cref="T:System.Xml.Linq.XName" /> と等しいかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-232">Indicates whether the current <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="e94f6-233">この <see langword="true" /> が指定した <see cref="T:System.Xml.Linq.XName" /> に等しい場合は、<see cref="T:System.Xml.Linq.XName" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e94f6-233"><see langword="true" /> if this <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />, otherwise <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="xName.System.Runtime.Serialization.ISerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="e94f6-234">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="e94f6-234">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span></span></param>
        <param name="context"><span data-ttu-id="e94f6-235">このシリアル化のシリアル化先です (<see cref="T:System.Runtime.Serialization.StreamingContext" /> を参照)。</span><span class="sxs-lookup"><span data-stu-id="e94f6-235">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</span></span></param>
        <summary><span data-ttu-id="e94f6-236"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、ターゲット オブジェクトをシリアル化するために必要なデータを設定します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-236">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data required to serialize the target object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e94f6-237">このメソッドは、LINQ to XML オブジェクトを含むオブジェクトグラフをシリアル化するために、内部的に使用されます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-237">This method is used internally to serialize object graphs that contain LINQ to XML objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xName.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e94f6-238"><c>{namespace}localname</c> という形式の拡張 XML 名を返します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-238">Returns the expanded XML name in the format <c>{namespace}localname</c>.</span></span></summary>
        <returns><span data-ttu-id="e94f6-239"><see cref="T:System.String" />{namespace}localname<c>という形式の拡張 XML 名を含む</c>。</span><span class="sxs-lookup"><span data-stu-id="e94f6-239">A <see cref="T:System.String" /> that contains the expanded XML name in the format <c>{namespace}localname</c>.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e94f6-240">次の例では、<xref:System.Console.WriteLine%2A>を呼び出し、<xref:System.Xml.Linq.XName>を渡します。</span><span class="sxs-lookup"><span data-stu-id="e94f6-240">The following example calls <xref:System.Console.WriteLine%2A>, passing an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="e94f6-241">これにより、<xref:System.Xml.Linq.XName.ToString%2A> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e94f6-241">This causes the <xref:System.Xml.Linq.XName.ToString%2A> method to be called.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e94f6-242">この例の結果は、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="e94f6-242">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="e94f6-243">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="e94f6-243">LINQ to XML</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
