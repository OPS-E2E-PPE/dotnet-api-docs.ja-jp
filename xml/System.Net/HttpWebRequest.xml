<Type Name="HttpWebRequest" FullName="System.Net.HttpWebRequest">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b5a735132645a8b6ebca5ec955e34a7a57bc5a80" /><Meta Name="ms.sourcegitcommit" Value="8dc7427b3f8ede13c290b671feeb1dc33978e582" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/06/2020" /><Meta Name="ms.locfileid" Value="77043482" /></Metadata><TypeSignature Language="C#" Value="public class HttpWebRequest : System.Net.WebRequest, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable HttpWebRequest extends System.Net.WebRequest implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpWebRequest" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpWebRequest&#xA;Inherits WebRequest&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpWebRequest : System::Net::WebRequest, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type HttpWebRequest = class&#xA;    inherit WebRequest&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Requests</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.WebRequest</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.FriendAccessAllowed</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:System.Net.WebRequest" /> クラスの HTTP 固有の実装を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

> [!IMPORTANT]
>  新規の開発には `HttpWebRequest` を使用しないことをお勧めします。 代わりに、<xref:System.Net.Http.HttpClient?displayProperty=nameWithType> クラスを使用します。

 <xref:System.Net.HttpWebRequest> クラスは、<xref:System.Net.WebRequest> で定義されているプロパティとメソッド、および HTTP を使用してユーザーが直接サーバーと対話できるようにする追加のプロパティとメソッドをサポートします。  
  
 <xref:System.Net.HttpWebRequest.%23ctor%2A> コンストラクターは使用しないでください。 <xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType> メソッドを使用して、新しい <xref:System.Net.HttpWebRequest> オブジェクトを初期化します。 Uniform Resource Identifier (URI) のスキームが `http://` または `https://`の場合、<xref:System.Net.WebRequest.Create%2A> は <xref:System.Net.HttpWebRequest> オブジェクトを返します。  
  
 <xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドは、<xref:System.Net.HttpWebRequest.RequestUri%2A> プロパティで指定されたリソースへの同期要求を行い、応答オブジェクトを含む <xref:System.Net.HttpWebResponse> を返します。 応答データは、<xref:System.Net.HttpWebResponse.GetResponseStream%2A>によって返されたストリームを使用して受信できます。 応答オブジェクトまたは応答ストリームが閉じている場合、残りのデータは失わになります。 残りのデータはドレインされ、次の条件に該当する場合は、応答オブジェクトまたはストリームを閉じるときに、後続の要求に対してソケットが再利用されます。これは、次のような状況が発生した場合、受信する必要があるデータの量が少ない場合、または残りのデータは、短い間隔で受信されます。 上記のいずれの条件も保持しない場合、またはドレイン時間を超過した場合、ソケットは閉じられます。 キープアライブまたはパイプライン接続の場合、アプリケーションが EOF までストリームを読み取ることを強くお勧めします。 これにより、後続の要求でソケットが再利用されるため、パフォーマンスが向上し、使用されるリソースが少なくなります。  
  
 リソースにデータを送信する場合、<xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドは、データの送信に使用する <xref:System.IO.Stream> オブジェクトを返します。 <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> メソッドと <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> メソッドは、送信データストリームへの非同期アクセスを提供します。  
  
 <xref:System.Net.HttpWebRequest>を使用したクライアント認証の場合、クライアント証明書は、現在のユーザーの My 証明書ストアにインストールする必要があります。  
  
 <xref:System.Net.HttpWebRequest> クラスは、リソースへのアクセス中にエラーが発生した場合に <xref:System.Net.WebException> をスローします。 <xref:System.Net.WebException.Status%2A?displayProperty=nameWithType> プロパティには、エラーの原因を示す <xref:System.Net.WebExceptionStatus> 値が含まれています。 <xref:System.Net.WebException.Status%2A?displayProperty=nameWithType> が <xref:System.Net.WebExceptionStatus.ProtocolError?displayProperty=nameWithType>場合、<xref:System.Net.WebException.Response%2A> プロパティには、リソースから受信した <xref:System.Net.HttpWebResponse> が含まれます。  
  
 <xref:System.Net.HttpWebRequest> は、インターネットリソースに送信される一般的な HTTP ヘッダー値をプロパティとして、メソッドによって設定、またはシステムによって設定します。次の表に、完全な一覧を示します。 <xref:System.Net.HttpWebRequest.Headers%2A> プロパティの他のヘッダーは、名前と値のペアとして設定できます。 サーバーとキャッシュは、要求中にヘッダーを変更または追加できることに注意してください。  
  
 次の表に、プロパティまたはメソッドまたはシステムによって設定される HTTP ヘッダーの一覧を示します。  
  
|ヘッダー|設定者|  
|------------|------------|  
|同意する|<xref:System.Net.HttpWebRequest.Accept%2A> プロパティによって設定されます。|  
|接続|<xref:System.Net.HttpWebRequest.Connection%2A> プロパティ、<xref:System.Net.HttpWebRequest.KeepAlive%2A> プロパティによって設定されます。|  
|Content-Length|<xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティによって設定されます。|  
|コンテンツの種類|<xref:System.Net.HttpWebRequest.ContentType%2A> プロパティによって設定されます。|  
|Expect|<xref:System.Net.HttpWebRequest.Expect%2A> プロパティによって設定されます。|  
|Date|システムによって現在の日付に設定されます。|  
|Host|システムによって現在のホスト情報に設定されます。|  
|If-Modified-Since|<xref:System.Net.HttpWebRequest.IfModifiedSince%2A> プロパティによって設定されます。|  
|[範囲]|<xref:System.Net.HttpWebRequest.AddRange%2A> メソッドによって設定されます。|  
|Referer|<xref:System.Net.HttpWebRequest.Referer%2A> プロパティによって設定されます。|  
|Transfer-Encoding|<xref:System.Net.HttpWebRequest.TransferEncoding%2A> プロパティによって設定されます (<xref:System.Net.HttpWebRequest.SendChunked%2A> プロパティは `true`である必要があります)。|  
|User-Agent|<xref:System.Net.HttpWebRequest.UserAgent%2A> プロパティによって設定されます。|  
  
> [!NOTE]
>  <xref:System.Net.HttpWebRequest> は自動的に登録されます。 `http://` または `https://`で始まる Uri を使用する前に、<xref:System.Net.HttpWebRequest?displayProperty=nameWithType> を登録するために <xref:System.Net.WebRequest.RegisterPrefix%2A> メソッドを呼び出す必要はありません。  
  
 ローカルコンピューターまたはアプリケーション構成ファイルで、既定のプロキシを使用するように指定できます。 <xref:System.Net.HttpWebRequest.Proxy%2A> プロパティが指定されている場合、<xref:System.Net.HttpWebRequest.Proxy%2A> プロパティのプロキシ設定がローカルコンピューターまたはアプリケーション構成ファイルより優先され、<xref:System.Net.HttpWebRequest> インスタンスは指定されたプロキシ設定を使用します。 構成ファイルでプロキシが指定されておらず、<xref:System.Net.HttpWebRequest.Proxy%2A> プロパティが指定されていない場合、<xref:System.Net.HttpWebRequest> クラスは、ローカルコンピューター上の Internet Explorer から継承されたプロキシ設定を使用します。 Internet Explorer にプロキシ設定がない場合、要求はサーバーに直接送信されます。  
  
 <xref:System.Net.HttpWebRequest>クラスがワイルドカード文字を Internet Explorer によって直接解析バイパス リストよりも異なる方法で Internet Explorer から継承プロキシ バイ パスの一覧を解析します。 たとえば、<xref:System.Net.HttpWebRequest>クラスでは「nt *」Internet Explorer からのバイパス リストを解析の正規表現として"nt.$"です。 これは、Internet Explorer のネイティブの動作とは異なります。 これの URL"`http://intxxxxx`"を使用してプロキシを使用しないと、<xref:System.Net.HttpWebRequest>クラスが、Internet Explorer を使用してプロキシをバイパスできません。  
  
> [!NOTE]
>  フレームワークは、作成時に SSL セッションをキャッシュし、可能であれば、新しい要求に対してキャッシュされたセッションの再利用を試みます。 SSL セッションを再利用しようとすると、フレームワークは <xref:System.Net.HttpWebRequest.ClientCertificates%2A> の最初の要素 (存在する場合) を使用するか、<xref:System.Net.HttpWebRequest.ClientCertificates%2A> が空の場合は匿名セッションを再利用しようとします。  
  
> [!NOTE]
>  セキュリティ上の理由から、cookie は既定で無効になっています。 Cookie を使用する場合は、<xref:System.Net.HttpWebRequest.CookieContainer%2A> プロパティを使用して cookie を有効にします。  
  
 .NET Framework 4.6 には、安全でない暗号およびハッシュ アルゴリズムの接続をブロックする、新しいセキュリティ機能が含まれています。 HttpClient、HttpWebRequest、FTPClient、SmtpClient、SslStream などの API を介して TLS/SSL を使用して、.NET Framework 4.6 を対象とするアプリケーションは、既定でセキュリティが強化された動作を取得します。  
  
 開発者は、既存の SSL3 サービスや TLS (RC4) サービスとの相互運用性を維持するために、この動作を無効にすることができます。 [この記事で](https://support.microsoft.com/kb/3069494)は、新しい動作が無効になるようにコードを変更する方法について説明します。  
  
   
  
## Examples  
 URI `http://www.contoso.com/`の <xref:System.Net.HttpWebRequest> を作成するコード例を次に示します。  
  
 [!code-cpp[Classic HttpWebRequest Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpWebRequest Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpWebRequest Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpWebRequest Example/CS/source.cs#1)]
 [!code-vb[Classic HttpWebRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpWebRequest Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.WebPermission">要求された URI または要求のリダイレクト先の URI にアクセスする場合は。 関連付けられた列挙型: <see cref="F:System.Net.NetworkAccess.Connect" /></permission>
    <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/defaultproxy-element-network-settings.md">DefaultProxy 要素 (ネットワーク設定)</related>
    <related type="Article" href="~/docs/framework/network-programming/changes-to-ntlm-authentication-for-httpwebrequest-in-version-3-5-sp1.md">バージョン 3.5 SP1 での HTTPWebRequest の NTLM 認証に対する変更</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Net.HttpWebRequest" /> クラスの新しいインスタンスを初期化します。 これらのコンストラクターは今後は使用しません。詳細については、「解説」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

両方の <xref:System.Net.HttpWebRequest> コンストラクターは互換性のために残されているため、使用しないでください。 <xref:System.Net.WebRequest.CreateHttp%2A?displayProperty=nameWithType> メソッドを呼び出して、新しい <xref:System.Net.HttpWebRequest> オブジェクトを初期化します。     
  
      ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpWebRequest ();" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.#ctor" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpWebRequest();" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Net.HttpWebRequest" /> クラスの新しいインスタンスを初期化します。 このコンストラクターは今後は使用しません。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpWebRequest (Uri uri);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri uri) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.#ctor(System.Uri)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpWebRequest(Uri ^ uri);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="F#" Value="new System.Net.HttpWebRequest : Uri -&gt; System.Net.HttpWebRequest" Usage="new System.Net.HttpWebRequest uri" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      </Parameters>
      <Docs>
        <param name="uri">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpWebRequest (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; HttpWebRequest(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);" />
      <MemberSignature Language="F#" Value="new System.Net.HttpWebRequest : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Net.HttpWebRequest" Usage="new System.Net.HttpWebRequest (serializationInfo, streamingContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Serialization is obsoleted for this type", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Obsolete("Serialization is obsoleted for this type.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Serialization is obsoleted for this type.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0">
          <AttributeName>System.Obsolete("Serialization is obsoleted for this type.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">新しい <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトをシリアル化するために必要な情報を格納する <see cref="T:System.Net.HttpWebRequest" /> オブジェクト。</param>
        <param name="streamingContext">新しい <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Net.HttpWebRequest" /> オブジェクト。</param>
        <summary><see cref="T:System.Net.HttpWebRequest" /> クラスと <see cref="T:System.Runtime.Serialization.SerializationInfo" /> クラスの指定したインスタンスから、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。 このコンストラクターは今後は使用しません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 シリアル化を使用する場合は、アプリケーションを完全信頼モードで実行する必要があります。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.WebPermission">ネットワークリソースへの無制限アクセス。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">XML シリアル化および SOAP シリアル化</related>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public override void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Abort();" />
      <MemberSignature Language="F#" Value="override this.Abort : unit -&gt; unit" Usage="httpWebRequest.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>インターネット リソースへの要求を取り消します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.Abort%2A> メソッドは、リソースへの要求を取り消します。 要求が取り消された後、<xref:System.Net.HttpWebRequest.GetResponse%2A>、<xref:System.Net.HttpWebRequest.BeginGetResponse%2A>、<xref:System.Net.HttpWebRequest.EndGetResponse%2A>、<xref:System.Net.HttpWebRequest.GetRequestStream%2A>、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>、または <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> メソッドを呼び出すと、<xref:System.Net.WebException> プロパティが <xref:System.Net.WebException.Status%2A> に設定された <xref:System.Net.WebExceptionStatus.RequestCanceled>が発生します。  
  
 これらの操作のいずれかが未処理であるときに <xref:System.Net.HttpWebRequest.Abort%2A> メソッドが呼び出された場合、<xref:System.Net.HttpWebRequest.Abort%2A> メソッドは、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> または <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドに対して指定されたコールバックを同期的に実行します。 これにより、デッドロックの問題が発生する可能性があります。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[ネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。  
  
   
  
## Examples  
 非同期要求の場合、独自のタイムアウトメカニズムを実装するのは、クライアントアプリケーションの役割です。 これを行う方法を次のコード例に示します。  
  
 [!code-cpp[System.Net.HttpWebRequest.BeginGetResponse#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/CPP/begingetresponse.cpp#1)]
 [!code-csharp[System.Net.HttpWebRequest.BeginGetResponse#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/CS/begingetresponse.cs#1)]
 [!code-vb[System.Net.HttpWebRequest.BeginGetResponse#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/VB/begingetresponse.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public string Accept { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Accept" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Accept" />
      <MemberSignature Language="VB.NET" Value="Public Property Accept As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Accept { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Accept : string with get, set" Usage="System.Net.HttpWebRequest.Accept" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Accept" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value><see langword="Accept" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Accept` HTTP ヘッダーをクリアするには、<xref:System.Net.HttpWebRequest.Accept%2A> プロパティを `null`に設定します。  
  
> [!NOTE]
>  このプロパティの値は <xref:System.Net.WebHeaderCollection> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.Accept%2A> プロパティを設定します。  
  
 [!code-cpp[HttpWebRequest_Accept#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Accept/CPP/httpwebrequest_accept.cpp#1)]
 [!code-csharp[HttpWebRequest_Accept#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Accept/CS/httpwebrequest_accept.cs#1)]
 [!code-vb[HttpWebRequest_Accept#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Accept/VB/httpwebrequest_accept.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddRange">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>要求に範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての HTTP エンティティは HTTP メッセージでバイトのシーケンスとして表されるため、バイト範囲の概念は任意の HTTP エンティティにとって意味があります。 ただし、すべてのクライアントとサーバーで、バイト範囲操作をサポートする必要はありません。  
  
 要求の範囲ヘッダーを使用すると、クライアントは、HTTP エンティティ内の指定されたバイト範囲の一部だけを受信するように要求できます。 範囲ヘッダー要求をサポートするためにサーバーは必要ありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (int range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(int32 range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (range As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(int range);" />
      <MemberSignature Language="F#" Value="member this.AddRange : int -&gt; unit" Usage="httpWebRequest.AddRange range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="range">範囲の先頭または末尾。</param>
        <summary>要求されたデータの先頭または末尾からの特定の範囲の要求にバイト範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=nameWithType> メソッドは、バイト範囲ヘッダーを要求に追加します。  
  
 `range` が正の場合、`range` パラメーターは範囲の開始点を指定します。 サーバーは、HTTP エンティティ内のデータの末尾に指定された `range` パラメーターからデータの送信を開始する必要があります。  
  
 `range` が負の場合、`range` パラメーターは範囲の終了点を指定します。 サーバーは、HTTP エンティティ内のデータの先頭から、指定された `range` パラメーターへのデータの送信を開始する必要があります。  
  
 すべての HTTP エンティティは HTTP メッセージでバイトのシーケンスとして表されるため、バイト範囲の概念は任意の HTTP エンティティにとって意味があります。 ただし、すべてのクライアントとサーバーで、バイト範囲操作をサポートする必要はありません。  
  
 要求の範囲ヘッダーを使用すると、クライアントは、HTTP エンティティ内の指定されたバイト範囲の一部だけを受信するように要求できます。 範囲ヘッダー要求をサポートするためにサーバーは必要ありません。  
  
 サーバーに最初の100バイト (先頭からバイト位置 99) を送信するよう要求する HTTP プロトコル要求の範囲ヘッダーの例を次に示します。  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 この例では、`range` パラメーターは-99 です。  
  
 HTTP サーバーは、範囲ヘッダーが Accept 範囲ヘッダーでサポートされていることを示します。 バイト範囲をサポートしているサーバーからの受け入れ範囲ヘッダーの例を次に示します。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 サーバーからの応答のヘッダーで受け入れ範囲ヘッダーが受信されない場合、サーバーは範囲ヘッダーをサポートしません。 範囲をサポートしていないが、受け入れ範囲ヘッダーを認識しているサーバーからの受け入れ範囲ヘッダーの例を次に示します。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 範囲要求から応答を受信すると、要求全体に関連付けられている HTTP ヘッダーのみが解析され、<xref:System.Net.HttpWebResponse> クラスのプロパティを介して使用できるようになります。 各範囲に関連付けられているヘッダーは、応答で返されます。  
  
   
  
## Examples  
 次のコード例では、要求に範囲ヘッダーを追加します。  
  
 [!code-cpp[System.Net.HttpWebRequest.AddRange#1](~/samples/snippets/cpp/VS_Snippets_Misc/system.net.httpwebrequest.addrange/cpp/source.cpp#1)]
 [!code-csharp[System.Net.HttpWebRequest.AddRange#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.httpwebrequest.addrange/cs/source.cs#1)]
 [!code-vb[System.Net.HttpWebRequest.AddRange#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.net.httpwebrequest.addrange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (long range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(int64 range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (range As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(long range);" />
      <MemberSignature Language="F#" Value="member this.AddRange : int64 -&gt; unit" Usage="httpWebRequest.AddRange range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="range">範囲の先頭または末尾。</param>
        <summary>要求されたデータの先頭または末尾からの特定の範囲の要求にバイト範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=nameWithType> メソッドは、バイト範囲ヘッダーを要求に追加します。  
  
 `range` が正の場合、`range` パラメーターは範囲の開始点を指定します。 サーバーは、HTTP エンティティ内のデータの末尾に指定された `range` パラメーターからデータの送信を開始する必要があります。  
  
 `range` が負の場合、`range` パラメーターは範囲の終了点を指定します。 サーバーは、HTTP エンティティ内のデータの先頭から、指定された `range` パラメーターへのデータの送信を開始する必要があります。  
  
 すべての HTTP エンティティは HTTP メッセージでバイトのシーケンスとして表されるため、バイト範囲の概念は任意の HTTP エンティティにとって意味があります。 ただし、すべてのクライアントとサーバーで、バイト範囲操作をサポートする必要はありません。  
  
 要求の範囲ヘッダーを使用すると、クライアントは、HTTP エンティティ内の指定されたバイト範囲の一部だけを受信するように要求できます。 範囲ヘッダー要求をサポートするためにサーバーは必要ありません。  
  
 サーバーに最初の100バイト (先頭からバイト位置 99) を送信するよう要求する HTTP プロトコル要求の範囲ヘッダーの例を次に示します。  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 この例では、`range` パラメーターは-99 です。  
  
 HTTP サーバーは、範囲ヘッダーが Accept 範囲ヘッダーでサポートされていることを示します。 バイト範囲をサポートしているサーバーからの受け入れ範囲ヘッダーの例を次に示します。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 サーバーからの応答のヘッダーで受け入れ範囲ヘッダーが受信されない場合、サーバーは範囲ヘッダーをサポートしません。 範囲をサポートしていないが、受け入れ範囲ヘッダーを認識しているサーバーからの受け入れ範囲ヘッダーの例を次に示します。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 範囲要求から応答を受信すると、要求全体に関連付けられている HTTP ヘッダーのみが解析され、<xref:System.Net.HttpWebResponse> クラスのプロパティを介して使用できるようになります。 各範囲に関連付けられているヘッダーは、応答で返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (int from, int to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(int32 from, int32 to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (from As Integer, to As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(int from, int to);" />
      <MemberSignature Language="F#" Value="member this.AddRange : int * int -&gt; unit" Usage="httpWebRequest.AddRange (from, to)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="to" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="from">データの送信を開始する位置。</param>
        <param name="to">データの送信を終了する位置。</param>
        <summary>指定した範囲の要求にバイト範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=nameWithType> メソッドは、バイト範囲ヘッダーを要求に追加します。  
  
 すべての HTTP エンティティは HTTP メッセージでバイトのシーケンスとして表されるため、バイト範囲の概念は任意の HTTP エンティティにとって意味があります。 ただし、すべてのクライアントとサーバーで、バイト範囲操作をサポートする必要はありません。  
  
 要求の範囲ヘッダーを使用すると、クライアントは、HTTP エンティティ内の指定されたバイト範囲の一部だけを受信するように要求できます。 範囲ヘッダー要求をサポートするためにサーバーは必要ありません。  
  
 最初の100バイトを要求する HTTP プロトコル要求の範囲ヘッダーの例を次に示します。  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 この例では、`from` パラメーターは0として指定され、`to` パラメーターは99として指定されます。 Range 指定子は、このメソッドによって自動的に "bytes" に設定されます。  
  
 HTTP サーバーは、範囲ヘッダーが Accept 範囲ヘッダーでサポートされていることを示します。 バイト範囲をサポートしているサーバーからの受け入れ範囲ヘッダーの例を次に示します。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 サーバーからの応答のヘッダーで受け入れ範囲ヘッダーが受信されない場合、サーバーは範囲ヘッダーをサポートしません。 範囲をサポートしていないが、受け入れ範囲ヘッダーを認識しているサーバーからの受け入れ範囲ヘッダーの例を次に示します。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 範囲要求から応答を受信すると、要求全体に関連付けられている HTTP ヘッダーのみが解析され、<xref:System.Net.HttpWebResponse> クラスのプロパティを介して使用できるようになります。 各範囲に関連付けられているヘッダーは、応答で返されます。  
  
   
  
## Examples  
 次のコード例では、要求に範囲ヘッダーを追加します。  
  
 [!code-cpp[System.Net.HttpWebRequest.AddRange2#1](~/samples/snippets/cpp/VS_Snippets_Misc/system.net.httpwebrequest.addrange2/cpp/source.cpp#1)]
 [!code-csharp[System.Net.HttpWebRequest.AddRange2#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.httpwebrequest.addrange2/cs/source.cs#1)]
 [!code-vb[System.Net.HttpWebRequest.AddRange2#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.net.httpwebrequest.addrange2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="from" /> は <paramref name="to" /> より大きい  
  
または 
 <paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (long from, long to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(int64 from, int64 to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (from As Long, to As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(long from, long to);" />
      <MemberSignature Language="F#" Value="member this.AddRange : int64 * int64 -&gt; unit" Usage="httpWebRequest.AddRange (from, to)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="to" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="from">データの送信を開始する位置。</param>
        <param name="to">データの送信を終了する位置。</param>
        <summary>指定した範囲の要求にバイト範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=nameWithType> メソッドは、バイト範囲ヘッダーを要求に追加します。  
  
 すべての HTTP エンティティは HTTP メッセージでバイトのシーケンスとして表されるため、バイト範囲の概念は任意の HTTP エンティティにとって意味があります。 ただし、すべてのクライアントとサーバーで、バイト範囲操作をサポートする必要はありません。  
  
 要求の範囲ヘッダーを使用すると、クライアントは、HTTP エンティティ内の指定されたバイト範囲の一部だけを受信するように要求できます。 範囲ヘッダー要求をサポートするためにサーバーは必要ありません。  
  
 最初の100バイトを要求する HTTP プロトコル要求の範囲ヘッダーの例を次に示します。  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 この例では、`from` パラメーターは0として指定され、`to` パラメーターは99として指定されます。 Range 指定子は、このメソッドによって自動的に "bytes" に設定されます。  
  
 HTTP サーバーは、範囲ヘッダーが Accept 範囲ヘッダーでサポートされていることを示します。 バイト範囲をサポートしているサーバーからの受け入れ範囲ヘッダーの例を次に示します。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 サーバーからの応答のヘッダーで受け入れ範囲ヘッダーが受信されない場合、サーバーは範囲ヘッダーをサポートしません。 範囲をサポートしていないが、受け入れ範囲ヘッダーを認識しているサーバーからの受け入れ範囲ヘッダーの例を次に示します。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 範囲要求から応答を受信すると、要求全体に関連付けられている HTTP ヘッダーのみが解析され、<xref:System.Net.HttpWebResponse> クラスのプロパティを介して使用できるようになります。 各範囲に関連付けられているヘッダーは、応答で返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="from" /> は <paramref name="to" /> より大きい  
  
または 
 <paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (string rangeSpecifier, int range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(string rangeSpecifier, int32 range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (rangeSpecifier As String, range As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::String ^ rangeSpecifier, int range);" />
      <MemberSignature Language="F#" Value="member this.AddRange : string * int -&gt; unit" Usage="httpWebRequest.AddRange (rangeSpecifier, range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rangeSpecifier" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="range" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="rangeSpecifier">範囲の説明。</param>
        <param name="range">範囲の先頭または末尾。</param>
        <summary>要求されたデータの先頭または末尾からの特定の範囲の要求に Range ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=nameWithType> メソッドは、要求に範囲ヘッダーを追加します。  
  
 `range` が正の場合、`range` パラメーターは範囲の開始点を指定します。 サーバーは、HTTP エンティティ内のデータの末尾に指定された `range` パラメーターからデータの送信を開始する必要があります。  
  
 `range` が負の場合、`range` パラメーターは範囲の終了点を指定します。 サーバーは、HTTP エンティティ内のデータの先頭から、指定された `range` パラメーターへのデータの送信を開始する必要があります。  
  
 すべての HTTP エンティティは HTTP メッセージでバイトのシーケンスとして表されるため、バイト範囲の概念は任意の HTTP エンティティにとって意味があります。 ただし、すべてのクライアントとサーバーで、バイト範囲操作をサポートする必要はありません。  
  
 要求の範囲ヘッダーを使用すると、クライアントは、HTTP エンティティ内の指定されたバイト範囲の一部だけを受信するように要求できます。 範囲ヘッダー要求をサポートするためにサーバーは必要ありません。  
  
 `rangeSpecifier` パラメーターは通常、ほとんどの HTTP サーバーで認識される唯一の範囲指定子であるため、通常は "bytes" として指定されます。 `rangeSpecifier` パラメーターを他の文字列に設定すると、バイト (IETF によって RFC 2616 で定義されているバイト範囲指定子) 以外のカスタム範囲指定子がサポートされます。  
  
 最初の100バイトを要求する HTTP プロトコル要求の範囲ヘッダーの例を次に示します。  
  
 `Range: bytes=-99\r\n\r\n`  
  
 この例では、`rangeSpecifier` パラメーターは "bytes" として指定され、`range` パラメーターは-99 となります。  
  
 HTTP サーバーは、応答で範囲ヘッダーの Accept ヘッダーがサポートされていることを示します。 バイト範囲をサポートしているサーバーからの受け入れ範囲ヘッダーの例を次に示します。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 サーバーからの応答のヘッダーで受け入れ範囲ヘッダーが受信されない場合、サーバーは範囲ヘッダーをサポートしません。 範囲をサポートしていないが、受け入れ範囲ヘッダーを認識しているサーバーからの受け入れ範囲ヘッダーの例を次に示します。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 範囲要求から応答を受信すると、要求全体に関連付けられている HTTP ヘッダーのみが解析され、<xref:System.Net.HttpWebResponse> クラスのプロパティを介して使用できるようになります。 各範囲に関連付けられているヘッダーは、応答で返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rangeSpecifier" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (string rangeSpecifier, long range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(string rangeSpecifier, int64 range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (rangeSpecifier As String, range As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::String ^ rangeSpecifier, long range);" />
      <MemberSignature Language="F#" Value="member this.AddRange : string * int64 -&gt; unit" Usage="httpWebRequest.AddRange (rangeSpecifier, range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rangeSpecifier" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="range" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="rangeSpecifier">範囲の説明。</param>
        <param name="range">範囲の先頭または末尾。</param>
        <summary>要求されたデータの先頭または末尾からの特定の範囲の要求に Range ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=nameWithType> メソッドは、要求に範囲ヘッダーを追加します。  
  
 `range` が正の場合、`range` パラメーターは範囲の開始点を指定します。 サーバーは、HTTP エンティティ内のデータの末尾に指定された `range` パラメーターからデータの送信を開始する必要があります。  
  
 `range` が負の場合、`range` パラメーターは範囲の終了点を指定します。 サーバーは、HTTP エンティティ内のデータの先頭から、指定された `range` パラメーターへのデータの送信を開始する必要があります。  
  
 すべての HTTP エンティティは HTTP メッセージでバイトのシーケンスとして表されるため、バイト範囲の概念は任意の HTTP エンティティにとって意味があります。 ただし、すべてのクライアントとサーバーで、バイト範囲操作をサポートする必要はありません。  
  
 要求の範囲ヘッダーを使用すると、クライアントは、HTTP エンティティ内の指定されたバイト範囲の一部だけを受信するように要求できます。 範囲ヘッダー要求をサポートするためにサーバーは必要ありません。  
  
 `rangeSpecifier` パラメーターは通常、ほとんどの HTTP サーバーで認識される唯一の範囲指定子であるため、通常は "bytes" として指定されます。 `rangeSpecifier` パラメーターを他の文字列に設定すると、バイト (IETF によって RFC 2616 で定義されているバイト範囲指定子) 以外のカスタム範囲指定子がサポートされます。  
  
 最初の100バイトを要求する HTTP プロトコル要求の範囲ヘッダーの例を次に示します。  
  
 `Range: bytes=-99\r\n\r\n`  
  
 この例では、`rangeSpecifier` パラメーターは "bytes" として指定され、`range` パラメーターは-99 となります。  
  
 HTTP サーバーは、応答で範囲ヘッダーの Accept ヘッダーがサポートされていることを示します。 バイト範囲をサポートしているサーバーからの受け入れ範囲ヘッダーの例を次に示します。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 サーバーからの応答のヘッダーで受け入れ範囲ヘッダーが受信されない場合、サーバーは範囲ヘッダーをサポートしません。 範囲をサポートしていないが、受け入れ範囲ヘッダーを認識しているサーバーからの受け入れ範囲ヘッダーの例を次に示します。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 範囲要求から応答を受信すると、要求全体に関連付けられている HTTP ヘッダーのみが解析され、<xref:System.Net.HttpWebResponse> クラスのプロパティを介して使用できるようになります。 各範囲に関連付けられているヘッダーは、応答で返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rangeSpecifier" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (string rangeSpecifier, int from, int to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(string rangeSpecifier, int32 from, int32 to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (rangeSpecifier As String, from As Integer, to As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::String ^ rangeSpecifier, int from, int to);" />
      <MemberSignature Language="F#" Value="member this.AddRange : string * int * int -&gt; unit" Usage="httpWebRequest.AddRange (rangeSpecifier, from, to)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rangeSpecifier" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="from" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="to" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="rangeSpecifier">範囲の説明。</param>
        <param name="from">データの送信を開始する位置。</param>
        <param name="to">データの送信を終了する位置。</param>
        <summary>指定した範囲の要求に範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=nameWithType> メソッドは、要求に範囲ヘッダーを追加します。  
  
 すべての HTTP エンティティは HTTP メッセージでバイトのシーケンスとして表されるため、バイト範囲の概念は任意の HTTP エンティティにとって意味があります。 ただし、すべてのクライアントとサーバーで、バイト範囲操作をサポートする必要はありません。  
  
 要求の範囲ヘッダーを使用すると、クライアントは、HTTP エンティティ内の指定されたバイト範囲の一部だけを受信するように要求できます。 範囲ヘッダー要求をサポートするためにサーバーは必要ありません。  
  
 `rangeSpecifier` パラメーターは通常、ほとんどの HTTP サーバーで認識される唯一の範囲指定子であるため、通常は "bytes" として指定されます。 `rangeSpecifier` パラメーターを他の文字列に設定すると、バイト (IETF によって RFC 2616 で定義されているバイト範囲指定子) 以外のカスタム範囲指定子がサポートされます。  
  
 最初の100バイトを要求する HTTP プロトコル要求の範囲ヘッダーの例を次に示します。  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 この例では、`rangeSpecifier` パラメーターは "bytes" として指定され、`from` パラメーターは0、`to` パラメーターは99になります。  
  
 HTTP サーバーは、応答で範囲ヘッダーの Accept ヘッダーがサポートされていることを示します。 バイト範囲をサポートしているサーバーからの受け入れ範囲ヘッダーの例を次に示します。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 Accept 範囲ヘッダーで指定された文字列は、このメソッドの `rangeSpecifier` パラメーターで指定される範囲指定子です。  
  
 サーバーからの応答のヘッダーで受け入れ範囲ヘッダーが受信されない場合、サーバーは範囲ヘッダーをサポートしません。 範囲をサポートしていないが、受け入れ範囲ヘッダーを認識しているサーバーからの受け入れ範囲ヘッダーの例を次に示します。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 範囲要求から応答を受信すると、要求全体に関連付けられている HTTP ヘッダーのみが解析され、<xref:System.Net.HttpWebResponse> クラスのプロパティを介して使用できるようになります。 各範囲に関連付けられているヘッダーは、応答で返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rangeSpecifier" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="from" /> は <paramref name="to" /> より大きい  
  
または 
 <paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (string rangeSpecifier, long from, long to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(string rangeSpecifier, int64 from, int64 to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (rangeSpecifier As String, from As Long, to As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::String ^ rangeSpecifier, long from, long to);" />
      <MemberSignature Language="F#" Value="member this.AddRange : string * int64 * int64 -&gt; unit" Usage="httpWebRequest.AddRange (rangeSpecifier, from, to)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rangeSpecifier" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="from" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="to" Type="System.Int64" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="rangeSpecifier">範囲の説明。</param>
        <param name="from">データの送信を開始する位置。</param>
        <param name="to">データの送信を終了する位置。</param>
        <summary>指定した範囲の要求に範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=nameWithType> メソッドは、要求に範囲ヘッダーを追加します。  
  
 すべての HTTP エンティティは HTTP メッセージでバイトのシーケンスとして表されるため、バイト範囲の概念は任意の HTTP エンティティにとって意味があります。 ただし、すべてのクライアントとサーバーで、バイト範囲操作をサポートする必要はありません。  
  
 要求の範囲ヘッダーを使用すると、クライアントは、HTTP エンティティ内の指定されたバイト範囲の一部だけを受信するように要求できます。 範囲ヘッダー要求をサポートするためにサーバーは必要ありません。  
  
 `rangeSpecifier` パラメーターは通常、ほとんどの HTTP サーバーで認識される唯一の範囲指定子であるため、通常は "bytes" として指定されます。 `rangeSpecifier` パラメーターを他の文字列に設定すると、バイト (IETF によって RFC 2616 で定義されているバイト範囲指定子) 以外のカスタム範囲指定子がサポートされます。  
  
 最初の100バイトを要求する HTTP プロトコル要求の範囲ヘッダーの例を次に示します。  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 この例では、`rangeSpecifier` パラメーターは "bytes" として指定され、`from` パラメーターは0、`to` パラメーターは99になります。  
  
 HTTP サーバーは、応答で範囲ヘッダーの Accept ヘッダーがサポートされていることを示します。 バイト範囲をサポートしているサーバーからの受け入れ範囲ヘッダーの例を次に示します。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 Accept 範囲ヘッダーで指定された文字列は、このメソッドの `rangeSpecifier` パラメーターで指定される範囲指定子です。  
  
 サーバーからの応答のヘッダーで受け入れ範囲ヘッダーが受信されない場合、サーバーは範囲ヘッダーをサポートしません。 範囲をサポートしていないが、受け入れ範囲ヘッダーを認識しているサーバーからの受け入れ範囲ヘッダーの例を次に示します。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 範囲要求から応答を受信すると、要求全体に関連付けられている HTTP ヘッダーのみが解析され、<xref:System.Net.HttpWebResponse> クラスのプロパティを介して使用できるようになります。 各範囲に関連付けられているヘッダーは、応答で返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rangeSpecifier" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="from" /> は <paramref name="to" /> より大きい  
  
または 
 <paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public Uri Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Address { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Address : Uri" Usage="System.Net.HttpWebRequest.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に実際に応答するインターネット リソースの URI (Uniform Resource Identifier) を取得します。</summary>
        <value>要求に実際に応答するインターネット リソースを識別する <see cref="T:System.Uri" />。 既定値は、<see cref="M:System.Net.WebRequest.Create(System.String)" /> メソッドが要求を初期化するために使用する URI です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要求中に発生したすべてのリダイレクトが完了した後、<xref:System.Net.HttpWebRequest.Address%2A> プロパティは URI に設定されます。  
  
 元の要求の URI は、<xref:System.Net.HttpWebRequest.RequestUri%2A> プロパティに保持されます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest> オブジェクト `req` が、要求を満たすために別の場所にリダイレクトされたかどうかを確認し、要求がリダイレクトされた場合に `true` するように `hasChanged` 変数の値を設定します。それ以外の場合 `hasChanged` は `false`に設定されます。  
  
 [!code-cpp[Classic HttpWebRequest.RequestUri Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpWebRequest.RequestUri Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/CS/source.cs#1)]
 [!code-vb[Classic HttpWebRequest.RequestUri Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowAutoRedirect">
      <MemberSignature Language="C#" Value="public virtual bool AllowAutoRedirect { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowAutoRedirect" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.AllowAutoRedirect" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowAutoRedirect As Boolean" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowAutoRedirect { bool get(); void set(bool value); };" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.AllowAutoRedirect : bool with get, set" Usage="System.Net.HttpWebRequest.AllowAutoRedirect" />
      <MemberSignature Language="C#" Value="public bool AllowAutoRedirect { get; set; }" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowAutoRedirect As Boolean" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowAutoRedirect { bool get(); void set(bool value); };" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求がリダイレクト応答に従うかどうかを示す値を取得または設定します。</summary>
        <value>要求がインターネット リソースからのリダイレクト応答に自動的に従う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTTP リダイレクトヘッダーをリソースの新しい場所に自動的に従うよう要求する場合は、<xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> を `true` に設定します。 リダイレクトの最大数は、<xref:System.Net.HttpWebRequest.MaximumAutomaticRedirections%2A> プロパティによって設定されます。  
  
 <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> が `false`に設定されている場合、300から399の HTTP 状態コードを含むすべての応答がアプリケーションに返されます。  
  
 Authorization ヘッダーは自動リダイレクトによってクリアされ、リダイレクトされた場所への再認証が自動的に試行さ <xref:System.Net.HttpWebRequest> ます。 実際には、リダイレクトが発生する可能性がある場合、アプリケーションはカスタム認証情報を Authorization ヘッダーに配置できないことを意味します。 代わりに、アプリケーションでカスタム認証モジュールを実装して登録する必要があります。 <xref:System.Net.AuthenticationManager?displayProperty=nameWithType> と関連クラスは、カスタム認証モジュールを実装するために使用されます。 <xref:System.Net.AuthenticationManager.Register%2A?displayProperty=nameWithType> メソッドは、カスタム認証モジュールを登録します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> プロパティを使用して、要求がリダイレクト応答に従うことを許可します。  
  
 [!code-cpp[HttpWebRequest_AllowAutoRedirect#2](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_AllowAutoRedirect/CPP/httpwebrequest_allowautoredirect.cpp#2)]
 [!code-csharp[HttpWebRequest_AllowAutoRedirect#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_AllowAutoRedirect/CS/httpwebrequest_allowautoredirect.cs#2)]
 [!code-vb[HttpWebRequest_AllowAutoRedirect#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_AllowAutoRedirect/VB/httpwebrequest_allowautoredirect.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowReadStreamBuffering">
      <MemberSignature Language="C#" Value="public virtual bool AllowReadStreamBuffering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowReadStreamBuffering" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.AllowReadStreamBuffering" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowReadStreamBuffering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowReadStreamBuffering { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowReadStreamBuffering : bool with get, set" Usage="System.Net.HttpWebRequest.AllowReadStreamBuffering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースから受け取ったデータをバッファリングするかどうかを示す値を取得または設定します。</summary>
        <value>インターネット リソースから受信したデータのバッファリングを有効にする場合は <see langword="true" />。バッファリングを無効にする場合は <see langword="false" />。 既定では、 <see langword="false" />です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowWriteStreamBuffering">
      <MemberSignature Language="C#" Value="public virtual bool AllowWriteStreamBuffering { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowWriteStreamBuffering" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowWriteStreamBuffering As Boolean" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowWriteStreamBuffering { bool get(); void set(bool value); };" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.AllowWriteStreamBuffering : bool with get, set" Usage="System.Net.HttpWebRequest.AllowWriteStreamBuffering" />
      <MemberSignature Language="C#" Value="public bool AllowWriteStreamBuffering { get; set; }" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowWriteStreamBuffering As Boolean" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowWriteStreamBuffering { bool get(); void set(bool value); };" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースに送信するデータをバッファリングするかどうかを示す値を取得または設定します。</summary>
        <value>インターネット リソースに送信するデータのバッファリングを有効にする場合は <see langword="true" />。バッファリングを無効にする場合は <see langword="false" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AllowWriteStreamBuffering%2A> が `true`場合、データはメモリ内にバッファーされるので、リダイレクトまたは認証要求が発生した場合に再送信できます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.AllowWriteStreamBuffering%2A> プロパティを使用して、データバッファーを無効にします。  
  
 [!code-cpp[HttpWebRequest_AllowWriteStreamBuffering#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_AllowWriteStreamBuffering/CPP/httpwebrequest_allowwritestreambuffering.cpp#1)]
 [!code-csharp[HttpWebRequest_AllowWriteStreamBuffering#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_AllowWriteStreamBuffering/CS/httpwebrequest_allowwritestreambuffering.cs#1)]
 [!code-vb[HttpWebRequest_AllowWriteStreamBuffering#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_AllowWriteStreamBuffering/VB/httpwebrequest_allowwritestreambuffering.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> を <see langword="true" /> に設定すると、データバッファーが使用可能なすべてのメモリを使用できるため、大きなデータセットをアップロードするときにパフォーマンスの問題が発生する可能性があります。</para></block>
      </Docs>
    </Member>
    <Member MemberName="AutomaticDecompression">
      <MemberSignature Language="C#" Value="public System.Net.DecompressionMethods AutomaticDecompression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.DecompressionMethods AutomaticDecompression" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.AutomaticDecompression" />
      <MemberSignature Language="VB.NET" Value="Public Property AutomaticDecompression As DecompressionMethods" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::DecompressionMethods AutomaticDecompression { System::Net::DecompressionMethods get(); void set(System::Net::DecompressionMethods value); };" />
      <MemberSignature Language="F#" Value="member this.AutomaticDecompression : System.Net.DecompressionMethods with get, set" Usage="System.Net.HttpWebRequest.AutomaticDecompression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.DecompressionMethods</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用される圧縮解除の種類を取得または設定します。</summary>
        <value>使用される圧縮解除の種類を示す <see cref="T:System.Net.DecompressionMethods" /> オブジェクト。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">オブジェクトの現在の状態では、このプロパティを設定できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginGetRequestStream">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginGetRequestStream (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginGetRequestStream(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginGetRequestStream (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginGetRequestStream(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.BeginGetRequestStream : AsyncCallback * obj -&gt; IAsyncResult" Usage="httpWebRequest.BeginGetRequestStream (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><see cref="T:System.AsyncCallback" /> デリゲート。</param>
        <param name="state">この要求に対して使用する状態オブジェクト。</param>
        <summary>データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトの非同期要求を開始します。</summary>
        <returns>非同期の要求を参照する <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> メソッドは、<xref:System.Net.HttpWebRequest>のデータの送信に使用されるストリームの非同期要求を開始します。 非同期コールバックメソッドは、<xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> メソッドを使用して実際のストリームを返します。  
  
 <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> メソッドでは、このメソッドが非同期になる前に、いくつかの同期セットアップタスク (DNS 解決、プロキシ検出、および TCP ソケット接続など) を完了する必要があります。 このため、このメソッドは、ユーザーインターフェイス (UI) スレッドでは呼び出さないでください。これは、エラーの例外がスローされる前に初期の同期セットアップタスクを完了するために (ネットワーク設定によっては数分) かかる場合があるためです。メソッドは成功します。  
  
 スレッドプールの詳細については、[マネージスレッドプール](~/docs/standard/threading/the-managed-thread-pool.md)に関するページを参照してください。  
  
> [!NOTE]
>  アプリケーションでは、特定の要求に対して同期メソッドと非同期メソッドを混在させることはできません。 <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> メソッドを呼び出す場合は、<xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドを使用して応答を取得する必要があります。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> メソッドを使用して、ストリームインスタンスの非同期要求を行います。  
  
 [!code-cpp[HttpWebRequest_BeginGetRequestStream#2](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/CPP/httpwebrequest_begingetrequeststream.cpp#2)]
 [!code-csharp[HttpWebRequest_BeginGetRequestStream#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/CS/httpwebrequest_begingetrequeststream.cs#2)]
 [!code-vb[HttpWebRequest_BeginGetRequestStream#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/VB/httpwebrequest_begingetrequeststream.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.ProtocolViolationException"><see cref="P:System.Net.HttpWebRequest.Method" /> プロパティは GET または HEAD です。  
  
または 
 <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が -1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。</exception>
        <exception cref="T:System.InvalidOperationException">前回の <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> への呼び出しでストリームが使用中です。  
  
または 
 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。  
  
または 
スレッド プールは、スレッドを使い切りました。</exception>
        <exception cref="T:System.NotSupportedException">要求キャッシュの検証コントロールは、この要求に対する応答がキャッシュから提供されることを示していますが、データを書き込む要求ではキャッシュを使用してはなりません。 正しく実装されていないカスタム キャッシュの検証コントロールを使用すると、この例外が発生する場合があります。</exception>
        <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。</exception>
        <exception cref="T:System.ObjectDisposedException">.NET Compact Framework アプリケーションでコンテンツの長さが 0 の要求ストリームが取得されず、正しく閉じられませんでした。 コンテンツの長さが 0 の要求の処理の詳細については、「[.NET Compact Framework のネットワーク プログラミング](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2008/1afx2b0f(v=vs.90))」をご覧ください。</exception>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/defaultproxy-element-network-settings.md">DefaultProxy 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="BeginGetResponse">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginGetResponse (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginGetResponse(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginGetResponse (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginGetResponse(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.BeginGetResponse : AsyncCallback * obj -&gt; IAsyncResult" Usage="httpWebRequest.BeginGetResponse (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><see cref="T:System.AsyncCallback" /> デリゲート</param>
        <param name="state">この要求に対して使用する状態オブジェクト。</param>
        <summary>インターネット リソースへの非同期要求を開始します。</summary>
        <returns>応答の非同期要求を参照する <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドは、インターネットリソースからの応答の非同期要求を開始します。 非同期コールバックメソッドは、<xref:System.Net.HttpWebRequest.EndGetResponse%2A> メソッドを使用して実際の <xref:System.Net.WebResponse>を返します。  
  
 <xref:System.Net.ProtocolViolationException> は、<xref:System.Net.HttpWebRequest> クラスに設定されたプロパティが競合している場合にスローされます。 この例外は、アプリケーションが <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティと <xref:System.Net.HttpWebRequest.SendChunked%2A> プロパティを `true`に設定し、HTTP GET 要求を送信した場合に発生します。 この例外は、HTTP 1.0 プロトコルのみをサポートするサーバーにアプリケーションがチャンクを送信しようとした場合に発生します。これはサポートされていません。 この例外が発生するのは、アプリケーションが <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティを設定せずにデータを送信しようとした場合、またはバッファリングが無効になっているときに <xref:System.Net.HttpWebRequest.SendChunked%2A> が `false`、および keepalive 接続 (<xref:System.Net.HttpWebRequest.KeepAlive%2A> プロパティが `true`) である場合です`.`  
  
 <xref:System.Net.WebException> がスローされた場合は、例外の <xref:System.Net.WebException.Response%2A> と <xref:System.Net.WebException.Status%2A> のプロパティを使用して、サーバーからの応答を確認します。  
  
 <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドでは、このメソッドが非同期になる前に、いくつかの同期セットアップタスク (DNS 解決、プロキシ検出、および TCP ソケット接続など) を完了する必要があります。 このため、このメソッドは、ユーザーインターフェイス (UI) スレッドでは呼び出さないでください。これは、エラーの例外がスローされる前に初期の同期セットアップタスクを完了するために (ネットワーク設定によっては数分) かかる場合があるためです。メソッドは成功します。  
  
 スレッドプールの詳細については、[マネージスレッドプール](~/docs/standard/threading/the-managed-thread-pool.md)に関するページを参照してください。  
  
> [!NOTE]
>  アプリケーションでは、特定の要求に対して同期メソッドと非同期メソッドを混在させることはできません。 <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> メソッドを呼び出す場合は、<xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドを使用して応答を取得する必要があります。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドを使用して、インターネットリソースの非同期要求を行います。  
  
> [!NOTE]
>  非同期要求の場合、独自のタイムアウトメカニズムを実装するのは、クライアントアプリケーションの役割です。 次のコード例は、その方法を示しています。  
  
 [!code-cpp[System.Net.HttpWebRequest.BeginGetResponse#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/CPP/begingetresponse.cpp#1)]
 [!code-csharp[System.Net.HttpWebRequest.BeginGetResponse#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/CS/begingetresponse.cs#1)]
 [!code-vb[System.Net.HttpWebRequest.BeginGetResponse#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/VB/begingetresponse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">前回の <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> への呼び出しでストリームが既に使用中です。  
  
または 
 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。  
  
または 
スレッド プールは、スレッドを使い切りました。</exception>
        <exception cref="T:System.Net.ProtocolViolationException"><see cref="P:System.Net.HttpWebRequest.Method" /> が GET または HEAD で、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が 0 以上であるか <see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="true" />です。  
  
または 
 <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が -1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。  
  
または 
<see cref="T:System.Net.HttpWebRequest" /> にはエンティティ本体がありますが、<see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> メソッドを呼び出さずに <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> メソッドが呼び出されています。  
  
または 
<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が 0 よりも大きい値に設定されていますが、アプリケーションは保証されたデータをすべては書き込みません。</exception>
        <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。</exception>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/defaultproxy-element-network-settings.md">DefaultProxy 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="ClientCertificates">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ClientCertificates" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientCertificates As X509CertificateCollection" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ ClientCertificates { System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ get(); void set(System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ value); };" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.ClientCertificates : System.Security.Cryptography.X509Certificates.X509CertificateCollection with get, set" Usage="System.Net.HttpWebRequest.ClientCertificates" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; }" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientCertificates As X509CertificateCollection" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ ClientCertificates { System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ get(); };" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="member this.ClientCertificates : System.Security.Cryptography.X509Certificates.X509CertificateCollection" Usage="System.Net.HttpWebRequest.ClientCertificates" FrameworkAlternate="netframework-1.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509CertificateCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この要求に関連付けられているセキュリティ証明書のコレクションを取得または設定します。</summary>
        <value>この要求に関連付けられているセキュリティ証明書を格納している <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションでは、証明書をコレクションに追加できますが、それに対するアクセス権がない可能性があります。 コレクションに含まれている証明書を使用するには、アプリケーションが、証明書を発行したエンティティと同じアクセス権を持っている必要があります。  
  
> [!NOTE]
>  フレームワークは、作成時に SSL セッションをキャッシュし、可能であれば、新しい要求に対してキャッシュされたセッションの再利用を試みます。 SSL セッションを再利用しようとすると、フレームワークは <xref:System.Net.HttpWebRequest.ClientCertificates%2A> の最初の要素 (存在する場合) を使用するか、<xref:System.Net.HttpWebRequest.ClientCertificates%2A> が空の場合は匿名セッションを再利用しようとします。  
  
> [!NOTE]
>  パフォーマンス上の理由から、サーバーからの要求があることがわかっている場合を除き、<xref:System.Net.HttpWebRequest> にクライアント証明書を追加しないでください。  
>   
>  クライアント証明書ストアの証明書を列挙する方法を示すコード例については、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection> クラスを参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作に指定された値は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public string Connection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Connection" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Connection" />
      <MemberSignature Language="VB.NET" Value="Public Property Connection As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Connection { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Connection : string with get, set" Usage="System.Net.HttpWebRequest.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Connection" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value><see langword="Connection" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要求は、`Connection` HTTP ヘッダーとして <xref:System.Net.HttpWebRequest.Connection%2A> プロパティをインターネットリソースに送信します。 <xref:System.Net.HttpWebRequest.KeepAlive%2A> プロパティの値が `true`場合、`Connection` ヘッダーの末尾に "keep-alive" という値が追加されます。  
  
 `Connection` HTTP ヘッダーをクリアするには、<xref:System.Net.HttpWebRequest.Connection%2A> プロパティを `null`に設定します。  
  
 <xref:System.Net.HttpWebRequest.GetRequestStream%2A>、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>、<xref:System.Net.HttpWebRequest.GetResponse%2A>、または <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドを呼び出すことによって要求が開始された後に <xref:System.Net.HttpWebRequest.Connection%2A> プロパティを変更すると、<xref:System.InvalidOperationException>がスローされます。  
  
> [!NOTE]
>  このプロパティの値は <xref:System.Net.WebHeaderCollection> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.Connection%2A> プロパティを使用して、接続 HTTP ヘッダーの値を設定します。  
  
 [!code-cpp[HttpWebRequest_Connection#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Connection/CPP/httpwebrequest_connection.cpp#1)]
 [!code-csharp[HttpWebRequest_Connection#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Connection/CS/httpwebrequest_connection.cs#1)]
 [!code-vb[HttpWebRequest_Connection#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Connection/VB/httpwebrequest_connection.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Net.HttpWebRequest.Connection" /> の値が Keep-alive または Close に設定されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionGroupName">
      <MemberSignature Language="C#" Value="public override string ConnectionGroupName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionGroupName" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ConnectionGroupName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ConnectionGroupName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionGroupName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionGroupName : string with get, set" Usage="System.Net.HttpWebRequest.ConnectionGroupName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に対して使用する接続グループの名前を取得または設定します。</summary>
        <value>この要求に対して使用する接続グループの名前。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.ConnectionGroupName%2A> プロパティを使用すると、要求を接続グループに関連付けることができます。 これは、アプリケーションが、データベースサーバーから顧客情報を取得する Web サイトなど、ユーザーごとに1つのサーバーに対して要求を行う場合に便利です。  
  
   
  
## Examples  
 次のコード例は、ユーザー情報を使用して接続グループを作成する方法を示しています。このコードが呼び出される前に、`username`、`password`、および `domain` 変数がアプリケーションによって設定されていることを前提としています。  
  
 [!code-cpp[Classic HttpWebRequest.ConnectionGroupName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpWebRequest.ConnectionGroupName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpWebRequest.ConnectionGroupName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpWebRequest.ConnectionGroupName Example/CS/source.cs#1)]
 [!code-vb[Classic HttpWebRequest.ConnectionGroupName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpWebRequest.ConnectionGroupName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>各接続グループは、サーバーに対して追加の接続を作成します。 これにより、そのサーバーの <see cref="P:System.Net.ServicePoint.ConnectionLimit" /> プロパティによって設定された接続の数が超過する可能性があります。</para></block>
        <altmember cref="P:System.Net.Configuration.ConnectionManagementElement.MaxConnection" />
        <altmember cref="P:System.Net.WebRequest.ConnectionGroupName" />
        <related type="Article" href="~/docs/framework/network-programming/connection-grouping.md">接続のグループ化</related>
      </Docs>
    </Member>
    <Member MemberName="ContentLength">
      <MemberSignature Language="C#" Value="public override long ContentLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ContentLength" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ContentLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContentLength As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long ContentLength { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.ContentLength : int64 with get, set" Usage="System.Net.HttpWebRequest.ContentLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Content-length" /> HTTP ヘッダーを取得または設定します。</summary>
        <value>インターネット リソースに送信するデータのバイト数。 既定値は -1 です。このプロパティが設定されていないこと、および送信する要求データが存在しないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティには、要求と共に `Content-length` HTTP ヘッダーとして送信する値が含まれます。  
  
 <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティの-1 以外の値は、要求によってデータがアップロードされ、データをアップロードするメソッドだけが <xref:System.Net.HttpWebRequest.Method%2A> プロパティで設定できることを示します。  
  
 <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティを値に設定した後、<xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッド、または <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> と <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> の両方のメソッドを呼び出すことによって返される要求ストリームにバイト数を書き込む必要があります。  
  
> [!NOTE]
>  このプロパティの値は <xref:System.Net.WebHeaderCollection> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティを、ポストされる文字列の長さに設定します。  
  
 [!code-cpp[HttpWebRequest_ContentLength#4](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CPP/httpwebrequest_contentlength.cpp#4)]
 [!code-csharp[HttpWebRequest_ContentLength#4](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CS/httpwebrequest_contentlength.cs#4)]
 [!code-vb[HttpWebRequest_ContentLength#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_ContentLength/VB/httpwebrequest_contentlength.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" />、または <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> メソッドを呼び出すことにより要求が開始されました。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">新規 <see cref="P:System.Net.HttpWebRequest.ContentLength" /> 値が 0 未満です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public override string ContentType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ContentType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContentType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContentType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContentType : string with get, set" Usage="System.Net.HttpWebRequest.ContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Content-type" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value><see langword="Content-type" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.ContentType%2A> プロパティには、要求のメディアの種類が含まれます。 要求によって `Content-type` HTTP ヘッダーが送信された場合、<xref:System.Net.HttpWebRequest.ContentType%2A> プロパティに割り当てられた値は、既存の内容を置き換えます。  
  
 `Content-type` HTTP ヘッダーをクリアするには、<xref:System.Net.HttpWebRequest.ContentType%2A> プロパティを `null`に設定します。  
  
> [!NOTE]
>  このプロパティの値は <xref:System.Net.WebHeaderCollection> に格納されます。 <xref:System.Net.WebHeaderCollection> が設定されている場合、プロパティ値は失われます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.ContentType%2A> プロパティを設定します。  
  
 [!code-cpp[HttpWebRequest_ContentLength#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CPP/httpwebrequest_contentlength.cpp#1)]
 [!code-csharp[HttpWebRequest_ContentLength#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CS/httpwebrequest_contentlength.cs#1)]
 [!code-vb[HttpWebRequest_ContentLength#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_ContentLength/VB/httpwebrequest_contentlength.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueDelegate">
      <MemberSignature Language="C#" Value="public System.Net.HttpContinueDelegate ContinueDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpContinueDelegate ContinueDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ContinueDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueDelegate As HttpContinueDelegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpContinueDelegate ^ ContinueDelegate { System::Net::HttpContinueDelegate ^ get(); void set(System::Net::HttpContinueDelegate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueDelegate : System.Net.HttpContinueDelegate with get, set" Usage="System.Net.HttpWebRequest.ContinueDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.HttpContinueDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースから HTTP 100-continue 応答を受信したときに呼び出されるデリゲート メソッドを取得または設定します。</summary>
        <value>インターネット リソースから HTTP Continue 応答が返されたときに実行されるコールバック メソッドを実装するデリゲート。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.ContinueDelegate%2A> プロパティは、クライアントが 100-Continue 応答を受信したときに呼び出すコールバックメソッドを指定します。  
  
 <xref:System.Net.HttpWebRequest.ContinueDelegate%2A> プロパティが設定されている場合、<xref:System.Net.HttpStatusCode.Continue?displayProperty=nameWithType> (100) 型のプロトコル応答を受信するたびに、クライアントはデリゲートを呼び出します。 これは、インターネットリソースから受信されるデータのステータスをクライアントに表示する場合に便利です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength" />
      </Docs>
    </Member>
    <Member MemberName="ContinueTimeout">
      <MemberSignature Language="C#" Value="public int ContinueTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ContinueTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ContinueTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ContinueTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueTimeout : int with get, set" Usage="System.Net.HttpWebRequest.ContinueTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>100 回の続行まで待機するミリ秒単位のタイムアウト値をサーバーから取得または設定します。</summary>
        <value>100 回の続行まで待機するミリ秒単位のタイムアウト値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 タイムアウトの期限が切れる前に 100-Continue 応答を受信した場合は、エンティティ本体を送信できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieContainer">
      <MemberSignature Language="C#" Value="public virtual System.Net.CookieContainer CookieContainer { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.CookieContainer CookieContainer" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.CookieContainer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CookieContainer As CookieContainer" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::CookieContainer ^ CookieContainer { System::Net::CookieContainer ^ get(); void set(System::Net::CookieContainer ^ value); };" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.CookieContainer : System.Net.CookieContainer with get, set" Usage="System.Net.HttpWebRequest.CookieContainer" />
      <MemberSignature Language="C#" Value="public System.Net.CookieContainer CookieContainer { get; set; }" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public Property CookieContainer As CookieContainer" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::CookieContainer ^ CookieContainer { System::Net::CookieContainer ^ get(); void set(System::Net::CookieContainer ^ value); };" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.CookieContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に関連付けられた Cookie を取得または設定します。</summary>
        <value>この要求に関連付けられているクッキーを格納している <see cref="T:System.Net.CookieContainer" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.CookieContainer%2A> プロパティは、この要求に関連付けられた cookie を含む <xref:System.Net.CookieContainer> クラスのインスタンスを提供します。  
  
 <xref:System.Net.HttpWebRequest.CookieContainer%2A> は既定では `null` です。 <xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドによって返される <xref:System.Net.HttpWebResponse> の <xref:System.Net.HttpWebResponse.Cookies%2A> プロパティにクッキーが返されるようにするには、<xref:System.Net.CookieContainer> オブジェクトをプロパティに割り当てる必要があります。  
  
> [!NOTE]
>  セキュリティ上の理由から、cookie は既定で無効になっています。 Cookie を使用する場合は、<xref:System.Net.HttpWebRequest.CookieContainer%2A> プロパティを使用して cookie を有効にします。  
  
   
  
## Examples  
 次のコード例では、URL に要求を送信し、応答で返されたクッキーを表示します。  
  
 [!code-cpp[NCLCookies#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCookies/CPP/cookiessnippets.cpp#1)]
 [!code-csharp[NCLCookies#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCookies/CS/cookiessnippets.cs#1)]
 [!code-vb[NCLCookies#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLCookies/VB/cookiessnippets.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.CookieContainer" />
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public override System.Net.ICredentials Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::ICredentials ^ Credentials { System::Net::ICredentials ^ get(); void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials with get, set" Usage="System.Net.HttpWebRequest.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求の認証情報を取得または設定します。</summary>
        <value>要求と関連付けられた認証資格情報を格納する <see cref="T:System.Net.ICredentials" />。 既定では、 <see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.Credentials%2A> プロパティには、要求のメーカーを識別するための認証情報が含まれています。 <xref:System.Net.HttpWebRequest.Credentials%2A> プロパティには、<xref:System.Net.NetworkCredential>のいずれかを指定できます。 <xref:System.Net.CredentialCache>この場合、<xref:System.Net.NetworkCredential> オブジェクトに含まれるユーザー、パスワード、およびドメインの情報を使用して要求を認証します。または、要求の Uniform Resource Identifier (URI) を使用して、要求の認証に使用するユーザー、パスワード、およびドメイン情報を決定します。  
  
 ほとんどのクライアントシナリオでは、<xref:System.Net.CredentialCache.DefaultCredentials%2A> プロパティを使用する必要があります。これには、現在ログオンしているユーザーの資格情報が含まれます。 これを行うには、このプロパティを設定するのではなく、<xref:System.Net.WebClient.UseDefaultCredentials%2A> プロパティを `true` に設定します。  
  
 ASP.NET アプリケーションなどの中間層アプリケーションで <xref:System.Net.HttpWebRequest> クラスが使用されている場合、<xref:System.Net.CredentialCache.DefaultCredentials%2A> プロパティの資格情報は、ASP ページ (サーバー側の資格情報) を実行しているアカウントに属しています。 通常、このプロパティは、要求の発行元のクライアントの資格情報に設定します。  
  
> [!NOTE]
>  NTLM 認証スキームを使用して別のユーザーの権限を借用することはできません。 Kerberos は、偽装をサポートするように特別に構成する必要があります。  
  
 HttpWebRequest を1つ以上の認証方法に制限するには、<xref:System.Net.CredentialCache> クラスを使用して、資格情報を1つ以上の認証スキームにバインドします。  
  
 サポートされている認証方式には、Digest、Negotiate、Kerberos、NTLM、および Basic があります。  
  
 セキュリティ上の理由から、自動的にリダイレクトされる場合は、リダイレクトに含める資格情報を <xref:System.Net.CredentialCache> に格納し、このプロパティに割り当てます。 このプロパティに <xref:System.Net.CredentialCache>以外のものが含まれている場合は、リダイレクト時に `null` に自動的に設定されます。 このプロパティ値をその条件下で `null` に自動的に設定すると、資格情報が意図しない宛先に送信されるのを防ぐことができます。
  
## Examples  
 次のコード例では、要求の資格情報を設定します。  
  
 [!code-cpp[NCLResponse1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLResponse1/CPP/httpwebrequest1.cpp#1)]
 [!code-csharp[NCLResponse1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLResponse1/CS/httpwebrequest1.cs#1)]
 [!code-vb[NCLResponse1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLResponse1/VB/httpwebrequest1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Date" />
      <MemberSignature Language="VB.NET" Value="Public Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime with get, set" Usage="System.Net.HttpWebRequest.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP 要求で使用する <see langword="Date" /> HTTP ヘッダー値を取得または設定します。</summary>
        <value>HTTP 要求の Date ヘッダーの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 日付ヘッダーが `null`場合、戻り値は <xref:System.DateTime.MinValue?displayProperty=nameWithType>に設定されます。  
  
 <xref:System.Net.HttpWebRequest.Date%2A> プロパティは、標準の <xref:System.DateTime?displayProperty=nameWithType> オブジェクトであり、<xref:System.DateTimeKind.Local?displayProperty=nameWithType>、<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>、または <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>の <xref:System.DateTimeKind?displayProperty=nameWithType> フィールドを含むことができます。 <xref:System.Net.HttpWebRequest.Date%2A> プロパティを使用する場合は、任意の種類の時刻を設定できます。 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> が設定または取得された場合、<xref:System.Net.HttpWebRequest.Date%2A> プロパティは <xref:System.DateTimeKind.Local?displayProperty=nameWithType> (ローカル時刻) と見なされます。  
  
 <xref:System.Net> 名前空間のクラスは常に、GMT (Utc) 形式を使用した標準形式での転送中に、ネットワークの <xref:System.Net.HttpWebRequest.Date%2A> プロパティを書き込みます。  
  
 <xref:System.Net.HttpWebRequest.Date%2A> プロパティが <xref:System.DateTime.MinValue?displayProperty=nameWithType>に設定されている場合、`Date` HTTP ヘッダーは <xref:System.Net.HttpWebRequest.Headers%2A> プロパティと <xref:System.Net.WebHeaderCollection>から削除されます。  
  
 <xref:System.Net.HttpWebRequest.Date%2A> プロパティが <xref:System.DateTime.MinValue?displayProperty=nameWithType>の場合、`Date` HTTP ヘッダーが <xref:System.Net.HttpWebRequest.Headers%2A> プロパティと <xref:System.Net.WebHeaderCollection>に含まれていないことを示します。  
  
> [!NOTE]
>  このプロパティの値は <xref:System.Net.WebHeaderCollection> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
 <xref:System.Net.HttpWebRequest.Date%2A> が設定されていて、本文のない <xref:System.Net.HttpWebRequest> を送信しようとした場合、<xref:System.Net.HttpWebRequest.BeginGetResponse%2A>、<xref:System.Net.HttpWebRequest.GetResponse%2A>、および <xref:System.Net.HttpWebRequest.EndGetResponse%2A> の各メソッドによって <xref:System.Net.ProtocolViolationException?displayProperty=nameWithType> がスローされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultCachePolicy">
      <MemberSignature Language="C#" Value="public static System.Net.Cache.RequestCachePolicy DefaultCachePolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.Cache.RequestCachePolicy DefaultCachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.DefaultCachePolicy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultCachePolicy As RequestCachePolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::Cache::RequestCachePolicy ^ DefaultCachePolicy { System::Net::Cache::RequestCachePolicy ^ get(); void set(System::Net::Cache::RequestCachePolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultCachePolicy : System.Net.Cache.RequestCachePolicy with get, set" Usage="System.Net.HttpWebRequest.DefaultCachePolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この要求の既定のキャッシュ ポリシーを取得または設定します。</summary>
        <value>他のポリシーが適用できない場合に、この要求で有効なキャッシュ ポリシーを指定する <see cref="T:System.Net.Cache.HttpRequestCachePolicy" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定すると、指定したポリシーが HTTP および HTTPS スキームに登録されます。 このポリシーは、次の場合にこの要求に使用されます。  
  
 この要求には <xref:System.Net.WebRequest.CachePolicy%2A?displayProperty=nameWithType> プロパティが指定されていません。  
  
または
  
 コンピューターおよびアプリケーションの構成ファイルでは、この要求の作成に使用される Uniform Resource Identifier (URI) に適用できるキャッシュポリシーが指定されていません。  
  
 キャッシュポリシーは、要求されたリソースをリソースホストコンピューターに送信するのではなく、キャッシュから取得できるかどうかを判断します。  
  
 リソースのコピーは、リソースの応答ストリームが取得され、ストリームの末尾に読み取られる場合にのみ、キャッシュに追加されます。 そのため、同じリソースに対する別の要求では、この要求のキャッシュポリシーレベルに応じて、キャッシュされたコピーを使用できます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.WebPermission">ネットワークリソースへの無制限アクセス。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Net.Cache.RequestCachePolicy" />
        <altmember cref="T:System.Net.Cache.HttpRequestCacheLevel" />
        <altmember cref="T:System.Net.Cache.RequestCacheLevel" />
        <altmember cref="P:System.Net.WebRequest.CachePolicy" />
      </Docs>
    </Member>
    <Member MemberName="DefaultMaximumErrorResponseLength">
      <MemberSignature Language="C#" Value="public static int DefaultMaximumErrorResponseLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 DefaultMaximumErrorResponseLength" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultMaximumErrorResponseLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int DefaultMaximumErrorResponseLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMaximumErrorResponseLength : int with get, set" Usage="System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP エラー応答の既定の最大長を取得または設定します。</summary>
        <value>HTTP エラー応答の既定の最大長。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">値は 0 より小さく、-1 とは異なっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultMaximumResponseHeadersLength">
      <MemberSignature Language="C#" Value="public static int DefaultMaximumResponseHeadersLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 DefaultMaximumResponseHeadersLength" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultMaximumResponseHeadersLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int DefaultMaximumResponseHeadersLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMaximumResponseHeadersLength : int with get, set" Usage="System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Use this")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Net.HttpWebRequest.MaximumResponseHeadersLength" /> プロパティの既定値を取得または設定します。</summary>
        <value>受信した応答ヘッダーの KB (1024 バイト) 単位の既定の最大長。 既定の構成ファイルは、この値を 64 KB に設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 応答ヘッダーの長さは、応答ステータス行と HTTP プロトコルの一部として受信される追加の制御文字を受け取りました。 値-1 は、受信した応答ヘッダーに制限が適用されないことを意味します。値0は、すべての要求が失敗することを意味します。  
  
 この値は、構成ファイルでも変更できます。 このプロパティの影響は、<xref:System.Net.HttpWebRequest> クラスのインスタンスの <xref:System.Net.HttpWebRequest.MaximumResponseHeadersLength%2A> プロパティを設定することによってオーバーライドできます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">値は -1 と等しくなく、0 未満です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EndGetRequestStream">
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトの非同期要求を終了します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndGetRequestStream">
      <MemberSignature Language="C#" Value="public override System.IO.Stream EndGetRequestStream (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.Stream EndGetRequestStream(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndGetRequestStream (asyncResult As IAsyncResult) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IO::Stream ^ EndGetRequestStream(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndGetRequestStream : IAsyncResult -&gt; System.IO.Stream" Usage="httpWebRequest.EndGetRequestStream asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">ストリームの保留中の要求。</param>
        <summary>データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトの非同期要求を終了します。</summary>
        <returns>要求データを書き込むために使用する <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> メソッドは、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> メソッドによって開始されたストリームの非同期要求を完了します。 <xref:System.IO.Stream> オブジェクトが返された後、<xref:System.IO.Stream.Write%2A?displayProperty=nameWithType> メソッドを使用して、<xref:System.Net.HttpWebRequest> でデータを送信できます。  
  
> [!NOTE]
>  ストリームにデータを書き込む前に、<xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティの値を設定する必要があります。  
  
> [!CAUTION]
>  ストリームを閉じて再利用するために接続を解放するには、<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> メソッドを呼び出す必要があります。 ストリームを閉じないと、アプリケーションの接続が切断されます。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> メソッドを使用して、ストリームインスタンスの非同期要求を終了します。  
  
 [!code-cpp[HttpWebRequest_BeginGetRequestStream#2](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/CPP/httpwebrequest_begingetrequeststream.cpp#2)]
 [!code-csharp[HttpWebRequest_BeginGetRequestStream#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/CS/httpwebrequest_begingetrequeststream.cs#2)]
 [!code-vb[HttpWebRequest_BeginGetRequestStream#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/VB/httpwebrequest_begingetrequeststream.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">要求が完了しませんでした。使用できるストリームはありません。</exception>
        <exception cref="T:System.ArgumentException">呼び出しから <paramref name="asyncResult" /> まで、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> は現在のインスタンスにより返されませんでした。</exception>
        <exception cref="T:System.InvalidOperationException">このメソッドは以前に <paramref name="asyncResult" /> を使用して呼び出されました。</exception>
        <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
または 
要求の処理中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndGetRequestStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream EndGetRequestStream (IAsyncResult asyncResult, out System.Net.TransportContext context);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream EndGetRequestStream(class System.IAsyncResult asyncResult, [out] class System.Net.TransportContext&amp; context) cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult,System.Net.TransportContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndGetRequestStream (asyncResult As IAsyncResult, ByRef context As TransportContext) As Stream" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ EndGetRequestStream(IAsyncResult ^ asyncResult, [Runtime::InteropServices::Out] System::Net::TransportContext ^ % context);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="F#" Value="override this.EndGetRequestStream : IAsyncResult * TransportContext -&gt; System.IO.Stream" Usage="httpWebRequest.EndGetRequestStream (asyncResult, context)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public System.IO.Stream EndGetRequestStream (IAsyncResult asyncResult, out System.Net.TransportContext transportContext);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream EndGetRequestStream(class System.IAsyncResult asyncResult, [out] class System.Net.TransportContext&amp; transportContext) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndGetRequestStream (asyncResult As IAsyncResult, ByRef transportContext As TransportContext) As Stream" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ EndGetRequestStream(IAsyncResult ^ asyncResult, [Runtime::InteropServices::Out] System::Net::TransportContext ^ % transportContext);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="override this.EndGetRequestStream : IAsyncResult * TransportContext -&gt; System.IO.Stream" Usage="httpWebRequest.EndGetRequestStream (asyncResult, transportContext)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="context" Type="System.Net.TransportContext" RefType="out" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="transportContext" Type="System.Net.TransportContext" RefType="out" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult">ストリームの保留中の要求。</param>
        <param name="context"><see cref="T:System.Net.TransportContext" /> の <see cref="T:System.IO.Stream" />。</param>
        <param name="transportContext"><see cref="T:System.Net.TransportContext" /> の <see cref="T:System.IO.Stream" />。</param>
        <summary>データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトに対する非同期要求を終了し、そのストリームに関連付けられている <see cref="T:System.Net.TransportContext" /> を出力します。</summary>
        <returns>要求データを書き込むために使用する <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> メソッドは、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> メソッドによって開始されたストリームに対する非同期要求を完了し、ストリームに関連付けられている <xref:System.Net.TransportContext> を出力します。 <xref:System.IO.Stream> オブジェクトが返された後、<xref:System.IO.Stream.Write%2A?displayProperty=nameWithType> メソッドを使用して、<xref:System.Net.HttpWebRequest> でデータを送信できます。  
  
 拡張保護で統合 Windows 認証を使用する一部のアプリケーションでは、基になる TLS チャネルからチャネルバインドトークン (CBT) を取得するために、<xref:System.Net.HttpWebRequest> によって使用されるトランスポート層に対してクエリを実行できる必要がある場合があります。 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドは、要求本文 (`POST` と `PUT` 要求) を持つ HTTP メソッドのこの情報へのアクセスを提供します。 これは、アプリケーションが独自の認証を実装しており、CBT へのアクセスが必要な場合にのみ必要です。  
  
> [!NOTE]
>  アプリケーションで <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティの値を設定する必要がある場合は、ストリームを取得してデータを書き込む前に、この操作を行う必要があります。  
  
> [!CAUTION]
>  ストリームを閉じて再利用するために接続を解放するには、<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> メソッドを呼び出す必要があります。 ストリームを閉じないと、アプリケーションの接続が切断されます。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">呼び出しから <paramref name="asyncResult" /> まで、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> は現在のインスタンスにより返されませんでした。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">このメソッドは以前に <paramref name="asyncResult" /> を使用して呼び出されました。</exception>
        <exception cref="T:System.IO.IOException">要求が完了しませんでした。使用できるストリームはありません。</exception>
        <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
または 
要求の処理中にエラーが発生しました。</exception>
        <altmember cref="T:System.Net.TransportContext" />
        <altmember cref="M:System.Net.TransportContext.GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">拡張保護付き統合 Windows 認証</related>
      </Docs>
    </Member>
    <Member MemberName="EndGetResponse">
      <MemberSignature Language="C#" Value="public override System.Net.WebResponse EndGetResponse (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Net.WebResponse EndGetResponse(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndGetResponse (asyncResult As IAsyncResult) As WebResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Net::WebResponse ^ EndGetResponse(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndGetResponse : IAsyncResult -&gt; System.Net.WebResponse" Usage="httpWebRequest.EndGetResponse asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">応答の保留中の要求。</param>
        <summary>インターネット リソースへの非同期要求を終了します。</summary>
        <returns>インターネット リソースからの応答を格納している <see cref="T:System.Net.WebResponse" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.EndGetResponse%2A> メソッドは、<xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドを呼び出すことによって開始されたインターネットリソースに対する非同期要求を完了します。  
  
> [!CAUTION]
>  ストリームを閉じて接続を解放するには、<xref:System.Net.HttpWebResponse.Close%2A> メソッドを呼び出す必要があります。 そうしないと、アプリケーションの接続が不足する可能性があります。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.EndGetResponse%2A> メソッドを使用して、インターネットリソースの非同期要求を終了します。  
  
 [!code-cpp[HttpWebRequest_BeginGetResponse#2](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_BeginGetResponse/CPP/httpwebrequest_begingetresponse.cpp#2)]
 [!code-csharp[HttpWebRequest_BeginGetResponse#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_BeginGetResponse/CS/httpwebrequest_begingetresponse.cs#2)]
 [!code-vb[HttpWebRequest_BeginGetResponse#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_BeginGetResponse/VB/httpwebrequest_begingetresponse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">このメソッドは以前に <paramref name="asyncResult." /> を使用して呼び出されました。  
  
または 
<see cref="P:System.Net.HttpWebRequest.ContentLength" /> プロパティが 0 を超えていますが、データが要求ストリームに書き込まれていません。</exception>
        <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
または 
要求の処理中にエラーが発生しました。</exception>
        <exception cref="T:System.ArgumentException">呼び出しから <paramref name="asyncResult" /> まで、<see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> は現在のインスタンスにより返されませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="Expect">
      <MemberSignature Language="C#" Value="public string Expect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Expect" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Expect" />
      <MemberSignature Language="VB.NET" Value="Public Property Expect As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Expect { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Expect : string with get, set" Usage="System.Net.HttpWebRequest.Expect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Expect" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value><see langword="Expect" /> HTTP ヘッダーの内容。 既定値は <see langword="null" /> です。  
  
 <block subset="none" type="note"><para>  
 このプロパティの値は <see cref="T:System.Net.WebHeaderCollection" /> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
</para></block></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><see langword="Expect" /> は、部分文字列として "100-continue" を含む文字列に設定されます。</exception>
        <altmember cref="P:System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/defaultproxy-element-network-settings.md">DefaultProxy 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="httpWebRequest.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Net.WebRequest" /> インスタンスのハッシュ値を返します。</summary>
        <returns>整数ハッシュ値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
GetHashCode メソッドは、web 要求のハッシュコードを返します。 この値は、ハッシュテーブルのキーとして使用できます。

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="protected override void GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="httpWebRequest.GetObjectData (serializationInfo, streamingContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Obsolete("Serialization is obsoleted for this type.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Serialization is obsoleted for this type.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.Obsolete("Serialization is obsoleted for this type.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="streamingContext">このシリアル化の転送先を指定する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
        <summary><see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、ターゲット オブジェクトをシリアル化するために必要なデータを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Serialization.SerializationInfo> に含まれるオブジェクトは、フォーマッタによって自動的に追跡およびシリアル化されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRequestStream">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>要求データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRequestStream">
      <MemberSignature Language="C#" Value="public override System.IO.Stream GetRequestStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.Stream GetRequestStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.GetRequestStream" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetRequestStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IO::Stream ^ GetRequestStream();" />
      <MemberSignature Language="F#" Value="override this.GetRequestStream : unit -&gt; System.IO.Stream" Usage="httpWebRequest.GetRequestStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>要求データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトを取得します。</summary>
        <returns>要求データを書き込むために使用する <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドは、<xref:System.Net.HttpWebRequest>のデータを送信するために使用するストリームを返します。 <xref:System.IO.Stream> オブジェクトが返された後、<xref:System.IO.Stream.Write%2A?displayProperty=nameWithType> メソッドを使用して、<xref:System.Net.HttpWebRequest> でデータを送信できます。  
  
 アプリケーションで <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティの値を設定する必要がある場合は、ストリームを取得する前にこれを行う必要があります。  
  
 ストリームを閉じて再利用するために接続を解放するには、<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> メソッドを呼び出す必要があります。 ストリームを閉じないと、アプリケーションの接続が切断されます。  
  
> [!NOTE]
>  アプリケーションでは、特定の要求に対して同期メソッドと非同期メソッドを混在させることはできません。 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドを呼び出す場合は、<xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドを使用して応答を取得する必要があります。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドを使用して、ストリームインスタンスを返します。  
  
 [!code-cpp[HttpWebRequest_ContentLength#4](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CPP/httpwebrequest_contentlength.cpp#4)]
 [!code-csharp[HttpWebRequest_ContentLength#4](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CS/httpwebrequest_contentlength.cs#4)]
 [!code-vb[HttpWebRequest_ContentLength#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_ContentLength/VB/httpwebrequest_contentlength.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.ProtocolViolationException"><see cref="P:System.Net.HttpWebRequest.Method" /> プロパティは GET または HEAD です。  
  
または 
 <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が -1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドが複数回呼び出されています。  
  
または 
 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。</exception>
        <exception cref="T:System.NotSupportedException">要求キャッシュの検証コントロールは、この要求に対する応答がキャッシュから提供されることを示していますが、データを書き込む要求ではキャッシュを使用してはなりません。 正しく実装されていないカスタム キャッシュの検証コントロールを使用すると、この例外が発生する場合があります。</exception>
        <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
または 
要求のタイムアウト期間の期限が切れました。  
  
または 
要求の処理中にエラーが発生しました。</exception>
        <exception cref="T:System.ObjectDisposedException">.NET Compact Framework アプリケーションでコンテンツの長さが 0 の要求ストリームが取得されず、正しく閉じられませんでした。 コンテンツの長さが 0 の要求の処理の詳細については、「[.NET Compact Framework のネットワーク プログラミング](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2008/1afx2b0f(v=vs.90))」をご覧ください。</exception>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/defaultproxy-element-network-settings.md">DefaultProxy 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="GetRequestStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetRequestStream (out System.Net.TransportContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetRequestStream([out] class System.Net.TransportContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.GetRequestStream(System.Net.TransportContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRequestStream (ByRef context As TransportContext) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetRequestStream([Runtime::InteropServices::Out] System::Net::TransportContext ^ % context);" />
      <MemberSignature Language="F#" Value="override this.GetRequestStream : TransportContext -&gt; System.IO.Stream" Usage="httpWebRequest.GetRequestStream context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Net.TransportContext" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="context"><see cref="T:System.Net.TransportContext" /> の <see cref="T:System.IO.Stream" />。</param>
        <summary>要求データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトを取得し、そのストリームに関連付けられている <see cref="T:System.Net.TransportContext" /> を出力します。</summary>
        <returns>要求データを書き込むために使用する <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドは、<xref:System.Net.HttpWebRequest> のデータを送信するために使用するストリームを返し、ストリームに関連付けられている <xref:System.Net.TransportContext> を出力します。 <xref:System.IO.Stream> オブジェクトが返された後、<xref:System.IO.Stream.Write%2A?displayProperty=nameWithType> メソッドを使用して、<xref:System.Net.HttpWebRequest> でデータを送信できます。  
  
 拡張保護で統合 Windows 認証を使用する一部のアプリケーションでは、基になる TLS チャネルからチャネルバインドトークン (CBT) を取得するために、<xref:System.Net.HttpWebRequest> によって使用されるトランスポート層に対してクエリを実行できる必要がある場合があります。 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドは、要求本文 (`POST` と `PUT` 要求) を持つ HTTP メソッドのこの情報へのアクセスを提供します。 これは、アプリケーションが独自の認証を実装しており、CBT へのアクセスが必要な場合にのみ必要です。  
  
 アプリケーションで <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティの値を設定する必要がある場合は、ストリームを取得する前にこれを行う必要があります。  
  
 ストリームを閉じて再利用するために接続を解放するには、<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> メソッドを呼び出す必要があります。 ストリームを閉じないと、アプリケーションの接続が切断されます。  
  
> [!NOTE]
>  アプリケーションでは、特定の要求に対して同期メソッドと非同期メソッドを混在させることはできません。 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドを呼び出す場合は、<xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドを使用して応答を取得する必要があります。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドが <see cref="T:System.IO.Stream" /> を取得できませんでした。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドが複数回呼び出されています。  
  
または 
 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。</exception>
        <exception cref="T:System.NotSupportedException">要求キャッシュの検証コントロールは、この要求に対する応答がキャッシュから提供されることを示していますが、データを書き込む要求ではキャッシュを使用してはなりません。 正しく実装されていないカスタム キャッシュの検証コントロールを使用すると、この例外が発生する場合があります。</exception>
        <exception cref="T:System.Net.ProtocolViolationException"><see cref="P:System.Net.HttpWebRequest.Method" /> プロパティは GET または HEAD です。  
  
または 
 <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が -1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。</exception>
        <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
または 
要求のタイムアウト期間の期限が切れました。  
  
または 
要求の処理中にエラーが発生しました。</exception>
        <altmember cref="T:System.Net.TransportContext" />
        <altmember cref="M:System.Net.TransportContext.GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">拡張保護付き統合 Windows 認証</related>
      </Docs>
    </Member>
    <Member MemberName="GetResponse">
      <MemberSignature Language="C#" Value="public override System.Net.WebResponse GetResponse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Net.WebResponse GetResponse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.GetResponse" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetResponse () As WebResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Net::WebResponse ^ GetResponse();" />
      <MemberSignature Language="F#" Value="override this.GetResponse : unit -&gt; System.Net.WebResponse" Usage="httpWebRequest.GetResponse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>インターネット リソースからの応答を返します。</summary>
        <returns>インターネット リソースからの応答を格納している <see cref="T:System.Net.WebResponse" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドは、インターネットリソースからの応答を格納する <xref:System.Net.WebResponse> オブジェクトを返します。 返される実際のインスタンスは <xref:System.Net.HttpWebResponse>であり、そのクラスに型キャストして、HTTP 固有のプロパティにアクセスできます。  
  
 <xref:System.Net.ProtocolViolationException> は、<xref:System.Net.HttpWebRequest> クラスに設定されたプロパティが競合している場合にスローされます。 この例外は、アプリケーションが <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティと <xref:System.Net.HttpWebRequest.SendChunked%2A> プロパティを `true`に設定し、HTTP GET 要求を送信した場合に発生します。 この例外は、HTTP 1.0 プロトコルのみをサポートするサーバーにアプリケーションがチャンクを送信しようとした場合に発生します。これはサポートされていません。 この例外が発生するのは、アプリケーションが <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティを設定せずにデータを送信しようとした場合、またはバッファリングが無効になっているときに <xref:System.Net.HttpWebRequest.SendChunked%2A> が `false`、および keepalive 接続 (<xref:System.Net.HttpWebRequest.KeepAlive%2A> プロパティが `true`) である場合です`.`  
  
> [!CAUTION]
>  ストリームを閉じて接続を解放するには、<xref:System.Net.HttpWebResponse.Close%2A> メソッドを呼び出す必要があります。 そうしないと、アプリケーションの接続が不足する可能性があります。  
  
 POST メソッドを使用する場合は、要求ストリームを取得し、ポストされるデータを書き込み、ストリームを閉じる必要があります。 このメソッドは、コンテンツの投稿を待機しています。タイムアウトが設定されておらず、コンテンツを提供しない場合は、呼び出し元のスレッドが無期限にブロックされます。  
  
> [!NOTE]
>  <xref:System.Net.HttpWebRequest.GetResponse%2A> を複数回呼び出すと、同じ応答オブジェクトが返されます。要求は再発行されません。  
  
> [!NOTE]
>  アプリケーションでは、特定の要求に対して同期メソッドと非同期メソッドを混在させることはできません。 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドを呼び出す場合は、<xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドを使用して応答を取得する必要があります。  
  
> [!NOTE]
>  <xref:System.Net.WebException> がスローされた場合は、例外の <xref:System.Net.WebException.Response%2A> と <xref:System.Net.WebException.Status%2A> のプロパティを使用して、サーバーからの応答を確認します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。  
  
> [!NOTE]
>  セキュリティ上の理由から、cookie は既定で無効になっています。 Cookie を使用する場合は、<xref:System.Net.HttpWebRequest.CookieContainer%2A> プロパティを使用して cookie を有効にします。  
  
   
  
## Examples  
 次のコード例では、要求に対する応答を取得します。  
  
 [!code-cpp[NCLResponse1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLResponse1/CPP/httpwebrequest1.cpp#1)]
 [!code-csharp[NCLResponse1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLResponse1/CS/httpwebrequest1.cs#1)]
 [!code-vb[NCLResponse1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLResponse1/VB/httpwebrequest1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">前回の <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> への呼び出しでストリームが既に使用中です。  
  
または 
 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。</exception>
        <exception cref="T:System.Net.ProtocolViolationException"><see cref="P:System.Net.HttpWebRequest.Method" /> が GET または HEAD で、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が 0 以上であるか <see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="true" />です。  
  
または 
 <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が -1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。  
  
または 
<see cref="T:System.Net.HttpWebRequest" /> にはエンティティ本体がありますが、<see cref="M:System.Net.HttpWebRequest.GetResponse" /> メソッドを呼び出さずに <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドが呼び出されています。  
  
または 
<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が 0 よりも大きい値に設定されていますが、アプリケーションは保証されたデータをすべては書き込みません。</exception>
        <exception cref="T:System.NotSupportedException">要求キャッシュの検証コントロールは、この要求に対する応答がキャッシュから提供されたことを示していますが、この要求にはサーバーに送信されるデータが含まれています。 データを送信する要求には、キャッシュを使用できません。 正しく実装されていないカスタム キャッシュの検証コントロールを使用すると、この例外が発生する場合があります。</exception>
        <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
または 
要求のタイムアウト期間の期限が切れました。  
  
または 
要求の処理中にエラーが発生しました。</exception>
        <altmember cref="P:System.Net.HttpWebRequest.Timeout" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/defaultproxy-element-network-settings.md">DefaultProxy 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="HaveResponse">
      <MemberSignature Language="C#" Value="public virtual bool HaveResponse { get; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HaveResponse" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.HaveResponse" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HaveResponse As Boolean" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HaveResponse { bool get(); };" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.HaveResponse : bool" Usage="System.Net.HttpWebRequest.HaveResponse" />
      <MemberSignature Language="C#" Value="public bool HaveResponse { get; }" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HaveResponse As Boolean" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HaveResponse { bool get(); };" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースから応答が受信されたかどうかを示す値を取得します。</summary>
        <value>応答を受信した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.HaveResponse%2A> プロパティを調べて、インターネットリソースから応答が受信されたかどうかを確認します。  
  
 [!code-cpp[Httpwebrequest_HaveResponse#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Httpwebrequest_HaveResponse/CPP/httpwebrequest_haveresponse.cpp#1)]
 [!code-csharp[Httpwebrequest_HaveResponse#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Httpwebrequest_HaveResponse/CS/httpwebrequest_haveresponse.cs#1)]
 [!code-vb[Httpwebrequest_HaveResponse#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Httpwebrequest_HaveResponse/VB/httpwebrequest_haveresponse.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public override System.Net.WebHeaderCollection Headers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection Headers" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Headers" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Headers As WebHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::WebHeaderCollection ^ Headers { System::Net::WebHeaderCollection ^ get(); void set(System::Net::WebHeaderCollection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Headers : System.Net.WebHeaderCollection with get, set" Usage="System.Net.HttpWebRequest.Headers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP ヘッダーを構成する名前と値のペアのコレクションを指定します。</summary>
        <value>HTTP 要求のヘッダーを構成する名前と値のペアを格納している <see cref="T:System.Net.WebHeaderCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.Headers%2A> コレクションには、要求に関連付けられているプロトコルヘッダーが含まれています。 次の表に、<xref:System.Net.HttpWebRequest.Headers%2A> コレクションに格納されていないが、システムによって設定されるか、プロパティまたはメソッドによって設定される HTTP ヘッダーを示します。  
  
|ヘッダー|設定者|  
|------------|------------|  
|同意する|<xref:System.Net.HttpWebRequest.Accept%2A> プロパティによって設定されます。|  
|接続|<xref:System.Net.HttpWebRequest.Connection%2A> プロパティと <xref:System.Net.HttpWebRequest.KeepAlive%2A> プロパティによって設定されます。|  
|Content-Length|<xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティによって設定されます。|  
|コンテンツの種類|<xref:System.Net.HttpWebRequest.ContentType%2A> プロパティによって設定されます。|  
|Expect|<xref:System.Net.HttpWebRequest.Expect%2A> プロパティによって設定されます。|  
|Date|<xref:System.Net.HttpWebRequest.Date%2A> プロパティによって設定されます。|  
|Host|<xref:System.Net.HttpWebRequest.Host%2A> プロパティによって設定されます。|  
|If-Modified-Since|<xref:System.Net.HttpWebRequest.IfModifiedSince%2A> プロパティによって設定されます。|  
|[範囲]|<xref:System.Net.HttpWebRequest.AddRange%2A> メソッドによって設定されます。|  
|Referer|<xref:System.Net.HttpWebRequest.Referer%2A> プロパティによって設定されます。|  
|Transfer-Encoding|<xref:System.Net.HttpWebRequest.TransferEncoding%2A> プロパティによって設定されます (<xref:System.Net.HttpWebRequest.SendChunked%2A> プロパティは true である必要があります)。|  
|User-Agent|<xref:System.Net.HttpWebRequest.UserAgent%2A> プロパティによって設定されます。|  
  
 これらの保護されたヘッダーのいずれかを設定しようとすると、<xref:System.Net.WebHeaderCollection.Add%2A> メソッドによって <xref:System.ArgumentException> がスローされます。  
  
 <xref:System.Net.HttpWebRequest.GetRequestStream%2A>、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>、<xref:System.Net.HttpWebRequest.GetResponse%2A>、または <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドを呼び出すことによって要求が開始された後に <xref:System.Net.HttpWebRequest.Headers%2A> プロパティを変更すると、<xref:System.InvalidOperationException>がスローされます。  
  
 Web サーバーとキャッシュが変更されたり、Web 要求にヘッダーが追加されたりする可能性があるため、ヘッダー値が変更されないことを想定しないでください。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.Headers%2A> プロパティを使用して、HTTP ヘッダーの名前と値のペアをコンソールに出力します。  
  
 [!code-cpp[HttpWebRequest_Headers#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Headers/CPP/httpwebrequest_headers.cpp#1)]
 [!code-csharp[HttpWebRequest_Headers#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Headers/CS/httpwebrequest_headers.cs#1)]
 [!code-vb[HttpWebRequest_Headers#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Headers/VB/httpwebrequest_headers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" />、または <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> メソッドを呼び出すことにより要求が開始されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="public string Host { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Host" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Host" />
      <MemberSignature Language="VB.NET" Value="Public Property Host As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Host { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Host : string with get, set" Usage="System.Net.HttpWebRequest.Host" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求 URI に依存しない HTTP 要求で使用する Host ヘッダー値を取得または設定します。</summary>
        <value>HTTP 要求の Host ヘッダーの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.Host%2A> プロパティを使用して、要求 URI とは独立した HTTP 要求で使用するホストヘッダー値を設定できます。 <xref:System.Net.HttpWebRequest.Host%2A> プロパティは、ホスト名とオプションのポート番号で構成できます。 ポート情報のないホストヘッダーは、要求されたサービスの既定のポート (HTTP URL の場合はポート80など) を意味します。  
  
 ホストとポートを指定する形式は、IETF によって発行された RFC2616 のセクション14.23 の規則に従う必要があります。 8080のポートを指定するこれらの要件に準拠する例として、<xref:System.Net.HttpWebRequest.Host%2A> プロパティの値を次に示します。  
  
 `www.contoso.com:8080`  
  
 <xref:System.Net.HttpWebRequest.Host%2A> プロパティを使用してカスタムホストヘッダー値を明示的に指定すると、領域のキャッシュ、cookie、および認証にも影響します。 アプリケーションが特定の URI プレフィックスの資格情報を提供する場合、アプリケーションは URI 内の対象サーバーではなく、ホストヘッダーの値を含む URI を使用する必要があります。 リソースをキャッシュするときに使用されるキーは、要求 URI ではなくホストヘッダー値を使用します。 Cookie は <xref:System.Net.CookieContainer> に格納され、サーバーのドメイン名で論理的にグループ化されます。 アプリケーションでホストヘッダーが指定されている場合、この値はドメインとして使用されます。  
  
 <xref:System.Net.HttpWebRequest.Host%2A> プロパティが設定されていない場合、HTTP 要求で使用するホストヘッダー値は、要求 URI に基づいています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Host ヘッダーを <see langword="null" /> に設定することはできません。</exception>
        <exception cref="T:System.ArgumentException">ホスト ヘッダーを無効な値には設定できません。</exception>
        <exception cref="T:System.InvalidOperationException">Host ヘッダーは、<see cref="T:System.Net.HttpWebRequest" /> の送信が既に開始された後には設定できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IfModifiedSince">
      <MemberSignature Language="C#" Value="public DateTime IfModifiedSince { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime IfModifiedSince" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.IfModifiedSince" />
      <MemberSignature Language="VB.NET" Value="Public Property IfModifiedSince As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime IfModifiedSince { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.IfModifiedSince : DateTime with get, set" Usage="System.Net.HttpWebRequest.IfModifiedSince" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="If-Modified-Since" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value><see cref="T:System.DateTime" /> HTTP ヘッダーの内容を格納する <see langword="If-Modified-Since" />。 既定値は、現在の日付と時刻です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.IfModifiedSince%2A> プロパティは、標準の <xref:System.DateTime?displayProperty=nameWithType> オブジェクトであり、<xref:System.DateTimeKind.Local?displayProperty=nameWithType>、<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>、または <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>の <xref:System.DateTimeKind?displayProperty=nameWithType> フィールドを含むことができます。 <xref:System.Net.HttpWebRequest.IfModifiedSince%2A> プロパティを使用する場合は、任意の種類の時刻を設定できます。 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> が設定または取得された場合、<xref:System.Net.HttpWebRequest.IfModifiedSince%2A> プロパティは <xref:System.DateTimeKind.Local?displayProperty=nameWithType> (ローカル時刻) と見なされます。  
  
 <xref:System.Net> 名前空間のクラスは常に、GMT (Utc) 形式を使用した標準形式での転送中に、ネットワークの <xref:System.Net.HttpWebRequest.IfModifiedSince%2A> プロパティを書き込みます。  
  
 <xref:System.Net.HttpWebRequest.IfModifiedSince%2A> プロパティが <xref:System.DateTime.MinValue?displayProperty=nameWithType>に設定されている場合、`If-Modified-Since` HTTP ヘッダーは <xref:System.Net.HttpWebRequest.Headers%2A> プロパティと <xref:System.Net.WebHeaderCollection>から削除されます。  
  
 <xref:System.Net.HttpWebRequest.IfModifiedSince%2A> プロパティが <xref:System.DateTime.MinValue?displayProperty=nameWithType>の場合、`If-Modified-Since` HTTP ヘッダーが <xref:System.Net.HttpWebRequest.Headers%2A> プロパティと <xref:System.Net.WebHeaderCollection>に含まれていないことを示します。  
  
> [!NOTE]
>  このプロパティの値は <xref:System.Net.WebHeaderCollection> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.IfModifiedSince%2A> プロパティを確認します。  
  
 [!code-cpp[HttpWebRequest_IfModifiedSince#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_IfModifiedSince/CPP/httpwebrequest_ifmodifiedsince.cpp#1)]
 [!code-csharp[HttpWebRequest_IfModifiedSince#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_IfModifiedSince/CS/httpwebrequest_ifmodifiedsince.cs#1)]
 [!code-vb[HttpWebRequest_IfModifiedSince#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_IfModifiedSince/VB/httpwebrequest_ifmodifiedsince.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public bool KeepAlive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepAlive" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.KeepAlive" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepAlive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepAlive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.KeepAlive : bool with get, set" Usage="System.Net.HttpWebRequest.KeepAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースへの永続的な接続を行うかどうかを示す値を取得または設定します。</summary>
        <value>値 Keep-alive を持つ <see langword="true" /> HTTP ヘッダーをインターネット リソースへの要求に含める場合は <see langword="Connection" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値 Keep-alive で `Connection` HTTP ヘッダーを送信するには、このプロパティを `true` に設定します。 アプリケーションでは、<xref:System.Net.HttpWebRequest.KeepAlive%2A> を使用して、永続的な接続の優先順位を指定します。 <xref:System.Net.HttpWebRequest.KeepAlive%2A> プロパティが `true`場合、アプリケーションはそれらをサポートするサーバーへの永続的な接続を行います。  
  
> [!NOTE]
>  HTTP/1.1 を使用する場合、キープアライブは既定でオンになっています。 <xref:System.Net.HttpWebRequest.KeepAlive%2A> を `false` に設定すると、サーバーに `Connection: Close` ヘッダーが送信される可能性があります。  
  
   
  
## Examples  
 次のコード例では、インターネットリソースとの永続的な接続が確立されないように、<xref:System.Net.HttpWebRequest.KeepAlive%2A> プロパティを `false` に設定しています。  
  
 [!code-cpp[HttpWebRequest_Connection#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Connection/CPP/httpwebrequest_connection.cpp#1)]
 [!code-csharp[HttpWebRequest_Connection#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Connection/CS/httpwebrequest_connection.cs#1)]
 [!code-vb[HttpWebRequest_Connection#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Connection/VB/httpwebrequest_connection.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumAutomaticRedirections">
      <MemberSignature Language="C#" Value="public int MaximumAutomaticRedirections { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumAutomaticRedirections" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.MaximumAutomaticRedirections" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumAutomaticRedirections As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaximumAutomaticRedirections { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumAutomaticRedirections : int with get, set" Usage="System.Net.HttpWebRequest.MaximumAutomaticRedirections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求によって実行されるリダイレクトの最大数を取得または設定します。</summary>
        <value>要求によって実行されるリダイレクト応答の最大数。 既定値は 50 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.MaximumAutomaticRedirections%2A> プロパティは、<xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> プロパティが `true`場合に、要求に対してリダイレクトの最大数を設定します。  
  
   
  
## Examples  
 次のコード例では、このプロパティの値を設定します。  
  
 [!code-cpp[NCLResponse1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLResponse1/CPP/httpwebrequest1.cpp#1)]
 [!code-csharp[NCLResponse1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLResponse1/CS/httpwebrequest1.cs#1)]
 [!code-vb[NCLResponse1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLResponse1/VB/httpwebrequest1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定値が 0 以下です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaximumResponseHeadersLength">
      <MemberSignature Language="C#" Value="public int MaximumResponseHeadersLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumResponseHeadersLength" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.MaximumResponseHeadersLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumResponseHeadersLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaximumResponseHeadersLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumResponseHeadersLength : int with get, set" Usage="System.Net.HttpWebRequest.MaximumResponseHeadersLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Use this")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>応答ヘッダーの許容最大長を取得または設定します。</summary>
        <value>応答ヘッダーの長さ (KB 単位、1 KB = 1024 バイト)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 応答ヘッダーの長さには、応答ステータス行、および HTTP プロトコルの一部として受信される追加の制御文字が含まれます。 値-1 は、応答ヘッダーに制限が適用されないことを意味します。値0は、すべての要求が失敗することを意味します。  
  
 <xref:System.Net.HttpWebRequest.MaximumResponseHeadersLength%2A> プロパティが明示的に設定されていない場合は、<xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A> プロパティの値が既定値に設定されます。  
  
 受信した応答ヘッダーの長さが <xref:System.Net.HttpWebRequest.MaximumResponseHeadersLength%2A> プロパティの値を超えた場合、<xref:System.Net.HttpWebRequest.EndGetResponse%2A> または <xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドは、<xref:System.Net.WebException.Status%2A> プロパティが <xref:System.Net.WebExceptionStatus.MessageLengthLimitExceeded>に設定された <xref:System.Net.WebException> をスローします。  
  
   
  
## Examples  
 次のコード例では、このプロパティの値を設定します。  
  
 [!code-cpp[NCLResponse1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLResponse1/CPP/httpwebrequest1.cpp#1)]
 [!code-csharp[NCLResponse1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLResponse1/CS/httpwebrequest1.cs#1)]
 [!code-vb[NCLResponse1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLResponse1/VB/httpwebrequest1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">プロパティは、要求が送信された後に設定されます。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">値は 0 より小さく、-1 とは異なっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="MediaType">
      <MemberSignature Language="C#" Value="public string MediaType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MediaType" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.MediaType" />
      <MemberSignature Language="VB.NET" Value="Public Property MediaType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MediaType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MediaType : string with get, set" Usage="System.Net.HttpWebRequest.MediaType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求のメディア タイプを取得または設定します。</summary>
        <value>要求のメディア タイプ。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.MediaType%2A> プロパティの値は、<xref:System.Net.HttpWebResponse.CharacterSet%2A> プロパティに影響します。 要求で <xref:System.Net.HttpWebRequest.MediaType%2A> を設定すると、対応するメディアの種類が、応答 `Content-type` HTTP ヘッダーで返される文字セットの一覧から選択されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public override string Method { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Method" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Method" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Method As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Method { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Method : string with get, set" Usage="System.Net.HttpWebRequest.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この要求のメソッドを取得または設定します。</summary>
        <value>インターネット リソースと通信するために使用する要求メソッド。 既定値は GET です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.Method%2A> プロパティは、GET、HEAD、POST、PUT、DELETE、TRACE、OPTIONS のいずれかの HTTP 1.1 プロトコル動詞に設定できます。  
  
 <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティが-1 以外の値に設定されている場合、<xref:System.Net.HttpWebRequest.Method%2A> プロパティはデータをアップロードするプロトコルプロパティに設定する必要があります。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.Method%2A> プロパティを POST に設定します。  
  
 [!code-cpp[HttpWebRequest_ContentLength#4](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CPP/httpwebrequest_contentlength.cpp#4)]
 [!code-csharp[HttpWebRequest_ContentLength#4](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CS/httpwebrequest_contentlength.cs#4)]
 [!code-vb[HttpWebRequest_ContentLength#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_ContentLength/VB/httpwebrequest_contentlength.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">メソッドが提供されていません。  
  
 または  
  
 メソッドの文字列に正しくない文字が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Pipelined">
      <MemberSignature Language="C#" Value="public bool Pipelined { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Pipelined" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Pipelined" />
      <MemberSignature Language="VB.NET" Value="Public Property Pipelined As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Pipelined { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Pipelined : bool with get, set" Usage="System.Net.HttpWebRequest.Pipelined" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースへの要求をパイプライン処理するかどうかを示す値を取得または設定します。</summary>
        <value>要求をパイプライン処理する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションでは、<xref:System.Net.HttpWebRequest.Pipelined%2A> プロパティを使用して、パイプライン接続の優先順位を指定します。 <xref:System.Net.HttpWebRequest.Pipelined%2A> が `true`されると、アプリケーションはそれらをサポートするサーバーにパイプライン接続を行います。  
  
 パイプライン接続は、<xref:System.Net.HttpWebRequest.KeepAlive%2A> プロパティも `true`場合にのみ行われます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.Pipelined%2A> プロパティの値をコンソールに出力します。  
  
 [!code-cpp[HttpWebRequest_PipeLined#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_PipeLined/CPP/httpwebrequest_pipelined.cpp#1)]
 [!code-csharp[HttpWebRequest_PipeLined#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_PipeLined/CS/httpwebrequest_pipelined.cs#1)]
 [!code-vb[HttpWebRequest_PipeLined#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_PipeLined/VB/httpwebrequest_pipelined.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreAuthenticate">
      <MemberSignature Language="C#" Value="public override bool PreAuthenticate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PreAuthenticate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.PreAuthenticate" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property PreAuthenticate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool PreAuthenticate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PreAuthenticate : bool with get, set" Usage="System.Net.HttpWebRequest.PreAuthenticate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求で Authorization ヘッダーを送信するかどうかを示す値を取得または設定します。</summary>
        <value>認証が行われた後で、要求と共に HTTP Authorization ヘッダーを送信するには <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 特定の <xref:System.Uri> に対するクライアント要求が正常に認証されると、<xref:System.Net.HttpWebRequest.PreAuthenticate%2A> が `true`、資格情報が提供されると、各要求と共に、最後のスラッシュまでの特定の <xref:System.Uri> に一致するすべての <xref:System.Uri> に認証ヘッダーが送信されます。 クライアント要求が、次を含む特定の <xref:System.Uri> に対して正常に認証された場合は、次のようになります。  
  
 `http://www.contoso.com/firstpath/`  
  
 その後、事前認証の Authorization ヘッダーは、各要求と共に、次のいずれかの <xref:System.Uri> インスタンスに送信されます。  
  
 `http://www.contoso.com/firstpath/`  
  
 `http://www.contoso.com/firstpath/default`  
  
 `http://www.contoso.com/firstpath/default.html`  
  
 `http://www.contoso.com/firstpath/sample.html`  
  
 ただし、Authorization ヘッダーは、次のいずれかの <xref:System.Uri> インスタンスに要求と共に送信されることはありません。  
  
 `http://www.contoso.com/`  
  
 `http://www.contoso.com/firstpath`  
  
 `http://www.contoso.com/secondpath/`  
  
 特定の <xref:System.Uri> に対するクライアント要求が正常に認証されなかった場合、要求では標準の認証手順が使用されます。  
  
 最初の要求を除き、<xref:System.Net.WebRequest.PreAuthenticate%2A> のプロパティは、サーバーによる要求が発生するのを待たずに、特定の <xref:System.Uri> に一致する <xref:System.Uri> に、後続の要求と共に認証情報を送信するかどうかを示します。  
  
 クライアントとサーバーの間の次のダイアログは、このプロパティの効果を示しています。 このダイアログでは、基本認証が使用されていることを前提としています。  
  
 <xref:System.Net.HttpWebRequest.PreAuthenticate%2A> は `false`:  
  
 クライアント: Url を取得する  
  
 サーバー: 401 WWW-認証の基本  
  
 クライアント: Authorization ヘッダーを使用して取得する  
  
 サーバー: 200 OK  
  
 クライアント: Url を取得する  
  
 サーバー: 401 WWW-認証の基本  
  
 クライアント: Authorization ヘッダーを使用して取得する  
  
 サーバー: 200 OK  
  
 <xref:System.Net.HttpWebRequest.PreAuthenticate%2A> は `true`:  
  
 クライアント: Url を取得する  
  
 サーバー: 401 WWW-認証の基本  
  
 クライアント: Authorization ヘッダーを使用して取得する  
  
 サーバー: 200 OK  
  
 クライアント: 承認ヘッダーを含む Url を取得する  
  
 認証方式で事前認証がサポートされていない場合、このプロパティの値は無視されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtocolVersion">
      <MemberSignature Language="C#" Value="public Version ProtocolVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version ProtocolVersion" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ProtocolVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtocolVersion As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Version ^ ProtocolVersion { Version ^ get(); void set(Version ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProtocolVersion : Version with get, set" Usage="System.Net.HttpWebRequest.ProtocolVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に対して使用する HTTP バージョンを取得または設定します。</summary>
        <value>要求に対して使用する HTTP バージョン。 既定では、 <see cref="F:System.Net.HttpVersion.Version11" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest> クラスは、HTTP のバージョン1.0 および1.1 のみをサポートしています。 <xref:System.Net.HttpWebRequest.ProtocolVersion%2A> を別のバージョンに設定すると、例外がスローされます。  
  
> [!NOTE]
>  現在の要求の HTTP バージョンを設定するには、<xref:System.Net.HttpVersion> クラスの <xref:System.Net.HttpVersion.Version10> および <xref:System.Net.HttpVersion.Version11> フィールドを使用します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.ProtocolVersion%2A> プロパティを設定します。  
  
 [!code-cpp[HttpWebRequest_ProtocolVersion#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_ProtocolVersion/CPP/httpwebrequest_protocolversion.cpp#1)]
 [!code-csharp[HttpWebRequest_ProtocolVersion#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_ProtocolVersion/CS/httpwebrequest_protocolversion.cs#1)]
 [!code-vb[HttpWebRequest_ProtocolVersion#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_ProtocolVersion/VB/httpwebrequest_protocolversion.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">HTTP バージョンが 1.0 または 1.1 以外の値に設定されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Proxy">
      <MemberSignature Language="C#" Value="public override System.Net.IWebProxy Proxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IWebProxy Proxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Proxy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Proxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::IWebProxy ^ Proxy { System::Net::IWebProxy ^ get(); void set(System::Net::IWebProxy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Proxy : System.Net.IWebProxy with get, set" Usage="System.Net.HttpWebRequest.Proxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に対して使用するプロキシ情報を取得または設定します。</summary>
        <value>要求に対するプロキシで使用する <see cref="T:System.Net.IWebProxy" /> オブジェクト。 既定値は <see cref="P:System.Net.GlobalProxySelection.Select" /> プロパティを呼び出して設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.Proxy%2A> プロパティは、インターネットリソースへの要求を処理するために使用する <xref:System.Net.WebProxy> オブジェクトを識別します。 プロキシを使用しないことを指定するには、<xref:System.Net.HttpWebRequest.Proxy%2A> プロパティを <xref:System.Net.GlobalProxySelection.GetEmptyWebProxy%2A?displayProperty=nameWithType> メソッドによって返されるプロキシインスタンスに設定します。  
  
 ローカルコンピューターまたはアプリケーション構成ファイルで、既定のプロキシを使用するように指定できます。 <xref:System.Net.HttpWebRequest.Proxy%2A> プロパティが指定されている場合、<xref:System.Net.HttpWebRequest.Proxy%2A> プロパティのプロキシ設定がローカルコンピューターまたはアプリケーション構成ファイルより優先され、<xref:System.Net.HttpWebRequest> インスタンスは指定されたプロキシ設定を使用します。 構成ファイルでプロキシが指定されておらず、<xref:System.Net.HttpWebRequest.Proxy%2A> プロパティが指定されていない場合、<xref:System.Net.HttpWebRequest> クラスは、ローカルコンピューター上の Internet Explorer から継承されたプロキシ設定を使用します。 Internet Explorer にプロキシ設定がない場合、要求はサーバーに直接送信されます。  
  
 <xref:System.Net.HttpWebRequest> クラスは、internet explorer から継承されたワイルドカード文字を使用してプロキシバイパスリストを解析します。バイパスリストは Internet Explorer によって直接解析されます。 たとえば、<xref:System.Net.HttpWebRequest> クラスは、Internet Explorer から "nt.\*" という正規表現として "nt *" のバイパスリストを解析します。 このため、"`http://nt.com`" の URL は、<xref:System.Net.HttpWebRequest> クラスおよび Internet Explorer を使用してプロキシをバイパスします。  
  
 <xref:System.Net.HttpWebRequest> クラスでは、ローカルプロキシバイパスがサポートされています。 クラスは、次のいずれかの条件が満たされた場合に、宛先がローカルであると見なされます。  
  
-   宛先には、フラット名が含まれています (URL にドットがありません)。  
  
-   宛先にループバックアドレス (<xref:System.Net.IPAddress.Loopback> または <xref:System.Net.IPAddress.IPv6Loopback>) が含まれているか、宛先にローカルコンピューターに割り当てられている <xref:System.Net.IPAddress> が含まれています。  
  
-   宛先のドメインサフィックスは、ローカルコンピューターのドメインサフィックス (<xref:System.Net.NetworkInformation.IPGlobalProperties.DomainName%2A>) と一致します。  
  
 <xref:System.Net.HttpWebRequest.GetRequestStream%2A>、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>、<xref:System.Net.HttpWebRequest.GetResponse%2A>、または <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドを呼び出すことによって要求が開始された後に <xref:System.Net.HttpWebRequest.Proxy%2A> プロパティを変更すると、<xref:System.InvalidOperationException>がスローされます。 プロキシ要素の詳細については、「 [\&lt; defaultProxy\&gt;」を参照してください。要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/defaultproxy-element-network-settings.md)。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.Proxy%2A> メソッドを使用して、要求のプロキシ情報を取得します。  
  
 [!code-cpp[Httpwebrequest_proxy#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Httpwebrequest_proxy/CPP/httpwebrequest_proxy.cpp#1)]
 [!code-csharp[Httpwebrequest_proxy#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Httpwebrequest_proxy/CS/httpwebrequest_proxy.cs#1)]
 [!code-vb[Httpwebrequest_proxy#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Httpwebrequest_proxy/VB/httpwebrequest_proxy.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Net.HttpWebRequest.Proxy" /> は <see langword="null" /> に設定されます。</exception>
        <exception cref="T:System.InvalidOperationException">要求が <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" />、または <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> の呼び出しにより既に開始されています。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元には、要求された操作に対するアクセス許可がありません。</exception>
        <permission cref="T:System.Net.WebPermission"><see cref="P:System.Net.HttpWebRequest.Proxy" /> プロパティを取得または設定します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/defaultproxy-element-network-settings.md">DefaultProxy 要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/network-programming/configuring-internet-applications.md">構成 (インターネット アプリケーションを)</related>
        <related type="Article" href="~/docs/framework/network-programming/proxy-configuration.md">プロキシの構成</related>
        <related type="Article" href="~/docs/framework/network-programming/automatic-proxy-detection.md">自動プロキシ検出</related>
      </Docs>
    </Member>
    <Member MemberName="ReadWriteTimeout">
      <MemberSignature Language="C#" Value="public int ReadWriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadWriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ReadWriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadWriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReadWriteTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReadWriteTimeout : int with get, set" Usage="System.Net.HttpWebRequest.ReadWriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ストリームへの書き込み時またはストリームからの読み取り時のタイムアウト (ミリ秒単位) を取得または設定します。</summary>
        <value>書き込みまたは読み取りがタイムアウトするまでのミリ秒数。既定値は30万ミリ秒 (5 分) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.ReadWriteTimeout%2A> プロパティは、<xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドによって返されるストリームに書き込むとき、または <xref:System.Net.HttpWebResponse.GetResponseStream%2A> メソッドによって返されるストリームから読み取るときに使用されます。  
  
 具体的には、<xref:System.Net.HttpWebRequest.ReadWriteTimeout%2A> プロパティは、<xref:System.IO.Stream.Read%2A> メソッドのタイムアウトを制御します。これは、<xref:System.Net.HttpWebResponse.GetResponseStream%2A> メソッドによって返されるストリームを読み取るために使用されます。また、<xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドによって返されるストリームへの書き込みに使用される <xref:System.IO.Stream.Write%2A> メソッドに対しても使用されます。  
  
 要求の完了を待機する時間を指定するには、<xref:System.Net.HttpWebRequest.Timeout%2A> プロパティを使用します。  
  
   
  
## Examples  
 <xref:System.Net.HttpWebRequest.ReadWriteTimeout%2A> プロパティを設定する方法を次のコード例に示します。  
  
 [!code-csharp[Classic HttpWebRequest Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpWebRequest Example/CS/source.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">要求が既に送信されています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">セット操作に指定された値は 0 以下であり、<see cref="F:System.Threading.Timeout.Infinite" /> ではありません。</exception>
        <altmember cref="P:System.Net.HttpWebRequest.Timeout" />
      </Docs>
    </Member>
    <Member MemberName="Referer">
      <MemberSignature Language="C#" Value="public string Referer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Referer" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Referer" />
      <MemberSignature Language="VB.NET" Value="Public Property Referer As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Referer { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Referer : string with get, set" Usage="System.Net.HttpWebRequest.Referer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Referer" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value><see langword="Referer" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> プロパティが `true`の場合、要求が別のサイトにリダイレクトされるときに、<xref:System.Net.HttpWebRequest.Referer%2A> プロパティが自動的に設定されます。  
  
 `Referer` HTTP ヘッダーをクリアするには、<xref:System.Net.HttpWebRequest.Referer%2A> プロパティを `null`に設定します。  
  
> [!NOTE]
>  このプロパティの値は <xref:System.Net.WebHeaderCollection> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.Referer%2A> プロパティを設定します。  
  
 [!code-cpp[HttpWebRequest_Referer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Referer/CPP/httpwebrequest_referer.cpp#1)]
 [!code-csharp[HttpWebRequest_Referer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Referer/CS/httpwebrequest_referer.cs#1)]
 [!code-vb[HttpWebRequest_Referer#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Referer/VB/httpwebrequest_referer.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestUri">
      <MemberSignature Language="C#" Value="public override Uri RequestUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri RequestUri" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.RequestUri" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property RequestUri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Uri ^ RequestUri { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RequestUri : Uri" Usage="System.Net.HttpWebRequest.RequestUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求の元の URI (Uniform Resource Identifier) を取得します。</summary>
        <value><see cref="T:System.Uri" /> メソッドに渡されたインターネット リソースの URI を格納している <see cref="M:System.Net.WebRequest.Create(System.String)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>への呼び出しによって <xref:System.Net.HttpWebRequest> に渡される <xref:System.Uri> オブジェクト。  
  
 リダイレクトヘッダーに従っても、<xref:System.Net.HttpWebRequest.RequestUri%2A> プロパティは変更されません。 要求に応答した実際の URI を取得するには、<xref:System.Net.HttpWebRequest.Address%2A> プロパティを調べます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest> オブジェクト `req` が、要求を満たすために別の場所にリダイレクトされたかどうかを確認し、要求がリダイレクトされた場合に `true` するように `hasChanged` 変数の値を設定します。それ以外の場合、`hasChanged` は `false`に設定されます。  
  
 [!code-cpp[Classic HttpWebRequest.RequestUri Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpWebRequest.RequestUri Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/CS/source.cs#1)]
 [!code-vb[Classic HttpWebRequest.RequestUri Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendChunked">
      <MemberSignature Language="C#" Value="public bool SendChunked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SendChunked" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.SendChunked" />
      <MemberSignature Language="VB.NET" Value="Public Property SendChunked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SendChunked { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SendChunked : bool with get, set" Usage="System.Net.HttpWebRequest.SendChunked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースへセグメント単位でデータを送信するかどうかを示す値を取得または設定します。</summary>
        <value>インターネット リソースへセグメント単位でデータを送信する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.SendChunked%2A> が `true`されている場合、要求はセグメント内のインターネットリソースにデータを送信します。 インターネットリソースはチャンクデータの受信をサポートしている必要があります。  
  
 <xref:System.Net.HttpWebRequest.GetRequestStream%2A>、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>、<xref:System.Net.HttpWebRequest.GetResponse%2A>、または <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドを呼び出すことによって要求が開始された後に <xref:System.Net.HttpWebRequest.SendChunked%2A> プロパティを変更すると、<xref:System.InvalidOperationException>がスローされます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.SendChunked%2A> プロパティを `true` に設定して、データをセグメント単位でインターネットリソースに送信できるようにします。  
  
 [!code-cpp[HttpWebRequest_SendChunked#2](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_SendChunked/CPP/httpwebrequest_sendchunked.cpp#2)]
 [!code-csharp[HttpWebRequest_SendChunked#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_SendChunked/CS/httpwebrequest_sendchunked.cs#2)]
 [!code-vb[HttpWebRequest_SendChunked#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_SendChunked/VB/httpwebrequest_sendchunked.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" />、または <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> メソッドを呼び出すことにより要求が開始されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ServerCertificateValidationCallback">
      <MemberSignature Language="C#" Value="public System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ServerCertificateValidationCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property ServerCertificateValidationCallback As RemoteCertificateValidationCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::RemoteCertificateValidationCallback ^ ServerCertificateValidationCallback { System::Net::Security::RemoteCertificateValidationCallback ^ get(); void set(System::Net::Security::RemoteCertificateValidationCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServerCertificateValidationCallback : System.Net.Security.RemoteCertificateValidationCallback with get, set" Usage="System.Net.HttpWebRequest.ServerCertificateValidationCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.RemoteCertificateValidationCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバー証明書を検証するコールバック関数を取得または設定します。</summary>
        <value>サーバー証明書を検証するコールバック関数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定値は、コールバック関数が設定されておらず、<xref:System.Net.HttpWebRequest.ServerCertificateValidationCallback%2A> プロパティが `null`であることです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServicePoint">
      <MemberSignature Language="C#" Value="public System.Net.ServicePoint ServicePoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ServicePoint ServicePoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ServicePoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServicePoint As ServicePoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::ServicePoint ^ ServicePoint { System::Net::ServicePoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServicePoint : System.Net.ServicePoint" Usage="System.Net.HttpWebRequest.ServicePoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ServicePoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に対して使用するサービス ポイントを取得します。</summary>
        <value>インターネット リソースへのネットワーク接続を表す <see cref="T:System.Net.ServicePoint" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要求がリダイレクトされた場合、<xref:System.Net.ServicePoint.Address%2A?displayProperty=nameWithType> プロパティは <xref:System.Net.HttpWebRequest.Address%2A?displayProperty=nameWithType> とは異なる場合があります。  
  
   
  
## Examples  
 [!code-cpp[System.Net.ServicePoint#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#6)]
 [!code-csharp[System.Net.ServicePoint#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#6)]
 [!code-vb[System.Net.ServicePoint#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsCookieContainer">
      <MemberSignature Language="C#" Value="public virtual bool SupportsCookieContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsCookieContainer" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.SupportsCookieContainer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SupportsCookieContainer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SupportsCookieContainer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsCookieContainer : bool" Usage="System.Net.HttpWebRequest.SupportsCookieContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求が <see cref="T:System.Net.CookieContainer" /> をサポートするかどうかを示す値を取得します。</summary>
        <value>要求が <see langword="true" /> をサポートする場合は <see cref="T:System.Net.CookieContainer" />、それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Obsolete("Serialization is obsoleted for this type.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Serialization is obsoleted for this type.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.Obsolete("Serialization is obsoleted for this type.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="streamingContext">このシリアル化の転送先を指定する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
        <summary><see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、対象オブジェクトをシリアル化するために必要なデータを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Serialization.SerializationInfo> に含まれるオブジェクトは、フォーマッタによって自動的に追跡およびシリアル化されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public override int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Timeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Timeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : int with get, set" Usage="System.Net.HttpWebRequest.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Net.HttpWebRequest.GetResponse" /> メソッドと <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドのタイムアウト値 (ミリ秒単位) を取得または設定します。</summary>
        <value>要求がタイムアウトするまでのミリ秒単位の待機時間。既定値は10万ミリ秒 (100 秒) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.Timeout%2A> は、<xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドを使用して行われた後続の同期要求が応答を待機する時間 (ミリ秒単位) と、<xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドがストリームを待機する時間です。 <xref:System.Net.HttpWebRequest.Timeout%2A> は、要求と応答全体に適用され、<xref:System.Net.HttpWebRequest.GetRequestStream%2A> と <xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドの呼び出しに対して個別には適用されません。 リソースがタイムアウト期間内に返されない場合、要求は <xref:System.Net.WebException.Status%2A> プロパティが <xref:System.Net.WebExceptionStatus.Timeout?displayProperty=nameWithType>に設定された <xref:System.Net.WebException> をスローします。  
  
 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> または <xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドが呼び出される前に、<xref:System.Net.HttpWebRequest.Timeout%2A> プロパティを設定する必要があります。 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> または <xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドを呼び出した後に <xref:System.Net.HttpWebRequest.Timeout%2A> プロパティを変更しても効果はありません  
  
 <xref:System.Net.HttpWebRequest.Timeout%2A> プロパティは、<xref:System.Net.HttpWebRequest.BeginGetResponse%2A> または <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> メソッドを使用して行われた非同期要求には影響しません。  
  
> [!CAUTION]
>  非同期要求の場合、クライアントアプリケーションは独自のタイムアウト機構を実装します。 <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドの例を参照してください。  
  
 読み取りまたは書き込み操作がタイムアウトになるまでの待機時間を指定するには、<xref:System.Net.HttpWebRequest.ReadWriteTimeout%2A> プロパティを使用します。  
  
 ドメインネームシステム (DNS) のクエリが返されるか、タイムアウトになるまでに最大15秒かかることがあります。解決が必要なホスト名が要求に含まれており、<xref:System.Net.FileWebRequest.Timeout%2A> を15秒未満に設定した場合は、要求のタイムアウトを示すために <xref:System.Net.WebException> がスローされる前に15秒以上かかることがあります。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest> オブジェクトの <xref:System.Net.HttpWebRequest.Timeout%2A> プロパティを設定します。  
  
 [!code-cpp[HttpWebRequest_Timeout#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Timeout/CPP/httpwebrequest_timeout.cpp#1)]
 [!code-csharp[HttpWebRequest_Timeout#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Timeout/CS/httpwebrequest_timeout.cs#1)]
 [!code-vb[HttpWebRequest_Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Timeout/VB/httpwebrequest_timeout.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定された値が 0 未満で、<see cref="F:System.Threading.Timeout.Infinite" /> ではありません。</exception>
        <altmember cref="P:System.Net.HttpWebRequest.ReadWriteTimeout" />
      </Docs>
    </Member>
    <Member MemberName="TransferEncoding">
      <MemberSignature Language="C#" Value="public string TransferEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransferEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.TransferEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property TransferEncoding As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TransferEncoding { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransferEncoding : string with get, set" Usage="System.Net.HttpWebRequest.TransferEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Transfer-encoding" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value><see langword="Transfer-encoding" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.TransferEncoding%2A> プロパティを設定する前に、まず <xref:System.Net.HttpWebRequest.SendChunked%2A> プロパティを `true`に設定する必要があります。 `null` に設定して <xref:System.Net.HttpWebRequest.TransferEncoding%2A> をクリアすると、<xref:System.Net.HttpWebRequest.SendChunked%2A>の値には影響しません。  
  
 <xref:System.Net.HttpWebRequest.TransferEncoding%2A> プロパティに割り当てられた値によって、既存の内容が置き換えられます。  
  
> [!NOTE]
>  このプロパティの値は <xref:System.Net.WebHeaderCollection> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> は、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> である場合に設定されます。</exception>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> は "Chunked" 値に設定されます。</exception>
      </Docs>
    </Member>
    <Member MemberName="UnsafeAuthenticatedConnectionSharing">
      <MemberSignature Language="C#" Value="public bool UnsafeAuthenticatedConnectionSharing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnsafeAuthenticatedConnectionSharing" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing" />
      <MemberSignature Language="VB.NET" Value="Public Property UnsafeAuthenticatedConnectionSharing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnsafeAuthenticatedConnectionSharing { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UnsafeAuthenticatedConnectionSharing : bool with get, set" Usage="System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>高速 NTLM 認証された接続共有を許可するかどうかを示す値を取得または設定します。</summary>
        <value>認証された接続を確立し続ける場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの既定値は `false`です。これにより、要求の完了後に現在の接続が閉じられます。 アプリケーションは、新しい要求を発行するたびに認証シーケンスを通過する必要があります。  
  
 このプロパティが `true`に設定されている場合、認証が実行された後も、応答を取得するために使用される接続は開いたままになります。 この場合、このプロパティが `true` に設定されている他の要求では、再認証を行わずに接続を使用することができます。 言い換えると、接続がユーザー A に対して認証されている場合、ユーザー B は接続を再利用する可能性があります。ユーザー B の要求は、ユーザー A の資格情報に基づいて満たされます。  
  
> [!CAUTION]
>  アプリケーションが認証されずに接続を使用する可能性があるため、このプロパティを `true`に設定する場合は、システムに管理上の脆弱性がないことを確認する必要があります。 アプリケーションが複数のユーザーに対して要求を送信し、リソースを保護するために認証に依存している場合は、次に示すように接続グループを使用しない限り、このプロパティを `true` に設定しないでください。  
  
 パフォーマンスの問題が発生し、アプリケーションが統合 Windows 認証を使用する Web サーバーで実行されている場合は、このメカニズムを有効にすることをお勧めします。  
  
 この設定を有効にすると、システムがセキュリティ上のリスクになります。 <xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A> プロパティをに設定する場合は `true` 次の予防措置を講じてください。  
  
-   <xref:System.Net.HttpWebRequest.ConnectionGroupName%2A> プロパティを使用して、さまざまなユーザーの接続を管理します。 これにより、認証されていないアプリケーションによって接続が使用される可能性を回避できます。 たとえば、ユーザー A には、ユーザー B とは異なる一意の接続グループ名が必要です。これにより、ユーザーアカウントごとに分離レイヤーが提供されます。  
  
-   保護された環境でアプリケーションを実行して、接続の悪用を防ぐことができます。  
  
 バックエンドサーバーを制御する場合は、代替手段として、認証の永続化を無効にすることを検討してください。 これにより、パフォーマンスが低下しますが、安全性は向上します。 詳細については、「 [Authpersistence](https://docs.microsoft.com/previous-versions/iis/6.0-sdk/ms525244(v=vs.90))」を参照してください。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest.PreAuthenticate%2A> と <xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A> の両方が `true`に設定されている場合、各要求は安全ではないプールからの接続を使用して送信されますが、Authorization ヘッダーが使用されます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.WebPermission">このプロパティを設定するには、無制限の Web アクセス許可が必要です。</permission>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public override bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.UseDefaultCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property UseDefaultCredentials As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool UseDefaultCredentials { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDefaultCredentials : bool with get, set" Usage="System.Net.HttpWebRequest.UseDefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>既定の資格情報が要求と共に送信されるかどうかを制御する <see cref="T:System.Boolean" /> 値を取得または設定します。</summary>
        <value>既定の資格情報を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この <xref:System.Net.HttpWebRequest> オブジェクトによって要求された場合、サーバーによって要求された場合は、現在ログオンしているユーザーの資格情報を使用して認証されるようにするには、このプロパティを `true` に設定します。 クライアントアプリケーションの場合、これはほとんどのシナリオで望ましい動作です。 ASP.NET アプリケーションなどの中間層アプリケーションでは、このプロパティを使用するのではなく、通常、要求の発行元のクライアントの資格情報に <xref:System.Net.HttpWebRequest.Credentials%2A> プロパティを設定します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">要求の送信後に、このプロパティを設定しようとしました。</exception>
      </Docs>
    </Member>
    <Member MemberName="UserAgent">
      <MemberSignature Language="C#" Value="public string UserAgent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserAgent" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.UserAgent" />
      <MemberSignature Language="VB.NET" Value="Public Property UserAgent As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserAgent { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UserAgent : string with get, set" Usage="System.Net.HttpWebRequest.UserAgent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="User-agent" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value><see langword="User-agent" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。  
  
 <block subset="none" type="note"><para>  
 このプロパティの値は <see cref="T:System.Net.WebHeaderCollection" /> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.UserAgent%2A> プロパティを設定します。  
  
 [!code-cpp[HttpWebRequest_UserAgent#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_UserAgent/CPP/httpwebrequest_useragent.cpp#1)]
 [!code-csharp[HttpWebRequest_UserAgent#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_UserAgent/CS/httpwebrequest_useragent.cs#1)]
 [!code-vb[HttpWebRequest_UserAgent#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_UserAgent/VB/httpwebrequest_useragent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
