<Type Name="HttpListener" FullName="System.Net.HttpListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="63ecf9b9484234646867aa81c5955449f14127c3" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73338920" /></Metadata><TypeSignature Language="C#" Value="public sealed class HttpListener : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpListener extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpListener" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListener&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListener sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type HttpListener = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.HttpListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="dac9e-101">単純で、プログラムによって制御できる HTTP プロトコル リスナーを提供します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-101">Provides a simple, programmatically controlled HTTP protocol listener.</span></span> <span data-ttu-id="dac9e-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="dac9e-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-103"><xref:System.Net.HttpListener> クラスを使用すると、HTTP 要求に応答する単純な HTTP プロトコルリスナーを作成できます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-103">Using the <xref:System.Net.HttpListener> class, you can create a simple HTTP protocol listener that responds to HTTP requests.</span></span> <span data-ttu-id="dac9e-104">リスナーは <xref:System.Net.HttpListener> オブジェクトの有効期間にわたってアクティブで、アプリケーション内でそのアクセス許可を使用して実行されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-104">The listener is active for the lifetime of the <xref:System.Net.HttpListener> object and runs within your application with its permissions.</span></span>
   
 <span data-ttu-id="dac9e-105"><xref:System.Net.HttpListener>を使用するには、<xref:System.Net.HttpListener> コンストラクターを使用してクラスの新しいインスタンスを作成し、<xref:System.Net.HttpListener.Prefixes%2A> プロパティを使用して、<xref:System.Net.HttpListener> が処理する Uniform Resource Identifier (URI) プレフィックスを指定する文字列を格納しているコレクションへのアクセスを取得します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-105">To use <xref:System.Net.HttpListener>, create a new instance of the class using the <xref:System.Net.HttpListener> constructor and use the <xref:System.Net.HttpListener.Prefixes%2A> property to gain access to the collection that holds the strings that specify which Uniform Resource Identifier (URI) prefixes the <xref:System.Net.HttpListener> should process.</span></span>
  
 <span data-ttu-id="dac9e-106">URI プレフィックス文字列は、スキーム (http または https)、ホスト、オプションのポート、および省略可能なパスで構成されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-106">A URI prefix string is composed of a scheme (http or https), a host, an optional port, and an optional path.</span></span> <span data-ttu-id="dac9e-107">完全なプレフィックス文字列の例としては、 *http://www.contoso.com:8080/customerData/* があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-107">An example of a complete prefix string is *http://www.contoso.com:8080/customerData/*.</span></span> <span data-ttu-id="dac9e-108">プレフィックスはスラッシュ ("/") で終わる必要があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-108">Prefixes must end in a forward slash ("/").</span></span> <span data-ttu-id="dac9e-109">要求された URI に最も近いプレフィックスを持つ <xref:System.Net.HttpListener> オブジェクトは、要求に応答します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-109">The <xref:System.Net.HttpListener> object with the prefix that most closely matches a requested URI responds to the request.</span></span> <span data-ttu-id="dac9e-110">複数の <xref:System.Net.HttpListener> オブジェクトで同じプレフィックスを追加することはできません。<xref:System.ComponentModel.Win32Exception> 例外は、<xref:System.Net.HttpListener> が既に使用されているプレフィックスを追加した場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-110">Multiple <xref:System.Net.HttpListener> objects cannot add the same prefix; a <xref:System.ComponentModel.Win32Exception> exception is thrown if a <xref:System.Net.HttpListener> adds a prefix that is already in use.</span></span>
  
 <span data-ttu-id="dac9e-111">ポートを指定すると、host 要素を "\*" に置き換えることで、要求された URI が他のプレフィックスと一致しない場合に、<xref:System.Net.HttpListener> がポートに送信された要求を受け入れることを示すことができます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-111">When a port is specified, the host element can be replaced with "\*" to indicate that the <xref:System.Net.HttpListener> accepts requests sent to the port if the requested URI does not match any other prefix.</span></span> <span data-ttu-id="dac9e-112">たとえば、要求された URI が <xref:System.Net.HttpListener>によって処理されない場合に、ポート8080に送信されるすべての要求を受信するために、プレフィックスは*http://\*: 8080/* です。</span><span class="sxs-lookup"><span data-stu-id="dac9e-112">For example, to receive all requests sent to port 8080 when the requested URI is not handled by any <xref:System.Net.HttpListener>, the prefix is *http://\*:8080/*.</span></span> <span data-ttu-id="dac9e-113">同様に、<xref:System.Net.HttpListener> がポートに送信されるすべての要求を受け入れるように指定するには、host 要素を "+" 文字に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-113">Similarly, to specify that the <xref:System.Net.HttpListener> accepts all requests sent to a port, replace the host element with the "+" character.</span></span> <span data-ttu-id="dac9e-114">たとえば、*https://+:8080* です。</span><span class="sxs-lookup"><span data-stu-id="dac9e-114">For example, *https://+:8080*.</span></span> <span data-ttu-id="dac9e-115">パスを含むプレフィックスには、"\*" と "+" の文字を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-115">The "\*" and "+" characters can be present in prefixes that include paths.</span></span>
  
 <span data-ttu-id="dac9e-116">.NET Core 2.0 または Windows 10 の .NET Framework 4.6 以降では、<xref:System.Net.HttpListener> オブジェクトによって管理される URI プレフィックスでワイルドカードサブドメインがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-116">Starting with .NET Core 2.0 or .NET Framework 4.6 on Windows 10, wildcard subdomains are supported in URI prefixes that are managed by an <xref:System.Net.HttpListener> object.</span></span> <span data-ttu-id="dac9e-117">ワイルドカードサブドメインを指定するには、URI プレフィックスのホスト名の一部として "\*" 文字を使用します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-117">To specify a wildcard subdomain, use the "\*" character as part of the hostname in a URI prefix.</span></span> <span data-ttu-id="dac9e-118">たとえば、 *http://\*. foo.com/* のようになります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-118">For example, *http://\*.foo.com/*.</span></span> <span data-ttu-id="dac9e-119">これを引数として <xref:System.Net.HttpListenerPrefixCollection.Add%2A> メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-119">Pass this as the argument to the <xref:System.Net.HttpListenerPrefixCollection.Add%2A> method.</span></span> <span data-ttu-id="dac9e-120">これは、.NET Core 2.0 または Windows 10 の .NET Framework 4.6 の場合に機能します。以前のバージョンでは、これによって <xref:System.Net.HttpListenerException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-120">This works as of .NET Core 2.0 or .NET Framework 4.6 on Windows 10; in earlier versions, this generates an <xref:System.Net.HttpListenerException>.</span></span>

 > [!WARNING]
 > <span data-ttu-id="dac9e-121">最上位レベルのワイルドカードバインド (*http://\*: 8080/* および*http://+:8080*) は使用でき**ません**。</span><span class="sxs-lookup"><span data-stu-id="dac9e-121">Top-level wildcard bindings (*http://\*:8080/* and *http://+:8080*) should **not** be used.</span></span> <span data-ttu-id="dac9e-122">最上位のワイルドカードのバインドは、セキュリティの脆弱性に対してアプリを切り開くことができます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-122">Top-level wildcard bindings can open up your app to security vulnerabilities.</span></span> <span data-ttu-id="dac9e-123">これは、強力と脆弱の両方のワイルドカードに適用されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-123">This applies to both strong and weak wildcards.</span></span> <span data-ttu-id="dac9e-124">ワイルドカードではなく、明示的なホスト名を使用します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-124">Use explicit host names rather than wildcards.</span></span> <span data-ttu-id="dac9e-125">全体の親ドメインを制御する場合、サブドメイン ワイルドカード バインド (たとえば、`*.mysub.com`) にこのセキュリティ リスクはありません (脆弱である `*.com` とは対照的)。</span><span class="sxs-lookup"><span data-stu-id="dac9e-125">Subdomain wildcard binding (for example, `*.mysub.com`) doesn't have this security risk if you control the entire parent domain (as opposed to `*.com`, which is vulnerable).</span></span> <span data-ttu-id="dac9e-126">詳細については、[rfc7230 セクション-5.4](https://tools.ietf.org/html/rfc7230#section-5.4) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-126">See [rfc7230 section-5.4](https://tools.ietf.org/html/rfc7230#section-5.4) for more information.</span></span>
  
 <span data-ttu-id="dac9e-127">クライアントからの要求のリッスンを開始するには、URI プレフィックスをコレクションに追加し、<xref:System.Net.HttpListener.Start%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-127">To begin listening for requests from clients, add the URI prefixes to the collection and call the <xref:System.Net.HttpListener.Start%2A> method.</span></span> <span data-ttu-id="dac9e-128"><xref:System.Net.HttpListener> には、クライアント要求を処理するための同期モデルと非同期モデルの両方が用意されています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-128"><xref:System.Net.HttpListener> offers both synchronous and asynchronous models for processing client requests.</span></span> <span data-ttu-id="dac9e-129">要求とそれに関連付けられた応答には、<xref:System.Net.HttpListener.GetContext%2A> メソッドによって返された <xref:System.Net.HttpListenerContext> オブジェクト、またはそれに対応する非同期の <xref:System.Net.HttpListener.BeginGetContext%2A> および <xref:System.Net.HttpListener.EndGetContext%2A> メソッドを使用してアクセスされます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-129">Requests and their associated responses are accessed using the <xref:System.Net.HttpListenerContext> object returned by the <xref:System.Net.HttpListener.GetContext%2A> method or its asynchronous counterparts, the <xref:System.Net.HttpListener.BeginGetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods.</span></span>
  
 <span data-ttu-id="dac9e-130">同期モデルは、クライアント要求を待機している間にアプリケーションがブロックする必要があり、一度に1つの要求のみを処理する場合に適しています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-130">The synchronous model is appropriate if your application should block while waiting for a client request and if you want to process only one request at a time.</span></span> <span data-ttu-id="dac9e-131">同期モデルを使用して、クライアントが要求を送信するまで待機する <xref:System.Net.HttpListener.GetContext%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-131">Using the synchronous model, call the <xref:System.Net.HttpListener.GetContext%2A> method, which waits for a client to send a request.</span></span> <span data-ttu-id="dac9e-132">メソッドは、オブジェクトが発生したときに処理する <xref:System.Net.HttpListenerContext> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-132">The method returns an <xref:System.Net.HttpListenerContext> object to you for processing when one occurs.</span></span>
  
 <span data-ttu-id="dac9e-133">より複雑な非同期モデルでは、要求を待機している間、アプリケーションはブロックされず、各要求は独自の実行スレッドで処理されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-133">In the more complex asynchronous model, your application does not block while waiting for requests and each request is processed in its own execution thread.</span></span> <span data-ttu-id="dac9e-134"><xref:System.Net.HttpListener.BeginGetContext%2A> メソッドを使用して、受信要求ごとに呼び出されるアプリケーション定義のメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-134">Use the <xref:System.Net.HttpListener.BeginGetContext%2A> method to specify an application-defined method to be called for each incoming request.</span></span> <span data-ttu-id="dac9e-135">そのメソッド内で、<xref:System.Net.HttpListener.EndGetContext%2A> メソッドを呼び出して要求を取得し、処理して、応答します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-135">Within that method, call the <xref:System.Net.HttpListener.EndGetContext%2A> method to obtain the request, process it, and respond.</span></span>
  
 <span data-ttu-id="dac9e-136">どちらのモデルでも、受信要求は <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=nameWithType> プロパティを使用してアクセスされ、<xref:System.Net.HttpListenerRequest> オブジェクトによって表されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-136">In either model, incoming requests are accessed using the <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=nameWithType> property and are represented by <xref:System.Net.HttpListenerRequest> objects.</span></span> <span data-ttu-id="dac9e-137">同様に、応答は <xref:System.Net.HttpListenerContext.Response%2A?displayProperty=nameWithType> プロパティを使用してアクセスされ、<xref:System.Net.HttpListenerResponse> オブジェクトによって表されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-137">Similarly, responses are accessed using the <xref:System.Net.HttpListenerContext.Response%2A?displayProperty=nameWithType> property and are represented by <xref:System.Net.HttpListenerResponse> objects.</span></span> <span data-ttu-id="dac9e-138">これらのオブジェクトは、<xref:System.Net.HttpWebRequest> オブジェクトと <xref:System.Net.HttpWebResponse> オブジェクトと一部の機能を共有しますが、後者のオブジェクトは、サーバーではなくクライアントを実装するので、<xref:System.Net.HttpListener> と組み合わせて使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="dac9e-138">These objects share some functionality with the <xref:System.Net.HttpWebRequest> and <xref:System.Net.HttpWebResponse> objects, but the latter objects cannot be used in conjunction with <xref:System.Net.HttpListener> because they implement client, not server, behaviors.</span></span>
  
 <span data-ttu-id="dac9e-139"><xref:System.Net.HttpListener> では、クライアント認証が必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-139">An <xref:System.Net.HttpListener> can require client authentication.</span></span> <span data-ttu-id="dac9e-140">認証に使用する特定のスキームを指定することも、使用するスキームを決定するデリゲートを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-140">You can either specify a particular scheme to use for authentication, or you can specify a delegate that determines the scheme to use.</span></span> <span data-ttu-id="dac9e-141">クライアントの id に関する情報を取得するには、何らかの形式の認証が必要です。</span><span class="sxs-lookup"><span data-stu-id="dac9e-141">You must require some form of authentication to obtain information about the client's identity.</span></span> <span data-ttu-id="dac9e-142">詳細については、<xref:System.Net.HttpListenerContext.User%2A>、<xref:System.Net.HttpListener.AuthenticationSchemes%2A>、および <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> の各プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-142">For additional information, see the <xref:System.Net.HttpListenerContext.User%2A>, <xref:System.Net.HttpListener.AuthenticationSchemes%2A>, and <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> properties.</span></span>
  
> [!NOTE]
> <span data-ttu-id="dac9e-143">Https を使用して <xref:System.Net.HttpListener> を作成する場合は、そのリスナーのサーバー証明書を選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-143">If you create an <xref:System.Net.HttpListener> using https, you must select a Server Certificate for that listener.</span></span> <span data-ttu-id="dac9e-144">それ以外の場合、この <xref:System.Net.HttpListener> の <xref:System.Net.HttpWebRequest> クエリは、接続が予期せず終了して失敗します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-144">Otherwise, an <xref:System.Net.HttpWebRequest> query of this <xref:System.Net.HttpListener> will fail with an unexpected close of the connection.</span></span>
  
> [!NOTE]
> <span data-ttu-id="dac9e-145">ネットワークシェル (netsh.exe) を使用して、サーバー証明書とその他のリスナーオプションを構成できます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-145">You can configure Server Certificates and other listener options by using Network Shell (netsh.exe).</span></span> <span data-ttu-id="dac9e-146">詳細については、「[ネットワークシェル (Netsh)](/windows-server/networking/technologies/netsh/netsh) 」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-146">See [Network Shell (Netsh)](/windows-server/networking/technologies/netsh/netsh) for more details.</span></span> <span data-ttu-id="dac9e-147">実行可能ファイルは、Windows Server 2008 および Windows Vista に付属しています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-147">The executable began shipping with Windows Server 2008 and Windows Vista.</span></span>
  
> [!NOTE]
> <span data-ttu-id="dac9e-148"><xref:System.Net.HttpListener>に対して複数の認証方式を指定した場合、リスナーは、`Negotiate`、`NTLM`、`Digest`、および `Basic`の順序でクライアントをチャレンジします。</span><span class="sxs-lookup"><span data-stu-id="dac9e-148">If you specify multiple authentication schemes for the <xref:System.Net.HttpListener>, the listener will challenge clients in the following order: `Negotiate`, `NTLM`, `Digest`, and then `Basic`.</span></span>
  
   
  
## Examples
 <span data-ttu-id="dac9e-149">次のコード例は、<xref:System.Net.HttpListener>の使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-149">The following code example demonstrates using a <xref:System.Net.HttpListener>.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
 [!code-vb[Net_Listener_Basic#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/8bf0b428-5a21-4299-8d6e-bf8251fd978a"><span data-ttu-id="dac9e-150">バージョン 3.5 SP1 での HTTPWebRequest の NTLM 認証に対する変更</span><span class="sxs-lookup"><span data-stu-id="dac9e-150">Changes to NTLM authentication for HTTPWebRequest in Version 3.5 SP1</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dac9e-151"><see cref="T:System.Net.HttpListener" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-151">Initializes a new instance of the <see cref="T:System.Net.HttpListener" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-152">このコンストラクターによって返されるインスタンスを使用する前に、<xref:System.Net.HttpListener.Start%2A> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-152">Before using the instance returned by this constructor, you must invoke its <xref:System.Net.HttpListener.Start%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dac9e-153">次のコード例では、<xref:System.Net.HttpListener> コンストラクターを使用して、新しい <xref:System.Net.HttpListener> オブジェクトを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-153">The following code example demonstrates using the <xref:System.Net.HttpListener> constructor to create a new <xref:System.Net.HttpListener> object.</span></span> <span data-ttu-id="dac9e-154">完全な例については、<xref:System.Net.HttpListener> クラスに関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-154">For the complete example, see the <xref:System.Net.HttpListener> class topic.</span></span>  
  
 [!code-csharp[Net_listener_Basic#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#9)]  
 [!code-vb[Net_Listener_Basic#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="dac9e-155">このクラスは、現在のオペレーティング システムでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="dac9e-155">This class cannot be used on the current operating system.</span></span> <span data-ttu-id="dac9e-156">このクラスのインスタンスを使用するには、Windows Server 2003 または Windows XP SP2 以降が必要です。</span><span class="sxs-lookup"><span data-stu-id="dac9e-156">Windows Server 2003 or Windows XP SP2 is required to use instances of this class.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="dac9e-157">メモ: このメンバーは、アプリケーションでネットワークトレースを有効にしたときにトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-157">Note: This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="dac9e-158">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-158">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="httpListener.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dac9e-159">すぐに <see cref="T:System.Net.HttpListener" /> オブジェクトをシャットダウンし、現在キューに置かれているすべての要求を破棄します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-159">Shuts down the <see cref="T:System.Net.HttpListener" /> object immediately, discarding all currently queued requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-160">このメソッドは、このリスナーによって保持されているすべてのリソースを破棄します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-160">This method disposes of all resources held by this listener.</span></span> <span data-ttu-id="dac9e-161">保留中の要求は完了できません。</span><span class="sxs-lookup"><span data-stu-id="dac9e-161">Any pending requests are unable to complete.</span></span>  
  
 <span data-ttu-id="dac9e-162">このメソッドを呼び出した後、この <xref:System.Net.HttpListener>を使用しようとすると <xref:System.ObjectDisposedException> が表示されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-162">After calling this method, you will receive an <xref:System.ObjectDisposedException> if you attempt to use this <xref:System.Net.HttpListener>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dac9e-163">次のコード例は、このメソッドの呼び出しを示しています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-163">The following code example demonstrates calling this method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#11)]  
 [!code-vb[Net_Listener_Basic#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="dac9e-164">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-164">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="dac9e-165">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-165">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationSchemes">
      <MemberSignature Language="C#" Value="public System.Net.AuthenticationSchemes AuthenticationSchemes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.AuthenticationSchemes AuthenticationSchemes" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.AuthenticationSchemes" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationSchemes As AuthenticationSchemes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::AuthenticationSchemes AuthenticationSchemes { System::Net::AuthenticationSchemes get(); void set(System::Net::AuthenticationSchemes value); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationSchemes : System.Net.AuthenticationSchemes with get, set" Usage="System.Net.HttpListener.AuthenticationSchemes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.AuthenticationSchemes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dac9e-166">クライアントの認証に使用する方式を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-166">Gets or sets the scheme used to authenticate clients.</span></span></summary>
        <value><span data-ttu-id="dac9e-167">クライアントの認証方法を示す <see cref="T:System.Net.AuthenticationSchemes" /> 列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="dac9e-167">A bitwise combination of <see cref="T:System.Net.AuthenticationSchemes" /> enumeration values that indicates how clients are to be authenticated.</span></span> <span data-ttu-id="dac9e-168">既定値は <see cref="F:System.Net.AuthenticationSchemes.Anonymous" /> です。</span><span class="sxs-lookup"><span data-stu-id="dac9e-168">The default value is <see cref="F:System.Net.AuthenticationSchemes.Anonymous" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-169"><xref:System.Net.HttpListener> は、指定されたスキームを使用してすべての受信要求を認証します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-169">The <xref:System.Net.HttpListener> uses the specified scheme to authenticate all incoming requests.</span></span> <span data-ttu-id="dac9e-170"><xref:System.Net.HttpListener.GetContext%2A> メソッドと <xref:System.Net.HttpListener.EndGetContext%2A> メソッドは、<xref:System.Net.HttpListener> が要求を正常に認証した場合にのみ、受信クライアント要求を返します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-170">The <xref:System.Net.HttpListener.GetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods return an incoming client request only if the <xref:System.Net.HttpListener> successfully authenticates the request.</span></span>  
  
 <span data-ttu-id="dac9e-171"><xref:System.Net.HttpListenerContext.User%2A?displayProperty=nameWithType> プロパティを使用して、正常に認証されたクライアントの id を照会できます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-171">You can interrogate the identity of a successfully authenticated client by using the <xref:System.Net.HttpListenerContext.User%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="dac9e-172"><xref:System.Net.HttpListener> オブジェクトが受信する要求の特性 (たとえば、要求の <xref:System.Net.HttpListenerRequest.Url%2A> や <xref:System.Net.HttpListenerRequest.UserHostName%2A> プロパティ) に基づいて異なる認証メカニズムを使用する場合は、認証スキームを選択するメソッドを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-172">If you want an <xref:System.Net.HttpListener> object to use different authentication mechanisms based on characteristics of the requests it receives (for example, the request's <xref:System.Net.HttpListenerRequest.Url%2A> or <xref:System.Net.HttpListenerRequest.UserHostName%2A> property), you must implement a method that chooses the authentication scheme.</span></span> <span data-ttu-id="dac9e-173">この方法の手順については、<xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> プロパティに関するドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-173">For instructions about how to do this, see the <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> property documentation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dac9e-174">このプロパティを [ダイジェスト、NTLM、またはネゴシエートを有効にする] に設定するには、<xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal><xref:System.Security.Permissions.SecurityPermission>が必要です。</span><span class="sxs-lookup"><span data-stu-id="dac9e-174">To set this property to enable Digest, NTLM, or Negotiate requires the <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dac9e-175">次のコード例は、<xref:System.Net.HttpListener.AuthenticationSchemes%2A> プロパティを使用して認証スキームを指定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-175">The following code example demonstrates using the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> property to specify an authentication scheme.</span></span>  
  
 [!code-csharp[Net_listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
 [!code-vb[Net_Listener_Basic#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="dac9e-176">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-176">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationSchemeSelectorDelegate">
      <MemberSignature Language="C#" Value="public System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationSchemeSelectorDelegate As AuthenticationSchemeSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::AuthenticationSchemeSelector ^ AuthenticationSchemeSelectorDelegate { System::Net::AuthenticationSchemeSelector ^ get(); void set(System::Net::AuthenticationSchemeSelector ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationSchemeSelectorDelegate : System.Net.AuthenticationSchemeSelector with get, set" Usage="System.Net.HttpListener.AuthenticationSchemeSelectorDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.AuthenticationSchemeSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dac9e-177">クライアントの認証に使用するプロトコルを確認するために呼び出されるデリゲートを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-177">Gets or sets the delegate called to determine the protocol used to authenticate clients.</span></span></summary>
        <value><span data-ttu-id="dac9e-178">認証プロトコルの選択に使用されるメソッドを呼び出す <see cref="T:System.Net.AuthenticationSchemeSelector" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="dac9e-178">An <see cref="T:System.Net.AuthenticationSchemeSelector" /> delegate that invokes the method used to select an authentication protocol.</span></span> <span data-ttu-id="dac9e-179">既定値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="dac9e-179">The default value is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="dac9e-180"><xref:System.Net.HttpListener>の特定のインスタンスによって処理されるすべての要求に対して同じ認証プロトコルを使用する場合は、このプロパティを設定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="dac9e-180">If you want the same authentication protocol to be used for all requests handled by a particular instance of <xref:System.Net.HttpListener>, you do not need to set this property.</span></span> <span data-ttu-id="dac9e-181">すべてのクライアント要求に使用するプロトコルを指定するには、<xref:System.Net.HttpListener.AuthenticationSchemes%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-181">To specify a protocol to be used for all client requests, use the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> property.</span></span>  
  
 <span data-ttu-id="dac9e-182">クライアントがヘッダーに認証情報を指定していない場合、<xref:System.Net.HttpListener> は、認証されていない受信要求ごとに指定されたデリゲートを呼び出して、クライアントの認証に使用するプロトコルがあるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-182">If the client has not specified authentication information in its headers, the <xref:System.Net.HttpListener> calls the specified delegate for each unauthenticated incoming request to determine which, if any, protocol to use to authenticate the client.</span></span> <span data-ttu-id="dac9e-183"><xref:System.Net.HttpListener.GetContext%2A> メソッドと <xref:System.Net.HttpListener.EndGetContext%2A> メソッドは、<xref:System.Net.HttpListener> が要求を正常に認証した場合にのみ、受信要求を返します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-183">The <xref:System.Net.HttpListener.GetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods return an incoming request only if the <xref:System.Net.HttpListener> successfully authenticated the request.</span></span> <span data-ttu-id="dac9e-184">要求を認証できない場合、<xref:System.Net.HttpListener> は401応答を自動的に送り返します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-184">If a request cannot be authenticated, the <xref:System.Net.HttpListener> automatically sends back a 401 response.</span></span> <span data-ttu-id="dac9e-185">正常に認証されたクライアントの id を取得するには、<xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=nameWithType> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-185">You can get the identity of a successfully authenticated client using the <xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="dac9e-186">認証プロトコルの選択をアプリケーション固有の方法に委任する機能は、受信した要求の特性に応じて、<xref:System.Net.HttpListener> のインスタンスで異なる認証プロトコルを使用する必要がある場合に便利です (たとえば、要求の <xref:System.Net.HttpListenerRequest.Url%2A> または <xref:System.Net.HttpListenerRequest.UserHostAddress%2A> プロパティ)。</span><span class="sxs-lookup"><span data-stu-id="dac9e-186">The ability to delegate the choice of authentication protocol to an application-specific method is useful if you want an instance of <xref:System.Net.HttpListener> to use different authentication protocols depending on the characteristics of the requests it receives (for example, the request's <xref:System.Net.HttpListenerRequest.Url%2A> or <xref:System.Net.HttpListenerRequest.UserHostAddress%2A> property).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dac9e-187">このプロパティを [ダイジェスト、NTLM、またはネゴシエートを有効にする] に設定するには、<xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal><xref:System.Security.Permissions.SecurityPermission>が必要です。</span><span class="sxs-lookup"><span data-stu-id="dac9e-187">To set this property to enable Digest, NTLM, or Negotiate requires the <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dac9e-188">次のコード例では、このプロパティの値を設定します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-188">The following code example sets the value of this property.</span></span>  
  
 [!code-csharp[NclListener#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#2)]
 [!code-vb[NclListener#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#2)]  
  
 <span data-ttu-id="dac9e-189">次のコード例では、<xref:System.Net.AuthenticationSchemeSelector> デリゲートによって呼び出されるメソッドの実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-189">The following code example provides an implementation of a method invoked by an <xref:System.Net.AuthenticationSchemeSelector> delegate.</span></span>  
  
 [!code-csharp[NclListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#1)]
 [!code-vb[NclListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="dac9e-190">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-190">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginGetContext">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginGetContext (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginGetContext(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginGetContext (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginGetContext(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginGetContext : AsyncCallback * obj -&gt; IAsyncResult" Usage="httpListener.BeginGetContext (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="dac9e-191">クライアント要求が使用可能なときに呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="dac9e-191">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when a client request is available.</span></span></param>
        <param name="state"><span data-ttu-id="dac9e-192">操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="dac9e-192">A user-defined object that contains information about the operation.</span></span> <span data-ttu-id="dac9e-193">このオブジェクトは、操作の完了時に <paramref name="callback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-193">This object is passed to the <paramref name="callback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="dac9e-194">受信要求の非同期の取得を開始します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-194">Begins asynchronously retrieving an incoming request.</span></span></summary>
        <returns><span data-ttu-id="dac9e-195">非同期操作のステータスを示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="dac9e-195">An <see cref="T:System.IAsyncResult" /> object that indicates the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-196"><xref:System.Net.HttpListener.BeginGetContext%2A> メソッドは、受信クライアント要求を受信するための非同期 (非ブロッキング) 呼び出しを開始します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-196">The <xref:System.Net.HttpListener.BeginGetContext%2A> method begins an asynchronous (non-blocking) call to receive incoming client requests.</span></span> <span data-ttu-id="dac9e-197">このメソッドを呼び出す前に、<xref:System.Net.HttpListener.Start%2A> メソッドを呼び出し、<xref:System.Net.HttpListener.Prefixes%2A> プロパティによって返される <xref:System.Net.HttpListenerPrefixCollection> に URI 文字列を追加することによって、リッスンする Uniform Resource Identifier (URI) プレフィックスを少なくとも1つ追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-197">Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one Uniform Resource Identifier (URI) prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property.</span></span>  
  
 <span data-ttu-id="dac9e-198">非同期操作は、<xref:System.Net.HttpListener.EndGetContext%2A> メソッドを呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-198">The asynchronous operation must be completed by calling the <xref:System.Net.HttpListener.EndGetContext%2A> method.</span></span> <span data-ttu-id="dac9e-199">通常、メソッドは `callback` デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-199">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="dac9e-200">このメソッドは、操作の完了時にブロックされません。</span><span class="sxs-lookup"><span data-stu-id="dac9e-200">This method does not block while the operation completes.</span></span> <span data-ttu-id="dac9e-201">受信要求を取得し、操作が完了するまでブロックするには、<xref:System.Net.HttpListener.GetContext%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-201">To get an incoming request and block until the operation completes, call the <xref:System.Net.HttpListener.GetContext%2A> method.</span></span>  
  
 <span data-ttu-id="dac9e-202">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-202">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dac9e-203">次のコード例では、<xref:System.Net.HttpListener.BeginGetContext%2A> メソッドを使用して、受信クライアント要求を処理するコールバックメソッドを指定する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-203">The following code example demonstrates using the <xref:System.Net.HttpListener.BeginGetContext%2A> method to specify a callback method that will handle incoming client requests.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
 [!code-vb[Net_Listener_Basic#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#12)]  
  
 <span data-ttu-id="dac9e-204">次のコード例では、コールバックメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-204">The following code example implements a callback method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#13)]  
 [!code-vb[Net_Listener_Basic#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException"><span data-ttu-id="dac9e-205">Win32 関数呼び出しが失敗しました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-205">A Win32 function call failed.</span></span> <span data-ttu-id="dac9e-206">例外の <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを調べて、例外の原因を確認します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-206">Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="dac9e-207">このオブジェクトが開始されていないか、現在停止されています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-207">This object has not been started or is currently stopped.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="dac9e-208">オブジェクトが閉じています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-208">This object is closed.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="dac9e-209">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-209">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="dac9e-210">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-210">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="httpListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dac9e-211"><see cref="T:System.Net.HttpListener" /> をシャットダウンします。</span><span class="sxs-lookup"><span data-stu-id="dac9e-211">Shuts down the <see cref="T:System.Net.HttpListener" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-212">このメソッドを呼び出した後は、<xref:System.Net.HttpListener> オブジェクトを使用できなくなります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-212">After calling this method, you can no longer use the <xref:System.Net.HttpListener> object.</span></span> <span data-ttu-id="dac9e-213"><xref:System.Net.HttpListener> オブジェクトを一時的に一時停止するには、<xref:System.Net.HttpListener.Stop%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-213">To temporarily pause an <xref:System.Net.HttpListener> object, use the <xref:System.Net.HttpListener.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="dac9e-214">このメソッドは、キューに置かれた要求を処理せずに <xref:System.Net.HttpListener> オブジェクトをシャットダウンします。</span><span class="sxs-lookup"><span data-stu-id="dac9e-214">This method shut downs the <xref:System.Net.HttpListener> object without processing queued requests.</span></span> <span data-ttu-id="dac9e-215">保留中の要求は完了できません。</span><span class="sxs-lookup"><span data-stu-id="dac9e-215">Any pending requests are unable to complete.</span></span>  
  
## Examples  

<span data-ttu-id="dac9e-216">次のコード例は、`Close` メソッドの呼び出しを示しています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-216">The following code example demonstrates calling the `Close` method:</span></span>
  
[!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
[!code-vb[Net_Listener_Basic#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="dac9e-217">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-217">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="dac9e-218">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-218">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="DefaultServiceNames">
      <MemberSignature Language="C#" Value="public System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.DefaultServiceNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultServiceNames As ServiceNameCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Authentication::ExtendedProtection::ServiceNameCollection ^ DefaultServiceNames { System::Security::Authentication::ExtendedProtection::ServiceNameCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultServiceNames : System.Security.Authentication.ExtendedProtection.ServiceNameCollection" Usage="System.Net.HttpListener.DefaultServiceNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExtendedProtection.ServiceNameCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dac9e-219">登録済みプレフィックスによって決定される既定のサービス プロバイダー名 (SPN: Service Provider Name) の一覧を取得します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-219">Gets a default list of Service Provider Names (SPNs) as determined by registered prefixes.</span></span></summary>
        <value><span data-ttu-id="dac9e-220">SPN の一覧を格納している <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" />。</span><span class="sxs-lookup"><span data-stu-id="dac9e-220">A <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> that contains a list of SPNs.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-221"><xref:System.Net.HttpListener.DefaultServiceNames%2A> プロパティは、拡張保護を提供するために、統合 Windows 認証と共に使用されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-221">The <xref:System.Net.HttpListener.DefaultServiceNames%2A> property is used with integrated Windows authentication to provide extended protection.</span></span> <span data-ttu-id="dac9e-222">Spn の一覧は、新しいプレフィックスが <xref:System.Net.HttpListener.Prefixes%2A> プロパティに追加されたときにアクセスされ、クリアされると、<xref:System.Net.HttpListener.Prefixes%2A> プロパティから初期化されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-222">The list of SPNs is initialized from the <xref:System.Net.HttpListener.Prefixes%2A> property when accessed and cleared when new prefixes are added to the <xref:System.Net.HttpListener.Prefixes%2A> property.</span></span>  
  
 <span data-ttu-id="dac9e-223"><xref:System.Net.HttpListener.DefaultServiceNames%2A> プロパティは、アプリケーションが拡張保護ポリシーの <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames%2A> プロパティを設定していない場合に使用されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-223">The <xref:System.Net.HttpListener.DefaultServiceNames%2A> property is used if an application doesn't set the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames%2A> property on its extended protection policy.</span></span>  
  
 <span data-ttu-id="dac9e-224"><xref:System.Net.HttpListener.DefaultServiceNames%2A> プロパティを使用して取得される <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection> は、次の規則に従って <xref:System.Net.HttpListener.Prefixes%2A> プロパティから構築されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-224">The <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection> that is retrieved with the <xref:System.Net.HttpListener.DefaultServiceNames%2A> property is built from the <xref:System.Net.HttpListener.Prefixes%2A> property according to the following rules:</span></span>  
  
1.  <span data-ttu-id="dac9e-225">ホスト名が "+"、"\*"、または IPv4 または IPv6 リテラル ("\*" に相当しますが、特定のローカルインターフェイスに限定される) の場合は、次の SPN が追加されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-225">If the hostname is "+", "\*", or an IPv4 or IPv6 literal (equivalent to "\*" but restricted to a specific local interface), the following SPN is added:</span></span>  
  
 <span data-ttu-id="dac9e-226">`"HTTP/"` には、コンピューターの完全修飾ドメイン名を指定します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-226">`"HTTP/"` plus the fully qualified domain name of the computer.</span></span>  
  
1.  <span data-ttu-id="dac9e-227">ホスト名にドットが含まれていない (ドメインまたはサブドメインがない) 場合は、DNS を使用して完全修飾ドメイン名を解決しようとします (<xref:System.Net.HttpWebRequest>で使用されているのと同じ動作)。</span><span class="sxs-lookup"><span data-stu-id="dac9e-227">If the hostname contains no dots (no domains or subdomains), an attempt is made to resolve the fully-qualified domain name using DNS (the same behavior used by <xref:System.Net.HttpWebRequest>).</span></span> <span data-ttu-id="dac9e-228">完全修飾ドメイン名を解決できる場合は、次の Spn が追加されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-228">If the fully-qualified domain name can be resolved, the following SPNs are added:</span></span>  
  
 <span data-ttu-id="dac9e-229">`"HTTP/"` にホスト名 (短い名前) を加えたものです。</span><span class="sxs-lookup"><span data-stu-id="dac9e-229">`"HTTP/"` plus the hostname (the short name).</span></span>  
  
 <span data-ttu-id="dac9e-230">`"HTTP/"` には、ホスト名の完全修飾ドメイン名を指定します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-230">`"HTTP/"` plus the fully qualified domain name for the hostname.</span></span>  
  
1.  <span data-ttu-id="dac9e-231">ホスト名にドット (ドメインまたはサブドメイン) が含まれておらず、完全修飾ドメイン名を解決できない場合は、次の SPN が追加されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-231">If the hostname contains not dots (no domains or subdomains) and a fully-qualified domain name can't be resolved, the following SPN is added:</span></span>  
  
 <span data-ttu-id="dac9e-232">`"HTTP/"` にホスト名を加えたものです。</span><span class="sxs-lookup"><span data-stu-id="dac9e-232">`"HTTP/"` plus the hostname.</span></span>  
  
1.  <span data-ttu-id="dac9e-233">ホスト名にドット (ドメインまたはサブドメイン) が含まれている場合は、次の SPN が追加されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-233">If the hostname contains dots (domains or subdomains), the following SPN is added:</span></span>  
  
 <span data-ttu-id="dac9e-234">`"HTTP/"` にホスト名を加えたものです。</span><span class="sxs-lookup"><span data-stu-id="dac9e-234">`"HTTP/"` plus the hostname.</span></span>  
  
 <span data-ttu-id="dac9e-235">アプリケーションでは、<xref:System.Net.HttpListener.DefaultServiceNames%2A> プロパティを使用して、カスタムリストが指定されていない場合に認証に使用される既定の Spn の一覧を確認できます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-235">The <xref:System.Net.HttpListener.DefaultServiceNames%2A> property can be used by an application to review the list of default SPNs which will be used for authentication if no custom list is supplied.</span></span> <span data-ttu-id="dac9e-236">その他の Spn が必要な場合は、<xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge%2A> メソッドのいずれかを使用してアプリケーションを追加できます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-236">If other SPNs are needed, an application can add them using one of the <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge%2A> methods.</span></span>  
  
 <span data-ttu-id="dac9e-237">拡張保護を使用して、要求された URL に基づいてポリシーの決定を行う場合、これはスプーフィングされる可能性があるため、安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="dac9e-237">It is not safe when using extended protection to make policy decisions based on the requested URL, since this can be spoofed.</span></span> <span data-ttu-id="dac9e-238">アプリケーションでは、このようなポリシーを決定するために、<xref:System.Net.HttpListenerRequest.LocalEndPoint%2A> または <xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A> プロパティに依存する必要があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-238">Rather, applications should rely on the <xref:System.Net.HttpListenerRequest.LocalEndPoint%2A> or <xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A> properties to make such policy decisions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="dac9e-239">統合 Windows 認証と拡張保護</span><span class="sxs-lookup"><span data-stu-id="dac9e-239">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EndGetContext">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerContext EndGetContext (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.HttpListenerContext EndGetContext(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndGetContext (asyncResult As IAsyncResult) As HttpListenerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::HttpListenerContext ^ EndGetContext(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndGetContext : IAsyncResult -&gt; System.Net.HttpListenerContext" Usage="httpListener.EndGetContext asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="dac9e-240">非同期操作の開始時に取得した <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="dac9e-240">An <see cref="T:System.IAsyncResult" /> object that was obtained when the asynchronous operation was started.</span></span></param>
        <summary><span data-ttu-id="dac9e-241">受信クライアント要求を取得する非同期操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-241">Completes an asynchronous operation to retrieve an incoming client request.</span></span></summary>
        <returns><span data-ttu-id="dac9e-242">クライアント要求を表す <see cref="T:System.Net.HttpListenerContext" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="dac9e-242">An <see cref="T:System.Net.HttpListenerContext" /> object that represents the client request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-243"><xref:System.Net.HttpListener.EndGetContext%2A> メソッドは、通常、デリゲートによって呼び出されるアプリケーション定義のコールバックメソッド内で呼び出され、受信クライアント要求とそれに関連付けられている応答を格納する <xref:System.Net.HttpListenerContext> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-243">The <xref:System.Net.HttpListener.EndGetContext%2A> method is called, usually within an application-defined callback method invoked by a delegate, to obtain the <xref:System.Net.HttpListenerContext> object that contains an incoming client request and its associated response.</span></span> <span data-ttu-id="dac9e-244">このメソッドは、<xref:System.Net.HttpListener.BeginGetContext%2A> メソッドを呼び出すことによって以前に開始された操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-244">This method completes an operation previously started by calling the <xref:System.Net.HttpListener.BeginGetContext%2A> method.</span></span> <span data-ttu-id="dac9e-245">操作が完了していない場合、このメソッドは、処理が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="dac9e-245">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="dac9e-246"><xref:System.Net.HttpListener.EndGetContext%2A> メソッドを呼び出すには <xref:System.Net.HttpListener> オブジェクトが必要であるため、このオブジェクトは通常、<xref:System.Net.HttpListener.BeginGetContext%2A> メソッドに渡される状態オブジェクトを使用してコールバックメソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-246">Because calling the <xref:System.Net.HttpListener.EndGetContext%2A> method requires the <xref:System.Net.HttpListener> object, this object is typically passed into a callback method by using the state object passed into the <xref:System.Net.HttpListener.BeginGetContext%2A> method.</span></span> <span data-ttu-id="dac9e-247">この状態オブジェクトは、`asyncResult` オブジェクトの <xref:System.IAsyncResult.AsyncState%2A> プロパティを使用して取得できます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-247">You can obtain this state object by using the <xref:System.IAsyncResult.AsyncState%2A> property of the `asyncResult` object.</span></span>  
  
 <span data-ttu-id="dac9e-248">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-248">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dac9e-249">次のコード例は、<xref:System.Net.HttpListener.EndGetContext%2A> メソッドを呼び出すコールバックメソッドの実装を示しています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-249">The following code example shows the implementation of a callback method that calls the <xref:System.Net.HttpListener.EndGetContext%2A> method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#13)]  
 [!code-vb[Net_Listener_Basic#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dac9e-250"><paramref name="asyncResult" /> を <see cref="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> メソッドの呼び出しで取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="dac9e-250"><paramref name="asyncResult" /> was not obtained by calling the <see cref="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="dac9e-251"><paramref name="asyncResult" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="dac9e-251"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.HttpListenerException"><span data-ttu-id="dac9e-252">Win32 関数呼び出しが失敗しました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-252">A Win32 function call failed.</span></span> <span data-ttu-id="dac9e-253">例外の <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを調べて、例外の原因を確認します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-253">Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="dac9e-254"><see cref="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" /> メソッドは、既に指定された <paramref name="asyncResult" /> オブジェクトに対して呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-254">The <see cref="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" /> method was already called for the specified <paramref name="asyncResult" /> object.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="dac9e-255">オブジェクトが閉じています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-255">This object is closed.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="dac9e-256">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-256">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="dac9e-257">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-257">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProtectionPolicy">
      <MemberSignature Language="C#" Value="public System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtendedProtectionPolicy As ExtendedProtectionPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ ExtendedProtectionPolicy { System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ get(); void set(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExtendedProtectionPolicy : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy with get, set" Usage="System.Net.HttpListener.ExtendedProtectionPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("not used anywhere in the implementation")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dac9e-258">セッションの拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-258">Gets or sets the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> to use for extended protection for a session.</span></span></summary>
        <value><span data-ttu-id="dac9e-259">拡張保護に使用するポリシーを指定する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="dac9e-259">A <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that specifies the policy to use for extended protection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-260"><xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> プロパティは、拡張保護を提供するために、統合 Windows 認証と共に使用されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-260">The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property is used with integrated Windows authentication to provide extended protection.</span></span> <span data-ttu-id="dac9e-261"><xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> プロパティを使用すると、<xref:System.Net.HttpListener> セッション全体の拡張保護ポリシーを構成できます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-261">The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property allows the configuration of the extended protection policy for the whole <xref:System.Net.HttpListener> session.</span></span> <span data-ttu-id="dac9e-262"><xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> プロパティを使用すると、個々の要求に対して拡張保護ポリシーを構成できます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-262">The <xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> property allows the configuration of the extended protection policy for each individual request.</span></span>  
  
 <span data-ttu-id="dac9e-263"><xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> プロパティは `null`である必要があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-263">The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> property must be `null`.</span></span> <span data-ttu-id="dac9e-264"><xref:System.Net.HttpListener> インスタンスは、チャネルバインディングトークン (CBT) を独自の TLS セッションから直接取得します (存在する場合)。</span><span class="sxs-lookup"><span data-stu-id="dac9e-264">The <xref:System.Net.HttpListener> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dac9e-265"><see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> プロパティを設定しようとしましたが、<see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> プロパティは <see langword="null" /> ではありませんでした。</span><span class="sxs-lookup"><span data-stu-id="dac9e-265">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> property, but the <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> property was not <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="dac9e-266"><see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> プロパティを <see langword="null" /> に設定しようとしました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-266">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> property to <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="dac9e-267"><see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> メソッドを呼び出した後で <see cref="M:System.Net.HttpListener.Start" /> プロパティを設定しようとしました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-267">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> property after the <see cref="M:System.Net.HttpListener.Start" /> method was already called.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="dac9e-268">オブジェクトが閉じています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-268">This object is closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="dac9e-269"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement" /> プロパティが、拡張保護をサポートしていないプラットフォーム上で <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-269">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement" /> property was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="P:System.Net.HttpListener.DefaultServiceNames" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="dac9e-270">統合 Windows 認証と拡張保護</span><span class="sxs-lookup"><span data-stu-id="dac9e-270">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProtectionSelectorDelegate">
      <MemberSignature Language="C#" Value="public System.Net.HttpListener.ExtendedProtectionSelector ExtendedProtectionSelectorDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListener/ExtendedProtectionSelector ExtendedProtectionSelectorDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtendedProtectionSelectorDelegate As HttpListener.ExtendedProtectionSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListener::ExtendedProtectionSelector ^ ExtendedProtectionSelectorDelegate { System::Net::HttpListener::ExtendedProtectionSelector ^ get(); void set(System::Net::HttpListener::ExtendedProtectionSelector ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExtendedProtectionSelectorDelegate : System.Net.HttpListener.ExtendedProtectionSelector with get, set" Usage="System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.HttpListener+ExtendedProtectionSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dac9e-271">各要求に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> を決定するために呼び出すデリゲートを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-271">Gets or sets the delegate called to determine the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> to use for each request.</span></span></summary>
        <value><span data-ttu-id="dac9e-272">拡張保護に使用するポリシーを指定する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="dac9e-272">A <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that specifies the policy to use for extended protection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-273"><xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> プロパティは、拡張保護を提供するために、統合 Windows 認証と共に使用されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-273">The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property is used with integrated Windows authentication to provide extended protection.</span></span> <span data-ttu-id="dac9e-274"><xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> プロパティを使用すると、<xref:System.Net.HttpListener> セッション全体の拡張保護ポリシーを構成できます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-274">The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property allows the configuration of the extended protection policy for the whole <xref:System.Net.HttpListener> session.</span></span> <span data-ttu-id="dac9e-275"><xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> プロパティを使用すると、個々の要求ごとに拡張保護ポリシーを構成できます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-275">The <xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> property allows the configuration of the extended protection policy per individual request.</span></span>  
  
 <span data-ttu-id="dac9e-276"><xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> プロパティは `null`である必要があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-276">The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> property must be `null`.</span></span> <span data-ttu-id="dac9e-277"><xref:System.Net.HttpListener> インスタンスは、チャネルバインディングトークン (CBT) を独自の TLS セッションから直接取得します (存在する場合)。</span><span class="sxs-lookup"><span data-stu-id="dac9e-277">The <xref:System.Net.HttpListener> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.</span></span>  
  
 <span data-ttu-id="dac9e-278">デリゲートは、要求ごとに、<xref:System.Net.HttpListener> インスタンスが拡張保護を提供するために使用する設定を選択できます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-278">For each request, the delegate can choose the settings that the <xref:System.Net.HttpListener> instance will use to provide extended protection.</span></span>  
  
 <span data-ttu-id="dac9e-279">デリゲートがこのプロパティの `null` を返す場合、これは <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> プロパティが <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>に設定されている <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy> を表します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-279">If a delegate returns `null` for this property, this represents a <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy> which the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> property set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dac9e-280"><see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> プロパティを設定しようとしましたが、<see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> プロパティが <see langword="null" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-280">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property, but the <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> property must be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="dac9e-281"><see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> プロパティを <see langword="null" /> に設定しようとしました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-281">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property to <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="dac9e-282"><see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> メソッドを呼び出した後で <see cref="M:System.Net.HttpListener.Start" /> プロパティを設定しようとしました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-282">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property after the <see cref="M:System.Net.HttpListener.Start" /> method was already called.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="dac9e-283">オブジェクトが閉じています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-283">This object is closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="dac9e-284">拡張保護をサポートしていないプラットフォームで <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> プロパティを設定しようとしました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-284">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="P:System.Net.HttpListener.DefaultServiceNames" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="dac9e-285">統合 Windows 認証と拡張保護</span><span class="sxs-lookup"><span data-stu-id="dac9e-285">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerContext GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.HttpListenerContext GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.GetContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContext () As HttpListenerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::HttpListenerContext ^ GetContext();" />
      <MemberSignature Language="F#" Value="member this.GetContext : unit -&gt; System.Net.HttpListenerContext" Usage="httpListener.GetContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dac9e-286">受信要求を待機し、受信するとその要求を返します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-286">Waits for an incoming request and returns when one is received.</span></span></summary>
        <returns><span data-ttu-id="dac9e-287">クライアント要求を表す <see cref="T:System.Net.HttpListenerContext" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="dac9e-287">An <see cref="T:System.Net.HttpListenerContext" /> object that represents a client request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-288">このメソッドを呼び出す前に、<xref:System.Net.HttpListener.Start%2A> メソッドを呼び出し、<xref:System.Net.HttpListener.Prefixes%2A> プロパティによって返される <xref:System.Net.HttpListenerPrefixCollection> に URI 文字列を追加することによって、リッスンする URI プレフィックスを少なくとも1つ追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-288">Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one URI prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property.</span></span> <span data-ttu-id="dac9e-289">プレフィックスの詳細については、「<xref:System.Net.HttpListener> クラスの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-289">For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.</span></span>  
  
 <span data-ttu-id="dac9e-290">このメソッドは、受信要求を待機している間、ブロックします。</span><span class="sxs-lookup"><span data-stu-id="dac9e-290">This method blocks while waiting for an incoming request.</span></span> <span data-ttu-id="dac9e-291">アプリケーションがブロックされないように (個別のスレッドで) 受信要求を非同期的に処理する場合は、<xref:System.Net.HttpListener.BeginGetContext%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-291">If you want incoming requests to be processed asynchronously (on separate threads) so that your application does not block, use the <xref:System.Net.HttpListener.BeginGetContext%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dac9e-292">次のコード例は、このメソッドの呼び出しを示しています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-292">The following code example demonstrates calling this method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
 [!code-vb[Net_Listener_Basic#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException"><span data-ttu-id="dac9e-293">Win32 関数呼び出しが失敗しました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-293">A Win32 function call failed.</span></span> <span data-ttu-id="dac9e-294">例外の <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを調べて、例外の原因を確認します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-294">Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="dac9e-295">このオブジェクトが開始されていないか、現在停止されています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-295">This object has not been started or is currently stopped.</span></span>  
  
<span data-ttu-id="dac9e-296">- または -</span><span class="sxs-lookup"><span data-stu-id="dac9e-296">-or-</span></span> 
<span data-ttu-id="dac9e-297"><see cref="T:System.Net.HttpListener" /> に、応答対象の URI (Uniform Resource Identifier) がありません。</span><span class="sxs-lookup"><span data-stu-id="dac9e-297">The <see cref="T:System.Net.HttpListener" /> does not have any Uniform Resource Identifier (URI) prefixes to respond to.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="dac9e-298">オブジェクトが閉じています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-298">This object is closed.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="dac9e-299">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-299">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="dac9e-300">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-300">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetContextAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt; GetContextAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.HttpListenerContext&gt; GetContextAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.GetContextAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextAsync () As Task(Of HttpListenerContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::HttpListenerContext ^&gt; ^ GetContextAsync();" />
      <MemberSignature Language="F#" Value="member this.GetContextAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt;" Usage="httpListener.GetContextAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dac9e-301">非同期操作として受信要求を待ちます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-301">Waits for an incoming request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="dac9e-302">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="dac9e-302">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="dac9e-303">タスク オブジェクトの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは、クライアント要求を表す <see cref="T:System.Net.HttpListenerContext" /> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-303">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns an <see cref="T:System.Net.HttpListenerContext" /> object that represents a client request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-304">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="dac9e-304">This operation will not block.</span></span> <span data-ttu-id="dac9e-305">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、受信した要求を受信したときに完了します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-305">The returned <xref:System.Threading.Tasks.Task%601> object will complete when the incoming request has been received.</span></span>  
  
 <span data-ttu-id="dac9e-306">このメソッドを呼び出す前に、<xref:System.Net.HttpListener.Start%2A> メソッドを呼び出し、<xref:System.Net.HttpListener.Prefixes%2A> プロパティによって返される <xref:System.Net.HttpListenerPrefixCollection> に URI 文字列を追加することによって、リッスンする URI プレフィックスを少なくとも1つ追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-306">Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one URI prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property.</span></span> <span data-ttu-id="dac9e-307">プレフィックスの詳細については、「<xref:System.Net.HttpListener> クラスの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-307">For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListenerContext" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreWriteExceptions">
      <MemberSignature Language="C#" Value="public bool IgnoreWriteExceptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWriteExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IgnoreWriteExceptions" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreWriteExceptions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreWriteExceptions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreWriteExceptions : bool with get, set" Usage="System.Net.HttpListener.IgnoreWriteExceptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dac9e-308"><see cref="T:System.Boolean" /> がクライアントに応答を送信したときに発生する例外をアプリケーションで受信するかどうかを指定する <see cref="T:System.Net.HttpListener" /> 値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-308">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether your application receives exceptions that occur when an <see cref="T:System.Net.HttpListener" /> sends the response to the client.</span></span></summary>
        <value><span data-ttu-id="dac9e-309">この <see cref="T:System.Net.HttpListener" /> がクライアントに応答を送信したときに発生する例外を返さない場合は <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-309"><see langword="true" /> if this <see cref="T:System.Net.HttpListener" /> should not return exceptions that occur when sending the response to the client; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="dac9e-310">既定値は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="dac9e-310">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-311">アプリケーションで各クライアントに応答が正常に送信される必要がない場合は、このプロパティを `true` に設定します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-311">Set this property to `true` if your application does not require that a response is successfully sent to each client.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dac9e-312">このプロパティを設定するコード例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-312">The following code example demonstrates setting this property.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
 [!code-vb[Net_Listener_Basic#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="dac9e-313">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-313">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsListening">
      <MemberSignature Language="C#" Value="public bool IsListening { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsListening" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IsListening" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsListening As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsListening { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsListening : bool" Usage="System.Net.HttpListener.IsListening" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dac9e-314"><see cref="T:System.Net.HttpListener" /> が開始されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-314">Gets a value that indicates whether <see cref="T:System.Net.HttpListener" /> has been started.</span></span></summary>
        <value><span data-ttu-id="dac9e-315"><see langword="true" /> が開始されている場合は <see cref="T:System.Net.HttpListener" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="dac9e-315"><see langword="true" /> if the <see cref="T:System.Net.HttpListener" /> was started; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-316"><xref:System.Net.HttpListener>を開始するには、<xref:System.Net.HttpListener.Start%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-316">To start an <xref:System.Net.HttpListener>, call the <xref:System.Net.HttpListener.Start%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dac9e-317">次のコード例は、このプロパティを使用して、インスタンスのリッスン状態を確認する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-317">The following code example demonstrates using this property to determine the listening state of an instance.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
 [!code-vb[Net_Listener_Basic#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupported">
      <MemberSignature Language="C#" Value="public static bool IsSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsSupported" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IsSupported" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsSupported As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsSupported { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSupported : bool" Usage="System.Net.HttpListener.IsSupported" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dac9e-318">現在のオペレーティング システムで <see cref="T:System.Net.HttpListener" /> を使用できるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-318">Gets a value that indicates whether <see cref="T:System.Net.HttpListener" /> can be used with the current operating system.</span></span></summary>
        <value><span data-ttu-id="dac9e-319"><see langword="true" /> がサポートされている場合は <see cref="T:System.Net.HttpListener" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="dac9e-319"><see langword="true" /> if <see cref="T:System.Net.HttpListener" /> is supported; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-320">このクラスは、Windows XP SP2 または Windows Server 2003 オペレーティングシステムを実行しているコンピューターでのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-320">This class is available only on computers running the Windows XP SP2 or Windows Server 2003 operating systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dac9e-321">次のコード例は、<xref:System.Net.HttpListener.IsSupported%2A> プロパティを使用して、<xref:System.Net.HttpListener> オブジェクトを現在のオペレーティングシステムで使用できるかどうかを検出する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-321">The following code example demonstrates the use of the <xref:System.Net.HttpListener.IsSupported%2A> property to detect whether an <xref:System.Net.HttpListener> object can be used with the current operating system.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
 [!code-vb[Net_Listener_Basic#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixes">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerPrefixCollection Prefixes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerPrefixCollection Prefixes" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.Prefixes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Prefixes As HttpListenerPrefixCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerPrefixCollection ^ Prefixes { System::Net::HttpListenerPrefixCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Prefixes : System.Net.HttpListenerPrefixCollection" Usage="System.Net.HttpListener.Prefixes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerPrefixCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dac9e-322">この <see cref="T:System.Net.HttpListener" /> オブジェクトによって処理される URI (Uniform Resource Identifier) プレフィックスを取得します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-322">Gets the Uniform Resource Identifier (URI) prefixes handled by this <see cref="T:System.Net.HttpListener" /> object.</span></span></summary>
        <value><span data-ttu-id="dac9e-323">この <see cref="T:System.Net.HttpListenerPrefixCollection" /> オブジェクトで処理するように構成されている URI プレフィックスが格納された <see cref="T:System.Net.HttpListener" />。</span><span class="sxs-lookup"><span data-stu-id="dac9e-323">An <see cref="T:System.Net.HttpListenerPrefixCollection" /> that contains the URI prefixes that this <see cref="T:System.Net.HttpListener" /> object is configured to handle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-324">プレフィックスは正規の形式です。</span><span class="sxs-lookup"><span data-stu-id="dac9e-324">The prefixes are in canonical form.</span></span> <span data-ttu-id="dac9e-325">プレフィックスの詳細については、「<xref:System.Net.HttpListener> クラスの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-325">For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dac9e-326">次のコード例は、<xref:System.Net.HttpListener.Prefixes%2A> プロパティを使用して、処理される URI プレフィックスを取得して出力する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-326">The following code example demonstrates using the <xref:System.Net.HttpListener.Prefixes%2A> property to obtain and print the URI prefixes that are handled.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
 [!code-vb[Net_Listener_Basic#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="dac9e-327">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-327">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Realm">
      <MemberSignature Language="C#" Value="public string Realm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Realm" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.Realm" />
      <MemberSignature Language="VB.NET" Value="Public Property Realm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Realm { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Realm : string with get, set" Usage="System.Net.HttpListener.Realm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dac9e-328">この <see cref="T:System.Net.HttpListener" /> オブジェクトに関連付けられているレルム (リソース パーティション) を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-328">Gets or sets the realm, or resource partition, associated with this <see cref="T:System.Net.HttpListener" /> object.</span></span></summary>
        <value><span data-ttu-id="dac9e-329"><see cref="T:System.String" /> オブジェクトに関連付けられているレルムの名前が格納された <see cref="T:System.Net.HttpListener" /> 値。</span><span class="sxs-lookup"><span data-stu-id="dac9e-329">A <see cref="T:System.String" /> value that contains the name of the realm associated with the <see cref="T:System.Net.HttpListener" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-330">サーバーは、領域を使用して保護されたリソースをパーティション分割します。各パーティションには、独自の認証スキームまたは承認データベースを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-330">Servers use realms to partition protected resources; each partition can have its own authentication scheme and/or authorization database.</span></span> <span data-ttu-id="dac9e-331">レルムは、基本認証およびダイジェスト認証だけに使用されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-331">Realms are used only for basic and digest authentication.</span></span> <span data-ttu-id="dac9e-332">クライアントが正常に認証されると、その認証は特定のレルムのすべてのリソースに対して有効となります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-332">After a client successfully authenticates, the authentication is valid for all resources in a given realm.</span></span> <span data-ttu-id="dac9e-333">領域の詳細については、 [https://www.ietf.org/](https://www.ietf.org/)の RFC 2617 を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-333">For a detailed description of realms, see RFC 2617 at [https://www.ietf.org/](https://www.ietf.org/).</span></span>  
  
 <span data-ttu-id="dac9e-334"><xref:System.Net.HttpListener> のインスタンスには、関連付けられた領域が1つだけあります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-334">An instance of <xref:System.Net.HttpListener> has only one associated realm.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dac9e-335">次のコード例は、<xref:System.Net.HttpListener.Realm%2A> プロパティを設定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-335">The following code example demonstrates setting the <xref:System.Net.HttpListener.Realm%2A> property.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#10)]  
 [!code-vb[Net_Listener_Basic#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="dac9e-336">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-336">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="httpListener.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dac9e-337">このインスタンスが受信要求を受信できるようにします。</span><span class="sxs-lookup"><span data-stu-id="dac9e-337">Allows this instance to receive incoming requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-338"><xref:System.Net.HttpListener.GetContext%2A> または <xref:System.Net.HttpListener.BeginGetContext%2A> メソッドを呼び出す前に、このメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-338">This method must be called before you call the <xref:System.Net.HttpListener.GetContext%2A> or <xref:System.Net.HttpListener.BeginGetContext%2A> method.</span></span>  
  
 <span data-ttu-id="dac9e-339"><xref:System.Net.HttpListener> オブジェクトを開始した後は、<xref:System.Net.HttpListener.Stop%2A> メソッドを使用してオブジェクトを停止できます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-339">After you have started an <xref:System.Net.HttpListener> object, you can use the <xref:System.Net.HttpListener.Stop%2A> method to stop it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dac9e-340">このリスナーインスタンスで https を使用する場合は、サーバー証明書をインストールして選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-340">If this listener instance uses https, you must install and select a Server Certificate.</span></span> <span data-ttu-id="dac9e-341">それ以外の場合、この <xref:System.Net.HttpListener> の <xref:System.Net.HttpWebRequest> クエリは、接続が予期せず終了して失敗します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-341">Otherwise, an <xref:System.Net.HttpWebRequest> query of this <xref:System.Net.HttpListener> will fail with an unexpected close of the connection.</span></span> <span data-ttu-id="dac9e-342">Httpcfg.exe を使用して、サーバー証明書とその他のリスナーオプションを構成できます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-342">You can configure Server Certificates and other listener options by using HttpCfg.exe.</span></span> <span data-ttu-id="dac9e-343">詳細については、「 [https://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp](https://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp) 」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-343">See [https://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp](https://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp) for more details.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dac9e-344">次のコード例は、<xref:System.Net.HttpListener.Start%2A> メソッドを使用して、受信要求の処理を開始する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-344">The following code example demonstrates using the <xref:System.Net.HttpListener.Start%2A> method to begin processing incoming requests.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
 [!code-vb[Net_Listener_Basic#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException"><span data-ttu-id="dac9e-345">Win32 関数呼び出しが失敗しました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-345">A Win32 function call failed.</span></span> <span data-ttu-id="dac9e-346">例外の <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを調べて、例外の原因を確認します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-346">Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="dac9e-347">オブジェクトが閉じています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-347">This object is closed.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="dac9e-348">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-348">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="dac9e-349">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-349">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="httpListener.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dac9e-350">このインスタンスの受信要求の受信を停止します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-350">Causes this instance to stop receiving incoming requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-351">このインスタンスが既に停止している場合、このメソッドを呼び出しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="dac9e-351">If this instance is already stopped, calling this method has no effect.</span></span>  
  
 <span data-ttu-id="dac9e-352"><xref:System.Net.HttpListener> オブジェクトを停止した後、<xref:System.Net.HttpListener.Start%2A> メソッドを使用してオブジェクトを再起動できます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-352">After you have stopped an <xref:System.Net.HttpListener> object, you can use the <xref:System.Net.HttpListener.Start%2A> method to restart it.</span></span>  
  
   
  
## Examples  
 
<span data-ttu-id="dac9e-353">次のコード例は、<xref:System.Net.HttpListener.Stop%2A> メソッドを使用して、受信要求の処理を停止する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="dac9e-353">The following code example demonstrates using the <xref:System.Net.HttpListener.Stop%2A> method to stop processing incoming requests.</span></span>  
 
[!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
[!code-vb[Net_Listener_Basic#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="dac9e-354">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-354">This object has been closed.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="dac9e-355">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-355">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="dac9e-356">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="dac9e-356">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dac9e-357">この <see cref="T:System.Net.HttpListener" /> オブジェクトに保持されているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-357">Releases the resources held by this <see cref="T:System.Net.HttpListener" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-358">アプリケーションでは、このメソッドを呼び出すのではなく、<xref:System.Net.HttpListener.Close%2A> メソッドを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-358">Applications should use the <xref:System.Net.HttpListener.Close%2A> method instead of calling this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutManager">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerTimeoutManager TimeoutManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerTimeoutManager TimeoutManager" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.TimeoutManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeoutManager As HttpListenerTimeoutManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerTimeoutManager ^ TimeoutManager { System::Net::HttpListenerTimeoutManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeoutManager : System.Net.HttpListenerTimeoutManager" Usage="System.Net.HttpListener.TimeoutManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerTimeoutManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dac9e-359">この <see cref="T:System.Net.HttpListener" /> インスタンスのタイムアウト マネージャーです。</span><span class="sxs-lookup"><span data-stu-id="dac9e-359">The timeout manager for this <see cref="T:System.Net.HttpListener" /> instance.</span></span></summary>
        <value><span data-ttu-id="dac9e-360">この <see cref="T:System.Net.HttpListener" /> インスタンスのタイムアウト マネージャーです。</span><span class="sxs-lookup"><span data-stu-id="dac9e-360">The timeout manager for this <see cref="T:System.Net.HttpListener" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-361">タイムアウトマネージャは、この <xref:System.Net.HttpListener> インスタンスの接続タイムアウトの制限を定義します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-361">The timeout manager defines the connection timeout limits for this <xref:System.Net.HttpListener> instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsafeConnectionNtlmAuthentication">
      <MemberSignature Language="C#" Value="public bool UnsafeConnectionNtlmAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnsafeConnectionNtlmAuthentication" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.UnsafeConnectionNtlmAuthentication" />
      <MemberSignature Language="VB.NET" Value="Public Property UnsafeConnectionNtlmAuthentication As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnsafeConnectionNtlmAuthentication { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UnsafeConnectionNtlmAuthentication : bool with get, set" Usage="System.Net.HttpListener.UnsafeConnectionNtlmAuthentication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Support for NTLM needs some loving.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dac9e-362">NTLM が使用されているときに、同じ TCP (Transmission Control Protocol) 接続を使用した別の要求を認証する必要があるかどうかを制御する <see cref="T:System.Boolean" /> 値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-362">Gets or sets a <see cref="T:System.Boolean" /> value that controls whether, when NTLM is used, additional requests using the same Transmission Control Protocol (TCP) connection are required to authenticate.</span></span></summary>
        <value><span data-ttu-id="dac9e-363">最初の要求の <see langword="true" /> が同じ接続でなされる後続の要求に使用される場合は <see cref="T:System.Security.Principal.IIdentity" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="dac9e-363"><see langword="true" /> if the <see cref="T:System.Security.Principal.IIdentity" /> of the first request will be used for subsequent requests on the same connection; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="dac9e-364">既定値は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="dac9e-364">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dac9e-365">このプロパティが `true` に設定されていて、特定の TCP 接続経由の最初の要求が NTLM を使用して認証されている場合、同じ TCP 接続での後続の要求は、最初の要求の認証情報 (<xref:System.Security.Principal.IIdentity>) を使用して処理されます。</span><span class="sxs-lookup"><span data-stu-id="dac9e-365">When this property is set to `true` and the first request over a particular TCP connection is authenticated using NTLM, subsequent requests over the same TCP connection are processed using the authentication information (<xref:System.Security.Principal.IIdentity>) of the initial request.</span></span>  
  
 <span data-ttu-id="dac9e-366">NTLM が認証プロトコルではない場合、このプロパティは無効です。</span><span class="sxs-lookup"><span data-stu-id="dac9e-366">This property has no effect when NTLM is not the authentication protocol.</span></span> <span data-ttu-id="dac9e-367">Negotiate が認証プロトコルとして指定されている場合、このプロパティは、NTLM が認証に使用される実際のプロトコルである場合にのみ効果があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-367">When Negotiate is specified as the authentication protocol, this property has an effect only if NTLM is the actual protocol used for authentication.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dac9e-368">このプロパティを `true` に設定するとパフォーマンスが向上しますが、<xref:System.Net.HttpListener> は NTLM 認証に関するチャレンジを追加送信しないため、すべての要求で認証情報を提供する必要がないというセキュリティリスクがあります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-368">While setting this property to `true` increases performance because the <xref:System.Net.HttpListener> does not send additional NTLM authentication challenges, there is a security risk in not requiring all requests to provide authentication information.</span></span> <span data-ttu-id="dac9e-369">パフォーマンスの向上がリスクよりも重要であるかどうかを判断する必要があります。</span><span class="sxs-lookup"><span data-stu-id="dac9e-369">You must determine whether the increase in performance is worth this risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dac9e-370">このプロパティを設定するコード例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="dac9e-370">The following code example demonstrates setting this property.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
 [!code-vb[Net_Listener_Basic#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="dac9e-371">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="dac9e-371">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
