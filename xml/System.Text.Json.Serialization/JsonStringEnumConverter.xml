<Type Name="JsonStringEnumConverter" FullName="System.Text.Json.Serialization.JsonStringEnumConverter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1900b3d19be12bd71eeb38c0f8afc7f76e3326d3" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75055597" /></Metadata><TypeSignature Language="C#" Value="public sealed class JsonStringEnumConverter : System.Text.Json.Serialization.JsonConverterFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonStringEnumConverter extends System.Text.Json.Serialization.JsonConverterFactory" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Serialization.JsonStringEnumConverter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonStringEnumConverter&#xA;Inherits JsonConverterFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonStringEnumConverter sealed : System::Text::Json::Serialization::JsonConverterFactory" />
  <TypeSignature Language="F#" Value="type JsonStringEnumConverter = class&#xA;    inherit JsonConverterFactory" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Json.Serialization.JsonConverterFactory</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="cf159-101">列挙値と文字列の間の変換を行います。</span><span class="sxs-lookup"><span data-stu-id="cf159-101">Converts enumeration values to and from strings.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="cf159-102">読み取りでは大文字と小文字が区別されません。</span><span class="sxs-lookup"><span data-stu-id="cf159-102">Reading is case insensitive.</span></span> <span data-ttu-id="cf159-103">書き込みをカスタマイズするには、<xref:System.Text.Json.JsonNamingPolicy>を使用します。</span><span class="sxs-lookup"><span data-stu-id="cf159-103">Writing can be customized by using a <xref:System.Text.Json.JsonNamingPolicy>.</span></span>

<span data-ttu-id="cf159-104">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md#enums-as-strings)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="cf159-104">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#enums-as-strings).</span></span>

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonStringEnumConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JsonStringEnumConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cf159-105">整数値を許可する既定の名前付けポリシーを使用して、<see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> クラスのインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="cf159-105">Initializes an instance of the <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> class with the default naming policy that allows integer values.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonStringEnumConverter (System.Text.Json.JsonNamingPolicy namingPolicy = null, bool allowIntegerValues = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Text.Json.JsonNamingPolicy namingPolicy, bool allowIntegerValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional namingPolicy As JsonNamingPolicy = null, Optional allowIntegerValues As Boolean = true)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Serialization.JsonStringEnumConverter : System.Text.Json.JsonNamingPolicy * bool -&gt; System.Text.Json.Serialization.JsonStringEnumConverter" Usage="new System.Text.Json.Serialization.JsonStringEnumConverter (namingPolicy, allowIntegerValues)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="namingPolicy" Type="System.Text.Json.JsonNamingPolicy" />
        <Parameter Name="allowIntegerValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="namingPolicy"><span data-ttu-id="cf159-106">列挙値を書き込むためのオプションの名前付けポリシー。</span><span class="sxs-lookup"><span data-stu-id="cf159-106">The optional naming policy for writing enum values.</span></span></param>
        <param name="allowIntegerValues"><span data-ttu-id="cf159-107">未定義の列挙値を許可する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf159-107"><see langword="true" /> to allow undefined enum values; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="cf159-108"><see langword="true" /> のとき、列挙値が定義されていない場合は、文字列ではなく数値として出力されます。</span><span class="sxs-lookup"><span data-stu-id="cf159-108">When <see langword="true" />, if an enum value isn't defined, it will output as a number rather than a string.</span></span></param>
        <summary><span data-ttu-id="cf159-109">指定された名前付けポリシーと、未定義の列挙値を許可するかどうかを示す値を使用して、<see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> クラスのインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="cf159-109">Initializes an instance of the <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> class with a specified naming policy and a value that indicates whether undefined enumeration values are allowed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvert">
      <MemberSignature Language="C#" Value="public override bool CanConvert (Type typeToConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvert(class System.Type typeToConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvert (typeToConvert As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvert(Type ^ typeToConvert);" />
      <MemberSignature Language="F#" Value="override this.CanConvert : Type -&gt; bool" Usage="jsonStringEnumConverter.CanConvert typeToConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeToConvert"><span data-ttu-id="cf159-110">確認する型。</span><span class="sxs-lookup"><span data-stu-id="cf159-110">The type to be checked.</span></span></param>
        <summary><span data-ttu-id="cf159-111">指定された型を列挙型に変換できるかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="cf159-111">Determines whether the specified type can be converted to an enum.</span></span></summary>
        <returns><span data-ttu-id="cf159-112">型を変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf159-112"><see langword="true" /> if the type can be converted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConverter">
      <MemberSignature Language="C#" Value="public override System.Text.Json.Serialization.JsonConverter CreateConverter (Type typeToConvert, System.Text.Json.JsonSerializerOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Json.Serialization.JsonConverter CreateConverter(class System.Type typeToConvert, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateConverter (typeToConvert As Type, options As JsonSerializerOptions) As JsonConverter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Json::Serialization::JsonConverter ^ CreateConverter(Type ^ typeToConvert, System::Text::Json::JsonSerializerOptions ^ options);" />
      <MemberSignature Language="F#" Value="override this.CreateConverter : Type * System.Text.Json.JsonSerializerOptions -&gt; System.Text.Json.Serialization.JsonConverter" Usage="jsonStringEnumConverter.CreateConverter (typeToConvert, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="typeToConvert"><span data-ttu-id="cf159-113">コンバーターによって処理される型。</span><span class="sxs-lookup"><span data-stu-id="cf159-113">The type handled by the converter.</span></span></param>
        <param name="options"><span data-ttu-id="cf159-114">使用するシリアル化オプション。</span><span class="sxs-lookup"><span data-stu-id="cf159-114">The serialization options to use.</span></span></param>
        <summary><span data-ttu-id="cf159-115">指定された型のコンバーターを作成します。</span><span class="sxs-lookup"><span data-stu-id="cf159-115">Creates a converter for the specified type.</span></span></summary>
        <returns><span data-ttu-id="cf159-116"><typeparamref name="T" /> が <paramref name="typeToConvert" /> と互換性のあるコンバーター。</span><span class="sxs-lookup"><span data-stu-id="cf159-116">A converter for which <typeparamref name="T" /> is compatible with <paramref name="typeToConvert" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
