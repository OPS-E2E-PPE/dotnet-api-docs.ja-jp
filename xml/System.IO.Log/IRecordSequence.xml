<Type Name="IRecordSequence" FullName="System.IO.Log.IRecordSequence">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fa1a0f48f85197a7107ff489614d8108fdb6a668" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82312812" /></Metadata><TypeSignature Language="C#" Value="public interface IRecordSequence : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRecordSequence implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.IRecordSequence" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRecordSequence&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRecordSequence : IDisposable" />
  <TypeSignature Language="F#" Value="type IRecordSequence = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="92ae7-101">レコード シーケンスのジェネリック インターフェイスを提供します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-101">Provides a generic interface to a sequence of records.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-102"><xref:System.IO.Log.IRecordSequence> インターフェイスにより、レコード指向ストリームの抽象インターフェイスを使用できるようになります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-102">The <xref:System.IO.Log.IRecordSequence> interface provides an abstract interface to a record-oriented stream.</span></span> <span data-ttu-id="92ae7-103"><xref:System.IO.Log.IRecordSequence> インスタンスはログ レコードの読み書きにも使用できます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-103">A <xref:System.IO.Log.IRecordSequence> instance can be used to read and write log records.</span></span>  
  
 <span data-ttu-id="92ae7-104"><xref:System.IO.Log.IRecordSequence> インターフェイスには、次の機能があります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-104">The <xref:System.IO.Log.IRecordSequence> interface provides the following capabilities,</span></span>  
  
-   <span data-ttu-id="92ae7-105"><xref:System.IO.Log.IRecordSequence.Append%2A> メソッドを使用してログ レコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-105">Append log records using the <xref:System.IO.Log.IRecordSequence.Append%2A> methods.</span></span>  
  
-   <span data-ttu-id="92ae7-106"><xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> メソッドを使用して、追加したレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-106">Read the appended records using the <xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> method.</span></span>  
  
-   <span data-ttu-id="92ae7-107"><xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> メソッドを使用して、特殊な再開レコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-107">Write a special restart record using the <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> method.</span></span>  
  
-   <span data-ttu-id="92ae7-108"><xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> メソッドを使用して、直前に書き込まれた再開レコードから再開レコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-108">Read restart records from the most recently written restart record using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
-   <span data-ttu-id="92ae7-109"><xref:System.IO.Log.IRecordSequence.Flush%2A> メソッドを使用して、レコードを永続ストアにフラッシュします。</span><span class="sxs-lookup"><span data-stu-id="92ae7-109">Flush the records to durable store using the  <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
-   <span data-ttu-id="92ae7-110">レコードを追加する領域を予約します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-110">Reserve space for appending records.</span></span>  
  
-   <span data-ttu-id="92ae7-111">ログのベースを進めることでログ領域を解放します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-111">Free log space by advancing the base of the log.</span></span>  
  
-   <span data-ttu-id="92ae7-112"><xref:System.IO.Log.IRecordSequence.TailPinned> イベント通知を受信して、ログのベースを移動し、領域を解放します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-112">Receive <xref:System.IO.Log.IRecordSequence.TailPinned> event notifications to move the base of the log to free space.</span></span>  
  
 <span data-ttu-id="92ae7-113">ログ レコードが <xref:System.IO.Log.IRecordSequence> インスタンスに追加され、各ログ レコードに一意のシーケンス番号が付与されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-113">Log records are appended to a <xref:System.IO.Log.IRecordSequence> instance, and each log record is given a unique sequence number.</span></span> <span data-ttu-id="92ae7-114">シーケンス番号は、指定されたレコード シーケンス内で常に決まった値で増加します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-114">Sequence numbers are strictly monotonically increasing within a given record sequence.</span></span> <span data-ttu-id="92ae7-115">ログ レコードは不透明データで構成され、バイトの ArraySegments の <xref:System.IO.Log.IRecordSequence> 内の <xref:System.Collections.IList> インスタンスに指定されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-115">A log record consists of opaque data, supplied to the <xref:System.IO.Log.IRecordSequence> instance in an <xref:System.Collections.IList> of ArraySegments of bytes.</span></span>  
  
 <span data-ttu-id="92ae7-116"><xref:System.IO.Log.IRecordSequence> インターフェイスは、ログ境界に関する情報を表すいくつかの基本プロパティも公開します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-116">The <xref:System.IO.Log.IRecordSequence> interface also exposes a few basic properties which provides information about log boundaries.</span></span>  
  
-   <span data-ttu-id="92ae7-117"><xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> プロパティには、レコード シーケンス内の最初の有効なレコードのシーケンス番号が格納されています。</span><span class="sxs-lookup"><span data-stu-id="92ae7-117">The <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> property contains the sequence number of the first valid record in the record sequence.</span></span>  
  
-   <span data-ttu-id="92ae7-118"><xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A> プロパティには、最後に追加されたレコードのシーケンス番号を超えることが保証されたシーケンス番号が格納されています。</span><span class="sxs-lookup"><span data-stu-id="92ae7-118">The <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A> property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record.</span></span>  
  
-   <span data-ttu-id="92ae7-119"><xref:System.IO.Log.IRecordSequence.RestartSequenceNumber%2A> プロパティには、直前に書き込まれた再開領域のシーケンス番号が格納されています。</span><span class="sxs-lookup"><span data-stu-id="92ae7-119">The <xref:System.IO.Log.IRecordSequence.RestartSequenceNumber%2A> property contains the sequence number of the last written restart area.</span></span>  
  
-   <span data-ttu-id="92ae7-120"><xref:System.IO.Log.IRecordSequence.MaximumRecordLength%2A> プロパティには、このシーケンスに対して追加または読み取りが可能な最大レコード サイズが格納されています。</span><span class="sxs-lookup"><span data-stu-id="92ae7-120">The <xref:System.IO.Log.IRecordSequence.MaximumRecordLength%2A> property contains the size of the largest record that can be appended to, or read from the sequence.</span></span>  
  
-   <span data-ttu-id="92ae7-121"><xref:System.IO.Log.IRecordSequence.ReservedBytes%2A> プロパティには、このレコード シーケンス内で行われたすべての予約の合計サイズが格納されています。</span><span class="sxs-lookup"><span data-stu-id="92ae7-121">The <xref:System.IO.Log.IRecordSequence.ReservedBytes%2A> property contains the total size of all reservations made in this record sequence.</span></span>  
  
-   <span data-ttu-id="92ae7-122"><xref:System.IO.Log.IRecordSequence.RetryAppend%2A> プロパティが `true` に設定され、シーケンス内に領域がないために <xref:System.IO.Log.IRecordSequence.Append%2A> の処理が失敗したときは、レコード シーケンスが領域の解放を試みた後、追加操作を再試行します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-122">If the <xref:System.IO.Log.IRecordSequence.RetryAppend%2A> property is set to `true`, and an <xref:System.IO.Log.IRecordSequence.Append%2A> operation fails because there is no space in the sequence, the record sequence will attempt to free space, and retry the Append operation.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AdvanceBaseSequenceNumber">
      <MemberSignature Language="C#" Value="public void AdvanceBaseSequenceNumber (System.IO.Log.SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AdvanceBaseSequenceNumber(valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AdvanceBaseSequenceNumber (newBaseSequenceNumber As SequenceNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AdvanceBaseSequenceNumber(System::IO::Log::SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member AdvanceBaseSequenceNumber : System.IO.Log.SequenceNumber -&gt; unit" Usage="iRecordSequence.AdvanceBaseSequenceNumber newBaseSequenceNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="newBaseSequenceNumber"><span data-ttu-id="92ae7-123">レコード シーケンスの新しい基本シーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-123">The new base sequence number of the record sequence.</span></span></param>
        <summary><span data-ttu-id="92ae7-124">ログの基本シーケンス番号を前方移動します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-124">Moves the base sequence number of the log forward.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-125"><xref:System.IO.Log.LogRecordSequence> インスタンスを使用して、シーケンス番号を進めてログ内の領域を解放しようとするときに前のエクステントを空としてマークするには、新しい基本シーケンス番号が別のログ エクステントに存在する必要があります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-125">When you use a <xref:System.IO.Log.LogRecordSequence> instance and try to advance the sequence number to free up space in the log, the new base sequence number must reside in a different log extent for the previous extent to be marked as empty.</span></span> <span data-ttu-id="92ae7-126">エクステントの部分的な解放はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-126">Freeing extents partially is not supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-127"><paramref name="newBaseSequenceNumber" /> が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-127"><paramref name="newBaseSequenceNumber" /> is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="92ae7-128"><paramref name="newBaseSequenceNumber" /> がログ内でアクティブではありません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-128"><paramref name="newBaseSequenceNumber" /> is not active in the log.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-129">シーケンスの変更中に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-129">An I/O error occurred while modifying the sequence.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-130">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-130">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-131">レコード シーケンスがいっぱいです。</span><span class="sxs-lookup"><span data-stu-id="92ae7-131">The record sequence is full.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Append">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92ae7-132">派生クラスでオーバーライドされると、<see cref="T:System.IO.Log.IRecordSequence" /> にログ レコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-132">When overridden in a derived class, writes a log record to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (data As ArraySegment(Of Byte), nextUndoRecord As SequenceNumber, previousRecord As SequenceNumber, recordAppendOptions As RecordAppendOptions) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="F#" Value="abstract member Append : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-133">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-133">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="92ae7-134">ユーザー指定の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-134">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="92ae7-135">以前の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-135">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="92ae7-136">データの書き込み方法を指定する <see cref="T:System.IO.Log.RecordAppendOptions" /> の有効な値。</span><span class="sxs-lookup"><span data-stu-id="92ae7-136">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <summary><span data-ttu-id="92ae7-137">派生クラスでオーバーライドされると、<see cref="T:System.IO.Log.IRecordSequence" /> にログ レコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-137">When overridden in a derived class, writes a log record to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <returns><span data-ttu-id="92ae7-138">追加されたログ レコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-138">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-139">`data` パラメーターに格納されたデータは、レコードとして追加するために単一バイトの配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-139">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-140">ただし、レコードの読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-140">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="92ae7-141">このメソッドは通常、レコードの書き込みが終わる前に完了します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-141">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="92ae7-142">レコードが書き込まれたことを確認するために、<xref:System.IO.Log.RecordAppendOptions.ForceFlush> パラメーターを使用して `recordAppendOptions` フラグを指定するか、<xref:System.IO.Log.IRecordSequence.Flush%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-142">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-143">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-143">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-144">レコードの追加時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-144">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-145">レコード シーケンスは、新しいレコードを格納するための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-145">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-146">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-146">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (data As IList(Of ArraySegment(Of Byte)), nextUndoRecord As SequenceNumber, previousRecord As SequenceNumber, recordAppendOptions As RecordAppendOptions) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="F#" Value="abstract member Append : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-147">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-147">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="92ae7-148">ユーザー指定の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-148">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="92ae7-149">以前の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-149">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="92ae7-150">データの書き込み方法を指定する <see cref="T:System.IO.Log.RecordAppendOptions" /> の有効な値。</span><span class="sxs-lookup"><span data-stu-id="92ae7-150">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <summary><span data-ttu-id="92ae7-151">派生クラスでオーバーライドされると、<see cref="T:System.IO.Log.IRecordSequence" /> にログ レコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-151">When overridden in a derived class, appends a log record to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <returns><span data-ttu-id="92ae7-152">追加されたログ レコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-152">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-153">`data` パラメーターに格納されたデータは、レコードとして追加するために単一バイトの配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-153">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-154">ただし、レコードの読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-154">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="92ae7-155">このメソッドは通常、レコードの書き込みが終わる前に完了します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-155">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="92ae7-156">レコードが書き込まれたことを確認するために、<xref:System.IO.Log.RecordAppendOptions.ForceFlush> パラメーターを使用して `recordAppendOptions` フラグを指定するか、<xref:System.IO.Log.IRecordSequence.Flush%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-156">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-157">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-157">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-158">レコードの追加時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-158">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-159">レコード シーケンスは、新しいレコードを格納するための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-159">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-160">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-160">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (data As ArraySegment(Of Byte), nextUndoRecord As SequenceNumber, previousRecord As SequenceNumber, recordAppendOptions As RecordAppendOptions, reservations As ReservationCollection) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member Append : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions, reservations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-161">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-161">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="92ae7-162">ユーザー指定の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-162">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="92ae7-163">以前の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-163">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="92ae7-164">データの書き込み方法を指定する <see cref="T:System.IO.Log.RecordAppendOptions" /> の有効な値。</span><span class="sxs-lookup"><span data-stu-id="92ae7-164">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservations"><span data-ttu-id="92ae7-165">このレコードで使用する予約情報を格納する <see cref="T:System.IO.Log.ReservationCollection" />。</span><span class="sxs-lookup"><span data-stu-id="92ae7-165">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this record.</span></span></param>
        <summary><span data-ttu-id="92ae7-166">派生クラスでオーバーライドされると、以前にシーケンスに予約された領域を使用して、<see cref="T:System.IO.Log.IRecordSequence" /> にログ レコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-166">When overridden in a derived class, appends a log record to the <see cref="T:System.IO.Log.IRecordSequence" />, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="92ae7-167">追加されたログ レコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-167">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-168">`data` パラメーターに格納されたデータは、レコードとして追加するために単一バイトの配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-168">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-169">ただし、レコードの読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-169">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="92ae7-170">追加されたレコードは、`reservations` パラメーターにより指定された予約を使用して以前に予約された領域を消費します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-170">The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter.</span></span> <span data-ttu-id="92ae7-171">この追加処理が成功すると、データを格納できる最も小さな予約領域が消費され、その予約領域がコレクションから削除されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-171">If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</span></span>  
  
 <span data-ttu-id="92ae7-172">このメソッドは通常、レコードの書き込みが終わる前に完了します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-172">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="92ae7-173">レコードが書き込まれたことを確認するために、<xref:System.IO.Log.RecordAppendOptions.ForceFlush> パラメーターを使用して `recordAppendOptions` フラグを指定するか、<xref:System.IO.Log.IRecordSequence.Flush%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-173">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-174">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-174">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-175">レコードの追加時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-175">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-176">レコード シーケンスは、新しいレコードを格納するための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-176">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-177">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-177">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (data As IList(Of ArraySegment(Of Byte)), nextUndoRecord As SequenceNumber, previousRecord As SequenceNumber, recordAppendOptions As RecordAppendOptions, reservations As ReservationCollection) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member Append : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions, reservations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-178">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-178">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="92ae7-179">ユーザー指定の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-179">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="92ae7-180">以前の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-180">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="92ae7-181">データの書き込み方法を指定する <see cref="T:System.IO.Log.RecordAppendOptions" /> の有効な値。</span><span class="sxs-lookup"><span data-stu-id="92ae7-181">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservations"><span data-ttu-id="92ae7-182">このレコードで使用する予約情報を格納する <see cref="T:System.IO.Log.ReservationCollection" />。</span><span class="sxs-lookup"><span data-stu-id="92ae7-182">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this record.</span></span></param>
        <summary><span data-ttu-id="92ae7-183">派生クラスでオーバーライドされると、以前にシーケンスに予約された領域を使用して、<see cref="T:System.IO.Log.IRecordSequence" /> にログ レコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-183">When overridden in a derived class, appends a log record to the <see cref="T:System.IO.Log.IRecordSequence" />, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="92ae7-184">追加されたログ レコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-184">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-185">`data` パラメーターに格納されたデータは、レコードとして追加するために単一バイトの配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-185">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-186">ただし、レコードの読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-186">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="92ae7-187">追加されたレコードは、`reservations` パラメーターにより指定された予約を使用して以前に予約された領域を消費します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-187">The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter.</span></span> <span data-ttu-id="92ae7-188">この追加処理が成功すると、データを格納できる最も小さな予約領域が消費され、その予約領域がコレクションから削除されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-188">If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</span></span>  
  
 <span data-ttu-id="92ae7-189">このメソッドは通常、レコードの書き込みが終わる前に完了します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-189">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="92ae7-190">レコードが書き込まれたことを確認するために、<xref:System.IO.Log.RecordAppendOptions.ForceFlush> パラメーターを使用して `recordAppendOptions` フラグを指定するか、<xref:System.IO.Log.IRecordSequence.Flush%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-190">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-191">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-191">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-192">レコードの追加時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-192">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-193">レコード シーケンスは、新しいレコードを格納するための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-193">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-194">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-194">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber BaseSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber BaseSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.BaseSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber BaseSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.IRecordSequence.BaseSequenceNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92ae7-195">派生クラスでオーバーライドされると、現在の <see cref="T:System.IO.Log.IRecordSequence" /> の最初の有効なレコードのシーケンス番号を取得します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-195">When overridden in a derived class, gets the sequence number of the first valid record in the current <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <value><span data-ttu-id="92ae7-196"><see cref="T:System.IO.Log.IRecordSequence" /> 内の有効なレコードに対応する下限のシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-196">The lowest sequence number that corresponds to a valid record in the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-197">有効なシーケンス番号は、<xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> 以上、<xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A> 未満です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-197">Valid sequence numbers are greater than or equal to <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>.</span></span>  
  
 <span data-ttu-id="92ae7-198">このプロパティの値は、<xref:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber%2A> メソッドまたは <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> メソッドを呼び出すことにより変更できます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-198">The value of this property can be changed by calling the <xref:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber%2A> or <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-199">シーケンスが破棄された後にプロパティがアクセスされました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-199">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92ae7-200">派生クラスでオーバーライドされると、非同期の追加操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-200">When overridden in a derived class, begins an asynchronous append operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAppend (data As ArraySegment(Of Byte), nextUndoRecord As SequenceNumber, previousRecord As SequenceNumber, recordAppendOptions As RecordAppendOptions, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-201">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-201">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="92ae7-202">ユーザー指定の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-202">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="92ae7-203">以前の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-203">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="92ae7-204">データの書き込み方法を指定する <see cref="T:System.IO.Log.RecordAppendOptions" /> の有効な値。</span><span class="sxs-lookup"><span data-stu-id="92ae7-204">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="callback"><span data-ttu-id="92ae7-205">追加の完了時に呼び出されるオプションの非同期コールバック。</span><span class="sxs-lookup"><span data-stu-id="92ae7-205">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="92ae7-206">この特定の非同期追加要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-206">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="92ae7-207">派生クラスでオーバーライドされると、非同期の追加操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-207">When overridden in a derived class, begins an asynchronous append operation.</span></span></summary>
        <returns><span data-ttu-id="92ae7-208">非同期の追加を表す <see cref="T:System.IAsyncResult" />。まだ保留状態の場合もあります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-208">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous append, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-209">追加処理が完了しておりリソースを適切に解放できることを確認するために、このメソッドから返された <xref:System.IAsyncResult> を <xref:System.IO.Log.IRecordSequence.EndAppend%2A> メソッドに渡すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="92ae7-209">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="92ae7-210">非同期追加中にエラーが発生した場合、このメソッドから返される <xref:System.IO.Log.IRecordSequence.EndAppend%2A> を使用して <xref:System.IAsyncResult> メソッドを呼び出すまで、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-210">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="92ae7-211">`data` パラメーターに格納されたデータは、レコードとして追加するために単一バイトの配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-211">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-212">ただし、レコードの読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-212">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="92ae7-213">このメソッドは通常、レコードの書き込みが終わる前に完了します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-213">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="92ae7-214">レコードが書き込まれたことを確認するために、<xref:System.IO.Log.RecordAppendOptions.ForceFlush> パラメーターを使用して `recordAppendOptions` フラグを指定するか、<xref:System.IO.Log.IRecordSequence.Flush%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-214">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-215">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-215">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-216">レコードの追加時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-216">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-217">レコード シーケンスは、新しいレコードを格納するための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-217">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-218">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-218">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAppend (data As IList(Of ArraySegment(Of Byte)), nextUndoRecord As SequenceNumber, previousRecord As SequenceNumber, recordAppendOptions As RecordAppendOptions, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-219">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-219">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="92ae7-220">ユーザー指定の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-220">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="92ae7-221">以前の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-221">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="92ae7-222">データの書き込み方法を指定する <see cref="T:System.IO.Log.RecordAppendOptions" /> の有効な値。</span><span class="sxs-lookup"><span data-stu-id="92ae7-222">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="callback"><span data-ttu-id="92ae7-223">追加の完了時に呼び出されるオプションの非同期コールバック。</span><span class="sxs-lookup"><span data-stu-id="92ae7-223">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="92ae7-224">この特定の非同期追加要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-224">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="92ae7-225">派生クラスでオーバーライドされると、以前にシーケンス内で予約された領域を使用して、非同期の追加操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-225">When overridden in a derived class, begins an asynchronous append operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="92ae7-226">非同期の追加を表す <see cref="T:System.IAsyncResult" />。まだ保留状態の場合もあります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-226">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous append, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-227">追加処理が完了しておりリソースを適切に解放できることを確認するために、このメソッドから返された <xref:System.IAsyncResult> を <xref:System.IO.Log.IRecordSequence.EndAppend%2A> メソッドに渡すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="92ae7-227">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="92ae7-228">非同期追加中にエラーが発生した場合、このメソッドから返される <xref:System.IO.Log.IRecordSequence.EndAppend%2A> を使用して <xref:System.IAsyncResult> メソッドを呼び出すまで、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-228">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="92ae7-229">`data` パラメーターに格納されたデータは、レコードとして追加するために単一バイトの配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-229">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-230">ただし、レコードの読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-230">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="92ae7-231">このメソッドは通常、レコードの書き込みが終わる前に完了します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-231">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="92ae7-232">レコードが書き込まれたことを確認するために、<xref:System.IO.Log.RecordAppendOptions.ForceFlush> パラメーターを使用して `recordAppendOptions` フラグを指定するか、<xref:System.IO.Log.IRecordSequence.Flush%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-232">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-233">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-233">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-234">レコードの追加時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-234">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-235">レコード シーケンスは、新しいレコードを格納するための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-235">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-236">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-236">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAppend (data As ArraySegment(Of Byte), nextUndoRecord As SequenceNumber, previousRecord As SequenceNumber, recordAppendOptions As RecordAppendOptions, reservations As ReservationCollection, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-237">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-237">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="92ae7-238">ユーザー指定の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-238">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="92ae7-239">以前の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-239">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="92ae7-240">データの書き込み方法を指定する <see cref="T:System.IO.Log.RecordAppendOptions" /> の有効な値。</span><span class="sxs-lookup"><span data-stu-id="92ae7-240">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservations"><span data-ttu-id="92ae7-241">このレコードで使用する予約情報を格納する <see cref="T:System.IO.Log.ReservationCollection" />。</span><span class="sxs-lookup"><span data-stu-id="92ae7-241">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this record.</span></span></param>
        <param name="callback"><span data-ttu-id="92ae7-242">追加の完了時に呼び出されるオプションの非同期コールバック。</span><span class="sxs-lookup"><span data-stu-id="92ae7-242">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="92ae7-243">この特定の非同期追加要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-243">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="92ae7-244">派生クラスでオーバーライドされると、以前にシーケンス内で予約された領域を使用して、非同期の追加操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-244">When overridden in a derived class, begins an asynchronous append operation using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="92ae7-245">非同期の追加を表す <see cref="T:System.IAsyncResult" />。まだ保留状態の場合もあります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-245">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous append, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-246">追加処理が完了しておりリソースを適切に解放できることを確認するために、このメソッドから返された <xref:System.IAsyncResult> を <xref:System.IO.Log.IRecordSequence.EndAppend%2A> メソッドに渡すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="92ae7-246">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="92ae7-247">非同期追加中にエラーが発生した場合、このメソッドから返される <xref:System.IO.Log.IRecordSequence.EndAppend%2A> を使用して <xref:System.IAsyncResult> メソッドを呼び出すまで、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-247">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="92ae7-248">`data` パラメーターに格納されたデータは、レコードとして追加するために単一バイトの配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-248">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-249">ただし、レコードの読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-249">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="92ae7-250">追加されたレコードは、`reservations` パラメーターにより指定された予約を使用して以前に予約された領域を消費します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-250">The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter.</span></span> <span data-ttu-id="92ae7-251">この追加処理が成功すると、データを格納できる最も小さな予約領域が消費され、その予約領域がコレクションから削除されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-251">If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</span></span>  
  
 <span data-ttu-id="92ae7-252">このメソッドは通常、レコードの書き込みが終わる前に完了します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-252">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="92ae7-253">レコードが書き込まれたことを確認するために、<xref:System.IO.Log.RecordAppendOptions.ForceFlush> パラメーターを使用して `recordAppendOptions` フラグを指定するか、<xref:System.IO.Log.IRecordSequence.Flush%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-253">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-254">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-254">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-255">レコードの追加時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-255">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-256">レコード シーケンスは、新しいレコードを格納するための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-256">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-257">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-257">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousUndoRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousUndoRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAppend (data As IList(Of ArraySegment(Of Byte)), nextUndoRecord As SequenceNumber, previousUndoRecord As SequenceNumber, recordAppendOptions As RecordAppendOptions, reservations As ReservationCollection, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousUndoRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginAppend (data, nextUndoRecord, previousUndoRecord, recordAppendOptions, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-258">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-258">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="92ae7-259">ユーザー指定の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-259">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousUndoRecord"><span data-ttu-id="92ae7-260">以前の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-260">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="92ae7-261">データの書き込み方法を指定する <see cref="T:System.IO.Log.RecordAppendOptions" /> の有効な値。</span><span class="sxs-lookup"><span data-stu-id="92ae7-261">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservations"><span data-ttu-id="92ae7-262">このレコードで使用する予約情報を格納する <see cref="T:System.IO.Log.ReservationCollection" />。</span><span class="sxs-lookup"><span data-stu-id="92ae7-262">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this record.</span></span></param>
        <param name="callback"><span data-ttu-id="92ae7-263">追加の完了時に呼び出されるオプションの非同期コールバック。</span><span class="sxs-lookup"><span data-stu-id="92ae7-263">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="92ae7-264">この特定の非同期追加要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-264">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="92ae7-265">派生クラスでオーバーライドされると、以前にシーケンス内で予約された領域を使用して、非同期の追加操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-265">When overridden in a derived class, begins an asynchronous append operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="92ae7-266">非同期の追加を表す <see cref="T:System.IAsyncResult" />。まだ保留状態の場合もあります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-266">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous append, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-267">追加処理が完了しておりリソースを適切に解放できることを確認するために、このメソッドから返された <xref:System.IAsyncResult> を <xref:System.IO.Log.IRecordSequence.EndAppend%2A> メソッドに渡すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="92ae7-267">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="92ae7-268">非同期追加中にエラーが発生した場合、このメソッドから返される <xref:System.IO.Log.IRecordSequence.EndAppend%2A> を使用して <xref:System.IAsyncResult> メソッドを呼び出すまで、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-268">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="92ae7-269">`data` パラメーターに格納されたデータは、レコードとして追加するために単一バイトの配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-269">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-270">ただし、レコードの読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-270">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="92ae7-271">追加されたレコードは、`reservations` パラメーターにより指定された予約を使用して以前に予約された領域を消費します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-271">The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter.</span></span> <span data-ttu-id="92ae7-272">この追加処理が成功すると、データを格納できる最も小さな予約領域が消費され、その予約領域がコレクションから削除されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-272">If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</span></span>  
  
 <span data-ttu-id="92ae7-273">このメソッドは通常、レコードの書き込みが終わる前に完了します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-273">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="92ae7-274">レコードが書き込まれたことを確認するために、<xref:System.IO.Log.RecordAppendOptions.ForceFlush> パラメーターを使用して `recordAppendOptions` フラグを指定するか、<xref:System.IO.Log.IRecordSequence.Flush%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-274">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-275">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-275">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-276">レコードの追加時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-276">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-277">レコード シーケンスは、新しいレコードを格納するための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-277">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-278">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-278">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginFlush">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginFlush (System.IO.Log.SequenceNumber sequenceNumber, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginFlush(valuetype System.IO.Log.SequenceNumber sequenceNumber, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginFlush (sequenceNumber As SequenceNumber, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginFlush(System::IO::Log::SequenceNumber sequenceNumber, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginFlush : System.IO.Log.SequenceNumber * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginFlush (sequenceNumber, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sequenceNumber"><span data-ttu-id="92ae7-279">書き込む必要のある最新レコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-279">The sequence number of the latest record that must be written.</span></span> <span data-ttu-id="92ae7-280">この <see cref="T:System.IO.Log.SequenceNumber" /> が無効な場合、すべてのレコードを書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-280">If this <see cref="T:System.IO.Log.SequenceNumber" /> is invalid, then all records must be written.</span></span></param>
        <param name="callback"><span data-ttu-id="92ae7-281">フラッシュの完了時に呼び出されるオプションの非同期コールバック。</span><span class="sxs-lookup"><span data-stu-id="92ae7-281">An optional asynchronous callback, to be called when the flush is complete.</span></span></param>
        <param name="state"><span data-ttu-id="92ae7-282">この特定の非同期フラッシュ要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-282">A user-provided object that distinguishes this particular asynchronous flush request from other requests.</span></span></param>
        <summary><span data-ttu-id="92ae7-283">派生クラスでオーバーライドされると、以前にシーケンス内で予約された領域を使用して、非同期のフラッシュ操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-283">When overridden in a derived class, begins an asynchronous flush operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="92ae7-284">非同期のフラッシュ操作を表す <see cref="T:System.IAsyncResult" />。まだ保留状態の場合もあります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-284">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous flush operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-285">現在のメソッドから返された <xref:System.IAsyncResult> を <xref:System.IO.Log.IRecordSequence.EndFlush%2A> メソッドに渡すことにより、フラッシュが完了し、リソースが適切に解放されたことを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-285">You should pass the <xref:System.IAsyncResult> returned by the current method to the <xref:System.IO.Log.IRecordSequence.EndFlush%2A> method to ensure that the flush completes and resources are freed appropriately.</span></span> <span data-ttu-id="92ae7-286">非同期フラッシュ中にエラーが発生した場合、このメソッドから返される <xref:System.IO.Log.IRecordSequence.EndFlush%2A> を使用して <xref:System.IAsyncResult> メソッドを呼び出すまで、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-286">If an error occurs during an asynchronous flush, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndFlush%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="92ae7-287">このメソッドを呼び出すことにより、<xref:System.IO.Log.IRecordSequence> に追加されたすべてのレコードが永続的に書き込まれたことを確認します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-287">Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.IRecordSequence> are durably written.</span></span>  
  
 <span data-ttu-id="92ae7-288">レコード シーケンスが破棄されている場合、または無効な引数を渡した場合、この操作内で例外が直ちにスローされます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-288">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="92ae7-289">I/O 要求時にディスク障害が発生した場合など、非同期フラッシュ要求中にエラーが発生した場合、<xref:System.IO.Log.IRecordSequence.EndFlush%2A> メソッドが呼び出されたときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-289">Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndFlush%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-290">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-290">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-291">データのフラッシュ中に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-291">An I/O error occurred while flushing the data.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-292">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-292">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginReserveAndAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92ae7-293">派生クラスでオーバーライドされると、非同期の予約および追加操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-293">When overridden in a derived class, begins an asynchronous reserve and append operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReserveAndAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReserveAndAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReserveAndAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReserveAndAppend (data As ArraySegment(Of Byte), nextUndoRecord As SequenceNumber, previousRecord As SequenceNumber, recordAppendOptions As RecordAppendOptions, reservationCollection As ReservationCollection, reservations As Long(), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReserveAndAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, cli::array &lt;long&gt; ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReserveAndAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-294">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-294">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="92ae7-295">ユーザー指定の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-295">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="92ae7-296">以前の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-296">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="92ae7-297">データの書き込み方法を指定する <see cref="T:System.IO.Log.RecordAppendOptions" /> の有効な値。</span><span class="sxs-lookup"><span data-stu-id="92ae7-297">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservationCollection"><span data-ttu-id="92ae7-298">予約を作成する予約コレクション。</span><span class="sxs-lookup"><span data-stu-id="92ae7-298">The reservation collection to make reservations in.</span></span></param>
        <param name="reservations"><span data-ttu-id="92ae7-299">作成する予約のバイト数。</span><span class="sxs-lookup"><span data-stu-id="92ae7-299">The reservations to make, in bytes.</span></span></param>
        <param name="callback"><span data-ttu-id="92ae7-300">追加の完了時に呼び出されるオプションの非同期コールバック。</span><span class="sxs-lookup"><span data-stu-id="92ae7-300">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="92ae7-301">この特定の非同期追加要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-301">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="92ae7-302">派生クラスでオーバーライドされると、非同期の予約および追加操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-302">When overridden in a derived class, begins an asynchronous reserve and append operation.</span></span></summary>
        <returns><span data-ttu-id="92ae7-303">非同期の操作を表す <see cref="T:System.IAsyncResult" />。まだ保留状態の場合もあります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-303">An <see cref="T:System.IAsyncResult" /> that represents this asynchronous operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-304">追加処理が完了しておりリソースを適切に解放できることを確認するために、このメソッドから返された <xref:System.IAsyncResult> を <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> メソッドに渡すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="92ae7-304">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="92ae7-305">非同期追加中にエラーが発生した場合、このメソッドから返される <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> を使用して <xref:System.IAsyncResult> メソッドを呼び出すまで、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-305">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="92ae7-306">`data` パラメーターに格納されたデータは、レコードとして追加するために単一バイトの配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-306">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-307">ただし、レコードの読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-307">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="92ae7-308">指定の予約情報は、レコード追加操作を含む分割不可能な操作内で、提供された予約コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-308">The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</span></span> <span data-ttu-id="92ae7-309">追加が失敗した場合、領域は予約されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-309">If the append fails, no space is reserved.</span></span>  
  
 <span data-ttu-id="92ae7-310">このメソッドは通常、レコードの書き込みが終わる前に完了できます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-310">Normally, this method may complete before the record has been written.</span></span> <span data-ttu-id="92ae7-311">レコードが書き込まれたことを確認するために、<xref:System.IO.Log.RecordAppendOptions.ForceFlush> パラメーターを使用して `recordAppendOptions` フラグを指定するか、<xref:System.IO.Log.IRecordSequence.Flush%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-311">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 <span data-ttu-id="92ae7-312">レコード シーケンスが破棄されている場合、または無効な引数を渡した場合、この操作内で例外が直ちにスローされます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-312">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="92ae7-313">I/O 要求時にディスク障害が発生した場合など、非同期追加要求中にエラーが発生した場合、<xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> メソッドが呼び出されたときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-313">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-314">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-314">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-315">レコードの追加時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-315">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-316">レコード シーケンスは、新しいレコードの格納または予約のための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-316">The record sequence could not make enough free space to contain the new record, or to make the reservation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-317">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-317">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReserveAndAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReserveAndAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReserveAndAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReserveAndAppend (data As IList(Of ArraySegment(Of Byte)), nextUndoRecord As SequenceNumber, previousRecord As SequenceNumber, recordAppendOptions As RecordAppendOptions, reservationCollection As ReservationCollection, reservations As Long(), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReserveAndAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, cli::array &lt;long&gt; ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReserveAndAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-318">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-318">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="92ae7-319">ユーザー指定の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-319">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="92ae7-320">以前の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-320">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="92ae7-321">データの書き込み方法を指定する <see cref="T:System.IO.Log.RecordAppendOptions" /> の有効な値。</span><span class="sxs-lookup"><span data-stu-id="92ae7-321">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservationCollection"><span data-ttu-id="92ae7-322">予約を作成する予約コレクション。</span><span class="sxs-lookup"><span data-stu-id="92ae7-322">The reservation collection to make reservations in.</span></span></param>
        <param name="reservations"><span data-ttu-id="92ae7-323">作成する予約のバイト数。</span><span class="sxs-lookup"><span data-stu-id="92ae7-323">The reservations to make, in bytes.</span></span></param>
        <param name="callback"><span data-ttu-id="92ae7-324">追加の完了時に呼び出されるオプションの非同期コールバック。</span><span class="sxs-lookup"><span data-stu-id="92ae7-324">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="92ae7-325">この特定の非同期追加要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-325">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="92ae7-326">派生クラスでオーバーライドされると、非同期の予約および追加操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-326">When overridden in a derived class, begins an asynchronous reserve and append operation.</span></span></summary>
        <returns><span data-ttu-id="92ae7-327">非同期の操作を表す <see cref="T:System.IAsyncResult" />。まだ保留状態の場合もあります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-327">An <see cref="T:System.IAsyncResult" /> that represents this asynchronous operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-328">追加処理が完了しておりリソースを適切に解放できることを確認するために、このメソッドから返された <xref:System.IAsyncResult> を <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> メソッドに渡すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="92ae7-328">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="92ae7-329">非同期追加中にエラーが発生した場合、このメソッドから返される <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> を使用して <xref:System.IAsyncResult> メソッドを呼び出すまで、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-329">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="92ae7-330">`data` パラメーターに格納されたデータは、レコードとして追加するために単一バイトの配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-330">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-331">ただし、レコードの読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-331">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="92ae7-332">指定の予約情報は、レコード追加操作を含む分割不可能な操作内で、提供された予約コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-332">The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</span></span> <span data-ttu-id="92ae7-333">追加が失敗した場合、領域は予約されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-333">If the append fails, no space is reserved.</span></span>  
  
 <span data-ttu-id="92ae7-334">このメソッドは通常、レコードの書き込みが終わる前に完了できます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-334">Normally, this method may complete before the record has been written.</span></span> <span data-ttu-id="92ae7-335">レコードが書き込まれたことを確認するために、<xref:System.IO.Log.RecordAppendOptions.ForceFlush> パラメーターを使用して `recordAppendOptions` フラグを指定するか、<xref:System.IO.Log.IRecordSequence.Flush%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-335">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 <span data-ttu-id="92ae7-336">レコード シーケンスが破棄されている場合、または無効な引数を渡した場合、この操作内で例外が直ちにスローされます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-336">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="92ae7-337">I/O 要求時にディスク障害が発生した場合など、非同期追加要求中にエラーが発生した場合、<xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> メソッドが呼び出されたときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-337">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-338">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-338">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-339">レコードの追加時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-339">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-340">レコード シーケンスは、新しいレコードの格納または予約のための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-340">The record sequence could not make enough free space to contain the new record, or to make the reservation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-341">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-341">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginWriteRestartArea">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92ae7-342">派生クラスでオーバーライドされると、非同期の再開領域の書き込み操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-342">When overridden in a derived class, begins an asynchronous restart area write operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginWriteRestartArea">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWriteRestartArea (data As ArraySegment(Of Byte), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginWriteRestartArea (data, newBaseSequenceNumber, reservation, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-343">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-343">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="92ae7-344">新しい基本シーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-344">The new base sequence number.</span></span> <span data-ttu-id="92ae7-345">指定するシーケンス番号は、現在の基本シーケンス番号以上であることが必要です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-345">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <param name="reservation"><span data-ttu-id="92ae7-346">この再開領域で使用する予約情報を格納する <see cref="T:System.IO.Log.ReservationCollection" />。</span><span class="sxs-lookup"><span data-stu-id="92ae7-346">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this restart area.</span></span></param>
        <param name="callback"><span data-ttu-id="92ae7-347">再開領域の書き込みの完了時に呼び出されるオプションの非同期コールバック。</span><span class="sxs-lookup"><span data-stu-id="92ae7-347">An optional asynchronous callback, to be called when the restart area write is complete.</span></span></param>
        <param name="state"><span data-ttu-id="92ae7-348">この特定の再開領域非同期書き込み要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-348">A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.</span></span></param>
        <summary><span data-ttu-id="92ae7-349">派生クラスでオーバーライドされると、以前にシーケンス内で予約された領域を使用して、非同期の再開領域の書き込み操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-349">When overridden in a derived class, begins an asynchronous restart area write operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="92ae7-350">非同期の再開領域の書き込み処理を表す <see cref="T:System.IAsyncResult" />。まだ保留状態の場合もあります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-350">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous restart area write operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-351">再開領域の書き込み処理が完了しておりリソースを適切に解放できることを確認するために、このメソッドから返された <xref:System.IAsyncResult> を <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> メソッドに渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-351">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method, to assure that the restart area write operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="92ae7-352">非同期の再開領域の書き込み処理中にエラーが発生した場合、このメソッドから返される <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> を使用して <xref:System.IAsyncResult> メソッドを呼び出すまで、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-352">If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="92ae7-353">`data` パラメーターに格納されたデータは、レコードとして追加するために単一バイトの配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-353">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-354">ただし、レコードの読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-354">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="92ae7-355">この操作が正しく完了すると、基本シーケンス番号が更新されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-355">When the operation successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="92ae7-356">新しい基本シーケンス番号未満の番号を持つすべてのログ レコードは、アクセスできません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-356">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 <span data-ttu-id="92ae7-357"><xref:System.IO.Log.ReservationCollection> を指定すると、コレクションに格納されていた予約情報で以前に予約された領域が、書き込まれた再開領域により消費されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-357">If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</span></span> <span data-ttu-id="92ae7-358">このメソッドが成功すると、データを格納できる最も小さな予約が消費され、その予約がコレクションから削除されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-358">If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.</span></span>  
  
 <span data-ttu-id="92ae7-359">レコード シーケンスが破棄されている場合、または無効な引数を渡した場合、この操作内で例外が直ちにスローされます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-359">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="92ae7-360">I/O 要求時にディスク障害が発生した場合など、非同期追加要求中にエラーが発生した場合、<xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> メソッドが呼び出されたときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-360">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginWriteRestartArea">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWriteRestartArea (data As IList(Of ArraySegment(Of Byte)), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginWriteRestartArea (data, newBaseSequenceNumber, reservation, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-361">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-361">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="92ae7-362">新しい基本シーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-362">The new base sequence number.</span></span> <span data-ttu-id="92ae7-363">指定するシーケンス番号は、現在の基本シーケンス番号以上であることが必要です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-363">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <param name="reservation"><span data-ttu-id="92ae7-364">この再開領域で使用する予約情報を格納する <see cref="T:System.IO.Log.ReservationCollection" />。</span><span class="sxs-lookup"><span data-stu-id="92ae7-364">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this restart area.</span></span></param>
        <param name="callback"><span data-ttu-id="92ae7-365">再開領域の書き込みの完了時に呼び出されるオプションの非同期コールバック。</span><span class="sxs-lookup"><span data-stu-id="92ae7-365">An optional asynchronous callback, to be called when the restart area write is complete.</span></span></param>
        <param name="state"><span data-ttu-id="92ae7-366">この特定の再開領域非同期書き込み要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-366">A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.</span></span></param>
        <summary><span data-ttu-id="92ae7-367">派生クラスでオーバーライドされると、以前にシーケンス内で予約された領域を使用して、非同期の再開領域の書き込み操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-367">When overridden in a derived class, begins an asynchronous restart area write operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="92ae7-368">非同期の再開領域の書き込み処理を表す <see cref="T:System.IAsyncResult" />。まだ保留状態の場合もあります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-368">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous restart area write operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-369">再開領域の書き込み処理が完了しておりリソースを適切に解放できることを確認するために、このメソッドから返された <xref:System.IAsyncResult> を <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> メソッドに渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-369">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method to ensure that the restart area write operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="92ae7-370">非同期の再開領域の書き込み処理中にエラーが発生した場合、このメソッドから返される <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> を使用して <xref:System.IAsyncResult> メソッドを呼び出すまで、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-370">If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="92ae7-371">`data` パラメーターに格納されたデータは、レコードとして追加するために単一バイトの配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-371">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-372">ただし、レコードの読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-372">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="92ae7-373">この操作が正しく完了すると、基本シーケンス番号が更新されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-373">When the operation successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="92ae7-374">新しい基本シーケンス番号未満の番号を持つすべてのログ レコードは、アクセスできません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-374">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 <span data-ttu-id="92ae7-375"><xref:System.IO.Log.ReservationCollection> を指定すると、コレクションに格納されていた予約情報で以前に予約された領域が、書き込まれた再開領域により消費されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-375">If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</span></span> <span data-ttu-id="92ae7-376">このメソッドが成功すると、データを格納できる最も小さな予約が消費され、その予約がコレクションから削除されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-376">If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.</span></span>  
  
 <span data-ttu-id="92ae7-377">レコード シーケンスが破棄されている場合、または無効な引数を渡した場合、この操作内で例外が直ちにスローされます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-377">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="92ae7-378">I/O 要求時にディスク障害が発生した場合など、非同期追加要求中にエラーが発生した場合、<xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> メソッドが呼び出されたときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-378">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-379">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-379">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-380">再開領域の書き込み中に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-380">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-381">レコード シーケンスは、新しいレコードを格納するための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-381">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-382">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-382">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReservationCollection">
      <MemberSignature Language="C#" Value="public System.IO.Log.ReservationCollection CreateReservationCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Log.ReservationCollection CreateReservationCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.CreateReservationCollection" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateReservationCollection () As ReservationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::ReservationCollection ^ CreateReservationCollection();" />
      <MemberSignature Language="F#" Value="abstract member CreateReservationCollection : unit -&gt; System.IO.Log.ReservationCollection" Usage="iRecordSequence.CreateReservationCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.ReservationCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92ae7-383">派生クラスでオーバーライドされると、新しい <see cref="T:System.IO.Log.ReservationCollection" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-383">When overridden in a derived class, creates a new <see cref="T:System.IO.Log.ReservationCollection" />.</span></span></summary>
        <returns><span data-ttu-id="92ae7-384">新しく作成された <see cref="T:System.IO.Log.ReservationCollection" /> です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-384">The newly created <see cref="T:System.IO.Log.ReservationCollection" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-385">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-385">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndAppend (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndAppend(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAppend (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndAppend(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndAppend : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.EndAppend result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="92ae7-386">未処理の非同期 I/O 要求への参照。</span><span class="sxs-lookup"><span data-stu-id="92ae7-386">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="92ae7-387">派生クラスでオーバーライドされると、非同期の追加操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-387">When overridden in a derived class, ends an asynchronous append operation.</span></span></summary>
        <returns><span data-ttu-id="92ae7-388">追加されたログ レコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-388">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-389">このメソッドは、I/O 操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="92ae7-389">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="92ae7-390"><xref:System.IO.Log.IRecordSequence.EndAppend%2A> の呼び出し時に、I/O 要求間のディスク障害など非同期書き込み要求中に発生したエラーが現れます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-390">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.IRecordSequence.EndAppend%2A> is called.</span></span>  
  
 <span data-ttu-id="92ae7-391">このメソッドは、<xref:System.IAsyncResult> メソッドから返された各 <xref:System.IO.Log.IRecordSequence.BeginAppend%2A> について正確に 1 回呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-391">This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.IRecordSequence.BeginAppend%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-392">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-392">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-393">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-393">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndFlush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndFlush (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndFlush(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndFlush (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndFlush(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndFlush : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.EndFlush result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="92ae7-394">未処理の非同期 I/O 要求への参照。</span><span class="sxs-lookup"><span data-stu-id="92ae7-394">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="92ae7-395">派生クラスでオーバーライドされると、非同期のフラッシュ操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-395">When overridden in a derived class, ends an asynchronous flush operation.</span></span></summary>
        <returns><span data-ttu-id="92ae7-396">最後に書き込まれたレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-396">The sequence number of the last record written.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-397">このメソッドは、I/O 操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="92ae7-397">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="92ae7-398"><xref:System.IO.Log.IRecordSequence.EndFlush%2A> の呼び出し時に、I/O 要求間のディスク障害など非同期フラッシュ要求中に発生したエラーが現れます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-398">Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.IRecordSequence.EndFlush%2A> is called.</span></span>  
  
 <span data-ttu-id="92ae7-399">このメソッドは、<xref:System.IAsyncResult> メソッドから返された各 <xref:System.IO.Log.IRecordSequence.BeginFlush%2A> について正確に 1 回呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-399">This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.IRecordSequence.BeginFlush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-400">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-400">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-401">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-401">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndReserveAndAppend (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndReserveAndAppend(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReserveAndAppend (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndReserveAndAppend(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReserveAndAppend : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.EndReserveAndAppend result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="92ae7-402">未処理の非同期 I/O 要求への参照。</span><span class="sxs-lookup"><span data-stu-id="92ae7-402">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="92ae7-403">派生クラスでオーバーライドされると、非同期の予約および追加操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-403">When overridden in a derived class, ends an asynchronous reserve and append operation.</span></span></summary>
        <returns><span data-ttu-id="92ae7-404">追加されたログ レコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-404">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-405">このメソッドは、I/O 操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="92ae7-405">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="92ae7-406"><xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> の呼び出し時に、I/O 要求間のディスク障害など非同期書き込み要求中に発生したエラーが現れます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-406">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> is called.</span></span>  
  
 <span data-ttu-id="92ae7-407">このメソッドは、<xref:System.IAsyncResult> メソッドから返された各 <xref:System.IO.Log.IRecordSequence.BeginReserveAndAppend%2A> について正確に 1 回呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-407">This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.IRecordSequence.BeginReserveAndAppend%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-408">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-408">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-409">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-409">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndWriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndWriteRestartArea (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndWriteRestartArea(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWriteRestartArea (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndWriteRestartArea(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWriteRestartArea : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.EndWriteRestartArea result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="92ae7-410">未処理の非同期 I/O 要求への参照。</span><span class="sxs-lookup"><span data-stu-id="92ae7-410">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="92ae7-411">派生クラスでオーバーライドされると、非同期の再開領域の書き込み操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-411">When overridden in a derived class, ends an asynchronous restart area write operation.</span></span></summary>
        <returns><span data-ttu-id="92ae7-412">書き込まれたログ レコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-412">The sequence number of the written log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-413">このメソッドは、I/O 操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="92ae7-413">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="92ae7-414"><xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> の呼び出し時に、I/O 要求間のディスク障害など非同期書き込み要求中に発生したエラーが現れます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-414">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> is called.</span></span>  
  
 <span data-ttu-id="92ae7-415">このメソッドは、<xref:System.IAsyncResult> メソッドから返された各 <xref:System.IO.Log.IRecordSequence.BeginWriteRestartArea%2A> について正確に 1 回呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-415">This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.IRecordSequence.BeginWriteRestartArea%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-416">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-416">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-417">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-417">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92ae7-418">派生クラスでオーバーライドされると、追加したレコードが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-418">When overridden in a derived class, causes appended records to be written.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Function Flush () As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92ae7-419">派生クラスでオーバーライドされると、追加したすべてのレコードが書き込まれていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-419">When overridden in a derived class, ensures that all appended records have been written.</span></span></summary>
        <returns><span data-ttu-id="92ae7-420">最後に書き込まれたレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-420">The sequence number of the last record written.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-421">このメソッドを呼び出すことにより、<xref:System.IO.Log.IRecordSequence> に追加されたすべてのレコードが永続的に書き込まれたことを確認します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-421">Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.IRecordSequence> have been durably written.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-422">データのフラッシュ中に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-422">An I/O error occurred while flushing the data.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-423">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-423">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Flush (System.IO.Log.SequenceNumber sequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Flush(valuetype System.IO.Log.SequenceNumber sequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function Flush (sequenceNumber As SequenceNumber) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Flush(System::IO::Log::SequenceNumber sequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member Flush : System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Flush sequenceNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="sequenceNumber"><span data-ttu-id="92ae7-424">書き込む必要のある最新レコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-424">The sequence number of the latest record that must be written.</span></span> <span data-ttu-id="92ae7-425">この <see cref="T:System.IO.Log.SequenceNumber" /> が無効な場合、すべてのレコードを書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-425">If this <see cref="T:System.IO.Log.SequenceNumber" /> is invalid, then all records must be written.</span></span></param>
        <summary><span data-ttu-id="92ae7-426">派生クラスでオーバーライドされると、指定のシーケンス番号以下のシーケンス番号を持つすべての追加されたレコードが永続的に書き込まれたことを確認します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-426">When overridden in a derived class, ensures that all appended records up to and including the record with the specified sequence number have been durably written.</span></span></summary>
        <returns><span data-ttu-id="92ae7-427">最後に書き込まれたレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-427">The sequence number of the last record written.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-428">このメソッドを呼び出すと、指定のシーケンス番号以下のシーケンス番号を持つすべてのレコードが永続的に書き込まれたことが確認されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-428">Calling this method ensures that all records with sequence numbers up to and including the specified sequence number have been durably written.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-429">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-429">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-430">データのフラッシュ中に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-430">An I/O error occurred while flushing the data.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-431">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-431">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LastSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber LastSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber LastSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.LastSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber LastSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.LastSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.IRecordSequence.LastSequenceNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92ae7-432">派生クラスでオーバーライドされると、追加された最後のレコードより大きいシーケンス番号を取得します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-432">When overridden in a derived class, gets the sequence number which is greater than the last record appended.</span></span></summary>
        <value><span data-ttu-id="92ae7-433">追加された最後のレコードのシーケンス番号より大きいシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-433">A sequence number which is greater than the last record appended.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-434">このプロパティには、最後に追加されたレコードのシーケンス番号を超えることが保証されるシーケンス番号が格納されています。</span><span class="sxs-lookup"><span data-stu-id="92ae7-434">This property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record.</span></span> <span data-ttu-id="92ae7-435">有効なシーケンス番号は、<xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> 以上、<xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A> 未満です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-435">Valid sequence numbers are greater than or equal to <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92ae7-436"><xref:System.IO.Log.LogRecordSequence> インスタンスを使用すると、レコードがログにフラッシュされるまで、<xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A> の値が期限切れになる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-436">When using a <xref:System.IO.Log.LogRecordSequence> instance, the <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A> value can become out of date until records are flushed to the log.</span></span> <span data-ttu-id="92ae7-437">レコードのフラッシュの詳細については、<xref:System.IO.Log.IRecordSequence.Flush%2A> と <xref:System.IO.Log.RecordAppendOptions> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="92ae7-437">See <xref:System.IO.Log.IRecordSequence.Flush%2A> and <xref:System.IO.Log.RecordAppendOptions> for more information on flushing records.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-438">シーケンスが破棄された後にプロパティがアクセスされました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-438">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaximumRecordLength">
      <MemberSignature Language="C#" Value="public long MaximumRecordLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumRecordLength" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.MaximumRecordLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaximumRecordLength As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumRecordLength { long get(); };" />
      <MemberSignature Language="F#" Value="member this.MaximumRecordLength : int64" Usage="System.IO.Log.IRecordSequence.MaximumRecordLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92ae7-439">派生クラスでオーバーライドされると、このシーケンスに対して追加または読み取りが可能な最大レコード サイズのバイト数を取得します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-439">When overridden in a derived class, gets the size of the largest record that can be appended to or read from this sequence, in bytes.</span></span></summary>
        <value><span data-ttu-id="92ae7-440">このシーケンスに対して追加または読み取りが可能な最大レコード サイズのバイト数。</span><span class="sxs-lookup"><span data-stu-id="92ae7-440">The size of the largest record that can be appended to or read from this sequence, in bytes.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-441">シーケンスが破棄された後にプロパティがアクセスされました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-441">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadLogRecords">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt; ReadLogRecords (System.IO.Log.SequenceNumber start, System.IO.Log.LogRecordEnumeratorType logRecordEnum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogRecord&gt; ReadLogRecords(valuetype System.IO.Log.SequenceNumber start, valuetype System.IO.Log.LogRecordEnumeratorType logRecordEnum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLogRecords (start As SequenceNumber, logRecordEnum As LogRecordEnumeratorType) As IEnumerable(Of LogRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogRecord ^&gt; ^ ReadLogRecords(System::IO::Log::SequenceNumber start, System::IO::Log::LogRecordEnumeratorType logRecordEnum);" />
      <MemberSignature Language="F#" Value="abstract member ReadLogRecords : System.IO.Log.SequenceNumber * System.IO.Log.LogRecordEnumeratorType -&gt; seq&lt;System.IO.Log.LogRecord&gt;" Usage="iRecordSequence.ReadLogRecords (start, logRecordEnum)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="logRecordEnum" Type="System.IO.Log.LogRecordEnumeratorType" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="92ae7-442">読み取りを開始する先頭レコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-442">The sequence number of the first record where the reading starts.</span></span></param>
        <param name="logRecordEnum"><span data-ttu-id="92ae7-443"><see cref="T:System.IO.Log.LogRecordEnumeratorType" /> からレコードを読み取る方法 (つまり、順方向または逆方向) を指定する有効な <see cref="T:System.IO.Log.LogRecordSequence" /> 値。</span><span class="sxs-lookup"><span data-stu-id="92ae7-443">A valid <see cref="T:System.IO.Log.LogRecordEnumeratorType" /> value that specifies the manner (that is, forward or backward) in which records should be read from a <see cref="T:System.IO.Log.LogRecordSequence" />.</span></span></param>
        <summary><span data-ttu-id="92ae7-444">派生クラスでオーバーライドされると、シーケンス内のレコードの列挙可能なコレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-444">When overridden in a derived class, returns an enumerable collection of records in the sequence.</span></span></summary>
        <returns><span data-ttu-id="92ae7-445">シーケンス内のレコードの列挙可能なコレクション。</span><span class="sxs-lookup"><span data-stu-id="92ae7-445">An enumerable collection of records in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-446">派生クラスでオーバーライドされると、シーケンス内のレコードの列挙可能なコレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-446">When overridden in a derived class, returns an enumerable collection of records in the sequence.</span></span> <span data-ttu-id="92ae7-447">列挙されたレコードの順序は、`logRecordEnum` パラメーター値に依存します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-447">The order of the enumerated records depends on the value of the `logRecordEnum` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92ae7-448">このサンプルは、<xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> メソッドの使い方を示しています。</span><span class="sxs-lookup"><span data-stu-id="92ae7-448">This sample demonstrates the use of the <xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> method.</span></span>  
  
```csharp  
using System;  
 using System.IO;  
 using System.IO.Log;  
  
 class ReadRecordsSample  
 {  
     static SequenceNumber AppendRecord(IRecordSequence sequence,  
                                        string message,  
                                        SequenceNumber user,  
                                        SequenceNumber previous)  
     {  
         MemoryStream data = new MemoryStream();  
         BinaryWriter writer = new BinaryWriter(data);  
         writer.Write(message);  
  
         ArraySegment<byte>[] segments;  
         segments = new ArraySegment<byte>[1];  
         segments[0] = new ArraySegment(data.GetBuffer(),  
                                        0,  
                                        Data.Length);  
  
         return sequence.Append(segments,  
                                user,  
                                previous,  
                                WriteFlags.None);  
     }  
  
     public static void Main(string[] args)  
     {  
         IRecordSequence sequence;  
         sequence = new FileIRecordSequence(args[0]);  
  
         SequenceNumber a, b, c, d;  
  
         a = AppendRecord(sequence,  
                          "This is record A",  
                          SequenceNumber.Invalid,  
                          SequenceNumber.Invalid);  
         Console.WriteLine($"Record A has sequence number {a}");  
  
         b = AppendRecord(sequence,  
                          "This is record B",  
                          a,  
                          a);  
         Console.WriteLine($"Record B has sequence number {b}");  
  
         c = AppendRecord(sequence,  
                          "This is record C",  
                          a,  
                          a);  
         Console.WriteLine($"Record C has sequence number {c}");  
  
         d = AppendRecord(sequence,  
                          "This is record D",  
                          b,  
                          c);  
         Console.WriteLine($"Record D has sequence number {d}");  
  
         foreach(LogRecord record in  
                 sequence.ReadLogRecords(a, ReadDirection.Forward))  
         {  
             BinaryReader reader = new BinaryReader(record.Data);  
             Console.WriteLine($"{record.SequenceNumber}: {reader.ReadString()}");  
         }  
  
         foreach(LogRecord record in  
                 sequence.ReadLogRecords(d, ReadDirection.User))  
         {  
             BinaryReader reader = new BinaryReader(record.Data);  
             Console.WriteLine($"{record.SequenceNumber}: {reader.ReadString()}");  
         }  
  
         foreach(LogRecord record in  
                 sequence.ReadLogRecords(d, ReadDirection.Previous))  
         {  
             BinaryReader reader = new BinaryReader(record.Data);  
             Console.WriteLine($"{record.SequenceNumber}: {reader.ReadString()}");  
         }  
     }  
       }  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-449">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-449">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-450">レコードの読み取り時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-450">An I/O error occurred while reading the record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-451">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-451">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadRestartAreas">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt; ReadRestartAreas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogRecord&gt; ReadRestartAreas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReadRestartAreas" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadRestartAreas () As IEnumerable(Of LogRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogRecord ^&gt; ^ ReadRestartAreas();" />
      <MemberSignature Language="F#" Value="abstract member ReadRestartAreas : unit -&gt; seq&lt;System.IO.Log.LogRecord&gt;" Usage="iRecordSequence.ReadRestartAreas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92ae7-452">派生クラスでオーバーライドされると、シーケンスの再開領域の列挙可能なコレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-452">When overridden in a derived class, returns an enumerable collection of the restart areas in the sequence.</span></span></summary>
        <returns><span data-ttu-id="92ae7-453">シーケンス内の再開領域の列挙可能なコレクション。</span><span class="sxs-lookup"><span data-stu-id="92ae7-453">An enumerable collection of the restart areas in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-454">再開領域では、シーケンス番号の逆順で (大きなシーケンス番号から小さなシーケンス番号に向かって) 列挙されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-454">The restart areas are enumerated in reverse sequence number order, that is, from the highest sequence number to the lowest sequence number.</span></span> <span data-ttu-id="92ae7-455">最後のシーケンス番号と基本シーケンス番号の間のシーケンス番号を持つ再開領域のみが列挙されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-455">Only restart areas with sequence numbers between the last sequence number and the base sequence number are enumerated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92ae7-456"><xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> を格納しているログ エクステントが破損した場合、このメソッドは <xref:System.IO.IOException> をスローし、「予期しない I/O 例外のため、要求は実行されませんでした。」というエラー メッセージを示すことがあります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-456">If the log extent containing the <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> becomes corrupted, this method can throw an <xref:System.IO.IOException> with the error message "The request could not be performed because of an unexpected I/O exception.</span></span> <span data-ttu-id="92ae7-457">エラー コード 80070026 が返されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-457">The following error code was returned: '80070026'".</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-458">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-458">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-459">レコードの読み取り時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-459">An I/O error occurred while reading the record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-460">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-460">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReserveAndAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92ae7-461">派生クラスでオーバーライドされると、単一の予約を自動的に行って、シーケンスにレコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-461">When overridden in a derived class, automatically makes a single reservation and appends a record to the sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber ReserveAndAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, params long[] reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber ReserveAndAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ReserveAndAppend (data As ArraySegment(Of Byte), nextUndoRecord As SequenceNumber, previousRecord As SequenceNumber, recordAppendOptions As RecordAppendOptions, reservationCollection As ReservationCollection, ParamArray reservations As Long()) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber ReserveAndAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, ... cli::array &lt;long&gt; ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member ReserveAndAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.ReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-462">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-462">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="92ae7-463">ユーザー指定の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-463">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="92ae7-464">以前の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-464">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="92ae7-465">データの書き込み方法を指定する <see cref="T:System.IO.Log.RecordAppendOptions" /> の有効な値。</span><span class="sxs-lookup"><span data-stu-id="92ae7-465">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservationCollection"><span data-ttu-id="92ae7-466">予約を作成するコレクションを格納する <see cref="T:System.IO.Log.ReservationCollection" />。</span><span class="sxs-lookup"><span data-stu-id="92ae7-466">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the collection to make reservations in.</span></span></param>
        <param name="reservations"><span data-ttu-id="92ae7-467">作成する予約のバイト数。</span><span class="sxs-lookup"><span data-stu-id="92ae7-467">The reservations to make, in bytes.</span></span></param>
        <summary><span data-ttu-id="92ae7-468">派生クラスでオーバーライドされると、単一の予約を自動的に行って、シーケンスにレコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-468">When overridden in a derived class, automatically makes a single reservation and appends a record to the sequence.</span></span></summary>
        <returns><span data-ttu-id="92ae7-469">追加されたログ レコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-469">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-470">`data` パラメーターに格納されたデータは、レコードとして追加するために単一バイトの配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-470">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-471">ただし、レコードの読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-471">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="92ae7-472">指定の予約情報は、レコード追加操作を含む分割不可能な操作内で、提供された予約コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-472">The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</span></span> <span data-ttu-id="92ae7-473">追加が失敗した場合、領域は予約されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-473">If the append fails, no space is reserved.</span></span>  
  
 <span data-ttu-id="92ae7-474">このメソッドは通常、レコードの書き込みが終わる前に完了できます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-474">Normally, this method may complete before the record has been written.</span></span> <span data-ttu-id="92ae7-475">レコードが書き込まれたことを確認するために、<xref:System.IO.Log.RecordAppendOptions.ForceFlush> パラメーターを使用して `recordAppendOptions` フラグを指定するか、<xref:System.IO.Log.IRecordSequence.Flush%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-475">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-476">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-476">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-477">レコードの追加時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-477">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-478">レコード シーケンスは、新しいレコードの格納または予約のための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-478">The record sequence could not make enough free space to contain the new record, or to make the reservation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-479">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-479">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber ReserveAndAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, params long[] reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber ReserveAndAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ReserveAndAppend (data As IList(Of ArraySegment(Of Byte)), nextUndoRecord As SequenceNumber, previousRecord As SequenceNumber, recordAppendOptions As RecordAppendOptions, reservationCollection As ReservationCollection, ParamArray reservations As Long()) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber ReserveAndAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, ... cli::array &lt;long&gt; ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member ReserveAndAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.ReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-480">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-480">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="92ae7-481">ユーザー指定の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-481">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="92ae7-482">以前の順序で次のレコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-482">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="92ae7-483">データの書き込み方法を指定する <see cref="T:System.IO.Log.RecordAppendOptions" /> の有効な値。</span><span class="sxs-lookup"><span data-stu-id="92ae7-483">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservationCollection"><span data-ttu-id="92ae7-484">予約を作成する予約コレクション。</span><span class="sxs-lookup"><span data-stu-id="92ae7-484">The reservation collection to make reservations in.</span></span></param>
        <param name="reservations"><span data-ttu-id="92ae7-485">作成する予約のバイト数。</span><span class="sxs-lookup"><span data-stu-id="92ae7-485">The reservations to make, in bytes.</span></span></param>
        <summary><span data-ttu-id="92ae7-486">派生クラスでオーバーライドされると、単一の予約を自動的に行って、シーケンスにレコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-486">When overridden in a derived class, automatically makes a single reservation and appends a record to the sequence.</span></span></summary>
        <returns><span data-ttu-id="92ae7-487">追加されたログ レコードのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-487">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-488">`data` パラメーターに格納されたデータは、レコードとして追加するために単一バイトの配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-488">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-489">ただし、レコードの読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-489">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="92ae7-490">指定の予約情報は、レコード追加操作を含む分割不可能な操作内で、提供された予約コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-490">The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</span></span> <span data-ttu-id="92ae7-491">追加が失敗した場合、領域は予約されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-491">If the append fails, no space is reserved.</span></span>  
  
 <span data-ttu-id="92ae7-492">このメソッドは通常、レコードの書き込みが終わる前に完了できます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-492">Normally, this method may complete before the record has been written.</span></span> <span data-ttu-id="92ae7-493">レコードが書き込まれたことを確認するために、<xref:System.IO.Log.RecordAppendOptions.ForceFlush> パラメーターを使用して `recordAppendOptions` フラグを指定するか、<xref:System.IO.Log.IRecordSequence.Flush%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-493">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-494">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-494">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-495">レコードの追加時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-495">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-496">レコード シーケンスは、新しいレコードの格納または予約のための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-496">The record sequence could not make enough free space to contain the new record, or to make the reservation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-497">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-497">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReservedBytes">
      <MemberSignature Language="C#" Value="public long ReservedBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReservedBytes" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.ReservedBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReservedBytes As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReservedBytes { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ReservedBytes : int64" Usage="System.IO.Log.IRecordSequence.ReservedBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92ae7-498">派生クラスでオーバーライドされると、予約されている合計バイト数を取得します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-498">When overridden in a derived class, gets the total number of bytes that have been reserved.</span></span></summary>
        <value><span data-ttu-id="92ae7-499">このレコード シーケンス内でなされたすべての予約の合計サイズ。</span><span class="sxs-lookup"><span data-stu-id="92ae7-499">The total size of all reservations made in this record sequence.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-500">シーケンスが破棄された後にプロパティがアクセスされました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-500">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RestartSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber RestartSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber RestartSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.RestartSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RestartSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber RestartSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.RestartSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.IRecordSequence.RestartSequenceNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92ae7-501">派生クラスでオーバーライドされると、直前に書き込まれた再開領域のシーケンス番号を取得します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-501">When overridden in a derived class, gets the sequence number of the most recently written restart area.</span></span></summary>
        <value><span data-ttu-id="92ae7-502">直前に書き込まれた再開領域のシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-502">The sequence number of the most recently written restart area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-503">再開領域は、クライアントの最後のチェックポイント操作に関する情報を一時的に保存するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-503">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="92ae7-504">回復処理が必要な場合、最後のチェックポイント操作から再開領域を解析し、すべてのデータを取得できます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-504">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="92ae7-505">このデータは、回復プロセスで使用できるようにトランザクション テーブルおよびダーティ ページ テーブルを初期化し、ファイル テーブルを開きます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-505">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-506">シーケンスが破棄された後にプロパティがアクセスされました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-506">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RetryAppend">
      <MemberSignature Language="C#" Value="public bool RetryAppend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RetryAppend" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.RetryAppend" />
      <MemberSignature Language="VB.NET" Value="Public Property RetryAppend As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RetryAppend { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RetryAppend : bool with get, set" Usage="System.IO.Log.IRecordSequence.RetryAppend" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92ae7-507">ログがいっぱいの場合に、追加を自動的に再試行するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-507">Gets or sets a value indicating whether appends are automatically retried if the log is full.</span></span></summary>
        <value><span data-ttu-id="92ae7-508">ログがいっぱいの場合に追加の再試行を自動的に行う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="92ae7-508"><see langword="true" /> if appends are automatically retried if the log is full; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="92ae7-509">既定では、 <see langword="true" />です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-509">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-510">このプロパティ値が `true` である場合で、シーケンス内に十分な領域がないために <xref:System.IO.Log.IRecordSequence.Append%2A> の呼び出しが失敗したときは、レコード シーケンスが領域の解放を試みた後、追加の再試行を行います。</span><span class="sxs-lookup"><span data-stu-id="92ae7-510">If the value of this property is `true`, and an <xref:System.IO.Log.IRecordSequence.Append%2A> call fails because there is not enough space in the sequence, the record sequence will try to free space and retry the append.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-511">シーケンスが破棄された後にプロパティがアクセスされました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-511">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TailPinned">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt; TailPinned;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IO.Log.TailPinnedEventArgs&gt; TailPinned" />
      <MemberSignature Language="DocId" Value="E:System.IO.Log.IRecordSequence.TailPinned" />
      <MemberSignature Language="VB.NET" Value="Event TailPinned As EventHandler(Of TailPinnedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IO::Log::TailPinnedEventArgs ^&gt; ^ TailPinned;" />
      <MemberSignature Language="F#" Value="member this.TailPinned : EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt; " Usage="member this.TailPinned : System.EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92ae7-512">レコード シーケンスで末尾を前方に移動する必要があると判断された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-512">Occurs when the record sequence determines that the tail must be moved forward.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-513">このイベントは、レコード シーケンスが領域を使い果たしたときに発行できます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-513">You can fire this event when the record sequence has run out of space.</span></span> <span data-ttu-id="92ae7-514">このイベントが発行されると、シーケンスの末尾 (つまり、基本シーケンス番号) が領域の解放のために前方に移動します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-514">When this event is fired, the tail of the sequence (that is, the base sequence number) is moved forward to free up space.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRestartArea">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92ae7-515">派生クラスでオーバーライドされると、<see cref="T:System.IO.Log.IRecordSequence" /> に再開領域を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-515">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-516">再開領域は、クライアントの最後のチェックポイント操作に関する情報を一時的に保存するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-516">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="92ae7-517">回復処理が必要な場合、最後のチェックポイント操作から再開領域を解析し、すべてのデータを取得できます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-517">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="92ae7-518">このデータは、回復プロセスで使用できるようにトランザクション テーブルおよびダーティ ページ テーブルを初期化し、ファイル テーブルを開きます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-518">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="92ae7-519">再開領域は、<xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> メソッドを使用して読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-519">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte)) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : ArraySegment&lt;byte&gt; -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-520">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-520">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <summary><span data-ttu-id="92ae7-521">派生クラスでオーバーライドされると、<see cref="T:System.IO.Log.IRecordSequence" /> に再開領域を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-521">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <returns><span data-ttu-id="92ae7-522">書き込まれた再開領域のシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-522">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-523">再開領域は、クライアントの最後のチェックポイント操作に関する情報を一時的に保存するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-523">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="92ae7-524">Common Log File System (CLFS) は、少なくとも 1 つの有効な領域が常に使用可能であることを保証するために 2 つの再開領域を維持します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-524">The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available.</span></span> <span data-ttu-id="92ae7-525">回復処理が必要な場合、CLFS は最後のチェックポイント操作から再開領域とすべてのデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="92ae7-525">When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation.</span></span> <span data-ttu-id="92ae7-526">このデータは、回復プロセスで使用できるようにトランザクション テーブルおよびダーティ ページ テーブルを初期化し、ファイル テーブルを開きます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-526">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span>  
  
 <span data-ttu-id="92ae7-527">再開領域は、<xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> メソッドを使用して読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-527">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="92ae7-528">バイト配列セグメント内のデータは、レコードとして追加するために単一のバイト配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-528">The data in the byte array segments will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-529">レコード領域の読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-529">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-530">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-530">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-531">再開領域の書き込み中に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-531">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-532">レコード シーケンスは、新しい再開領域を格納するための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-532">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-533">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-533">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte))) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-534">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-534">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <summary><span data-ttu-id="92ae7-535">派生クラスでオーバーライドされると、<see cref="T:System.IO.Log.IRecordSequence" /> に再開領域を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-535">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <returns><span data-ttu-id="92ae7-536">書き込まれた再開領域のシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-536">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-537">再開領域は、クライアントの最後のチェックポイント操作に関する情報を一時的に保存するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-537">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="92ae7-538">回復処理が必要な場合、最後のチェックポイント操作から再開領域を解析し、すべてのデータを取得できます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-538">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="92ae7-539">このデータは、回復プロセスで使用できるようにトランザクション テーブルおよびダーティ ページ テーブルを初期化し、ファイル テーブルを開きます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-539">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="92ae7-540">再開領域は、<xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> メソッドを使用して読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-540">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="92ae7-541">バイト配列セグメント内のデータは、レコードとして追加するために単一のバイト配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-541">The data in the byte array segments will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-542">レコード領域の読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-542">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-543">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-543">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-544">再開領域の書き込み中に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-544">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-545">レコード シーケンスは、新しい再開領域を格納するための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-545">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-546">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-546">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte), newBaseSequenceNumber As SequenceNumber) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea (data, newBaseSequenceNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-547">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-547">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="92ae7-548">新しい基本シーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-548">The new base sequence number.</span></span> <span data-ttu-id="92ae7-549">指定するシーケンス番号は、現在の基本シーケンス番号以上であることが必要です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-549">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <summary><span data-ttu-id="92ae7-550">派生クラスでオーバーライドされると、<see cref="T:System.IO.Log.IRecordSequence" /> に再開領域を書き込み、基本シーケンス番号を更新します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-550">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" /> and updates the base sequence number.</span></span></summary>
        <returns><span data-ttu-id="92ae7-551">書き込まれた再開領域のシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-551">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-552">再開領域は、クライアントの最後のチェックポイント操作に関する情報を一時的に保存するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-552">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="92ae7-553">回復処理が必要な場合、最後のチェックポイント操作から再開領域を解析し、すべてのデータを取得できます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-553">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="92ae7-554">このデータは、回復プロセスで使用できるようにトランザクション テーブルおよびダーティ ページ テーブルを初期化し、ファイル テーブルを開きます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-554">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="92ae7-555">再開領域は、<xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> メソッドを使用して読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-555">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="92ae7-556">再開領域が書き込まれた場合、バイト配列セグメント内のデータはレコードとして追加するために単一のバイト配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-556">When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-557">レコード領域の読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-557">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 <span data-ttu-id="92ae7-558">このメソッドが正しく完了すると、基本シーケンス番号が更新されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-558">When this method successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="92ae7-559">新しい基本シーケンス番号未満の番号を持つすべてのログ レコードは、アクセスできません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-559">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-560">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-560">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-561">再開領域の書き込み中に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-561">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-562">レコード シーケンスは、新しい再開領域を格納するための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-562">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-563">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-563">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte)), newBaseSequenceNumber As SequenceNumber) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea (data, newBaseSequenceNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-564">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-564">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="92ae7-565">新しい基本シーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-565">The new base sequence number.</span></span> <span data-ttu-id="92ae7-566">指定するシーケンス番号は、現在の基本シーケンス番号以上であることが必要です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-566">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <summary><span data-ttu-id="92ae7-567">派生クラスでオーバーライドされると、<see cref="T:System.IO.Log.IRecordSequence" /> に再開領域を書き込み、基本シーケンス番号を更新します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-567">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" /> and updates the base sequence number.</span></span></summary>
        <returns><span data-ttu-id="92ae7-568">書き込まれた再開領域のシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-568">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-569">再開領域は、クライアントの最後のチェックポイント操作に関する情報を一時的に保存するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-569">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="92ae7-570">回復処理が必要な場合、最後のチェックポイント操作から再開領域を解析し、すべてのデータを取得できます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-570">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="92ae7-571">このデータは、回復プロセスで使用できるようにトランザクション テーブルおよびダーティ ページ テーブルを初期化し、ファイル テーブルを開きます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-571">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="92ae7-572">再開領域は、<xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> メソッドを使用して読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-572">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="92ae7-573">再開領域が書き込まれた場合、バイト配列セグメント内のデータはレコードとして追加するために単一のバイト配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-573">When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-574">レコード領域の読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-574">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 <span data-ttu-id="92ae7-575">このメソッドが正しく完了すると、基本シーケンス番号が更新されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-575">When this method successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="92ae7-576">新しい基本シーケンス番号未満の番号を持つすべてのログ レコードは、アクセスできません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-576">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-577">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-577">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-578">再開領域の書き込み中に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-578">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-579">レコード シーケンスは、新しい再開領域を格納するための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-579">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-580">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-580">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea (data, newBaseSequenceNumber, reservation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-581">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-581">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="92ae7-582">新しい基本シーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-582">The new base sequence number.</span></span> <span data-ttu-id="92ae7-583">指定するシーケンス番号は、現在の基本シーケンス番号以上であることが必要です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-583">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <param name="reservation"><span data-ttu-id="92ae7-584">この再開領域で使用する予約情報を格納する <see cref="T:System.IO.Log.ReservationCollection" />。</span><span class="sxs-lookup"><span data-stu-id="92ae7-584">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this restart area.</span></span></param>
        <summary><span data-ttu-id="92ae7-585">派生クラスでオーバーライドされると、予約を使用して <see cref="T:System.IO.Log.IRecordSequence" /> に再開領域を書き込み、基本シーケンス番号を更新します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-585">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" /> using a reservation, and updates the base sequence number.</span></span></summary>
        <returns><span data-ttu-id="92ae7-586">書き込まれた再開領域のシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-586">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-587">再開領域は、クライアントの最後のチェックポイント操作に関する情報を一時的に保存するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-587">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="92ae7-588">回復処理が必要な場合、最後のチェックポイント操作から再開領域を解析し、すべてのデータを取得できます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-588">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="92ae7-589">このデータは、回復プロセスで使用できるようにトランザクション テーブルおよびダーティ ページ テーブルを初期化し、ファイル テーブルを開きます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-589">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="92ae7-590">再開領域は、<xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> メソッドを使用して読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-590">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="92ae7-591">再開領域が書き込まれた場合、バイト配列セグメント内のデータはレコードとして追加するために単一のバイト配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-591">When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-592">レコード領域の読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-592">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 <span data-ttu-id="92ae7-593">予約を指定すると、コレクションに格納されていた予約情報で以前に予約された領域が書き込まれた再開領域により消費されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-593">If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</span></span> <span data-ttu-id="92ae7-594">このメソッドが成功すると、データを格納できる最も小さな予約が消費され、その予約がコレクションから削除されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-594">If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.</span></span>  
  
 <span data-ttu-id="92ae7-595">このメソッドが正しく完了すると、基本シーケンス番号が更新されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-595">When this method successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="92ae7-596">新しい基本シーケンス番号未満の番号を持つすべてのログ レコードは、アクセスできません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-596">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 <span data-ttu-id="92ae7-597">レコード シーケンスが破棄されている場合、または無効な引数を渡した場合、この操作内で例外が直ちにスローされます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-597">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="92ae7-598">I/O 要求時にディスク障害が発生した場合など、非同期追加要求中にエラーが発生した場合、<xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> メソッドが呼び出されたときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-598">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-599">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-599">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-600">再開領域の書き込み中に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-600">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-601">レコード シーケンスは、新しい再開領域を格納するための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-601">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-602">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-602">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte)), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea (data, newBaseSequenceNumber, reservation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="92ae7-603">レコードとして連結および追加されるバイト配列セグメントのリスト。</span><span class="sxs-lookup"><span data-stu-id="92ae7-603">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="92ae7-604">新しい基本シーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-604">The new base sequence number.</span></span> <span data-ttu-id="92ae7-605">指定するシーケンス番号は、現在の基本シーケンス番号以上であることが必要です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-605">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <param name="reservation"><span data-ttu-id="92ae7-606">この再開領域で使用する予約情報を格納する <see cref="T:System.IO.Log.ReservationCollection" />。</span><span class="sxs-lookup"><span data-stu-id="92ae7-606">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this restart area.</span></span></param>
        <summary><span data-ttu-id="92ae7-607">派生クラスでオーバーライドされると、予約を使用して <see cref="T:System.IO.Log.IRecordSequence" /> に再開領域を書き込み、基本シーケンス番号を更新します。</span><span class="sxs-lookup"><span data-stu-id="92ae7-607">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" /> using a reservation, and updates the base sequence number.</span></span></summary>
        <returns><span data-ttu-id="92ae7-608">書き込まれた再開領域のシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="92ae7-608">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ae7-609">再開領域は、クライアントの最後のチェックポイント操作に関する情報を一時的に保存するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-609">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="92ae7-610">回復処理が必要な場合、最後のチェックポイント操作から再開領域を解析し、すべてのデータを取得できます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-610">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="92ae7-611">このデータは、回復プロセスで使用できるようにトランザクション テーブルおよびダーティ ページ テーブルを初期化し、ファイル テーブルを開きます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-611">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="92ae7-612">再開領域は、<xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> メソッドを使用して読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-612">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="92ae7-613">再開領域が書き込まれた場合、バイト配列セグメント内のデータはレコードとして追加するために単一のバイト配列に連結されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-613">When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="92ae7-614">レコード領域の読み取り時にデータを分割して配列セグメントに戻す準備は実施されません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-614">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 <span data-ttu-id="92ae7-615">予約を指定すると、コレクションに格納されていた予約情報で以前に予約された領域が書き込まれた再開領域により消費されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-615">If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</span></span> <span data-ttu-id="92ae7-616">このメソッドが成功すると、データを格納できる最も小さな予約が消費され、その予約がコレクションから削除されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-616">If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.</span></span>  
  
 <span data-ttu-id="92ae7-617">このメソッドが正しく完了すると、基本シーケンス番号が更新されます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-617">When this method successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="92ae7-618">新しい基本シーケンス番号未満の番号を持つすべてのログ レコードは、アクセスできません。</span><span class="sxs-lookup"><span data-stu-id="92ae7-618">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 <span data-ttu-id="92ae7-619">レコード シーケンスが破棄されている場合、または無効な引数を渡した場合、この操作内で例外が直ちにスローされます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-619">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="92ae7-620">I/O 要求時にディスク障害が発生した場合など、非同期追加要求中にエラーが発生した場合、<xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> メソッドが呼び出されたときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="92ae7-620">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92ae7-621">1 つ以上の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="92ae7-621">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="92ae7-622">再開領域の書き込み中に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-622">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="92ae7-623">レコード シーケンスは、新しい再開領域を格納するための十分な空き領域を作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="92ae7-623">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="92ae7-624">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="92ae7-624">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
