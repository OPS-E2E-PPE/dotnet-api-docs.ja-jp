<Type Name="ReservationCollection" FullName="System.IO.Log.ReservationCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5e92f46778c60df82ff95eedf0bd6328a9760f43" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78827487" /></Metadata><TypeSignature Language="C#" Value="public abstract class ReservationCollection : System.Collections.Generic.ICollection&lt;long&gt;, System.Collections.Generic.IEnumerable&lt;long&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ReservationCollection extends System.Object implements class System.Collections.Generic.ICollection`1&lt;int64&gt;, class System.Collections.Generic.IEnumerable`1&lt;int64&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.ReservationCollection" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ReservationCollection&#xA;Implements ICollection(Of Long), IEnumerable(Of Long)" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReservationCollection abstract : System::Collections::Generic::ICollection&lt;long&gt;, System::Collections::Generic::IEnumerable&lt;long&gt;" />
  <TypeSignature Language="F#" Value="type ReservationCollection = class&#xA;    interface ICollection&lt;int64&gt;&#xA;    interface seq&lt;int64&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Int64&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Int64&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="1f715-101">レコード シーケンスで行われた領域予約のコレクションを管理します。</span><span class="sxs-lookup"><span data-stu-id="1f715-101">Manages the collection of space reservations made in a record sequence.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f715-102">このクラスは、レコード シーケンスで行われる一連の予約領域を表します。</span><span class="sxs-lookup"><span data-stu-id="1f715-102">This class represents a set of reservation areas that are made in a record sequence.</span></span> <span data-ttu-id="1f715-103">コレクションに項目を追加すると、新しい予約が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="1f715-103">Adding items to the collection allocates new reservations.</span></span> <span data-ttu-id="1f715-104">コレクションから項目を削除すると、予約が解放されます。</span><span class="sxs-lookup"><span data-stu-id="1f715-104">Removing items from the collection frees those reservations.</span></span>  
  
 <span data-ttu-id="1f715-105">ログに書き込む予定のデータがある場合、アプリケーションはログ内に領域を予約しますが、直ちに書き込むことはできません。</span><span class="sxs-lookup"><span data-stu-id="1f715-105">An application reserves space in the log when it has data that is to be written to the log in the future, but cannot write it immediately.</span></span> <span data-ttu-id="1f715-106">予約することにより、ログに書き込む予定のデータを確実に書き込むことができます。</span><span class="sxs-lookup"><span data-stu-id="1f715-106">Reservations provide a guarantee that the data can be written to the log when the data is available to be written.</span></span> <span data-ttu-id="1f715-107">ログを使用する場合、アプリケーションでは、多くの場合、1つまたは複数のログレコードがマーシャリング領域に予約されます。</span><span class="sxs-lookup"><span data-stu-id="1f715-107">When using logs, applications often reserve one or more log records in a marshaling area.</span></span> <span data-ttu-id="1f715-108">レコードは追加する前に予約する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1f715-108">You must reserve records prior to appending them.</span></span>  
  
 <span data-ttu-id="1f715-109">予約により、データのコミットは操作が完了してから行い、操作が未完了の場合は変更をロールバックするという処理を確実にすることができます。</span><span class="sxs-lookup"><span data-stu-id="1f715-109">Reservations can be used to guarantee that an operation can be completed before the data is committed; otherwise, the changes are rolled back.</span></span> <span data-ttu-id="1f715-110">また、ログの "取り消し操作" を記録することも可能になります。</span><span class="sxs-lookup"><span data-stu-id="1f715-110">It can also be used to record an "undo action" in the log.</span></span> <span data-ttu-id="1f715-111">ロールバック操作中には、途中で割り込みが発生する場合を考慮して、トランザクションのリソース マネージャー (RM) が状態を回復できるようにしておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="1f715-111">During a rollback operation, a transactional resource manager (RM) must be able to recover its state if the RM is interrupted during the rollback operation.</span></span> <span data-ttu-id="1f715-112">予約領域を使用すれば、RM が処理を開始する前に、ログの領域を予約することができます。</span><span class="sxs-lookup"><span data-stu-id="1f715-112">By using a reservation area, an RM can reserve space in a log before it is used.</span></span>  
  
 <span data-ttu-id="1f715-113"><xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> メソッドは、呼び出し時に指定されたパラメーターに応じて、領域の予約またはデータの追加のいずれか、あるいは両方を行います。</span><span class="sxs-lookup"><span data-stu-id="1f715-113">The <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method can either reserve space or append data, or both, depending on the parameters that are specified when making the call.</span></span> <span data-ttu-id="1f715-114">トランザクション処理の進行中に、取り消し情報を追加し、補正レコードの領域を予約することができます。</span><span class="sxs-lookup"><span data-stu-id="1f715-114">As work progresses in a transaction, an application can append the undo information and reserve space for compensation records.</span></span> <span data-ttu-id="1f715-115">ロールバック操作中に作成された補正レコードは、ディスク上で取り消された処理の内容を示します。</span><span class="sxs-lookup"><span data-stu-id="1f715-115">During a rollback operation, compensation records that are created indicate what has been undone on the disk.</span></span> <span data-ttu-id="1f715-116">レコードの追加には、以前に予約された領域を使用します。</span><span class="sxs-lookup"><span data-stu-id="1f715-116">The records are appended using space that has been previously reserved.</span></span> <span data-ttu-id="1f715-117">これにより、ロールバック操作中に RM のログ領域が不足するという致命的な状況が確実に防止されます。</span><span class="sxs-lookup"><span data-stu-id="1f715-117">This guarantees that an RM does not run out of log space, which is a fatal condition, while performing a rollback operation.</span></span> <span data-ttu-id="1f715-118">トランザクションの処理中にログがいっぱいになっても、アプリケーションは非揮発性データを破壊することなく、トランザクションを確実にロールバックできます。</span><span class="sxs-lookup"><span data-stu-id="1f715-118">If a log fills up during a transaction, an application can safely roll back a transaction without corrupting durable data.</span></span>  
  
 <span data-ttu-id="1f715-119">CLFS は、先書きログとして使用できる ARIES 準拠のログ システムです。</span><span class="sxs-lookup"><span data-stu-id="1f715-119">CLFS is an ARIES-compliant logging system, meant for write-ahead logging.</span></span> <span data-ttu-id="1f715-120">アプリケーションは、操作を実行する前に、先書きログに取り消しレコードを書き込み、補正レコードの書き込みに必要なログ内の領域を予約して、ロールバック時に使用します。</span><span class="sxs-lookup"><span data-stu-id="1f715-120">In write-ahead logging, an application writes an undo record before it performs the operation, reserving the amount of space it takes in the log to write a compensating record, which may be used during rollback.</span></span> <span data-ttu-id="1f715-121">予約した領域は、後で補正レコードの書き込みを実際に行うときに使用されます。</span><span class="sxs-lookup"><span data-stu-id="1f715-121">Later, the reserved space is used when the compensation record is actually written.</span></span>  
  
 <span data-ttu-id="1f715-122">アプリケーションは、いつでもロング スペースを予約またはアクセスできますが、予約とアクセスを同時に行うことはできません。</span><span class="sxs-lookup"><span data-stu-id="1f715-122">Applications can either reserve or access long space at any given time (they are mutually exclusive operations).</span></span> <span data-ttu-id="1f715-123">コミットしたレコードをログに書き込んだ後、アプリケーションは補正レコードの予約を解放できます。</span><span class="sxs-lookup"><span data-stu-id="1f715-123">After a commit record is written to the log, an application can free up the reservations for the compensation records.</span></span> <span data-ttu-id="1f715-124">これを行うには、<xref:System.IO.Log.ReservationCollection.FreeReservation%2A> メソッドまたは <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1f715-124">This action can be done by calling either the <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> or <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method.</span></span> <span data-ttu-id="1f715-125"><xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> メソッドを呼び出した場合、操作がアトミックであることが保証されますが、<xref:System.IO.Log.ReservationCollection.FreeReservation%2A> メソッドを呼び出した場合、操作がアトミックであるかどうかは保証されません。</span><span class="sxs-lookup"><span data-stu-id="1f715-125">Calling the <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method guarantees that the operation is atomic, while calling the <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> method does not.</span></span>  
  
 <span data-ttu-id="1f715-126">レコードを解放する場合、<xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> メソッドの前回の呼び出しと共に予約した同じレコードを解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1f715-126">When you free records, you must free the same records that you reserved together in a previous call to the <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1f715-127"><xref:System.IO.Log.IRecordSequence> の実装では、実際に予約の割り当ておよび割り当て解除を行うには、<xref:System.IO.Log.ReservationCollection.MakeReservation%2A> メソッドおよび <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> メソッドを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1f715-127">Your implementation of <xref:System.IO.Log.IRecordSequence> must implement the <xref:System.IO.Log.ReservationCollection.MakeReservation%2A> and <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> methods to perform the actual reservation allocation and deallocation.</span></span> <span data-ttu-id="1f715-128">また、予約した領域にレコードを書き込むときに、<xref:System.IO.Log.ReservationCollection.ReservationFreed%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1f715-128">In addition, your implementation must also call <xref:System.IO.Log.ReservationCollection.ReservationFreed%2A> when a record is written into a reserved space.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1f715-129">次の例に示すように、予約は 2 つの方法で実行できます。</span><span class="sxs-lookup"><span data-stu-id="1f715-129">Reservations can be performed in two ways as shown in the following examples.</span></span> <span data-ttu-id="1f715-130">信頼性の高い処理を行うサンプルでこの方法を採用できます。</span><span class="sxs-lookup"><span data-stu-id="1f715-130">You can adopt the practices in the samples for robust processing.</span></span> <span data-ttu-id="1f715-131">このタスクは、CLFS ベースの <xref:System.IO.Log.LogRecordSequence> クラスを使用している場合のみ実行できることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1f715-131">Notice that this task can only be performed when using the CLFS-based <xref:System.IO.Log.LogRecordSequence> class.</span></span>  
  
```  
//Using the ReserveAndAppend Method  
ReservationCollection reservations = recordSequence.CreateReservationCollection();  
long[] lengthOfUndoRecords = new long[] { 1000 };  
recordSequence.ReserveAndAppend(recordData,  
                                                     userSqn,  
                                                     previousSqn,  
                                                     RecordSequenceAppendOptions.None,  
                                                     reservations,  
                                                     lengthOfUndoRecords);  
recordSequence.Append(undoRecordData,    // If necessary …  
                                    userSqn,  
                                    previousSqn,  
                                    RecordSequenceAppendOptions.ForceFlush,  
                                    reservations);  
  
// Using the Manual Approach  
ReservationCollection reservations = recordSequence.CreateReservationCollection();  
reservations.Add(lengthOfUndoRecord);  
try  
{  
   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  
}  
catch (Exception)  
{  
   reservations.Remove(lengthOfUndoRecord);  
   throw;  
}  
  
recordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ReservationCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ReservationCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1f715-132"><see cref="T:System.IO.Log.ReservationCollection" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1f715-132">Initializes a new instance of the <see cref="T:System.IO.Log.ReservationCollection" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.Add(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (size As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(long size);" />
      <MemberSignature Language="F#" Value="abstract member Add : int64 -&gt; unit&#xA;override this.Add : int64 -&gt; unit" Usage="reservationCollection.Add size" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="1f715-133">要求する予約のサイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="1f715-133">The size of the requested reservation, in bytes.</span></span></param>
        <summary><span data-ttu-id="1f715-134">予約を割り当てて、コレクションに追加します。</span><span class="sxs-lookup"><span data-stu-id="1f715-134">Allocates a reservation and adds it to the collection.</span></span> <span data-ttu-id="1f715-135">このメソッドは継承できません。</span><span class="sxs-lookup"><span data-stu-id="1f715-135">This method cannot be inherited.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1f715-136">次の例は、手動で予約を行う方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="1f715-136">The following example shows how to manually make a reservation.</span></span> <span data-ttu-id="1f715-137">このタスクは、CLFS ベースの <xref:System.IO.Log.LogRecordSequence> クラスを使用している場合のみ実行できることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1f715-137">Notice that this task can only be performed when using the CLFS-based <xref:System.IO.Log.LogRecordSequence> class.</span></span>  
  
```  
ReservationCollection reservations = recordSequence.CreateReservationCollection();  
reservations.Add(lengthOfUndoRecord);  
try  
{  
   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  
}  
catch (Exception)  
{  
   reservations.Remove(lengthOfUndoRecord);  
   throw;  
}  
  
recordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1f715-138"><paramref name="archiveTail" /> が、このシーケンスの基本シーケンス番号と最後のシーケンス番号との間にありません。</span><span class="sxs-lookup"><span data-stu-id="1f715-138"><paramref name="archiveTail" /> is not between the base and last sequence numbers of this sequence.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1f715-139"><paramref name="size" /> が無効であるか、最大予約サイズを超えています。</span><span class="sxs-lookup"><span data-stu-id="1f715-139"><paramref name="size" /> is invalid or exceeds maximum reservation size.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="1f715-140">アーカイブ スナップショットの作成時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="1f715-140">An I/O error occurs when creating the archive snapshot.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1f715-141">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="1f715-141">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="1f715-142">プログラムの実行を継続する十分なメモリがありません。</span><span class="sxs-lookup"><span data-stu-id="1f715-142">There is not enough memory to continue the execution of the program.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="1f715-143">指定のログ ストアへのアクセスは、オペレーティング システムにより拒否されました。</span><span class="sxs-lookup"><span data-stu-id="1f715-143">Access for the specified log store is denied by the operating system.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="1f715-144">レコード シーケンスがいっぱいです。</span><span class="sxs-lookup"><span data-stu-id="1f715-144">The record sequence is full.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="reservationCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1f715-145">コレクション内の予約のすべてを解放します。</span><span class="sxs-lookup"><span data-stu-id="1f715-145">Releases all of the reservations in the collection.</span></span> <span data-ttu-id="1f715-146">このメソッドは継承できません。</span><span class="sxs-lookup"><span data-stu-id="1f715-146">This method cannot be inherited.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1f715-147"><paramref name="size" /> が無効であるか、最大予約サイズを超えています。</span><span class="sxs-lookup"><span data-stu-id="1f715-147"><paramref name="size" /> is invalid or exceeds maximum reservation size.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="1f715-148">アーカイブ スナップショットの作成時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="1f715-148">An I/O error occurs when creating the archive snapshot.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1f715-149">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="1f715-149">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="1f715-150">プログラムの実行を継続する十分なメモリがありません。</span><span class="sxs-lookup"><span data-stu-id="1f715-150">There is not enough memory to continue the execution of the program.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="1f715-151">レコード シーケンスがいっぱいです。</span><span class="sxs-lookup"><span data-stu-id="1f715-151">The record sequence is full.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="1f715-152">指定のログ ストアへのアクセスは、オペレーティング システムにより拒否されました。</span><span class="sxs-lookup"><span data-stu-id="1f715-152">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.Contains(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (size As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(long size);" />
      <MemberSignature Language="F#" Value="abstract member Contains : int64 -&gt; bool&#xA;override this.Contains : int64 -&gt; bool" Usage="reservationCollection.Contains size" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="1f715-153">コレクション内で検索するサイズ。</span><span class="sxs-lookup"><span data-stu-id="1f715-153">The size to locate in the collection.</span></span></param>
        <summary><span data-ttu-id="1f715-154">指定されたサイズの予約が行われているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="1f715-154">Determines whether a reservation of the specified size has been made.</span></span> <span data-ttu-id="1f715-155">このメソッドは継承できません。</span><span class="sxs-lookup"><span data-stu-id="1f715-155">This method cannot be inherited.</span></span></summary>
        <returns><span data-ttu-id="1f715-156">指定されたサイズの予約が行われている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1f715-156"><see langword="true" /> if at least one reservation of the specified size has been made; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1f715-157">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="1f715-157">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="1f715-158">プログラムの実行を継続する十分なメモリがありません。</span><span class="sxs-lookup"><span data-stu-id="1f715-158">There is not enough memory to continue the execution of the program.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="1f715-159">指定のログ ストアへのアクセスは、オペレーティング システムにより拒否されました。</span><span class="sxs-lookup"><span data-stu-id="1f715-159">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (long[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(int64[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.CopyTo(System.Int64[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Long(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;long&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : int64[] * int -&gt; unit&#xA;override this.CopyTo : int64[] * int -&gt; unit" Usage="reservationCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Int64[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="1f715-160">コピー先の配列。</span><span class="sxs-lookup"><span data-stu-id="1f715-160">The array that is the destination of the copy.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="1f715-161">配列内のコピーを開始する位置を示す、0 から始まるインデックスです。</span><span class="sxs-lookup"><span data-stu-id="1f715-161">The zero-based index in the array at which copying begins.</span></span></param>
        <summary><span data-ttu-id="1f715-162">1 次元配列にコレクション全体をコピーします。その際、コピー対象の配列の指定したインデックス位置からコピーを開始します。</span><span class="sxs-lookup"><span data-stu-id="1f715-162">Copies the entire collection to a one-dimensional array, starting at the specified index of the target array.</span></span> <span data-ttu-id="1f715-163">このメソッドは継承できません。</span><span class="sxs-lookup"><span data-stu-id="1f715-163">This method cannot be inherited.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1f715-164"><paramref name="array" /> 、または <paramref name="arrayIndex" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="1f715-164"><paramref name="array" /> or <paramref name="arrayIndex" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1f715-165"><paramref name="arrayIndex" /> が 0 未満か、<paramref name="array" /> の長さ以上の値です。</span><span class="sxs-lookup"><span data-stu-id="1f715-165"><paramref name="arrayIndex" /> is less than zero, or greater than or equal to the length of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1f715-166">指定された配列は、データをコピーするには領域が不足しています。</span><span class="sxs-lookup"><span data-stu-id="1f715-166">There is not enough space in the specified array to copy the data.</span></span>  
  
<span data-ttu-id="1f715-167">または</span><span class="sxs-lookup"><span data-stu-id="1f715-167">-or-</span></span> 
 <span data-ttu-id="1f715-168"><paramref name="array" /> が 1 次元配列ではありません。要求された処理に使用できるのは 1 次元配列のみです。</span><span class="sxs-lookup"><span data-stu-id="1f715-168"><paramref name="array" /> is not a single dimensional array, which is the only type supported for the requested action.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1f715-169">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="1f715-169">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="1f715-170">プログラムの実行を継続する十分なメモリがありません。</span><span class="sxs-lookup"><span data-stu-id="1f715-170">There is not enough memory to continue the execution of the program.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="1f715-171">指定のログ ストアへのアクセスは、オペレーティング システムにより拒否されました。</span><span class="sxs-lookup"><span data-stu-id="1f715-171">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.ReservationCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.IO.Log.ReservationCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1f715-172">コレクション内の予約の数を取得します。</span><span class="sxs-lookup"><span data-stu-id="1f715-172">Gets the number of reservations in the collection.</span></span></summary>
        <value><span data-ttu-id="1f715-173">コレクション内の予約の数。</span><span class="sxs-lookup"><span data-stu-id="1f715-173">The number of reservations in the collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ReservationCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ReservationCollection ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="reservationCollection.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1f715-174"><see cref="T:System.IO.Log.ReservationCollection" /> がガベージ コレクターによって破棄される前に、リソースを解放できるようにします。</span><span class="sxs-lookup"><span data-stu-id="1f715-174">Allows the <see cref="T:System.IO.Log.ReservationCollection" /> to free resources before it is destroyed by the garbage collector.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FreeReservation">
      <MemberSignature Language="C#" Value="protected abstract void FreeReservation (long size);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FreeReservation(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.FreeReservation(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub FreeReservation (size As Long)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void FreeReservation(long size);" />
      <MemberSignature Language="F#" Value="abstract member FreeReservation : int64 -&gt; unit" Usage="reservationCollection.FreeReservation size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="1f715-175">解放する予約のサイズ。</span><span class="sxs-lookup"><span data-stu-id="1f715-175">The size of the reservation to release.</span></span></param>
        <summary><span data-ttu-id="1f715-176">派生クラスでオーバーライドされると、指定したサイズの予約を解放します。</span><span class="sxs-lookup"><span data-stu-id="1f715-176">When overridden in a derived class, releases a reservation of the specified size.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="1f715-177"><see cref="T:System.IO.Log.ReservationCollection" /> から継承する場合は、このメソッドを実装してレコード シーケンス内の領域を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1f715-177">When you inherit from <see cref="T:System.IO.Log.ReservationCollection" />, you must implement this method to actually release space in the record sequence.</span></span> <span data-ttu-id="1f715-178">このメソッドの完了時に、<see cref="M:System.IO.Log.ReservationCollection.ReservationFreed(System.Int64)" /> を呼び出さないでください。このロジックは自動的に処理されます。</span><span class="sxs-lookup"><span data-stu-id="1f715-178">You should not call <see cref="M:System.IO.Log.ReservationCollection.ReservationFreed(System.Int64)" /> when this method is complete; that logic is handled for you.</span></span>  
  
<span data-ttu-id="1f715-179">レコードを解放する場合、<see cref="Overload:System.IO.Log.IRecordSequence.ReserveAndAppend" /> メソッドの前回の呼び出しと共に予約した同じレコードを解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1f715-179">When you free records, you must free the same records that you reserved together in a previous call to the <see cref="Overload:System.IO.Log.IRecordSequence.ReserveAndAppend" /> method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetBestMatchingReservation">
      <MemberSignature Language="C#" Value="protected long GetBestMatchingReservation (long size);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance int64 GetBestMatchingReservation(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.GetBestMatchingReservation(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetBestMatchingReservation (size As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; long GetBestMatchingReservation(long size);" />
      <MemberSignature Language="F#" Value="member this.GetBestMatchingReservation : int64 -&gt; int64" Usage="reservationCollection.GetBestMatchingReservation size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="1f715-180">合わせる必要がある予約のサイズ。</span><span class="sxs-lookup"><span data-stu-id="1f715-180">The size of the reservation that must be fit.</span></span></param>
        <summary><span data-ttu-id="1f715-181">派生クラスでオーバーライドされると、指定したサイズに最適な予約を取得します。</span><span class="sxs-lookup"><span data-stu-id="1f715-181">When overridden in a derived class, gets the best matching reservation for a given size.</span></span></summary>
        <returns><span data-ttu-id="1f715-182">指定したサイズ以上のコレクションから取得した予約。該当する予約が存在しない場合は -1。</span><span class="sxs-lookup"><span data-stu-id="1f715-182">A reservation from the collection that is greater than or equal to the specified size, or -1 if no such reservation exists.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f715-183">通常、このメソッドは、予約された領域からレコード シーケンスにレコードを追加するときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1f715-183">This method is typically called when appending a record from reserved space to a record sequence.</span></span> <span data-ttu-id="1f715-184">呼び出し元に戻ったとき、返されたサイズに該当する予約はコレクションから削除されています。</span><span class="sxs-lookup"><span data-stu-id="1f715-184">When it returns, a reservation of the returned size has been removed from the collection.</span></span> <span data-ttu-id="1f715-185">予約した領域にアクセスしなかった場合は、<xref:System.IO.Log.ReservationCollection.ReservationMade%2A> メソッドを呼び出して、<xref:System.IO.Log.ReservationCollection> がレコード シーケンス内に予約された領域の容量を正確に表すようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="1f715-185">If, for some reason, the reserved space is not actually accessed, the <xref:System.IO.Log.ReservationCollection.ReservationMade%2A> method should be called to ensure that the <xref:System.IO.Log.ReservationCollection> accurately represents the amount of reserved space in the record sequence.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;long&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;int64&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;long&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;int64&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;int64&gt;" Usage="reservationCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1f715-186"><see cref="T:System.IO.Log.ReservationCollection" /> を反復処理できる列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="1f715-186">Returns an enumerator that can iterate through the <see cref="T:System.IO.Log.ReservationCollection" />.</span></span> <span data-ttu-id="1f715-187">このメソッドは継承できません。</span><span class="sxs-lookup"><span data-stu-id="1f715-187">This method cannot be inherited.</span></span></summary>
        <returns><span data-ttu-id="1f715-188"><see cref="T:System.IO.Log.ReservationCollection" /> を反復処理できる列挙子。</span><span class="sxs-lookup"><span data-stu-id="1f715-188">An enumerator that can iterate through the <see cref="T:System.IO.Log.ReservationCollection" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1f715-189">次のいずれかの理由により、操作が無効です。</span><span class="sxs-lookup"><span data-stu-id="1f715-189">The operation is invalid for one of the following reasons:</span></span> 
<span data-ttu-id="1f715-190">-   列挙体が終了しています。</span><span class="sxs-lookup"><span data-stu-id="1f715-190">-   The enumeration has ended.</span></span>  
  
<span data-ttu-id="1f715-191">-   コレクションが変更されています。</span><span class="sxs-lookup"><span data-stu-id="1f715-191">-   The collection has been modified.</span></span>  
  
<span data-ttu-id="1f715-192">-   列挙体が開始されていません。</span><span class="sxs-lookup"><span data-stu-id="1f715-192">-   The enumeration has not been started.</span></span> <span data-ttu-id="1f715-193"><see cref="M:System.Collections.IEnumerator.MoveNext" /> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1f715-193">A call to <see cref="M:System.Collections.IEnumerator.MoveNext" /> must be made.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1f715-194">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="1f715-194">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="1f715-195">プログラムの実行を継続する十分なメモリがありません。</span><span class="sxs-lookup"><span data-stu-id="1f715-195">There is not enough memory to continue the execution of the program.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="1f715-196">指定のログ ストアへのアクセスは、オペレーティング システムにより拒否されました。</span><span class="sxs-lookup"><span data-stu-id="1f715-196">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.ReservationCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.IO.Log.ReservationCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1f715-197">コレクションが読み取り専用かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="1f715-197">Gets a value that indicates whether the collection is read-only.</span></span></summary>
        <value><span data-ttu-id="1f715-198">このプロパティは、常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="1f715-198">This property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f715-199"><xref:System.IO.Log.ReservationCollection> が読み取り専用になることはありません。</span><span class="sxs-lookup"><span data-stu-id="1f715-199">A <xref:System.IO.Log.ReservationCollection> is never read-only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeReservation">
      <MemberSignature Language="C#" Value="protected abstract void MakeReservation (long size);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void MakeReservation(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.MakeReservation(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub MakeReservation (size As Long)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void MakeReservation(long size);" />
      <MemberSignature Language="F#" Value="abstract member MakeReservation : int64 -&gt; unit" Usage="reservationCollection.MakeReservation size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="1f715-200">割り当てる予約のサイズ。</span><span class="sxs-lookup"><span data-stu-id="1f715-200">The size of the reservation to allocate.</span></span></param>
        <summary><span data-ttu-id="1f715-201">派生クラスでオーバーライドされると、指定したサイズの予約を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="1f715-201">When overridden in a derived class, allocates a reservation of the specified size.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="1f715-202"><see cref="T:System.IO.Log.ReservationCollection" /> から継承する場合は、このメソッドを実装してレコード シーケンス内の領域を予約する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1f715-202">When you inherit from <see cref="T:System.IO.Log.ReservationCollection" />, you must implement this method to actually reserve space in the record sequence.</span></span> <span data-ttu-id="1f715-203">このメソッドの完了時に、<see cref="M:System.IO.Log.ReservationCollection.ReservationMade(System.Int64)" /> を呼び出さないでください。このロジックは自動的に処理されます。</span><span class="sxs-lookup"><span data-stu-id="1f715-203">You should not call <see cref="M:System.IO.Log.ReservationCollection.ReservationMade(System.Int64)" /> when this method is complete; that logic is handled for you.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (long item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(int64 item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.Remove(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(long item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : int64 -&gt; bool&#xA;override this.Remove : int64 -&gt; bool" Usage="reservationCollection.Remove item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="1f715-204">解放する予約のサイズ。</span><span class="sxs-lookup"><span data-stu-id="1f715-204">The size of the reservation to release.</span></span></param>
        <summary><span data-ttu-id="1f715-205">指定されたサイズの予約が行われている場合、その予約を解放します。</span><span class="sxs-lookup"><span data-stu-id="1f715-205">Releases a reservation of the specified size, if one has been made.</span></span> <span data-ttu-id="1f715-206">このメソッドは継承できません。</span><span class="sxs-lookup"><span data-stu-id="1f715-206">This method cannot be inherited.</span></span></summary>
        <returns><span data-ttu-id="1f715-207">指定されたサイズの予約が見つかり、その予約が削除されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1f715-207"><see langword="true" /> if a reservation of the specified size was found and removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1f715-208">次の例は、手動で予約を行う方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="1f715-208">The following example shows how to manually make a reservation.</span></span> <span data-ttu-id="1f715-209">このタスクは、CLFS ベースの <xref:System.IO.Log.LogRecordSequence> クラスを使用している場合のみ実行できることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1f715-209">Notice that this task can only be performed when using the CLFS-based <xref:System.IO.Log.LogRecordSequence> class.</span></span>  
  
```  
ReservationCollection reservations = recordSequence.CreateReservationCollection();  
reservations.Add(lengthOfUndoRecord);  
try  
{  
   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  
}  
catch (Exception)  
{  
   reservations.Remove(lengthOfUndoRecord);  
   throw;  
}  
  
recordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1f715-210">指定されたレコードに対応する十分なサイズの予約が指定された予約コレクションに見つかりません。</span><span class="sxs-lookup"><span data-stu-id="1f715-210">No reservation large enough to fit the provided record can be found in the specified reservation collection.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="1f715-211">アーカイブ スナップショットの作成時に I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="1f715-211">An I/O error occurs when creating the archive snapshot.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1f715-212">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="1f715-212">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="1f715-213">プログラムの実行を継続する十分なメモリがありません。</span><span class="sxs-lookup"><span data-stu-id="1f715-213">There is not enough memory to continue the execution of the program.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="1f715-214">レコード シーケンスがいっぱいです。</span><span class="sxs-lookup"><span data-stu-id="1f715-214">The record sequence is full.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="1f715-215">指定のログ ストアへのアクセスは、オペレーティング システムにより拒否されました。</span><span class="sxs-lookup"><span data-stu-id="1f715-215">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReservationFreed">
      <MemberSignature Language="C#" Value="protected void ReservationFreed (long size);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ReservationFreed(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.ReservationFreed(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ReservationFreed (size As Long)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ReservationFreed(long size);" />
      <MemberSignature Language="F#" Value="member this.ReservationFreed : int64 -&gt; unit" Usage="reservationCollection.ReservationFreed size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="1f715-216">解放された予約のサイズ。</span><span class="sxs-lookup"><span data-stu-id="1f715-216">The size of the reservation that has been released.</span></span></param>
        <summary><span data-ttu-id="1f715-217">派生クラスでオーバーライドされると、予約が解放されていることを示します。</span><span class="sxs-lookup"><span data-stu-id="1f715-217">When overridden in a derived class, indicates that a reservation has been released.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f715-218"><xref:System.IO.Log.ReservationCollection> から継承する場合、コレクションからの削除以外の目的で予約を解放するときには、このメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1f715-218">When you inherit from <xref:System.IO.Log.ReservationCollection>, you must call this method when a reservation is released for a reason other than removing it from the collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReservationMade">
      <MemberSignature Language="C#" Value="protected void ReservationMade (long size);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ReservationMade(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.ReservationMade(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ReservationMade (size As Long)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ReservationMade(long size);" />
      <MemberSignature Language="F#" Value="member this.ReservationMade : int64 -&gt; unit" Usage="reservationCollection.ReservationMade size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="1f715-219">予約された予約のサイズ。</span><span class="sxs-lookup"><span data-stu-id="1f715-219">The size of the reservation that has been made.</span></span></param>
        <summary><span data-ttu-id="1f715-220">派生クラスでオーバーライドされると、予約されていることを示します。</span><span class="sxs-lookup"><span data-stu-id="1f715-220">When overridden in a derived class, indicates that a reservation has been made.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f715-221"><xref:System.IO.Log.ReservationCollection>から継承する場合は、<xref:System.IO.Log.ReservationCollection.Add%2A>の呼び出しの外部で予約が行われるときに、このメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1f715-221">When you inherit from <xref:System.IO.Log.ReservationCollection>, you must call this method when a reservation is made outside of a call to <xref:System.IO.Log.ReservationCollection.Add%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="reservationCollection.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1f715-222"><see cref="T:System.IO.Log.ReservationCollection" /> を反復処理できる列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="1f715-222">Returns an enumerator that can iterate through the <see cref="T:System.IO.Log.ReservationCollection" />.</span></span> <span data-ttu-id="1f715-223">このメソッドは継承できません。</span><span class="sxs-lookup"><span data-stu-id="1f715-223">This method cannot be inherited.</span></span></summary>
        <returns><span data-ttu-id="1f715-224"><see cref="T:System.IO.Log.ReservationCollection" /> を反復処理できる列挙子。</span><span class="sxs-lookup"><span data-stu-id="1f715-224">An enumerator that can iterate through the <see cref="T:System.IO.Log.ReservationCollection" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1f715-225">次のいずれかの理由により、操作が無効です。</span><span class="sxs-lookup"><span data-stu-id="1f715-225">The operation is invalid for one of the following reasons:</span></span> 
<span data-ttu-id="1f715-226">-   列挙体が終了しています。</span><span class="sxs-lookup"><span data-stu-id="1f715-226">-   The enumeration has ended.</span></span>  
  
<span data-ttu-id="1f715-227">-   コレクションが変更されています。</span><span class="sxs-lookup"><span data-stu-id="1f715-227">-   The collection has been modified.</span></span>  
  
<span data-ttu-id="1f715-228">-   列挙体が開始されていません。</span><span class="sxs-lookup"><span data-stu-id="1f715-228">-   The enumeration has not been started.</span></span> <span data-ttu-id="1f715-229"><see cref="M:System.Collections.IEnumerator.MoveNext" /> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1f715-229">A call to <see cref="M:System.Collections.IEnumerator.MoveNext" /> must be made.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1f715-230">シーケンスが破棄された後にメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="1f715-230">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="1f715-231">プログラムの実行を継続する十分なメモリがありません。</span><span class="sxs-lookup"><span data-stu-id="1f715-231">There is not enough memory to continue the execution of the program.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="1f715-232">指定のログ ストアへのアクセスは、オペレーティング システムにより拒否されました。</span><span class="sxs-lookup"><span data-stu-id="1f715-232">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
