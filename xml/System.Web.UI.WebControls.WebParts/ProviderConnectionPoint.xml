<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="30ea47465c7f8e2ee3e9dae625074314c78ead02" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78765345" /></Metadata><TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>プロバイダーとして動作するサーバー コントロールがコンシューマーとの接続を形成できるようにする、コネクション ポイント オブジェクトを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2つのサーバーコントロール間のすべての Web パーツ接続では、コントロールが他のコントロールに接続し、データを提供または使用できるようにするために、関連付けられている接続ポイントオブジェクトが各コントロールに必要です。は、接続のプロバイダーまたはコンシューマーとして指定されます。 一般的なオブジェクト <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> には、コントロールが別のコントロールに接続する方法、および共有できるデータの種類の詳細が含まれています。 接続でプロバイダーとして動作するコントロールの場合、接続ポイントは <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトである必要があります。 Web パーツ接続と接続ポイントの詳細については、以下の「関連項目」セクションに記載されているトピックを参照してください。  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトを作成するには、いくつかの手順が必要です。  
  
1.  インターフェイスを作成します。 プロバイダーは、コンシューマーとデータを共有するときに、インターフェイスのインスタンスを取得し、そのインスタンスをコンシューマーに返します。  
  
2.  プロバイダーにインターフェイスを実装します。 <xref:System.Web.UI.WebControls.WebParts.WebPart> またはその他のサーバーコントロール (<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> ゾーン内の任意の種類のサーバーコントロールを使用できます)。プロバイダーは最初の手順で作成したインターフェイスを実装する必要があります。  
  
3.  コールバックメソッドを識別します。 プロバイダーのメソッドは、接続を確立するためのコールバックメソッドとして識別される必要があります。 このメソッドは、実装されたインターフェイスのインスタンスをコンシューマーに返します。 プロバイダーのコールバックメソッドを識別する Web パーツ方法は、インターフェイスインスタンスを返すメソッドに `ConnectionProvider` メタデータ属性 (<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> クラスで定義) を追加することです。 属性を追加するときに必要なパラメーターは、プロバイダー接続ポイントに使用する表示名だけです。 コネクションポイントの ID など、省略可能なパラメーターを追加することもできます。  
  
 コントロールがプロバイダーとして機能するようになった後、コントロールは接続に参加できます (コンシューマーコントロールが同様に装備され、使用可能であることを前提としています)。 Web ページのマークアップ内に静的な宣言型接続を作成するには、開発者は `<asp:webpartconnection>` 要素を使用できます。 コールバックメソッドを識別するプロバイダーのソースコードの `ConnectionProvider` 属性でコネクションポイントの ID を指定する場合は、その値をページの `<asp:webpartconnection>` 要素の `ProviderConnectionPointID` 属性に割り当てる必要があります。 プロバイダー接続ポイントの ID を開発者が指定する理由の1つは、プロバイダーコントロールに複数のコネクションポイントがある場合です。 プロバイダーコントロールのプロバイダー接続ポイントに ID が指定されていない場合は、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> フィールドから取得した既定値を使用して接続が作成されるため、ページの `ProviderConnectionPointID` 属性に値を割り当てる必要はありません。  
  
 コードで接続を作成するには、開発者は、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> メソッドを呼び出し、プロバイダーコントロールの ID と、プロバイダーコントロール内の定義された <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトの ID またはインデックスを渡すことによって、新しい <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトを作成する必要があります。 返された <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトは、プロバイダーコントロールへの参照、コンシューマーコントロールへの参照、および対応する <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトをすべて <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> メソッドに渡して、新しい <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクトを作成します。  
  
 開発者は、宣言によって、またはプログラムによって接続を確立する際にプロバイダー接続ポイントを使用できますが、ユーザーはプロバイダー接続ポイントと対話して、ユーザーインターフェイス (UI) を使用して接続を確立することもできます。 開発者が Web ページ上で <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> コントロールを宣言すると、ユーザーが接続を作成するためのランタイム UI が提供されます。 接続を確立するための開始点としてコンシューマーコントロールを選択した場合 (プロバイダーを選択することもできますが、結果として得られる接続に違いはありません)、UI にはドロップダウンリストコントロールが表示されます。使用可能なプロバイダー接続ポイントの表示名 (または、複数の場合はポイント)。 接続を作成するには、ユーザーがプロバイダー接続ポイントを選択する必要があります。  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトは、特定のプロバイダーコントロールに直接関連付け、基本 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラスから継承したプロパティに接続に関する詳細を格納します。 たとえば、継承された <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> プロパティでは、プロバイダーによって返されるインターフェイスの型がプロバイダー接続ポイントに保持されます。 接続のプロバイダーとコンシューマーがどちらも同じインターフェイス型を使用している場合、コントロールには互換性があり、直接接続を形成することができます。 プロバイダーとコンシューマーが同じインターフェイス型を使用できない場合、それらは互換性がなく、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> オブジェクトを使用して、コンシューマーが使用できる型にプロバイダー接続ポイントの <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 値を変換する必要があります。 継承されたもう1つの重要なプロパティは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> プロパティです。これにより、接続の作成時にユーザーがプロバイダー接続ポイントを選択するための表示名が UI に表示されます。 表示名は、開発者がプロバイダーコントロールのコールバックメソッドに `ConnectionProvider` 属性を追加するときに必要なパラメーターです。 また、継承された <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> プロパティは、プロバイダーに複数のコネクションポイントがある場合にプロバイダー接続ポイントの一意の識別子を提供するため、前述のように便利です。 プロバイダーは複数の <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトを定義できます。この場合は、開発者がメソッドに `ConnectionProvider` 属性を追加するときに、各接続ポイントを区別するために ID 値を指定する必要があります。 もう1つの注目すべき継承されたプロパティは、プロバイダー接続ポイントを複数のコンシューマーに同時に接続できるかどうかを示す <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> プロパティです。 このプロパティ値は、プロバイダー接続ポイントに対して既定で `true` されます (一方、コンシューマー接続ポイントでは `false` になります)。  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> クラスは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラスから継承したメンバーに、いくつかの一意のメソッドを追加します。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> メソッドは、コールバックメソッドがコンシューマーに返すインターフェイスのインスタンスを取得します。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> メソッドは、既存の接続の一部であるが、接続を確立するために使用されるインターフェイスではない、追加のコンシューマーインターフェイスを取得します。  
  
   
  
## Examples  
 次のコード例は、接続を宣言によって、プログラムで作成する、または UI を使用する簡単な方法を示しています。各ケースでは、プロバイダー接続ポイントを使用します。  
  
 この例には、次の4つの部分があります。  
  
-   ページの Web パーツ表示モードを変更できるユーザーコントロール。  
  
-   インターフェイスのソースコードと、プロバイダーおよび接続のコンシューマーとして機能する2つの <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール。  
  
-   すべてのコントロールをホストし、コード例を実行するための Web ページ。  
  
-   例ページを実行する方法について説明します。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるようにするユーザーコントロールです。 次のソースコードを .ascx ファイルに保存し、このユーザーコントロールの `Register` ディレクティブの `Src` 属性に割り当てられているファイル名を指定します。これは、ホストしている Web ページの上部付近にあります。 このコントロールの表示モードとソースコードの説明の詳細については、「[チュートリアル: Web パーツページの表示モードの変更](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)」を参照してください。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の2番目の部分は、インターフェイスとコントロールのソースコードです。 ソースファイルには、`IZipCode`という名前の単純なインターフェイスが含まれています。 インターフェイスを実装し、プロバイダーコントロールとして機能する `ZipCodeWebPart` という名前の <xref:System.Web.UI.WebControls.WebParts.WebPart> クラスもあります。 `ProvideIZipCode` メソッドは、インターフェイスの唯一のメンバーを実装するコールバックメソッドです。 メソッドは、単にインターフェイスのインスタンスを返します。 メソッドは、そのメタデータ内の `ConnectionProvider` 属性でマークされていることに注意してください。 これは、プロバイダーのコネクションポイントのコールバックメソッドとしてメソッドを識別するための機構です。 その他の <xref:System.Web.UI.WebControls.WebParts.WebPart> クラスは `WeatherWebPart`という名前で、接続のコンシューマーとして機能します。 このクラスには、プロバイダーコントロールから `IZipCode` インターフェイスのインスタンスを取得する `GetZipCode` という名前のメソッドがあります。 このメソッドは、メタデータ内の `ConnectionConsumer` 属性を使用して、コンシューマーの接続ポイントメソッドとしてマークされていることに注意してください。 これは、コンシューマーコントロールのコネクションポイントメソッドを識別するための機構です。  
  
 コード例を実行するには、このソースコードをコンパイルする必要があります。 これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。 または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。 このコード例では、動的コンパイルを使用します。 のコンパイル方法を示すチュートリアルについては、「[チュートリアル: カスタム Web サーバーコントロールの開発と使用](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)」を参照してください。  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 コード例の3番目の部分は、Web ページです。 上部の近くには、接続を形成するカスタムコントロールを登録するための `Register` ディレクティブと、ユーザーがページの表示モードを変更できるようにするユーザーコントロールがあります。 接続自体は、ページの `<staticconnections>` 要素内で宣言によって作成されます。 これは、接続を作成する1つの方法を示しています。 `<asp:webpartconnection>` 要素の `ProviderConnectionPointID` 属性に注意してください。 接続はプログラムによって作成することもできます。これを行うためのコードは、`Button1_Click` メソッド内にあります。 この場合、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトが作成され、実際の接続を作成するメソッドに渡されます。 接続が宣言によって作成されるか、プログラムによって作成されるかにかかわらず、接続ポイントはプロバイダーとコンシューマーの両方に対して常に指定する必要があります。 `Button2_Click` メソッドは、プロバイダーとコンシューマーの両方の <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> オブジェクトにアクセスし、そのプロパティ値の一部をページのラベルに書き込みます。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ブラウザーでページを読み込んだ後、**[接続ポイントの詳細]** ボタンをクリックします。 宣言型接続で確立されたプロバイダーおよびコンシューマー接続ポイントに関する情報が表示されます。 次に、**[表示モード]** ドロップダウンコントロールを使用して、ページを接続モードに切り替えます。 **郵便番号コンシューマー**<xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールの動詞メニューで (タイトルバーの下向き矢印で表されます)、connect 動詞をクリックします。 接続 UI が表示され、ページで宣言された `<asp:connectionszone>` コントロールによって自動的に作成されます。 これは、(UI を介して) 接続を作成するもう1つの方法であり、前に説明した宣言型およびプログラムによる方法を使用します。 **[切断]** ボタンをクリックして、既存の静的接続を終了します。 **[プロバイダーへの接続の作成]** リンクをクリックします。 UI に、プロバイダー接続ポイントの表示名を一覧表示するドロップダウンコントロールが表示されるようになりました。 ドロップダウンリストで接続ポイントを選択し、**[接続]** をクリックして接続を完了します。 次に、**[切断]** をもう一度クリックします。 次に、**[動的接続]** ボタンをクリックして、プログラムによって接続を作成します。 **[表示モード]** コントロールを使用して、ページをブラウズモードに戻します。 **[接続ポイントの詳細]** ボタンをもう一度クリックすると、プロバイダー接続ポイントオブジェクトの詳細が1回表示されます。  
  
 この例では、接続の確立とプロバイダー接続ポイントの使用方法について、Web ページマークアップで宣言された静的接続の3つの方法を示しています。<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトを使用したコードで作成された接続です。接続 UI を介してユーザーが作成した接続。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Web パーツ接続の概要</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">インターフェイス インスタンスをコンシューマーに返して接続を確立する、プロバイダー コントロールのメソッド。</param>
        <param name="interfaceType">プロバイダーがコンシューマーに提供するインターフェイスの <see cref="T:System.Type" />。</param>
        <param name="controlType">プロバイダー コネクション ポイントが関連付けられるプロバイダー コントロールの <see cref="T:System.Type" />。</param>
        <param name="displayName">接続ユーザー インターフェイス (UI) でユーザーに表示される、プロバイダー コネクション ポイントの表示名。</param>
        <param name="id">プロバイダー コネクション ポイントの一意の識別子。</param>
        <param name="allowsMultipleConnections">プロバイダー コネクション ポイントがコンシューマーとの間で同時に複数の接続を持つことができるかどうかを示すブール値。</param>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> クラスの <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> コンストラクターは、基本コンストラクターを呼び出して、さまざまなパラメーターに渡し、基本クラスを初期化するだけです。  
  
 基底クラスのコンストラクターは、コネクションポイントのパラメーターの数をチェックし、いくつかの例外をスローできます。 発生する可能性のある例外の一覧については、「例外」を参照してください。  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> コンストラクターを呼び出して、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> クラスの独自のインスタンスを作成できます。 ただし、単に接続を確立し、クラスを拡張しない場合は、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> メソッドを呼び出して、プロバイダーから既存の接続ポイントオブジェクトを返す必要があります。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> クラスから派生させて、カスタムプロバイダー接続ポイントを作成する方法を示しています。  
  
 このコード例には、次の3つの部分があります。  
  
-   プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール、コンシューマー <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール、およびカスタム <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトを含むソースファイル。  
  
-   静的接続のコントロールをホストする Web ページ。  
  
-   コード例を実行する方法について説明します。  
  
 コード例の最初の部分は、プロバイダーとコンシューマー <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールのソースと、`TableProviderConnectionPoint`という名前のカスタム <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> クラスです。 `TableProviderConnectionPoint` クラスのコンストラクターは基本コンストラクターを呼び出し、Parameters セクションで示されている必須パラメーターを渡します。 また、`TableProviderWebPart` クラスでは、`GetConnectionInterface` メソッドが接続のコールバックメソッドとして指定されており、`ConnectionProvider` 属性がカスタム `TableProviderConnectionPoint` をパラメーターとして宣言していることにも注意してください。 ここでは、カスタムプロバイダー接続ポイントを作成し、プロバイダーコントロールに関連付ける方法について説明します。 この例では、ソースコードが動的にコンパイルされることを前提としているため、ソースコードファイルを Web アプリケーションの App_Code サブフォルダーに配置する必要があります。  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 コード例の2番目の部分は、静的な Web パーツ接続でカスタムコントロールをホストする Web ページです。 ページの上部には、カスタムコントロールのプレフィックスと名前空間を宣言するための `Register` ディレクティブがあります。 接続は `<asp:webpartconnection>` 要素を使用して宣言され、プロバイダーおよびコンシューマーコントロールは `<asp:webpartzone>` 要素内で宣言されます。  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 ブラウザーにページを読み込みます。 コントロール間の接続は既に存在しています。コンシューマーは、接続がページ内の静的接続として宣言されているため、プロバイダーからのデータを表示します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callbackMethod" /> が <see langword="null" /> です。  
  
または 
 <paramref name="interfaceType" /> が <see langword="null" /> です。  
  
または 
 <paramref name="controlType" /> が <see langword="null" /> です。  
  
または 
 <paramref name="displayName" /> は <see langword="null" /> または空の文字列 ("") です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="controlType" /> が、プロバイダー コントロール (またはそれから派生した有効なクラス) と同じ型ではありません。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web パーツコントロール</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObject (control As Control) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Web パーツ接続でプロバイダーとして動作するコントロール。</param>
        <summary>コンシューマーに返すインターフェイス インスタンスを取得する、プロバイダー コントロールのコールバック メソッドを呼び出します。</summary>
        <returns>プロバイダーがコンシューマーに返して接続を確立するインターフェイスのインスタンスである、<see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、接続を確立するために使用されるインターフェイスのインスタンスであるプロバイダーコントロールからオブジェクトを返します。 オブジェクトの型は、実装されたインターフェイスの型になります。 たとえば、Web パーツコントロールセットの接続用に実装されている2つのインターフェイスは <xref:System.Web.UI.WebControls.WebParts.IWebPartField> と <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>です。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> メソッドが <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトで呼び出されると、関連付けられているプロバイダーがこれらのインターフェイスのいずれかを実装する場合、返されるオブジェクトは同じ型になります。  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> メソッドは、接続がアクティブになっているときに <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクトによって呼び出されます。 これは、実際に接続を開始し、2つのコントロールでデータを共有できるようにするプロセスを開始するための重要な手順です。  
  
 接続のコンシューマーコントロールは、プロバイダーと同じ種類のインターフェイスで動作できる必要があります。 そうでない場合は、コントロールに互換性がなく、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> オブジェクトを使用して接続を確立する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSecondaryInterfaces (control As Control) As ConnectionInterfaceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Web パーツ接続でプロバイダーとして動作するコントロール。</param>
        <summary>プロバイダー コネクション ポイントによってサポートされるセカンダリ インターフェイスの、オプションのコレクションを取得します。</summary>
        <returns>プロバイダーとして動作するコントロールによって提供される追加のインターフェイスの <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロバイダー接続ポイントオブジェクトには、コンシューマーとの接続を確立するために使用される既定のインターフェイスが常にあります。 既定のインターフェイスのインスタンスは、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトの <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> メソッドを呼び出すことによって取得されます。  
  
 ただし、一部のプロバイダーコントロールは、接続の一部としてコンシューマーに提供する複数のインターフェイスを実装します。 接続を確立するために使用される既定のインターフェイスではないインターフェイスは、セカンダリインターフェイスと呼ばれます。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> メソッドを使用すると、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> メソッドが既定のインターフェイスへの参照を返す場合と同様に、セカンダリインターフェイスへの参照のコレクションを返すことができます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> クラスの <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> メソッドには実装が含まれていません。このメソッドは、セカンダリインターフェイスの空のコレクションを返します。 このメソッドを実装するには、<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> クラスを継承し、このメソッドをオーバーライドして、特定のセカンダリインターフェイスセットからこのメソッドを返します。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
