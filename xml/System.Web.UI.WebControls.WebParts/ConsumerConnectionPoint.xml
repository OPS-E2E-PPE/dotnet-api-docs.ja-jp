<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b2bfb77c922ec1d4801ef8b0e2dc822511fa6e1c" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78765516" /></Metadata><TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0c546-101">コンシューマーとして動作するサーバー コントロールがプロバイダーとの接続を構成できるようにする、コネクション ポイント オブジェクトを定義します。</span><span class="sxs-lookup"><span data-stu-id="0c546-101">Defines a connection point object that enables a server control acting as a consumer to form a connection with a provider.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c546-102">2つのサーバーコントロール間のすべての Web パーツ接続では、コントロールが他のコントロールに接続し、データを提供または使用できるようにするために、関連付けられている接続ポイントオブジェクトが各コントロールに必要です。は、接続のプロバイダーまたはコンシューマーとして指定されます。</span><span class="sxs-lookup"><span data-stu-id="0c546-102">In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection.</span></span> <span data-ttu-id="0c546-103">一般的なオブジェクト <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> には、コントロールが別のコントロールに接続する方法、および共有できるデータの種類の詳細が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0c546-103">A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share.</span></span> <span data-ttu-id="0c546-104">接続でコンシューマーとして動作するコントロールの場合、接続ポイントは <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトである必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-104">For a control acting as the consumer in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.</span></span> <span data-ttu-id="0c546-105">Web パーツ接続と接続ポイントの詳細については、以下の「関連項目」セクションに記載されているトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="0c546-105">For details on Web Parts connections and connection points, read the topics listed in the See Also section below.</span></span>  
  
 <span data-ttu-id="0c546-106"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトを作成するには、いくつかの手順が必要です。</span><span class="sxs-lookup"><span data-stu-id="0c546-106">To create a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, several steps are required:</span></span>  
  
1.  <span data-ttu-id="0c546-107">コンシューマーコントロールがインターフェイスインスタンスを参照できるようにします。</span><span class="sxs-lookup"><span data-stu-id="0c546-107">Enable a consumer control to reference an interface instance.</span></span> <span data-ttu-id="0c546-108"><xref:System.Web.UI.WebControls.WebParts.WebPart> またはその他のサーバーコントロール (<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> ゾーンに追加される任意の種類のサーバーコントロール) は、特定のインターフェイスインスタンスからのデータを使用できる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-108">A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control that will be added to a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) must be able to consume data from a specific interface instance.</span></span> <span data-ttu-id="0c546-109">コントロールは、インターフェイスを実装する必要はありません。プロバイダーのみを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-109">The control need not implement the interface; only the provider must implement it.</span></span> <span data-ttu-id="0c546-110">コンシューマーは、プロバイダーによって提供されるインターフェイスの型を使用して操作できます。また、プロバイダーがない場合は、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> オブジェクトを使用して、プロバイダーのインターフェイス型からコンシューマーによって認識される型にデータを変換することもできます。</span><span class="sxs-lookup"><span data-stu-id="0c546-110">The consumer can either work with the exact interface type served by a provider or, if it does not, a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object can be used to transform data from a provider's interface type to a type understood by the consumer.</span></span> <span data-ttu-id="0c546-111">コンシューマーを有効にする一般的な方法は、目的のインターフェイス型への参照を格納するプライベートフィールドを宣言することです。</span><span class="sxs-lookup"><span data-stu-id="0c546-111">A typical way to enable a consumer is to declare a private field to contain a reference to the desired interface type.</span></span>  
  
2.  <span data-ttu-id="0c546-112">コールバックメソッドを識別します。</span><span class="sxs-lookup"><span data-stu-id="0c546-112">Identify a callback method.</span></span> <span data-ttu-id="0c546-113">コンシューマーのメソッドは、プロバイダーとの接続を確立するためのコールバックメソッドとして識別される必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-113">A method in the consumer must be identified as the callback method to establish a connection with the provider.</span></span> <span data-ttu-id="0c546-114">このメソッドは、プロバイダーが実装するインターフェイスのインスタンスを取得し、最初の手順で作成されたプライベートフィールドに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="0c546-114">This method retrieves an instance of the interface that the provider implements, and assigns it to (for example) the private field created in the first step.</span></span> <span data-ttu-id="0c546-115">コンシューマーのコールバックメソッドを識別する Web パーツ方法は、インターフェイスインスタンスを受け取るメソッドに `ConnectionConsumer` メタデータ属性 (<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> クラスで定義) を追加することです。</span><span class="sxs-lookup"><span data-stu-id="0c546-115">The Web Parts approach for identifying a callback method in the consumer is to add a `ConnectionConsumer` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> class) to the method that receives the interface instance.</span></span> <span data-ttu-id="0c546-116">属性を追加するときに必要なパラメーターは、コンシューマー接続ポイントに使用する表示名だけです。</span><span class="sxs-lookup"><span data-stu-id="0c546-116">When the attribute is added, the only required parameter is a display name to use for the consumer connection point.</span></span> <span data-ttu-id="0c546-117">ID など、省略可能なパラメーターを追加することもできます。</span><span class="sxs-lookup"><span data-stu-id="0c546-117">Optional parameters can also be added, such as an ID.</span></span>  
  
3.  <span data-ttu-id="0c546-118">インターフェイスインスタンスからデータを処理して出力します。</span><span class="sxs-lookup"><span data-stu-id="0c546-118">Process and output the data from the interface instance.</span></span> <span data-ttu-id="0c546-119">必要に応じてデータに対して内部処理を実行し、通常はコンシューマーコントロールがページにデータを表示します。</span><span class="sxs-lookup"><span data-stu-id="0c546-119">Perform any internal processing as needed on the data, and then typically a consumer control will render the data to the page.</span></span> <span data-ttu-id="0c546-120">これを行う一般的な方法は、コントロールの <xref:System.Web.UI.Control.OnPreRender%2A> メソッドをオーバーライドすることです。</span><span class="sxs-lookup"><span data-stu-id="0c546-120">A common way of doing this is to override the control's <xref:System.Web.UI.Control.OnPreRender%2A> method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="0c546-121">コンシューマーは、同期要求の実行中または <xref:System.Web.UI.Control.PreRender> イベントの直後に、プロバイダーから直接データを要求する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-121">During a synchronous request, a consumer should request data directly from the provider during or immediately after the <xref:System.Web.UI.Control.PreRender> event.</span></span> <span data-ttu-id="0c546-122">非同期要求では、表示中にプロバイダーのコールバックメソッドが呼び出されないと、開発者はデータがコンシューマーに送信されなかったと見なすことができます。</span><span class="sxs-lookup"><span data-stu-id="0c546-122">During an asynchronous request, if the provider's callback method is not called at any point during rendering, the developer can assume that no data was sent to the consumer.</span></span>  
  
 <span data-ttu-id="0c546-123">コントロールがコンシューマーとして動作するようになった後、コントロールは接続に参加できます (プロバイダーコントロールも用意されており、使用可能であることを前提としています)。</span><span class="sxs-lookup"><span data-stu-id="0c546-123">After a control has been equipped to act as a consumer, the control can participate in connections (assuming that a provider control is also equipped and available).</span></span> <span data-ttu-id="0c546-124">Web ページのマークアップ内に静的な宣言型接続を作成するには、開発者は `<asp:webpartconnection>` 要素を使用できます。</span><span class="sxs-lookup"><span data-stu-id="0c546-124">To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="0c546-125">コールバックメソッドを識別するコンシューマーソースコードの `ConnectionConsumer` 属性がコネクションポイントの ID を指定する場合は、その値をページの `<asp:webpartconnection>` 要素の `ConsumerConnectionPointID` 属性に割り当てる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-125">If the `ConnectionConsumer` attribute in the consumer source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page.</span></span> <span data-ttu-id="0c546-126">コンシューマーコントロールに複数の接続ポイントが定義されている場合、開発者がコンシューマー接続ポイントの ID を指定する理由は、</span><span class="sxs-lookup"><span data-stu-id="0c546-126">A reason that a developer might specify an ID for a consumer connection point is if there are multiple connection points defined in the consumer control.</span></span> <span data-ttu-id="0c546-127">コンシューマーコントロールのコンシューマー接続ポイントに ID が指定されていない場合は、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> フィールドから取得した既定値を使用して接続が作成されるため、ページの `ConsumerConnectionPointID` 属性に値を割り当てる必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0c546-127">If an ID is not specified for the consumer connection point in the consumer control, a value does not have to be assigned to the `ConsumerConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.</span></span>  
  
 <span data-ttu-id="0c546-128">コード内で接続を作成するには、開発者は、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> メソッドを呼び出し、コンシューマーコントロールの ID と、コンシューマーコントロールの定義済み <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトの ID またはインデックスを渡すことによって、新しい <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-128">To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method and passing to it the ID of the consumer control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object in the consumer control.</span></span> <span data-ttu-id="0c546-129">返された <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトは、コンシューマーコントロールへの参照、プロバイダーコントロールへの参照、および対応する <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトをすべて <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> メソッドに渡して、新しい <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="0c546-129">The returned <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, along with a reference to the consumer control, a reference to the provider control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.</span></span>  
  
 <span data-ttu-id="0c546-130">開発者は、宣言によって、またはプログラムによって接続を確立する際にコンシューマー接続ポイントを使用できますが、ユーザーはコンシューマー接続ポイントと対話して、ユーザーインターフェイス (UI) を使用して接続を確立することもできます。</span><span class="sxs-lookup"><span data-stu-id="0c546-130">Although developers can use consumer connection points as part of establishing connections either declaratively or programmatically, users can also interact with consumer connection points to establish connections through the user interface (UI).</span></span> <span data-ttu-id="0c546-131">開発者が Web ページ上で <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> コントロールを宣言すると、ユーザーが接続を作成するためのランタイム UI が提供されます。</span><span class="sxs-lookup"><span data-stu-id="0c546-131">If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections.</span></span> <span data-ttu-id="0c546-132">接続を確立するための開始点としてプロバイダーコントロールを選択した場合 (コンシューマーを選択することもできますが、結果として得られる接続に違いはありません)、UI にはドロップダウンリストコントロールが表示されます。プロバイダーがデータを送信できる、使用可能なコンシューマー接続ポイントの名前を表示します (複数のコンシューマー接続ポイントがある場合はそれを指します)。</span><span class="sxs-lookup"><span data-stu-id="0c546-132">If users choose the provider control as the starting point for establishing the connection by clicking its connect verb (they could also choose the consumer; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display names of the available consumer connection point (or points if there are multiple ones) that the provider can send the data to.</span></span> <span data-ttu-id="0c546-133">接続を確立するには、ユーザーがコンシューマー接続ポイントを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-133">Users must select a consumer connection point to establish a connection.</span></span>  
  
 <span data-ttu-id="0c546-134"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトは、特定のコンシューマーコントロールに直接関連付け、基本 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラスから継承したプロパティに接続に関する詳細を格納します。</span><span class="sxs-lookup"><span data-stu-id="0c546-134">A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object associates directly with a specific consumer control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="0c546-135">たとえば、継承された <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> プロパティでは、コンシューマー接続ポイントは使用するインターフェイスの型を保持します。</span><span class="sxs-lookup"><span data-stu-id="0c546-135">For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a consumer connection point keeps the type of interface it uses.</span></span> <span data-ttu-id="0c546-136">接続のプロバイダーとコンシューマーがインターフェイスの種類を理解している場合、コントロールは互換性があり、直接接続を形成できます。</span><span class="sxs-lookup"><span data-stu-id="0c546-136">If the provider and consumer in a connection both understand the interface type, the controls are compatible and capable of forming a direct connection.</span></span> <span data-ttu-id="0c546-137">プロバイダーとコンシューマーが同じインターフェイス型を使用できない場合、それらは互換性がなく、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> オブジェクトを使用して、プロバイダー接続ポイントの <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> プロパティをコンシューマーが使用できる型に変換する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-137">If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property into a type that the consumer can work with.</span></span> <span data-ttu-id="0c546-138">継承されたもう1つの重要なプロパティは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> プロパティです。これにより、接続の作成時にユーザーがコンシューマー接続ポイントを選択するための表示名が UI に表示されます。</span><span class="sxs-lookup"><span data-stu-id="0c546-138">Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a consumer connection point when creating connections.</span></span> <span data-ttu-id="0c546-139">表示名は、開発者がコンシューマーコントロールのコールバックメソッドに `ConnectionConsumer` 属性を追加するときに必要なパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="0c546-139">The display name is the required parameter when developers add a `ConnectionConsumer` attribute to the callback method in a consumer control.</span></span> <span data-ttu-id="0c546-140">継承された <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> プロパティは、コンシューマーが複数のコネクションポイントを持っている場合に、コンシューマー接続ポイントに対して一意の識別子を提供するため、前述のように便利です。</span><span class="sxs-lookup"><span data-stu-id="0c546-140">The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a consumer connection point in the event that a consumer has multiple connection points.</span></span> <span data-ttu-id="0c546-141">コンシューマーは、複数の <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトを定義できます。この場合は、開発者がメソッドに `ConnectionConsumer` 属性を追加するときに、各接続ポイントを区別するために ID 値を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-141">A consumer can have multiple <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionConsumer` attribute to a method, they should specify an ID value to distinguish each connection point.</span></span> <span data-ttu-id="0c546-142">もう1つの注目すべき継承されたプロパティは、コンシューマー接続ポイントを複数のプロバイダーに同時に接続できるかどうかを示す <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0c546-142">One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a consumer connection point can connect simultaneously to multiple providers.</span></span> <span data-ttu-id="0c546-143">コンシューマー接続ポイントの場合、このプロパティ値は既定で `false` されます (一方、プロバイダー接続ポイントの場合は `true` になります)。</span><span class="sxs-lookup"><span data-stu-id="0c546-143">This property value is `false` by default for consumer connection points (whereas it defaults to `true` for provider connection points).</span></span>  
  
 <span data-ttu-id="0c546-144"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> クラスは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラスから継承したメンバーに、いくつかの一意のメソッドを追加します。</span><span class="sxs-lookup"><span data-stu-id="0c546-144">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="0c546-145"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> メソッドは、プロバイダーからインターフェイスインスタンスを取得するために、コンシューマー独自に定義されたコールバックメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0c546-145">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method invokes the consumer's own defined callback method to retrieve the interface instance from the provider.</span></span> <span data-ttu-id="0c546-146"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> メソッドは、関連付けられたコンシューマーコントロールの現在の状態に基づいて、コネクションポイントが接続を確立できるかどうかを示すブール値を返します。</span><span class="sxs-lookup"><span data-stu-id="0c546-146">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method returns a Boolean value that indicates whether the connection point is able to establish connections, based on the current state of the associated consumer control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c546-147">次のコード例では、コンシューマー接続ポイントを使用する場合に、プログラムによって、または UI を介して、接続を宣言によって作成する簡単な方法を示します。</span><span class="sxs-lookup"><span data-stu-id="0c546-147">The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a consumer connection point.</span></span>  
  
 <span data-ttu-id="0c546-148">この例には、次の4つの部分があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-148">The example has four parts:</span></span>  
  
-   <span data-ttu-id="0c546-149">ページの Web パーツ表示モードを変更できるユーザーコントロール。</span><span class="sxs-lookup"><span data-stu-id="0c546-149">A user control that enables you to change the Web Parts display mode on a page.</span></span>  
  
-   <span data-ttu-id="0c546-150">インターフェイスのソースコードと、プロバイダーおよび接続のコンシューマーとして機能する2つの <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール。</span><span class="sxs-lookup"><span data-stu-id="0c546-150">Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.</span></span>  
  
-   <span data-ttu-id="0c546-151">すべてのコントロールをホストし、コード例を実行するための Web ページ。</span><span class="sxs-lookup"><span data-stu-id="0c546-151">A Web page to host all the controls and run the code example.</span></span>  
  
-   <span data-ttu-id="0c546-152">例ページを実行する方法について説明します。</span><span class="sxs-lookup"><span data-stu-id="0c546-152">An explanation of how to run the example page.</span></span>  
  
 <span data-ttu-id="0c546-153">このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるようにするユーザーコントロールです。</span><span class="sxs-lookup"><span data-stu-id="0c546-153">The first part of this code example is the user control that enables users to change display modes on a Web page.</span></span> <span data-ttu-id="0c546-154">次のソースコードを .ascx ファイルに保存し、このユーザーコントロールの `Register` ディレクティブの `Src` 属性に割り当てられているファイル名を指定します。これは、ホストしている Web ページの上部付近にあります。</span><span class="sxs-lookup"><span data-stu-id="0c546-154">Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page.</span></span> <span data-ttu-id="0c546-155">このコントロールの表示モードとソースコードの説明の詳細については、「[チュートリアル: Web パーツページの表示モードの変更](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0c546-155">For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 <span data-ttu-id="0c546-156">コード例の2番目の部分は、インターフェイスとコントロールのソースコードです。</span><span class="sxs-lookup"><span data-stu-id="0c546-156">The second part of the code example is the source code for the interface and controls.</span></span> <span data-ttu-id="0c546-157">ソースファイルには、`IZipCode`という名前の単純なインターフェイスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="0c546-157">The source file contains a simple interface named `IZipCode`.</span></span> <span data-ttu-id="0c546-158">インターフェイスを実装し、プロバイダーコントロールとして機能する `ZipCodeWebPart` という名前の <xref:System.Web.UI.WebControls.WebParts.WebPart> クラスもあります。</span><span class="sxs-lookup"><span data-stu-id="0c546-158">There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control.</span></span> <span data-ttu-id="0c546-159">その他の <xref:System.Web.UI.WebControls.WebParts.WebPart> クラスは `WeatherWebPart`という名前で、接続のコンシューマーとして機能します。</span><span class="sxs-lookup"><span data-stu-id="0c546-159">The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection.</span></span> <span data-ttu-id="0c546-160">このクラスには、プロバイダーコントロールから `IZipCode` インターフェイスのインスタンスを取得する `GetZipCode` という名前のメソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="0c546-160">This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control.</span></span> <span data-ttu-id="0c546-161">このメソッドは、メタデータ内の `ConnectionConsumer` 属性を使用して、コンシューマーの接続ポイントメソッドとしてマークされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="0c546-161">Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.</span></span> <span data-ttu-id="0c546-162">これは、コンシューマーコントロールのコネクションポイントメソッドを識別するための機構です。</span><span class="sxs-lookup"><span data-stu-id="0c546-162">This is the mechanism for identifying the connection point method in the consumer control.</span></span>  
  
 <span data-ttu-id="0c546-163">コード例を実行するには、このソースコードをコンパイルする必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-163">For the code example to run, you must compile this source code.</span></span> <span data-ttu-id="0c546-164">これを明示的にコンパイルし、生成されたアセンブリを Web サイトの Bin フォルダーまたはグローバルアセンブリキャッシュに格納することができます。</span><span class="sxs-lookup"><span data-stu-id="0c546-164">You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache.</span></span> <span data-ttu-id="0c546-165">または、ソースコードをサイトの App_Code フォルダーに配置して、実行時に動的にコンパイルされるようにすることもできます。</span><span class="sxs-lookup"><span data-stu-id="0c546-165">Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time.</span></span> <span data-ttu-id="0c546-166">このコード例では、動的コンパイルを使用します。</span><span class="sxs-lookup"><span data-stu-id="0c546-166">This code example uses dynamic compilation.</span></span> <span data-ttu-id="0c546-167">のコンパイル方法を示すチュートリアルについては、「[チュートリアル: カスタム Web サーバーコントロールの開発と使用](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0c546-167">For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).</span></span>  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 <span data-ttu-id="0c546-168">コード例の3番目の部分は、Web ページです。</span><span class="sxs-lookup"><span data-stu-id="0c546-168">The third part of the code example is the Web page.</span></span> <span data-ttu-id="0c546-169">上部の近くには、接続を形成するカスタムコントロールを登録するための `Register` ディレクティブと、ユーザーがページの表示モードを変更できるようにするユーザーコントロールがあります。</span><span class="sxs-lookup"><span data-stu-id="0c546-169">Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page.</span></span> <span data-ttu-id="0c546-170">接続自体は、ページの `<staticconnections>` 要素内で宣言によって作成されます。</span><span class="sxs-lookup"><span data-stu-id="0c546-170">The connection itself is created declaratively within the `<staticconnections>` element on the page.</span></span> <span data-ttu-id="0c546-171">これは、接続を作成する1つの方法を示しています。 `<asp:webpartconnection>` 要素の `ConsumerConnectionPointID` 属性に注意してください。</span><span class="sxs-lookup"><span data-stu-id="0c546-171">This demonstrates one way of creating a connection--note the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="0c546-172">接続はプログラムによって作成することもできます。これを行うためのコードは、`Button1_Click` メソッド内にあります。</span><span class="sxs-lookup"><span data-stu-id="0c546-172">You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method.</span></span> <span data-ttu-id="0c546-173">この場合、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトが作成され、実際の接続を作成するメソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="0c546-173">In this case, a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object is created and then passed to a method that creates the actual connection.</span></span> <span data-ttu-id="0c546-174">接続が宣言によって作成されるか、プログラムによって作成されるかにかかわらず、接続ポイントはプロバイダーとコンシューマーの両方に対して常に指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-174">Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer.</span></span> <span data-ttu-id="0c546-175">`Button2_Click` メソッドは、プロバイダーとコンシューマーの両方の <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> オブジェクトにアクセスし、そのプロパティ値の一部をページのラベルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="0c546-175">The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 <span data-ttu-id="0c546-176">ブラウザーでページを読み込んだ後、**[接続ポイントの詳細]** ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="0c546-176">After you load the page in a browser, click the **Connection Point Details** button.</span></span> <span data-ttu-id="0c546-177">宣言型接続で確立されたプロバイダーおよびコンシューマー接続ポイントに関する情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="0c546-177">Information about the provider and consumer connection points established in the declarative connection appears.</span></span> <span data-ttu-id="0c546-178">次に、**[表示モード]** ドロップダウンコントロールを使用して、ページを接続モードに切り替えます。</span><span class="sxs-lookup"><span data-stu-id="0c546-178">Next, use the **Display Mode** drop-down control to switch the page into connect mode.</span></span> <span data-ttu-id="0c546-179">**郵便番号プロバイダー**<xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール (タイトルバーの下向き矢印で表されます) の動詞メニューで、connect 動詞をクリックします。</span><span class="sxs-lookup"><span data-stu-id="0c546-179">On the verbs menu of the **ZIP Code Provider**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb.</span></span> <span data-ttu-id="0c546-180">接続 UI が表示され、ページで宣言された `<asp:connectionszone>` コントロールによって自動的に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0c546-180">The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page.</span></span> <span data-ttu-id="0c546-181">これは、(UI を介して) 接続を作成するもう1つの方法であり、前に説明した宣言型およびプログラムによる方法を使用します。</span><span class="sxs-lookup"><span data-stu-id="0c546-181">This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier.</span></span> <span data-ttu-id="0c546-182">**[切断]** ボタンをクリックして、既存の静的接続を終了します。</span><span class="sxs-lookup"><span data-stu-id="0c546-182">Click the **Disconnect** button to terminate the existing static connection.</span></span> <span data-ttu-id="0c546-183">**[コンシューマーへの接続の作成]** リンクをクリックします。</span><span class="sxs-lookup"><span data-stu-id="0c546-183">Click the **Create a Connection to a Consumer** link.</span></span> <span data-ttu-id="0c546-184">UI に、コンシューマー接続ポイントの表示名を一覧表示するドロップダウンコントロールが表示されるようになりました。</span><span class="sxs-lookup"><span data-stu-id="0c546-184">The UI now displays a drop-down control that lists the consumer connection point display name.</span></span> <span data-ttu-id="0c546-185">ドロップダウンリストで接続ポイントを選択し、**[接続]** をクリックして接続を完了します。</span><span class="sxs-lookup"><span data-stu-id="0c546-185">Select the connection point in the drop-down list, and then click **Connect** to complete the connection.</span></span> <span data-ttu-id="0c546-186">次に、**[切断]** をもう一度クリックします。</span><span class="sxs-lookup"><span data-stu-id="0c546-186">Next, click **Disconnect** again.</span></span> <span data-ttu-id="0c546-187">**[動的接続]** ボタンをクリックして、プログラムによって接続を作成します。</span><span class="sxs-lookup"><span data-stu-id="0c546-187">Click the **Dynamic Connection** button to create a connection programmatically.</span></span> <span data-ttu-id="0c546-188">**[表示モード]** コントロールを使用して、ページをブラウズモードに戻します。</span><span class="sxs-lookup"><span data-stu-id="0c546-188">Use the **Display Mode** control to return the page to browse mode.</span></span> <span data-ttu-id="0c546-189">もう一度 **[接続ポイントの詳細]** ボタンをクリックして、コンシューマー接続ポイントオブジェクトの詳細を表示します。</span><span class="sxs-lookup"><span data-stu-id="0c546-189">Click the **Connection Point Details** button again, to indicate details about the consumer connection point object once more.</span></span>  
  
 <span data-ttu-id="0c546-190">この例では、接続の確立とコンシューマー接続ポイントの使用方法を、Web ページマークアップで宣言された静的接続の3つの方法で示しています。<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトを使用したコードで作成された接続です。接続 UI を介してユーザーが作成した接続。</span><span class="sxs-lookup"><span data-stu-id="0c546-190">The example has demonstrated establishing a connection and using a consumer connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object; and a connection created by a user through the connection UI.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)"><span data-ttu-id="0c546-191">ASP.NET Web パーツコントロール</span><span class="sxs-lookup"><span data-stu-id="0c546-191">ASP.NET Web Parts Controls</span></span></related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)"><span data-ttu-id="0c546-192">Web パーツ接続の概要</span><span class="sxs-lookup"><span data-stu-id="0c546-192">Web Parts Connections Overview</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod"><span data-ttu-id="0c546-193">接続を確立するためのインターフェイス インスタンスをコンシューマーに返す、コンシューマー コントロールのメソッド。</span><span class="sxs-lookup"><span data-stu-id="0c546-193">The method in the consumer control that returns an interface instance to consumers to establish a connection.</span></span></param>
        <param name="interfaceType"><span data-ttu-id="0c546-194">コンシューマーがプロバイダーから受け取るインターフェイスの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="0c546-194">The <see cref="T:System.Type" /> of the interface that the consumer receives from a provider.</span></span></param>
        <param name="controlType"><span data-ttu-id="0c546-195">コンシューマー接続ポイントが関連付けられたコンシューマー コントロールの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="0c546-195">The <see cref="T:System.Type" /> of the consumer control with which the consumer connection point is associated.</span></span></param>
        <param name="displayName"><span data-ttu-id="0c546-196">接続ユーザー インターフェイス (UI) でユーザーに対して表示される、コンシューマー接続ポイントの表示名。</span><span class="sxs-lookup"><span data-stu-id="0c546-196">A friendly display name for the consumer connection point that appears to users in the connection user interface (UI).</span></span></param>
        <param name="id"><span data-ttu-id="0c546-197">コンシューマー接続ポイントの一意な識別子。</span><span class="sxs-lookup"><span data-stu-id="0c546-197">A unique identifier for the consumer connection point.</span></span></param>
        <param name="allowsMultipleConnections"><span data-ttu-id="0c546-198">コンシューマー接続ポイントが、プロバイダーとの間で同時に複数の接続を持つことができるかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="0c546-198">A Boolean value indicating whether the consumer connection point can have multiple simultaneous connections with providers.</span></span></param>
        <summary><span data-ttu-id="0c546-199"><see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="0c546-199">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c546-200"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> クラスの <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> コンストラクターは、基本コンストラクターを呼び出して、さまざまなパラメーターに渡し、基本クラスを初期化するだけです。</span><span class="sxs-lookup"><span data-stu-id="0c546-200">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.</span></span>  
  
 <span data-ttu-id="0c546-201">基底クラスのコンストラクターは、コネクションポイントのパラメーターの数をチェックし、いくつかの例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="0c546-201">The base class constructor checks a number of the parameters for a connection point and can throw several exceptions.</span></span> <span data-ttu-id="0c546-202">発生する可能性のある例外の一覧については、「例外」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0c546-202">For a list of possible exceptions, see the Exceptions section.</span></span>  
  
 <span data-ttu-id="0c546-203"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> コンストラクターを呼び出して、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> クラスの独自のインスタンスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="0c546-203">You can call the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class.</span></span> <span data-ttu-id="0c546-204">ただし、単に接続を確立し、クラスを拡張しない場合は、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> メソッドを呼び出して、プロバイダーから接続ポイントオブジェクトを返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-204">However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method to return a connection point object from a provider.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c546-205">次のコード例は、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> クラスから派生させて、カスタムプロバイダー接続ポイントを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="0c546-205">The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class to create a custom provider connection point.</span></span>  
  
 <span data-ttu-id="0c546-206">このコード例には、次の3つの部分があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-206">The code example has three parts:</span></span>  
  
-   <span data-ttu-id="0c546-207">プロバイダー <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール、コンシューマー <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール、およびカスタム <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトを含むソースファイル。</span><span class="sxs-lookup"><span data-stu-id="0c546-207">A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.</span></span>  
  
-   <span data-ttu-id="0c546-208">静的接続のコントロールをホストする Web ページ。</span><span class="sxs-lookup"><span data-stu-id="0c546-208">A Web page that hosts the controls in a static connection.</span></span>  
  
-   <span data-ttu-id="0c546-209">コード例を実行する方法について説明します。</span><span class="sxs-lookup"><span data-stu-id="0c546-209">An explanation of how to run the example code.</span></span>  
  
 <span data-ttu-id="0c546-210">コード例の最初の部分は、プロバイダーとコンシューマー <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールのソースと、`TableConsumerConnectionPoint`という名前のカスタム <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> クラスです。</span><span class="sxs-lookup"><span data-stu-id="0c546-210">The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, named `TableConsumerConnectionPoint`.</span></span> <span data-ttu-id="0c546-211">`TableConsumerConnectionPoint` クラスのコンストラクターは基本コンストラクターを呼び出し、Parameters セクションで示されている必須パラメーターを渡します。</span><span class="sxs-lookup"><span data-stu-id="0c546-211">Note that the constructor of the `TableConsumerConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section.</span></span> <span data-ttu-id="0c546-212">また、`TableConsumer` クラスでは、`SetConnectionInterface` メソッドが接続のコールバックメソッドとして指定されており、`ConnectionConsumer` 属性がカスタム `TableConsumerConnectionPoint` をパラメーターとして宣言していることにも注意してください。</span><span class="sxs-lookup"><span data-stu-id="0c546-212">Also note that in the `TableConsumer` class, the `SetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionConsumer` attribute declares the custom `TableConsumerConnectionPoint` as a parameter.</span></span> <span data-ttu-id="0c546-213">ここでは、カスタムコンシューマー接続ポイントを作成し、コンシューマーコントロールに関連付ける方法について説明します。</span><span class="sxs-lookup"><span data-stu-id="0c546-213">This demonstrates how to create a custom consumer connection point and then associate it with a consumer control.</span></span> <span data-ttu-id="0c546-214">この例では、ソースコードが動的にコンパイルされることを前提としているため、ソースコードファイルを Web アプリケーションの App_Code サブフォルダーに配置する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-214">This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.</span></span>  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 <span data-ttu-id="0c546-215">コード例の2番目の部分は、静的な Web パーツ接続でカスタムコントロールをホストする Web ページです。</span><span class="sxs-lookup"><span data-stu-id="0c546-215">The second part of the code example is the Web page that hosts the custom controls in a static Web parts connection.</span></span> <span data-ttu-id="0c546-216">ページの上部には、カスタムコントロールのプレフィックスと名前空間を宣言するための `Register` ディレクティブがあります。</span><span class="sxs-lookup"><span data-stu-id="0c546-216">At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls.</span></span> <span data-ttu-id="0c546-217">接続は `<asp:webpartconnection>` 要素を使用して宣言され、プロバイダーおよびコンシューマーコントロールは `<asp:webpartzone>` 要素内で宣言されます。</span><span class="sxs-lookup"><span data-stu-id="0c546-217">The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.</span></span>  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 <span data-ttu-id="0c546-218">ブラウザーにページを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="0c546-218">Load the page in a browser.</span></span> <span data-ttu-id="0c546-219">コントロール間の接続は既に存在しています。コンシューマーは、接続がページ内の静的接続として宣言されているため、プロバイダーからのデータを表示します。</span><span class="sxs-lookup"><span data-stu-id="0c546-219">The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0c546-220"><paramref name="callbackMethod" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="0c546-220"><paramref name="callbackMethod" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0c546-221">- または -</span><span class="sxs-lookup"><span data-stu-id="0c546-221">-or-</span></span> 
 <span data-ttu-id="0c546-222"><paramref name="interfaceType" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="0c546-222"><paramref name="interfaceType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0c546-223">- または -</span><span class="sxs-lookup"><span data-stu-id="0c546-223">-or-</span></span> 
 <span data-ttu-id="0c546-224"><paramref name="controlType" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="0c546-224"><paramref name="controlType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="0c546-225">- または -</span><span class="sxs-lookup"><span data-stu-id="0c546-225">-or-</span></span> 
 <span data-ttu-id="0c546-226"><paramref name="displayName" /> は <see langword="null" /> または空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="0c546-226"><paramref name="displayName" /> is <see langword="null" /> or an empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0c546-227"><paramref name="controlType" /> が、コンシューマー コントロール (またはそれから派生した有効なクラス) と同じ型ではありません。</span><span class="sxs-lookup"><span data-stu-id="0c546-227"><paramref name="controlType" /> is not the same type as the consumer control (or a valid class derived from it).</span></span></exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)"><span data-ttu-id="0c546-228">ASP.NET Web パーツコントロール</span><span class="sxs-lookup"><span data-stu-id="0c546-228">ASP.NET Web Parts Controls</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetObject (control As Control, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="0c546-229">コンシューマー接続ポイントに関連付けられたコンシューマー コントロール。</span><span class="sxs-lookup"><span data-stu-id="0c546-229">The consumer control associated with a consumer connection point.</span></span></param>
        <param name="data"><span data-ttu-id="0c546-230">プロバイダー コントロールから返されたインターフェイス インスタンス。</span><span class="sxs-lookup"><span data-stu-id="0c546-230">The interface instance returned from a provider control.</span></span></param>
        <summary><span data-ttu-id="0c546-231">コンシューマー コントロールのコールバック メソッドを呼び出し、プロバイダー コントロールからインターフェイス インスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="0c546-231">Invokes the callback method in a consumer control and retrieves the interface instance from a provider control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c546-232">このメソッドは、コンシューマーコントロールのデータを格納するプロバイダーからインターフェイスインスタンスを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="0c546-232">This method receives an interface instance from a provider that contains data for the consumer control.</span></span>  
  
 <span data-ttu-id="0c546-233"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> メソッドは、接続がアクティブになっているときに <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクトによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0c546-233">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated.</span></span> <span data-ttu-id="0c546-234">これは、接続を開始し、2つのコントロールでデータを共有できるようにするための重要な手順です。</span><span class="sxs-lookup"><span data-stu-id="0c546-234">This is a critical step that is part of initiating a connection and enabling two controls to share data.</span></span>  
  
 <span data-ttu-id="0c546-235">接続のコンシューマーコントロールは、プロバイダーと同じ種類のインターフェイスで動作できる必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-235">The consumer control in a connection must be able to work with the same type of interface as the provider.</span></span> <span data-ttu-id="0c546-236">そうでない場合は、コントロールに互換性がなく、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> オブジェクトを使用して接続を確立する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-236">If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0c546-237"><paramref name="control" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="0c546-237"><paramref name="control" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SupportsConnection (control As Control, secondaryInterfaces As ConnectionInterfaceCollection) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="0c546-238"><see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> に関連付けられたコンシューマー コントロール。</span><span class="sxs-lookup"><span data-stu-id="0c546-238">The consumer control associated with the <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</span></span></param>
        <param name="secondaryInterfaces"><span data-ttu-id="0c546-239">接続に参加するセカンダリ インターフェイスの <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />。</span><span class="sxs-lookup"><span data-stu-id="0c546-239">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> of any secondary interfaces that participate in a connection.</span></span></param>
        <summary><span data-ttu-id="0c546-240">コンシューマー接続ポイントが現在接続を確立できるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="0c546-240">Determines whether a consumer connection point is currently capable of establishing a connection.</span></span></summary>
        <returns><span data-ttu-id="0c546-241">コネクション ポイントが現在接続を確立できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0c546-241"><see langword="true" /> if a connection point can currently establish a connection; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0c546-242">既定値は、<see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="0c546-242">The default is <see langword="true" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c546-243">実装されている <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> メソッドは、常に <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> クラスのすべてのケースで `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="0c546-243">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method as implemented always returns `true` in all cases for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class.</span></span> <span data-ttu-id="0c546-244">このメソッドの目的は、`control` の状態を確認し、特定の重要なポイントで `secondaryInterfaces` して、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトが現在接続を作成できるかどうかを判断することです。</span><span class="sxs-lookup"><span data-stu-id="0c546-244">The intent for this method is to have it check on the state of `control` and `secondaryInterfaces` at certain critical points to determine whether a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object is presently able to create a connection.</span></span>  
  
 <span data-ttu-id="0c546-245">`control` が接続を形成できない状態になっている場合や、接続を形成する前に `secondaryInterfaces` が存在する必要がある場合があります。</span><span class="sxs-lookup"><span data-stu-id="0c546-245">There can be scenarios where `control` is in a state that would make it impossible to form a connection, or where `secondaryInterfaces` must exist before a connection can be formed.</span></span> <span data-ttu-id="0c546-246">このような場合、開発者は <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> クラスから継承し、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> メソッドをオーバーライドして、接続ポイントが接続をサポートする準備ができた時点を判断するためのカスタム実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="0c546-246">In such cases, developers can inherit from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, and override the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method, providing a custom implementation to determine when the connection point is ready to support connections.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
