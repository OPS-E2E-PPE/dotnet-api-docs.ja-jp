<Type Name="Matrix" FullName="System.Windows.Media.Matrix">
  <Metadata><Meta Name="ms.openlocfilehash" Value="00e4a7c4912e8c223cfd0e2a63afe3e9277c5b25" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78809313" /></Metadata><TypeSignature Language="C#" Value="public struct Matrix : IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Matrix extends System.ValueType implements class System.IFormattable" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Matrix" />
  <TypeSignature Language="VB.NET" Value="Public Structure Matrix&#xA;Implements IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Matrix : IFormattable" />
  <TypeSignature Language="F#" Value="type Matrix = struct&#xA;    interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Matrix extends System.ValueType implements class System.IFormattable" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Media.MatrixConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Media.Converters.MatrixValueSerializer))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>2-D 空間での変換に使用される 3 x 3 アフィン変換行列を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 3 x 3 行列は [!INCLUDE[TLA2#tla_2d](~/includes/tla2sharptla-2d-md.md)] x-y 平面の変換に使用されます。 アフィン変換行列を乗算して、回転や傾斜 (傾斜) の後に平行移動などの任意の数の線形変換を形成できます。 アフィン変換行列の最終的な列は (0, 0, 1) と等しくなるため、最初の2つの列のメンバーのみを指定する必要があります。  ベクターは、列ベクターではなく、行ベクターとして表されることに注意してください。  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Media.Matrix> は、行優先順を使用して格納され、次の構造になります。  
  
||||  
|-|-|-|  
|<xref:System.Windows.Media.Matrix.M11%2A>|<xref:System.Windows.Media.Matrix.M12%2A>|0|  
|<xref:System.Windows.Media.Matrix.M21%2A>|<xref:System.Windows.Media.Matrix.M22%2A>|0|  
|<xref:System.Windows.Media.Matrix.OffsetX%2A>|<xref:System.Windows.Media.Matrix.OffsetY%2A>|1|  
  
 最後の行のメンバー <xref:System.Windows.Media.Matrix.OffsetX%2A> と <xref:System.Windows.Media.Matrix.OffsetY%2A>は、翻訳値を表します。  
  
 メソッドとプロパティでは、通常、次のように、変換行列は6つのメンバーのみを持つベクトルとして指定されます。  
  
 (<xref:System.Windows.Media.Matrix.M11%2A>, <xref:System.Windows.Media.Matrix.M12%2A>, <xref:System.Windows.Media.Matrix.M21%2A>, <xref:System.Windows.Media.Matrix.M22%2A>, <xref:System.Windows.Media.Matrix.OffsetX%2A>, <xref:System.Windows.Media.Matrix.OffsetY%2A>)  
  
 <xref:System.Windows.Media.Matrix> 構造体を直接使用して個々の点を変換したり、<xref:System.Windows.Media.MatrixTransform> を使用してオブジェクトを変換したりすることもできますが [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、では、マトリックスを直接操作することなくオブジェクトを変換できるようにするクラスのセット (<xref:System.Windows.Media.RotateTransform>、<xref:System.Windows.Media.ScaleTransform>、<xref:System.Windows.Media.SkewTransform>、<xref:System.Windows.Media.TranslateTransform>) も用意されています。  
  
<a name="xamlAttributeUsage_Matrix"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object property="m11, m12, m21, m22, offsetX, offsetY"/>  
- or -  
<object property="Identity"/>  
```  
  
<a name="xamlValues_Matrix"></a>   
## <a name="xaml-values"></a>XAML の値  
 *m11*  
 <xref:System.Double?displayProperty=nameWithType>  
  
 この <xref:System.Windows.Media.Matrix>の第1行、第1列の値。 詳細については、<xref:System.Windows.Media.Matrix.M11%2A> プロパティを参照してください。  
  
 *m12*  
 <xref:System.Double?displayProperty=nameWithType>  
  
 1行目と2番目の列の値。 詳細については、<xref:System.Windows.Media.Matrix.M12%2A> プロパティを参照してください。  
  
 *m21*  
 <xref:System.Double?displayProperty=nameWithType>  
  
 2番目の行と最初の列の値。 詳細については、<xref:System.Windows.Media.Matrix.M21%2A> プロパティを参照してください。  
  
 *m22*  
 <xref:System.Double?displayProperty=nameWithType>  
  
 2番目の行と2番目の列の値。 詳細については、<xref:System.Windows.Media.Matrix.M22%2A> プロパティを参照してください。  
  
 *offsetX*  
 <xref:System.Double?displayProperty=nameWithType>  
  
 3番目の行と1番目の列の値。 詳細については、<xref:System.Windows.Media.Matrix.OffsetX%2A> プロパティを参照してください。  
  
 *offsetY*  
 <xref:System.Double?displayProperty=nameWithType>  
  
 3番目の行と2番目の列の値。 詳細については、<xref:System.Windows.Media.Matrix.OffsetY%2A> プロパティを参照してください。  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159044">マトリックスのサンプル</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Matrix (double m11, double m12, double m21, double m22, double offsetX, double offsetY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 m11, float64 m12, float64 m21, float64 m22, float64 offsetX, float64 offsetY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (m11 As Double, m12 As Double, m21 As Double, m22 As Double, offsetX As Double, offsetY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Matrix(double m11, double m12, double m21, double m22, double offsetX, double offsetY);" />
      <MemberSignature Language="F#" Value="new System.Windows.Media.Matrix : double * double * double * double * double * double -&gt; System.Windows.Media.Matrix" Usage="new System.Windows.Media.Matrix (m11, m12, m21, m22, offsetX, offsetY)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="m11" Type="System.Double" />
        <Parameter Name="m12" Type="System.Double" />
        <Parameter Name="m21" Type="System.Double" />
        <Parameter Name="m22" Type="System.Double" />
        <Parameter Name="offsetX" Type="System.Double" />
        <Parameter Name="offsetY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="m11">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.M11" /> 係数。</param>
        <param name="m12">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.M12" /> 係数。</param>
        <param name="m21">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.M21" /> 係数。</param>
        <param name="m22">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.M22" /> 係数。</param>
        <param name="offsetX">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.OffsetX" /> 係数。</param>
        <param name="offsetY">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.OffsetY" /> 係数。</param>
        <summary><see cref="T:System.Windows.Media.Matrix" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (matrix As Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Windows.Media.Matrix -&gt; unit" Usage="matrix.Append matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">この <see cref="T:System.Windows.Media.Matrix" /> 構造体に追加する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
        <summary>指定した <see cref="T:System.Windows.Media.Matrix" /> 構造体をこの <see cref="T:System.Windows.Media.Matrix" /> 構造体に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作は、この <xref:System.Windows.Media.Matrix> 構造とパラメーター `matrix`を乗算することと同じです。  ただし、行列乗算は可換ではありません。したがって、この演算は、この <xref:System.Windows.Media.Matrix> 構造体によってパラメーター `matrix` を乗算することと同じではありません。つまり、(this * `matrix`) は (`matrix` * this) と同じではありません。  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.Media.Matrix> 構造体を別の <xref:System.Windows.Media.Matrix> 構造に追加する方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixRotateAboutPointExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixrotateaboutpointexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
        <altmember cref="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
        <altmember cref="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="Determinant">
      <MemberSignature Language="C#" Value="public double Determinant { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Determinant" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.Determinant" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Determinant As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Determinant { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Determinant : double" Usage="System.Windows.Media.Matrix.Determinant" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の行列式を取得します。</summary>
        <value>この <see cref="T:System.Windows.Media.Matrix" /> の行列式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 この例では、<xref:System.Windows.Media.Matrix>の決定を取得する方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixDeterminantExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixdeterminantexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した 2 つの <see cref="T:System.Windows.Media.Matrix" /> 構造体の値が同一かどうかを判断します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Windows.Media.Matrix> には、その値が double として格納されます。 <xref:System.Double> の値は算術演算を実行すると有効桁数が失われる可能性があるため、論理的に等しい2つの <xref:System.Double> 構造体の比較は失敗する可能性があります。  
  
   
  
## Examples  
 2つの <xref:System.Windows.Media.Matrix> 構造体が等しいかどうかを確認する方法を次の例に示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixEqualityExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixequalityexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="matrix.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">比較対象の <see cref="T:System.Object" />。</param>
        <summary>指定した <see cref="T:System.Object" /> が、この <see cref="T:System.Windows.Media.Matrix" /> と同じ <see cref="T:System.Windows.Media.Matrix" /> 構造体であるかどうかを判断します。</summary>
        <returns><see langword="true" /> が、この <paramref name="o" /> 構造体と同じ <see cref="T:System.Windows.Media.Matrix" /> 構造体の場合は <see cref="T:System.Windows.Media.Matrix" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Windows.Media.Matrix> には、その値が double として格納されます。 <xref:System.Double> の値は算術演算を実行すると有効桁数が失われる可能性があるため、論理的に等しい2つの <xref:System.Double> 構造体の比較は失敗する可能性があります。  
  
   
  
## Examples  
 2つの <xref:System.Windows.Media.Matrix> 構造体が等しいかどうかを確認する方法を次の例に示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixEqualityExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixequalityexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Media.Matrix value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.Media.Matrix value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Matrix) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::Media::Matrix value);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Windows.Media.Matrix -&gt; bool" Usage="matrix.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="value">このインスタンスと比較する <see cref="T:System.Windows.Media.Matrix" /> のインスタンス。</param>
        <summary>指定した <see cref="T:System.Windows.Media.Matrix" /> 構造体がこのインスタンスと同一であるかどうかを判断します。</summary>
        <returns>インスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Windows.Media.Matrix> には、その値が double として格納されます。 <xref:System.Double> の値は算術演算を実行すると有効桁数が失われる可能性があるため、論理的に等しい2つの <xref:System.Double> 構造体の比較は失敗する可能性があります。  
  
   
  
## Examples  
 2つの <xref:System.Windows.Media.Matrix> 構造体が等しいかどうかを確認する方法を次の例に示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixEqualityExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixequalityexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Media.Matrix matrix1, System.Windows.Media.Matrix matrix2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Media.Matrix matrix1, valuetype System.Windows.Media.Matrix matrix2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (matrix1 As Matrix, matrix2 As Matrix) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Windows::Media::Matrix matrix1, System::Windows::Media::Matrix matrix2);" />
      <MemberSignature Language="F#" Value="static member Equals : System.Windows.Media.Matrix * System.Windows.Media.Matrix -&gt; bool" Usage="System.Windows.Media.Matrix.Equals (matrix1, matrix2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix1" Type="System.Windows.Media.Matrix" />
        <Parameter Name="matrix2" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix1">比較する最初の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
        <param name="matrix2">比較する 2 番目の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
        <summary>指定した 2 つの <see cref="T:System.Windows.Media.Matrix" /> 構造体が同一かどうかを判断します。</summary>
        <returns><see langword="true" /> と <paramref name="matrix1" /> が同一である場合は <paramref name="matrix2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Windows.Media.Matrix> には、その値が double として格納されます。 <xref:System.Double> の値は算術演算を実行すると有効桁数が失われる可能性があるため、論理的に等しい2つの <xref:System.Double> 構造体の比較は失敗する可能性があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="matrix.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体のハッシュ コードを返します。</summary>
        <returns>このインスタンスのハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasInverse">
      <MemberSignature Language="C#" Value="public bool HasInverse { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasInverse" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.HasInverse" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasInverse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasInverse { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasInverse : bool" Usage="System.Windows.Media.Matrix.HasInverse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体が反転可能かどうかを示す値を取得します。</summary>
        <value><see langword="true" /> の逆が存在する場合は <see cref="T:System.Windows.Media.Matrix" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Windows.Media.Matrix> が反転できるかどうかを確認します。 反転できるの場合、<xref:System.Windows.Media.Matrix> は反転されます。  
  
 [!code-csharp[MatrixExamples_snip#MatrixInverseExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixinverseexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Identity">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.Matrix Identity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Media.Matrix Identity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.Identity" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Identity As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Media::Matrix Identity { System::Windows::Media::Matrix get(); };" />
      <MemberSignature Language="F#" Value="member this.Identity : System.Windows.Media.Matrix" Usage="System.Windows.Media.Matrix.Identity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>恒等 <see cref="T:System.Windows.Media.Matrix" /> を取得します。</summary>
        <value>恒等行列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Id 行列の値は、係数 [1, 1]、[2, 2]、[3, 3]、および残りの係数の値は0です。 これは、<xref:System.Windows.Media.Matrix.M11%2A> の設定と <xref:System.Windows.Media.Matrix.M22%2A> を1に、<xref:System.Windows.Media.Matrix.M12%2A>、<xref:System.Windows.Media.Matrix.M21%2A>、<xref:System.Windows.Media.Matrix.OffsetX%2A>、および <xref:System.Windows.Media.Matrix.OffsetY%2A> を0に設定することに関連しています。 アフィン行列では、<xref:System.Windows.Media.Matrix>、構造体、係数 [3, 1]、[3、2]、[3.3] の各値を常に0、0、および1に設定することを [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] する実装です。  
  
||||  
|-|-|-|  
|1|0|0|  
|0|1|0|  
|0|0|1|  
  
 Id 行列の場合、<xref:System.Windows.Media.Matrix.ToString%2A> メソッドは、<xref:System.Windows.Media.Matrix>の係数ではなく、文字列 "Identity" を返します。  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Media.Matrix.Identity%2A> 行列を取得する方法を示しています。  
  
 [!code-csharp[MatrixExamples_snip#MatrixIdentityExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixidentityexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.SetIdentity" />
        <altmember cref="P:System.Windows.Media.Matrix.IsIdentity" />
      </Docs>
    </Member>
    <Member MemberName="Invert">
      <MemberSignature Language="C#" Value="public void Invert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Invert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invert();" />
      <MemberSignature Language="F#" Value="member this.Invert : unit -&gt; unit" Usage="matrix.Invert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体を反転します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Windows.Media.Matrix> 構造体が反転できるかどうかを確認します。 反転できるの場合、<xref:System.Windows.Media.Matrix> 構造は反転されます。  
  
 [!code-csharp[MatrixExamples_snip#MatrixInverseExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixinverseexample_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Windows.Media.Matrix" /> 構造体は反転できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsIdentity">
      <MemberSignature Language="C#" Value="public bool IsIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.IsIdentity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIdentity As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIdentity { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsIdentity : bool" Usage="System.Windows.Media.Matrix.IsIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体が恒等行列かどうかを示す値を取得します。</summary>
        <value><see langword="true" /> 構造体が恒等行列の場合は <see cref="T:System.Windows.Media.Matrix" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Id 行列の値は、係数 [1, 1]、[2, 2]、[3, 3]、および残りの係数の値は0です。 これは、<xref:System.Windows.Media.Matrix.M11%2A> の設定と <xref:System.Windows.Media.Matrix.M22%2A> を1に、<xref:System.Windows.Media.Matrix.M12%2A>、<xref:System.Windows.Media.Matrix.M21%2A>、<xref:System.Windows.Media.Matrix.OffsetX%2A>、および <xref:System.Windows.Media.Matrix.OffsetY%2A> を0に設定することに関連しています。 <xref:System.Windows.Media.Matrix> 構造体に対して [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 使用する実装であるアフィン行列では、係数 [3, 1]、[3, 2]、[3.3] が常に0、0、1の値を常に持つことが暗黙的に指定されています。  
  
||||  
|-|-|-|  
|1|0|0|  
|0|1|0|  
|0|0|1|  
  
 Id 行列の場合、<xref:System.Windows.Media.Matrix.ToString%2A> メソッドは、<xref:System.Windows.Media.Matrix>の係数ではなく、文字列 "Identity" を返します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Matrix.Identity" />
        <altmember cref="M:System.Windows.Media.Matrix.SetIdentity" />
      </Docs>
    </Member>
    <Member MemberName="M11">
      <MemberSignature Language="C#" Value="public double M11 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 M11" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.M11" />
      <MemberSignature Language="VB.NET" Value="Public Property M11 As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double M11 { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.M11 : double with get, set" Usage="System.Windows.Media.Matrix.M11" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 1 行、第 1 列の値を取得または設定します。</summary>
        <value>この <see cref="T:System.Windows.Media.Matrix" /> の第 1 行、第 1 列の値。 既定値は 1 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、2つの <xref:System.Windows.Media.Matrix> 構造体を乗算する方法と、値を宣言するときと構造体を宣言した後に <xref:System.Windows.Media.Matrix> に値を割り当てる方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixMultiplicationExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixmultiplicationexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="M12">
      <MemberSignature Language="C#" Value="public double M12 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 M12" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.M12" />
      <MemberSignature Language="VB.NET" Value="Public Property M12 As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double M12 { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.M12 : double with get, set" Usage="System.Windows.Media.Matrix.M12" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 1 行、第 2 列の値を取得または設定します。</summary>
        <value>この <see cref="T:System.Windows.Media.Matrix" /> の第 1 行、第 2 列の値。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表は、<xref:System.Windows.Media.Matrix>のレイアウトを示しています。  
  
||||  
|-|-|-|  
|<xref:System.Windows.Media.Matrix.M11%2A>|<xref:System.Windows.Media.Matrix.M12%2A>|0|  
|<xref:System.Windows.Media.Matrix.M21%2A>|<xref:System.Windows.Media.Matrix.M22%2A>|0|  
|<xref:System.Windows.Media.Matrix.OffsetX%2A>|<xref:System.Windows.Media.Matrix.OffsetY%2A>|1|  
  
   
  
## Examples  
 次の例では、2つの <xref:System.Windows.Media.Matrix> 構造体を乗算する方法と、値を宣言するときと構造体を宣言した後に <xref:System.Windows.Media.Matrix> に値を割り当てる方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixMultiplicationExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixmultiplicationexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="M21">
      <MemberSignature Language="C#" Value="public double M21 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 M21" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.M21" />
      <MemberSignature Language="VB.NET" Value="Public Property M21 As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double M21 { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.M21 : double with get, set" Usage="System.Windows.Media.Matrix.M21" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 2 行、第 1 列の値を取得または設定します。</summary>
        <value>この <see cref="T:System.Windows.Media.Matrix" /> の第 2 行、第 1 列の値。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表は、<xref:System.Windows.Media.Matrix>のレイアウトを示しています。  
  
||||  
|-|-|-|  
|<xref:System.Windows.Media.Matrix.M11%2A>|<xref:System.Windows.Media.Matrix.M12%2A>|0|  
|<xref:System.Windows.Media.Matrix.M21%2A>|<xref:System.Windows.Media.Matrix.M22%2A>|0|  
|<xref:System.Windows.Media.Matrix.OffsetX%2A>|<xref:System.Windows.Media.Matrix.OffsetY%2A>|1|  
  
   
  
## Examples  
 次の例では、2つの <xref:System.Windows.Media.Matrix> 構造体を乗算する方法と、値を宣言するときと構造体を宣言した後に <xref:System.Windows.Media.Matrix> に値を割り当てる方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixMultiplicationExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixmultiplicationexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="M22">
      <MemberSignature Language="C#" Value="public double M22 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 M22" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.M22" />
      <MemberSignature Language="VB.NET" Value="Public Property M22 As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double M22 { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.M22 : double with get, set" Usage="System.Windows.Media.Matrix.M22" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 2 行、第 2 列の値を取得または設定します。</summary>
        <value>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 2 行、第 2 列の値。 既定値は 1 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表は、<xref:System.Windows.Media.Matrix> 構造のレイアウトを示しています。  
  
||||  
|-|-|-|  
|<xref:System.Windows.Media.Matrix.M11%2A>|<xref:System.Windows.Media.Matrix.M12%2A>|0|  
|<xref:System.Windows.Media.Matrix.M21%2A>|<xref:System.Windows.Media.Matrix.M22%2A>|0|  
|<xref:System.Windows.Media.Matrix.OffsetX%2A>|<xref:System.Windows.Media.Matrix.OffsetY%2A>|1|  
  
   
  
## Examples  
 次の例では、2つの <xref:System.Windows.Media.Matrix> 構造体を乗算する方法と、値を宣言するときと構造体を宣言した後に <xref:System.Windows.Media.Matrix> に値を割り当てる方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixMultiplicationExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixmultiplicationexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.Matrix Multiply (System.Windows.Media.Matrix trans1, System.Windows.Media.Matrix trans2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Media.Matrix Multiply(valuetype System.Windows.Media.Matrix trans1, valuetype System.Windows.Media.Matrix trans2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (trans1 As Matrix, trans2 As Matrix) As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::Matrix Multiply(System::Windows::Media::Matrix trans1, System::Windows::Media::Matrix trans2);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Media.Matrix * System.Windows.Media.Matrix -&gt; System.Windows.Media.Matrix" Usage="System.Windows.Media.Matrix.Multiply (trans1, trans2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trans1" Type="System.Windows.Media.Matrix" />
        <Parameter Name="trans2" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="trans1">最初に乗算する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
        <param name="trans2">2 番目に乗算する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
        <summary><see cref="T:System.Windows.Media.Matrix" /> 構造体に別の <see cref="T:System.Windows.Media.Matrix" /> 構造体を乗算します。</summary>
        <returns><paramref name="trans1" /> と <paramref name="trans2" /> を乗算した結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 行列乗算は可換ではありません。 `trans2` による `trans1` の乗算は、`trans1`による `trans2` の乗算と同じではありません。  
  
   
  
## Examples  
 2つの <xref:System.Windows.Media.Matrix> 構造体を乗算する方法を次の例に示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixMultiplicationExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixmultiplicationexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
        <altmember cref="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)" />
        <altmember cref="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="OffsetX">
      <MemberSignature Language="C#" Value="public double OffsetX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 OffsetX" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.OffsetX" />
      <MemberSignature Language="VB.NET" Value="Public Property OffsetX As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double OffsetX { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.OffsetX : double with get, set" Usage="System.Windows.Media.Matrix.OffsetX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 3 行、第 1 列の値を取得または設定します。</summary>
        <value>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 3 行、第 1 列の値。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Matrix.OffsetX%2A> プロパティは、座標空間を x 軸に沿って平行移動する量を指定するため、という名前になります。  
  
 次の表は、<xref:System.Windows.Media.Matrix>のレイアウトを示しています。  
  
||||  
|-|-|-|  
|<xref:System.Windows.Media.Matrix.M11%2A>|<xref:System.Windows.Media.Matrix.M12%2A>|0|  
|<xref:System.Windows.Media.Matrix.M21%2A>|<xref:System.Windows.Media.Matrix.M22%2A>|0|  
|<xref:System.Windows.Media.Matrix.OffsetX%2A>|<xref:System.Windows.Media.Matrix.OffsetY%2A>|1|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OffsetY">
      <MemberSignature Language="C#" Value="public double OffsetY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 OffsetY" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Matrix.OffsetY" />
      <MemberSignature Language="VB.NET" Value="Public Property OffsetY As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double OffsetY { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.OffsetY : double with get, set" Usage="System.Windows.Media.Matrix.OffsetY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 3 行、第 2 列の値を取得または設定します。</summary>
        <value>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 3 行、第 2 列の値。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Matrix.OffsetY%2A> プロパティは、y 軸に沿って座標空間を変換する量を指定するため、という名前になります。  
  
 次の表は、<xref:System.Windows.Media.Matrix>のレイアウトを示しています。  
  
||||  
|-|-|-|  
|<xref:System.Windows.Media.Matrix.M11%2A>|<xref:System.Windows.Media.Matrix.M12%2A>|0|  
|<xref:System.Windows.Media.Matrix.M21%2A>|<xref:System.Windows.Media.Matrix.M22%2A>|0|  
|<xref:System.Windows.Media.Matrix.OffsetX%2A>|<xref:System.Windows.Media.Matrix.OffsetY%2A>|1|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Media.Matrix matrix1, System.Windows.Media.Matrix matrix2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Media.Matrix matrix1, valuetype System.Windows.Media.Matrix matrix2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (matrix1 As Matrix, matrix2 As Matrix) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Media::Matrix matrix1, System::Windows::Media::Matrix matrix2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Media.Matrix * System.Windows.Media.Matrix -&gt; bool" Usage="matrix1 = matrix2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix1" Type="System.Windows.Media.Matrix" />
        <Parameter Name="matrix2" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix1">比較する最初の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
        <param name="matrix2">比較する 2 番目の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
        <summary>指定した 2 つの <see cref="T:System.Windows.Media.Matrix" /> 構造体が同一かどうかを判断します。</summary>
        <returns><see langword="true" /> と <paramref name="matrix1" /> が同一である場合は <paramref name="matrix2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Windows.Media.Matrix> には、その値が double として格納されます。 <xref:System.Double> の値は算術演算を実行すると有効桁数が失われる可能性があるため、論理的に等しい2つの <xref:System.Double> 構造体の比較は失敗する可能性があります。  
  
   
  
## Examples  
 2つの <xref:System.Windows.Media.Matrix> 構造体が等しいかどうかを確認する方法を次の例に示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixEqualityExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixequalityexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Media.Matrix.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Media.Matrix matrix1, System.Windows.Media.Matrix matrix2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Media.Matrix matrix1, valuetype System.Windows.Media.Matrix matrix2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.op_Inequality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (matrix1 As Matrix, matrix2 As Matrix) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Media::Matrix matrix1, System::Windows::Media::Matrix matrix2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Media.Matrix * System.Windows.Media.Matrix -&gt; bool" Usage="System.Windows.Media.Matrix.op_Inequality (matrix1, matrix2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix1" Type="System.Windows.Media.Matrix" />
        <Parameter Name="matrix2" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix1">比較する最初の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
        <param name="matrix2">比較する 2 番目の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
        <summary>指定した 2 つの <see cref="T:System.Windows.Media.Matrix" /> 構造体が異なるかどうかを判断します。</summary>
        <returns><see langword="true" /> と <paramref name="matrix1" /> が異なる場合は <paramref name="matrix2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Windows.Media.Matrix> には、その値が double として格納されます。 <xref:System.Double> の値は算術演算を実行すると有効桁数が失われる可能性があるため、論理的に等しい2つの <xref:System.Double> 構造体の比較は失敗する可能性があります。  
  
   
  
## Examples  
 2つの <xref:System.Windows.Media.Matrix> 構造体が等しいかどうかを確認する方法を次の例に示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixEqualityExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixequalityexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.Matrix operator * (System.Windows.Media.Matrix trans1, System.Windows.Media.Matrix trans2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Media.Matrix op_Multiply(valuetype System.Windows.Media.Matrix trans1, valuetype System.Windows.Media.Matrix trans2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (trans1 As Matrix, trans2 As Matrix) As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::Matrix operator *(System::Windows::Media::Matrix trans1, System::Windows::Media::Matrix trans2);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Media.Matrix * System.Windows.Media.Matrix -&gt; System.Windows.Media.Matrix" Usage="trans1 * trans2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trans1" Type="System.Windows.Media.Matrix" />
        <Parameter Name="trans2" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="trans1">最初に乗算する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
        <param name="trans2">2 番目に乗算する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
        <summary><see cref="T:System.Windows.Media.Matrix" /> 構造体に別の <see cref="T:System.Windows.Media.Matrix" /> 構造体を乗算します。</summary>
        <returns><paramref name="trans1" /> と <paramref name="trans2" /> を乗算した結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 行列乗算は可換ではありません。 `trans2` による `trans1` の乗算は、`trans1`による `trans2` の乗算と同じではありません。  
  
   
  
## Examples  
 2つの <xref:System.Windows.Media.Matrix> 構造体を乗算する方法を次の例に示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixMultiplicationExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixmultiplicationexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
        <altmember cref="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)" />
        <altmember cref="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Windows.Media.Matrix Parse (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Media.Matrix Parse(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (source As String) As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Media::Matrix Parse(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Windows.Media.Matrix" Usage="System.Windows.Media.Matrix.Parse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">行列の <see cref="T:System.String" /> 表現。</param>
        <summary>行列の <see cref="T:System.String" /> 表現を、等価の <see cref="T:System.Windows.Media.Matrix" /> 構造体に変換します。</summary>
        <returns>等価の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、マトリックスの文字列形式を <xref:System.Windows.Media.Matrix> 構造体に変換する方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixParseExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixparseexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepend">
      <MemberSignature Language="C#" Value="public void Prepend (System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Prepend(valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Prepend (matrix As Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Prepend(System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="member this.Prepend : System.Windows.Media.Matrix -&gt; unit" Usage="matrix.Prepend matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">この <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
        <summary>指定した <see cref="T:System.Windows.Media.Matrix" /> 構造体をこの <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作は、この <xref:System.Windows.Media.Matrix> 構造によって `matrix` パラメーターを乗算することと同じです。 ただし、行列乗算は可換ではありません。したがって、この演算は、この <xref:System.Windows.Media.Matrix> 構造とパラメーター `matrix`を乗算することとは異なります。つまり、`matrix` * この * `matrix`と同じではありません。  
  
 複合変換では、個々の変換の順序が重要になります。 たとえば、最初に回転した後、スケーリングしてから平行移動した場合、最初に変換してから回転してからスケールする場合とは異なる結果が得られます。 理由の1つは、回転やスケーリングなどの変換が、座標系の原点に対して行われるということです。 原点から中央に配置されているオブジェクトをスケーリングすると、原点から離れた位置にあるオブジェクトをスケーリングする場合とは異なる結果が生成されます。 同様に、原点から中央に配置されているオブジェクトを回転すると、原点から離れた位置にあるオブジェクトを回転した場合とは異なる結果が生成されます。  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.Media.Matrix> を別の <xref:System.Windows.Media.Matrix>に付加する方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixPrependExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixprependexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
        <altmember cref="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)" />
        <altmember cref="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="Rotate">
      <MemberSignature Language="C#" Value="public void Rotate (double angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rotate(float64 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Rotate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rotate (angle As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rotate(double angle);" />
      <MemberSignature Language="F#" Value="member this.Rotate : double -&gt; unit" Usage="matrix.Rotate angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="angle">回転角度。</param>
        <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の原点を中心とする指定した角度の回転を適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Windows.Media.Matrix>を回転させる方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixRotateExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixrotateexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.RotatePrepend(System.Double)" />
        <altmember cref="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)" />
        <altmember cref="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="RotateAt">
      <MemberSignature Language="C#" Value="public void RotateAt (double angle, double centerX, double centerY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateAt(float64 angle, float64 centerX, float64 centerY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateAt (angle As Double, centerX As Double, centerY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateAt(double angle, double centerX, double centerY);" />
      <MemberSignature Language="F#" Value="member this.RotateAt : double * double * double -&gt; unit" Usage="matrix.RotateAt (angle, centerX, centerY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Double" />
        <Parameter Name="centerX" Type="System.Double" />
        <Parameter Name="centerY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="angle">この行列を回転する角度。</param>
        <param name="centerX">この行列の回転の中心とする点の x 座標。</param>
        <param name="centerY">この行列の回転の中心とする点の y 座標。</param>
        <summary>指定した点を中心にこの行列を回転します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、指定したポイントについて <xref:System.Windows.Media.Matrix> を回転させる方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixRotateAboutPointExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixrotateaboutpointexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateAtPrepend">
      <MemberSignature Language="C#" Value="public void RotateAtPrepend (double angle, double centerX, double centerY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateAtPrepend(float64 angle, float64 centerX, float64 centerY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateAtPrepend (angle As Double, centerX As Double, centerY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateAtPrepend(double angle, double centerX, double centerY);" />
      <MemberSignature Language="F#" Value="member this.RotateAtPrepend : double * double * double -&gt; unit" Usage="matrix.RotateAtPrepend (angle, centerX, centerY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Double" />
        <Parameter Name="centerX" Type="System.Double" />
        <Parameter Name="centerY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="angle">回転角度。</param>
        <param name="centerX">回転の中心の x 座標。</param>
        <param name="centerY">回転の中心の y 座標。</param>
        <summary>指定した点における指定した角度の回転を、この <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複合変換では、個々の変換の順序が重要になります。 たとえば、最初に回転した後、スケーリングしてから平行移動した場合、最初に変換してから回転してからスケールする場合とは異なる結果が得られます。 理由の1つは、回転やスケーリングなどの変換が、座標系の原点に対して行われるということです。 原点から中央に配置されているオブジェクトをスケーリングすると、原点から離れた位置にあるオブジェクトをスケーリングする場合とは異なる結果が生成されます。 同様に、原点から中央に配置されているオブジェクトを回転すると、原点から離れた位置にあるオブジェクトを回転した場合とは異なる結果が生成されます。  
  
   
  
## Examples  
 次の例は、回転を <xref:System.Windows.Media.Matrix>に付加する方法を示しています。  
  
 [!code-csharp[MatrixExamples_snip#MatrixPrependRotateExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixprependrotateexamples_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotatePrepend">
      <MemberSignature Language="C#" Value="public void RotatePrepend (double angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotatePrepend(float64 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.RotatePrepend(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotatePrepend (angle As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotatePrepend(double angle);" />
      <MemberSignature Language="F#" Value="member this.RotatePrepend : double -&gt; unit" Usage="matrix.RotatePrepend angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="angle">前に付加する回転角度。</param>
        <summary>指定した角度の回転を、この <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複合変換では、個々の変換の順序が重要になります。 たとえば、最初に回転した後、スケーリングしてから平行移動した場合、最初に変換してから回転してからスケールする場合とは異なる結果が得られます。 理由の1つは、回転やスケーリングなどの変換が、座標系の原点に対して行われるということです。 原点から中央に配置されているオブジェクトをスケーリングすると、原点から離れた位置にあるオブジェクトをスケーリングする場合とは異なる結果が生成されます。 同様に、原点から中央に配置されているオブジェクトを回転すると、原点から離れた位置にあるオブジェクトを回転した場合とは異なる結果が生成されます。  
  
   
  
## Examples  
 次の例は、回転を <xref:System.Windows.Media.Matrix>に付加する方法を示しています。  
  
 [!code-csharp[MatrixExamples_snip#MatrixPrependRotateExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixprependrotateexamples_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.Rotate(System.Double)" />
        <altmember cref="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)" />
        <altmember cref="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (double scaleX, double scaleY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float64 scaleX, float64 scaleY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Scale(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (scaleX As Double, scaleY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(double scaleX, double scaleY);" />
      <MemberSignature Language="F#" Value="member this.Scale : double * double -&gt; unit" Usage="matrix.Scale (scaleX, scaleY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scaleX" Type="System.Double" />
        <Parameter Name="scaleY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="scaleX">この <see cref="T:System.Windows.Media.Matrix" /> を x 軸に沿ってスケーリングする際に使用する値。</param>
        <param name="scaleY">この <see cref="T:System.Windows.Media.Matrix" /> を y 軸に沿ってスケーリングする際に使用する値。</param>
        <summary>指定したスケールのベクターを <see cref="T:System.Windows.Media.Matrix" /> 構造体に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Windows.Media.Matrix> 構造体をスケーリングする方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixScaleExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixscaleexamples_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:System.Windows.Media.Matrix.ScalePrepend(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ScaleAt">
      <MemberSignature Language="C#" Value="public void ScaleAt (double scaleX, double scaleY, double centerX, double centerY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleAt(float64 scaleX, float64 scaleY, float64 centerX, float64 centerY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleAt (scaleX As Double, scaleY As Double, centerX As Double, centerY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleAt(double scaleX, double scaleY, double centerX, double centerY);" />
      <MemberSignature Language="F#" Value="member this.ScaleAt : double * double * double * double -&gt; unit" Usage="matrix.ScaleAt (scaleX, scaleY, centerX, centerY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scaleX" Type="System.Double" />
        <Parameter Name="scaleY" Type="System.Double" />
        <Parameter Name="centerX" Type="System.Double" />
        <Parameter Name="centerY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="scaleX">この <see cref="T:System.Windows.Media.Matrix" /> を x 軸に沿ってスケーリングする量。</param>
        <param name="scaleY">この <see cref="T:System.Windows.Media.Matrix" /> を y 軸に沿ってスケーリングする量。</param>
        <param name="centerX">スケーリング操作の中心点の x 座標。</param>
        <param name="centerY">スケーリング操作の中心点の y 座標。</param>
        <summary>この <see cref="T:System.Windows.Media.Matrix" /> を、指定した点を中心として指定した量だけスケーリングします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Windows.Media.Matrix> 構造体をスケーリングする方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixScaleExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixscaleexamples_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleAtPrepend">
      <MemberSignature Language="C#" Value="public void ScaleAtPrepend (double scaleX, double scaleY, double centerX, double centerY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleAtPrepend(float64 scaleX, float64 scaleY, float64 centerX, float64 centerY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleAtPrepend (scaleX As Double, scaleY As Double, centerX As Double, centerY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleAtPrepend(double scaleX, double scaleY, double centerX, double centerY);" />
      <MemberSignature Language="F#" Value="member this.ScaleAtPrepend : double * double * double * double -&gt; unit" Usage="matrix.ScaleAtPrepend (scaleX, scaleY, centerX, centerY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scaleX" Type="System.Double" />
        <Parameter Name="scaleY" Type="System.Double" />
        <Parameter Name="centerX" Type="System.Double" />
        <Parameter Name="centerY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="scaleX">x 軸のスケール ファクター。</param>
        <param name="scaleY">y 軸のスケール ファクター。</param>
        <param name="centerX">スケーリング操作が実行される点の x 座標。</param>
        <param name="centerY">スケーリング操作が実行される点の y 座標。</param>
        <summary>この <see cref="T:System.Windows.Media.Matrix" /> の指定した点を中心とする指定したスケールを前に付加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複合変換では、個々の変換の順序が重要になります。 たとえば、最初に回転した後、スケーリングしてから平行移動した場合、最初に変換してから回転してからスケールする場合とは異なる結果が得られます。 理由の1つは、回転やスケーリングなどの変換が、座標系の原点に対して行われるということです。 原点から中央に配置されているオブジェクトをスケーリングすると、原点から離れた位置にあるオブジェクトをスケーリングする場合とは異なる結果が生成されます。 同様に、原点から中央に配置されているオブジェクトを回転すると、原点から離れた位置にあるオブジェクトを回転した場合とは異なる結果が生成されます。  
  
   
  
## Examples  
 次の例は、スケールを <xref:System.Windows.Media.Matrix>に付加する方法を示しています。  
  
 [!code-csharp[MatrixExamples_snip#MatrixPrependScaleExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixprependscaleexamples_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScalePrepend">
      <MemberSignature Language="C#" Value="public void ScalePrepend (double scaleX, double scaleY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScalePrepend(float64 scaleX, float64 scaleY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.ScalePrepend(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScalePrepend (scaleX As Double, scaleY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScalePrepend(double scaleX, double scaleY);" />
      <MemberSignature Language="F#" Value="member this.ScalePrepend : double * double -&gt; unit" Usage="matrix.ScalePrepend (scaleX, scaleY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scaleX" Type="System.Double" />
        <Parameter Name="scaleY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="scaleX">この <see cref="T:System.Windows.Media.Matrix" /> 構造体を x 軸に沿ってスケーリングする際に使用する値。</param>
        <param name="scaleY">この <see cref="T:System.Windows.Media.Matrix" /> 構造体を y 軸に沿ってスケーリングする際に使用する値。</param>
        <summary>指定したスケールのベクターをこの <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複合変換では、個々の変換の順序が重要になります。 たとえば、最初に回転した後、スケーリングしてから平行移動した場合、最初に変換してから回転してからスケールする場合とは異なる結果が得られます。 理由の1つは、回転やスケーリングなどの変換が、座標系の原点に対して行われるということです。 原点から中央に配置されているオブジェクトをスケーリングすると、原点から離れた位置にあるオブジェクトをスケーリングする場合とは異なる結果が生成されます。 同様に、原点から中央に配置されているオブジェクトを回転すると、原点から離れた位置にあるオブジェクトを回転した場合とは異なる結果が生成されます。  
  
   
  
## Examples  
 次の例は、スケールを <xref:System.Windows.Media.Matrix> 構造に付加する方法を示しています。  
  
 [!code-csharp[MatrixExamples_snip#MatrixPrependScaleExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixprependscaleexamples_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:System.Windows.Media.Matrix.Scale(System.Double,System.Double)" />
        <altmember cref="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="SetIdentity">
      <MemberSignature Language="C#" Value="public void SetIdentity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetIdentity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.SetIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetIdentity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetIdentity();" />
      <MemberSignature Language="F#" Value="member this.SetIdentity : unit -&gt; unit" Usage="matrix.SetIdentity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体を恒等行列に変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Id 行列の値は、係数 [1, 1]、[2, 2]、[3, 3]、および残りの係数の値は0です。 これは、<xref:System.Windows.Media.Matrix.M11%2A> の設定と <xref:System.Windows.Media.Matrix.M22%2A> を1に、<xref:System.Windows.Media.Matrix.M12%2A>、<xref:System.Windows.Media.Matrix.M21%2A>、<xref:System.Windows.Media.Matrix.OffsetX%2A>、および <xref:System.Windows.Media.Matrix.OffsetY%2A> を0に設定することに関連しています。 <xref:System.Windows.Media.Matrix> 構造体に対して [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 使用する実装であるアフィン行列では、係数 [3, 1]、[3, 2]、[3.3] が常に0、0、1の値を常に持つことが暗黙的に指定されています。  
  
||||  
|-|-|-|  
|1|0|0|  
|0|1|0|  
|0|0|1|  
  
 Id 行列の場合、<xref:System.Windows.Media.Matrix.ToString%2A> メソッドは、<xref:System.Windows.Media.Matrix>の係数ではなく、文字列 "Identity" を返します。  
  
   
  
## Examples  
 次の例では、<xref:System.Windows.Media.Matrix> 構造体を恒等行列に変換する方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixIdentityExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixidentityexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Matrix.Identity" />
        <altmember cref="P:System.Windows.Media.Matrix.IsIdentity" />
      </Docs>
    </Member>
    <Member MemberName="Skew">
      <MemberSignature Language="C#" Value="public void Skew (double skewX, double skewY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Skew(float64 skewX, float64 skewY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Skew(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Skew (skewX As Double, skewY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Skew(double skewX, double skewY);" />
      <MemberSignature Language="F#" Value="member this.Skew : double * double -&gt; unit" Usage="matrix.Skew (skewX, skewY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skewX" Type="System.Double" />
        <Parameter Name="skewY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="skewX">この <see cref="T:System.Windows.Media.Matrix" /> を傾斜させる際の x 次元の角度。</param>
        <param name="skewY">この <see cref="T:System.Windows.Media.Matrix" /> を傾斜させる際の y 次元の角度。</param>
        <summary>x 次元と y 次元の指定した角度の傾斜を、この <see cref="T:System.Windows.Media.Matrix" /> 構造体に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 この例では、<xref:System.Windows.Media.Matrix> 構造体を傾斜させる方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixSkewExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixskewexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.SkewPrepend(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="SkewPrepend">
      <MemberSignature Language="C#" Value="public void SkewPrepend (double skewX, double skewY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkewPrepend(float64 skewX, float64 skewY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.SkewPrepend(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkewPrepend (skewX As Double, skewY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkewPrepend(double skewX, double skewY);" />
      <MemberSignature Language="F#" Value="member this.SkewPrepend : double * double -&gt; unit" Usage="matrix.SkewPrepend (skewX, skewY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skewX" Type="System.Double" />
        <Parameter Name="skewY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="skewX">この <see cref="T:System.Windows.Media.Matrix" /> を傾斜させる際の x 次元の角度。</param>
        <param name="skewY">この <see cref="T:System.Windows.Media.Matrix" /> を傾斜させる際の y 次元の角度。</param>
        <summary>x 次元と y 次元の指定した角度の傾斜を、この <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複合変換では、個々の変換の順序が重要になります。 たとえば、最初に回転した後、スケーリングしてから平行移動した場合、最初に変換してから回転してからスケールする場合とは異なる結果が得られます。 理由の1つは、回転やスケーリングなどの変換が、座標系の原点に対して行われるということです。 原点から中央に配置されているオブジェクトをスケーリングすると、原点から離れた位置にあるオブジェクトをスケーリングする場合とは異なる結果が生成されます。 同様に、原点から中央に配置されているオブジェクトを回転すると、原点から離れた位置にあるオブジェクトを回転した場合とは異なる結果が生成されます。  
  
   
  
## Examples  
 この例では、<xref:System.Windows.Media.Matrix> 構造体に傾斜を付加する方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixSkewPrependExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixskewprependexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.Skew(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberSignature Language="F#" Value="abstract member System.IFormattable.ToString : string * IFormatProvider -&gt; string&#xA;override this.System.IFormattable.ToString : string * IFormatProvider -&gt; string" Usage="matrix.System.IFormattable.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">使用する書式。  
  
または 
<see langword="Nothing" /> 実装の型に対して定義されている既定の形式を使用するには null 参照 (Visual Basic では<see cref="T:System.IFormattable" />)。</param>
        <param name="provider">値を書式設定するために使用するプロバイダー。  
  
または 
オペレーティング システムの現在のロケール設定から数値形式の情報を取得するための null 参照 (Visual Basic では <see langword="Nothing" />)。</param>
        <summary>指定された書式を使用して現在のインスタンスの値を書式設定します。</summary>
        <returns>指定された書式の現在のインスタンスの値。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.String" /> 構造体の <see cref="T:System.Windows.Media.Matrix" /> 表現を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この <xref:System.Windows.Media.Matrix> 構造体が id 行列の場合は、"Identity" という文字列が返されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="matrix.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.String" /> 構造体の <see cref="T:System.Windows.Media.Matrix" /> 表現を作成します。</summary>
        <returns>この <see cref="T:System.String" /> の <see cref="P:System.Windows.Media.Matrix.M11" />、<see cref="P:System.Windows.Media.Matrix.M12" />、<see cref="P:System.Windows.Media.Matrix.M21" />、<see cref="P:System.Windows.Media.Matrix.M22" />、<see cref="P:System.Windows.Media.Matrix.OffsetX" />、および <see cref="P:System.Windows.Media.Matrix.OffsetY" /> の各値を格納する <see cref="T:System.Windows.Media.Matrix" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この <xref:System.Windows.Media.Matrix> が <xref:System.Windows.Media.Matrix.Identity%2A> マトリックスの場合は、"Identity" という文字列が返されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="matrix.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">カルチャ固有の書式設定情報。</param>
        <summary>カルチャ固有の書式設定情報を使用して、この <see cref="T:System.String" /> 構造体の <see cref="T:System.Windows.Media.Matrix" /> 表現を作成します。</summary>
        <returns>この <see cref="T:System.String" /> の <see cref="P:System.Windows.Media.Matrix.M11" />、<see cref="P:System.Windows.Media.Matrix.M12" />、<see cref="P:System.Windows.Media.Matrix.M21" />、<see cref="P:System.Windows.Media.Matrix.M22" />、<see cref="P:System.Windows.Media.Matrix.OffsetX" />、および <see cref="P:System.Windows.Media.Matrix.OffsetY" /> の各値を格納する <see cref="T:System.Windows.Media.Matrix" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この <xref:System.Windows.Media.Matrix> 構造体が id 行列の場合は、"Identity" という文字列が返されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した点、点の配列、ベクター、またはベクターの配列を、この <see cref="T:System.Windows.Media.Matrix" /> で変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Windows.Media.Matrix> を使用して点とベクトルを変換する方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixTransformExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixtransformexamples_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Windows.Point Transform (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point Transform(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Transform(System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (point As Point) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point Transform(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Windows.Point -&gt; System.Windows.Point" Usage="matrix.Transform point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">変換する点。</param>
        <summary>指定した点を <see cref="T:System.Windows.Media.Matrix" /> で変換し、その結果を返します。</summary>
        <returns>この <paramref name="point" /> によって <see cref="T:System.Windows.Media.Matrix" /> を変換した結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Windows.Media.Matrix> を使用して点とベクトルを変換する方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixTransformExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixtransformexamples_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Windows.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(valuetype System.Windows.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Transform(System.Windows.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (points As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(cli::array &lt;System::Windows::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Windows.Point[] -&gt; unit" Usage="matrix.Transform points" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Windows.Point[]" />
      </Parameters>
      <Docs>
        <param name="points">変換対象の点。 配列内の元の点は、変換後の値に置き換えられます。</param>
        <summary>指定した点をこの <see cref="T:System.Windows.Media.Matrix" /> で変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Windows.Media.Matrix> を使用して点とベクトルを変換する方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixTransformExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixtransformexamples_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Windows.Vector Transform (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Vector Transform(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (vector As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Vector Transform(System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Windows.Vector -&gt; System.Windows.Vector" Usage="matrix.Transform vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector">変換するベクトル。</param>
        <summary>指定したベクターをこの <see cref="T:System.Windows.Media.Matrix" /> で変換します。</summary>
        <returns>この <paramref name="vector" /> によって <see cref="T:System.Windows.Media.Matrix" /> を変換した結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Windows.Media.Matrix> を使用して点とベクトルを変換する方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixTransformExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixtransformexamples_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Windows.Vector[] vectors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(valuetype System.Windows.Vector[] vectors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (vectors As Vector())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(cli::array &lt;System::Windows::Vector&gt; ^ vectors);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Windows.Vector[] -&gt; unit" Usage="matrix.Transform vectors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectors" Type="System.Windows.Vector[]" />
      </Parameters>
      <Docs>
        <param name="vectors">変換するベクター。 配列内の元のベクターは、変換後の値に置き換えられます。</param>
        <summary>指定したベクターをこの <see cref="T:System.Windows.Media.Matrix" /> で変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Windows.Media.Matrix> を使用して点とベクトルを変換する方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixTransformExamples_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixtransformexamples_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public void Translate (double offsetX, double offsetY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Translate(float64 offsetX, float64 offsetY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.Translate(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Translate (offsetX As Double, offsetY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Translate(double offsetX, double offsetY);" />
      <MemberSignature Language="F#" Value="member this.Translate : double * double -&gt; unit" Usage="matrix.Translate (offsetX, offsetY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offsetX" Type="System.Double" />
        <Parameter Name="offsetY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="offsetX">この <see cref="T:System.Windows.Media.Matrix" /> を x 軸に沿ってオフセットする量。</param>
        <param name="offsetY">この <see cref="T:System.Windows.Media.Matrix" /> を y 軸に沿ってオフセットする量。</param>
        <summary>指定したオフセットの変換をこの <see cref="T:System.Windows.Media.Matrix" /> 構造体に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Windows.Media.Matrix> 構造に変換を追加する方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixTranslateExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixtranslateexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.TranslatePrepend(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="TranslatePrepend">
      <MemberSignature Language="C#" Value="public void TranslatePrepend (double offsetX, double offsetY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslatePrepend(float64 offsetX, float64 offsetY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Matrix.TranslatePrepend(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslatePrepend (offsetX As Double, offsetY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslatePrepend(double offsetX, double offsetY);" />
      <MemberSignature Language="F#" Value="member this.TranslatePrepend : double * double -&gt; unit" Usage="matrix.TranslatePrepend (offsetX, offsetY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offsetX" Type="System.Double" />
        <Parameter Name="offsetY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="offsetX">この <see cref="T:System.Windows.Media.Matrix" /> を x 軸に沿ってオフセットする量。</param>
        <param name="offsetY">この <see cref="T:System.Windows.Media.Matrix" /> を y 軸に沿ってオフセットする量。</param>
        <summary>指定したオフセットの変換をこの <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複合変換では、個々の変換の順序が重要になります。 たとえば、最初に回転した後、スケーリングしてから平行移動した場合、最初に変換してから回転してからスケールする場合とは異なる結果が得られます。 理由の1つは、回転やスケーリングなどの変換が、座標系の原点に対して行われるということです。 原点から中央に配置されているオブジェクトをスケーリングすると、原点から離れた位置にあるオブジェクトをスケーリングする場合とは異なる結果が生成されます。 同様に、原点から中央に配置されているオブジェクトを回転すると、原点から離れた位置にあるオブジェクトを回転した場合とは異なる結果が生成されます。  
  
   
  
## Examples  
 次の例では、変換を <xref:System.Windows.Media.Matrix> 構造体に付加する方法を示します。  
  
 [!code-csharp[MatrixExamples_snip#MatrixTranslatePrependExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/MatrixExamples_snip/CSharp/MatrixExample.cs#matrixtranslateprependexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Matrix.Translate(System.Double,System.Double)" />
      </Docs>
    </Member>
  </Members>
</Type>
