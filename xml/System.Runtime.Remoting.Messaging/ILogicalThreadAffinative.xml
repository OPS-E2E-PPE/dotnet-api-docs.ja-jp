<Type Name="ILogicalThreadAffinative" FullName="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative">
  <Metadata><Meta Name="ms.openlocfilehash" Value="51a6d04f144e27cbb689b21a2d8e3b6e85fc6397" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83953311" /></Metadata><TypeSignature Language="C#" Value="public interface ILogicalThreadAffinative" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILogicalThreadAffinative" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />
  <TypeSignature Language="VB.NET" Value="Public Interface ILogicalThreadAffinative" />
  <TypeSignature Language="C++ CLI" Value="public interface class ILogicalThreadAffinative" />
  <TypeSignature Language="F#" Value="type ILogicalThreadAffinative = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:System.AppDomain" /> に格納して、<see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" /> の外部に転送できるオブジェクトをマークします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 別の <xref:System.AppDomain>内のオブジェクトに対してリモートメソッド呼び出しが行われると、現在の <xref:System.Runtime.Remoting.Messaging.CallContext> クラスによって、リモートの場所への呼び出しと共に移動する <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> が生成されます。 <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> インターフェイスを公開し、<xref:System.Runtime.Remoting.Messaging.CallContext> に格納されているオブジェクトのみが <xref:System.AppDomain>の外に伝達されます。 このインターフェイスをサポートしていないオブジェクトは、リモートメソッド呼び出しを使用して <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> インスタンスでは転送されません。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> インターフェイスを使用して、[プリンシパルオブジェクトと Id オブジェクト](/dotnet/standard/security/principal-and-identity-objects)を識別のためにリモートの場所に送信する方法を示しています。 サンプルで使用されている `HelloServiceClass` クラスのコードを表示するには、<xref:System.Runtime.Remoting.Messaging.CallContext.GetData%2A> メソッドの例を参照してください。 このサンプルで使用されているサーバークラスのコードを表示するには、<xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> クラスの例を参照してください。 サンプルで使用されているクライアントクラスのコードを表示するには、<xref:System.Runtime.Remoting.Messaging.CallContext> クラスの例を参照してください。  
  
 [!code-cpp[CallContext#2](~/samples/snippets/cpp/VS_Snippets_Remoting/CallContext/CPP/service.cpp#2)]
 [!code-csharp[CallContext#2](~/samples/snippets/csharp/VS_Snippets_Remoting/CallContext/CS/service.cs#2)]
 [!code-vb[CallContext#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CallContext/VB/service.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
