<Type Name="ButtonBase" FullName="System.Windows.Controls.Primitives.ButtonBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f76d7b2f268a6bdbdd6d7a4b6dfcab1f45ccf6cf" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83970141" /></Metadata><TypeSignature Language="C#" Value="public abstract class ButtonBase : System.Windows.Controls.ContentControl, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ButtonBase extends System.Windows.Controls.ContentControl implements class System.Windows.Input.ICommandSource" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Primitives.ButtonBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ButtonBase&#xA;Inherits ContentControl&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class ButtonBase abstract : System::Windows::Controls::ContentControl, System::Windows::Input::ICommandSource" />
  <TypeSignature Language="F#" Value="type ButtonBase = class&#xA;    inherit ContentControl&#xA;    interface ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ButtonBase extends System.Windows.Controls.ContentControl implements class System.Windows.Input.ICommandSource" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Button)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="20751-101">すべての <see cref="T:System.Windows.Controls.Button" /> コントロールの基本クラスを表します。</span><span class="sxs-lookup"><span data-stu-id="20751-101">Represents the base class for all <see cref="T:System.Windows.Controls.Button" /> controls.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-102">ユーザーが <xref:System.Windows.Controls.Primitives.ButtonBase>をクリックしたときに応答する <xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="20751-102">Handle the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event to respond when the user clicks a <xref:System.Windows.Controls.Primitives.ButtonBase>.</span></span> <span data-ttu-id="20751-103">ユーザーは、<xref:System.Windows.Controls.AccessText> を使用するか ENTER キーを押すか、コントロールにフォーカスがあるときに SPACE キーを押すことによって、<xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="20751-103">The user can raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event by using an <xref:System.Windows.Controls.AccessText> or by pressing ENTER or the SPACEBAR when the control has focus.</span></span>  <span data-ttu-id="20751-104">ユーザーが SPACE キーを押すと、コントロールは <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> を `true` に設定し、マウスをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="20751-104">When the user presses the SPACEBAR, the control sets <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> to `true` and captures the mouse.</span></span>  <span data-ttu-id="20751-105">その結果、コントロールは <xref:System.Windows.UIElement.MouseEnter> や <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>などのマウスイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="20751-105">As a result, the control will raise mouse events such as <xref:System.Windows.UIElement.MouseEnter> and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</span></span> <span data-ttu-id="20751-106"><xref:System.Windows.Controls.AccessText> または ENTER を使用してもマウスを <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> またはキャプチャしないことに注意してくださいが、<xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="20751-106">Note that using the <xref:System.Windows.Controls.AccessText> or ENTER does not change <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> or capture the mouse, but it does raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 <span data-ttu-id="20751-107"><xref:System.Windows.Controls.Primitives.ButtonBase> は、<xref:System.Windows.Input.KeyboardNavigation.AcceptsReturn%2A> 添付プロパティを `true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="20751-107">The <xref:System.Windows.Controls.Primitives.ButtonBase> sets the <xref:System.Windows.Input.KeyboardNavigation.AcceptsReturn%2A> attached property to `true`.</span></span>  
  
 <span data-ttu-id="20751-108"><xref:System.Windows.Controls.Primitives.ButtonBase> は、<xref:System.Windows.UIElement.IsInputMethodEnabled%2A> プロパティを `false` に設定します。</span><span class="sxs-lookup"><span data-stu-id="20751-108">The <xref:System.Windows.Controls.Primitives.ButtonBase> sets the <xref:System.Windows.UIElement.IsInputMethodEnabled%2A> property to `false`.</span></span>  
  
 <span data-ttu-id="20751-109"><xref:System.Windows.Controls.Primitives.ButtonBase> は <xref:System.Windows.Controls.ContentControl>であり、任意の型 (文字列、イメージ、パネルなど) の1つのオブジェクトを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="20751-109">A <xref:System.Windows.Controls.Primitives.ButtonBase> is a <xref:System.Windows.Controls.ContentControl>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</span></span> <span data-ttu-id="20751-110">詳細については、<xref:System.Windows.Controls.ContentControl> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="20751-110">For more information, see the <xref:System.Windows.Controls.ContentControl> class.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ButtonBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ButtonBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20751-111"><see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="20751-111">Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.Primitives.ButtonBase.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : System.Windows.RoutedEventHandler " Usage="member this.Click : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20751-112"><see cref="T:System.Windows.Controls.Button" /> がクリックされたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="20751-112">Occurs when a <see cref="T:System.Windows.Controls.Button" /> is clicked.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-113">ユーザーは、<xref:System.Windows.Controls.AccessText> を使用するか ENTER キーを押すか、コントロールにフォーカスがあるときに SPACE キーを押すことによって、<xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="20751-113">The user can raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event by using an <xref:System.Windows.Controls.AccessText> or by pressing ENTER or the SPACEBAR when the control has focus.</span></span>  <span data-ttu-id="20751-114">ユーザーが SPACE キーを押すと、コントロールは <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> を `true` に設定し、マウスをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="20751-114">When the user presses the SPACEBAR, the control sets <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> to `true` and captures the mouse.</span></span>  <span data-ttu-id="20751-115">その結果、コントロールは <xref:System.Windows.UIElement.MouseEnter> や <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>などのマウスイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="20751-115">As a result, the control will raise mouse events such as <xref:System.Windows.UIElement.MouseEnter> and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</span></span> <span data-ttu-id="20751-116"><xref:System.Windows.Controls.AccessText> または ENTER を使用してもマウスを <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> またはキャプチャしないことに注意してくださいが、<xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="20751-116">Note that using the <xref:System.Windows.Controls.AccessText> or ENTER does not change <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> or capture the mouse, but it does raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 <span data-ttu-id="20751-117"><xref:System.Windows.Controls.Primitives.ButtonBase> は、<xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A> メソッドで処理された <xref:System.Windows.UIElement.MouseLeftButtonDown> イベントをマークし、<xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="20751-117">The <xref:System.Windows.Controls.Primitives.ButtonBase> marks the <xref:System.Windows.UIElement.MouseLeftButtonDown> event as handled in the <xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A> method and raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span> <span data-ttu-id="20751-118">したがって、<xref:System.Windows.Controls.Primitives.ButtonBase>から継承されたコントロールでは、<xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A> イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="20751-118">Hence, the <xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A> event will never occur for a control that inherits from <xref:System.Windows.Controls.Primitives.ButtonBase>.</span></span> <span data-ttu-id="20751-119">代わりに、イベントハンドラーを <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> イベントにアタッチするか、`handledEventsToo` を `true`に設定して <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="20751-119">Instead, attach an event handler to the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event, or call <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` set to `true`.</span></span>  
  
<a name="routedEventInfo_Click"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="20751-120">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="20751-120">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="20751-121">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="20751-121">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.ClickEvent>|  
|<span data-ttu-id="20751-122">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="20751-122">Routing strategy</span></span>|<span data-ttu-id="20751-123">バブリング</span><span class="sxs-lookup"><span data-stu-id="20751-123">Bubbling</span></span>|  
|<span data-ttu-id="20751-124">委任</span><span class="sxs-lookup"><span data-stu-id="20751-124">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
   
  
## Examples  
 <span data-ttu-id="20751-125">次の例は、3つの異なる方法でのクリックに応答する3つのボタンを示しています。</span><span class="sxs-lookup"><span data-stu-id="20751-125">The following example shows three buttons that respond to clicks in three different ways.</span></span>  
  
-   <span data-ttu-id="20751-126">ホバー-最初のボタンは、ユーザーがボタンの上にマウスを置いたときに色を変更します。</span><span class="sxs-lookup"><span data-stu-id="20751-126">Hover - the first button changes colors when the user hovers with the mouse over the button</span></span>  
  
-   <span data-ttu-id="20751-127">2番目のボタンを押すには、マウスポインターをボタンの上に置いた状態でマウスを押す必要があります。</span><span class="sxs-lookup"><span data-stu-id="20751-127">Press - the second button requires that the mouse be pressed while the mouse pointer is in the button.</span></span>  
  
-   <span data-ttu-id="20751-128">Release-3 番目の方法では、ボタンの背景色がリセットされず、ボタンのマウスが押されて離されます。</span><span class="sxs-lookup"><span data-stu-id="20751-128">Release - the third does not reset the background color of the buttons until the mouse is pressed and released in the button.</span></span>  
  
 [!code-xaml[ClickModes_snip#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ClickModes_snip/CSharp/Pane1.xaml#1)]  
  
 [!code-csharp[ClickModes_snip#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClickModes_snip/CSharp/Pane1.xaml.cs#2)]
 [!code-vb[ClickModes_snip#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClickModes_snip/VisualBasic/Window1.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClickEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ClickEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ClickEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.ClickEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClickEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ClickEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClickEvent : System.Windows.RoutedEvent" Usage="System.Windows.Controls.Primitives.ButtonBase.ClickEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20751-129"><see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> ルーティング イベントを識別します。</span><span class="sxs-lookup"><span data-stu-id="20751-129">Identifies the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-130">このイベントは、マウスの左ボタンクリックに対応します。</span><span class="sxs-lookup"><span data-stu-id="20751-130">This event corresponds to a left mouse button click.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClickMode">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ClickMode ClickMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.ClickMode ClickMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ClickMode As ClickMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ClickMode ClickMode { System::Windows::Controls::ClickMode get(); void set(System::Windows::Controls::ClickMode value); };" />
      <MemberSignature Language="F#" Value="member this.ClickMode : System.Windows.Controls.ClickMode with get, set" Usage="System.Windows.Controls.Primitives.ButtonBase.ClickMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ClickMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20751-131"><see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> イベントが発生するタイミングを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="20751-131">Gets or sets when the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event occurs.</span></span></summary>
        <value><span data-ttu-id="20751-132"><see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> イベントが発生するタイミング。</span><span class="sxs-lookup"><span data-stu-id="20751-132">When the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event occurs.</span></span> <span data-ttu-id="20751-133">既定値は <see cref="F:System.Windows.Controls.ClickMode.Release" /> です。</span><span class="sxs-lookup"><span data-stu-id="20751-133">The default value is <see cref="F:System.Windows.Controls.ClickMode.Release" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_ClickMode"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="20751-134">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="20751-134">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="20751-135">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="20751-135">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty>|  
|<span data-ttu-id="20751-136">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="20751-136">Metadata properties set to `true`</span></span>|<span data-ttu-id="20751-137">なし</span><span class="sxs-lookup"><span data-stu-id="20751-137">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClickModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClickModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClickModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClickModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClickModeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClickModeProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20751-138"><see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="20751-138">Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand with get, set" Usage="System.Windows.Controls.Primitives.ButtonBase.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20751-139">このボタンが押されたときに呼び出すコマンドを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="20751-139">Gets or sets the command to invoke when this button is pressed.</span></span></summary>
        <value><span data-ttu-id="20751-140">このボタンが押されたときに呼び出すコマンド。</span><span class="sxs-lookup"><span data-stu-id="20751-140">A command to invoke when this button is pressed.</span></span> <span data-ttu-id="20751-141">既定値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="20751-141">The default value is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-142">このプロパティは、コマンドを特定のボタンインスタンスに関連付けるために使用されます。</span><span class="sxs-lookup"><span data-stu-id="20751-142">This property is used to associate a command with a particular button instance.</span></span>  
  
 <span data-ttu-id="20751-143">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]では、多くの場合、このプロパティは、<xref:System.Windows.Input.ApplicationCommands> や <xref:System.Windows.Input.NavigationCommands>など、既存のコマンドライブラリの1つからの静的なコマンド値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="20751-143">In [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], this property is most often set to be a static command value from one of the existing command libraries, such as <xref:System.Windows.Input.ApplicationCommands> or <xref:System.Windows.Input.NavigationCommands>.</span></span> <span data-ttu-id="20751-144">詳細については、「[コマンドの概要](/dotnet/framework/wpf/advanced/commanding-overview)」または「<xref:System.Windows.Input.ICommand>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="20751-144">For details, see [Commanding Overview](/dotnet/framework/wpf/advanced/commanding-overview) or <xref:System.Windows.Input.ICommand>.</span></span>  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="20751-145">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="20751-145">XAML Attribute Usage</span></span>  
  
```  
<object Command="commandName"/>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a><span data-ttu-id="20751-146">XAML の値</span><span class="sxs-lookup"><span data-stu-id="20751-146">XAML Values</span></span>  
 <span data-ttu-id="20751-147">*commandName*</span><span class="sxs-lookup"><span data-stu-id="20751-147">*commandName*</span></span>  
 <span data-ttu-id="20751-148">このボタンが押されたときに呼び出すコマンド。</span><span class="sxs-lookup"><span data-stu-id="20751-148">The command to invoke when this button is pressed.</span></span>  
  
<a name="dependencyPropertyInfo_Command"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="20751-149">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="20751-149">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="20751-150">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="20751-150">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.CommandProperty>|  
|<span data-ttu-id="20751-151">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="20751-151">Metadata properties set to `true`</span></span>|<span data-ttu-id="20751-152">なし</span><span class="sxs-lookup"><span data-stu-id="20751-152">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameter : obj with get, set" Usage="System.Windows.Controls.Primitives.ButtonBase.CommandParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20751-153"><see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> プロパティに渡すパラメーターを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="20751-153">Gets or sets the parameter to pass to the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> property.</span></span></summary>
        <value><span data-ttu-id="20751-154"><see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> プロパティに渡すパラメーター。</span><span class="sxs-lookup"><span data-stu-id="20751-154">Parameter to pass to the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-155">コマンドライブラリの既存のコマンドのほとんどは、コマンドパラメーターを使用しません。</span><span class="sxs-lookup"><span data-stu-id="20751-155">Most existing commands from the command libraries do not use a command parameter.</span></span> <span data-ttu-id="20751-156">コマンドパラメーターを使用するコマンドのほとんどは、整数や文字列などのプリミティブ型の値を持つパラメーターを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="20751-156">Of the commands that do use a command parameter, most of these take a parameter with some primitive type value, such as an integer or a string.</span></span> <span data-ttu-id="20751-157">ただし、コマンドパラメーターとして非プリミティブ型を期待するカスタムコマンドを作成することもできます。</span><span class="sxs-lookup"><span data-stu-id="20751-157">However, it is possible to create a custom command where that command expects a nonprimitive type as its command parameter.</span></span> <span data-ttu-id="20751-158">このようなカスタムコマンドケースでは、コード内に <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> を設定するときに、新規または既存のオブジェクトインスタンスが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="20751-158">For a custom command case like this, setting <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> in code might require a new or existing object instance.</span></span> <span data-ttu-id="20751-159">マークアップで <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> を設定するには、property 要素の構文を必要とする場合があります。この場合、プロパティ要素構文を入力するオブジェクト要素は、そのコマンドによって想定される型の新しい要素になります。</span><span class="sxs-lookup"><span data-stu-id="20751-159">Setting <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> in markup might require property element syntax, where the object element filling the property element syntax is a new element of the type expected by that command.</span></span> <span data-ttu-id="20751-160">また、マークアップでを設定する場合は、既存のオブジェクトへのマークアップ拡張機能を通じた参照が必要になることがあります (通常、これらの参照は、[バインディングマークアップ拡張](/dotnet/framework/wpf/advanced/binding-markup-extension)機能または[StaticResource マークアップ拡張機能](/dotnet/framework/wpf/advanced/staticresource-markup-extension)で作成されます)。</span><span class="sxs-lookup"><span data-stu-id="20751-160">Alternatively, setting in markup might require a reference through a markup extension to an existing object (typically these references are made with [Binding Markup Extension](/dotnet/framework/wpf/advanced/binding-markup-extension) or [StaticResource Markup Extension](/dotnet/framework/wpf/advanced/staticresource-markup-extension)).</span></span>  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="20751-161">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="20751-161">XAML Attribute Usage</span></span>  
  
```  
<object CommandParameter="commandParameter" />  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a><span data-ttu-id="20751-162">XAML の値</span><span class="sxs-lookup"><span data-stu-id="20751-162">XAML Values</span></span>  
 <span data-ttu-id="20751-163">*commandParameter*</span><span class="sxs-lookup"><span data-stu-id="20751-163">*commandParameter*</span></span>  
 <span data-ttu-id="20751-164"><xref:System.Windows.Controls.Primitives.ButtonBase.Command%2A> プロパティに指定されている特定のコマンドと同じ型の値が必要です。</span><span class="sxs-lookup"><span data-stu-id="20751-164">A value of the same type as the particular command specified in the <xref:System.Windows.Controls.Primitives.ButtonBase.Command%2A> property expects.</span></span> <span data-ttu-id="20751-165">既存のコマンドライブラリのコマンドを使用する場合は、コマンドライブラリのドキュメントを参照して [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 使用状況に関する情報を確認してください。これには、コマンドで想定される <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> の種類が含まれます。</span><span class="sxs-lookup"><span data-stu-id="20751-165">If you use an existing command library command, see that command library's documentation for [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage information, including which type of <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> the command expects.</span></span> <span data-ttu-id="20751-166">カスタムコマンドを使用する場合は、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="20751-166">If you use a custom command, see Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_CommandParameter"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="20751-167">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="20751-167">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="20751-168">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="20751-168">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameterProperty>|  
|<span data-ttu-id="20751-169">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="20751-169">Metadata properties set to `true`</span></span>|<span data-ttu-id="20751-170">なし</span><span class="sxs-lookup"><span data-stu-id="20751-170">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandParameterProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.ButtonBase.CommandParameterProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20751-171"><see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="20751-171">Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.ButtonBase.CommandProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20751-172">ルーティング <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="20751-172">Identifies the routed <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTarget : System.Windows.IInputElement with get, set" Usage="System.Windows.Controls.Primitives.ButtonBase.CommandTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20751-173">指定したコマンドの発生元の要素を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="20751-173">Gets or sets the element on which to raise the specified command.</span></span></summary>
        <value><span data-ttu-id="20751-174">コマンドが実行される要素。</span><span class="sxs-lookup"><span data-stu-id="20751-174">Element on which to raise a command.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-175"><xref:System.Windows.Controls.Primitives.ButtonBase.CommandTarget%2A> プロパティを使用して <xref:System.Windows.UIElement>を定義することはできません。</span><span class="sxs-lookup"><span data-stu-id="20751-175">The <xref:System.Windows.Controls.Primitives.ButtonBase.CommandTarget%2A> property cannot be used to define a <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="20751-176"><xref:System.Windows.Controls.Primitives.ButtonBase.CommandTarget%2A> プロパティは、アプリケーションのどこかで既に定義されている要素への参照を提供します。</span><span class="sxs-lookup"><span data-stu-id="20751-176">The <xref:System.Windows.Controls.Primitives.ButtonBase.CommandTarget%2A> property provides a reference to an element that is already defined somewhere in your application.</span></span>  
  
<a name="xamlAttributeUsage_Target"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="20751-177">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="20751-177">XAML Attribute Usage</span></span>  
  
```  
<ButtonBase CommandTarget="{Binding ElementName= elementName }"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a><span data-ttu-id="20751-178">XAML の値</span><span class="sxs-lookup"><span data-stu-id="20751-178">XAML Values</span></span>  
 <span data-ttu-id="20751-179">*elementName*</span><span class="sxs-lookup"><span data-stu-id="20751-179">*elementName*</span></span>  
 <span data-ttu-id="20751-180">コマンドを受け取る <xref:System.Windows.IInputElement> の名前。</span><span class="sxs-lookup"><span data-stu-id="20751-180">The name of <xref:System.Windows.IInputElement> that receives the command.</span></span>  
  
<a name="dependencyPropertyInfo_CommandTarget"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="20751-181">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="20751-181">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="20751-182">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="20751-182">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.CommandTargetProperty>|  
|<span data-ttu-id="20751-183">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="20751-183">Metadata properties set to `true`</span></span>|<span data-ttu-id="20751-184">なし</span><span class="sxs-lookup"><span data-stu-id="20751-184">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandTargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.ButtonBase.CommandTargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20751-185"><see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandTarget" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="20751-185">Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandTarget" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected override bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.Controls.Primitives.ButtonBase.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20751-186"><see cref="P:System.Windows.ContentElement.IsEnabled" /> プロパティの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="20751-186">Gets the value of the <see cref="P:System.Windows.ContentElement.IsEnabled" /> property.</span></span></summary>
        <value><span data-ttu-id="20751-187">コントロールが有効になっている場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="20751-187"><see langword="true" /> if the control is enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-188">この実装をオーバーライドする場合は、基本メソッドを呼び出すようにしてください。</span><span class="sxs-lookup"><span data-stu-id="20751-188">If you choose to override this implementation, make certain that you call the base method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPressed">
      <MemberSignature Language="C#" Value="public bool IsPressed { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPressed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPressed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:  property bool IsPressed {  public:&#xA;bool get(); protected:&#xA; void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPressed : bool with get, set" Usage="System.Windows.Controls.Primitives.ButtonBase.IsPressed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20751-189"><see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> が現在アクティブになっているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="20751-189">Gets a value that indicates whether a <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> is currently activated.</span></span></summary>
        <value><span data-ttu-id="20751-190"><see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> がアクティブになっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="20751-190"><see langword="true" /> if the <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> is activated; otherwise <see langword="false" />.</span></span> <span data-ttu-id="20751-191">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="20751-191">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-192"><xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> は、ボタンの上にマウスの左ボタンまたは SPACE キーが押されたことを示すボタンの状態です。</span><span class="sxs-lookup"><span data-stu-id="20751-192"><xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> is the state of a button that indicates the left mouse button or SPACEBAR is pressed over the button.</span></span> <span data-ttu-id="20751-193"><xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> が `true`場合、コントロールはマウスをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="20751-193">When <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> is `true`, the control captures the mouse.</span></span>  <span data-ttu-id="20751-194">その結果、コントロールは <xref:System.Windows.UIElement.MouseEnter> や <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>などのマウスイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="20751-194">As a result, the control will raise mouse events such as <xref:System.Windows.UIElement.MouseEnter> and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</span></span> <span data-ttu-id="20751-195"><xref:System.Windows.Controls.AccessText> または ENTER を使用しても、マウスを変更 <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> またはキャプチャしないことに注意してくださいが、では <xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="20751-195">Note that using the <xref:System.Windows.Controls.AccessText> or ENTER does not change <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> or capture the mouse, but is does raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 <span data-ttu-id="20751-196">.NET Framework バージョン 3.0 Service Pack 1 以降では、<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> には保護されたセッターがあります。</span><span class="sxs-lookup"><span data-stu-id="20751-196">Starting with the .NET Framework version 3.0 Service Pack 1, <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> has a protected setter.</span></span> <span data-ttu-id="20751-197">この機能を使用するには、アプリケーションが .NET Framework バージョン3.5 を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="20751-197">To use this functionality, your application should target the .NET Framework version 3.5.</span></span>  <span data-ttu-id="20751-198">詳細については、「[.NET Framework のバージョンおよび依存関係](/dotnet/framework/migration-guide/versions-and-dependencies)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="20751-198">For more information, see [Versions and Dependencies](/dotnet/framework/migration-guide/versions-and-dependencies).</span></span>  
  
<a name="dependencyPropertyInfo_IsPressed"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="20751-199">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="20751-199">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="20751-200">識別子フィールド</span><span class="sxs-lookup"><span data-stu-id="20751-200">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty>|  
|<span data-ttu-id="20751-201">メタデータプロパティが `true` に設定される</span><span class="sxs-lookup"><span data-stu-id="20751-201">Metadata properties set to `true`</span></span>|<span data-ttu-id="20751-202">なし</span><span class="sxs-lookup"><span data-stu-id="20751-202">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="20751-203">この例では、トリガースタイルで <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> プロパティを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="20751-203">This example shows how to use the <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> property in a trigger style.</span></span>  
  
 [!code-xaml[BtnColor#9](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnColor/CSharp/Pane1.xaml#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPressedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsPressedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsPressedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsPressedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsPressedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsPressedProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20751-204"><see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> 依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="20751-204">Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected override void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit" Usage="buttonBase.OnAccessKey e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="20751-205"><see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> イベントのイベント データ。</span><span class="sxs-lookup"><span data-stu-id="20751-205">The event data for the <see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> event.</span></span></param>
        <summary><span data-ttu-id="20751-206">このコントロールの <see cref="P:System.Windows.Controls.AccessText.AccessKey" /> が呼び出されると応答します。</span><span class="sxs-lookup"><span data-stu-id="20751-206">Responds when the <see cref="P:System.Windows.Controls.AccessText.AccessKey" /> for this control is called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-207"><xref:System.Windows.Input.AccessKeyEventArgs.IsMultiple%2A> が `true`場合、このメソッドは基本実装を呼び出します。これにより、このコントロールフォーカスが得られます。</span><span class="sxs-lookup"><span data-stu-id="20751-207">If <xref:System.Windows.Input.AccessKeyEventArgs.IsMultiple%2A> is `true`, this method calls the base implementation, which gives this control focus.</span></span>  <span data-ttu-id="20751-208">それ以外の場合、このメソッドは <xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="20751-208">Otherwise, this method raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick();" />
      <MemberSignature Language="F#" Value="abstract member OnClick : unit -&gt; unit&#xA;override this.OnClick : unit -&gt; unit" Usage="buttonBase.OnClick " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20751-209"><see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> ルーティング イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="20751-209">Raises the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-210">コントロールは、<xref:System.Windows.UIElement.RaiseEvent%2A>を呼び出すことによって、<xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="20751-210">The control raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event by calling <xref:System.Windows.UIElement.RaiseEvent%2A>.</span></span> <span data-ttu-id="20751-211">詳細については、「[ルーティングイベントの概要](/dotnet/framework/wpf/advanced/routed-events-overview)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="20751-211">For more information, see [Routed Events Overview](/dotnet/framework/wpf/advanced/routed-events-overview).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="20751-212">派生クラスで <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取るように、基本クラスの <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" /> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="20751-212">When overriding <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" /> in a derived class, be sure to call the base class' <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnIsPressedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsPressedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsPressedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsPressedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsPressedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsPressedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsPressedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="buttonBase.OnIsPressedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="20751-213"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> のデータ。</span><span class="sxs-lookup"><span data-stu-id="20751-213">The data for <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span></span></param>
        <summary><span data-ttu-id="20751-214"><see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> プロパティが変更されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="20751-214">Called when the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> property changes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="buttonBase.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="20751-215">イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="20751-215">The event data.</span></span></param>
        <summary><span data-ttu-id="20751-216">このコントロールにフォーカスがある状態でユーザーがキーを押したときに発生する <see cref="E:System.Windows.UIElement.KeyDown" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="20751-216">Provides class handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event that occurs when the user presses a key while this control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-217">この実装では、<xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> が <xref:System.Windows.Controls.ClickMode.Hover> に設定されておらず、次のいずれかのケースに該当する場合に、イベントデータの <xref:System.Windows.RoutedEventArgs.Handled%2A> プロパティを `true` に設定することによって、<xref:System.Windows.UIElement.KeyDown> イベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="20751-217">This implementation marks the <xref:System.Windows.UIElement.KeyDown> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is not set to <xref:System.Windows.Controls.ClickMode.Hover> and one of the following cases are true:</span></span>  
  
-   <span data-ttu-id="20751-218">ユーザーが SPACE キーを押します。</span><span class="sxs-lookup"><span data-stu-id="20751-218">The user presses the SPACEBAR.</span></span>  
  
-   <span data-ttu-id="20751-219">ユーザーが ENTER キーを押すと <xref:System.Windows.Input.KeyboardNavigation.AcceptsReturn%2A> がこのコントロールに対して `true` ます。</span><span class="sxs-lookup"><span data-stu-id="20751-219">The user presses ENTER and <xref:System.Windows.Input.KeyboardNavigation.AcceptsReturn%2A> is `true` for this control.</span></span>  
  
 <span data-ttu-id="20751-220">それ以外の場合、この実装では、<xref:System.Windows.UIElement.KeyDown> イベントデータの処理済みの状態 (<xref:System.Windows.RoutedEventArgs.Handled%2A> プロパティ) は変更されません。</span><span class="sxs-lookup"><span data-stu-id="20751-220">In all other cases, this implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.KeyDown> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="20751-221"><see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" />をオーバーライドする場合は、常に <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" /> の実装で基本実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="20751-221">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" /> implementation.</span></span> <span data-ttu-id="20751-222">基本実装を呼び出さないと、基底クラスでクラスハンドラーを使用してイベントを処理できなくなり、最終的なクラスの実行時の動作が変わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="20751-222">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="20751-223">基本実装は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="20751-223">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="buttonBase.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="20751-224"><see cref="E:System.Windows.UIElement.KeyUp" /> イベントのイベント データ。</span><span class="sxs-lookup"><span data-stu-id="20751-224">The event data for the <see cref="E:System.Windows.UIElement.KeyUp" /> event.</span></span></param>
        <summary><span data-ttu-id="20751-225">このコントロールにフォーカスがある状態でユーザーがキーを離したときに発生する <see cref="E:System.Windows.UIElement.KeyUp" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="20751-225">Provides class handling for the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event that occurs when the user releases a key while this control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-226">この実装では、ユーザーが SPACE キーを離したときにイベントデータの <xref:System.Windows.RoutedEventArgs.Handled%2A> プロパティを `true` に設定することによって、<xref:System.Windows.UIElement.KeyUp> イベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="20751-226">This implementation marks the <xref:System.Windows.UIElement.KeyUp> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when the user releases the SPACEBAR.</span></span> <span data-ttu-id="20751-227">それ以外の場合、この実装では、<xref:System.Windows.UIElement.KeyUp> イベントデータの処理済みの状態 (<xref:System.Windows.RoutedEventArgs.Handled%2A> プロパティ) は変更されません。</span><span class="sxs-lookup"><span data-stu-id="20751-227">Otherwise, this implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.KeyUp> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="20751-228"><see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" />をオーバーライドする場合は、常に <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" /> の実装で基本実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="20751-228">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" /> implementation.</span></span> <span data-ttu-id="20751-229">基本実装を呼び出さないと、基底クラスでクラスハンドラーを使用してイベントを処理できなくなり、最終的なクラスの実行時の動作が変わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="20751-229">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="20751-230">基本実装は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="20751-230">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected override void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="buttonBase.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="20751-231"><see cref="E:System.Windows.IInputElement.LostKeyboardFocus" /> イベントのイベント データ。</span><span class="sxs-lookup"><span data-stu-id="20751-231">The event data for the <see cref="E:System.Windows.IInputElement.LostKeyboardFocus" /> event.</span></span></param>
        <summary><span data-ttu-id="20751-232">要素がキーボード フォーカスを失うと呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="20751-232">Called when an element loses keyboard focus.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected override void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="buttonBase.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="20751-233"><see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> イベントのイベント データ。</span><span class="sxs-lookup"><span data-stu-id="20751-233">The event data for the <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> event.</span></span></param>
        <summary><span data-ttu-id="20751-234">このコントロールがマウスのイベント メッセージを受信しなくなったときに発生する <see cref="E:System.Windows.UIElement.LostMouseCapture" /> ルーティング イベントに対するクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="20751-234">Provides class handling for the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> routed event that occurs when this control is no longer receiving mouse event messages.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-235">この実装では、<xref:System.Windows.UIElement.LostMouseCapture> イベントデータの処理済みの状態 (<xref:System.Windows.RoutedEventArgs.Handled%2A> プロパティ) は変更されません。</span><span class="sxs-lookup"><span data-stu-id="20751-235">This implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.LostMouseCapture> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="20751-236"><see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />をオーバーライドする場合は、常に <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" /> の実装で基本実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="20751-236">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" /> implementation.</span></span> <span data-ttu-id="20751-237">基本実装を呼び出さないと、基底クラスでクラスハンドラーを使用してイベントを処理できなくなり、最終的なクラスの実行時の動作が変わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="20751-237">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="20751-238">基本実装は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="20751-238">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected override void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="buttonBase.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="20751-239"><see cref="E:System.Windows.Input.Mouse.MouseEnter" /> イベントのイベント データ。</span><span class="sxs-lookup"><span data-stu-id="20751-239">The event data for the <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> event.</span></span></param>
        <summary><span data-ttu-id="20751-240">マウスがこのコントロールに入ったときに発生する <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="20751-240">Provides class handling for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> routed event that occurs when the mouse enters this control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-241"><xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> が <xref:System.Windows.Controls.ClickMode.Hover>に設定されている場合、この実装は、イベントデータの <xref:System.Windows.RoutedEventArgs.Handled%2A> プロパティを `true` に設定することによって、<xref:System.Windows.UIElement.MouseEnter> イベントを処理済みとしてマークし、<xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="20751-241">When <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is set to <xref:System.Windows.Controls.ClickMode.Hover>, this implementation marks the <xref:System.Windows.UIElement.MouseEnter> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` and raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="20751-242"><see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />をオーバーライドする場合は、常に <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" /> の実装で基本実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="20751-242">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" /> implementation.</span></span> <span data-ttu-id="20751-243">基本実装を呼び出さないと、基底クラスでクラスハンドラーを使用してイベントを処理できなくなり、最終的なクラスの実行時の動作が変わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="20751-243">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="20751-244">基本実装は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="20751-244">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="buttonBase.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="20751-245"><see cref="E:System.Windows.Input.Mouse.MouseLeave" /> イベントのイベント データ。</span><span class="sxs-lookup"><span data-stu-id="20751-245">The event data for the <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> event.</span></span></param>
        <summary><span data-ttu-id="20751-246">マウスが要素から離れたときに発生する <see cref="E:System.Windows.UIElement.MouseLeave" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="20751-246">Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event that occurs when the mouse leaves an element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-247">この実装では、<xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> が <xref:System.Windows.Controls.ClickMode.Hover>に設定されている場合にイベントデータの <xref:System.Windows.RoutedEventArgs.Handled%2A> プロパティを `true` に設定することによって、<xref:System.Windows.UIElement.MouseLeave> イベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="20751-247">This implementation marks the <xref:System.Windows.UIElement.MouseLeave> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is set to <xref:System.Windows.Controls.ClickMode.Hover>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="20751-248"><see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />をオーバーライドする場合は、常に <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" /> の実装で基本実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="20751-248">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" /> implementation.</span></span> <span data-ttu-id="20751-249">基本実装を呼び出さないと、基底クラスでクラスハンドラーを使用してイベントを処理できなくなり、最終的なクラスの実行時の動作が変わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="20751-249">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="20751-250">基本実装は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="20751-250">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="buttonBase.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="20751-251">イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="20751-251">The event data.</span></span></param>
        <summary><span data-ttu-id="20751-252">マウス ポインターがこのコントロールの上にある状態でマウスの左ボタンが押されたときに発生する <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="20751-252">Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event that occurs when the left mouse button is pressed while the mouse pointer is over this control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-253">この実装では、<xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> が <xref:System.Windows.Controls.ClickMode.Hover>に設定されていない場合に、イベントデータの <xref:System.Windows.RoutedEventArgs.Handled%2A> プロパティを `true` に設定することによって、<xref:System.Windows.UIElement.MouseLeftButtonDown> イベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="20751-253">This implementation marks the <xref:System.Windows.UIElement.MouseLeftButtonDown> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is not set to <xref:System.Windows.Controls.ClickMode.Hover>.</span></span> <span data-ttu-id="20751-254"><xref:System.Windows.UIElement.MouseLeftButtonDown> イベントに応答するには、イベントハンドラーを <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> イベントにアタッチするか、`handledEventsToo` を `true`に設定して <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="20751-254">To respond to the <xref:System.Windows.UIElement.MouseLeftButtonDown> event, attach an event handler to the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event, or call <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` set to `true`.</span></span>  
  
 <span data-ttu-id="20751-255"><xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> が <xref:System.Windows.Controls.ClickMode.Press>に設定されている場合、このメソッドは <xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="20751-255">When <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is set to <xref:System.Windows.Controls.ClickMode.Press>, this method raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="20751-256"><see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />をオーバーライドする場合は、常に <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" /> の実装で基本実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="20751-256">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" /> implementation.</span></span> <span data-ttu-id="20751-257">基本実装を呼び出さないと、基底クラスでクラスハンドラーを使用してイベントを処理できなくなり、最終的なクラスの実行時の動作が変わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="20751-257">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="20751-258">基本実装は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="20751-258">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="buttonBase.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="20751-259">イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="20751-259">The event data.</span></span></param>
        <summary><span data-ttu-id="20751-260">マウス ポインターがこのコントロールの上にある状態でマウスの左ボタンが離されたときに発生する <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="20751-260">Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event that occurs when the left mouse button is released while the mouse pointer is over this control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-261">この実装では、<xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> が <xref:System.Windows.Controls.ClickMode.Hover>に設定されていない場合に、イベントデータの <xref:System.Windows.RoutedEventArgs.Handled%2A> プロパティを `true` に設定することによって、<xref:System.Windows.UIElement.MouseLeftButtonUp> イベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="20751-261">This implementation marks the <xref:System.Windows.UIElement.MouseLeftButtonUp> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is not set to <xref:System.Windows.Controls.ClickMode.Hover>.</span></span> <span data-ttu-id="20751-262"><xref:System.Windows.UIElement.MouseLeftButtonUp> イベントに応答するには、イベントハンドラーを <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> イベントにアタッチするか、`handledEventsToo` を `true`に設定して <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="20751-262">To respond to the <xref:System.Windows.UIElement.MouseLeftButtonUp> event, attach an event handler to the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event, or call <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` set to `true`.</span></span>  
  
 <span data-ttu-id="20751-263"><xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> がに設定されている <xref:System.Windows.Controls.ClickMode.Release> は <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> が `true`、このメソッドは <xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="20751-263">When <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is set to <xref:System.Windows.Controls.ClickMode.Release> is <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> is `true`, this method raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="20751-264"><see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />をオーバーライドする場合は、常に <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" /> の実装で基本実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="20751-264">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" /> implementation.</span></span> <span data-ttu-id="20751-265">基本実装を呼び出さないと、基底クラスでクラスハンドラーを使用してイベントを処理できなくなり、最終的なクラスの実行時の動作が変わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="20751-265">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="20751-266">基本実装は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="20751-266">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected override void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="buttonBase.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="20751-267">イベントのデータ。</span><span class="sxs-lookup"><span data-stu-id="20751-267">The event data.</span></span></param>
        <summary><span data-ttu-id="20751-268">マウス ポインターがこの要素の上を移動するときに発生する <see cref="E:System.Windows.UIElement.MouseMove" /> ルーティング イベントのクラス処理を提供します。</span><span class="sxs-lookup"><span data-stu-id="20751-268">Provides class handling for the <see cref="E:System.Windows.UIElement.MouseMove" /> routed event that occurs when the mouse pointer moves while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-269">この実装では、<xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> が <xref:System.Windows.Controls.ClickMode.Hover> に設定されておらず <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> が `true`場合は、イベントデータの <xref:System.Windows.RoutedEventArgs.Handled%2A> プロパティを `true` に設定することによって、<xref:System.Windows.UIElement.MouseMove> イベントを処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="20751-269">This implementation marks the <xref:System.Windows.UIElement.MouseMove> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is not set to <xref:System.Windows.Controls.ClickMode.Hover> and <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> is `true`.</span></span> <span data-ttu-id="20751-270"><xref:System.Windows.UIElement.MouseMove> イベントに応答するには、イベントハンドラーを <xref:System.Windows.ContentElement.PreviewMouseMove> イベントにアタッチするか、`handledEventsToo` を `true`に設定して <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="20751-270">To respond to the <xref:System.Windows.UIElement.MouseMove> event, attach an event handler to the <xref:System.Windows.ContentElement.PreviewMouseMove> event, or call <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` set to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="20751-271"><see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" />をオーバーライドする場合は、常に <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" /> の実装で基本実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="20751-271">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" /> implementation.</span></span> <span data-ttu-id="20751-272">基本実装を呼び出さないと、基底クラスでクラスハンドラーを使用してイベントを処理できなくなり、最終的なクラスの実行時の動作が変わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="20751-272">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="20751-273">基本実装は、要件に応じて、特別な処理の前または後に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="20751-273">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo sizeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnRenderSizeChanged (sizeInfo As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ sizeInfo);" />
      <MemberSignature Language="F#" Value="override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="buttonBase.OnRenderSizeChanged sizeInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeInfo" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="sizeInfo"><span data-ttu-id="20751-274">サイズの変更を指定します。</span><span class="sxs-lookup"><span data-stu-id="20751-274">Specifies the size changes.</span></span></param>
        <summary><span data-ttu-id="20751-275">レンダリングされるコントロールのサイズが変更されると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="20751-275">Called when the rendered size of a control changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20751-276"><xref:System.Windows.UIElement>の <xref:System.Windows.Controls.Primitives.ButtonBase.OnRenderSizeChanged%2A> メソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="20751-276">Overrides the <xref:System.Windows.Controls.Primitives.ButtonBase.OnRenderSizeChanged%2A> method of the <xref:System.Windows.UIElement>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
