<Type Name="NegotiateStream" FullName="System.Net.Security.NegotiateStream">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f84c06737be845e3b1afcc47edfeed4060fdbe6f" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77223728" /></Metadata><TypeSignature Language="C#" Value="public class NegotiateStream : System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NegotiateStream extends System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Security.NegotiateStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NegotiateStream&#xA;Inherits AuthenticatedStream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NegotiateStream : System::Net::Security::AuthenticatedStream" />
  <TypeSignature Language="F#" Value="type NegotiateStream = class&#xA;    inherit AuthenticatedStream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Security.AuthenticatedStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3b2d2-101">クライアント サーバー通信で Negotiate セキュリティ プロトコルを使用してクライアントの認証と (オプションで) サーバーの認証を行うストリームを提供します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-101">Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-102">認証には <xref:System.Net.Security.NegotiateStream> クラスを使用し、クライアントとサーバーの間で送信される情報をセキュリティで保護するために使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-102">Use the <xref:System.Net.Security.NegotiateStream> class for authentication and to help secure information transmitted between a client and a server.</span></span> <span data-ttu-id="3b2d2-103"><xref:System.Net.Security.NegotiateStream>を使用すると、次の操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-103">Using <xref:System.Net.Security.NegotiateStream>, you can do the following.</span></span>  
  
-   <span data-ttu-id="3b2d2-104">偽装または委任のために、クライアントの資格情報をサーバーに送信します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-104">Send the client's credentials to the server for Impersonation or Delegation.</span></span>  
  
-   <span data-ttu-id="3b2d2-105">サーバー認証を要求します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-105">Request server authentication.</span></span>  
  
-   <span data-ttu-id="3b2d2-106">転送前にデータを暗号化または署名します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-106">Encrypt and/or sign data before transmitting it.</span></span>  
  
 <span data-ttu-id="3b2d2-107">情報を送信する前に認証を実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-107">Authentication must be performed before transmitting information.</span></span> <span data-ttu-id="3b2d2-108">クライアントは、認証が完了するまでブロックする同期 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> メソッド、または認証の完了を待機している間にブロックされない非同期の <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> メソッドを使用して認証を要求します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-108">Clients request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods, which do not block while waiting for the authentication to complete.</span></span> <span data-ttu-id="3b2d2-109">サーバーは、同期 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> または非同期の <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドを使用して認証を要求します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-109">Servers request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span> <span data-ttu-id="3b2d2-110">クライアント (オプションでサーバー) は、Negotiate セキュリティプロトコルを使用して認証されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-110">The client, and optionally the server, is authenticated using the Negotiate security protocol.</span></span> <span data-ttu-id="3b2d2-111">Windows 95/98 システムでは、Windows NT LAN Manager (NTLM) は認証に使用されるプロトコルです。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-111">On Windows 95/98 systems, Windows NT LAN Manager (NTLM) is the protocol used for authentication.</span></span> <span data-ttu-id="3b2d2-112">他のプラットフォームでは、クライアントとサーバーの両方がサポートする場合、Kerberos プロトコルが認証に使用されます。それ以外の場合は NTLM が使用されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-112">On other platforms the Kerberos protocol is used for authentication if both client and server support it; otherwise NTLM is used.</span></span> <span data-ttu-id="3b2d2-113">これらのプロトコルの詳細については、MSDN のプラットフォーム SDK ドキュメント (msdn.microsoft.com/library/) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-113">For detailed descriptions of these protocols, see the Platform SDK documentation on MSDN, at msdn.microsoft.com/library/.</span></span> <span data-ttu-id="3b2d2-114"><xref:System.Net.Security.NegotiateStream> クラスは、セキュリティサポートプロバイダインターフェイス (SSPI) を使用して認証を実行します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-114">The <xref:System.Net.Security.NegotiateStream> class performs the authentication using the Security Support Provider Interface (SSPI).</span></span>  
  
 <span data-ttu-id="3b2d2-115">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、転送中にデータをセキュリティで保護するために <xref:System.Net.Security.NegotiateStream> によって使用されるセキュリティサービスを決定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-115">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services will be used by the <xref:System.Net.Security.NegotiateStream> to help secure your data during transmission.</span></span> <span data-ttu-id="3b2d2-116"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-116">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span> <span data-ttu-id="3b2d2-117">リモートクライアントまたはサーバーに関する情報は、<xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> プロパティを使用して取得できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-117">You can get information about the remote client or server using the <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> property.</span></span>  
  
 <span data-ttu-id="3b2d2-118">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-118">If the authentication fails, you will receive an <xref:System.Security.Authentication.AuthenticationException> or a <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-119">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-119">In this case, you can retry the authentication with a different credential.</span></span>  
  
 <span data-ttu-id="3b2d2-120">同期 <xref:System.Net.Security.NegotiateStream.Write%2A> または非同期の <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> メソッドを使用してデータを送信します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-120">You send data using the synchronous <xref:System.Net.Security.NegotiateStream.Write%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> methods.</span></span> <span data-ttu-id="3b2d2-121">同期 <xref:System.Net.Security.NegotiateStream.Read%2A> または非同期の <xref:System.Net.Security.NegotiateStream.BeginRead%2A> メソッドを使用してデータを受信します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-121">You receive data using the synchronous <xref:System.Net.Security.NegotiateStream.Read%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginRead%2A> methods.</span></span> <span data-ttu-id="3b2d2-122">暗号化や署名などのセキュリティサービスが有効になっている場合は、<xref:System.Net.Security.NegotiateStream>によってデータに自動的に適用されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-122">If security services such as encryption or signing are enabled, these are automatically applied to your data by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="3b2d2-123"><xref:System.Net.Security.NegotiateStream> は、<xref:System.Net.Security.NegotiateStream>の作成時に指定したストリームを使用してデータを転送します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-123">The <xref:System.Net.Security.NegotiateStream> transmits data using a stream that you supply when creating the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-124">この基になるストリームを指定する場合は、<xref:System.Net.Security.NegotiateStream> を閉じるか、基になるストリームも閉じるかどうかを指定するオプションがあります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-124">When you supply this underlying stream, you have the option to specify whether closing the <xref:System.Net.Security.NegotiateStream> also closes the underlying stream.</span></span>  
  
   
  
## Examples  
<span data-ttu-id="3b2d2-125">次の例は、<xref:System.Net.Security.NegotiateStream>を使用するクライアントとサーバー間の接続のクライアント側を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-125">The following example demonstrates the client side of a client-server connection that uses the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-126">クライアントは認証を行い、メッセージをサーバーに非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-126">The client authenticates and sends a message to the server asynchronously.</span></span>  
  
[!code-cpp[NclNegoAsyncClient#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#0)]
[!code-csharp[NclNegoAsyncClient#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#0)]  
[!code-vb[NclNegoAsyncClient#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclNegoasyncClient/VB/client.vb#0)] 

<span data-ttu-id="3b2d2-127">次のコード例は、<xref:System.Net.Security.NegotiateStream> を使用してクライアントを認証し、クライアントから送信されたメッセージを読み取るクライアントとサーバー間の接続のサーバー側を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-127">The following code example demonstrates the server side of a client-server connection that uses the <xref:System.Net.Security.NegotiateStream> to authenticate the client and read a message sent by the client.</span></span>  
  
[!code-cpp[NclNegoAsyncServer#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#0)]
[!code-csharp[NclNegoAsyncServer#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#0)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/network-programming/changes-to-ntlm-authentication-for-httpwebrequest-in-version-3-5-sp1.md"><span data-ttu-id="3b2d2-128">バージョン 3.5 SP1 での HTTPWebRequest の NTLM 認証に対する変更</span><span class="sxs-lookup"><span data-stu-id="3b2d2-128">Changes to NTLM authentication for HTTPWebRequest in Version 3.5 SP1</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3b2d2-129"><see cref="T:System.Net.Security.NegotiateStream" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-129">Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-130">指定したストリームを <xref:System.Net.Security.NegotiateStream> が終了しないようにするには、<xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29> コンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-130">To prevent the <xref:System.Net.Security.NegotiateStream> from closing the stream that you supply, use the <xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream);" />
      <MemberSignature Language="F#" Value="new System.Net.Security.NegotiateStream : System.IO.Stream -&gt; System.Net.Security.NegotiateStream" Usage="new System.Net.Security.NegotiateStream innerStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="innerStream"><span data-ttu-id="3b2d2-131"><see cref="T:System.IO.Stream" /> がデータの送受信に使用する <see cref="T:System.Net.Security.NegotiateStream" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-131">A <see cref="T:System.IO.Stream" /> object used by the <see cref="T:System.Net.Security.NegotiateStream" /> for sending and receiving data.</span></span></param>
        <summary><span data-ttu-id="3b2d2-132">指定した <see cref="T:System.Net.Security.NegotiateStream" /> を使用して、<see cref="T:System.IO.Stream" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-132">Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream" /> class using the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3b2d2-133">次のコード例は、このコンストラクターを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-133">The following code example demonstrates calling this constructor.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#3)]
 [!code-csharp[NclNegoSyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream, leaveInnerStreamOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="F#" Value="new System.Net.Security.NegotiateStream : System.IO.Stream * bool -&gt; System.Net.Security.NegotiateStream" Usage="new System.Net.Security.NegotiateStream (innerStream, leaveInnerStreamOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream"><span data-ttu-id="3b2d2-134"><see cref="T:System.IO.Stream" /> がデータの送受信に使用する <see cref="T:System.Net.Security.NegotiateStream" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-134">A <see cref="T:System.IO.Stream" /> object used by the <see cref="T:System.Net.Security.NegotiateStream" /> for sending and receiving data.</span></span></param>
        <param name="leaveInnerStreamOpen"><span data-ttu-id="3b2d2-135">この <see langword="true" /> を閉じても、<see cref="T:System.Net.Security.NegotiateStream" /> が影響を受けないことを示す場合は <paramref name="innerStream" />。この <see langword="false" /> を閉じると、<see cref="T:System.Net.Security.NegotiateStream" /> も閉じられることを示す場合は <paramref name="innerStream" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-135"><see langword="true" /> to indicate that closing this <see cref="T:System.Net.Security.NegotiateStream" /> has no effect on <paramref name="innerStream" />; <see langword="false" /> to indicate that closing this <see cref="T:System.Net.Security.NegotiateStream" /> also closes <paramref name="innerStream" />.</span></span></param>
        <summary><span data-ttu-id="3b2d2-136">指定した <see cref="T:System.Net.Security.NegotiateStream" /> とストリームを閉じる動作を使用して、<see cref="T:System.IO.Stream" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-136">Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream" /> class using the specified <see cref="T:System.IO.Stream" /> and stream closure behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-137">`leaveStreamOpen` パラメーターに `true` を指定した場合、<xref:System.Net.Security.NegotiateStream> を閉じると `innerStream` ストリームには影響しません。不要になった `innerStream` は、明示的に閉じる必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-137">When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.NegotiateStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.</span></span>  
  
   
  
## Examples  
<span data-ttu-id="3b2d2-138">次の例は、このコンストラクターの呼び出しを示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-138">The following example demonstrates calling this constructor.</span></span> <span data-ttu-id="3b2d2-139">このコード例は、<xref:System.Net.Security.NegotiateStream> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-139">This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
[!code-cpp[NclNegoAsyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#1)]
[!code-csharp[NclNegoAsyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#1)]  
[!code-vb[NclNegoAsyncClient#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclNegoasyncClient/VB/client.vb#1)] 

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-140"><paramref name="innerStream" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-140"><paramref name="innerStream" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b2d2-141">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-141">-or-</span></span> 
 <span data-ttu-id="3b2d2-142"><paramref name="innerStream" /> と <see cref="F:System.IO.Stream.Null" /> が等価です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-142"><paramref name="innerStream" /> is equal to <see cref="F:System.IO.Stream.Null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3b2d2-143">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-143">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : unit -&gt; unit&#xA;override this.AuthenticateAsClient : unit -&gt; unit" Usage="negotiateStream.AuthenticateAsClient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3b2d2-144">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-144">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-145">認証では、クライアントの <xref:System.Net.CredentialCache.DefaultCredentials%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-145">The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="3b2d2-146">サーバーに対してサービスプリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-146">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="3b2d2-147">偽装レベルは <xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、相互認証が要求されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-147">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="3b2d2-148"><xref:System.Net.Security.NegotiateStream> クラスは、相互認証に使用される SPN を構築します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-148">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="3b2d2-149">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-149">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-150"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-150">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="3b2d2-151">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-151">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-152">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-152">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-153">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-153">The authentication failed.</span></span> <span data-ttu-id="3b2d2-154">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-154">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-155">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-155">The authentication failed.</span></span> <span data-ttu-id="3b2d2-156">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-156">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-157">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-157">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-158">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-158">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-159">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-159">-or-</span></span>
  
 <span data-ttu-id="3b2d2-160">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-160">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="3b2d2-161">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-161">You cannot use the stream to retry authentication as the client.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * string -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * string -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="targetName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-162">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-162">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="3b2d2-163">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-163">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="3b2d2-164">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-164">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="3b2d2-165">認証プロセスでは、指定したクライアントの資格情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-165">The authentication process uses the specified client credential.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-166">偽装レベルは <xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、相互認証が要求されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-166">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="3b2d2-167"><xref:System.Net.Security.NegotiateStream> クラスは、相互認証に使用される SPN を構築します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-167">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="3b2d2-168">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-168">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-169"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-169">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-170">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-170">The authentication failed.</span></span> <span data-ttu-id="3b2d2-171">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-171">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-172">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-172">The authentication failed.</span></span> <span data-ttu-id="3b2d2-173">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-173">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-174">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-174">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-175">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-175">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-176">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-176">-or-</span></span>
  
 <span data-ttu-id="3b2d2-177">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-177">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="3b2d2-178">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-178">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-179"><paramref name="targetName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-179"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, binding, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="targetName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-180">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-180">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="3b2d2-181">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-181">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="3b2d2-182">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-182">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="3b2d2-183">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-183">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="3b2d2-184">認証プロセスでは、指定したクライアントの資格情報およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-184">The authentication process uses the specified client credential and the channel binding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-185">偽装レベルは <xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、相互認証が要求されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-185">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="3b2d2-186"><xref:System.Net.Security.NegotiateStream> クラスは、相互認証に使用される SPN を構築します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-186">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="3b2d2-187">`binding` パラメーターでこのメソッドに渡される拡張保護に使用される <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> は、関連付けられている <xref:System.Net.Security.SslStream>の <xref:System.Net.Security.SslStream.TransportContext%2A> プロパティからアプリケーションによって取得されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-187">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="3b2d2-188">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-188">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-189"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-189">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-190"><paramref name="targetName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-190"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b2d2-191">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-191">-or-</span></span> 
 <span data-ttu-id="3b2d2-192"><paramref name="credential" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-192"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-193">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-193">The authentication failed.</span></span> <span data-ttu-id="3b2d2-194">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-194">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-195">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-195">The authentication failed.</span></span> <span data-ttu-id="3b2d2-196">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-196">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-197">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-197">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-198">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-198">-or-</span></span>
  
 <span data-ttu-id="3b2d2-199">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-199">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="3b2d2-200">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-200">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-201">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-201">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="3b2d2-202">拡張保護付き統合 Windows 認証</span><span class="sxs-lookup"><span data-stu-id="3b2d2-202">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="targetName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-203">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-203">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="3b2d2-204">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-204">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="3b2d2-205">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-205">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="3b2d2-206">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-206">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="3b2d2-207">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-207">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="3b2d2-208">認証プロセスでは、指定した資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-208">The authentication process uses the specified credentials and authentication options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-209">`requiredProtectionLevel` パラメーターを使用して、認証されたストリームを使用して送信されるデータのセキュリティサービスを要求します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-209">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="3b2d2-210">たとえば、データを暗号化して署名するには、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 値を指定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-210">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="3b2d2-211">認証が成功しても、要求された <xref:System.Net.Security.ProtectionLevel> が許可されているかは保証されません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-211">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="3b2d2-212"><xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを確認するには、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-212">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="3b2d2-213">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-213">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-214">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-214">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b2d2-215"><paramref name="allowedImpersonationLevel" /> は有効な値ではありません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-215"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-216"><paramref name="targetName" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-216"><paramref name="targetName" /> is null.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-217">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-217">The authentication failed.</span></span> <span data-ttu-id="3b2d2-218">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-218">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-219">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-219">The authentication failed.</span></span> <span data-ttu-id="3b2d2-220">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-220">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-221">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-221">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-222">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-222">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-223">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-223">-or-</span></span>
  
 <span data-ttu-id="3b2d2-224">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-224">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="3b2d2-225">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-225">You cannot use the stream to retry authentication as the client.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="targetName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-226">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-226">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="3b2d2-227">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-227">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="3b2d2-228">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-228">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="3b2d2-229">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-229">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="3b2d2-230">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-230">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="3b2d2-231">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-231">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="3b2d2-232">認証プロセスでは、指定した資格情報、認証オプション、およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-232">The authentication process uses the specified credential, authentication options, and channel binding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-233">`requiredProtectionLevel` パラメーターを使用して、認証されたストリームを使用して送信されるデータのセキュリティサービスを要求します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-233">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="3b2d2-234">たとえば、データを暗号化して署名するには、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 値を指定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-234">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="3b2d2-235">認証が成功しても、要求された <xref:System.Net.Security.ProtectionLevel> が許可されているかは保証されません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-235">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="3b2d2-236"><xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを確認するには、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-236">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="3b2d2-237">`binding` パラメーターでこのメソッドに渡される拡張保護に使用される <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> は、関連付けられている <xref:System.Net.Security.SslStream>の <xref:System.Net.Security.SslStream.TransportContext%2A> プロパティからアプリケーションによって取得されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-237">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="3b2d2-238">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-238">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-239">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-239">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-240"><paramref name="targetName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-240"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b2d2-241">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-241">-or-</span></span> 
 <span data-ttu-id="3b2d2-242"><paramref name="credential" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-242"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b2d2-243"><paramref name="allowedImpersonationLevel" /> は有効な値ではありません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-243"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-244">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-244">The authentication failed.</span></span> <span data-ttu-id="3b2d2-245">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-245">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-246">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-246">The authentication failed.</span></span> <span data-ttu-id="3b2d2-247">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-247">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-248">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-248">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-249">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-249">-or-</span></span>
  
 <span data-ttu-id="3b2d2-250">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-250">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="3b2d2-251">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-251">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-252">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-252">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="3b2d2-253">拡張保護付き統合 Windows 認証</span><span class="sxs-lookup"><span data-stu-id="3b2d2-253">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClientAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3b2d2-254">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-254">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : unit -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3b2d2-255">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-255">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-256">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-256">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-257">認証では、クライアントの <xref:System.Net.CredentialCache.DefaultCredentials%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-257">The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="3b2d2-258">サーバーに対してサービスプリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-258">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="3b2d2-259">偽装レベルは <xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、相互認証が要求されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-259">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="3b2d2-260"><xref:System.Net.Security.NegotiateStream> クラスは、相互認証に使用される SPN を構築します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-260">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="3b2d2-261">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-261">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-262"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-262">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="3b2d2-263">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-263">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-264">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-264">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-265">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-265">The authentication failed.</span></span> <span data-ttu-id="3b2d2-266">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-266">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-267">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-267">The authentication failed.</span></span> <span data-ttu-id="3b2d2-268">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-268">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-269">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-269">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-270">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-270">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-271">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-271">-or-</span></span>
  
 <span data-ttu-id="3b2d2-272">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-272">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="3b2d2-273">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-273">You cannot use the stream to retry authentication as the client.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * string -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * string -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="targetName" Type="System.String" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-274">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-274">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="3b2d2-275">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-275">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="3b2d2-276">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-276">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="3b2d2-277">認証プロセスでは、指定したクライアントの資格情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-277">The authentication process uses the specified client credential.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-278">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-278">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-279">偽装レベルは <xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、相互認証が要求されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-279">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="3b2d2-280"><xref:System.Net.Security.NegotiateStream> クラスは、相互認証に使用される SPN を構築します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-280">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="3b2d2-281">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-281">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-282"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-282">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-283">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-283">The authentication failed.</span></span> <span data-ttu-id="3b2d2-284">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-284">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-285">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-285">The authentication failed.</span></span> <span data-ttu-id="3b2d2-286">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-286">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-287">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-287">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-288">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-288">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-289">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-289">-or-</span></span>
  
 <span data-ttu-id="3b2d2-290">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-290">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="3b2d2-291">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-291">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-292"><paramref name="targetName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-292"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, binding, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="targetName" Type="System.String" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-293">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-293">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="3b2d2-294">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-294">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="3b2d2-295">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-295">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="3b2d2-296">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-296">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="3b2d2-297">認証プロセスでは、指定したクライアントの資格情報およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-297">The authentication process uses the specified client credential and the channel binding.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-298">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-298">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-299">偽装レベルは <xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、相互認証が要求されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-299">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="3b2d2-300"><xref:System.Net.Security.NegotiateStream> クラスは、相互認証に使用される SPN を構築します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-300">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="3b2d2-301">`binding` パラメーターでこのメソッドに渡される拡張保護に使用される <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> は、関連付けられている <xref:System.Net.Security.SslStream>の <xref:System.Net.Security.SslStream.TransportContext%2A> プロパティからアプリケーションによって取得されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-301">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="3b2d2-302">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-302">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-303"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-303">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-304"><paramref name="targetName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-304"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b2d2-305">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-305">-or-</span></span> 
 <span data-ttu-id="3b2d2-306"><paramref name="credential" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-306"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-307">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-307">The authentication failed.</span></span> <span data-ttu-id="3b2d2-308">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-308">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-309">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-309">The authentication failed.</span></span> <span data-ttu-id="3b2d2-310">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-310">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-311">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-311">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-312">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-312">-or-</span></span>
  
 <span data-ttu-id="3b2d2-313">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-313">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="3b2d2-314">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-314">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-315">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-315">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="3b2d2-316">拡張保護付き統合 Windows 認証</span><span class="sxs-lookup"><span data-stu-id="3b2d2-316">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="targetName" Type="System.String" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-317">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-317">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="3b2d2-318">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-318">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="3b2d2-319">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-319">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="3b2d2-320">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-320">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="3b2d2-321">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-321">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="3b2d2-322">認証プロセスでは、指定した資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-322">The authentication process uses the specified credentials and authentication options.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-323">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-323">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-324">`requiredProtectionLevel` パラメーターを使用して、認証されたストリームを使用して送信されるデータのセキュリティサービスを要求します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-324">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="3b2d2-325">たとえば、データを暗号化して署名するには、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 値を指定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-325">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="3b2d2-326">認証が成功しても、要求された <xref:System.Net.Security.ProtectionLevel> が許可されているかは保証されません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-326">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="3b2d2-327"><xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを確認するには、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-327">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="3b2d2-328">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-328">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-329">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-329">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b2d2-330"><paramref name="allowedImpersonationLevel" /> は有効な値ではありません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-330"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-331"><paramref name="targetName" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-331"><paramref name="targetName" /> is null.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-332">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-332">The authentication failed.</span></span> <span data-ttu-id="3b2d2-333">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-333">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-334">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-334">The authentication failed.</span></span> <span data-ttu-id="3b2d2-335">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-335">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-336">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-336">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-337">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-337">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-338">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-338">-or-</span></span>
  
 <span data-ttu-id="3b2d2-339">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-339">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="3b2d2-340">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-340">You cannot use the stream to retry authentication as the client.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="targetName" Type="System.String" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-341">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-341">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="3b2d2-342">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-342">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="3b2d2-343">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-343">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="3b2d2-344">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-344">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="3b2d2-345">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-345">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="3b2d2-346">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-346">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="3b2d2-347">認証プロセスでは、指定した資格情報、認証オプション、およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-347">The authentication process uses the specified credential, authentication options, and channel binding.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-348">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-348">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-349">`requiredProtectionLevel` パラメーターを使用して、認証されたストリームを使用して送信されるデータのセキュリティサービスを要求します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-349">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="3b2d2-350">たとえば、データを暗号化して署名するには、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 値を指定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-350">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="3b2d2-351">認証が成功しても、要求された <xref:System.Net.Security.ProtectionLevel> が許可されているかは保証されません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-351">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="3b2d2-352"><xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを確認するには、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-352">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="3b2d2-353">`binding` パラメーターでこのメソッドに渡される拡張保護に使用される <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> は、関連付けられている <xref:System.Net.Security.SslStream>の <xref:System.Net.Security.SslStream.TransportContext%2A> プロパティからアプリケーションによって取得されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-353">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="3b2d2-354">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-354">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-355">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-355">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-356"><paramref name="targetName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-356"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b2d2-357">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-357">-or-</span></span> 
 <span data-ttu-id="3b2d2-358"><paramref name="credential" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-358"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b2d2-359"><paramref name="allowedImpersonationLevel" /> は有効な値ではありません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-359"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-360">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-360">The authentication failed.</span></span> <span data-ttu-id="3b2d2-361">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-361">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-362">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-362">The authentication failed.</span></span> <span data-ttu-id="3b2d2-363">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-363">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-364">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-364">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-365">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-365">-or-</span></span>
  
 <span data-ttu-id="3b2d2-366">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-366">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="3b2d2-367">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-367">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-368">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-368">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="3b2d2-369">拡張保護付き統合 Windows 認証</span><span class="sxs-lookup"><span data-stu-id="3b2d2-369">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3b2d2-370">クライアント サーバー接続の認証のサーバー側を処理します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-370">Handles the server side of an authentication for a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-371">これらのメソッドは、認証の実行中にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-371">These methods block while the authentication is in progress.</span></span> <span data-ttu-id="3b2d2-372">認証の完了を待機している間にアプリケーションがブロックされないようにするには、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-372">To prevent the application from blocking while waiting for the authentication to complete, use the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : unit -&gt; unit&#xA;override this.AuthenticateAsServer : unit -&gt; unit" Usage="negotiateStream.AuthenticateAsServer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3b2d2-373">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-373">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-374">認証では、サーバーの <xref:System.Net.CredentialCache.DefaultCredentials%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-374">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="3b2d2-375">サーバーに対してサービスプリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-375">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="3b2d2-376">偽装レベルは <xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-376">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="3b2d2-377">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-377">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-378"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-378">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="3b2d2-379">このメソッドは、操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-379">This method blocks until the operation completes.</span></span> <span data-ttu-id="3b2d2-380">操作が完了するまでブロックされないようにするには、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-380">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="3b2d2-381">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-381">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-382">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-382">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-383">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-383">The authentication failed.</span></span> <span data-ttu-id="3b2d2-384">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-384">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-385">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-385">The authentication failed.</span></span> <span data-ttu-id="3b2d2-386">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-386">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-387">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-387">This object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-388">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-388">Windows 95 and Windows 98 are not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (policy As ExtendedProtectionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; unit&#xA;override this.AuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; unit" Usage="negotiateStream.AuthenticateAsServer policy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="3b2d2-389">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-389">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <summary><span data-ttu-id="3b2d2-390">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-390">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="3b2d2-391">認証プロセスでは、指定した拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-391">The authentication process uses the specified extended protection policy.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-392">認証では、サーバーの <xref:System.Net.CredentialCache.DefaultCredentials%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-392">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="3b2d2-393">サーバーに対してサービスプリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-393">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="3b2d2-394">偽装レベルは <xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-394">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="3b2d2-395">`policy` パラメーターが `null`の場合、拡張保護ポリシーが使用され、<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> が <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-395">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="3b2d2-396">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-396">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-397"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-397">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="3b2d2-398">このメソッドは、操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-398">This method blocks until the operation completes.</span></span> <span data-ttu-id="3b2d2-399">操作が完了するまでブロックされないようにするには、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-399">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="3b2d2-400">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-400">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-401">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-401">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b2d2-402"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> と <paramref name="policy" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-402">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-403">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-403">The authentication failed.</span></span> <span data-ttu-id="3b2d2-404">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-404">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-405">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-405">The authentication failed.</span></span> <span data-ttu-id="3b2d2-406">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-406">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-407">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-407">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-408">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-408">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="3b2d2-409">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-409">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="3b2d2-410">拡張保護付き統合 Windows 認証</span><span class="sxs-lookup"><span data-stu-id="3b2d2-410">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsServer (credential, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-411">サーバーの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-411">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the server.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="3b2d2-412">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-412">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="3b2d2-413">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-413">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="3b2d2-414">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-414">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="3b2d2-415">認証プロセスでは、指定したサーバーの資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-415">The authentication process uses the specified server credentials and authentication options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-416">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-416">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-417"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-417">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="3b2d2-418">このメソッドは、操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-418">This method blocks until the operation completes.</span></span> <span data-ttu-id="3b2d2-419">操作が完了するまでブロックされないようにするには、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-419">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="3b2d2-420">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-420">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-421">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-421">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-422"><paramref name="credential" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-422"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b2d2-423"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-423"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-424">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-424">The authentication failed.</span></span> <span data-ttu-id="3b2d2-425">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-425">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-426">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-426">The authentication failed.</span></span> <span data-ttu-id="3b2d2-427">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-427">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-428">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-428">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-429">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-429">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-430">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-430">-or-</span></span>
  
 <span data-ttu-id="3b2d2-431">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-431">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="3b2d2-432">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-432">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-433">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-433">Windows 95 and Windows 98 are not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsServer (credential, policy, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-434">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-434">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="policy"><span data-ttu-id="3b2d2-435">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-435">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="3b2d2-436">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-436">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="3b2d2-437">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-437">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="3b2d2-438">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-438">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="3b2d2-439">認証プロセスでは、指定したサーバーの資格情報、認証オプション、および拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-439">The authentication process uses the specified server credentials, authentication options, and extended protection policy.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-440">`policy` パラメーターが `null`の場合、拡張保護ポリシーが使用され、<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> が <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-440">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="3b2d2-441">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-441">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-442"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-442">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="3b2d2-443">このメソッドは、操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-443">This method blocks until the operation completes.</span></span> <span data-ttu-id="3b2d2-444">操作が完了するまでブロックされないようにするには、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-444">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="3b2d2-445">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-445">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-446">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-446">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b2d2-447"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> と <paramref name="policy" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-447">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-448"><paramref name="credential" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-448"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b2d2-449"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-449"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-450">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-450">The authentication failed.</span></span> <span data-ttu-id="3b2d2-451">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-451">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-452">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-452">The authentication failed.</span></span> <span data-ttu-id="3b2d2-453">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-453">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-454">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-454">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-455">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-455">-or-</span></span>
  
 <span data-ttu-id="3b2d2-456">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-456">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="3b2d2-457">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-457">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-458">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-458">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-459">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-459">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="3b2d2-460">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-460">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="3b2d2-461">拡張保護付き統合 Windows 認証</span><span class="sxs-lookup"><span data-stu-id="3b2d2-461">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3b2d2-462">クライアントとサーバー間の接続のサーバー側の認証を非同期操作として処理します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-462">Handles the server side of an authentication for a client-server connection as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : unit -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3b2d2-463">サーバーによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-463">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-464">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-464">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-465">認証では、サーバーの <xref:System.Net.CredentialCache.DefaultCredentials%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-465">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="3b2d2-466">サーバーに対してサービスプリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-466">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="3b2d2-467">偽装レベルは <xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-467">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="3b2d2-468">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-468">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-469"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-469">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="3b2d2-470">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-470">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-471">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-471">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-472">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-472">The authentication failed.</span></span> <span data-ttu-id="3b2d2-473">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-473">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-474">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-474">The authentication failed.</span></span> <span data-ttu-id="3b2d2-475">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-475">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-476">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-476">This object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-477">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-477">Windows 95 and Windows 98 are not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (policy As ExtendedProtectionPolicy) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync policy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="3b2d2-478">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-478">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <summary><span data-ttu-id="3b2d2-479">サーバーによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-479">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="3b2d2-480">認証プロセスでは、指定した拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-480">The authentication process uses the specified extended protection policy.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-481">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-481">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-482">認証では、サーバーの <xref:System.Net.CredentialCache.DefaultCredentials%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-482">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="3b2d2-483">サーバーに対してサービスプリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-483">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="3b2d2-484">偽装レベルは <xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-484">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="3b2d2-485">`policy` パラメーターが `null`の場合、拡張保護ポリシーが使用され、<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> が <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-485">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="3b2d2-486">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-486">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-487"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-487">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="3b2d2-488">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-488">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-489">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-489">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b2d2-490"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> と <paramref name="policy" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-490">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-491">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-491">The authentication failed.</span></span> <span data-ttu-id="3b2d2-492">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-492">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-493">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-493">The authentication failed.</span></span> <span data-ttu-id="3b2d2-494">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-494">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-495">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-495">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-496">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-496">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="3b2d2-497">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-497">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="3b2d2-498">拡張保護付き統合 Windows 認証</span><span class="sxs-lookup"><span data-stu-id="3b2d2-498">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync (credential, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-499">サーバーの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-499">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the server.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="3b2d2-500">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-500">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="3b2d2-501">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-501">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="3b2d2-502">サーバーによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-502">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="3b2d2-503">認証プロセスでは、指定したサーバーの資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-503">The authentication process uses the specified server credentials and authentication options.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-504">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-504">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-505">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-505">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-506"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-506">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="3b2d2-507">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-507">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-508">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-508">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-509"><paramref name="credential" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-509"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b2d2-510"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-510"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-511">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-511">The authentication failed.</span></span> <span data-ttu-id="3b2d2-512">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-512">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-513">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-513">The authentication failed.</span></span> <span data-ttu-id="3b2d2-514">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-514">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-515">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-515">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-516">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-516">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-517">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-517">-or-</span></span>
  
 <span data-ttu-id="3b2d2-518">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-518">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="3b2d2-519">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-519">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-520">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-520">Windows 95 and Windows 98 are not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync (credential, policy, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-521">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-521">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="policy"><span data-ttu-id="3b2d2-522">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-522">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="3b2d2-523">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-523">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="3b2d2-524">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-524">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="3b2d2-525">サーバーによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-525">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="3b2d2-526">認証プロセスでは、指定したサーバーの資格情報、認証オプション、および拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-526">The authentication process uses the specified server credentials, authentication options, and extended protection policy.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-527">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-527">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-528">`policy` パラメーターが `null`の場合、拡張保護ポリシーが使用され、<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> が <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-528">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="3b2d2-529">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-529">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-530"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-530">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="3b2d2-531">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-531">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-532">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-532">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b2d2-533"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> と <paramref name="policy" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-533">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-534"><paramref name="credential" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-534"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b2d2-535"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-535"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-536">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-536">The authentication failed.</span></span> <span data-ttu-id="3b2d2-537">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-537">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-538">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-538">The authentication failed.</span></span> <span data-ttu-id="3b2d2-539">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-539">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-540">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-540">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-541">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-541">-or-</span></span>
  
 <span data-ttu-id="3b2d2-542">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-542">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="3b2d2-543">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-543">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-544">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-544">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-545">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-545">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="3b2d2-546">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-546">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="3b2d2-547">拡張保護付き統合 Windows 認証</span><span class="sxs-lookup"><span data-stu-id="3b2d2-547">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3b2d2-548">クライアントとサーバー間の接続のクライアント側を認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-548">Begins an asynchronous operation to authenticate the client side of a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-549">認証の実行中は、このメソッドのオーバーロードはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-549">The overloads of this method do not block while authentication is in progress.</span></span> <span data-ttu-id="3b2d2-550">認証の完了を待機している間にブロックするには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> メソッドのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-550">To block while waiting for the authentication to complete, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncState" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="asyncCallback"><span data-ttu-id="3b2d2-551">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-551">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="3b2d2-552">操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-552">A user-defined object containing information about the operation.</span></span> <span data-ttu-id="3b2d2-553">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-553">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="3b2d2-554">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-554">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="3b2d2-555">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-555">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-556">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-556">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-557">認証では、クライアントの <xref:System.Net.CredentialCache.DefaultCredentials%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-557">The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="3b2d2-558">サーバーに対してサービスプリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-558">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="3b2d2-559">偽装レベルは <xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-559">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span> <span data-ttu-id="3b2d2-560"><xref:System.Net.Security.NegotiateStream> クラスは、相互認証に使用される SPN を構築します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-560">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="3b2d2-561">このメソッドは非同期であり、操作の完了時にブロックされません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-561">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="3b2d2-562">操作が完了するまでブロックするには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-562">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="3b2d2-563">非同期認証操作は、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> メソッドを呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-563">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="3b2d2-564">通常、メソッドは `asyncCallback` デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-564">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="3b2d2-565">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-565">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="3b2d2-566">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-566">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-567">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-567">In this case, you can retry the authentication with a different credential.</span></span>  
  
   
  
## Examples  
<span data-ttu-id="3b2d2-568">次の例は、このメソッドを呼び出して、クライアントの非同期認証を開始する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-568">The following example demonstrates calling this method to begin an asynchronous authentication for the client.</span></span>  
  
[!code-cpp[NclNegoAsyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#2)]
[!code-csharp[NclNegoAsyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#2)]  
[!code-vb[NclNegoAsyncClient#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclNegoasyncClient/VB/client.vb#2)] 

 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-569">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-569">The authentication failed.</span></span> <span data-ttu-id="3b2d2-570">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-570">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-571">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-571">The authentication failed.</span></span> <span data-ttu-id="3b2d2-572">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-572">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-573">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-573">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-574">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-574">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-575">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-575">-or-</span></span>
  
 <span data-ttu-id="3b2d2-576">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-576">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="3b2d2-577">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-577">You cannot use the stream to retry authentication as the client.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * string * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * string * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, targetName, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="targetName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncState" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-578">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-578">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="3b2d2-579">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-579">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="3b2d2-580">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-580">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="3b2d2-581">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-581">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="3b2d2-582">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-582">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="3b2d2-583">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-583">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="3b2d2-584">認証プロセスでは、指定した資格情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-584">The authentication process uses the specified credentials.</span></span> <span data-ttu-id="3b2d2-585">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-585">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-586">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-586">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-587">このメソッドは非同期であり、操作の完了時にブロックされません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-587">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="3b2d2-588">操作が完了するまでブロックするには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-588">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="3b2d2-589">非同期認証操作は、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> メソッドを呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-589">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="3b2d2-590">通常、メソッドは `asyncCallback` デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-590">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="3b2d2-591">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-591">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="3b2d2-592">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-592">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-593">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-593">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-594"><paramref name="credential" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-594"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b2d2-595">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-595">-or-</span></span> 
 <span data-ttu-id="3b2d2-596"><paramref name="targetName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-596"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-597">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-597">The authentication failed.</span></span> <span data-ttu-id="3b2d2-598">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-598">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-599">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-599">The authentication failed.</span></span> <span data-ttu-id="3b2d2-600">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-600">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-601">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-601">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-602">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-602">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-603">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-603">-or-</span></span>
  
 <span data-ttu-id="3b2d2-604">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-604">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="3b2d2-605">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-605">You cannot use the stream to retry authentication as the client.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, binding, targetName, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="targetName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncState" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-606">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-606">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="3b2d2-607">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-607">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="3b2d2-608">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-608">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="3b2d2-609">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-609">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="3b2d2-610">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-610">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="3b2d2-611">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-611">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="3b2d2-612">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-612">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="3b2d2-613">認証プロセスでは、指定した資格情報およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-613">The authentication process uses the specified credentials and channel binding.</span></span> <span data-ttu-id="3b2d2-614">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-614">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-615">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-615">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-616">このメソッドは非同期であり、操作の完了時にブロックされません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-616">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="3b2d2-617">操作が完了するまでブロックするには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-617">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="3b2d2-618">非同期認証操作は、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> メソッドを呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-618">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="3b2d2-619">通常、メソッドは `asyncCallback` デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-619">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="3b2d2-620">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-620">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="3b2d2-621">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-621">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-622">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-622">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-623"><paramref name="credential" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-623"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b2d2-624">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-624">-or-</span></span> 
 <span data-ttu-id="3b2d2-625"><paramref name="targetName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-625"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-626">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-626">The authentication failed.</span></span> <span data-ttu-id="3b2d2-627">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-627">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-628">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-628">The authentication failed.</span></span> <span data-ttu-id="3b2d2-629">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-629">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-630">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-630">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-631">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-631">-or-</span></span>
  
 <span data-ttu-id="3b2d2-632">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-632">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="3b2d2-633">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-633">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-634">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-634">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="3b2d2-635">拡張保護付き統合 Windows 認証</span><span class="sxs-lookup"><span data-stu-id="3b2d2-635">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="targetName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncState" Type="System.Object" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-636">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-636">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="3b2d2-637">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-637">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="3b2d2-638">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-638">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="3b2d2-639">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-639">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="3b2d2-640">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-640">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="3b2d2-641">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-641">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="3b2d2-642">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-642">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="3b2d2-643">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-643">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="3b2d2-644">認証プロセスでは、指定した資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-644">The authentication process uses the specified credentials and authentication options.</span></span> <span data-ttu-id="3b2d2-645">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-645">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-646">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-646">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-647">`requiredProtectionLevel` パラメーターを使用して、認証されたストリームを使用して送信されるデータのセキュリティサービスを要求します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-647">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="3b2d2-648">たとえば、データを暗号化して署名するには、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 値を指定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-648">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="3b2d2-649">認証が成功しても、要求された <xref:System.Net.Security.ProtectionLevel> が許可されているかは保証されません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-649">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="3b2d2-650"><xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを確認するには、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-650">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="3b2d2-651">このメソッドは非同期であり、操作の完了時にブロックされません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-651">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="3b2d2-652">操作が完了するまでブロックするには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-652">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="3b2d2-653">非同期認証操作は、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> メソッドを呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-653">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="3b2d2-654">通常、メソッドは `asyncCallback` デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-654">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="3b2d2-655">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-655">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="3b2d2-656">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-656">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-657">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-657">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-658"><paramref name="credential" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-658"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b2d2-659">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-659">-or-</span></span> 
 <span data-ttu-id="3b2d2-660"><paramref name="targetName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-660"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-661">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-661">The authentication failed.</span></span> <span data-ttu-id="3b2d2-662">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-662">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-663">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-663">The authentication failed.</span></span> <span data-ttu-id="3b2d2-664">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-664">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-665">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-665">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-666">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-666">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-667">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-667">-or-</span></span>
  
 <span data-ttu-id="3b2d2-668">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-668">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="3b2d2-669">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-669">You cannot use the stream to retry authentication as the client.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="targetName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncState" Type="System.Object" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-670">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-670">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="3b2d2-671">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-671">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="3b2d2-672">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-672">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="3b2d2-673">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-673">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="3b2d2-674">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-674">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="3b2d2-675">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-675">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="3b2d2-676">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-676">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="3b2d2-677">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-677">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="3b2d2-678">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-678">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="3b2d2-679">認証プロセスでは、指定した資格情報、認証オプション、およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-679">The authentication process uses the specified credentials, authentication options, and channel binding.</span></span> <span data-ttu-id="3b2d2-680">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-680">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-681">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-681">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-682">`requiredProtectionLevel` パラメーターを使用して、認証されたストリームを使用して送信されるデータのセキュリティサービスを要求します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-682">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="3b2d2-683">たとえば、データを暗号化して署名するには、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 値を指定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-683">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="3b2d2-684">認証が成功しても、要求された <xref:System.Net.Security.ProtectionLevel> が許可されているかは保証されません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-684">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="3b2d2-685"><xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを確認するには、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-685">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="3b2d2-686">このメソッドは非同期であり、操作の完了時にブロックされません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-686">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="3b2d2-687">操作が完了するまでブロックするには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-687">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="3b2d2-688">非同期認証操作は、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> メソッドを呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-688">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="3b2d2-689">通常、メソッドは `asyncCallback` デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-689">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="3b2d2-690">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-690">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="3b2d2-691">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-691">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-692">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-692">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-693"><paramref name="credential" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-693"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b2d2-694">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-694">-or-</span></span> 
 <span data-ttu-id="3b2d2-695"><paramref name="targetName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-695"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-696">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-696">The authentication failed.</span></span> <span data-ttu-id="3b2d2-697">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-697">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-698">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-698">The authentication failed.</span></span> <span data-ttu-id="3b2d2-699">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-699">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-700">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-700">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-701">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-701">-or-</span></span>
  
 <span data-ttu-id="3b2d2-702">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-702">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="3b2d2-703">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-703">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-704">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-704">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="3b2d2-705">拡張保護付き統合 Windows 認証</span><span class="sxs-lookup"><span data-stu-id="3b2d2-705">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3b2d2-706">クライアントとサーバー間の接続のサーバー側の認証を処理する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-706">Begins an asynchronous operation to handle the server side of authenticating a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-707">認証の実行中は、このメソッドのオーバーロードはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-707">The overloads of this method do not block while the authentication is in progress.</span></span> <span data-ttu-id="3b2d2-708">認証の完了を待機している間にブロックするには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-708">To block while waiting for the authentication to complete, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncState" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="asyncCallback"><span data-ttu-id="3b2d2-709">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-709">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="3b2d2-710">操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-710">A user-defined object containing information about the operation.</span></span> <span data-ttu-id="3b2d2-711">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-711">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="3b2d2-712">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-712">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="3b2d2-713">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-713">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-714">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-714">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-715">認証では、サーバーの <xref:System.Net.CredentialCache.DefaultCredentials%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-715">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="3b2d2-716">サーバーに対してサービスプリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-716">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="3b2d2-717">偽装レベルが <xref:System.Security.Principal.TokenImpersonationLevel.Identification>の場合、セキュリティレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-717">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="3b2d2-718">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-718">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-719"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-719">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="3b2d2-720">操作が完了するまでブロックするには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-720">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="3b2d2-721">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-721">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-722">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-722">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-723">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-723">The authentication failed.</span></span> <span data-ttu-id="3b2d2-724">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-724">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-725">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-725">The authentication failed.</span></span> <span data-ttu-id="3b2d2-726">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-726">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-727">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-727">This object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-728">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-728">Windows 95 and Windows 98 are not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (policy, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncState" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="3b2d2-729">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-729">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="3b2d2-730">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-730">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="3b2d2-731">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-731">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="3b2d2-732">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-732">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="3b2d2-733">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-733">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="3b2d2-734">認証プロセスでは、指定した拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-734">The authentication process uses the specified extended protection policy.</span></span> <span data-ttu-id="3b2d2-735">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-735">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-736">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-736">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-737">認証では、サーバーの <xref:System.Net.CredentialCache.DefaultCredentials%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-737">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="3b2d2-738">サーバーに対してサービスプリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-738">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="3b2d2-739">偽装レベルが <xref:System.Security.Principal.TokenImpersonationLevel.Identification>の場合、セキュリティレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-739">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="3b2d2-740">`policy` パラメーターが `null`の場合、拡張保護ポリシーが使用され、<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> が <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-740">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="3b2d2-741">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-741">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-742"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-742">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="3b2d2-743">操作が完了するまでブロックするには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-743">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="3b2d2-744">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-744">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-745">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-745">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b2d2-746"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> と <paramref name="policy" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-746">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-747">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-747">The authentication failed.</span></span> <span data-ttu-id="3b2d2-748">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-748">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-749">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-749">The authentication failed.</span></span> <span data-ttu-id="3b2d2-750">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-750">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-751">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-751">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-752">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-752">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="3b2d2-753">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-753">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="3b2d2-754">拡張保護付き統合 Windows 認証</span><span class="sxs-lookup"><span data-stu-id="3b2d2-754">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (credential, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncState" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-755">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-755">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="3b2d2-756">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-756">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="3b2d2-757">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-757">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="3b2d2-758">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-758">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="3b2d2-759">操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-759">A user-defined object containing information about the operation.</span></span> <span data-ttu-id="3b2d2-760">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-760">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="3b2d2-761">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-761">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="3b2d2-762">認証プロセスでは、指定したサーバーの資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-762">The authentication process uses the specified server credentials and authentication options.</span></span> <span data-ttu-id="3b2d2-763">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-763">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-764">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-764">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-765">`requiredProtectionLevel` パラメーターを使用して、認証されたストリームを使用して送信されるデータのセキュリティサービスを要求します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-765">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="3b2d2-766">たとえば、データを暗号化して署名するには、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 値を指定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-766">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="3b2d2-767">認証が成功しても、要求された <xref:System.Net.Security.ProtectionLevel> が許可されているとは限りません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-767">Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="3b2d2-768"><xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを確認するには、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-768">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="3b2d2-769">このメソッドは非同期であり、操作の完了時にブロックされません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-769">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="3b2d2-770">操作が完了するまでブロックするには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-770">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="3b2d2-771">非同期認証操作は、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> メソッドを呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-771">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method.</span></span> <span data-ttu-id="3b2d2-772">通常、メソッドは `asyncCallback` デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-772">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="3b2d2-773">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-773">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="3b2d2-774">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-774">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-775">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-775">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-776"><paramref name="credential" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-776"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b2d2-777"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-777"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-778">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-778">The authentication failed.</span></span> <span data-ttu-id="3b2d2-779">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-779">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-780">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-780">The authentication failed.</span></span> <span data-ttu-id="3b2d2-781">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-781">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-782">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-782">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-783">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-783">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-784">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-784">-or-</span></span>
  
 <span data-ttu-id="3b2d2-785">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-785">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="3b2d2-786">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-786">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-787">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-787">Windows 95 and Windows 98 are not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (credential, policy, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncState" Type="System.Object" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="3b2d2-788">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-788">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="policy"><span data-ttu-id="3b2d2-789">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-789">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="3b2d2-790">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-790">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="3b2d2-791">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-791">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="3b2d2-792">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-792">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="3b2d2-793">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-793">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="3b2d2-794">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-794">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="3b2d2-795">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-795">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="3b2d2-796">認証プロセスでは、指定したサーバーの資格情報、認証オプション、および拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-796">The authentication process uses the specified server credentials, authentication options, and extended protection policy.</span></span> <span data-ttu-id="3b2d2-797">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-797">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-798">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-798">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-799">`requiredProtectionLevel` パラメーターを使用して、認証されたストリームを使用して送信されるデータのセキュリティサービスを要求します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-799">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="3b2d2-800">たとえば、データを暗号化して署名するには、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 値を指定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-800">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="3b2d2-801">認証が成功しても、要求された <xref:System.Net.Security.ProtectionLevel> が許可されているとは限りません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-801">Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="3b2d2-802"><xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを確認するには、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-802">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="3b2d2-803">`policy` パラメーターが `null`の場合、拡張保護ポリシーが使用され、<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> が <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-803">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="3b2d2-804">このメソッドは非同期であり、操作の完了時にブロックされません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-804">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="3b2d2-805">操作が完了するまでブロックするには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-805">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="3b2d2-806">非同期認証操作は、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> メソッドを呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-806">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method.</span></span> <span data-ttu-id="3b2d2-807">通常、メソッドは `asyncCallback` デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-807">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="3b2d2-808">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-808">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="3b2d2-809">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-809">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-810">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-810">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b2d2-811"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> と <paramref name="policy" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-811">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-812"><paramref name="credential" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-812"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b2d2-813"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-813"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-814">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-814">The authentication failed.</span></span> <span data-ttu-id="3b2d2-815">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-815">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-816">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-816">The authentication failed.</span></span> <span data-ttu-id="3b2d2-817">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-817">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-818">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-818">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="3b2d2-819">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-819">-or-</span></span>
  
 <span data-ttu-id="3b2d2-820">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-820">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="3b2d2-821">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-821">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-822">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-822">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-823">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-823">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="3b2d2-824">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-824">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="3b2d2-825">拡張保護付き統合 Windows 認証</span><span class="sxs-lookup"><span data-stu-id="3b2d2-825">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="override this.BeginRead : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginRead (buffer, offset, count, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncState" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="3b2d2-826">ストリームから読み取ったバイトを受け取る <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-826">A <see cref="T:System.Byte" /> array that receives the bytes read from the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="3b2d2-827">このストリームから読み取ったデータの格納を開始する位置を示す、<paramref name="buffer" /> 内のインデックス番号が 0 から始まる位置。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-827">The zero-based location in <paramref name="buffer" /> at which to begin storing the data read from this stream.</span></span></param>
        <param name="count"><span data-ttu-id="3b2d2-828">ストリームから読み取る最大バイト数。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-828">The maximum number of bytes to read from the stream.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="3b2d2-829">読み取り操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-829">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the read operation is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="3b2d2-830">読み取り操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-830">A user-defined object containing information about the read operation.</span></span> <span data-ttu-id="3b2d2-831">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-831">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="3b2d2-832">ストリームからデータを読み取り、指定した配列に格納する非同期読み取り操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-832">Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-833">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-833">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-834">暗号化、署名、または暗号化と署名が有効になっている場合、読み取り操作は、基になるストリームからデータを読み取り、データの整合性をチェックし、復号化します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-834">If encryption, signing, or encryption and signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and decrypts it.</span></span> <span data-ttu-id="3b2d2-835">データの暗号化や署名などのセキュリティサービスが使用されていない場合、このメソッドは、基になるストリームで非同期の読み取り操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-835">If no security services such as data encryption or signing are in use, this method starts an asynchronous read operation on the underlying stream.</span></span>  
  
 <span data-ttu-id="3b2d2-836">このメソッドは非同期であり、操作の完了時にブロックされません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-836">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="3b2d2-837">操作が完了するまでブロックするには、<xref:System.Net.Security.NegotiateStream.Read%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-837">To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.</span></span>  
  
 <span data-ttu-id="3b2d2-838">非同期の読み取り操作は、<xref:System.Net.Security.NegotiateStream.EndRead%2A> メソッドを呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-838">The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndRead%2A> method.</span></span> <span data-ttu-id="3b2d2-839">通常、メソッドは `asyncCallback` デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-839">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="3b2d2-840">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-840">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="3b2d2-841"><xref:System.Net.Security.NegotiateStream> クラスは、複数の同時読み取り操作をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-841">The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous read operations.</span></span> <span data-ttu-id="3b2d2-842">同じストリームで別の読み取り操作が既に実行されているときに読み取り操作を開始しようとすると、<xref:System.NotSupportedException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-842">If you attempt to start a read operation while another read operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.</span></span>  
  
 <span data-ttu-id="3b2d2-843">が正常に認証されるまで、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-843">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="3b2d2-844">認証するには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドのいずれかを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-844">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-845">次のコード例は、非同期の読み取り操作を開始する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-845">The following code example demonstrates starting an asynchronous read operation.</span></span> <span data-ttu-id="3b2d2-846">このコード例は、<xref:System.Net.Security.NegotiateStream> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-846">This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#1)]
 [!code-csharp[NclNegoAsyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-847"><paramref name="buffer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-847"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b2d2-848"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-848"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="3b2d2-849">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-849">-or-</span></span> 
 <span data-ttu-id="3b2d2-850"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-850"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="3b2d2-851">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-851">-or-</span></span> 
 <span data-ttu-id="3b2d2-852"><paramref name="offset" /> に <paramref name="count" /> を加算した値が、<paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-852"><paramref name="offset" /> plus <paramref name="count" /> is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="3b2d2-853">読み取り操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-853">The read operation failed.</span></span>  
  
<span data-ttu-id="3b2d2-854">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-854">-or-</span></span>
  
 <span data-ttu-id="3b2d2-855">暗号化が使用されていますが、データを復号化できませんでした。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-855">Encryption is in use, but the data could not be decrypted.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-856">既に実行中の読み取り操作が存在します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-856">There is already a read operation in progress.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-857">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-857">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-858">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-858">Authentication has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="override this.BeginWrite : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginWrite (buffer, offset, count, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="asyncState" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="3b2d2-859">ストリームに書き込むバイトを提供する <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-859">A <see cref="T:System.Byte" /> array that supplies the bytes to be written to the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="3b2d2-860">ストリームに書き込むバイトの読み取りを開始する位置を示す、<paramref name="buffer" /> 内のインデックス番号が 0 から始まる位置。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-860">The zero-based location in <paramref name="buffer" /> at which to begin reading bytes to be written to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="3b2d2-861"><see cref="T:System.Int32" /> から読み取るバイト数を指定する <paramref name="buffer" /> 値。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-861">An <see cref="T:System.Int32" /> value that specifies the number of bytes to read from <paramref name="buffer" />.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="3b2d2-862">書き込み操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-862">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the write operation is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="3b2d2-863">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-863">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="3b2d2-864">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-864">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="3b2d2-865">指定したバッファーからストリームに <see cref="T:System.Byte" /> を書き込む非同期書き込み操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-865">Begins an asynchronous write operation that writes <see cref="T:System.Byte" />s from the specified buffer to the stream.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-866">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-866">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-867">暗号化、署名、または暗号化と署名が有効になっている場合、このメソッドは、バッファーからデータを読み取り、暗号化、署名、または暗号化と署名を行い、基になるストリームを使用して送信します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-867">If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream.</span></span> <span data-ttu-id="3b2d2-868">データの暗号化や署名などのセキュリティサービスが使用されていない場合、このメソッドは、基になるストリームに対して非同期の書き込み操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-868">If no security services such as data encryption or signing are in use, this method starts an asynchronous write operation on the underlying stream.</span></span>  
  
 <span data-ttu-id="3b2d2-869">このメソッドは非同期であり、操作の完了時にブロックされません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-869">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="3b2d2-870">操作が完了するまでブロックするには、<xref:System.Net.Security.NegotiateStream.Read%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-870">To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.</span></span>  
  
 <span data-ttu-id="3b2d2-871">非同期の読み取り操作は、<xref:System.Net.Security.NegotiateStream.EndWrite%2A> メソッドを呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-871">The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndWrite%2A> method.</span></span> <span data-ttu-id="3b2d2-872">通常、メソッドは `asyncCallback` デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-872">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="3b2d2-873">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-873">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="3b2d2-874"><xref:System.Net.Security.NegotiateStream> クラスは、複数の同時書き込み操作をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-874">The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations.</span></span> <span data-ttu-id="3b2d2-875">同じストリームで別の書き込み操作が既に実行されているときに書き込み操作を開始しようとすると、<xref:System.NotSupportedException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-875">If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.</span></span>  
  
 <span data-ttu-id="3b2d2-876">が正常に認証されるまで、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-876">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="3b2d2-877">認証するには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドのいずれかを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-877">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
<span data-ttu-id="3b2d2-878">非同期の書き込み操作を開始する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-878">The following example demonstrates beginning an asynchronous write operation.</span></span>  
  
[!code-cpp[NclNegoAsyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#3)]
[!code-csharp[NclNegoAsyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#3)]  
[!code-vb[NclNegoAsyncClient#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclNegoasyncClient/VB/client.vb#3)] 

<span data-ttu-id="3b2d2-879">操作が完了すると、次のメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-879">The following method is called when the operation completes.</span></span>  
  
[!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
[!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
[!code-vb[NclNegoAsyncClient#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclNegoasyncClient/VB/client.vb#4)] 

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-880"><paramref name="buffer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-880"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b2d2-881">[https://login.microsoftonline.com/consumers/](<paramref name="offset is less than 0" />)</span><span class="sxs-lookup"><span data-stu-id="3b2d2-881"><paramref name="offset is less than 0" />.</span></span>  
  
<span data-ttu-id="3b2d2-882">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-882">-or-</span></span> 
 <span data-ttu-id="3b2d2-883"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-883"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="3b2d2-884">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-884">-or-</span></span> 
 <span data-ttu-id="3b2d2-885"><paramref name="offset" /> に count を加算した値が、<paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-885"><paramref name="offset" /> plus count is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="3b2d2-886">書き込み操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-886">The write operation failed.</span></span>  
  
<span data-ttu-id="3b2d2-887">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-887">-or-</span></span>
  
 <span data-ttu-id="3b2d2-888">暗号化が使用されていますが、データを暗号化できませんでした。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-888">Encryption is in use, but the data could not be encrypted.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-889">既に実行中の書き込み操作が存在します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-889">There is already a write operation in progress.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-890">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-890">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-891">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-891">Authentication has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Net.Security.NegotiateStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b2d2-892">基になるストリームが読み取り可能かどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-892">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream is readable.</span></span></summary>
        <value><span data-ttu-id="3b2d2-893">認証が行われており、基になるストリームが読み取り可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-893"><see langword="true" /> if authentication has occurred and the underlying stream is readable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-894">認証が成功した場合、このプロパティは、基になるストリームの <xref:System.IO.Stream.CanRead%2A> プロパティを呼び出すことによって返される値を返します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-894">If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanRead%2A> property on the underlying stream.</span></span> <span data-ttu-id="3b2d2-895">基になるストリームは、<xref:System.Net.Security.NegotiateStream> クラスのインスタンスを作成するときに指定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-895">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-896">次のコード例は、このプロパティの値を表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-896">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Net.Security.NegotiateStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b2d2-897">基になるストリームがシークできるかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-897">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream is seekable.</span></span></summary>
        <value><span data-ttu-id="3b2d2-898">このプロパティは、常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-898">This property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-899"><xref:System.Net.Security.NegotiateStream> オブジェクトまたはその基になるストリームの位置を設定しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-899">You should not attempt to set the position of the <xref:System.Net.Security.NegotiateStream> object or its underlying stream.</span></span> <span data-ttu-id="3b2d2-900">基になるストリームは、<xref:System.Net.Security.NegotiateStream> クラスのインスタンスを作成するときに指定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-900">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-901">次のコード例は、このプロパティの値を表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-901">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Security.NegotiateStream.Position" />
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanTimeout : bool" Usage="System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b2d2-902">基になるストリームがタイムアウトをサポートしているかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-902">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream supports time-outs.</span></span></summary>
        <value><span data-ttu-id="3b2d2-903">基になるストリームがタイムアウトをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-903"><see langword="true" /> if the underlying stream supports time-outs; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-904">このプロパティは、基になるストリームの <xref:System.IO.Stream.CanTimeout%2A> プロパティを呼び出すことによって返される値を返します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-904">This property returns the value returned by invoking the <xref:System.IO.Stream.CanTimeout%2A> property on the underlying stream.</span></span> <span data-ttu-id="3b2d2-905">基になるストリームは、<xref:System.Net.Security.NegotiateStream> クラスのインスタンスを作成するときに指定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-905">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-906">次のコード例は、このプロパティの値を表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-906">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Net.Security.NegotiateStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b2d2-907">基になるストリームが書き込み可能かどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-907">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream is writable.</span></span></summary>
        <value><span data-ttu-id="3b2d2-908">認証が行われており、基になるストリームが書き込み可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-908"><see langword="true" /> if authentication has occurred and the underlying stream is writable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-909">認証が成功した場合、このプロパティは、基になるストリームの <xref:System.IO.Stream.CanWrite%2A> プロパティを呼び出すことによって返される値を返します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-909">If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanWrite%2A> property on the underlying stream.</span></span> <span data-ttu-id="3b2d2-910">基になるストリームは、<xref:System.Net.Security.NegotiateStream> クラスのインスタンスを作成するときに指定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-910">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-911">次のコード例は、このプロパティの値を表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-911">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="negotiateStream.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="3b2d2-912">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-912"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="3b2d2-913"><see cref="T:System.Net.Security.NegotiateStream" /> で使用されたアンマネージド リソースを解放し、必要に応じてマネージド リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-913">Releases the unmanaged resources used by the <see cref="T:System.Net.Security.NegotiateStream" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-914">このメソッドは、パブリックな `Dispose()` メソッドと <xref:System.Object.Finalize%2A> メソッドによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-914">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="3b2d2-915">`Dispose()` は、`disposing` パラメーターを `true`に設定して、protected `Dispose(Boolean)` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-915">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="3b2d2-916"><xref:System.Object.Finalize%2A> は `disposing` を `false`に設定して `Dispose` を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-916"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="3b2d2-917">`disposing` パラメーターが true の場合、このメソッドは、この <xref:System.Net.Security.NegotiateStream> が参照するすべてのマネージオブジェクトによって保持されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-917">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.NegotiateStream> references.</span></span> <span data-ttu-id="3b2d2-918">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-918">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="3b2d2-919">
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-919">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="3b2d2-920">をオーバーライドする場合は <see langword="Dispose(Boolean)" /> 以前に <see langword="Dispose" />を呼び出したときに破棄されたオブジェクトを参照しないように注意してください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-920">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="3b2d2-921"><see langword="Dispose(Boolean)" />を実装する方法の詳細については、「 [Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-921">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="3b2d2-922"><see langword="Dispose" /> と <see cref="M:System.Object.Finalize" />の詳細については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」と「 [Finalize メソッドのオーバーライド](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-922">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="negotiateStream.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3b2d2-923"><see cref="T:System.Net.Security.NegotiateStream" /> によって使用されているアンマネージドまたはマネージド リソースを非同期に解放します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-923">Asynchronously releases the unmanaged and managed resources used by the <see cref="T:System.Net.Security.NegotiateStream" />.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-924">非同期の破棄操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-924">A task that represents the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-925">このメソッドを使用すると、メインスレッドをブロックせずに、リソースを集中的に使用する dispose 操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-925">This method enables you to perform a resource-intensive dispose operation without blocking the main thread.</span></span> 

 <span data-ttu-id="3b2d2-926">このメソッドは、<xref:System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen> が `false`場合にも内部ストリームを破棄します。それ以外の場合は、内部ストリームがフラッシュされます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-926">This method also disposes the inner stream when <xref:System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen> is `false`; otherwise, the inner stream is just flushed.</span></span>
 
 <span data-ttu-id="3b2d2-927">`DisposeAsync` を呼び出すと、<xref:System.Net.Security.NegotiateStream> によって使用されるリソースを他の目的で再割り当てできます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-927">Calling `DisposeAsync` allows the resources used by the <xref:System.Net.Security.NegotiateStream> to be reallocated for other purposes.</span></span> <span data-ttu-id="3b2d2-928">詳細については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-928">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsClient (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsClient(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndAuthenticateAsClient : IAsyncResult -&gt; unit&#xA;override this.EndAuthenticateAsClient : IAsyncResult -&gt; unit" Usage="negotiateStream.EndAuthenticateAsClient asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="3b2d2-929"><see cref="T:System.IAsyncResult" /> の呼び出しによって返される <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-929">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</span></span></param>
        <summary><span data-ttu-id="3b2d2-930"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> の呼び出しで開始した保留中の非同期のクライアント認証操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-930">Ends a pending asynchronous client authentication operation that was started with a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-931">操作が完了していない場合、このメソッドは、処理が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-931">If the operation has not completed, this method blocks until it does.</span></span> <span data-ttu-id="3b2d2-932">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-932">When the authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-933"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-933">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="3b2d2-934">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-934">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-935">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-935">In this case, you can retry the authentication with a different credential.</span></span>  
  
 <span data-ttu-id="3b2d2-936">この操作を同期的に実行するには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> メソッドのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-936">To perform this operation synchronously, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-937"><paramref name="asyncResult" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-937"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b2d2-938"><paramref name="asyncResult" /> への呼び出しで <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> が作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-938"><paramref name="asyncResult" /> was not created by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-939">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-939">The authentication failed.</span></span> <span data-ttu-id="3b2d2-940">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-940">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-941">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-941">The authentication failed.</span></span> <span data-ttu-id="3b2d2-942">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-942">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-943">完了する保留中のクライアント認証がありません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-943">There is no pending client authentication to complete.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsServer(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsServer (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsServer(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndAuthenticateAsServer : IAsyncResult -&gt; unit&#xA;override this.EndAuthenticateAsServer : IAsyncResult -&gt; unit" Usage="negotiateStream.EndAuthenticateAsServer asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="3b2d2-944"><see cref="T:System.IAsyncResult" /> の呼び出しによって返される <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-944">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</span></span></param>
        <summary><span data-ttu-id="3b2d2-945"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> の呼び出しで開始した保留中の非同期のクライアント認証操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-945">Ends a pending asynchronous client authentication operation that was started with a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-946">操作が完了していない場合、このメソッドは、処理が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-946">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="3b2d2-947">認証が成功したら、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> のプロパティを確認して、<xref:System.Net.Security.NegotiateStream>によって使用されているセキュリティサービスを特定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-947">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="3b2d2-948"><xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを調べて、相互認証が行われたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-948">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="3b2d2-949">認証に失敗すると、<xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-949">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="3b2d2-950">この場合は、別の資格情報で認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-950">In this case, you can retry the authentication with a different credential.</span></span>  
  
 <span data-ttu-id="3b2d2-951">この操作を同期的に実行するには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-951">To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-952"><paramref name="asyncResult" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-952"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b2d2-953"><paramref name="asyncResult" /> への呼び出しで <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> が作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-953"><paramref name="asyncResult" /> was not created by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="3b2d2-954">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-954">The authentication failed.</span></span> <span data-ttu-id="3b2d2-955">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-955">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="3b2d2-956">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-956">The authentication failed.</span></span> <span data-ttu-id="3b2d2-957">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-957">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-958">完了する保留中の認証がありません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-958">There is no pending authentication to complete.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndRead : IAsyncResult -&gt; int" Usage="negotiateStream.EndRead asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="3b2d2-959"><see cref="T:System.IAsyncResult" /> の呼び出しによって返される <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-959">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></span></span></param>
        <summary><span data-ttu-id="3b2d2-960"><see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> の呼び出しで開始された、非同期の読み取り操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-960">Ends an asynchronous read operation that was started with a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-961">基になるストリームから読み取るバイト数を指定する <see cref="T:System.Int32" /> 値。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-961">A <see cref="T:System.Int32" /> value that specifies the number of bytes read from the underlying stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-962">操作が完了していない場合、このメソッドは、処理が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-962">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="3b2d2-963">この操作を同期的に実行するには、<xref:System.Net.Security.NegotiateStream.Read%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-963">To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.</span></span>  
  
 <span data-ttu-id="3b2d2-964">が正常に認証されるまで、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-964">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="3b2d2-965">認証するには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドのいずれかを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-965">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-966">次のコード例は、非同期の読み取り操作を終了する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-966">The following code example demonstrates ending an asynchronous read operation.</span></span> <span data-ttu-id="3b2d2-967">操作の開始方法を示す例については、「<xref:System.Net.Security.NegotiateStream.BeginRead%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-967">For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#3)]
 [!code-csharp[NclNegoAsyncServer#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-968"><paramref name="asyncResult" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-968"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b2d2-969"><see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> の呼び出しで asyncResult が作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-969">The asyncResult was not created by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-970">完了する保留中の読み取り操作がありません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-970">There is no pending read operation to complete.</span></span>

<span data-ttu-id="3b2d2-971">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-971">-or-</span></span>

<span data-ttu-id="3b2d2-972">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-972">Authentication has not occurred.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="3b2d2-973">読み取り操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-973">The read operation failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndWrite : IAsyncResult -&gt; unit" Usage="negotiateStream.EndWrite asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="3b2d2-974"><see cref="T:System.IAsyncResult" /> の呼び出しによって返される <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-974">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></span></span></param>
        <summary><span data-ttu-id="3b2d2-975"><see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> の呼び出しで開始された、非同期の書き込み操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-975">Ends an asynchronous write operation that was started with a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-976">操作が完了していない場合、このメソッドは、処理が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-976">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="3b2d2-977">が正常に認証されるまで、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-977">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="3b2d2-978">認証するには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドのいずれかを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-978">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
 <span data-ttu-id="3b2d2-979">この操作を同期的に実行するには、<xref:System.Net.Security.NegotiateStream.Write%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-979">To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.</span></span>  
  
   
  
## Examples  
<span data-ttu-id="3b2d2-980">非同期の書き込み操作を完了するために呼び出されるメソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-980">The following example demonstrates a method that is called to complete the asynchronous write operation.</span></span> <span data-ttu-id="3b2d2-981">操作の開始方法を示す例については、「<xref:System.Net.Security.NegotiateStream.BeginWrite%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-981">For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.</span></span>  
  
[!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
[!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
[!code-vb[NclNegoAsyncClient#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclNegoasyncClient/VB/client.vb#4)] 

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-982"><paramref name="asyncResult" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-982"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b2d2-983"><see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> の呼び出しで asyncResult が作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-983">The asyncResult was not created by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-984">完了する保留中の書き込み操作がありません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-984">There is no pending write operation to complete.</span></span>

<span data-ttu-id="3b2d2-985">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-985">-or-</span></span>

<span data-ttu-id="3b2d2-986">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-986">Authentication has not occurred.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="3b2d2-987">書き込み操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-987">The write operation failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="negotiateStream.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3b2d2-988">バッファーに格納されたデータが基になるデバイスに書き込まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-988">Causes any buffered data to be written to the underlying device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-989">このメソッドは、基になるストリームで <xref:System.IO.Stream.Flush%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-989">This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-990">ストリームをフラッシュするコード例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-990">The following code example demonstrates flushing the stream.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); };" />
      <MemberSignature Language="F#" Value="member this.ImpersonationLevel : System.Security.Principal.TokenImpersonationLevel" Usage="System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b2d2-991">サーバーでクライアントの資格情報を使用する方法を示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-991">Gets a value that indicates how the server can use the client's credentials.</span></span></summary>
        <value><span data-ttu-id="3b2d2-992"><see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-992">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-993">このメソッドを呼び出す前に、を正常に認証する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-993">You must successfully authenticate before calling this method.</span></span> <span data-ttu-id="3b2d2-994">クライアントは、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> または <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> のいずれかのメソッドを呼び出すことによって認証を要求するときに、偽装レベルを指定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-994">Clients specify the impersonation level when they request authentication by calling one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods.</span></span> <span data-ttu-id="3b2d2-995"><xref:System.Security.Principal.TokenImpersonationLevel> を指定せずに認証する場合は、<xref:System.Security.Principal.TokenImpersonationLevel.Identification> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-995">If you authenticate without specifying a <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-996">次のコード例は、このプロパティの値を表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-996">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-997">認証に失敗したか、認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-997">Authentication failed or has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAuthenticated : bool" Usage="System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b2d2-998">認証が成功したかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-998">Gets a <see cref="T:System.Boolean" /> value that indicates whether authentication was successful.</span></span></summary>
        <value><span data-ttu-id="3b2d2-999">認証が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-999"><see langword="true" /> if successful authentication occurred; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-1000">クライアントは、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> または <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> メソッドを呼び出すことによって認証を行います。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1000">Clients authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods.</span></span> <span data-ttu-id="3b2d2-1001">サーバーは、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> または <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドを呼び出すことによって認証されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1001">Servers authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-1002">次のコード例は、このプロパティの値を表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1002">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public override bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEncrypted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEncrypted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEncrypted : bool" Usage="System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b2d2-1003">この <see cref="T:System.Boolean" /> がデータの暗号化を使用するかどうかを示す <see cref="T:System.Net.Security.NegotiateStream" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1003">Gets a <see cref="T:System.Boolean" /> value that indicates whether this <see cref="T:System.Net.Security.NegotiateStream" /> uses data encryption.</span></span></summary>
        <value><span data-ttu-id="3b2d2-1004">ネットワーク上で送信する前にデータを暗号化し、データがリモート エンドポイントに到達したときに復号化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1004"><see langword="true" /> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-1005">暗号化は、データのプライバシーを保護するのに役立ちます。つまり、データの転送中に第三者が解読できないようにするのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1005">Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit it cannot be deciphered by third parties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-1006">次のコード例は、このプロパティの値を表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1006">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Security.ProtectionLevel" />
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMutuallyAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMutuallyAuthenticated : bool" Usage="System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b2d2-1007">サーバーとクライアントの両方が認証されているかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1007">Gets a <see cref="T:System.Boolean" /> value that indicates whether both the server and the client have been authenticated.</span></span></summary>
        <value><span data-ttu-id="3b2d2-1008">サーバーが認証されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1008"><see langword="true" /> if the server has been authenticated; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-1009">相互認証は、クライアントが認証用の資格情報を提供するときに、クライアントによって指定されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1009">Mutual authentication is specified by the client when the client wants the server to provide credentials for authentication.</span></span> <span data-ttu-id="3b2d2-1010">既定では、クライアントは相互認証を要求します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1010">By default, clients request mutual authentication.</span></span>  
  
 <span data-ttu-id="3b2d2-1011">Negotiate プロトコルでは、クライアントとサーバーがサポートするセキュリティプロトコルに応じて、NTLM または Kerberos のいずれかが選択されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1011">The Negotiate protocol selects either NTLM or Kerberos depending on the security protocols supported by the client and server.</span></span> <span data-ttu-id="3b2d2-1012">NTLM は相互認証をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1012">NTLM does not support mutual authentication.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-1013">次のコード例は、このプロパティの値を表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1013">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public override bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsServer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsServer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsServer : bool" Usage="System.Net.Security.NegotiateStream.IsServer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b2d2-1014">この <see cref="T:System.Boolean" /> が使用する接続のローカル側がサーバーとして認証されたかどうかを示す <see cref="T:System.Net.Security.NegotiateStream" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1014">Gets a <see cref="T:System.Boolean" /> value that indicates whether the local side of the connection used by this <see cref="T:System.Net.Security.NegotiateStream" /> was authenticated as the server.</span></span></summary>
        <value><span data-ttu-id="3b2d2-1015">ローカル エンドポイントが、認証される接続のサーバー側として正常に認証された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1015"><see langword="true" /> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-1016">認証に失敗した場合、または発生しなかった場合、このプロパティは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1016">If authentication failed or did not occur, this property returns `false`.</span></span>  
  
 <span data-ttu-id="3b2d2-1017">サーバーとして認証するには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> または <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1017">To authenticate as the server, call the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-1018">次のコード例は、このプロパティの値を表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1018">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public override bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsSigned" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSigned { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSigned : bool" Usage="System.Net.Security.NegotiateStream.IsSigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b2d2-1019">このストリームを使用して送信されるデータに署名するかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1019">Gets a <see cref="T:System.Boolean" /> value that indicates whether the data sent using this stream is signed.</span></span></summary>
        <value><span data-ttu-id="3b2d2-1020">データの送信前に署名する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1020"><see langword="true" /> if the data is signed before being transmitted; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-1021">データの署名は、データの整合性を保護するのに役立ちます。つまり、送信中にデータが改ざんされたかどうかを受信者が判断するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1021">Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-1022">次のコード例は、このプロパティの値を表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1022">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Net.Security.NegotiateStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b2d2-1023">基になるストリームの長さを取得します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1023">Gets the length of the underlying stream.</span></span></summary>
        <value><span data-ttu-id="3b2d2-1024">基になるストリームの長さを指定する <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1024">A <see cref="T:System.Int64" /> that specifies the length of the underlying stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-1025">このプロパティは、基になるストリームの <xref:System.IO.Stream.Length%2A> プロパティを呼び出すことによって返される値を返します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1025">This property returns the value returned by invoking the <xref:System.IO.Stream.Length%2A> property on the underlying stream.</span></span> <span data-ttu-id="3b2d2-1026">基になるストリームがシーク可能でない場合、通常、このプロパティは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1026">If the underlying stream is not seekable, this property will typically throw an exception.</span></span> <span data-ttu-id="3b2d2-1027">基になるストリームのランタイム型によって、スローされる例外の実行時の型が決まります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1027">The run-time type of the underlying stream determines the run-time type of the exception that is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-1028">次のコード例は、このプロパティの値を表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1028">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-1029">基になるストリームが <see cref="T:System.Net.Sockets.NetworkStream" /> の場合、このプロパティの値の取得はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1029">Getting the value of this property is not supported when the underlying stream is a <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Net.Security.NegotiateStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b2d2-1030">基になるストリーム内の現在位置を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1030">Gets or sets the current position in the underlying stream.</span></span></summary>
        <value><span data-ttu-id="3b2d2-1031">基になるストリーム内の現在の位置を指定する <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1031">A <see cref="T:System.Int64" /> that specifies the current position in the underlying stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-1032">このプロパティは、基になるストリームの <xref:System.IO.Stream.Position%2A> プロパティを呼び出すことによって返される値を返します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1032">This property returns the value returned by invoking the <xref:System.IO.Stream.Position%2A> property on the underlying stream.</span></span> <span data-ttu-id="3b2d2-1033">基になるストリームがシーク可能でない場合、通常、このプロパティは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1033">If the underlying stream is not seekable, this property will typically throw an exception.</span></span> <span data-ttu-id="3b2d2-1034">基になるストリームのランタイム型によって、スローされる例外の実行時の型が決まります。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1034">The run-time type of the underlying stream determines the run-time type of the exception that is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-1035">このプロパティの設定は、サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1035">Setting this property is not supported.</span></span>  
  
<span data-ttu-id="3b2d2-1036">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1036">-or-</span></span> 
<span data-ttu-id="3b2d2-1037">基になるストリームが <see cref="T:System.Net.Sockets.NetworkStream" /> の場合、このプロパティの値の取得はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1037">Getting the value of this property is not supported when the underlying stream is a <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="negotiateStream.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="3b2d2-1038">ストリームから読み取ったバイトを受け取る <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1038">A <see cref="T:System.Byte" /> array that receives the bytes read from the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="3b2d2-1039">このストリームから読み取ったデータの格納を開始する位置を示す、<see cref="T:System.Int32" /> 内のインデックス番号が 0 から始まる位置を格納する <paramref name="buffer" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1039">A <see cref="T:System.Int32" /> containing the zero-based location in <paramref name="buffer" /> at which to begin storing the data read from this stream.</span></span></param>
        <param name="count"><span data-ttu-id="3b2d2-1040">ストリームから読み取る最大バイト数を格納する <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1040">A <see cref="T:System.Int32" /> containing the maximum number of bytes to read from the stream.</span></span></param>
        <summary><span data-ttu-id="3b2d2-1041">このストリームからデータを読み取り、指定した配列に格納します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1041">Reads data from this stream and stores it in the specified array.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-1042">基になるストリームから読み取るバイト数を指定する <see cref="T:System.Int32" /> 値。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1042">An <see cref="T:System.Int32" /> value that specifies the number of bytes read from the underlying stream.</span></span> <span data-ttu-id="3b2d2-1043">読み取るデータがこれ以上存在しない場合は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1043">When there is no more data to be read, returns 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-1044">メソッドは、現在のストリームから最大 `count` バイトを読み取り、`offset`で始まる `buffer` に格納します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1044">The method reads a maximum of `count` bytes from the current stream and stores them in `buffer` beginning at `offset`.</span></span>  
  
 <span data-ttu-id="3b2d2-1045">が正常に認証されるまで、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1045">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="3b2d2-1046">認証するには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドのいずれかを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1046">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
 <span data-ttu-id="3b2d2-1047">この操作を非同期に実行するには、<xref:System.Net.Security.NegotiateStream.BeginRead%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1047">To perform this operation asynchronously, use the <xref:System.Net.Security.NegotiateStream.BeginRead%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-1048">次のコード例は、<xref:System.Net.Security.NegotiateStream>からの読み取りを示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1048">The following code example demonstrates reading from a <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 [!code-cpp[NclNegoSyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncServer/CPP/NclNegoSyncServer.cpp#1)]
 [!code-csharp[NclNegoSyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="3b2d2-1049">読み取り操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1049">The read operation failed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-1050">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1050">Authentication has not occurred.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-1051"><see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> 操作は既に実行されています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1051">A <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> operation is already in progress.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReadTimeout : int with get, set" Usage="System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b2d2-1052">読み取り操作がブロックしてデータを待機する時間を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1052">Gets or sets the amount of time a read operation blocks waiting for data.</span></span></summary>
        <value><span data-ttu-id="3b2d2-1053">読み取り操作が失敗するまでの経過時間を指定する <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1053">A <see cref="T:System.Int32" /> that specifies the amount of time that will elapse before a read operation fails.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-1054">このプロパティは、基になるストリームの <xref:System.IO.Stream.ReadTimeout%2A> プロパティを呼び出すことによって返される値を返します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1054">This property returns the value returned by invoking the <xref:System.IO.Stream.ReadTimeout%2A> property on the underlying stream.</span></span> <span data-ttu-id="3b2d2-1055">このプロパティを設定すると、基になるストリームの <xref:System.IO.Stream.ReadTimeout%2A> 値が、指定された値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1055">When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.</span></span>  
  
 <span data-ttu-id="3b2d2-1056">基になるストリームが <xref:System.Net.Sockets.NetworkStream>の場合、<xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> はミリ秒単位で、既定では <xref:System.Threading.Timeout.Infinite> に設定されるため、読み取り操作はタイムアウトしません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1056">If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not time out.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-1057">次のコード例は、このプロパティの値を表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1057">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteIdentity">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IIdentity RemoteIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoteIdentity As IIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::IIdentity ^ RemoteIdentity { System::Security::Principal::IIdentity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RemoteIdentity : System.Security.Principal.IIdentity" Usage="System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b2d2-1058">この認証されたストリームを共有するリモート側の ID に関する情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1058">Gets information about the identity of the remote party sharing this authenticated stream.</span></span></summary>
        <value><span data-ttu-id="3b2d2-1059">リモート エンドポイントの ID を示す <see cref="T:System.Security.Principal.IIdentity" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1059">An <see cref="T:System.Security.Principal.IIdentity" /> object that describes the identity of the remote endpoint.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-1060">クライアントからアクセスすると、このプロパティは、サーバーのサービスプリンシパル名 (SPN) と使用されている認証プロトコルを含む <xref:System.Security.Principal.GenericIdentity> を返します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1060">When accessed by the client, this property returns a <xref:System.Security.Principal.GenericIdentity> containing the Service Principal Name (SPN) of the server and the authentication protocol used.</span></span> <span data-ttu-id="3b2d2-1061">サーバーによってアクセスされると、このプロパティは、クライアントを説明する <xref:System.Security.Principal.WindowsIdentity> を返します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1061">When accessed by the server, this property returns a <xref:System.Security.Principal.WindowsIdentity> that describes the client.</span></span> <span data-ttu-id="3b2d2-1062"><xref:System.Security.Principal.WindowsIdentity> が使用できない場合は、クライアント情報が <xref:System.Security.Principal.GenericIdentity>のサーバーに返されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1062">If the <xref:System.Security.Principal.WindowsIdentity> is not available, client information is returned to the server in a <xref:System.Security.Principal.GenericIdentity>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-1063">次のコード例は、このプロパティの値を表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1063">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#2)]
 [!code-csharp[NclNegoAsyncServer#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-1064">認証に失敗したか、認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1064">Authentication failed or has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="negotiateStream.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset"><span data-ttu-id="3b2d2-1065">この値は無視されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1065">This value is ignored.</span></span></param>
        <param name="origin"><span data-ttu-id="3b2d2-1066">この値は無視されます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1066">This value is ignored.</span></span></param>
        <summary><span data-ttu-id="3b2d2-1067"><see cref="T:System.NotSupportedException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1067">Throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="3b2d2-1068">常に <see cref="T:System.NotSupportedException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1068">Always throws a <see cref="T:System.NotSupportedException" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-1069">このメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1069">Do not call this method.</span></span> <span data-ttu-id="3b2d2-1070">継承されますが、<xref:System.Net.Security.NegotiateStream>ではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1070">It is inherited, but is not supported by <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-1071">シークは、<see cref="T:System.Net.Security.NegotiateStream" /> でサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1071">Seeking is not supported on <see cref="T:System.Net.Security.NegotiateStream" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="negotiateStream.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3b2d2-1072">ストリームの長さを指定する <see cref="T:System.Int64" /> 値。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1072">An <see cref="T:System.Int64" /> value that specifies the length of the stream.</span></span></param>
        <summary><span data-ttu-id="3b2d2-1073">基になるストリームの長さを設定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1073">Sets the length of the underlying stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="negotiateStream.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="3b2d2-1074">ストリームに書き込むバイトを提供する <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1074">A <see cref="T:System.Byte" /> array that supplies the bytes written to the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="3b2d2-1075">ストリームに書き込むバイトの読み取りを開始する位置を示す、<see cref="T:System.Int32" /> 内のインデックス番号が 0 から始まる位置を格納する <paramref name="buffer" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1075">An <see cref="T:System.Int32" /> containing the zero-based location in <paramref name="buffer" /> at which to begin reading bytes to be written to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="3b2d2-1076"><see cref="T:System.Int32" /> から読み取るバイト数を格納する <paramref name="buffer" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1076">A <see cref="T:System.Int32" /> containing the number of bytes to read from <paramref name="buffer" />.</span></span></param>
        <summary><span data-ttu-id="3b2d2-1077">指定したバッファーとオフセットを使用して、基になるストリームに指定した <see cref="T:System.Byte" /> 数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1077">Write the specified number of <see cref="T:System.Byte" />s to the underlying stream using the specified buffer and offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-1078">暗号化、署名、または暗号化と署名が有効になっている場合、このメソッドは、バッファーからデータを読み取り、暗号化、署名、または暗号化と署名を行い、基になるストリームを使用して送信します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1078">If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream.</span></span> <span data-ttu-id="3b2d2-1079">データの暗号化や署名などのセキュリティサービスが使用されていない場合、このメソッドは、基になるストリームで <xref:System.IO.Stream.Write%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1079">If no security services such as data encryption or signing are in use, this method invokes <xref:System.IO.Stream.Write%2A> on the underlying stream.</span></span>  
  
 <span data-ttu-id="3b2d2-1080">このメソッドは、書き込み操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1080">This method blocks while the write operation completes.</span></span> <span data-ttu-id="3b2d2-1081">操作の完了中にブロックされないようにするには、<xref:System.Net.Security.NegotiateStream.Write%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1081">To prevent blocking while the operation completes, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.</span></span>  
  
 <span data-ttu-id="3b2d2-1082">が正常に認証されるまで、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1082">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="3b2d2-1083">認証するには、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドのいずれかを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1083">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
 <span data-ttu-id="3b2d2-1084"><xref:System.Net.Security.NegotiateStream> クラスは、複数の同時書き込み操作をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1084">The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations.</span></span> <span data-ttu-id="3b2d2-1085">同じストリームで別の書き込み操作が既に実行されているときに書き込み操作を開始しようとすると、<xref:System.NotSupportedException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1085">If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-1086">次のコード例は、<xref:System.Net.Security.NegotiateStream>への書き込みを示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1086">The following code example demonstrates writing to a <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b2d2-1087"><paramref name="buffer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1087"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b2d2-1088">[https://login.microsoftonline.com/consumers/](<paramref name="offset is less than 0" />)</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1088"><paramref name="offset is less than 0" />.</span></span>  
  
<span data-ttu-id="3b2d2-1089">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1089">-or-</span></span> 
 <span data-ttu-id="3b2d2-1090"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1090"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="3b2d2-1091">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1091">-or-</span></span> 
 <span data-ttu-id="3b2d2-1092"><paramref name="offset" /> に count を加算した値が、<paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1092"><paramref name="offset" /> plus count is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="3b2d2-1093">書き込み操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1093">The write operation failed.</span></span>  
  
<span data-ttu-id="3b2d2-1094">または</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1094">-or-</span></span>
  
 <span data-ttu-id="3b2d2-1095">暗号化が使用されていますが、データを暗号化できませんでした。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1095">Encryption is in use, but the data could not be encrypted.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3b2d2-1096">既に実行中の書き込み操作が存在します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1096">There is already a write operation in progress.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b2d2-1097">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1097">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3b2d2-1098">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1098">Authentication has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WriteTimeout : int with get, set" Usage="System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b2d2-1099">書き込み操作がブロックしてデータを待機する時間を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1099">Gets or sets the amount of time a write operation blocks waiting for data.</span></span></summary>
        <value><span data-ttu-id="3b2d2-1100">書き込み操作が失敗するまでの経過時間を指定する <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1100">A <see cref="T:System.Int32" /> that specifies the amount of time that will elapse before a write operation fails.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b2d2-1101">このプロパティは、基になるストリームの <xref:System.IO.Stream.WriteTimeout%2A> プロパティを呼び出すことによって返される値を返します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1101">This property returns the value returned by invoking the <xref:System.IO.Stream.WriteTimeout%2A> property on the underlying stream.</span></span> <span data-ttu-id="3b2d2-1102">設定操作の場合、指定された値は基になるストリームの <xref:System.IO.Stream.WriteTimeout%2A> 値を設定します。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1102">For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.</span></span>  
  
 <span data-ttu-id="3b2d2-1103">基になるストリームが <xref:System.Net.Sockets.NetworkStream>の場合、<xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> はミリ秒単位で、既定では <xref:System.Threading.Timeout.Infinite> に設定されるため、書き込み操作はタイムアウトしません。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1103">If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not time out.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b2d2-1104">次のコード例は、このプロパティの値を表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3b2d2-1104">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
