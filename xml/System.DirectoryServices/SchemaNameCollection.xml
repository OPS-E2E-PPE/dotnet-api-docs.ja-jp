<Type Name="SchemaNameCollection" FullName="System.DirectoryServices.SchemaNameCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="46c654401351b93eede1c45edcc12dd4573737b1" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82501000" /></Metadata><TypeSignature Language="C#" Value="public class SchemaNameCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SchemaNameCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.SchemaNameCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class SchemaNameCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public ref class SchemaNameCollection : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type SchemaNameCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface IList" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="F#" Value="type SchemaNameCollection = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="3a2bc-101"><see cref="P:System.DirectoryServices.DirectoryEntries.SchemaFilter" /> オブジェクトの <see cref="T:System.DirectoryServices.DirectoryEntries" /> プロパティが使用できるスキーマ名のリストを格納します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-101">Contains a list of the schema names that the <see cref="P:System.DirectoryServices.DirectoryEntries.SchemaFilter" /> property of a <see cref="T:System.DirectoryServices.DirectoryEntries" /> object can use.</span></span></summary>
    <remarks>To be added.</remarks>
    <altmember cref="N:System.DirectoryServices" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Add : string -&gt; int" Usage="schemaNameCollection.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3a2bc-102">このコレクションに追加するスキーマ名。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-102">The schema name to add to this collection.</span></span></param>
        <summary><span data-ttu-id="3a2bc-103">指定したスキーマ名をこのコレクションに追加します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-103">Appends a specified schema name to this collection.</span></span></summary>
        <returns><span data-ttu-id="3a2bc-104">指定したプロパティ値の 0 から始まるインデックス番号。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-104">The zero-based index of the specified property value.</span></span> <span data-ttu-id="3a2bc-105">オブジェクトが見つからない場合は、-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-105">If the object is not found, the return value is -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.DirectoryServices.SchemaNameCollection value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.DirectoryServices.SchemaNameCollection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (value As SchemaNameCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::DirectoryServices::SchemaNameCollection ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.DirectoryServices.SchemaNameCollection -&gt; unit" Usage="schemaNameCollection.AddRange value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DirectoryServices.SchemaNameCollection" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3a2bc-106">追加するスキーマ名が格納されている <see cref="T:System.DirectoryServices.SchemaNameCollection" />。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-106">A <see cref="T:System.DirectoryServices.SchemaNameCollection" /> that contains the schema names to add.</span></span></param>
        <summary><span data-ttu-id="3a2bc-107">指定した一連のスキーマ名をこのコレクションに追加します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-107">Appends a set of specified schema names to this collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (string[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(string[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (value As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(cli::array &lt;System::String ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddRange : string[] -&gt; unit" Usage="schemaNameCollection.AddRange value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3a2bc-108">追加するスキーマ名を格納する <see cref="T:System.String" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-108">An array of type <see cref="T:System.String" /> that contains the schema names to add.</span></span></param>
        <summary><span data-ttu-id="3a2bc-109">指定した一連のスキーマ名をこのコレクションに追加します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-109">Appends a set of specified schema names to this collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="schemaNameCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a2bc-110">すべてのオブジェクトをこのコレクションから削除します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-110">Removes all objects from this collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="schemaNameCollection.Contains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3a2bc-111">検索するスキーマ名。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-111">The schema name to search for.</span></span></param>
        <summary><span data-ttu-id="3a2bc-112">指定したスキーマ名がこのコレクションにあるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-112">Determines whether this collection contains a specified schema name.</span></span></summary>
        <returns><span data-ttu-id="3a2bc-113">指定したプロパティがこのコレクションにある場合、戻り値は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-113">The return value is <see langword="true" /> if the specified property belongs to this collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (string[] stringArray, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(string[] stringArray, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (stringArray As String(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::String ^&gt; ^ stringArray, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : string[] * int -&gt; unit" Usage="schemaNameCollection.CopyTo (stringArray, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringArray" Type="System.String[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="stringArray"><span data-ttu-id="3a2bc-114">このコレクションのスキーマ名を受け取る <see cref="T:System.String" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-114">An array of type <see cref="T:System.String" /> that receives this collection's schema names.</span></span></param>
        <param name="index"><span data-ttu-id="3a2bc-115">スキーマ名のコピーを開始する配列内の 0 から始まるインデックス番号。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-115">The zero-based array index at which to begin copying the schema names.</span></span></param>
        <summary><span data-ttu-id="3a2bc-116">このコレクションから配列にスキーマ名をコピーします。配列の特定のインデックスからコピーが開始されます。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-116">Copies the schema names from this collection to an array, starting at a particular index of the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.DirectoryServices.SchemaNameCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a2bc-117"><see cref="P:System.DirectoryServices.SchemaNameCollection.Count" /> プロパティは、このコレクション内のオブジェクトの数を取得します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-117">The <see cref="P:System.DirectoryServices.SchemaNameCollection.Count" /> property gets the number of objects in this collection.</span></span></summary>
        <value><span data-ttu-id="3a2bc-118">このコレクション内のオブジェクトの数。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-118">The number of objects in this collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="schemaNameCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a2bc-119">このコレクションを反復処理するために使用できる列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-119">Returns an enumerator that you can use to iterate through this collection.</span></span></summary>
        <returns><span data-ttu-id="3a2bc-120">このコレクションを反復処理するために使用できる列挙子。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-120">An enumerator that you can used to iterate through this collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string -&gt; int" Usage="schemaNameCollection.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3a2bc-121">検索するスキーマ名。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-121">The schema name to search for.</span></span></param>
        <summary><span data-ttu-id="3a2bc-122">このコレクション内での指定したスキーマ名の位置を示すインデックスを判断します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-122">Determines the index of a specified schema name in this collection.</span></span></summary>
        <returns><span data-ttu-id="3a2bc-123">指定したスキーマ名の 0 から始まるインデックス番号。コレクション内でスキーマ名が見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-123">The zero-based index of the specified schema name, or -1 if the schema name was not found in the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * string -&gt; unit" Usage="schemaNameCollection.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="3a2bc-124">スキーマ名を挿入するコレクション内の 0 から始まるインデックス番号。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-124">The zero-based index into the collection at which to insert the schema name.</span></span></param>
        <param name="value"><span data-ttu-id="3a2bc-125">このコレクションに挿入するスキーマ名。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-125">The schema name to insert into this collection.</span></span></param>
        <summary><span data-ttu-id="3a2bc-126">スキーマ名をこのコレクションの指定したインデックス位置に挿入します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-126">Inserts a schema name into this collection at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a2bc-127">`index` パラメーターがコレクション内の項目数と等しい場合、このメソッドは値をコレクションの末尾に追加します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-127">If the `index` parameter equals the number of items in the collection, this method appends the value to the end of the collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public string this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ default[int] { System::String ^ get(int index); void set(int index, System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : string with get, set" Usage="System.DirectoryServices.SchemaNameCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="3a2bc-128">コレクションの 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-128">The zero-based index into the collection.</span></span></param>
        <summary><span data-ttu-id="3a2bc-129">指定したインデックスにあるオブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-129">Gets or sets the object that exists at a specified index.</span></span></summary>
        <value><span data-ttu-id="3a2bc-130">指定されたインデックスにあるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-130">The object that exists at the specified index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a2bc-131">C# では、このプロパティは <xref:System.DirectoryServices.SchemaNameCollection> クラスのインデクサーです。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-131">In C#, this property is the indexer for the <xref:System.DirectoryServices.SchemaNameCollection> class.</span></span>  
  
 <span data-ttu-id="3a2bc-132">JScript では、型によって定義される既定のインデックス付きプロパティを使用できますが、独自のプロパティを明示的に定義することはできません。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-132">In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own.</span></span> <span data-ttu-id="3a2bc-133">ただし、expando 属性をクラスに指定すると、型が Object でインデックス型が <xref:System.String>既定のインデックス付きプロパティが自動的に提供されます。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-133">However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and whose index type is <xref:System.String>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; unit" Usage="schemaNameCollection.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3a2bc-134">削除するスキーマ名。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-134">The schema name to remove.</span></span></param>
        <summary><span data-ttu-id="3a2bc-135">指定したスキーマ名をこのコレクションから削除します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-135">Removes a specified schema name from this collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="schemaNameCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="3a2bc-136">削除するスキーマ名の 0 から始まるインデックス番号。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-136">The zero-based index of the schema name to remove.</span></span></param>
        <summary><span data-ttu-id="3a2bc-137">指定したインデックス位置にあるスキーマ名をこのコレクションから削除します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-137">Removes the schema name that is at a specified index from this collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="3a2bc-138">0 から始まるインデックス番号が、0 未満またはコレクションのサイズと同じです。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-138">The zero-based index is either less than zero or equal to the size of the collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As Array, index As Integer) Implements ICollection.CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.ICollection.CopyTo : Array * int -&gt; unit&#xA;override this.System.Collections.ICollection.CopyTo : Array * int -&gt; unit" Usage="schemaNameCollection.System.Collections.ICollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3a2bc-139"><see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-139">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="3a2bc-140"><see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-140">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="3a2bc-141">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-141">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="3a2bc-142"><see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-142">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a2bc-143"><paramref name="array" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-143"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3a2bc-144"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-144"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a2bc-145"><paramref name="array" /> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-145"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="3a2bc-146">- または -</span><span class="sxs-lookup"><span data-stu-id="3a2bc-146">-or-</span></span> 
<span data-ttu-id="3a2bc-147">コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-147">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="3a2bc-148">コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-148">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.IsSynchronized : bool" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a2bc-149"><see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-149">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="3a2bc-150"><see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-150"><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a2bc-151"><xref:System.Collections.ICollection.SyncRoot%2A> は、<xref:System.Collections.ICollection> へのアクセスを同期するために使用できるオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-151"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="3a2bc-152"><xref:System.Collections?displayProperty=nameWithType> 名前空間のほとんどのコレクションクラスは、同期されたメソッドも実装します。このメソッドは、基になるコレクションに対して同期されたラッパーを提供します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-152">Most collection classes in the <xref:System.Collections?displayProperty=nameWithType> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.</span></span>  
  
 <span data-ttu-id="3a2bc-153">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-153">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="3a2bc-154">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-154">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="3a2bc-155">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-155">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="3a2bc-156">[Visual Basic、 C#]</span><span class="sxs-lookup"><span data-stu-id="3a2bc-156">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="3a2bc-157">次の例は、列挙体全体で <xref:System.Collections.ICollection.SyncRoot%2A> を使用してコレクションをロックする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-157">The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:</span></span>  
  
```csharp  
ICollection myCollection = new ICollection();  
  lock(myCollection.SyncRoot) {  
  foreach (Object item in myCollection) {  
  // Insert your code here.  
  }  
 }  
```  
  
```vb  
Dim myCollection As New ICollection()  
 Dim item As Object  
 SyncLock myCollection.SyncRoot  
  For Each item In myCollection  
  ' Insert your code here.  
  Next item  
 End SyncLock  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.SyncRoot : obj" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a2bc-158"><see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-158">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="3a2bc-159"><see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-159">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a2bc-160">基になるストアが公開されていないコレクションの場合、期待される実装は、現在のインスタンスを返すことです。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-160">For collections with an underlying store is not publicly available, the expected implementation is to return the current instance.</span></span> <span data-ttu-id="3a2bc-161">現在のインスタンスへのポインターは、他のコレクションをラップするコレクションには不十分である可能性があることに注意してください。これらは、基になるコレクションの `SyncRoot` プロパティを返します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-161">Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's `SyncRoot` property.</span></span>  
  
 <span data-ttu-id="3a2bc-162"><xref:System.Collections?displayProperty=nameWithType> 名前空間内のほとんどのコレクション クラスは、`Synchronized` メソッドも実装しています。このメソッドは、基になるコレクションをラップする同期されたラッパーを提供します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-162">Most collection classes in the <xref:System.Collections?displayProperty=nameWithType> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection.</span></span> <span data-ttu-id="3a2bc-163">ただし、派生クラスは <xref:System.Collections.ICollection.SyncRoot%2A> プロパティを使って、コレクションの同期されたバージョンを独自に提供できます。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-163">However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property.</span></span> <span data-ttu-id="3a2bc-164">同期コードでは、コレクションを直接操作するのではなく、コレクションの <xref:System.Collections.ICollection.SyncRoot%2A> に対して操作を行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-164">The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection.</span></span> <span data-ttu-id="3a2bc-165">これにより、他のオブジェクトから派生したコレクションを適切に操作できるようになります。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-165">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="3a2bc-166">特に、コレクション インスタンスを同時に変更する可能性がある別スレッドとの間で、正常な同期を維持します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-166">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.</span></span>  
  
 <span data-ttu-id="3a2bc-167">コレクションに `Synchronized` メソッドが存在しない場合、<xref:System.Collections.ICollection.SyncRoot%2A> の予想される使用量は次のようになります。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-167">In the absence of a `Synchronized` method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:</span></span>  
  
```csharp  
ICollection MyCollection =...  
 lock(MyCollection.SyncRoot) {  
  // Some operation on the collection, which is now thread safe.  
 }  
```  
  
```vb  
Dim myCollection as New ICollection()  
 SyncLock myCollection.SyncRoot  
  ' Some operation on the collection, which is now thread safe.  
 End SyncLock  
```  
  
 <span data-ttu-id="3a2bc-168">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-168">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="3a2bc-169">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-169">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="3a2bc-170">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-170">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="3a2bc-171">[Visual Basic、 C#]</span><span class="sxs-lookup"><span data-stu-id="3a2bc-171">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="3a2bc-172">次の例は、列挙体全体で <xref:System.Collections.ICollection.SyncRoot%2A> を使用してコレクションをロックする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-172">The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:</span></span>  
  
```csharp  
ICollection myCollection = new ICollection();  
 lock(myCollection.SyncRoot) {  
  foreach (Object item in myCollection) {  
  // Insert your code here.  
  }  
 }  
```  
  
```vb  
Dim myCollection As New ICollection()  
 Dim item As Object  
 SyncLock myCollection.SyncRoot  
  For Each item In myCollection  
  ' Insert your code here.  
  Next item  
 End SyncLock  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.Add : obj -&gt; int&#xA;override this.System.Collections.IList.Add : obj -&gt; int" Usage="schemaNameCollection.System.Collections.IList.Add value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3a2bc-173">リストに追加する項目。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-173">The item to add to the list.</span></span></param>
        <summary><span data-ttu-id="3a2bc-174">リストに項目を追加します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-174">Adds an item to the list.</span></span></summary>
        <returns><span data-ttu-id="3a2bc-175">新しい項目が挿入された位置。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-175">The position into which the new item was inserted.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.Contains : obj -&gt; bool&#xA;override this.System.Collections.IList.Contains : obj -&gt; bool" Usage="schemaNameCollection.System.Collections.IList.Contains value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3a2bc-176">リスト内で検索する値。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-176">The value to locate in the list.</span></span></param>
        <summary><span data-ttu-id="3a2bc-177">リストに特定の値が格納されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-177">Determines whether the list contains a specified value.</span></span></summary>
        <returns><span data-ttu-id="3a2bc-178">値がリストに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-178"><see langword="true" /> if the value is found in the list, otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a2bc-179">.NET Framework 2.0 以降では、このメソッドは、コレクション内のオブジェクトの Equals メソッドと CompareTo メソッドを使用して、項目が存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-179">Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists.</span></span> <span data-ttu-id="3a2bc-180">以前のバージョンの .NET Framework では、この決定は、コレクション内のオブジェクトの item パラメーターの Equals メソッドと CompareTo メソッドを使用して行われていました。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-180">In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.IndexOf : obj -&gt; int&#xA;override this.System.Collections.IList.IndexOf : obj -&gt; int" Usage="schemaNameCollection.System.Collections.IList.IndexOf value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3a2bc-181">リスト内で検索する項目。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-181">The item to locate in the list.</span></span></param>
        <summary><span data-ttu-id="3a2bc-182">リスト内の指定した項目のインデックスを判断します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-182">Determines the index of a specified item in the list.</span></span></summary>
        <returns><span data-ttu-id="3a2bc-183">リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-183">The index of <paramref name="value" /> if found in the list; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a2bc-184">.NET Framework 2.0 以降では、このメソッドは、コレクション内のオブジェクトの Equals メソッドと CompareTo メソッドを使用して、項目が存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-184">Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists.</span></span> <span data-ttu-id="3a2bc-185">以前のバージョンの .NET Framework では、この決定は、コレクション内のオブジェクトの item パラメーターの Equals メソッドと CompareTo メソッドを使用して行われていました。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-185">In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.Insert : int * obj -&gt; unit&#xA;override this.System.Collections.IList.Insert : int * obj -&gt; unit" Usage="schemaNameCollection.System.Collections.IList.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="3a2bc-186">値を挿入する位置を示す、0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-186">The zero-based index at which value should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="3a2bc-187">リストに挿入する項目。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-187">The item to insert into the list.</span></span></param>
        <summary><span data-ttu-id="3a2bc-188">リスト内の指定されたインデックス位置に項目を挿入します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-188">Inserts an item to the list at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a2bc-189">`index` がリスト内の項目数と等しい場合は、*値*が末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-189">If `index` equals the number of items in the list, then *value* is appended to the end.</span></span>  
  
 <span data-ttu-id="3a2bc-190">リストなどの連続する要素のコレクションでは、空白になった位置を埋めるために、削除された要素の後にある要素の位置が繰り上げられます。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-190">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="3a2bc-191">コレクションにインデックスがある場合、移動した要素のインデックスも更新されます。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-191">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IList.IsFixedSize : bool" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a2bc-192"><see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-192">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="3a2bc-193"><see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-193"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a2bc-194">固定サイズのコレクションでは、コレクションの作成後に要素の追加または削除はできませんが、既存の要素の変更はできます。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-194">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IList.IsReadOnly : bool" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a2bc-195"><see cref="T:System.Collections.IList" /> が読み取り専用かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-195">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="3a2bc-196"><see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-196"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a2bc-197">読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-197">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IList.Item(int) : obj with get, set" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="3a2bc-198">取得または設定する要素の、0 から始まるインデックス番号。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-198">The zero-based index of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="3a2bc-199">指定したインデックスにある要素を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-199">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="3a2bc-200">指定したインデックス位置にある要素。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-200">The element at the specified index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a2bc-201">このプロパティでは、`myCollection[index]` という構文を使用して、コレクション内の特定の要素にアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-201">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3a2bc-202"><paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-202"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3a2bc-203">このプロパティが設定されていますが、<see cref="T:System.Collections.IList" /> が読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-203">The property is set and the <see cref="T:System.Collections.IList" /> is read-only.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.Remove : obj -&gt; unit&#xA;override this.System.Collections.IList.Remove : obj -&gt; unit" Usage="schemaNameCollection.System.Collections.IList.Remove value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3a2bc-204">リストから削除する <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-204">The <paramref name="value" /> to remove from the list.</span></span></param>
        <summary><span data-ttu-id="3a2bc-205">リスト内で最初に見つかった指定の <paramref name="value" /> を削除します。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-205">Removes the first occurrence of a specific <paramref name="value" /> from the list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a2bc-206">リストなどの連続する要素のコレクションでは、空白になった位置を埋めるために、削除された要素の後にある要素の位置が繰り上げられます。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-206">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="3a2bc-207">コレクションにインデックスがある場合、移動した要素のインデックスも更新されます。</span><span class="sxs-lookup"><span data-stu-id="3a2bc-207">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
