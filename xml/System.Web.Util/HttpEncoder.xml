<Type Name="HttpEncoder" FullName="System.Web.Util.HttpEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6d4ca8f4e0b8697125baead3259fe24f00acad98" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73398244" /></Metadata><TypeSignature Language="C#" Value="public class HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HttpEncoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.HttpEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpEncoder" />
  <TypeSignature Language="F#" Value="type HttpEncoder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>エンコーディングとデコーディングのロジックを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラスには、<xref:System.Web.HttpUtility>、<xref:System.Web.HttpServerUtility>、<xref:System.Net.HttpResponseHeader>などのクラスのメソッドによって使用されるエンコードおよびデコードのロジックが含まれています。  
  
 <xref:System.Web.Util.HttpEncoder> クラスから継承し、その動作をオーバーライドして、ASP.NET の既定のエンコードおよびデコード動作をカスタマイズできます。 次に、<xref:System.Web.Configuration.HttpRuntimeSection> クラスの <xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A> プロパティを設定して、カスタムクラスを構成します。  
  
 <xref:System.Web.Util.HttpEncoder> から派生するエンコードおよびデコード用のカスタムクラスを使用すると、組み込みの ASP.NET エンコードおよびデコード動作をオーバーライドしたり、選択した部分のみを変更したりできます。  
  
 ASP.NET でのカスタムエンコードの種類を構成して、次のエンコーディング動作を置き換えるか補完することができます。  
  
-   HTML エンコード  
  
-   HTML 属性のエンコード  
  
-   URL エンコード  
  
-   URL パスのエンコード  
  
-   HTTP ヘッダーの名前とヘッダー値のエンコード  
  
 既定では、ASP.NET アプリケーションは、すべての出力エンコーディングに <xref:System.Web.Security.AntiXss.AntiXssEncoder> の種類を使用するように構成されています。  
  
 アプリケーションレベルの Web.config ファイルの次の例は、ASP.NET アプリケーションに対して <xref:System.Web.Security.AntiXss.AntiXssEncoder> 型がどのように設定されているかを示しています。  
  
 `<httpRuntime requestValidationMode="4.5" encoderType="System.Web.Security.AntiXss.AntiXssEncoder, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>`  
  
 この例の構成設定は、アプリケーションですべての出力エンコーディングを実行するように <xref:System.Web.Security.AntiXss.AntiXssEncoder> クラスを設定します。 詳細については、「<xref:System.Web.Security.AntiXss.AntiXssEncoder> クラスの概要」を参照してください。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>カスタムエンコーダクラスを作成し、基底クラスの基本メソッドをオーバーライドすると、派生エンコーダーは、オーバーライドされたメソッドのいずれかから例外をスローする場合があります。 ただし、次の場合、このような例外をスローすると、ASP.NET で予期しない動作が発生する可能性があります。  
  
-ASP.NET が、カスタムエンコーダーからスローされた未処理の例外によって発生したエラーページを表示している場合、ASP.NET はカスタムエンコーダーを呼び出すことによってエラー出力をエンコードしようとしません。 これにより、再帰エラー条件が回避します。  
  
-ASP.NET が IIS に HTTP ヘッダーを送信している場合、ASP.NET には未処理の例外のプロビジョニングがありません。 そのため、標準の ASP.NET エラーページが表示されます (構成設定によってこのページが表示される場合)。</para></block>
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
    <altmember cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.Util.HttpEncoder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Current { System::Web::Util::HttpEncoder ^ get(); void set(System::Web::Util::HttpEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.HttpEncoder with get, set" Usage="System.Web.Util.HttpEncoder.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションで使用する <see cref="T:System.Web.Util.HttpEncoder" /> の種類を取得または設定します。</summary>
        <value>使用するエンコーダー/デコーダーの種類への参照。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生 <xref:System.Web.Util.HttpEncoder> 型が構成ファイルで指定されている場合、<xref:System.Web.Util.HttpEncoder.Current%2A> プロパティはカスタム型への参照を返します。 ただし、カスタムエンコーダーが使用されていない場合、プロパティは既定の ASP.NET <xref:System.Web.Util.HttpEncoder> インスタンスへの参照を返します。  
  
 <xref:System.Web.Util.HttpEncoder.Current%2A> プロパティはスレッドセーフではありません。 このプロパティは、`Application_Start` が1つのスレッドで実行されるため、アプリケーションの `Application_Start` メソッドでのみ設定します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">このプロパティに割り当てられているエンコーダー インスタンスは <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Default { System::Web::Util::HttpEncoder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Web.Util.HttpEncoder" Usage="System.Web.Util.HttpEncoder.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET の既定のエンコーダーへの参照を取得します。</summary>
        <value>既定のエンコーダーへの参照。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般的なエンコードの問題は、既定の ASP.NET <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> 動作によってスペースが "+" 文字に変換されることです。 従来、"+" 文字は、URL のスペース文字をより人間が判読できる方法にエンコードするためのインターネット規約でした。 ただし、標準によっては、空白文字は "+" 文字ではなく "%20" としてエンコードされます。 ASP.NET を使用すると、より標準に準拠したエンコードアルゴリズムを実装できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderNameValueEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HeaderNameValueEncode (string headerName, string headerValue, out string encodedHeaderName, out string encodedHeaderValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HeaderNameValueEncode(string headerName, string headerValue, [out] string&amp; encodedHeaderName, [out] string&amp; encodedHeaderValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HeaderNameValueEncode(System.String,System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HeaderNameValueEncode (headerName As String, headerValue As String, ByRef encodedHeaderName As String, ByRef encodedHeaderValue As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HeaderNameValueEncode(System::String ^ headerName, System::String ^ headerValue, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderName, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderValue);" />
      <MemberSignature Language="F#" Value="abstract member HeaderNameValueEncode : string * string * string * string -&gt; unit&#xA;override this.HeaderNameValueEncode : string * string * string * string -&gt; unit" Usage="httpEncoder.HeaderNameValueEncode (headerName, headerValue, encodedHeaderName, encodedHeaderValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="headerValue" Type="System.String" />
        <Parameter Name="encodedHeaderName" Type="System.String" RefType="out" />
        <Parameter Name="encodedHeaderValue" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="headerName">エンコードする HTTP ヘッダーの名前。</param>
        <param name="headerValue">エンコードする HTTP ヘッダーの値。</param>
        <param name="encodedHeaderName">このメソッドから制御が戻るときに、HTTP ヘッダーとして使用する、エンコードされた名前が格納されます。 このパラメーターは初期化せずに渡されます。</param>
        <param name="encodedHeaderValue">このメソッドから制御が戻るときに、HTTP ヘッダーとして使用する、エンコードされた値が格納されます。 このパラメーターは初期化せずに渡されます。</param>
        <summary>ヘッダーの名前と値を、HTTP ヘッダーとして使用できる文字列にエンコードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> メソッドは、`headerName` と `headerValue` パラメーターから入力文字列を受け取り、それらをエンコードします。 エンコードされた値は、out パラメーターとして返されます。  
  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> メソッドでは、次のロジックを使用してヘッダーの名前と値をエンコードします。  
  
-   Unicode 値が ascii 文字9を除く ASCII 文字32よりも小さい文字はすべて、`N` 文字が16進数値を表す `%NN` 形式に URL エンコードされます。  
  
-   ASCII 文字 9 (水平タブ文字) は、URL エンコードされていません。  
  
-   ASCII 文字127は `%7F`としてエンコードされます。  
  
-   その他のすべての文字はエンコードされません。  
  
    > [!NOTE]
    >  このメソッドは Unicode 値に使用できますが、通常は ASCII の範囲の値に使用されます。  
  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> メソッドの既定の実装では、`headerValue` が `null` の場合、または空の文字列の場合、`encodedHeaderValue` の `headerValue` の値が返されます。 同様に、既定の実装では、`headerName` が `null` か、または空の文字列の場合、`encodedHeaderName` 内の `headerName` の値が返されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">エンコードする文字列。</param>
        <param name="output">エンコードされた値を書き込むテキスト ライター。</param>
        <summary>受信した値を、一重または二重引用符を使用して区切られた HTML 属性に挿入できる文字列にエンコードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> メソッドは、標準の HTML エンティティを使用して文字をエンコードします。 たとえば、`<` (左山かっこ) は `&lt;` としてエンコードされ、`\` (円記号) は `&#92;`としてエンコードされます。  
  
 一重引用符と二重引用符で囲まれた属性内で <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> を使用するのは安全です。 値は引用符で囲む必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlDecode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlDecode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlDecode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlDecode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">デコードする文字列。</param>
        <param name="output">デコードされた値を書き込むテキスト ライター。</param>
        <summary>HTML エンコードされた文字列の値をデコードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表は、ASP.NET デコードロジックでデコードできる文字シーケンスを示しています。  
  
|文字シーケンス|ルール|  
|------------------------|----------|  
|`&#NNN;` (ASCII 文字の10進数コード)。|指定した ASCII 文字としてデコードされます。 文字シーケンスは、# 文字の後の最初の桁から始まり、セミコロンで終了します。|  
|`&#xZZ;` (ASCII 文字の16進コード)。|指定した ASCII 文字としてデコードされます。 エンコードされたフォームは、10進値ではなく16進数を使用して文字を指定します。 文字シーケンスは、# 文字の後の最初の桁から始まり、セミコロンで終了します。|  
|名前付き HTML エンティティ。|等価の ASCII 文字としてデコードされます。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">エンコードする文字列。</param>
        <param name="output">エンコードされた値を書き込むテキスト ライター。</param>
        <summary>文字列を HTML エンコードされた文字列にエンコードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表は、ASP.NET encoding ロジックでデコードできる文字シーケンスを示しています。  
  
|文字|エンコードされた|  
|---------------|----------------|  
|`<` (左山かっこ)|`&lt;`|  
|`>` (右山かっこ)|`&gt;`|  
|`"` (二重引用符)|`&quot;`|  
|`&` (アンパサンド)|`&amp;`|  
|`\` (円記号)|`&#92;`|  
|160から255への ASCII 文字|`&#NNN;`。ここで `NNN` は3桁の10進文字コードです。|  
  
 <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> メソッドをオーバーライドする場合は、二重引用符または単一引用符で囲まれた HTML 属性内でも安全な出力を生成する必要があります。 これは、\<タグ attr = "@value" > など、マークアップとコードを組み合わせることができる Razor エンジンによる解析に対応しています。 また、Razor エンジンによって処理される場合、@ 演算子はコンテキストに対応していないため、<xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>ではなく <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> を呼び出します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="JavaScriptStringEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string JavaScriptStringEncode (string value);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string JavaScriptStringEncode(string value) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.JavaScriptStringEncode(System.String)" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function JavaScriptStringEncode (value As String) As String" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ JavaScriptStringEncode(System::String ^ value);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member JavaScriptStringEncode : string -&gt; string&#xA;override this.JavaScriptStringEncode : string -&gt; string" Usage="httpEncoder.JavaScriptStringEncode value" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">エンコードする文字列。</param>
        <summary>文字列をエンコードします。</summary>
        <returns>エンコードされた文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL エンコードは、すべてのブラウザーが URL 文字列内のテキストを正しく送信するようにします。 一部のブラウザーでは、疑問符 (?)、アンパサンド (&)、スラッシュ (/)、スペースなどの文字が切り捨てられたり、破損したりする可能性があります。 そのため、これらの文字はエンコードする必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member UrlEncode : byte[] * int * int -&gt; byte[]&#xA;override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="httpEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">エンコードするバイト配列。</param>
        <param name="offset"><paramref name="bytes" /> 配列内のエンコード開始位置。</param>
        <param name="count">エンコードする <paramref name="bytes" /> 配列内の項目の数。</param>
        <summary>URL では使用できない文字の配列を、16 進文字エンティティにエンコードします。</summary>
        <returns>エンコードされた文字の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> メソッドは、<xref:System.Web.HttpUtility> クラスのいくつかの URL エンコードメソッドによって呼び出されます。  
  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> メソッドは、URL セーフであると見なされる ASCII 文字のセットに含まれていない任意の文字を URL エンコードします。 スペースは、ASCII の "`+"` 文字としてエンコードされます。 URL セーフな ASCII 文字には、ASCII 文字 (A から Z および a ~ z)、数字 (0 ~ 9)、およびいくつかの区切り記号が含まれます。 次の表は、URL セーフな ASCII 文字と見なされる句読点を示しています。  
  
|文字|説明|  
|---------------|-----------------|  
|-|記号|  
|_|スコア|  
|.|ピリオド (ドット)|  
|!|感嘆符|  
|*|アスタリスク (星)|  
|(|始めかっこ|  
|)|右かっこ|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> が、0 未満か、<paramref name="bytes" /> 配列の長さを超えています。  
  
- または - 
 <paramref name="count" /> がゼロより小さいか、<paramref name="count" /> + <paramref name="offset" /> が <paramref name="bytes" /> 配列の長さより大きくなっています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member UrlPathEncode : string -&gt; string&#xA;override this.UrlPathEncode : string -&gt; string" Usage="httpEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">エンコードする文字列。</param>
        <summary>URL のサブセクションをエンコードします。</summary>
        <returns>URL エンコードされた文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> メソッドは、<xref:System.Web.HttpUtility.UrlPathEncode%2A> メソッドによって呼び出されます。 <xref:System.Web.HttpUtility.UrlPathEncode%2A> メソッドは、次の手順を実行します。  
  
-   <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> メソッドのエンコーディングロジックを URL のパス部分 (クエリ文字列を除く) にのみ適用します。 メソッドは、URL が UTF-8 文字列としてエンコードされていることを前提としています。  
  
-   最初の 128 ASCII 文字のサブセットのみが結果のエンコードされた文字列で使用されるように、スペース以外の文字をエンコードします。 Unicode 値128以上、または32以下の文字は、URL エンコードされます。  
  
-   スペースを %20 としてエンコードします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
