<Type Name="RequestValidator" FullName="System.Web.Util.RequestValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="41951616ffed628bd8a26682453027515a6bfc3d" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73398971" /></Metadata><TypeSignature Language="C#" Value="public class RequestValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RequestValidator" />
  <TypeSignature Language="F#" Value="type RequestValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>カスタムの要求検証のための基本メソッドを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、ASP.NET は、コードが要求から値を明示的に要求するまで、要求を検証しません。 たとえば、ASP.NET は、コードが <xref:System.Web.HttpRequest.QueryString%2A> コレクションにアクセスするまで、クエリ文字列の値を検証しません。 既定では、ASP.NET は、フォーム値、cookie、HTTP を使用してアップロードされたファイルの名前、<xref:System.Web.HttpRequest.RawUrl%2A> プロパティの値など、一部の種類の要求データも検証しません。  
  
 <xref:System.Web.Util.RequestValidator> クラスは、カスタム要求の検証を提供するために実装できる基本クラスです。 このクラスを実装することで、検証を実行するタイミングと検証を実行する要求データの種類を決定できます。  
  
 既定では、ASP.NET はクロスサイトスクリプティング (XSS) チェックを提供します。 ただし、XSS のカスタム実装を作成することによって、ASP.NET に用意されている要求検証ロジックを補完したり、置き換えたりすることができます。 たとえば、XSS 攻撃を確認するだけでなく、SQL インジェクション攻撃をスキャンするカスタム要求検証実装を作成することができます。  
  
 カスタム要求の検証を作成するには、<xref:System.Web.Util.RequestValidator> 基底クラスから派生するカスタムクラスを記述します。 次に、アプリケーションレベルの Web.config ファイルでカスタム要求検証を使用するように ASP.NET を構成します。 カスタムクラスは、App_Code フォルダー、Bin フォルダー内のコンパイル済みクラスライブラリ、または GAC 内のコンパイル済みクラスライブラリに配置できます。  
  
> [!NOTE]
>  アプリケーションに対して構成できるカスタム要求の検証の種類は1つだけです。 個々の仮想パスまたはページに対して異なる要求の検証の種類を構成することはできません。  
  
   
  
## Examples  
 次の例では、クエリ文字列の値に特定の文字列のみを使用できるようにするカスタム要求検証コントロールを作成する方法を示します。  
  
 [!code-csharp[System.Web.Util.RequestValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]
 [!code-vb[System.Web.Util.RequestValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  
  
 次の例は、アプリケーションの web.config ファイルでカスタム検証を使用するように ASP.NET を構成する方法を示しています。  
  
```  
<system.web>  
  <httpRuntime requestValidationType="CustomRequestValidation" />  
</system.web>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidationSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RequestValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.Util.RequestValidator" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator> クラスには、パラメーターなしのコンストラクターがあります。 クラスの新しいインスタンスが初期化されると、内部メソッドは、アプリケーションの構成情報からカスタム検証の詳細を取得します。 構成の詳細は <xref:System.Web.Configuration.HttpRuntimeSection> セクションに含まれています。 詳細については、「 [HttpRuntime 要素 (ASP.NET 設定スキーマ)](https://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) 」と「<xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A> 属性」を参照してください。  
  
 初期化中に、<xref:System.Web.Util.RequestValidator> クラスの1つのインスタンスが作成され、そのインスタンスへの参照が <xref:System.Web.Util.RequestValidator.Current%2A> プロパティに保持されます。 ASP.NET では、要求ごとに新しい要求検証のインスタンスは作成されません。 したがって、<xref:System.Web.Util.RequestValidator> クラスのカスタム実装はスレッドセーフである必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.RequestValidator Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.RequestValidator Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.RequestValidator.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As RequestValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::RequestValidator ^ Current { System::Web::Util::RequestValidator ^ get(); void set(System::Web::Util::RequestValidator ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.RequestValidator with get, set" Usage="System.Web.Util.RequestValidator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションで使用する現在の <see cref="T:System.Web.Util.RequestValidator" /> インスタンスへの参照を取得または設定します。</summary>
        <value><see cref="T:System.Web.Util.RequestValidator" /> クラスのインスタンス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator.Current%2A> プロパティは、<xref:System.Web.Util.RequestValidator> クラスの1つの許可されたインスタンスへの参照を保持します。 インスタンスが存在しない場合は、新しいインスタンスが作成されます。 インスタンスが既に存在する場合は、現在のインスタンスが返されます。  
  
 初期化中に、<xref:System.Web.Util.RequestValidator> クラスの1つのインスタンスが作成され、そのインスタンスへの参照が <xref:System.Web.Util.RequestValidator.Current%2A> プロパティで使用できるようになります。 ASP.NET では、要求ごとに新しい要求検証のインスタンスは作成されません。 したがって、<xref:System.Web.Util.RequestValidator> クラスのカスタム実装はスレッドセーフである必要があります。  
  
> [!NOTE]
>  プロパティが現在の <xref:System.Web.Util.RequestValidator> クラスへの参照を設定している間、<xref:System.Web.Util.RequestValidator.Current%2A> プロパティはスレッドセーフではありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsValidRequestString">
      <MemberSignature Language="C#" Value="public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeIsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InvokeIsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="member this.InvokeIsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string * int -&gt; bool" Usage="requestValidator.InvokeIsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="collectionKey" Type="System.String" Index="3" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="validationFailureIndex" Type="System.Int32" RefType="out" Index="4" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="context">要求の HTTP コンテキスト。</param>
        <param name="value">検証する HTTP 要求データ。</param>
        <param name="requestValidationSource">検証中の要求データのソースを表す列挙体。 この列挙体の有効な値を次に示します。 
-   <see langword="QueryString" />  
  
-   <see langword="Form" />  
  
-   <see langword="Cookies" />  
  
-   <see langword="Files" />  
  
-   <see langword="Path" />  
  
-   <see langword="PathInfo" />  
  
-   <see langword="Headers" /></param>
        <param name="collectionKey">(省略可能) 検証する項目の要求コレクション内のキー。 このパラメーターは、検証するデータをコレクションから取得する場合に使用します。 検証するデータをコレクションから取得しない場合、このパラメーターを <see langword="null" /> にすることができます。</param>
        <param name="validationFailureIndex">このメソッドが呼び出し元に復帰するときに、要求コレクション内の問題があるまたは無効なテキストの、0 から始まる開始点が示されます。 このパラメーターは初期化せずに渡されます。</param>
        <summary>HTTP 要求データを検証するために、保護された <see cref="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" /> メソッドを呼び出すパブリック メソッドを提供します。</summary>
        <returns>検証する文字列に、悪意のあるスクリプト攻撃で使用される可能性があるエンコードされていない文字が含まれていない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A> メソッドは、protected <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> メソッドへのパブリックアクセスを提供します。 これにより、<xref:System.Web.Util.RequestValidator> クラスのカスタムラッパークラスを作成し、<xref:System.Web.Util.RequestValidator> クラスから継承せずに <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> メソッドを呼び出すことができます。  
  
 要求の検証の詳細については、「<xref:System.Web.UnvalidatedRequestValues>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidRequestString">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool IsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool IsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="abstract member IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string * int -&gt; bool&#xA;override this.IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string * int -&gt; bool" Usage="requestValidator.IsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">現在の要求のコンテキスト。</param>
        <param name="value">検証する HTTP 要求データ。</param>
        <param name="requestValidationSource">検証中の要求データのソースを表す列挙体。 この列挙体の有効な値を次に示します。 
- <see langword="QueryString" />
- <see langword="Form " />
- <see langword="Cookies" />
- <see langword="Files" />
- <see langword="RawUrl" />
- <see langword="Path" />
- <see langword="PathInfo" />
- <see langword="Headers" /></param>
        <param name="collectionKey">検証する項目の要求コレクション内のキー。 このパラメーターは省略できます。 このパラメーターは、検証するデータをコレクションから取得する場合に使用します。 検証するデータをコレクションから取得しない場合、<paramref name="collectionKey" /> を <see langword="null" /> にすることができます。</param>
        <param name="validationFailureIndex">このメソッドが呼び出し元に復帰するときに、要求コレクション内の問題があるまたは無効なテキストの、0 から始まる開始点が示されます。 このパラメーターは初期化せずに渡されます。</param>
        <summary>HTTP 要求データを含む文字列を検証します。</summary>
        <returns>検証する文字列が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、要求データのカスタム検証を実行するために実装します。 <xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29> メソッドの基本動作は、クロスサイトスクリプトの検証で危険な文字列を確認するために ASP.NET が内部で実装する動作に似ています。 詳細については、「[方法: クロスサイトスクリプティングを ASP.NET で防ぐ](https://go.microsoft.com/fwlink/?LinkID=178708)」を参照してください。  
  
 カスタム検証ロジックによってエラーが検出された場合、このメソッドは `false` を返し、`validationFailureIndex` に値を指定して、エラーの原因となったテキストの開始点を示す必要があります。 `validationFailureIndex` の値は、0または正の整数である必要があります。  
  
 要求の検証チェックのロジックは、次のように処理されます。  
  
-   <xref:System.Web.HttpRequest> クラスは、受信データに対して null 文字の削除チェックを実行します。  
  
-   <xref:System.Web.HttpRequest> クラスは、<xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> メソッド (基本メソッドの既定の実装) を呼び出すか、メソッドの派生バージョンを呼び出します。  
  
-   <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> メソッドが `false` を返して検証エラーを示す場合、ASP.NET はエラー文字列 (必要に応じて) を構築し、<xref:System.Web.HttpRequestValidationException> 例外をスローします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
