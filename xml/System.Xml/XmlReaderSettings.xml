<Type Name="XmlReaderSettings" FullName="System.Xml.XmlReaderSettings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e3c59e44f7bf9c72392504479a14ba49cdf6d4ba" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75173884" /></Metadata><TypeSignature Language="C#" Value="public sealed class XmlReaderSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlReaderSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlReaderSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlReaderSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlReaderSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlReaderSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Xml.XmlReader" /> メソッドで作成された <see cref="Overload:System.Xml.XmlReader.Create" /> オブジェクトでサポートする一連の機能を指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlReader> インスタンスを取得するには、<xref:System.Xml.XmlReader.Create%2A> メソッドを使用します。 このメソッドは、<xref:System.Xml.XmlReaderSettings> クラスを使用して、作成する <xref:System.Xml.XmlReader> オブジェクトに実装する機能を指定します。  
  
 準拠のチェック、検証、およびその他の一般的なシナリオに使用する設定については、<xref:System.Xml.XmlReader> と <xref:System.Xml.XmlReader.Create%2A> リファレンスページの「解説」セクションを参照してください。 既定の設定の一覧については、<xref:System.Xml.XmlReaderSettings.%23ctor> コンストラクターを参照してください。  
  
## <a name="security-considerations"></a>セキュリティに関する考慮事項  
 <xref:System.Xml.XmlReaderSettings> クラスを使用する場合は、次の点を考慮してください。  
  
-   <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> オブジェクトの <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> および <xref:System.Xml.XmlReaderSettings> の検証フラグは、既定では設定されていません。 これらのフラグが設定されていると、<xref:System.Xml.XmlReaderSettings.XmlResolver%2A> オブジェクトの <xref:System.Xml.XmlReaderSettings> が <xref:System.Xml.XmlReader> のインスタンス ドキュメント中に出現したスキーマの場所を解決するために使用されます。 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> オブジェクトが `null`場合、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> および <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 検証フラグが設定されている場合でも、スキーマの場所は解決されません。  
  
-   検証を実行しているときにスキーマを追加すると新しい型が追加されるため、検証しているドキュメントの検証結果を変えることができます。 結果として、信頼できるソースからの外部スキーマだけが解決されるようにする必要があります。  
  
-   検証エラーメッセージによって、機密性の高いコンテンツモデル情報が公開される場合があります。 検証エラーおよび警告メッセージは <xref:System.Xml.Schema.ValidationEventHandler> デリゲートを使用して処理されます。また、<xref:System.Xml.XmlReaderSettings> オブジェクトにイベントハンドラーが提供されていない場合は <xref:System.Xml.Schema.XmlSchemaValidationException> として公開されます (検証の警告によって <xref:System.Xml.Schema.XmlSchemaValidationException> がスローされることはありません)。 このコンテンツモデル情報は、信頼されていないシナリオでは公開しないでください。 検証警告メッセージは既定では抑制され、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> フラグを設定することによって報告できます。  
  
-   <xref:System.Xml.Schema.XmlSchemaValidationException> の <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> プロパティは、例外の原因となったスキーマファイルへの URI パスを返します。 <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> プロパティは、信頼されていないシナリオでは公開しないでください。  
  
-   ドキュメントの大部分に対する id 制約を持つスキーマに対して、高可用性シナリオで、信頼されていない大規模な XML ドキュメントを検証する場合は、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> フラグ (既定で有効) を無効にすることをお勧めします。  
  
-   <xref:System.Xml.XmlReaderSettings> オブジェクトはユーザー資格情報など、重要な情報を含むことがあります。 <xref:System.Xml.XmlReaderSettings> オブジェクトをキャッシュしたり、<xref:System.Xml.XmlReaderSettings> オブジェクトをあるコンポーネントから別のコンポーネントに渡したりする場合には注意が必要です。  
  
-   既定で DTD の処理は無効になっています。 DTD 処理を有効にする場合は、信頼されていないソースの Dtd とサービス拒否攻撃の可能性について注意する必要があります。 <xref:System.Xml.XmlSecureResolver> を使用して、<xref:System.Xml.XmlReader> がアクセスできるリソースを制限します。  
  
-   信頼できないソースからの <xref:System.Xml.NameTable>、<xref:System.Xml.XmlNamespaceManager>、および <xref:System.Xml.XmlResolver> オブジェクトなどのサポート コンポーネントは受け入れないようにします。  
  
-   <xref:System.Xml.XmlReader> を使用するアプリケーションのメモリ使用量が、解析済み XML ドキュメントのサイズに相関する場合があります。 非常に大きな XML ドキュメントを送信して解析させることは、サービス拒否攻撃 (DoS) の一種です。 解析できるドキュメントのサイズを制限するには、<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A> プロパティを設定し、<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A> プロパティを設定して、エンティティを展開したときに生成される文字数を制限します。  
  
   
  
## Examples  
 次の例では、必要な資格情報を持つ <xref:System.Xml.XmlUrlResolver> を使用する <xref:System.Xml.XmlReader> を作成します。  
  
 [!code-csharp[XmlReader.Create#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#2)]
 [!code-vb[XmlReader.Create#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/data/xml/index.md">XML ドキュメントと XML データ</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Xml.XmlReaderSettings" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.XmlReaderSettings" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、<xref:System.Xml.XmlReaderSettings>のインスタンスのプロパティの初期値を示します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false` で初期化します。|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true` で初期化します。|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document> で初期化します。|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false` で初期化します。|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false` で初期化します。|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false` で初期化します。|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 (エンティティを展開したときに生成される文字数に制限はありません)。|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 (XML ドキュメントのサイズに制限はありません)。|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null` で初期化します。|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true` で初期化します。 このプロパティは今後使用しません。 代わりに、<xref:System.Xml.XmlTextReader.DtdProcessing%2A> を使用してください。 <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> を既定値に設定した場合は `true` <xref:System.Xml.XmlTextReader.DtdProcessing%2A> を `Prohibit`に設定します。 <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> をに設定した場合は `false` <xref:System.Xml.XmlTextReader.DtdProcessing%2A> を `Parse`に設定します。|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|空の <xref:System.Xml.Schema.XmlSchemaSet> オブジェクトです。|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> で初期化します。|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None> で初期化します。|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|新しい <xref:System.Xml.XmlUrlResolver> オブジェクト。|  
  
   
  
## Examples  
 次の例では、処理命令、コメント、および意味のない空白を除去するリーダーを構築するために使用できる設定オブジェクトを作成します。  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings (System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor(System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings(System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlReaderSettings : System.Xml.XmlResolver -&gt; System.Xml.XmlReaderSettings" Usage="new System.Xml.XmlReaderSettings resolver" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="resolver">XML リゾルバー。</param>
        <summary><see cref="T:System.Xml.XmlReaderSettings" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlReaderSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期 <see cref="T:System.Xml.XmlReader" /> メソッドを <see cref="T:System.Xml.XmlReader" /> の特定のインスタンスで使用できるかどうかを取得または設定します。</summary>
        <value>非同期メソッドを使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このインスタンスで非同期 <xref:System.Xml.XmlReader> メソッドを使用する場合は、新しい <xref:System.Xml.XmlReader> インスタンスを作成するときに、この値を `true` に設定する必要があります。 <xref:System.Xml.XmlReader> インスタンスが作成されると、<xref:System.Xml.XmlReaderSettings.Async%2A> プロパティは読み取り専用になります。 このプロパティの既定値は `false` です。  
  
 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> のオーバーロードでは、このフラグは無視されます。 つまり、既存の <xref:System.Xml.XmlReader>に基づいて新しい <xref:System.Xml.XmlReader> を作成する場合、非同期動作は入力 <xref:System.Xml.XmlReader>に依存し、<xref:System.Xml.XmlReaderSettings.Async%2A> フラグを使用して非同期動作を変更することはできません。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Async および Await を使用した非同期プログラミング (C# および Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>文字のチェックを行うかどうかを示す値を取得または設定します。</summary>
        <value>文字をチェックする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。  
  
 <block subset="none" type="note"><para>  
 <see cref="T:System.Xml.XmlReader" /> がテキスト データの処理を行う場合は、プロパティの設定に関係なく、XML 名とテキストの内容が有効であることを常にチェックします。 <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> を <see langword="false" /> に設定すると、文字エンティティ参照に対する文字のチェック機能がオフになります。  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、xml リーダーが読み取り中の XML データ内の文字をチェックし、有効な XML 文字の範囲外の文字がある場合は <xref:System.Xml.XmlException> をスローするように指示します。 文字チェックが有効な場合は、以下が保証されます。  
  
-   文字は、W3C 勧告『 XML 1.0 』の「 [2.2 文字](https://www.w3.org/TR/2006/REC-xml-20060816/#charsets)」セクションで定義されているように、有効な XML 文字の範囲内にあります。  
  
-   W3C 勧告『 XML 1.0 』の「 [2.3 共通の構文構造](https://www.w3.org/TR/2006/REC-xml-20060816/#NT-Name)」セクションで定義されているように、すべての XML 名が有効です。  
  
 このプロパティが既定の設定である `true`に設定されている場合、XML ファイルに無効な文字または無効な XML 名 (たとえば、要素名が数字で始まる) が含まれていると、<xref:System.Xml.XmlException> 例外がスローされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReaderSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReaderSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReaderSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlReaderSettings" Usage="xmlReaderSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.XmlReaderSettings" /> インスタンスのコピーを作成します。</summary>
        <returns>複製された <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複製された <xref:System.Xml.XmlReaderSettings> オブジェクトは、元のオブジェクトの設定に影響を与えることなく変更できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CloseInput">
      <MemberSignature Language="C#" Value="public bool CloseInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseInput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CloseInput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseInput : bool with get, set" Usage="System.Xml.XmlReaderSettings.CloseInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リーダーを閉じるときに基になるストリームまたは <see cref="T:System.IO.TextReader" /> を閉じる必要があるかどうかを示す値を取得または設定します。</summary>
        <value>リーダーを閉じるときに基になるストリームまたは <see langword="true" /> を閉じる場合は <see cref="T:System.IO.TextReader" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この設定は、ストリームまたは <xref:System.IO.TextReader> が <xref:System.Xml.XmlReader.Create%2A> メソッドに渡されるときに使用されます。 リーダーが URI を使用して作成された場合や、外部のドキュメント型定義を開いたときなど、独自の処理のためにリーダーによってストリームが作成された場合は、リーダーが閉じられると常に閉じられます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlReader" /> が従う準拠のレベルを取得または設定します。</summary>
        <value>XML リーダーが適用する準拠のレベルを指定する列挙値のいずれか。 既定値は、<see cref="F:System.Xml.ConformanceLevel.Document" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlReader.Create%2A> メソッドによって作成された XML リーダーは、既定では次のコンプライアンス要件を満たしています。  
  
-   新しい行と属性値は、W3C 勧告『 [XML 1.0 』](https://www.w3.org/TR/2006/REC-xml-20060816/)に従って正規化されます。  
  
-   すべてのエンティティが自動的に展開されます。  
  
-   ドキュメント型定義で宣言されている既定の属性は、リーダーが検証しない場合でも常に追加されます。  
  
-   正しい XML 名前空間 URI にマップされた XML プレフィックスの宣言は許可されています。  
  
-   1つの `Enumeration` 属性宣言内の単一の `NotationType` 属性宣言および `NmTokens` の表記名は、個別です。  
  
 <xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> プロパティを使用すると、読み取るストリームが整形式の XML 1.0 ドキュメントまたはドキュメントフラグメントの規則に準拠しているかどうかを確認し、保証できます。 データが準拠していない場合は、<xref:System.Xml.XmlException> 例外がスローされます。 既定値は <xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (ドキュメントレベルの一致) です。  
  
 準拠レベルには次の3つがあります。  
  
|設定|説明|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|XML データが整形式の XML 1.0 ドキュメントの規則に準拠していることを確認します。 このレベルのチェックにより、すべてのプロセッサが、整形[式の XML 1.0 ドキュメント](https://www.w3.org/TR/2006/REC-xml-20060816/#sec-well-formed)として読み取るストリームを使用できるようになります。<br /><br /> リーダーは以下をチェックします。<br /><br /> -最上位レベルの項目には、XML 宣言、ドキュメント型定義 (DTD)、要素、コメント、空白、または処理命令以外のノードを含めることはできません。<br />-XML データには、最上位レベルの要素ノードが1つだけ必要です。|  
|<xref:System.Xml.ConformanceLevel.Fragment>|XML データが整形式の XML 1.0 ドキュメントフラグメントの規則に準拠していることを確認します。<br /><br /> この設定では、複数のルート要素を持つ XML データやトップレベルのテキスト ノードが受け入れられます。 このレベルのチェックでは、すべてのプロセッサが[外部解析エンティティ](https://www.w3.org/TR/2006/REC-xml-20060816/#wf-entities)として読み取られるストリームを使用できることが保証されます。|  
|<xref:System.Xml.ConformanceLevel.Auto>|リーダーが受信データに基づいて一致チェックのレベルを決定することを指定します。<br /><br /> XML データに DTD 情報が含まれている場合、ドキュメントの一致チェックが適用されます。<br /><br /> XML データに次のいずれかが含まれている場合、フラグメントの一致チェックが適用されます。<br /><br /> -ルートレベルのテキスト、CDATA、またはエンティティ参照ノード。<br />-ルートレベルに複数の要素があります。<br />-ルートレベルに要素がありません。<br /><br /> ルート レベルにテキスト ノードと DTD があるなどの矛盾がある場合には <xref:System.Xml.XmlException> がスローされます。<br /><br /> この設定は、既存の <xref:System.Xml.XmlReader.Create%2A> に追加機能を追加するために <xref:System.Xml.XmlReader> メソッドが使われた場合のラップ シナリオで使用することができます。 この場合、<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> では新しい一致チェックは追加されません。 一致チェックはラップされている <xref:System.Xml.XmlReader> に任されます。|  
  
> [!NOTE]
>  XML 1.0 勧告では、DTD がある場合にはドキュメント レベルの一致が必要です。 したがって、リーダーが <xref:System.Xml.ConformanceLevel.Fragment?displayProperty=nameWithType>をサポートするように構成されているにもかかわらず、XML データにドキュメント型定義 (DTD) が含まれている場合は、<xref:System.Xml.XmlException> がスローされます。  
  
 <xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> プロパティの設定に応じて、リーダーが特定の準拠違反を処理する方法を次に示します。  
  
|条件|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|テキストまたは型指定された値が最上位レベルに表示されます。|<xref:System.Xml.XmlException> がスローされます。|この設定の違反とは見なされません。|この設定の違反とは見なされません。|  
|最上位レベルに複数の要素または要素は表示されません。|<xref:System.Xml.XmlException> がスローされます。|この設定の違反とは見なされません。|この設定の違反とは見なされません。|  
|最上位の項目は空白です。|この設定の違反とは見なされません。|この設定の違反とは見なされません。|この設定の違反とは見なされません。|  
|最上位の項目は、(テキストノードとして認識される) 属性です。|<xref:System.Xml.XmlException> がスローされます。|この設定の違反とは見なされません。|この設定の違反とは見なされません。|  
|複数の連続したテキスト ノードがある。|この設定の違反とは見なされません。|この設定の違反とは見なされません。|この設定の違反とは見なされません。|  
|同じ名前空間プレフィックスが同じローカルスコープ内で2回宣言されています。|<xref:System.Xml.XmlException> がスローされます。|<xref:System.Xml.XmlException> がスローされます。|<xref:System.Xml.XmlException> がスローされます。|  
|要素または属性の名前空間は、ローカルスコープ内に存在しません。|<xref:System.Xml.XmlException> がスローされます。|<xref:System.Xml.XmlException> がスローされます。|<xref:System.Xml.XmlException> がスローされます。|  
|データにプレフィックスと名前空間の不一致が含まれています。|<xref:System.Xml.XmlException> がスローされます。|<xref:System.Xml.XmlException> がスローされます。|<xref:System.Xml.XmlException> がスローされます。|  
|`xml:space` 属性に無効な値が含まれています。|<xref:System.Xml.XmlException> がスローされます。|<xref:System.Xml.XmlException> がスローされます。|<xref:System.Xml.XmlException> がスローされます。|  
|無効な名前が検出される。|<xref:System.Xml.XmlException> がスローされます。|<xref:System.Xml.XmlException> がスローされます。|<xref:System.Xml.XmlException> がスローされます。|  
|`xml` プレフィックスが http://www.w3.org/XML/1998/namespace URI と一致しません。|<xref:System.Xml.XmlException> がスローされます。|<xref:System.Xml.XmlException> がスローされます。|<xref:System.Xml.XmlException> がスローされます。|  
  
   
  
## Examples  
 次の例では、XML フラグメントを読み取る <xref:System.Xml.XmlReader> オブジェクトを作成します。  
  
 [!code-csharp[XmlReader.Create#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#1)]
 [!code-vb[XmlReader.Create#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DtdProcessing">
      <MemberSignature Language="C#" Value="public System.Xml.DtdProcessing DtdProcessing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.DtdProcessing DtdProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Property DtdProcessing As DtdProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::DtdProcessing DtdProcessing { System::Xml::DtdProcessing get(); void set(System::Xml::DtdProcessing value); };" />
      <MemberSignature Language="F#" Value="member this.DtdProcessing : System.Xml.DtdProcessing with get, set" Usage="System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.DtdProcessing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>DTD の処理を決定する値を取得または設定します。</summary>
        <value>DTD の処理を決定する列挙値の 1 つ。 既定値は、<see cref="F:System.Xml.DtdProcessing.Prohibit" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ドキュメント型定義 (DTD) の検証は、W3C[拡張マークアップ言語 (XML) 1.0 (第4版) 勧告](https://www.w3.org/TR/2006/REC-xml-20060816/)で定義されている有効性制約を使用して実装されます。 Dtd は、正式な文法を使用して、準拠する XML ドキュメントの構造と構文を記述します。これらは、XML ドキュメントに使用できるコンテンツと値を指定します。  
  
 このプロパティは、次の値のいずれか 1 つをとります。  
  
-   DTD 処理を有効にする <xref:System.Xml.DtdProcessing.Parse?displayProperty=nameWithType> ます。  
  
-   DTD が検出されたときに <xref:System.Xml.XmlException> 例外をスローするように <xref:System.Xml.DtdProcessing.Prohibit?displayProperty=nameWithType> します。  
  
-   警告または例外を使用せずに DTD 処理を無効にする <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType> ます。  
  
 DTD を基準として検証を実行する場合、<xref:System.Xml.XmlReader> は、XML ドキュメントの DOCTYPE 宣言で定義されている DTD を使用します。 DOCTYPE 宣言では、インラインの DTD を指定するか、または外部 DTD ファイルへの参照を指定できます。 DTD に対して XML ファイルを検証するには、次のようにします。  
  
-   <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A?displayProperty=nameWithType> プロパティを `DtdProcessing.Parse.` に設定します。  
  
-   <xref:System.Xml.XmlReaderSettings.ValidationType%2A?displayProperty=nameWithType> プロパティを `ValidationType.DTD` に設定します。  
  
-   DTD が認証を必要とするネットワーク上に格納された外部ファイルの場合は、<xref:System.Xml.XmlResolver> オブジェクトを必要な資格情報と共に <xref:System.Xml.XmlReader.Create%2A> メソッドに渡します。  
  
> [!IMPORTANT]
>  <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> プロパティが <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>に設定されている場合、<xref:System.Xml.XmlReader> は Dtd を報告しません。 これは、DTD/DOCTYPE が出力時に失われることを意味します。  
  
   
  
## Examples  
 DTD ファイルを使用して XML ファイルの検証を行う例を次に示します。  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
## <a name="input"></a>入力  
 この例は、`itemDTD.xml` ファイルを入力として使用します。  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreComments">
      <MemberSignature Language="C#" Value="public bool IgnoreComments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreComments" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreComments As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreComments { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreComments : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コメントを無視するかどうかを示す値を取得または設定します。</summary>
        <value>コメントを無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを `true` に設定すると、リーダーから複数の連続するテキストノードが返される可能性があります。 これは検証には影響しません。  
  
   
  
## Examples  
 次の例では、処理命令、コメント、および意味のない空白を除去するリーダーを構築するために使用できる設定オブジェクトを作成します。  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreProcessingInstructions">
      <MemberSignature Language="C#" Value="public bool IgnoreProcessingInstructions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreProcessingInstructions" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreProcessingInstructions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreProcessingInstructions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreProcessingInstructions : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>処理命令を無視するかどうかを示す値を取得または設定します。</summary>
        <value>処理命令を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを `true` に設定すると、リーダーから複数の連続するテキストノードが返される可能性があります。 これは検証には影響しません。  
  
   
  
## Examples  
 次の例では、処理命令、コメント、および意味のない空白を除去するリーダーを構築するために使用できる設定オブジェクトを作成します。  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreWhitespace">
      <MemberSignature Language="C#" Value="public bool IgnoreWhitespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWhitespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreWhitespace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreWhitespace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreWhitespace : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>意味のない空白を無視するかどうかを示す値を取得または設定します。</summary>
        <value>空白を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重要と見なされない空白には、スペース、タブ、およびマークアップの分離を設定して読みやすくするために使用される空白行が含まれます。 この例としては、要素コンテンツ内の空白文字があります。  
  
 このプロパティ設定は、混合コンテンツモードのマークアップ間の空白、または `xml:space='preserve'` 属性のスコープ内で発生する空白には影響しません。  
  
   
  
## Examples  
 次の例では、処理命令、コメント、および意味のない空白を除去するリーダーを構築するために使用できる設定オブジェクトを作成します。  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumberOffset">
      <MemberSignature Language="C#" Value="public int LineNumberOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumberOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LineNumberOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumberOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LineNumberOffset : int with get, set" Usage="System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlReader" /> オブジェクトの行番号オフセットを取得または設定します。</summary>
        <value>行番号オフセット。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A> 設定は、<xref:System.Xml.IXmlLineInfo.LineNumber%2A> プロパティのカウントを開始するポイントを決定します。 これは、XML データが大きなドキュメント内に埋め込まれている場合に便利です。 たとえば、XML データが大きなドキュメントに埋め込まれており、データがドキュメントの101行目で開始されている場合は、リーダーが100行目で開始するように指定することができます。 したがって、リーダーが XML の最初の行の解析中に例外をスローした場合、行番号は行1ではなく101行目として報告されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LinePositionOffset">
      <MemberSignature Language="C#" Value="public int LinePositionOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePositionOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LinePositionOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePositionOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LinePositionOffset : int with get, set" Usage="System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlReader" /> オブジェクトの行番号オフセットを取得または設定します。</summary>
        <value>ラインの位置のオフセット。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A> 設定は、<xref:System.Xml.IXmlLineInfo.LinePosition%2A> プロパティのカウントを開始するポイントを決定します。 これは、XML データが大きなドキュメント内に埋め込まれており、XML の先頭に改行がない場合に便利です。 この場合、XML の解析中にリーダーが例外をスローした場合、XML フラグメントを基準とした相対位置ではなく、メインドキュメントを基準とした行の位置を返す必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersFromEntities">
      <MemberSignature Language="C#" Value="public long MaxCharactersFromEntities { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersFromEntities" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersFromEntities As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersFromEntities { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxCharactersFromEntities : int64 with get, set" Usage="System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エンティティの展開時に許容されるドキュメント内の最大文字数を示す値を取得または設定します。</summary>
        <value>エンティティの展開時に許容される最大文字数。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ゼロ (0) の値は、エンティティを展開したときに発生する文字数に制限がないことを意味します。 0以外の値は、エンティティの展開によって生じる可能性のある最大文字数を指定します。  
  
 拡張されたサイズがこのプロパティを超えるようなエンティティを含むドキュメントをリーダーが読み取ろうとすると、<xref:System.Xml.XmlException> がスローされます。  
  
 このプロパティを使用すると、攻撃者が、エンティティの展開によってメモリの制限を超えようとする XML ドキュメントを送信するサービス拒否攻撃を軽減できます。 展開されたエンティティの文字数を制限することで、攻撃を検出し、確実に復旧できます。  
  
   
  
## Examples  
 次のコードでは、このプロパティを設定してから、設定された制限を超えるサイズに展開するエンティティを含むドキュメントを解析しようとしています。 実際のシナリオでは、有効なドキュメントを処理するのに十分な大きさの値にこの制限を設定しますが、悪意のあるドキュメントから脅威を制限するのは十分ではありません。  
  
```csharp  
string markup =  
@"<!DOCTYPE Root [  
  <!ENTITY anEntity ""Expands to more than 30 characters"">  
  <!ELEMENT Root (#PCDATA)>  
]>  
<Root>Content &anEntity;</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD;  
settings.MaxCharactersFromEntities = 30;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<!DOCTYPE Root [" + Environment.NewLine + _  
    "  <!ENTITY anEntity ""Expands to more than 30 characters"">" + Environment.NewLine + _  
    "  <!ELEMENT Root (#PCDATA)>" + Environment.NewLine + _  
    "]>" + Environment.NewLine + _  
    "<Root>Content &anEntity;</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD  
settings.MaxCharactersFromEntities = 30  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 この例を実行すると、次の出力が生成されます。  
  
```  
There is an error in XML document (MaxCharactersFromEntities, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersInDocument">
      <MemberSignature Language="C#" Value="public long MaxCharactersInDocument { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersInDocument" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersInDocument As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersInDocument { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxCharactersInDocument : int64 with get, set" Usage="System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML ドキュメントの最大文字数を示す値を取得または設定します。 ゼロ (0) の値は、XML ドキュメントのサイズに制限がないことを示します。 0 以外の値は、最大サイズを文字数で示します。</summary>
        <value>XML ドキュメント内の最大文字数。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ゼロ (0) の値は、解析されたドキュメント内の文字数に制限がないことを意味します。 0以外の値は、解析できる最大文字数を指定します。  
  
 ドキュメントの最大文字数には、展開されたエンティティの結果の文字数が含まれます。  
  
 リーダーがこのプロパティを超えるサイズのドキュメントを読み取ろうとすると、<xref:System.Xml.XmlException> がスローされます。  
  
 このプロパティを使用すると、攻撃者が非常に大きな XML ドキュメントを送信するサービス拒否攻撃を軽減できます。 ドキュメントのサイズを制限することで、攻撃を検出し、確実に復旧できます。  
  
   
  
## Examples  
 次のコードでは、このプロパティを設定してから、制限を超えるドキュメントを解析しようとしています。 実際のシナリオでは、有効なドキュメントを処理するのに十分な大きさの値にこの制限を設定しますが、悪意のあるドキュメントから脅威を制限するのは十分ではありません。  
  
```csharp  
string markup = "<Root>Content</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.MaxCharactersInDocument = 10;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = "<Root>Content</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.MaxCharactersInDocument = 10  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 このコードを実行すると、次の出力が生成されます。  
  
```  
There is an error in XML document (MaxCharactersInDocument, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); void set(System::Xml::XmlNameTable ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable with get, set" Usage="System.Xml.XmlReaderSettings.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最小単位に分割された文字列の比較に使用する <see cref="T:System.Xml.XmlNameTable" /> を取得または設定します。</summary>
        <value>この <see cref="T:System.Xml.XmlNameTable" /> オブジェクトを使用して作成されたすべての <see cref="T:System.Xml.XmlReader" /> インスタンスで使用する、最小単位に分割されたすべての文字列を格納する <see cref="T:System.Xml.XmlReaderSettings" />。  
  
既定値は、<see langword="null" /> です。 この値が <see cref="T:System.Xml.XmlReader" /> の場合、作成された <see cref="T:System.Xml.NameTable" /> インスタンスは、新しい空の <see langword="null" /> を使用します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 作成されたすべての <xref:System.Xml.XmlReader> インスタンス間で共通名テーブルを共有する場合は、このプロパティを <xref:System.Xml.XmlNameTable> インスタンスに設定します。  
  
> [!NOTE]
>  <xref:System.Xml.NameTable> クラスはスレッドセーフではありません。 したがって、異なるスレッドで同時に実行される <xref:System.Xml.XmlReader> オブジェクト間で共有することはできません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProhibitDtd">
      <MemberSignature Language="C#" Value="public bool ProhibitDtd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitDtd" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberSignature Language="VB.NET" Value="Public Property ProhibitDtd As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ProhibitDtd { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ProhibitDtd : bool with get, set" Usage="System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Obsolete("Use XmlReaderSettings.DtdProcessing property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>文書型定義 (DTD) 処理を禁止するかどうかを示す値を取得または設定します。 このプロパティは今後使用しません。 代わりに、<see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> を使用してください。</summary>
        <value>DTD 処理を禁止する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true`に設定すると、<xref:System.Xml.XmlReader> は DTD コンテンツが検出されたときに <xref:System.Xml.XmlException> をスローします。 サービス拒否攻撃が懸念される場合や、信頼関係のないソースを扱う場合は、DTD 処理を無効にしてください。  
  
 DTD 処理を有効にした場合、<xref:System.Xml.XmlSecureResolver> を使用して <xref:System.Xml.XmlReader> でアクセス可能なリソースを制限できます。 また、XML 処理に対するメモリと時間の割り当てが制限されるようにアプリケーションをデザインすることもできます。 たとえば、ASP.NET アプリケーション内でタイムアウト制限を設定します。  
  
 このプロパティは今後使用しません。 代わりに、<xref:System.Xml.XmlTextReader.DtdProcessing%2A> を使用してください。 <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> を既定値に設定した場合は `true` <xref:System.Xml.XmlTextReader.DtdProcessing%2A> を `Prohibit`に設定します。 <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> をに設定した場合は `false` <xref:System.Xml.XmlTextReader.DtdProcessing%2A> を `Parse`に設定します。  
  
   
  
## Examples  
 次の例では、DTD を使用してデータを検証します。  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
 この例では、入力として itemDTD .xml ファイルを使用します。  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlReaderSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>設定クラスのメンバーを既定値にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、<xref:System.Xml.XmlReaderSettings>のインスタンスのプロパティの初期値を示します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false` で初期化します。|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true` で初期化します。|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document> で初期化します。|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false` で初期化します。|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false` で初期化します。|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false` で初期化します。|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 (エンティティを展開したときに生成される文字数に制限はありません)。|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 (XML ドキュメントのサイズに制限はありません)。|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null` で初期化します。|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true` で初期化します。 このプロパティは今後使用しません。 代わりに、<xref:System.Xml.XmlTextReader.DtdProcessing%2A> を使用してください。 <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> を既定値に設定した場合は `true` <xref:System.Xml.XmlTextReader.DtdProcessing%2A> を `Prohibit`に設定します。 <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> をに設定した場合は `false` <xref:System.Xml.XmlTextReader.DtdProcessing%2A> を `Parse`に設定します。|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|空の <xref:System.Xml.Schema.XmlSchemaSet> オブジェクトです。|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> で初期化します。|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None> で初期化します。|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|新しい <xref:System.Xml.XmlUrlResolver> オブジェクト。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaSet Schemas" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Property Schemas As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaSet ^ Schemas { System::Xml::Schema::XmlSchemaSet ^ get(); void set(System::Xml::Schema::XmlSchemaSet ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Schemas : System.Xml.Schema.XmlSchemaSet with get, set" Usage="System.Xml.XmlReaderSettings.Schemas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スキーマの検証を行うときに使用する <see cref="T:System.Xml.Schema.XmlSchemaSet" /> を取得または設定します。</summary>
        <value>スキーマ検証を実行するときに使用する <see cref="T:System.Xml.Schema.XmlSchemaSet" />。 既定値は空の <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   不明または信頼できないソースまたは場所のスキーマは使用しないでください。 そうすることで、コードのセキュリティが損なわれます。  
> -   XML スキーマ (インラインスキーマを含む) は、サービス拒否攻撃に対して本質的に脆弱です。信頼されていないシナリオでは受け入れないでください。  
> -   スキーマ検証エラーメッセージと例外によって、コンテンツモデルまたはスキーマファイルへの URI パスに関する機密情報が公開される場合があります。 この情報を信頼されていない呼び出し元に公開しないように注意してください。  
> -   詳細については、「セキュリティに関する考慮事項」を参照してください。  
  
 <xref:System.Xml.Schema.XmlSchemaSet> クラスは、XML スキーマ定義言語 (XSD) スキーマのみをサポートしています。 <xref:System.Xml.XmlReader.Create%2A> メソッドによって作成された <xref:System.Xml.XmlReader> インスタンスは、XML データ削減 (XDR) スキーマ検証を有効にするように構成することはできません。  
  
## <a name="security-considerations"></a>セキュリティに関する考慮事項  
  
-   不明または信頼できないソースのスキーマは使用しないでください。 そうすることで、コードのセキュリティが損なわれます。 <xref:System.Xml.XmlUrlResolver> クラスは、既定で外部スキーマを解決するために使用されます。 スキーマの include、import、および redefine 要素の解決を無効にするには、<xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> プロパティを `null`に設定します。  
  
-   <xref:System.Xml.Schema.XmlSchemaException> クラスなどの <xref:System.Xml.Schema.XmlSchemaSet> クラスを使用した結果として発生した例外には、信頼されていないシナリオで公開してはならない機密情報が含まれている場合があります。 たとえば、<xref:System.Xml.Schema.XmlSchemaException> の <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> プロパティは、例外の原因となったスキーマファイルへの URI パスを返します。 <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> プロパティは、信頼されていないシナリオでは公開しないでください。 この機密情報が信頼できないシナリオで公開されないように、例外を適切に処理する必要があります。  
  
   
  
## Examples  
 次の例では、<xref:System.Xml.XmlReaderSettings> オブジェクトと <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> メソッドを使用して、スキーマを XML ドキュメントに関連付けます。 スキーマは、<xref:System.Xml.XmlReaderSettings> オブジェクトの <xref:System.Xml.XmlReaderSettings.Schemas%2A> プロパティに追加されます。 <xref:System.Xml.XmlReaderSettings.Schemas%2A> プロパティの値は <xref:System.Xml.Schema.XmlSchemaSet> オブジェクトです。 スキーマは、XML ドキュメントがスキーマコンテンツモデルに準拠していることを検証するために使用されます。 スキーマ検証エラーおよび警告は、<xref:System.Xml.XmlReaderSettings> オブジェクトで定義された <xref:System.Xml.XmlReaderSettings.ValidationEventHandler> によって処理されます。  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 この例では、books.xml ファイルを入力として使用します。  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 この例では、入力として books.xml ファイルを使用します。  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlReaderSettings.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リーダーが検証エラーを検出すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これらのイベントは、<xref:System.Xml.XmlReaderSettings.ValidationType%2A> が <xref:System.Xml.ValidationType.DTD> または <xref:System.Xml.ValidationType.Schema>のいずれかに設定されている場合、XML インスタンスドキュメントの読み取り中に発生します。 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> 設定が <xref:System.Xml.XmlReaderSettings.ValidationFlags%2A> プロパティで有効になっている場合、これらのイベントは、検証の警告が発生したときにも発生します。  
  
 リーダーが検証用に構成されていて、検証イベントハンドラーが設定されていない場合は、すべての検証エラーに対して <xref:System.Xml.Schema.XmlSchemaValidationException> がスローされます。 (検証の警告によって <xref:System.Xml.Schema.XmlSchemaValidationException> がスローされることはありません)。  
  
> [!IMPORTANT]
>  検証エラーメッセージによって、機密性の高いコンテンツモデル情報が公開される場合があります。 検証エラーおよび警告メッセージは <xref:System.Xml.Schema.ValidationEventHandler> デリゲートを使用して処理されます。また、<xref:System.Xml.XmlReaderSettings> オブジェクトにイベントハンドラーが提供されていない場合は <xref:System.Xml.Schema.XmlSchemaValidationException> として公開されます (検証の警告によって <xref:System.Xml.Schema.XmlSchemaValidationException> がスローされることはありません)。 このコンテンツモデル情報は、信頼されていないシナリオでは公開しないでください。 検証警告メッセージは既定では抑制され、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> フラグを設定することによって報告できます。  
>   
>  <xref:System.Xml.Schema.XmlSchemaValidationException> の <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> プロパティは、例外の原因となったスキーマファイルへの URI パスを返します。 <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> プロパティは、信頼されていないシナリオでは公開しないでください。  
  
   
  
## Examples  
 次の例では、インラインスキーマを使用して検証し、検証の警告を表示するリーダーを作成するように指定する設定を示します。 検証イベントハンドラーは、<xref:System.Xml.Schema.XmlSeverityType> 列挙体を使用して、警告とエラーを区別します。  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationFlags">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationFlags As XmlSchemaValidationFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaValidationFlags ValidationFlags { System::Xml::Schema::XmlSchemaValidationFlags get(); void set(System::Xml::Schema::XmlSchemaValidationFlags value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationFlags : System.Xml.Schema.XmlSchemaValidationFlags with get, set" Usage="System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaValidationFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スキーマ検証の設定を示す値を取得または設定します。 この設定は、スキーマを検証する <see cref="T:System.Xml.XmlReader" /> オブジェクトに適用されます (<see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> に設定されている <see langword="ValidationType.Schema" /> プロパティ)。</summary>
        <value>検証オプションを指定する列挙値のビットごとの組み合わせ。 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> および <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" /> は既定で有効になります。 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />、<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" />、および <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" /> は既定で無効になります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> オブジェクトの <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> および <xref:System.Xml.XmlReaderSettings> の検証フラグは、既定では設定されていません。 これらのフラグが設定されていると、<xref:System.Xml.XmlReaderSettings.XmlResolver%2A> オブジェクトの <xref:System.Xml.XmlReaderSettings> が <xref:System.Xml.XmlReader> のインスタンス ドキュメント中に出現したスキーマの場所を解決するために使用されます。 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> オブジェクトが `null`場合、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> および <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 検証フラグが設定されている場合でも、スキーマの場所は解決されません。  
>   
>  検証を実行しているときにスキーマを追加すると新しい型が追加されるため、検証しているドキュメントの検証結果を変えることができます。 結果として、信頼できるソースからの外部スキーマだけが解決されるようにする必要があります。  
>   
>  ドキュメントの大部分に対する id 制約を持つスキーマに対して、高可用性シナリオで、信頼されていない大規模な XML ドキュメントを検証する場合は、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> フラグ (既定で有効) を無効にすることをお勧めします。  
  
   
  
## Examples  
 次の例では、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 設定を有効にすることで、インライン XML スキーマに対して XML ファイルを検証します。 XML リーダーは検証の警告を表示するように構成されています。 sp には、ルート要素に対して予期される警告も表示されます。  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
## <a name="input"></a>入力  
 この例では、inlineSchema.xml ファイルを入力として使用します。  
  
 [!code-xml[XmlReaderSettings.IgnoreInlineSchema#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/XML/inlineSchema.xml#3)]  
  
## <a name="output"></a>出力  
 警告: 一致するスキーマが見つかりません。 検証が実行されませんでした。 要素 'root' のスキーマ情報が見つかりませんでした。  
  
 検証エラー: 要素 ' xsdHeadCount: 人員 ' に無効な子要素 ' 除算 ' が含まれています。 'ID' を指定してください。"  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationType">
      <MemberSignature Language="C#" Value="public System.Xml.ValidationType ValidationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ValidationType ValidationType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationType As ValidationType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ValidationType ValidationType { System::Xml::ValidationType get(); void set(System::Xml::ValidationType value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationType : System.Xml.ValidationType with get, set" Usage="System.Xml.XmlReaderSettings.ValidationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ValidationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlReader" /> で読み込むときに検証または型の割り当てを実行するかどうかを示す値を取得または設定します。</summary>
        <value>読み込むときに XmlReader で検証または型の割り当てを実行するかどうかを示す <see cref="T:System.Xml.ValidationType" /> 値の 1 つ。 既定値は、<see langword="ValidationType.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表では、<xref:System.Xml.ValidationType> の値について説明します。  
  
> [!NOTE]
>  <xref:System.Xml.ValidationType.Auto> と <xref:System.Xml.ValidationType.XDR> の列挙値は .NET Framework バージョン2.0 では廃止されています。  
  
|ValidationType|説明|  
|--------------------|-----------------|  
|`DTD`|検証は、ドキュメント型定義 (DTD) を使用して実行されます。 **注:** <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> プロパティも <xref:System.Xml.DtdProcessing.Parse>に設定する必要があります。|  
|`None`|<xref:System.Xml.XmlReader> は、データを検証したり、型の割り当てを実行したりすることはありません。|  
|`Schema`|検証と型の割り当ては、XML スキーマ定義言語 (XSD) スキーマを使用して実行されます。 リーダーは、次のものを使用して XML スキーマにアクセスします。<br /><br /> -<xref:System.Xml.XmlReaderSettings.Schemas%2A> プロパティを使用して、このリーダーに関連付けられた <xref:System.Xml.Schema.XmlSchemaSet> オブジェクトにアクセスします。<br />-XML インスタンスドキュメントに含まれているインラインスキーマを使用します。 (<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> オプションを有効にする必要があります)。<br />-XML インスタンスドキュメントにあるスキーマの場所のヒント (`xsi:schemaLocation` または `xsi:noNamespaceSchemaLocation` 属性) によって指定された XML スキーマを使用します。 (<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> オプションを有効にする必要があります)。|  
  
   
  
## Examples  
 次の例では、<xref:System.Xml.Schema.XmlSchemaSet>に格納されているスキーマを使用して検証を行います。  
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
 このサンプルでは、次の入力ファイルを使用します。  
  
 `booksSchemaFail.xml`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>外部ドキュメントへのアクセスに使用する <see cref="T:System.Xml.XmlResolver" /> を設定します。</summary>
        <value>外部ドキュメントへのアクセスに使用する <see cref="T:System.Xml.XmlResolver" />。 <see langword="null" /> に設定されている場合、<see cref="T:System.Xml.XmlException" /> が外部リソースにアクセスしようとすると、<see cref="T:System.Xml.XmlReader" /> がスローされます。 既定値は、資格情報のない新しい <see cref="T:System.Xml.XmlUrlResolver" /> です。  .NET Framework 4.5.2 以降では、この設定の既定値は <see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver> は、XML インスタンスドキュメントを検索して開くため、または XML インスタンスドキュメントによって参照される外部リソースを検索して開くために使用されます。 これには、エンティティ、DTD、またはスキーマを含めることができます。 <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=nameWithType> プロパティを使用して、ネットワーク認証に必要な資格情報を指定できます。  
  
> [!IMPORTANT]
>  <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> にはユーザーの資格情報などの機密情報が含まれている可能性があるため、<xref:System.Xml.XmlReaderSettings> オブジェクトをキャッシュする場合、または <xref:System.Xml.XmlReaderSettings> オブジェクトをあるコンポーネントから別のコンポーネントに渡す場合は注意が必要です。  
>   
>  外部ドキュメントへのアクセスには <xref:System.Xml.XmlSecureResolver> を使用できます。 <xref:System.Xml.XmlSecureResolver> クラスを使用すると、<xref:System.Xml.XmlResolver> オブジェクトをラップし、基になる <xref:System.Xml.XmlResolver> がアクセスできるリソースを制限することで、<xref:System.Xml.XmlResolver> の別の実装をセキュリティで保護することができます。  
>   
>  <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> オブジェクトの <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> および <xref:System.Xml.XmlReaderSettings> の検証フラグは、既定では設定されていません。 これらのフラグが設定されていると、<xref:System.Xml.XmlReaderSettings.XmlResolver%2A> オブジェクトの <xref:System.Xml.XmlReaderSettings> が <xref:System.Xml.XmlReader> のインスタンス ドキュメント中に出現したスキーマの場所を解決するために使用されます。 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> オブジェクトが `null`場合、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> および <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 検証フラグが設定されている場合でも、スキーマの場所は解決されません。  
>   
>  検証を実行しているときにスキーマを追加すると新しい型が追加されるため、検証しているドキュメントの検証結果を変えることができます。 結果として、信頼できるソースからの外部スキーマだけが解決されるようにする必要があります。  
  
   
  
## Examples  
 次の例では、既定の資格情報を持つ <xref:System.Xml.XmlSecureResolver> を使用する <xref:System.Xml.XmlReader> を作成します。  
  
 [!code-csharp[XmlReader.Create#10](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#10)]
 [!code-vb[XmlReader.Create#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
