<Type Name="XmlTextWriter" FullName="System.Xml.XmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d280f0077e37fa8a01164720535a2cf1a55380e9" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82483268" /></Metadata><TypeSignature Language="C#" Value="public class XmlTextWriter : System.Xml.XmlWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlTextWriter extends System.Xml.XmlWriter" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlTextWriter&#xA;Inherits XmlWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlTextWriter : System::Xml::XmlWriter" />
  <TypeSignature Language="F#" Value="type XmlTextWriter = class&#xA;    inherit XmlWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="aa88b-101">W3C 勧告『Extensible Markup Language (XML) 1.0』および勧告『Namespaces in XML』に準拠する XML データを格納するストリームまたはファイルを高速に、非キャッシュで、前方向に生成する方法を提供するライターを表します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-101">Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</span></span>  
  
<span data-ttu-id="aa88b-102">.NET Framework 2.0 以降では、代わりに <see cref="T:System.Xml.XmlWriter" /> クラスを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-102">Starting with the .NET Framework 2.0, we recommend that you use the <see cref="T:System.Xml.XmlWriter" /> class instead.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aa88b-103">このクラスは <xref:System.Xml.XmlWriter> クラスを実装します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-103">This class implements the <xref:System.Xml.XmlWriter> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-104">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-104">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-105">`XmlTextWriter` は、現在の要素スタックで定義されているすべての名前空間に対応する名前空間スタックを保持します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-105">`XmlTextWriter` maintains a namespace stack corresponding to all the namespaces defined in the current element stack.</span></span> <span data-ttu-id="aa88b-106">`XmlTextWriter` を使用すると、手動で名前空間を宣言できます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-106">Using `XmlTextWriter` you can declare namespaces manually.</span></span>  
  
```csharp  
w.WriteStartElement("root");  
w.WriteAttributeString("xmlns", "x", null, "urn:1");  
 w.WriteStartElement("item","urn:1");  
 w.WriteEndElement();  
 w.WriteStartElement("item","urn:1");  
 w.WriteEndElement();  
w.WriteEndElement();  
```  
  
 <span data-ttu-id="aa88b-107">上記の C# コードでは、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-107">The above C# code produces the following output.</span></span> <span data-ttu-id="aa88b-108">`XmlTextWriter` は、2つの子要素の間で重複しないように、名前空間の宣言をルート要素に昇格させます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-108">`XmlTextWriter` promotes the namespace declaration to the root element to avoid having it duplicated on the two child elements.</span></span> <span data-ttu-id="aa88b-109">子要素は、名前空間宣言からプレフィックスを取得します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-109">The child elements pick up the prefix from the namespace declaration.</span></span>  
  
```xml  
<root xmlns:x="urn:1">  
 <x:item/>  
 <x:item/>  
</x:root>  
```  
  
 <span data-ttu-id="aa88b-110">`XmlTextWriter` では、現在の名前空間宣言をオーバーライドすることもできます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-110">`XmlTextWriter` also allows you to override the current namespace declaration.</span></span> <span data-ttu-id="aa88b-111">次の例では、XML 要素 `<x:node xmlns:x="abc"/>`を生成するために、名前空間 URI "123" が "abc" によってオーバーライドされています。</span><span class="sxs-lookup"><span data-stu-id="aa88b-111">In the following example, the namespace URI "123" is overridden by "abc" to produce the XML element `<x:node xmlns:x="abc"/>`.</span></span>  
  
```csharp  
w.WriteStartElement("x","node","123");  
w.WriteAttributeString("xmlns","x",null,"abc");  
```  
  
 <span data-ttu-id="aa88b-112">プレフィックスを引数として受け取る write メソッドを使用して、使用するプレフィックスを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-112">By using the write methods that take a prefix as an argument you can also specify which prefix to use.</span></span> <span data-ttu-id="aa88b-113">次の例では、XML テキスト `<x:root xmlns:x="urn:1"><y:item xmlns:y="urn:1"/></x:root>`を生成するために、2つの異なるプレフィックスが同じ名前空間 URI にマップされています。</span><span class="sxs-lookup"><span data-stu-id="aa88b-113">In the following example, two different prefixes are mapped to the same namespace URI to produce the XML text `<x:root xmlns:x="urn:1"><y:item xmlns:y="urn:1"/></x:root>`.</span></span>  
  
```csharp  
XmlTextWriter w = new XmlTextWriter(Console.Out);  
w.WriteStartElement("x","root","urn:1");  
 w.WriteStartElement("y","item","urn:1");  
 w.WriteEndElement();  
w.WriteEndElement();  
w.Close();  
```  
  
 <span data-ttu-id="aa88b-114">異なるプレフィックスを同じ名前空間 URI にマッピングする複数の名前空間宣言がある場合、`XmlTextWriter` は、名前空間宣言のスタックを後方にウォークし、最も近いものを選択します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-114">If there are multiple namespace declarations mapping different prefixes to the same namespace URI, `XmlTextWriter` walks the stack of namespace declarations backwards and picks the closest one.</span></span>  
  
```csharp  
XmlTextWriter w = new XmlTextWriter(Console.Out);  
w.Formatting = Formatting.Indented;  
w.WriteStartElement("x","root","urn:1");  
w.WriteStartElement("y","item","urn:1");  
w.WriteAttributeString("attr","urn:1","123");  
w.WriteEndElement();  
w.WriteEndElement();  
w.Close();  
```  
  
 <span data-ttu-id="aa88b-115">上記の C# 例であるため、`WriteAttributeString`呼び出しは、プレフィックスを指定しない場合、ライターの名前空間スタックにプッシュされた最後のプレフィックスを使用して、次の XML が生成されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-115">In the above C# example, because the `WriteAttributeString` call does not specify a prefix, the writer uses the last prefix pushed onto the namespace stack, and produces the following XML:</span></span>  
  
```xml  
<x:root xmlns:x="urn:1">  
 <y:item y:attr="123" xmlns:y="urn:1" />  
</x:root>  
```  
  
 <span data-ttu-id="aa88b-116">名前空間の競合が発生した場合、`XmlTextWriter` は代替プレフィックスを生成して解決します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-116">If namespace conflicts occur, `XmlTextWriter` resolves them by generating alternate prefixes.</span></span> <span data-ttu-id="aa88b-117">たとえば、属性と要素のプレフィックスが同じで名前空間が異なる場合、`XmlWriter` によって属性の代替プレフィックスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-117">For example, if an attribute and element have the same prefix but different namespaces, `XmlWriter` generates an alternate prefix for the attribute.</span></span> <span data-ttu-id="aa88b-118">生成されるプレフィックスには `n{i}` という名前が付けられます。 `i` は1から始まる数値です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-118">The generated prefixes are named `n{i}` where `i` is a number beginning at 1.</span></span> <span data-ttu-id="aa88b-119">要素ごとに、数値が1にリセットされます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-119">The number is reset to 1 for each element.</span></span>  
  
 <span data-ttu-id="aa88b-120">名前空間 URI に関連付けられている属性にはプレフィックスが必要です (既定の名前空間は属性には適用されません)。</span><span class="sxs-lookup"><span data-stu-id="aa88b-120">Attributes which are associated with a namespace URI must have a prefix (default namespaces do not apply to attributes).</span></span> <span data-ttu-id="aa88b-121">これは、XML 勧告の W3C 名前空間のセクション5.2 に準拠しています。</span><span class="sxs-lookup"><span data-stu-id="aa88b-121">This conforms to section 5.2 of the W3C Namespaces in XML recommendation.</span></span> <span data-ttu-id="aa88b-122">属性が名前空間 URI を参照していても、プレフィックスが指定されていない場合、ライターはその属性のプレフィックスを生成します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-122">If an attribute references a namespace URI, but does not specify a prefix, the writer generates a prefix for the attribute.</span></span>  
  
 <span data-ttu-id="aa88b-123">空の要素を書き込むと、タグ名と終了タグの間に追加のスペースが追加されます (`<item />`など)。</span><span class="sxs-lookup"><span data-stu-id="aa88b-123">When writing an empty element, an additional space is added between tag name and the closing tag, for example `<item />`.</span></span> <span data-ttu-id="aa88b-124">これにより、古いブラウザーとの互換性が提供されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-124">This provides compatibility with older browsers.</span></span>  
  
 <span data-ttu-id="aa88b-125">`String` がメソッドパラメーターとして使用されている場合、`null` と `String.Empty` は同等です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-125">When a `String` is used as method parameter, `null` and `String.Empty` are equivalent.</span></span> <span data-ttu-id="aa88b-126">`String.Empty` は W3C 規則に従います。</span><span class="sxs-lookup"><span data-stu-id="aa88b-126">`String.Empty` follows the W3C rules.</span></span>  
  
 <span data-ttu-id="aa88b-127">厳密に型指定されたデータを書き込むには、<xref:System.Xml.XmlConvert> クラスを使用して、データ型を文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-127">To write strongly typed data, use the <xref:System.Xml.XmlConvert> class to convert data types to string.</span></span> <span data-ttu-id="aa88b-128">たとえば、次の C# コードはからデータを変換します。`Double`に`String`要素を書き込み、`<price>19.95</price>`します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-128">For example, the following C# code converts the data from `Double` to `String` and writes the element `<price>19.95</price>`.</span></span>  
  
```csharp  
Double price = 19.95;  
writer.WriteElementString("price", XmlConvert.ToString(price));  
```  
  
 <span data-ttu-id="aa88b-129">`XmlTextWriter` は、次のことを確認しません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-129">`XmlTextWriter` does not check for the following:</span></span>  
  
-   <span data-ttu-id="aa88b-130">属性名と要素名に無効な文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="aa88b-130">Invalid characters in attribute and element names.</span></span>  
  
-   <span data-ttu-id="aa88b-131">指定されたエンコードに合わない Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="aa88b-131">Unicode characters that do not fit the specified encoding.</span></span> <span data-ttu-id="aa88b-132">Unicode 文字が指定されたエンコードに合わない場合、`XmlTextWriter` は Unicode 文字を文字エンティティにエスケープしません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-132">If the Unicode characters do not fit the specified encoding, the `XmlTextWriter` does not escape the Unicode characters into character entities.</span></span>  
  
-   <span data-ttu-id="aa88b-133">重複する属性。</span><span class="sxs-lookup"><span data-stu-id="aa88b-133">Duplicate attributes.</span></span>  
  
-   <span data-ttu-id="aa88b-134">DOCTYPE のパブリック識別子またはシステム識別子の文字。</span><span class="sxs-lookup"><span data-stu-id="aa88b-134">Characters in the DOCTYPE public identifier or system identifier.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="aa88b-135">セキュリティの考慮事項</span><span class="sxs-lookup"><span data-stu-id="aa88b-135">Security Considerations</span></span>  
 <span data-ttu-id="aa88b-136"><xref:System.Xml.XmlTextWriter> クラスを使用する場合は、次の点を考慮する必要があります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-136">The following items are things to consider when working with the <xref:System.Xml.XmlTextWriter> class.</span></span>  
  
-   <span data-ttu-id="aa88b-137"><xref:System.Xml.XmlTextWriter> によってスローされた例外は、アプリケーションに通知する必要のないパス情報を開示できます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-137">Exceptions thrown by the <xref:System.Xml.XmlTextWriter> can disclose path information that you do not want bubbled up to the application.</span></span> <span data-ttu-id="aa88b-138">アプリケーションは例外をキャッチし、それらを適切に処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-138">Your applications must catch exceptions and process them appropriately.</span></span>  
  
-   <span data-ttu-id="aa88b-139"><xref:System.Xml.XmlTextWriter> を別のアプリケーションに渡すと、下位のストリームがそのアプリケーションに公開されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-139">When you pass the <xref:System.Xml.XmlTextWriter> to another application the underlying stream is exposed to that application.</span></span> <span data-ttu-id="aa88b-140"><xref:System.Xml.XmlTextWriter> を信頼度の低いアプリケーションに渡す必要がある場合は、代わりに <xref:System.Xml.XmlWriter> メソッドによって作成される <xref:System.Xml.XmlWriter.Create%2A> オブジェクトを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-140">If you need to pass the <xref:System.Xml.XmlTextWriter> to a semi-trusted application, you should use an <xref:System.Xml.XmlWriter> object created by the <xref:System.Xml.XmlWriter.Create%2A> method instead.</span></span>  
  
-   <span data-ttu-id="aa88b-141"><xref:System.Xml.XmlTextWriter> では、<xref:System.Xml.XmlTextWriter.WriteDocType%2A> または <xref:System.Xml.XmlTextWriter.WriteRaw%2A> メソッドに渡されるデータは検証されません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-141">The <xref:System.Xml.XmlTextWriter> does not validate any data that is passed to the <xref:System.Xml.XmlTextWriter.WriteDocType%2A> or <xref:System.Xml.XmlTextWriter.WriteRaw%2A> methods.</span></span> <span data-ttu-id="aa88b-142">これらのメソッドには、任意のデータを渡さないでください。</span><span class="sxs-lookup"><span data-stu-id="aa88b-142">You should not pass arbitrary data to these methods.</span></span>  
  
-   <span data-ttu-id="aa88b-143">既定の設定が変更された場合、生成された出力が整形式の XML データであることは保証されません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-143">If the default settings are changed, there is no guarantee that the generated output is well-formed XML data.</span></span>  
  
-   <span data-ttu-id="aa88b-144">信頼できないソースからの <xref:System.Text.Encoding> オブジェクトなどのサポートコンポーネントは受け入れないでください。</span><span class="sxs-lookup"><span data-stu-id="aa88b-144">Do not accept supporting components, such as an <xref:System.Text.Encoding> object, from an untrusted source.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/data/xml/index.md"><span data-ttu-id="aa88b-145">XML ドキュメントと XML データ</span><span class="sxs-lookup"><span data-stu-id="aa88b-145">XML Documents and Data</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="aa88b-146"><see langword="XmlTextWriter" /> クラスのインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-146">Creates an instance of the <see langword="XmlTextWriter" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-147">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-147">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextWriter (System.IO.TextWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (w As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextWriter(System::IO::TextWriter ^ w);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextWriter : System.IO.TextWriter -&gt; System.Xml.XmlTextWriter" Usage="new System.Xml.XmlTextWriter w" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="w" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="w"><span data-ttu-id="aa88b-148">書き込み先の <see langword="TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="aa88b-148">The <see langword="TextWriter" /> to write to.</span></span> <span data-ttu-id="aa88b-149"><see langword="TextWriter" /> が既に正しいエンコーディングに設定されていることを前提にしています。</span><span class="sxs-lookup"><span data-stu-id="aa88b-149">It is assumed that the <see langword="TextWriter" /> is already set to the correct encoding.</span></span></param>
        <summary><span data-ttu-id="aa88b-150">指定した <see cref="T:System.IO.TextWriter" /> を使用して <see langword="XmlTextWriter" /> クラスのインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-150">Creates an instance of the <see langword="XmlTextWriter" /> class using the specified <see cref="T:System.IO.TextWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-151">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-151">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextWriter (System.IO.Stream w, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream w, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (w As Stream, encoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextWriter(System::IO::Stream ^ w, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextWriter : System.IO.Stream * System.Text.Encoding -&gt; System.Xml.XmlTextWriter" Usage="new System.Xml.XmlTextWriter (w, encoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="w" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="w"><span data-ttu-id="aa88b-152">書き込み先のストリーム。</span><span class="sxs-lookup"><span data-stu-id="aa88b-152">The stream to which you want to write.</span></span></param>
        <param name="encoding"><span data-ttu-id="aa88b-153">生成するエンコーディング。</span><span class="sxs-lookup"><span data-stu-id="aa88b-153">The encoding to generate.</span></span> <span data-ttu-id="aa88b-154">エンコーディングが <see langword="null" /> の場合は、ストリームを UTF-8 として書き込み、<see langword="ProcessingInstruction" /> からエンコーディング属性を省略します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-154">If encoding is <see langword="null" /> it writes out the stream as UTF-8 and omits the encoding attribute from the <see langword="ProcessingInstruction" />.</span></span></param>
        <summary><span data-ttu-id="aa88b-155">指定したストリームおよびエンコーディングを使用して、<see langword="XmlTextWriter" /> クラスのインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-155">Creates an instance of the <see langword="XmlTextWriter" /> class using the specified stream and encoding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-156">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-156">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-157">エンコーディングがサポートされていないか、ストリームに書き込むことができません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-157">The encoding is not supported or the stream cannot be written to.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aa88b-158"><paramref name="w" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-158"><paramref name="w" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextWriter (string filename, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, encoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextWriter(System::String ^ filename, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextWriter : string * System.Text.Encoding -&gt; System.Xml.XmlTextWriter" Usage="new System.Xml.XmlTextWriter (filename, encoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="filename"><span data-ttu-id="aa88b-159">書き込むファイル名。</span><span class="sxs-lookup"><span data-stu-id="aa88b-159">The filename to write to.</span></span> <span data-ttu-id="aa88b-160">ファイルが存在する場合は、ファイルを切り詰め、新しい内容で上書きします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-160">If the file exists, it truncates it and overwrites it with the new content.</span></span></param>
        <param name="encoding"><span data-ttu-id="aa88b-161">生成するエンコーディング。</span><span class="sxs-lookup"><span data-stu-id="aa88b-161">The encoding to generate.</span></span> <span data-ttu-id="aa88b-162">エンコーディングが <see langword="null" /> の場合は、ファイルを UTF-8 として書き込み、<see langword="ProcessingInstruction" /> からエンコーディング属性を省略します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-162">If encoding is <see langword="null" /> it writes the file out as UTF-8, and omits the encoding attribute from the <see langword="ProcessingInstruction" />.</span></span></param>
        <summary><span data-ttu-id="aa88b-163">指定したファイルを使用して <see cref="T:System.Xml.XmlTextWriter" /> クラスのインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-163">Creates an instance of the <see cref="T:System.Xml.XmlTextWriter" /> class using the specified file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-164">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-164">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-165">エンコーディングがサポートされていません。ファイル名が空で、空白しか含んでいないか、無効な文字を 1 つ以上含んでいます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-165">The encoding is not supported; the filename is empty, contains only white space, or contains one or more invalid characters.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="aa88b-166">アクセスが拒否されました。</span><span class="sxs-lookup"><span data-stu-id="aa88b-166">Access is denied.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aa88b-167">ファイル名が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-167">The filename is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="aa88b-168">書き込むディレクトリが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-168">The directory to write to is not found.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="aa88b-169">ファイル名には、ファイル名、ディレクトリ名、またはボリューム ラベルの不正な構文または無効な構文が含まれています。</span><span class="sxs-lookup"><span data-stu-id="aa88b-169">The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="aa88b-170">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-170">The caller does not have the required permission.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream BaseStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BaseStream" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.BaseStream" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ BaseStream { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseStream : System.IO.Stream" Usage="System.Xml.XmlTextWriter.BaseStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="aa88b-171">基になるストリーム オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-171">Gets the underlying stream object.</span></span></summary>
        <value><span data-ttu-id="aa88b-172"><see langword="XmlTextWriter" /> の書き込み先のストリーム。<see cref="T:System.IO.TextWriter" /> クラスから継承されない <see cref="T:System.IO.StreamWriter" /> を使用して <see langword="null" /> が構築された場合は <see langword="XmlTextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="aa88b-172">The stream to which the <see langword="XmlTextWriter" /> is writing or <see langword="null" /> if the <see langword="XmlTextWriter" /> was constructed using a <see cref="T:System.IO.TextWriter" /> that does not inherit from the <see cref="T:System.IO.StreamWriter" /> class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-173">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-173">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-174">`StreamWriter` クラスから派生した `TextWriter` を使用してライターを構築した場合、このプロパティは <xref:System.IO.StreamWriter.BaseStream%2A?displayProperty=nameWithType> プロパティと同じになります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-174">If the writer was constructed using a `TextWriter` that is derived from the `StreamWriter` class, this property is equivalent to the <xref:System.IO.StreamWriter.BaseStream%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="aa88b-175">ライターが <xref:System.IO.Stream>を使用して構築された場合、このプロパティは、コンストラクターに渡された `Stream` を返します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-175">If the writer was constructed using a <xref:System.IO.Stream>, this property returns the `Stream` passed to the constructor.</span></span> <span data-ttu-id="aa88b-176">ファイル名を使用してライターが構築された場合、このプロパティはファイルを表す `Stream` を返します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-176">If the writer was constructed using a file name, this property returns the `Stream` representing the file.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlTextWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="aa88b-177">このストリームおよび基になるストリームを閉じます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-177">Closes this stream and the underlying stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-178">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-178">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-179">開いている要素または属性は、自動的に閉じられます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-179">Any elements or attributes left open are automatically closed.</span></span>  
  
 <span data-ttu-id="aa88b-180">このメソッドは、例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-180">This method does not throw any exceptions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-181">次の例では、XML フラグメントを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-181">The following example writes an XML fragment.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="xmlTextWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="aa88b-182">バッファー内のデータをすべて基になるストリームにフラッシュし、基になるストリームもフラッシュします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-182">Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-183">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-183">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-184">これは、バッファー内の残りの部分を失うことなく、基になるストリームにさらに書き込む必要がある場合に、<xref:System.Xml.XmlTextWriter.Close%2A> の代わりに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-184">This is called instead of <xref:System.Xml.XmlTextWriter.Close%2A> when you want to write more to the underlying stream without losing what is still in the buffer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-185">次の例では、2つの XML フラグメントを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-185">The following example writes out two XML fragments.</span></span>  
  
 [!code-cpp[XmlTextWriter.Flush#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextWriter.Flush/CPP/write2docs.cpp#1)]
 [!code-csharp[XmlTextWriter.Flush#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextWriter.Flush/CS/write2docs.cs#1)]
 [!code-vb[XmlTextWriter.Flush#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextWriter.Flush/VB/write2docs.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Formatting">
      <MemberSignature Language="C#" Value="public System.Xml.Formatting Formatting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Formatting Formatting" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.Formatting" />
      <MemberSignature Language="VB.NET" Value="Public Property Formatting As Formatting" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Formatting Formatting { System::Xml::Formatting get(); void set(System::Xml::Formatting value); };" />
      <MemberSignature Language="F#" Value="member this.Formatting : System.Xml.Formatting with get, set" Usage="System.Xml.XmlTextWriter.Formatting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Formatting</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="aa88b-186">出力の書式設定方法を示します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-186">Indicates how the output is formatted.</span></span></summary>
        <value><span data-ttu-id="aa88b-187"><see cref="T:System.Xml.Formatting" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="aa88b-187">One of the <see cref="T:System.Xml.Formatting" /> values.</span></span> <span data-ttu-id="aa88b-188">既定値は <see langword="Formatting.None" /> (特定の書式設定なし) です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-188">The default is <see langword="Formatting.None" /> (no special formatting).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-189">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-189">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-190">`Indented` オプションが設定されている場合、子要素は <xref:System.Xml.XmlTextWriter.Indentation%2A> プロパティと <xref:System.Xml.XmlTextWriter.IndentChar%2A> プロパティを使用してインデントされます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-190">If the `Indented` option is set, child elements are indented using the <xref:System.Xml.XmlTextWriter.Indentation%2A> and <xref:System.Xml.XmlTextWriter.IndentChar%2A> properties.</span></span> <span data-ttu-id="aa88b-191">要素のコンテンツのみがインデントされます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-191">Only element content is indented.</span></span> <span data-ttu-id="aa88b-192">次C#のコードは、混合コンテンツを含む HTML 要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-192">The following C# code writes out HTML elements including mixed content:</span></span>  
  
```csharp  
XmlTextWriter w = new XmlTextWriter(Console.Out);   
 w.Formatting = Formatting.Indented;   
 w.WriteStartElement("ol");   
 w.WriteStartElement("li");   
 w.WriteString("The big "); // This means "li" now has a mixed content model.  
 w.WriteElementString("b", "E");   
 w.WriteElementString("i", "lephant");   
 w.WriteString(" walks slowly.");   
 w.WriteEndElement();   
 w.WriteEndElement();  
```  
  
 <span data-ttu-id="aa88b-193">上記のコードでは、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-193">The above code produces the following output:</span></span>  
  
```xml  
<ol>   
  <li>The big <b>E</b><i>lephant</i> walks slowly.</li>   
</ol>  
```  
  
 <span data-ttu-id="aa88b-194">これを HTML で表示すると、太字と斜体の要素の間に空白が表示されません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-194">When this is viewed in HTML no white space appears between the bold and italic elements.</span></span> <span data-ttu-id="aa88b-195">実際、この例では、これらの要素の間にインデントが追加されると、"象" という単語が誤って分割されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-195">In fact, in this example, if indenting was added between these elements the word "Elephant" would be incorrectly broken.</span></span>  
  
> [!NOTE]
> <span data-ttu-id="aa88b-196">テキストコンテンツの書き込み (`String.Empty` を除く)。この要素は混合コンテンツモードになります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-196">Writing any text content, excluding `String.Empty` puts that element into mixed content mode.</span></span> <span data-ttu-id="aa88b-197">子要素は、この "mixed" モードの状態を継承しません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-197">Child elements do not inherit this "mixed" mode status.</span></span> <span data-ttu-id="aa88b-198">"Mixed" 要素の子要素には、"mixed" コンテンツも含まれていない限り、インデントが行われます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-198">A child element of a "mixed" element does indenting, unless it is also contains "mixed" content.</span></span> <span data-ttu-id="aa88b-199">[要素の内容](https://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content)と[混合コンテンツ](https://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content)は、これらの用語の XML 1.0 定義に従って定義されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-199">[Element content](https://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content) and [mixed content](https://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content) are defined according to the XML 1.0 definitions of these terms.</span></span>  
  
## Examples  
 <span data-ttu-id="aa88b-200">次の例では、XML フラグメントを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-200">The following example writes an XML fragment.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="Indentation">
      <MemberSignature Language="C#" Value="public int Indentation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indentation" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.Indentation" />
      <MemberSignature Language="VB.NET" Value="Public Property Indentation As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Indentation { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Indentation : int with get, set" Usage="System.Xml.XmlTextWriter.Indentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="aa88b-201"><see cref="P:System.Xml.XmlTextWriter.Formatting" /> を <see langword="Formatting.Indented" /> に設定するときに、階層構造のレベルごとに書き込む IndentChar の数を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-201">Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="P:System.Xml.XmlTextWriter.Formatting" /> is set to <see langword="Formatting.Indented" />.</span></span></summary>
        <value><span data-ttu-id="aa88b-202">各レベルの <see langword="IndentChars" /> の数。</span><span class="sxs-lookup"><span data-stu-id="aa88b-202">Number of <see langword="IndentChars" /> for each level.</span></span> <span data-ttu-id="aa88b-203">既定値は 2 です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-203">The default is 2.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-204">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-204">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-205">インデントは、`DocumentType`、`Element`、`Comment`、`ProcessingInstruction`、および `CDATASection`のノードの種類に対して実行されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-205">Indentation is performed on following node types: `DocumentType`, `Element`, `Comment`, `ProcessingInstruction`, and `CDATASection`.</span></span> <span data-ttu-id="aa88b-206">その他のすべてのノード型は影響を受けません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-206">All other node types are not affected.</span></span> <span data-ttu-id="aa88b-207">`XmlTextWriter` は、内部 DTD サブセットをインデントしません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-207">The `XmlTextWriter` does not indent the internal DTD subset.</span></span> <span data-ttu-id="aa88b-208">ただし、内部の DTD サブセットに書式を適用するには、次の操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-208">However, you could do the following to apply formatting to the internal DTD subset.</span></span>  
  
```csharp  
String name = "Employees";  
String pubid = null;  
String sysid = null;  
String subset =  
@"  
    <!ELEMENT Employees (Employee)+>  
    <!ELEMENT Employee EMPTY>  
    <!ATTLIST Employee firstname CDATA #REQUIRED>  
    <!ENTITY Company 'Microsoft'>]>  
";  
XmlTextWriter tw = new XmlTextWriter(Console.Out);  
tw.WriteDocType(name, pubid, sysid, subset);  
```  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-209">次の例では、XML フラグメントを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-209">The following example writes an XML fragment.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-210">このプロパティを負の値に設定。</span><span class="sxs-lookup"><span data-stu-id="aa88b-210">Setting this property to a negative value.</span></span></exception>
        <altmember cref="P:System.Xml.XmlTextWriter.IndentChar" />
        <altmember cref="T:System.Xml.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="IndentChar">
      <MemberSignature Language="C#" Value="public char IndentChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char IndentChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.IndentChar" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char IndentChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.IndentChar : char with get, set" Usage="System.Xml.XmlTextWriter.IndentChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="aa88b-211"><see cref="P:System.Xml.XmlTextWriter.Formatting" /> を <see langword="Formatting.Indented" /> に設定するときに、インデントに使用する文字を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-211">Gets or sets which character to use for indenting when <see cref="P:System.Xml.XmlTextWriter.Formatting" /> is set to <see langword="Formatting.Indented" />.</span></span></summary>
        <value><span data-ttu-id="aa88b-212">インデントに使用する文字。</span><span class="sxs-lookup"><span data-stu-id="aa88b-212">The character to use for indenting.</span></span> <span data-ttu-id="aa88b-213">既定値は空白です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-213">The default is space.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="aa88b-214"><see langword="XmlTextWriter" /> を使用すると、このプロパティを任意の文字に設定できます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-214">The <see langword="XmlTextWriter" /> allows you to set this property to any character.</span></span> <span data-ttu-id="aa88b-215">有効な XML を確認するには、有効な空白文字、0x9、0x10、0x13、または 0x20 を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-215">To ensure valid XML, you must specify a valid white space character, 0x9, 0x10, 0x13 or 0x20.</span></span>  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-216">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-216">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlTextWriter.Indentation" />
        <altmember cref="T:System.Xml.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="LookupPrefix">
      <MemberSignature Language="C#" Value="public override string LookupPrefix (string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string LookupPrefix(string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function LookupPrefix (ns As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ LookupPrefix(System::String ^ ns);" />
      <MemberSignature Language="F#" Value="override this.LookupPrefix : string -&gt; string" Usage="xmlTextWriter.LookupPrefix ns" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns"><span data-ttu-id="aa88b-217">検索する対象となるプリフィックスを持つ名前空間 URI。</span><span class="sxs-lookup"><span data-stu-id="aa88b-217">Namespace URI whose prefix you want to find.</span></span></param>
        <summary><span data-ttu-id="aa88b-218">名前空間 URI の現在の名前空間スコープで定義されたものに最も近いプリフィックスを返します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-218">Returns the closest prefix defined in the current namespace scope for the namespace URI.</span></span></summary>
        <returns><span data-ttu-id="aa88b-219">一致するプリフィックス。</span><span class="sxs-lookup"><span data-stu-id="aa88b-219">The matching prefix.</span></span> <span data-ttu-id="aa88b-220">一致する名前空間 URI が現在のスコープで見つからない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="aa88b-220">Or <see langword="null" /> if no matching namespace URI is found in the current scope.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-221">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-221">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-222">次の例では、書籍を書き出します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-222">The following example writes out a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-223"><paramref name="ns" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-223"><paramref name="ns" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public bool Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Namespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.Namespaces" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespaces As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Namespaces { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Namespaces : bool with get, set" Usage="System.Xml.XmlTextWriter.Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="aa88b-224">名前空間をサポートするかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-224">Gets or sets a value indicating whether to do namespace support.</span></span></summary>
        <value><span data-ttu-id="aa88b-225">名前空間をサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="aa88b-225"><see langword="true" /> to support namespaces; otherwise, <see langword="false" />.</span></span>  
  
<span data-ttu-id="aa88b-226">既定値は、<see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-226">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-227">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-227">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-228">このプロパティは、ライターが[XML 勧告で W3C 名前空間](https://www.w3.org/TR/REC-xml-names)をサポートするかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-228">This property determines whether the writer supports the W3C [Namespaces in XML](https://www.w3.org/TR/REC-xml-names) recommendation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="aa88b-229">このプロパティを変更できるのは、<see langword="WriteState.Start" /> 状態のときだけです。</span><span class="sxs-lookup"><span data-stu-id="aa88b-229">You can only change this property when in the <see langword="WriteState.Start" /> state.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public char QuoteChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.QuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Property QuoteChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char QuoteChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.QuoteChar : char with get, set" Usage="System.Xml.XmlTextWriter.QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="aa88b-230">属性値を囲む引用符に使用する文字を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-230">Gets or sets which character to use to quote attribute values.</span></span></summary>
        <value><span data-ttu-id="aa88b-231">属性値を囲む引用符に使用する文字。</span><span class="sxs-lookup"><span data-stu-id="aa88b-231">The character to use to quote attribute values.</span></span> <span data-ttu-id="aa88b-232">これは単一引用符 (&amp;#39 にする必要があり;)または、二重引用符 (&amp;#34;)。</span><span class="sxs-lookup"><span data-stu-id="aa88b-232">This must be a single quote (&amp;#39;) or a double quote (&amp;#34;).</span></span> <span data-ttu-id="aa88b-233">既定値は二重引用符です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-233">The default is a double quote.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-234">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-234">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-235">このプロパティを単一引用符または二重引用符以外の値に設定。</span><span class="sxs-lookup"><span data-stu-id="aa88b-235">Setting this property to something other than either a single or double quote.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64">
      <MemberSignature Language="C#" Value="public override void WriteBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBase64 (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteBase64 : byte[] * int * int -&gt; unit" Usage="xmlTextWriter.WriteBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="aa88b-236">エンコードするバイト配列。</span><span class="sxs-lookup"><span data-stu-id="aa88b-236">Byte array to encode.</span></span></param>
        <param name="index"><span data-ttu-id="aa88b-237">書き込むバイトの開始を示すバッファー内の位置。</span><span class="sxs-lookup"><span data-stu-id="aa88b-237">The position within the buffer indicating the start of the bytes to write.</span></span></param>
        <param name="count"><span data-ttu-id="aa88b-238">書き込むバイト数。</span><span class="sxs-lookup"><span data-stu-id="aa88b-238">The number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="aa88b-239">指定したバイナリ バイトを base64 としてエンコードし、その結果生成されるテキストを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-239">Encodes the specified binary bytes as base64 and writes out the resulting text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-240">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-240">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-241">次の例では、`WriteBase64` を使用して入力ファイルをエンコードし、一時 XML ファイルを生成します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-241">The following example encodes an input file using `WriteBase64` and generates a temporary XML file.</span></span> <span data-ttu-id="aa88b-242">一時 XML ファイルは、<xref:System.Xml.XmlTextReader.ReadBase64%2A> メソッドを使用してデコードされ、元のファイルと比較されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-242">The temporary XML file is decoded using the <xref:System.Xml.XmlTextReader.ReadBase64%2A> method and compared to the original file.</span></span>  
  
 [!code-cpp[XmlWriter.WriteBase64#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteBase64/CPP/writebase64.cpp#1)]
 [!code-csharp[XmlWriter.WriteBase64#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteBase64/CS/writebase64.cs#1)]
 [!code-vb[XmlWriter.WriteBase64#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteBase64/VB/writebase64.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aa88b-243"><paramref name="buffer" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-243"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-244">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-244">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="aa88b-245"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-245"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="aa88b-246"><see cref="P:System.Xml.XmlTextWriter.WriteState" /> が <see langword="Closed" /> です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-246">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is <see langword="Closed" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHex">
      <MemberSignature Language="C#" Value="public override void WriteBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBinHex (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteBinHex : byte[] * int * int -&gt; unit" Usage="xmlTextWriter.WriteBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="aa88b-247">エンコードするバイト配列。</span><span class="sxs-lookup"><span data-stu-id="aa88b-247">Byte array to encode.</span></span></param>
        <param name="index"><span data-ttu-id="aa88b-248">書き込むバイトの開始を示すバッファー内の位置。</span><span class="sxs-lookup"><span data-stu-id="aa88b-248">The position in the buffer indicating the start of the bytes to write.</span></span></param>
        <param name="count"><span data-ttu-id="aa88b-249">書き込むバイト数。</span><span class="sxs-lookup"><span data-stu-id="aa88b-249">The number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="aa88b-250">指定したバイナリ バイトを binhex としてエンコードし、その結果生成されるテキストを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-250">Encodes the specified binary bytes as binhex and writes out the resulting text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-251">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-251">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aa88b-252"><paramref name="buffer" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-252"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-253">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-253">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="aa88b-254"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-254"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="aa88b-255"><see cref="P:System.Xml.XmlTextWriter.WriteState" /> が閉じています。</span><span class="sxs-lookup"><span data-stu-id="aa88b-255">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCData">
      <MemberSignature Language="C#" Value="public override void WriteCData (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteCData(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteCData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteCData (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteCData(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteCData : string -&gt; unit" Usage="xmlTextWriter.WriteCData text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="aa88b-256">CDATA ブロック内に配置するテキスト。</span><span class="sxs-lookup"><span data-stu-id="aa88b-256">Text to place inside the CDATA block.</span></span></param>
        <summary><span data-ttu-id="aa88b-257">指定したテキストを格納する &lt;![CDATA[...]]&gt; ブロックを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-257">Writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-258">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-258">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-259">`text` が `null` または `String.Empty`の場合、このメソッドは空の CDATA ブロックを書き込みます。たとえば \<![CDATA []</span><span class="sxs-lookup"><span data-stu-id="aa88b-259">If `text` is either `null` or `String.Empty`, this method writes an empty CDATA block, for example \<![CDATA[]</span></span>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-260">テキストは、非整形式の XML ドキュメントになります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-260">The text would result in a non-well formed XML document.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="aa88b-261"><see cref="P:System.Xml.XmlTextWriter.WriteState" /> が <see langword="Closed" /> です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-261">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is <see langword="Closed" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntity">
      <MemberSignature Language="C#" Value="public override void WriteCharEntity (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteCharEntity(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteCharEntity (ch As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteCharEntity(char ch);" />
      <MemberSignature Language="F#" Value="override this.WriteCharEntity : char -&gt; unit" Usage="xmlTextWriter.WriteCharEntity ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch"><span data-ttu-id="aa88b-262">文字エンティティを生成する対象の Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="aa88b-262">Unicode character for which to generate a character entity.</span></span></param>
        <summary><span data-ttu-id="aa88b-263">指定した Unicode 文字値の文字エンティティを強制的に生成します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-263">Forces the generation of a character entity for the specified Unicode character value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-264">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-264">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-265">このメソッドは、16進文字エンティティ参照形式で Unicode 文字を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-265">This method writes the Unicode character in hexadecimal character entity reference format.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-266">次の例では、`WriteCharEntity` メソッドを使用して電子メールアドレスを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-266">The following example uses the `WriteCharEntity` method to write an email address.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteTimeSpan Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteTimeSpan Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteTimeSpan Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteTimeSpan Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteTimeSpan Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteTimeSpan Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-267">文字がサロゲート ペアの文字範囲、つまり <see langword="0xd800" /> - <see langword="0xdfff" />内にあります。これ以外の場合、テキストは非整形式の XML ドキュメントになります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-267">The character is in the surrogate pair character range, <see langword="0xd800" /> - <see langword="0xdfff" />; or the text would result in a non-well formed XML document.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="aa88b-268"><see cref="P:System.Xml.XmlTextWriter.WriteState" /> が <see langword="Closed" /> です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-268">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is <see langword="Closed" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteChars">
      <MemberSignature Language="C#" Value="public override void WriteChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteChars (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteChars(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteChars : char[] * int * int -&gt; unit" Usage="xmlTextWriter.WriteChars (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="aa88b-269">書き込むテキストを格納している文字配列。</span><span class="sxs-lookup"><span data-stu-id="aa88b-269">Character array containing the text to write.</span></span></param>
        <param name="index"><span data-ttu-id="aa88b-270">書き込むテキストの開始を示すバッファー内の位置。</span><span class="sxs-lookup"><span data-stu-id="aa88b-270">The position in the buffer indicating the start of the text to write.</span></span></param>
        <param name="count"><span data-ttu-id="aa88b-271">書き込む文字数。</span><span class="sxs-lookup"><span data-stu-id="aa88b-271">The number of characters to write.</span></span></param>
        <summary><span data-ttu-id="aa88b-272">一度に 1 つのバッファーにテキストを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-272">Writes text one buffer at a time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-273">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-273">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-274">このメソッドを使用して、一度に1つのバッファーに大量のテキストを書き込むことができます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-274">This method can be used to write large amounts of text one buffer at a time.</span></span>  
  
 <span data-ttu-id="aa88b-275">`WriteChars` メソッドで複数のバッファー書き込みでサロゲートペア文字が分割されないようにするには、特別な処理を行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-275">Special handling must be done to ensure the `WriteChars` method does not split surrogate pair characters across multiple buffer writes.</span></span> <span data-ttu-id="aa88b-276">XML 仕様では、サロゲートペアの有効な範囲が定義されています。</span><span class="sxs-lookup"><span data-stu-id="aa88b-276">The XML specification defines the valid ranges for surrogate pairs.</span></span>  
  
 <span data-ttu-id="aa88b-277">サロゲートペアの文字が書き込まれ、サロゲートペアの文字がバッファーに分割されると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-277">An exception is thrown if surrogate pair characters are written that would result in the surrogate pair characters being split in the buffer.</span></span>  
  
   
  
## Examples  
 [!code-csharp[XmlTextWriter.WriteChars#1](~/samples/snippets/csharp/VS_Snippets_Data/xmltextwriter.writechars/cs/xmlwriterwritecharsexample.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aa88b-278"><paramref name="buffer" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-278"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="aa88b-279"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-279"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="aa88b-280">- または -</span><span class="sxs-lookup"><span data-stu-id="aa88b-280">-or-</span></span> 
<span data-ttu-id="aa88b-281">バッファー長から <paramref name="index" /> を差し引いた値が <paramref name="count" /> 未満です。この呼び出しにより、サロゲート ペア文字が分割されるか、無効なサロゲート ペアが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-281">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="aa88b-282"><see cref="P:System.Xml.XmlTextWriter.WriteState" /> が閉じています。</span><span class="sxs-lookup"><span data-stu-id="aa88b-282">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteComment">
      <MemberSignature Language="C#" Value="public override void WriteComment (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteComment(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteComment(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteComment (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteComment(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteComment : string -&gt; unit" Usage="xmlTextWriter.WriteComment text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="aa88b-283">コメント内に配置するテキスト。</span><span class="sxs-lookup"><span data-stu-id="aa88b-283">Text to place inside the comment.</span></span></param>
        <summary><span data-ttu-id="aa88b-284">指定したテキストを格納するコメント &lt;!--...--&gt; を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-284">Writes out a comment &lt;!--...--&gt; containing the specified text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-285">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-285">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-286">`text` が `null` または `String.Empty`の場合、このメソッドは \<!----> などのデータコンテンツのない `Comment` を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-286">If `text` is either `null` or `String.Empty`, this method writes a `Comment` with no data content, for example \<!---->.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-287">次の例では、書籍を表す XML ファイルを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-287">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-288">テキストは、非整形式の XML ドキュメントになります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-288">The text would result in a non-well formed XML document</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="aa88b-289"><see cref="P:System.Xml.XmlTextWriter.WriteState" /> が <see langword="Closed" /> です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-289">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is <see langword="Closed" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDocType">
      <MemberSignature Language="C#" Value="public override void WriteDocType (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteDocType(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteDocType (name As String, pubid As String, sysid As String, subset As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteDocType(System::String ^ name, System::String ^ pubid, System::String ^ sysid, System::String ^ subset);" />
      <MemberSignature Language="F#" Value="override this.WriteDocType : string * string * string * string -&gt; unit" Usage="xmlTextWriter.WriteDocType (name, pubid, sysid, subset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="aa88b-290">DOCTYPE の名前。</span><span class="sxs-lookup"><span data-stu-id="aa88b-290">The name of the DOCTYPE.</span></span> <span data-ttu-id="aa88b-291">これを空にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-291">This must be non-empty.</span></span></param>
        <param name="pubid"><span data-ttu-id="aa88b-292">null でない場合は、PUBLIC "pubid" "sysid" も書き込みます。<paramref name="pubid" /> と <paramref name="sysid" /> は、指定した引数の値に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-292">If non-null it also writes PUBLIC "pubid" "sysid" where <paramref name="pubid" /> and <paramref name="sysid" /> are replaced with the value of the given arguments.</span></span></param>
        <param name="sysid"><span data-ttu-id="aa88b-293"><paramref name="pubid" /> が null で <paramref name="sysid" /> が非 null の場合は、<paramref name="sysid" /> がこの引数の値に置き換えられる SYSTEM "sysid" を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-293">If <paramref name="pubid" /> is null and <paramref name="sysid" /> is non-null it writes SYSTEM "sysid" where <paramref name="sysid" /> is replaced with the value of this argument.</span></span></param>
        <param name="subset"><span data-ttu-id="aa88b-294">null でない場合は、[subset] を書き込みます。subset は、この引数の値に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-294">If non-null it writes [subset] where subset is replaced with the value of this argument.</span></span></param>
        <summary><span data-ttu-id="aa88b-295">名前とオプション属性を指定して、DOCTYPE 宣言を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-295">Writes the DOCTYPE declaration with the specified name and optional attributes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-296">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-296">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-297">このメソッドでは、`pubid`、`sysid` または `subset`に無効な文字があるかどうかは確認されません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-297">This method does not check for invalid characters in `pubid`, `sysid` or `subset`.</span></span> <span data-ttu-id="aa88b-298">また、内部サブセットが整形式であるかどうかも確認しません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-298">It also does not check that the internal subset is well-formed.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="aa88b-299"><xref:System.Xml.XmlTextWriter> では、<xref:System.Xml.XmlTextWriter.WriteDocType%2A> メソッドに渡されるデータは検証されません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-299">The <xref:System.Xml.XmlTextWriter> does not validate any data that is passed to the <xref:System.Xml.XmlTextWriter.WriteDocType%2A> method.</span></span> <span data-ttu-id="aa88b-300">このメソッドには、任意のデータを渡すことはできません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-300">You should not pass arbitrary data to this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-301">次の例では、書籍を表す XML ファイルを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-301">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="aa88b-302">このメソッドが、プロローグの外 (ルート要素の後) で呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="aa88b-302">This method was called outside the prolog (after the root element).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-303"><paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-303"><paramref name="name" /> is <see langword="null" /> or <see langword="String.Empty" /></span></span>  
  
<span data-ttu-id="aa88b-304">- または -</span><span class="sxs-lookup"><span data-stu-id="aa88b-304">-or-</span></span> 
<span data-ttu-id="aa88b-305"><paramref name="name" /> の値が、無効な XML になることがあります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-305">the value for <paramref name="name" /> would result in invalid XML.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttribute">
      <MemberSignature Language="C#" Value="public override void WriteEndAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteEndAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndAttribute ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndAttribute();" />
      <MemberSignature Language="F#" Value="override this.WriteEndAttribute : unit -&gt; unit" Usage="xmlTextWriter.WriteEndAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="aa88b-306">前の <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /> 呼び出しを閉じます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-306">Closes the previous <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /> call.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-307">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-307">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-308">`WriteStartAttribute`を呼び出す場合は、このメソッドを使用して属性を閉じることができます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-308">If you call `WriteStartAttribute`, you can close the attribute with this method.</span></span>  
  
 <span data-ttu-id="aa88b-309">もう一度 `WriteStartAttribute` を呼び出して、<xref:System.Xml.XmlWriter.WriteAttributeString%2A>を呼び出すか、<xref:System.Xml.XmlTextWriter.WriteEndElement%2A>を呼び出すことによって、属性を閉じることもできます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-309">You can also close the attribute by calling `WriteStartAttribute` again, calling <xref:System.Xml.XmlWriter.WriteAttributeString%2A>, or calling <xref:System.Xml.XmlTextWriter.WriteEndElement%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-310">次の例では、書籍を書き出します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-310">The following example writes out a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocument">
      <MemberSignature Language="C#" Value="public override void WriteEndDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteEndDocument" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndDocument();" />
      <MemberSignature Language="F#" Value="override this.WriteEndDocument : unit -&gt; unit" Usage="xmlTextWriter.WriteEndDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="aa88b-311">開いている要素または属性を閉じ、ライターを Start 状態に戻します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-311">Closes any open elements or attributes and puts the writer back in the Start state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-312">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-312">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-313">次の例では、書籍を表す XML ファイルを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-313">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-314">XML ドキュメントが無効です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-314">The XML document is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElement">
      <MemberSignature Language="C#" Value="public override void WriteEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteEndElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndElement();" />
      <MemberSignature Language="F#" Value="override this.WriteEndElement : unit -&gt; unit" Usage="xmlTextWriter.WriteEndElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="aa88b-315">1 つの要素を閉じ、対応する名前空間スコープをポップします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-315">Closes one element and pops the corresponding namespace scope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-316">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-316">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-317">要素にコンテンツが含まれていない場合は、短い終了タグ "/>" が書き込まれます。それ以外の場合は、完全終了タグが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-317">If the element contains no content a short end tag "/>" is written; otherwise a full end tag is written.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-318">次の例では、書籍を表す XML ファイルを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-318">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteEndElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteEndElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteEndElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteEndElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteEndElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteEndElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRef">
      <MemberSignature Language="C#" Value="public override void WriteEntityRef (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEntityRef(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEntityRef (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEntityRef(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.WriteEntityRef : string -&gt; unit" Usage="xmlTextWriter.WriteEntityRef name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="aa88b-319">エンティティ参照の名前。</span><span class="sxs-lookup"><span data-stu-id="aa88b-319">Name of the entity reference.</span></span></param>
        <summary><span data-ttu-id="aa88b-320"><see langword="&amp;name;" /> のようにエンティティ参照を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-320">Writes out an entity reference as <see langword="&amp;name;" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-321">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-321">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-322">次の例では、書籍を表す XML ファイルを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-322">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-323">テキストが非整形式の XML ドキュメントになるか、<paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-323">The text would result in a non-well formed XML document or <paramref name="name" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElement">
      <MemberSignature Language="C#" Value="public override void WriteFullEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteFullEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteFullEndElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteFullEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteFullEndElement();" />
      <MemberSignature Language="F#" Value="override this.WriteFullEndElement : unit -&gt; unit" Usage="xmlTextWriter.WriteFullEndElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="aa88b-324">1 つの要素を閉じ、対応する名前空間スコープをポップします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-324">Closes one element and pops the corresponding namespace scope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-325">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-325">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-326">このメソッドは、常に完全終了タグを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-326">This method always writes the full end tag.</span></span> <span data-ttu-id="aa88b-327">これは、完全終了タグを含める必要がある要素を処理する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-327">This is useful when dealing with elements that must include a full end tag.</span></span> <span data-ttu-id="aa88b-328">たとえば、ブラウザーでは HTML スクリプトブロックが "\</script >" で閉じられることが想定されています。</span><span class="sxs-lookup"><span data-stu-id="aa88b-328">For example, browsers expect HTML script blocks to be closed with "\</script>".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-329">次の例では、コンテンツのない要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-329">The following example writes out an element with no content.</span></span> <span data-ttu-id="aa88b-330">WriteFullEndElement を使用して、完全終了要素タグを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-330">It uses WriteFullEndElement to write the full end element tag.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteFullEndElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteFullEndElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteFullEndElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteFullEndElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteFullEndElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteFullEndElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteName">
      <MemberSignature Language="C#" Value="public override void WriteName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.WriteName : string -&gt; unit" Usage="xmlTextWriter.WriteName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="aa88b-331">書き込む名前。</span><span class="sxs-lookup"><span data-stu-id="aa88b-331">Name to write.</span></span></param>
        <summary><span data-ttu-id="aa88b-332">指定した名前が <see href="https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name">W3C 勧告『XML 1.0』</see>に準拠した有効な名前であることを確認して、それを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-332">Writes out the specified name, ensuring it is a valid name according to the <see href="https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name">W3C XML 1.0 recommendation</see>.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-333">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-333">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-334"><xref:System.Xml.XmlTextWriter.Namespaces%2A> が `true`に設定されている場合は、`WriteName` XML 勧告の W3C 名前空間に従っても名前が有効であることも確認します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-334">If <xref:System.Xml.XmlTextWriter.Namespaces%2A> is set to `true`, `WriteName` also checks that the name is also valid according to the W3C Namespaces in XML recommendation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-335"><paramref name="name" /> が有効な XML 名ではありません。または、<paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-335"><paramref name="name" /> is not a valid XML name; or <paramref name="name" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNmToken">
      <MemberSignature Language="C#" Value="public override void WriteNmToken (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteNmToken(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteNmToken (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteNmToken(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.WriteNmToken : string -&gt; unit" Usage="xmlTextWriter.WriteNmToken name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="aa88b-336">書き込む名前。</span><span class="sxs-lookup"><span data-stu-id="aa88b-336">Name to write.</span></span></param>
        <summary><span data-ttu-id="aa88b-337">指定した名前が <see href="https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name">W3C 勧告『XML 1.0』</see>に準拠した有効な <see langword="NmToken" /> であることを確認して、それを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-337">Writes out the specified name, ensuring it is a valid <see langword="NmToken" /> according to the <see href="https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name">W3C XML 1.0 recommendation</see>.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-338">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-338">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-339"><paramref name="name" /> が有効な <see langword="NmToken" /> ではありません。または、<paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-339"><paramref name="name" /> is not a valid <see langword="NmToken" />; or <paramref name="name" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstruction">
      <MemberSignature Language="C#" Value="public override void WriteProcessingInstruction (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteProcessingInstruction(string name, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteProcessingInstruction (name As String, text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteProcessingInstruction(System::String ^ name, System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteProcessingInstruction : string * string -&gt; unit" Usage="xmlTextWriter.WriteProcessingInstruction (name, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="aa88b-340">処理命令の名前。</span><span class="sxs-lookup"><span data-stu-id="aa88b-340">Name of the processing instruction.</span></span></param>
        <param name="text"><span data-ttu-id="aa88b-341">処理命令に含めるテキスト。</span><span class="sxs-lookup"><span data-stu-id="aa88b-341">Text to include in the processing instruction.</span></span></param>
        <summary><span data-ttu-id="aa88b-342">名前とテキストの間にスペースがある処理命令を、次のように書き込みます: &lt;?name text?&gt;。</span><span class="sxs-lookup"><span data-stu-id="aa88b-342">Writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-343">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-343">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-344">`text` が `null` または `String.Empty`の場合、このメソッドはデータコンテンツのない `ProcessingInstruction` を書き込みます。たとえば、\<? name? > のようになります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-344">If `text` is either `null` or `String.Empty`, this method writes a `ProcessingInstruction` with no data content, for example \<?name?>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-345">次の例では、書籍を表す XML ファイルを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-345">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-346">テキストは、非整形式の XML ドキュメントになります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-346">The text would result in a non-well formed XML document.</span></span>  
  
 <span data-ttu-id="aa88b-347"><paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-347"><paramref name="name" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span></span>  
  
<span data-ttu-id="aa88b-348">このメソッドは、<see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /> が呼び出された後に XML 宣言を作成するために使用されています。</span><span class="sxs-lookup"><span data-stu-id="aa88b-348">This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /> has already been called.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedName">
      <MemberSignature Language="C#" Value="public override void WriteQualifiedName (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteQualifiedName(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteQualifiedName (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteQualifiedName(System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="override this.WriteQualifiedName : string * string -&gt; unit" Usage="xmlTextWriter.WriteQualifiedName (localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName"><span data-ttu-id="aa88b-349">書き込むローカル名。</span><span class="sxs-lookup"><span data-stu-id="aa88b-349">The local name to write.</span></span></param>
        <param name="ns"><span data-ttu-id="aa88b-350">名前に関連付ける名前空間 URI。</span><span class="sxs-lookup"><span data-stu-id="aa88b-350">The namespace URI to associate with the name.</span></span></param>
        <summary><span data-ttu-id="aa88b-351">名前空間の修飾名を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-351">Writes out the namespace-qualified name.</span></span> <span data-ttu-id="aa88b-352">このメソッドは、指定した名前空間のスコープ内にあるプレフィックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-352">This method looks up the prefix that is in scope for the given namespace.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-353">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-353">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-354">たとえば、次の Microsoft Visual C# コード。</span><span class="sxs-lookup"><span data-stu-id="aa88b-354">For example, the following Microsoft Visual C# code:</span></span>  
  
```csharp  
writer.Formatting = Formatting.Indented;  
writer.WriteStartElement("root");  
 writer.WriteAttributeString("xmlns","x",null,"urn:abc");  
 writer.WriteStartElement("item");  
 writer.WriteStartAttribute("href",null);  
 writer.WriteString("#");  
 writer.WriteQualifiedName("test","urn:abc");  
 writer.WriteEndAttribute();  
 writer.WriteEndElement();  
 writer.WriteEndElement();  
 writer.Close();  
```  
  
 <span data-ttu-id="aa88b-355">では、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-355">Generates the following output:</span></span>  
  
```xml  
<root xmlns:x="urn:abc">  
 <item href="#x:test"/>  
 </root>  
```  
  
 <span data-ttu-id="aa88b-356">`ns` が現在の既定の名前空間にマップされている場合、プレフィックスは生成されません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-356">If `ns` maps to the current default namespace, no prefix is generated.</span></span>  
  
 <span data-ttu-id="aa88b-357">属性値を書き込むときに、`ns` が見つからない場合、このメソッドはプレフィックスを生成します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-357">When writing attribute values, this method generates a prefix if `ns` is not found.</span></span> <span data-ttu-id="aa88b-358">要素の内容を書き込むときに、`ns` が見つからない場合は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-358">When writing element content, it throws an exception if `ns` is not found.</span></span>  
  
 <span data-ttu-id="aa88b-359">このライターが名前空間をサポートしている場合 (<xref:System.Xml.XmlTextWriter.Namespaces%2A> が `true`に設定されている場合)、このメソッドは[XML 勧告の W3C 名前空間](https://www.w3.org/TR/REC-xml-names)に従って名前が有効であることも確認します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-359">If this writer supports namespaces (<xref:System.Xml.XmlTextWriter.Namespaces%2A> is set to `true`), this method also checks that the name is valid according to the [W3C Namespaces in XML recommendation](https://www.w3.org/TR/REC-xml-names).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-360">次の例では、XSD スキーマの一部を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-360">The following example writes out a portion of a XSD schema.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteQualifiedName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteQualifiedName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteQualifiedName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteQualifiedName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteQualifiedName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteQualifiedName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-361"><paramref name="localName" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-361"><paramref name="localName" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span></span>  
  
 <span data-ttu-id="aa88b-362"><paramref name="localName" /> が、W3C の名前空間の仕様に準拠した有効な名前ではありません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-362"><paramref name="localName" /> is not a valid name according to the W3C Namespaces spec.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRaw">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="aa88b-363">手動で生のマークアップを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-363">Writes raw markup manually.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-364">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-364">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public override void WriteRaw (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteRaw(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteRaw(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteRaw (data As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteRaw(System::String ^ data);" />
      <MemberSignature Language="F#" Value="override this.WriteRaw : string -&gt; unit" Usage="xmlTextWriter.WriteRaw data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="aa88b-365">書き込むテキストを格納している文字列。</span><span class="sxs-lookup"><span data-stu-id="aa88b-365">String containing the text to write.</span></span></param>
        <summary><span data-ttu-id="aa88b-366">文字列から手動で生のマークアップを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-366">Writes raw markup manually from a string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-367">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-367">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-368">このメソッドは、特殊文字をエスケープしません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-368">This method does not escape special characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="aa88b-369"><xref:System.Xml.XmlTextWriter> では、<xref:System.Xml.XmlTextWriter.WriteRaw%2A> メソッドに渡されるデータは検証されません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-369">The <xref:System.Xml.XmlTextWriter> does not validate any data that is passed to the <xref:System.Xml.XmlTextWriter.WriteRaw%2A> method.</span></span> <span data-ttu-id="aa88b-370">このメソッドには、任意のデータを渡すことはできません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-370">You should not pass arbitrary data to this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-371">次の例では、`WriteRaw` メソッドを使用して文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-371">The following example writes a string using the `WriteRaw` method.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteRaw1 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteRaw1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteRaw1 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteRaw1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteRaw1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteRaw1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public override void WriteRaw (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteRaw(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteRaw (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteRaw(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteRaw : char[] * int * int -&gt; unit" Usage="xmlTextWriter.WriteRaw (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="aa88b-372">書き込むテキストを格納している文字配列。</span><span class="sxs-lookup"><span data-stu-id="aa88b-372">Character array containing the text to write.</span></span></param>
        <param name="index"><span data-ttu-id="aa88b-373">書き込むテキストの開始を示すバッファー内の位置。</span><span class="sxs-lookup"><span data-stu-id="aa88b-373">The position within the buffer indicating the start of the text to write.</span></span></param>
        <param name="count"><span data-ttu-id="aa88b-374">書き込む文字数。</span><span class="sxs-lookup"><span data-stu-id="aa88b-374">The number of characters to write.</span></span></param>
        <summary><span data-ttu-id="aa88b-375">文字バッファーから手動で生のマークアップを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-375">Writes raw markup manually from a character buffer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-376">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-376">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-377">このメソッドは、特殊文字をエスケープしません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-377">This method does not escape special characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="aa88b-378"><xref:System.Xml.XmlTextWriter> では、<xref:System.Xml.XmlTextWriter.WriteRaw%2A> メソッドに渡されるデータは検証されません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-378">The <xref:System.Xml.XmlTextWriter> does not validate any data that is passed to the <xref:System.Xml.XmlTextWriter.WriteRaw%2A> method.</span></span> <span data-ttu-id="aa88b-379">このメソッドには、任意のデータを渡すことはできません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-379">You should not pass arbitrary data to this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aa88b-380"><paramref name="buffer" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-380"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="aa88b-381"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-381"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="aa88b-382">- または -</span><span class="sxs-lookup"><span data-stu-id="aa88b-382">-or-</span></span> 
<span data-ttu-id="aa88b-383">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-383">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public override void WriteStartAttribute (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartAttribute(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartAttribute (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartAttribute(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="override this.WriteStartAttribute : string * string * string -&gt; unit" Usage="xmlTextWriter.WriteStartAttribute (prefix, localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix"><span data-ttu-id="aa88b-384">属性の <see langword="Namespace" /> プリフィックス。</span><span class="sxs-lookup"><span data-stu-id="aa88b-384"><see langword="Namespace" /> prefix of the attribute.</span></span></param>
        <param name="localName"><span data-ttu-id="aa88b-385">属性の <see langword="LocalName" />。</span><span class="sxs-lookup"><span data-stu-id="aa88b-385"><see langword="LocalName" /> of the attribute.</span></span></param>
        <param name="ns"><span data-ttu-id="aa88b-386">属性の <see langword="NamespaceURI" />。</span><span class="sxs-lookup"><span data-stu-id="aa88b-386"><see langword="NamespaceURI" /> of the attribute</span></span></param>
        <summary><span data-ttu-id="aa88b-387">属性の開始を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-387">Writes the start of an attribute.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-388">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-388">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-389">これは、<xref:System.Xml.XmlTextWriter.WriteString%2A>などの複数の書き込みメソッドを使用して属性値を書き込むことができる、より高度な <xref:System.Xml.XmlWriter.WriteAttributeString%2A> のバージョンです。</span><span class="sxs-lookup"><span data-stu-id="aa88b-389">This is a more advanced version of <xref:System.Xml.XmlWriter.WriteAttributeString%2A> that allows you to write an attribute value using multiple write methods, such as <xref:System.Xml.XmlTextWriter.WriteString%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-390">次の例では、書籍を書き出します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-390">The following example writes out a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-391"><paramref name="localName" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-391"><paramref name="localName" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span></span></exception>
        <altmember cref="M:System.Xml.XmlTextWriter.WriteEndAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartDocument">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="aa88b-392">バージョン "1.0" で XML 宣言を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-392">Writes the XML declaration with the version "1.0".</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-393">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-393">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public override void WriteStartDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteStartDocument" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartDocument();" />
      <MemberSignature Language="F#" Value="override this.WriteStartDocument : unit -&gt; unit" Usage="xmlTextWriter.WriteStartDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="aa88b-394">バージョン "1.0" で XML 宣言を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-394">Writes the XML declaration with the version "1.0".</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-395">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-395">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-396">ドキュメントのエンコーディングレベルは、ライターの実装方法によって決まります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-396">The encoding level of the document is determined by how the writer is implemented.</span></span> <span data-ttu-id="aa88b-397">たとえば、`XmlTextWriter` コンストラクターに <xref:System.Text.Encoding> オブジェクトが指定されている場合、encoding 属性の値が決定されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-397">For example, if an <xref:System.Text.Encoding> object is specified in the `XmlTextWriter` constructor, this determines the value of the encoding attribute.</span></span> <span data-ttu-id="aa88b-398">このメソッドでは、スタンドアロン属性は作成されません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-398">This method does not create a standalone attribute.</span></span>  
  
 <span data-ttu-id="aa88b-399">`WriteStartDocument` が呼び出されると、ライターは、記述しているものが整形式の XML ドキュメントであることを検証します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-399">When `WriteStartDocument` is called the writer validates that what you are writing is a well-formed XML document.</span></span> <span data-ttu-id="aa88b-400">たとえば、XML 宣言が最初のノードであること、ルートレベルの要素が1つだけ存在することを確認します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-400">For example, it checks that the XML declaration is the first node, that one and only one root-level element exists and so on.</span></span> <span data-ttu-id="aa88b-401">このメソッドが呼び出されない場合、ライターは XML フラグメントが記述されていると想定し、ルートレベルの規則は適用しません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-401">If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</span></span>  
  
 <span data-ttu-id="aa88b-402">`WriteStartDocument` が呼び出され、<xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A> メソッドを使用して別の XML 宣言を作成した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-402">If `WriteStartDocument` has been called and then the <xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A> method is used to create another XML declaration, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-403">次の例では、書籍を表す XML ファイルを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-403">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="aa88b-404">これは、コンストラクターの後に呼び出された最初の書き込みメソッドではありません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-404">This is not the first write method called after the constructor.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public override void WriteStartDocument (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartDocument(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartDocument (standalone As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartDocument(bool standalone);" />
      <MemberSignature Language="F#" Value="override this.WriteStartDocument : bool -&gt; unit" Usage="xmlTextWriter.WriteStartDocument standalone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="standalone"><span data-ttu-id="aa88b-405"><see langword="true" /> の場合は "standalone=yes"、<see langword="false" /> の場合は "standalone=no" を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-405">If <see langword="true" />, it writes "standalone=yes"; if <see langword="false" />, it writes "standalone=no".</span></span></param>
        <summary><span data-ttu-id="aa88b-406">バージョン "1.0" とスタントアロン属性を使用して XML 宣言を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-406">Writes the XML declaration with the version "1.0" and the standalone attribute.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-407">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-407">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-408">ドキュメントのエンコーディングレベルは、ライターの実装方法によって決まります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-408">The encoding level of the document is determined by how the writer is implemented.</span></span> <span data-ttu-id="aa88b-409">たとえば、`XmlTextWriter` コンストラクターに <xref:System.Text.Encoding> オブジェクトが指定されている場合、encoding 属性の値が決定されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-409">For example, if an <xref:System.Text.Encoding> object is specified in the `XmlTextWriter` constructor, this determines the value of the encoding attribute.</span></span>  
  
 <span data-ttu-id="aa88b-410">`WriteStartDocument` が呼び出されると、ライターは、記述しているものが整形式の XML ドキュメントであることを検証します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-410">When `WriteStartDocument` is called the writer validates that what you are writing is a well-formed XML document.</span></span> <span data-ttu-id="aa88b-411">たとえば、XML 宣言が最初のノードであること、ルートレベルの要素が1つだけ存在することを確認します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-411">For example, it checks that the XML declaration is the first node, that one and only one root-level element exists and so on.</span></span> <span data-ttu-id="aa88b-412">このメソッドが呼び出されない場合、ライターは XML フラグメントが記述されていると想定し、ルートレベルの規則は適用しません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-412">If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</span></span>  
  
 <span data-ttu-id="aa88b-413">`WriteStartDocument` が呼び出され、<xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A> メソッドを使用して別の XML 宣言を作成した場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-413">If `WriteStartDocument` has been called and then the <xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A> method is used to create another XML declaration, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="aa88b-414">これは、コンストラクターの後に呼び出された最初の書き込みメソッドではありません。</span><span class="sxs-lookup"><span data-stu-id="aa88b-414">This is not the first write method called after the constructor.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public override void WriteStartElement (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartElement(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartElement (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartElement(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="override this.WriteStartElement : string * string * string -&gt; unit" Usage="xmlTextWriter.WriteStartElement (prefix, localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix"><span data-ttu-id="aa88b-415">要素の名前空間プリフィックス。</span><span class="sxs-lookup"><span data-stu-id="aa88b-415">The namespace prefix of the element.</span></span></param>
        <param name="localName"><span data-ttu-id="aa88b-416">要素のローカル名。</span><span class="sxs-lookup"><span data-stu-id="aa88b-416">The local name of the element.</span></span></param>
        <param name="ns"><span data-ttu-id="aa88b-417">要素に関連付ける名前空間 URI。</span><span class="sxs-lookup"><span data-stu-id="aa88b-417">The namespace URI to associate with the element.</span></span> <span data-ttu-id="aa88b-418">この名前空間が既にスコープ内にあり、関連付けられたプリフィックスを持つ場合、ライターは、そのプリフィックスも自動的に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-418">If this namespace is already in scope and has an associated prefix then the writer automatically writes that prefix also.</span></span></param>
        <summary><span data-ttu-id="aa88b-419">指定した開始タグを書き込み、指定した名前空間とプレフィックスに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-419">Writes the specified start tag and associates it with the given namespace and prefix.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-420">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-420">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-421">このメソッドを呼び出した後で、子要素の <xref:System.Xml.XmlTextWriter.WriteComment%2A>、<xref:System.Xml.XmlTextWriter.WriteString%2A>、または <xref:System.Xml.XmlTextWriter.WriteStartElement%2A> を使用して、属性を書き込むかコンテンツを作成することができます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-421">After calling this method you can either write attributes or create content using <xref:System.Xml.XmlTextWriter.WriteComment%2A>, <xref:System.Xml.XmlTextWriter.WriteString%2A>, or <xref:System.Xml.XmlTextWriter.WriteStartElement%2A> for child elements.</span></span> <span data-ttu-id="aa88b-422">終了タグが書き出される <xref:System.Xml.XmlTextWriter.WriteEndElement%2A> で要素を閉じることができます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-422">You can close the element with <xref:System.Xml.XmlTextWriter.WriteEndElement%2A> at which time an end tag is written out.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-423">次の例では、書籍を書き出します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-423">The following example writes out a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="aa88b-424">ライターが閉じています。</span><span class="sxs-lookup"><span data-stu-id="aa88b-424">The writer is closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteState">
      <MemberSignature Language="C#" Value="public override System.Xml.WriteState WriteState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WriteState WriteState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.WriteState" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property WriteState As WriteState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::WriteState WriteState { System::Xml::WriteState get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteState : System.Xml.WriteState" Usage="System.Xml.XmlTextWriter.WriteState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WriteState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="aa88b-425">ライターの状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-425">Gets the state of the writer.</span></span></summary>
        <value><span data-ttu-id="aa88b-426"><see cref="T:System.Xml.WriteState" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="aa88b-426">One of the <see cref="T:System.Xml.WriteState" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-427">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-427">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public override void WriteString (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteString(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteString (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteString(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteString : string -&gt; unit" Usage="xmlTextWriter.WriteString text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="aa88b-428">書き込むテキスト。</span><span class="sxs-lookup"><span data-stu-id="aa88b-428">Text to write.</span></span></param>
        <summary><span data-ttu-id="aa88b-429">指定したテキストの内容を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-429">Writes the given text content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-430">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-430">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-431">`WriteString` は次のことを行います。</span><span class="sxs-lookup"><span data-stu-id="aa88b-431">`WriteString` does the following</span></span>  
  
-   <span data-ttu-id="aa88b-432">`&`、`<`、および `>` 文字は、それぞれ `&amp;`、`&lt;`、および `&gt;`に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-432">The characters `&`, `<`, and `>` are replaced with `&amp;`, `&lt;`, and `&gt;`, respectively.</span></span>  
  
-   <span data-ttu-id="aa88b-433">範囲 0x-0x1F (空白文字0x9、0xA、および0xD を除く) の文字値は、数字のエンティティ (`&#0;` `&#0x1F`) に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-433">Character values in the range 0x-0x1F (excluding white space characters 0x9, 0xA, and 0xD) are replaced with numeric character entities (`&#0;` through `&#0x1F`).</span></span>  
  
-   <span data-ttu-id="aa88b-434">属性値のコンテキストで `WriteString` が呼び出された場合、二重引用符と単一引用符はそれぞれ `&quot;` と `&apos;` に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-434">If `WriteString` is called in the context of an attribute value, double and single quotes are replaced with `&quot;` and `&apos;` respectively.</span></span>  
  
 <span data-ttu-id="aa88b-435">たとえば、この入力文字列 `test<item>test` は、次のように書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-435">For example, this input string `test<item>test` is written as</span></span>  
  
```  
test&lt;item&gt;test  
```  
  
 <span data-ttu-id="aa88b-436">`text` が `null` または `String.Empty`の場合、このメソッドはデータコンテンツのないテキストノードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-436">If `text` is either `null` or `String.Empty`, this method writes a text node with no data content.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-437">次の例では、XML フラグメントを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-437">The following example writes an XML fragment.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-438">テキスト文字列に、無効なサロゲート ペアが含まれています。</span><span class="sxs-lookup"><span data-stu-id="aa88b-438">The text string contains an invalid surrogate pair.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntity">
      <MemberSignature Language="C#" Value="public override void WriteSurrogateCharEntity (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteSurrogateCharEntity(char lowChar, char highChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteSurrogateCharEntity (lowChar As Char, highChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteSurrogateCharEntity(char lowChar, char highChar);" />
      <MemberSignature Language="F#" Value="override this.WriteSurrogateCharEntity : char * char -&gt; unit" Usage="xmlTextWriter.WriteSurrogateCharEntity (lowChar, highChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="lowChar"><span data-ttu-id="aa88b-439">下位サロゲート。</span><span class="sxs-lookup"><span data-stu-id="aa88b-439">The low surrogate.</span></span> <span data-ttu-id="aa88b-440">この値は、<see langword="0xDC00" /> から <see langword="0xDFFF" /> の範囲内にある必要があります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-440">This must be a value between <see langword="0xDC00" /> and <see langword="0xDFFF" />.</span></span></param>
        <param name="highChar"><span data-ttu-id="aa88b-441">上位サロゲート。</span><span class="sxs-lookup"><span data-stu-id="aa88b-441">The high surrogate.</span></span> <span data-ttu-id="aa88b-442">この値は、<see langword="0xD800" /> から <see langword="0xDBFF" /> の範囲内にある必要があります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-442">This must be a value between <see langword="0xD800" /> and <see langword="0xDBFF" />.</span></span></param>
        <summary><span data-ttu-id="aa88b-443">サロゲート文字ペアのサロゲート文字エンティティを生成し、書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-443">Generates and writes the surrogate character entity for the surrogate character pair.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-444">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-444">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-445">このメソッドは、UTF-16 エンコードを使用するシステムにのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-445">This method is only applicable on systems that use UTF-16 encoding.</span></span>  
  
 <span data-ttu-id="aa88b-446">サロゲート文字エンティティは16進形式で記述されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-446">The surrogate character entity is written in hexadecimal format.</span></span> <span data-ttu-id="aa88b-447">サロゲート文字の範囲は、`#x10FFFF`に `#x10000` ます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-447">The range for surrogate characters is `#x10000` to `#x10FFFF`.</span></span> <span data-ttu-id="aa88b-448">次の式は、サロゲート文字エンティティを生成するために使用されます。 (`highChar` - `0xD800`) \* `0x400` + (`lowChar` - `0xDC00`) + `0x10000`。</span><span class="sxs-lookup"><span data-stu-id="aa88b-448">The following formula is used to generate the surrogate character entity: (`highChar` - `0xD800`) \* `0x400` + (`lowChar` - `0xDC00`) + `0x10000`.</span></span>  
  
 <span data-ttu-id="aa88b-449">HTML と XML の両方で、ドキュメントの文字セット (および数値の文字参照の表記) は UCS [ISO-10646] に基づいています。</span><span class="sxs-lookup"><span data-stu-id="aa88b-449">For both HTML and XML, the document character set (and therefore the notation of numeric character references) is based on UCS [ISO-10646].</span></span> <span data-ttu-id="aa88b-450">したがって、ソースドキュメント内の1つの数値文字参照は、文字列の 2 16 ビット単位に対応する場合があります (上位サロゲートと下位サロゲート)。</span><span class="sxs-lookup"><span data-stu-id="aa88b-450">A single numeric character reference in a source document may therefore in some cases correspond to two 16-bit units in a string (a high surrogate and a low surrogate).</span></span> <span data-ttu-id="aa88b-451">これらの16ビットユニットは、サロゲートペアと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-451">These 16-bit units are referred to as a surrogate pair.</span></span>  
  
 <span data-ttu-id="aa88b-452">サロゲートまたは文字の詳細については、 [unicode 3.0/unicode 2.0 標準](https://www.unicode.org)のセクション3.7 を参照するか、W3C 勧告『 [XML 1.0 』のセクション 2.2](https://www.w3.org/TR/REC-xml#charsets)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="aa88b-452">For more information regarding surrogates or characters, refer to section 3.7 of the [Unicode 3.0/Unicode 2.0 standard](https://www.unicode.org), or [section 2.2 of the W3C XML 1.0 Recommendation](https://www.w3.org/TR/REC-xml#charsets).</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><span data-ttu-id="aa88b-453">無効なサロゲート文字ペアが渡されました。</span><span class="sxs-lookup"><span data-stu-id="aa88b-453">An invalid surrogate character pair was passed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespace">
      <MemberSignature Language="C#" Value="public override void WriteWhitespace (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteWhitespace(string ws) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteWhitespace (ws As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteWhitespace(System::String ^ ws);" />
      <MemberSignature Language="F#" Value="override this.WriteWhitespace : string -&gt; unit" Usage="xmlTextWriter.WriteWhitespace ws" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ws"><span data-ttu-id="aa88b-454">空白文字の文字列。</span><span class="sxs-lookup"><span data-stu-id="aa88b-454">The string of white space characters.</span></span></param>
        <summary><span data-ttu-id="aa88b-455">指定した空白を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-455">Writes out the given white space.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-456">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-456">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-457">このメソッドは、ドキュメントを手動で書式設定するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-457">This method is used to manually format your document.</span></span> <span data-ttu-id="aa88b-458"><xref:System.Xml.XmlTextWriter.Formatting%2A> プロパティを使用して、ライターが出力を自動的に書式設定するようにします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-458">Use the <xref:System.Xml.XmlTextWriter.Formatting%2A> property to have the writer format the output automatically.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-459">次の例では、`WriteWhitespace` メソッドを使用して、ファイルの形式を制御します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-459">The following example uses the `WriteWhitespace` method to control how the file is formatted.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aa88b-460">文字列に空白以外の文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="aa88b-460">The string contains non-white space characters.</span></span></exception>
        <altmember cref="P:System.Xml.XmlTextWriter.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public override string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlLang : string" Usage="System.Xml.XmlTextWriter.XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="aa88b-461">現在の <see langword="xml:lang" /> スコープを取得します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-461">Gets the current <see langword="xml:lang" /> scope.</span></span></summary>
        <value><span data-ttu-id="aa88b-462">現在の <see langword="xml:lang" />。または現在のスコープ内に <see langword="null" /> がない場合は <see langword="xml:lang" />。</span><span class="sxs-lookup"><span data-stu-id="aa88b-462">The current <see langword="xml:lang" /> or <see langword="null" /> if there is no <see langword="xml:lang" /> in the current scope.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-463">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-463">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-464">このプロパティを使用すると、あるコンポーネントが、別のコンポーネントによってライターの残りの状態を確認できます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-464">This property allows one component to find out what state another component has left the writer in.</span></span> <span data-ttu-id="aa88b-465">たとえば、あるコンポーネントが、生成する言語のヘルプテキストを別のコンポーネントに知らせたいとします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-465">For example, perhaps one component wants to tell another which language help text to generate.</span></span> <span data-ttu-id="aa88b-466">言語情報は、`xml:lang` 属性を記述することによって伝達されます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-466">The language information is communicated by writing an `xml:lang` attribute.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlSpace : System.Xml.XmlSpace" Usage="System.Xml.XmlTextWriter.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="aa88b-467">現在の <see langword="xml:space" /> スコープを表す <see cref="T:System.Xml.XmlSpace" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-467">Gets an <see cref="T:System.Xml.XmlSpace" /> representing the current <see langword="xml:space" /> scope.</span></span></summary>
        <value><span data-ttu-id="aa88b-468">現在の <see langword="XmlSpace" /> スコープを表す <see langword="xml:space" />。</span><span class="sxs-lookup"><span data-stu-id="aa88b-468">An <see langword="XmlSpace" /> representing the current <see langword="xml:space" /> scope.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="aa88b-469">[値]</span><span class="sxs-lookup"><span data-stu-id="aa88b-469">Value</span></span> 
 </term><description> <span data-ttu-id="aa88b-470">説明</span><span class="sxs-lookup"><span data-stu-id="aa88b-470">Meaning</span></span> 
 </description></listheader><item><term> <span data-ttu-id="aa88b-471">None</span><span class="sxs-lookup"><span data-stu-id="aa88b-471">None</span></span> 
 </term><description> <span data-ttu-id="aa88b-472"><see langword="xml:space" /> スコープが存在しない場合は、これが既定値になります。</span><span class="sxs-lookup"><span data-stu-id="aa88b-472">This is the default if no <see langword="xml:space" /> scope exists.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="aa88b-473">Default</span><span class="sxs-lookup"><span data-stu-id="aa88b-473">Default</span></span> 
 </term><description> <span data-ttu-id="aa88b-474">現在のスコープは、<see langword="xml:space" />="default" です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-474">The current scope is <see langword="xml:space" />="default".</span></span>  
  
 </description></item><item><term> <span data-ttu-id="aa88b-475">Preserve</span><span class="sxs-lookup"><span data-stu-id="aa88b-475">Preserve</span></span> 
 </term><description> <span data-ttu-id="aa88b-476">現在のスコープは、<see langword="xml:space" />="preserve" です。</span><span class="sxs-lookup"><span data-stu-id="aa88b-476">The current scope is <see langword="xml:space" />="preserve".</span></span>  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="aa88b-477">.NET Framework 2.0 以降では、新しい機能を利用するために、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドと <xref:System.Xml.XmlWriterSettings> クラスを使用して <xref:System.Xml.XmlWriter> インスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="aa88b-477">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="aa88b-478">このプロパティを使用すると、1つのコンポーネントが、別のコンポーネントがライターを終了した状態を調べることができます。</span><span class="sxs-lookup"><span data-stu-id="aa88b-478">This property allows one component to find out in what state another component has left the writer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa88b-479">次の例では、`WriteWhitespace` メソッドを使用して、ファイルの形式を制御します。</span><span class="sxs-lookup"><span data-stu-id="aa88b-479">The following example uses the `WriteWhitespace` method to control how the file is formatted.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
