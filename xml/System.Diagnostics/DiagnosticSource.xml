<Type Name="DiagnosticSource" FullName="System.Diagnostics.DiagnosticSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="64a90076fb2f94db7d8b59d761eced1e81dbb787" /><Meta Name="ms.sourcegitcommit" Value="8b09499854b5b7b909802126edc1f1fca0054c10" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/01/2020" /><Meta Name="ms.locfileid" Value="76947671" /></Metadata><TypeSignature Language="C#" Value="public abstract class DiagnosticSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DiagnosticSource extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DiagnosticSource" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DiagnosticSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class DiagnosticSource abstract" />
  <TypeSignature Language="F#" Value="type DiagnosticSource = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.1</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ee08f-101">コードが、インストルメント化されたプロセスで使用されるために、リッチ データのペイロードの生産時間のログ記録に使用されるのをインストルメント化する抽象クラスです。</span><span class="sxs-lookup"><span data-stu-id="ee08f-101">An abstract class that allows code to be instrumented for production-time logging of rich data payloads for consumption within the process that was instrumented.</span></span></summary>
    <remarks><span data-ttu-id="ee08f-102">詳細については、「 [DiagnosticSource User Guide](https://github.com/dotnet/runtime/blob/master/src/libraries/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ee08f-102">For more information, see [DiagnosticSource User's Guide](https://github.com/dotnet/runtime/blob/master/src/libraries/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md).</span></span></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DiagnosticSource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DiagnosticSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ee08f-103"><see cref="T:System.Diagnostics.DiagnosticSource" /> クラスのインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="ee08f-103">Initializes an instance of the <see cref="T:System.Diagnostics.DiagnosticSource" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public abstract bool IsEnabled (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsEnabled (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsEnabled(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : string -&gt; bool" Usage="diagnosticSource.IsEnabled name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ee08f-104">書き込まれるイベントの名前です。</span><span class="sxs-lookup"><span data-stu-id="ee08f-104">The name of the event being written.</span></span></param>
        <summary><span data-ttu-id="ee08f-105">通知イベントが有効になったかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="ee08f-105">Verifies if the notification event is enabled.</span></span></summary>
        <returns><span data-ttu-id="ee08f-106">通知イベントが有効な場合は <see langword="true" /> で、それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="ee08f-106"><see langword="true" /> if the notification event is enabled, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="ee08f-107">通知に対して高額なセットアップが行われている場合は、このセットアップを実行する前に IsEnabled を呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="ee08f-107">If there is expensive setup for the notification, you can call IsEnabled before performing this setup.</span></span> <span data-ttu-id="ee08f-108">コンシューマーは、IsEnabled が true の場合にのみ通知を受け取ることを想定しないでください。</span><span class="sxs-lookup"><span data-stu-id="ee08f-108">Consumers should not assume that they only get notifications for which IsEnabled is true.</span></span> <span data-ttu-id="ee08f-109">ただし、プロデューサーがこの API を呼び出す場合は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="ee08f-109">However, it is optional for producers to call this API.</span></span> <span data-ttu-id="ee08f-110">名前は <see cref="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)" />に渡されたものと同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="ee08f-110">The name should be the same as that passed to <see cref="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)" />.</span></span>

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public virtual bool IsEnabled (string name, object arg1, object arg2 = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(string name, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEnabled (name As String, arg1 As Object, Optional arg2 As Object = null) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : string * obj * obj -&gt; bool&#xA;override this.IsEnabled : string * obj * obj -&gt; bool" Usage="diagnosticSource.IsEnabled (name, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="arg1" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="arg2" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ee08f-111">書き込まれるイベントの名前です。</span><span class="sxs-lookup"><span data-stu-id="ee08f-111">The name of the event being written.</span></span></param>
        <param name="arg1"><span data-ttu-id="ee08f-112">IsEnabled の追加のコンテキストを表すオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="ee08f-112">An object that represents the additional context for IsEnabled.</span></span> <span data-ttu-id="ee08f-113">コンシューマーは <see langword="null" /> を受け取ります。これは、プロデューサーが純粋な IsEnabled(string) を呼び出し、コンシューマーがそのようなイベントの通知をそもそも受け取りたいかを確認したことを示している場合があります。</span><span class="sxs-lookup"><span data-stu-id="ee08f-113">Consumers should expect to receive <see langword="null" /> which may indicate that producer called pure IsEnabled(string) to check if consumer wants to get notifications for such events at all.</span></span> <span data-ttu-id="ee08f-114">これに基づいて、プロデューサーが非 <see langword="null" /> コンテキストを使用して再度 IsEnabled(string, object, object) を呼び出す場合があります。</span><span class="sxs-lookup"><span data-stu-id="ee08f-114">Based on that, producer may call IsEnabled(string, object, object) again with non-<see langword="null" /> context.</span></span></param>
        <param name="arg2"><span data-ttu-id="ee08f-115">任意。</span><span class="sxs-lookup"><span data-stu-id="ee08f-115">Optional.</span></span> <span data-ttu-id="ee08f-116">IsEnabled の追加のコンテキストを表すオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="ee08f-116">An object that represents the additional context for IsEnabled.</span></span> <span data-ttu-id="ee08f-117">既定では <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="ee08f-117"><see langword="null" /> by default.</span></span> <span data-ttu-id="ee08f-118">コンシューマーは <see langword="null" /> を受け取ります。これは、プロデューサーが純粋な IsEnabled(string) を呼び出したか、プロデューサーが必要なすべてのコンテキストを <paramref name="arg1" /> で渡していることを示している場合があります。</span><span class="sxs-lookup"><span data-stu-id="ee08f-118">Consumers should expect to receive <see langword="null" /> which may indicate that producer called pure IsEnabled(string) or producer passed all necessary context in <paramref name="arg1" />.</span></span></param>
        <summary><span data-ttu-id="ee08f-119">通知イベントが有効になったかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="ee08f-119">Verifies it the notification event is enabled.</span></span></summary>
        <returns><span data-ttu-id="ee08f-120">通知イベントが有効な場合は <see langword="true" /> で、それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="ee08f-120"><see langword="true" /> if the notification event is enabled, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
<span data-ttu-id="ee08f-121">通知に対して高額なセットアップが行われている場合は、セットアップを実行する前にこのメソッドを呼び出してコンテキストを指定できます。</span><span class="sxs-lookup"><span data-stu-id="ee08f-121">If there is expensive setup for the notification, you can call this method and provide context before performing the setup.</span></span>
          
           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityExport">
      <MemberSignature Language="C#" Value="public virtual void OnActivityExport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityExport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.OnActivityExport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnActivityExport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="abstract member OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit&#xA;override this.OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.OnActivityExport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="ee08f-122">外部イベントの影響を受けるアクティビティ。</span><span class="sxs-lookup"><span data-stu-id="ee08f-122">The activity affected by an external event.</span></span></param>
        <param name="payload"><span data-ttu-id="ee08f-123">送信要求を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ee08f-123">An object that represents the outgoing request.</span></span></param>
        <summary><span data-ttu-id="ee08f-124">送信される HTTP 要求など、プロセスの外で発生するイベントまたは操作にアクティビティから状態を転送します。</span><span class="sxs-lookup"><span data-stu-id="ee08f-124">Transfers state from an activity to some event or operation, such as an outgoing HTTP request, that will occur outside the process.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="ee08f-125">インストルメンテーションサイトが、アクティビティがプロセスを終了する場所 (送信 HTTP 要求など) にある場合、そのサイトはアクティビティから発信要求に状態を転送する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ee08f-125">If an instrumentation site is at a location where activities leave the process (such as outgoing HTTP requests), that site will want to transfer state from the activity to the outgoing request.</span></span>

<span data-ttu-id="ee08f-126">可能な限り、インストルメンテーションサイトではこれを行う必要があります。これは、インストルメンテーションサイトでの <xref:System.Diagnostics.Activity> と ougoing の要求ロジックとの間にコントラクトがあるためです。</span><span class="sxs-lookup"><span data-stu-id="ee08f-126">To the extent possible, this should be done by the instrumentation site, because there is a contract between an <xref:System.Diagnostics.Activity> and the ougoing request logic at the instrumentation site.</span></span>   <span data-ttu-id="ee08f-127">ただし、インストルメンテーションサイトではポリシーを処理できません (たとえば、互換性上の理由から、アクティビティ情報を無効にするか、以前の形式で記述する必要があるかなど)。</span><span class="sxs-lookup"><span data-stu-id="ee08f-127">However, the instrumentation site can't handle policy (for example, whether activity information should be disabled or written in an older format for compatibility reasons).</span></span>
<span data-ttu-id="ee08f-128">この場合、インストルメンテーションサイトでは、ログシステムにコールバックし、ポリシーを解決するように要求する必要があります。</span><span class="sxs-lookup"><span data-stu-id="ee08f-128">For this, the instrumentation site needs to call back out to the logging system and ask it to resolve policy.</span></span> <span data-ttu-id="ee08f-129">これは、`OnActivityExport` メソッドの目的です。</span><span class="sxs-lookup"><span data-stu-id="ee08f-129">This is the purpose of the `OnActivityExport` method.</span></span>

<span data-ttu-id="ee08f-130">`OnActivityExport` メソッドには、<xref:System.Diagnostics.Activity>、および発信要求を表すペイロードオブジェクトが与えられます。</span><span class="sxs-lookup"><span data-stu-id="ee08f-130">The `OnActivityExport` method is given the <xref:System.Diagnostics.Activity> as well as a payload object that represents the outgoing request.</span></span> <span data-ttu-id="ee08f-131"><xref:System.Diagnostics.DiagnosticSource> のサブスクライバーには、送信前に送信要求を更新する機能があります。</span><span class="sxs-lookup"><span data-stu-id="ee08f-131">A <xref:System.Diagnostics.DiagnosticSource> subscriber then has the ability to update the outgoing request before it is sent.</span></span>
 
<span data-ttu-id="ee08f-132">この方法は、インストルメンテーションサイト (プロセスの送信境界上にあるサイトのみ) ではほとんど使用されないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="ee08f-132">Note that this method is rarely used at instrumentation sites (only those sites that are on an outgoing boundary of the process).</span></span>   <span data-ttu-id="ee08f-133">さらに、通常、インストルメンテーションサイトで実行される既定のポリシー (特定の送信規則ですべてのアクティビティ状態を転送する場合など) は、問題ありません。</span><span class="sxs-lookup"><span data-stu-id="ee08f-133">Moreover, typically the default policy that the instrumentation site performs (for example, to transfer all activity state in a particular outgoing convention) is likely to be fine.</span></span> <span data-ttu-id="ee08f-134">このメソッドは、問題が発生した場合にのみ使用します。</span><span class="sxs-lookup"><span data-stu-id="ee08f-134">This method is only for cases where that is a problem.</span></span> <span data-ttu-id="ee08f-135">このため、このメソッドはごくまれに使用する必要がありますが、ほとんどの場合、`OnActivityImport` と将来の symetry との互換性があります。</span><span class="sxs-lookup"><span data-stu-id="ee08f-135">Thus, this method should be used very rarely and is mostly here for symetry with `OnActivityImport` and future-proofing.</span></span>

<span data-ttu-id="ee08f-136">ここでは `payload` が <xref:System.Object> として入力されることに注意してくださいが、特定のインストルメンテーションサイトとサブスクライバーはペイロードの種類を認識し、必要に応じてキャストおよびデコードする必要があります。</span><span class="sxs-lookup"><span data-stu-id="ee08f-136">Note that `payload` is typed as an <xref:System.Object> here, but any particular instrumentation site and subscriber should know the type of the payload and thus cast and decode it if necessary.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityImport">
      <MemberSignature Language="C#" Value="public virtual void OnActivityImport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityImport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.OnActivityImport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnActivityImport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="abstract member OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit&#xA;override this.OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.OnActivityImport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="ee08f-137">外部イベントの影響を受けるアクティビティ。</span><span class="sxs-lookup"><span data-stu-id="ee08f-137">The activity affected by an external event.</span></span></param>
        <param name="payload"><span data-ttu-id="ee08f-138">受信した要求を表すペイロード。</span><span class="sxs-lookup"><span data-stu-id="ee08f-138">A payload that represents the incoming request.</span></span></param>
        <summary><span data-ttu-id="ee08f-139">プロセスの外で発生した、受信要求など、イベントまたは操作からアクティビティに状態を転送します。</span><span class="sxs-lookup"><span data-stu-id="ee08f-139">Transfers state to an activity from some event or operation, such as an incoming request, that occurred outside the process.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="ee08f-140">インバウンド HTTP 要求など、プロセス外のイベントに応答して、インストルメンテーションサイトが新しいアクティビティを作成する場合、`OnActivityImport` 方法では、そのサイトで新しいアクティビティを作成し、受信要求からアクティビティに状態を転送することができます。</span><span class="sxs-lookup"><span data-stu-id="ee08f-140">If an instrumentation site creates a new activity in response to some event outside the process, such as an incomming HTTP request), the `OnActivityImport` method allows that site will want to create a new activity and transfer state from the incoming request to the activity.</span></span> 

<span data-ttu-id="ee08f-141">この処理は、インストルメンテーションサイトで実行する必要があります。これは、インストルメンテーションサイトでの <xref:System.Diagnostics.Activity> と着信の要求ロジックとの間にコントラクトがあるためです。</span><span class="sxs-lookup"><span data-stu-id="ee08f-141">To the extent possible, this should be done by the instrumentation site, because there is a contract between the <xref:System.Diagnostics.Activity> and the incomming request logic at the instrumentation site.</span></span>   <span data-ttu-id="ee08f-142">ただし、インストルメンテーションサイトではポリシーを処理できません。</span><span class="sxs-lookup"><span data-stu-id="ee08f-142">However, the instrumentation site can't handle policy.</span></span> <span data-ttu-id="ee08f-143">(たとえば、サンプリングが実行された場合は、どの要求をサンプリングする必要がありますか。)このような場合、インストルメンテーションサイトでは、ログシステムにコールバックし、ポリシーを解決するように要求する必要があります (たとえば、アクティビティの "サンプリング" ビットを設定する必要があるかどうかを判断する場合など)。</span><span class="sxs-lookup"><span data-stu-id="ee08f-143">(For example, if sampling is done, exactly which requests should be sampled?) In these cases, the instrumentation site needs to call back out to the logging system and ask it to resolve policy (for example, to decide if the activity's "sampling" bit should be set).</span></span> <span data-ttu-id="ee08f-144">これは、`OnActivityImport` メソッドの目的です。</span><span class="sxs-lookup"><span data-stu-id="ee08f-144">This is the purpose of the `OnActivityImport` method.</span></span> <span data-ttu-id="ee08f-145">これには、アクティビティと、着信要求を表すペイロードオブジェクトが付与されます。</span><span class="sxs-lookup"><span data-stu-id="ee08f-145">It is given the activity as well as a payload object that represents the incomming request.</span></span> <span data-ttu-id="ee08f-146">その後、<xref:System.Diagnostics.DiagnosticSource> のサブスクライバーが、必要に応じてこのアクティビティを更新できるようになります。</span><span class="sxs-lookup"><span data-stu-id="ee08f-146">The subscribers to the <xref:System.Diagnostics.DiagnosticSource> then have the opportunity to update this activity as desired.</span></span> 

<span data-ttu-id="ee08f-147">この方法は、ほとんどの場合、インストルメンテーションサイト (プロセスの境界上にあるサイトのみ) で使用され、instrumetation サイトはいくつかの既定のポリシー (*何らか*の方法でアクティビティを設定します) を実装します。そのため、既定のポリシーが正常な場合は、このメソッドをオーバーライドする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="ee08f-147">This method is rarely used at instrumentation sites (only those sites that are on the boundary of the process), and the instrumetation site implements some default policy (it sets the activity in *some* way), and so it is not necessary to override this method if that default policy is fine.</span></span> <span data-ttu-id="ee08f-148">つまり、このメソッドは非常にまれなケースでオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="ee08f-148">In other words, this method should be overridden in very rare (but often important) cases.</span></span>

<span data-ttu-id="ee08f-149">ここでは `payload` が <xref:System.Object> として入力されていますが、特定のインストルメンテーションサイトとサブスクライバーはペイロードの種類を認識しているため、必要に応じてキャストしてデコードします。</span><span class="sxs-lookup"><span data-stu-id="ee08f-149">Note that `payload` is typed as <xref:System.Object> here, but any particular instrumentation site and subscriber will know the type of the payload and thus cast and decode it if necessary.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartActivity">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Activity StartActivity (System.Diagnostics.Activity activity, object args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.Activity StartActivity(class System.Diagnostics.Activity activity, object args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.StartActivity(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::Activity ^ StartActivity(System::Diagnostics::Activity ^ activity, System::Object ^ args);" />
      <MemberSignature Language="F#" Value="member this.StartActivity : System.Diagnostics.Activity * obj -&gt; System.Diagnostics.Activity" Usage="diagnosticSource.StartActivity (activity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="args" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="ee08f-150">開始する <see cref="T:System.Diagnostics.Activity" /> です。</span><span class="sxs-lookup"><span data-stu-id="ee08f-150">The <see cref="T:System.Diagnostics.Activity" /> to be started.</span></span></param>
        <param name="args"><span data-ttu-id="ee08f-151">イベントのペイロードとして渡される値を表すオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="ee08f-151">An object that represent the value being passed as a payload for the event.</span></span></param>
        <summary><span data-ttu-id="ee08f-152"><see cref="T:System.Diagnostics.Activity" /> を開始し、開始イベントを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="ee08f-152">Starts an <see cref="T:System.Diagnostics.Activity" /> and writes a start event.</span></span></summary>
        <returns><span data-ttu-id="ee08f-153">チェーンで役立つために開始されたアクティビティです。</span><span class="sxs-lookup"><span data-stu-id="ee08f-153">The started activity for convenient chaining.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
           
<span data-ttu-id="ee08f-154"><xref:System.Diagnostics.Activity> には、論理操作、そのコンテキスト、および親の関係が記述されています。現在の <xref:System.Diagnostics.Activity> は、操作の処理を通過します。</span><span class="sxs-lookup"><span data-stu-id="ee08f-154">The <xref:System.Diagnostics.Activity> describes the logical operation, its context, and parent relation; the current <xref:System.Diagnostics.Activity> flows through the operation processing.</span></span>

<span data-ttu-id="ee08f-155">このメソッドは、指定された <xref:System.Diagnostics.Activity>を開始し、指定された <xref:System.Diagnostics.Activity>のグローバル <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> と <xref:System.Diagnostics.Activity.Parent?displayProperty=nameWithType> アクティビティを保持し、新しい <xref:System.Diagnostics.Activity> が開始されたことをコンシューマーに通知します。</span><span class="sxs-lookup"><span data-stu-id="ee08f-155">This method starts the given <xref:System.Diagnostics.Activity>, maintains a global <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> and <xref:System.Diagnostics.Activity.Parent?displayProperty=nameWithType> activity for the given <xref:System.Diagnostics.Activity>, and notifies consumers that a new <xref:System.Diagnostics.Activity> was started.</span></span> <span data-ttu-id="ee08f-156">コンシューマーは、<xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> にアクセスしてコンテキストを追加したり、テレメトリを補強したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="ee08f-156">Consumers can access <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> to add context and/or augment telemetry.</span></span>

<span data-ttu-id="ee08f-157">プロデューサーは、ペイロード内のコンシューマーに追加の詳細を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="ee08f-157">Producers may pass additional details to the consumer in the payload.</span></span>

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopActivity">
      <MemberSignature Language="C#" Value="public void StopActivity (System.Diagnostics.Activity activity, object args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopActivity(class System.Diagnostics.Activity activity, object args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.StopActivity(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopActivity(System::Diagnostics::Activity ^ activity, System::Object ^ args);" />
      <MemberSignature Language="F#" Value="member this.StopActivity : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.StopActivity (activity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="args" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="ee08f-158">停止するアクティビティです。</span><span class="sxs-lookup"><span data-stu-id="ee08f-158">The activity to be stopped.</span></span></param>
        <param name="args"><span data-ttu-id="ee08f-159">イベントのペイロードとして渡される値を表すオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="ee08f-159">An object that represents the value passed as a payload for the event.</span></span></param>
        <summary><span data-ttu-id="ee08f-160">指定した <see cref="T:System.Diagnostics.Activity" /> を停止し、グローバルな <see cref="P:System.Diagnostics.Activity.Current" /> アクティビティを維持し、コンシューマーに <see cref="T:System.Diagnostics.Activity" /> が停止されたことを通知します。</span><span class="sxs-lookup"><span data-stu-id="ee08f-160">Stops the given <see cref="T:System.Diagnostics.Activity" />, maintains the global <see cref="P:System.Diagnostics.Activity.Current" /> activity, and notifies consumers that the <see cref="T:System.Diagnostics.Activity" /> was stopped.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="ee08f-161">プロデューサーは、ペイロード内のコンシューマーに追加の詳細を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="ee08f-161">Producers may pass additional details to the consumer in the payload.</span></span>

<span data-ttu-id="ee08f-162">コンシューマーは、<xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> にアクセスしてコンテキストを追加したり、テレメトリを補強したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="ee08f-162">Consumers can access <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> to add context and/or augment telemetry.</span></span>


         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract void Write (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Write (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Write(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj -&gt; unit" Usage="diagnosticSource.Write (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ee08f-163">書き込まれるイベントの名前です。</span><span class="sxs-lookup"><span data-stu-id="ee08f-163">The name of the event being written.</span></span></param>
        <param name="value"><span data-ttu-id="ee08f-164">イベントのペイロードとして渡される値を表すオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="ee08f-164">An object that represents the value being passed as a payload for the event.</span></span> <span data-ttu-id="ee08f-165">これは通常、いくつかのサブ値を含む匿名型です。</span><span class="sxs-lookup"><span data-stu-id="ee08f-165">This is often an anonymous type which contains several sub-values.</span></span></param>
        <summary><span data-ttu-id="ee08f-166">複雑なペイロードのログを記録する汎用的な方法です。</span><span class="sxs-lookup"><span data-stu-id="ee08f-166">Provides a generic way of logging complex payloads.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="ee08f-167">各通知には、それを識別する名前と、通知に渡す任意の情報を提供するオブジェクト (通常は匿名型) が与えられます。</span><span class="sxs-lookup"><span data-stu-id="ee08f-167">Each notification is given a name that identifies it, as well as an object (typically an anonymous type) that provides arbitrary information to pass to the notification.</span></span>  

<span data-ttu-id="ee08f-168">`name` は短くする必要があります。</span><span class="sxs-lookup"><span data-stu-id="ee08f-168">`name` should be short.</span></span> <span data-ttu-id="ee08f-169">`name` はグローバルに一意である必要があるため、あいまいさを避ける必要がある場合を除き、完全修飾名は使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="ee08f-169">Don't use a fully qualified name unless you have to to avoid ambiguity, since `name` must be globally unique.</span></span> <span data-ttu-id="ee08f-170">通常、 *componentName*は、 *componentName*と*eventName*が10文字未満の文字列であるため、適切なセキュリティ侵害が発生します。</span><span class="sxs-lookup"><span data-stu-id="ee08f-170">Typically, *componentName.eventName*, where *componentName* and *eventName* are strings less than 10 characters, are a good compromise.</span></span>

<span data-ttu-id="ee08f-171">コンポーネント名にドットが含まれており、それらの両方にドットがあるため、あいまいさが生じるため、通知名には `.` を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="ee08f-171">Notification names should not have `.` in them because component names have dots, and for them both to have dots leads to ambiguity.</span></span> <span data-ttu-id="ee08f-172">代わりに `_` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="ee08f-172">We suggest that you use `_` instead.</span></span>

<span data-ttu-id="ee08f-173">リスナーが文字列プレフィックスを使用してグループをフィルター処理するとします。</span><span class="sxs-lookup"><span data-stu-id="ee08f-173">Assume that listeners will use string prefixing to filter groups.</span></span> <span data-ttu-id="ee08f-174">したがって、コンポーネント名の階層構造を用意することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="ee08f-174">Therefore, having a hierarchy of component names is a good practice.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
