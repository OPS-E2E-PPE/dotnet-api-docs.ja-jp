<Type Name="EventSourceCreationData" FullName="System.Diagnostics.EventSourceCreationData">
  <Metadata><Meta Name="ms.openlocfilehash" Value="be9824eaf4168c9ff4b4eca3183c6a81630d850d" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77228597" /></Metadata><TypeSignature Language="C#" Value="public class EventSourceCreationData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSourceCreationData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSourceCreationData" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSourceCreationData" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSourceCreationData" />
  <TypeSignature Language="F#" Value="type EventSourceCreationData = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ローカル コンピューターまたはリモート コンピューターでイベント ログ ソースを作成するために使用される構成設定を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSourceCreationData> クラスを使用して、ローカライズされたエントリをイベントログに書き込むための新しいソースを構成します。 このクラスを使用して、イベントログから読み取る必要はありません。  
  
 このクラスは、新しいイベントソースとそれに関連付けられているイベントログの構成設定を定義します。 関連付けられているイベントログは、ローカルコンピューターまたはリモートコンピューターに配置できます。 ローカルコンピューター上の新規または既存のイベントログの新しいソースを作成するには、<xref:System.Diagnostics.EventSourceCreationData> の <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> と <xref:System.Diagnostics.EventSourceCreationData.Source%2A> のプロパティを設定し、<xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> メソッドを呼び出します。 このメソッドは、<xref:System.Diagnostics.EventSourceCreationData.Source%2A> プロパティで指定したイベントソースを作成し、<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>で指定されたイベントログに登録します。 この動作は、<xref:System.Diagnostics.EventLogInstaller> クラスを使用してイベントログのイベントソースを登録することと似ています。  
  
 イベントログにイベントを書き込むには、<xref:System.Diagnostics.EventLog.WriteEvent%2A> メソッドと <xref:System.Diagnostics.EventLog.WriteEntry%2A> メソッドを使用します。 イベントを書き込むには、イベントソースを指定する必要があります。ソースとの最初のエントリを書き込む前に、イベントソースを作成して構成する必要があります。  
  
 アプリケーションのインストール時に新しいイベントソースを作成します。 これにより、オペレーティングシステムが登録済みのイベントソースとその構成の一覧を更新できるようになります。 オペレーティングシステムがイベントソースの一覧を更新しておらず、新しいソースでイベントを作成しようとすると、書き込み操作は失敗します。 新しいソースを構成するには、<xref:System.Diagnostics.EventLogInstaller>を使用するか、<xref:System.Diagnostics.EventLog.CreateEventSource%2A> 方法を使用します。 新しいイベントソースを作成するには、コンピューターの管理者権限が必要です。  
  
 既存のイベントログまたは新しいイベントログのイベントソースを作成できます。 新しいイベントログ用に新しいソースを作成すると、そのログのソースが登録されますが、最初のエントリが書き込まれるまでログは作成されません。  
  
 各ソースは、一度に1つのイベントログにのみ書き込むことができます。ただし、アプリケーションで複数のソースを使用して複数のイベントログに書き込むことができます。 たとえば、アプリケーションによっては、異なるイベントログまたは異なるリソースファイル用に複数のソースが構成されている必要があります。  
  
 既存のソースの構成の詳細を変更するには、ソースを削除してから、新しい構成を使用して作成する必要があります。 他のアプリケーションまたはコンポーネントが既存のソースを使用する場合は、既存のソースを削除するのではなく、更新された構成で新しいソースを作成します。  
  
 イベントソースは、イベントカテゴリとメッセージ文字列のローカライズされたリソースに登録できます。 アプリケーションでは、実際の文字列を指定するのではなく、リソース識別子を使用してイベントログエントリを書き込むことができます。 イベントビューアーは、リソース識別子を使用して、ローカライズされたリソースファイルの対応する文字列を検索し、現在の言語設定に基づいて表示します。 イベントカテゴリ、メッセージ、およびパラメーター挿入文字列用に別のファイルを登録するか、3種類のすべての文字列に同じリソースファイルを登録できます。 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>、<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>、<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>、および <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> プロパティを使用して、ローカライズされたエントリをイベントログに書き込むようにソースを構成します。 アプリケーションが文字列値をイベントログに直接書き込む場合は、これらのプロパティを設定する必要はありません。  
  
 ソースは、ローカライズされたエントリを書き込むか、または直接文字列を書き込むために構成する必要があります。 <xref:System.Diagnostics.EventLog.WriteEntry%2A> メソッドは、指定された文字列をイベントログに直接書き込みます。ローカライズ可能なメッセージリソースファイルは使用しません。 ローカライズされたメッセージリソースファイルを使用してイベントを書き込むには、<xref:System.Diagnostics.EventLog.WriteEvent%2A> メソッドを使用します。  
  
 アプリケーションがリソース識別子と文字列値の両方を使用してエントリを書き込む場合は、2つの異なるソースを登録する必要があります。 たとえば、リソースファイルを使用して1つのソースを構成し、そのソースを <xref:System.Diagnostics.EventLog.WriteEvent%2A> メソッドで使用して、リソース識別子を使用してエントリをイベントログに書き込みます。 次に、リソースファイルを含まない別のソースを作成し、そのソースを <xref:System.Diagnostics.EventLog.WriteEntry%2A> メソッドで使用して、そのソースを使用して、イベントログに直接文字列を書き込みます。  
  
   
  
## Examples  
 次のコード例では、コマンドライン引数からイベントソースの構成プロパティを設定します。 入力引数は、イベントソース名、イベントログ名、コンピューター名、およびイベントメッセージリソースファイルを指定します。 このコード例では、ソースが既存のイベントソースと競合していないことを確認し、指定されたイベントログの新しいイベントソースを作成します。  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#1)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#1)]
 [!code-vb[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSourceCreationData (string source, string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string source, string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (source As String, logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSourceCreationData(System::String ^ source, System::String ^ logName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSourceCreationData : string * string -&gt; System.Diagnostics.EventSourceCreationData" Usage="new System.Diagnostics.EventSourceCreationData (source, logName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">エントリのソースとしてイベント ログに登録する名前。</param>
        <param name="logName">ソースのエントリが書き込まれるログの名前。</param>
        <summary>指定したイベント ソースおよびイベント ログ名を使用して、<see cref="T:System.Diagnostics.EventSourceCreationData" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントログにエントリを書き込むには、最初にイベントログのイベントソースを作成する必要があります。 新しいソースを登録するには、<xref:System.Diagnostics.EventSourceCreationData> インスタンスを初期化し、アプリケーションのインスタンスのプロパティを構成して、<xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> メソッドを呼び出します。 ソースが登録されたら、<xref:System.Diagnostics.EventLog.WriteEvent%2A> または <xref:System.Diagnostics.EventLog.WriteEntry%2A> メソッドを使用して、ソースからエントリを書き込むことができます。  
  
 イベントソースは、イベントカテゴリとメッセージ文字列のローカライズされたリソースに登録できます。 アプリケーションでは、実際の文字列を指定するのではなく、リソース識別子を使用してイベントログエントリを書き込むことができます。 イベントビューアーは、リソース識別子を使用して、ローカライズされたリソースファイルの対応する文字列を検索し、現在の言語設定に基づいて表示します。 イベントカテゴリ、メッセージ、およびパラメーター挿入文字列用に別のファイルを登録するか、3種類のすべての文字列に同じリソースファイルを登録できます。 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>、<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>、<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>、および <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> プロパティを使用して、ローカライズされたエントリをイベントログに書き込むようにソースを構成します。 アプリケーションが文字列値をイベントログに直接書き込む場合は、これらのプロパティを設定する必要はありません。  
  
 ソースは、ローカライズされたエントリを書き込むか、または直接文字列を書き込むために構成する必要があります。 アプリケーションがリソース識別子と文字列値の両方を使用してエントリを書き込む場合は、2つの異なるソースを登録する必要があります。 たとえば、リソースファイルを使用して1つのソースを構成し、そのソースを <xref:System.Diagnostics.EventLog.WriteEvent%2A> メソッドで使用して、リソース識別子を使用してエントリをイベントログに書き込みます。 次に、リソースファイルを含まない別のソースを作成し、そのソースを <xref:System.Diagnostics.EventLog.WriteEntry%2A> メソッドで使用して、文字列をイベントログに直接書き込みます。  
  
 次の表に、<xref:System.Diagnostics.EventSourceCreationData>のプロパティの初期値を示します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventSourceCreationData.Source%2A>|`source` パラメーター。|  
|<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>|`logName` パラメーター。|  
|<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>|ローカルコンピューター (".")。|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>|ゼロ|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>|`null` (Visual Basic の場合は `Nothing`)。|  
|<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>|`null` (Visual Basic の場合は `Nothing`)。|  
|<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>|`null` (Visual Basic の場合は `Nothing`)。|  
  
   
  
## Examples  
 次のコード例では、`SampleApplicationSource` という名前のイベントソースがローカルコンピューターに登録されているかどうかを確認します。 イベントソースが存在しない場合、この例では、ソースのメッセージリソースファイルを設定し、新しいイベントソースを作成します。 最後に、コード例では、`DisplayNameMsgId` のリソース識別子の値と `messageFile`のリソースファイルパスを使用して、イベントログのローカライズされた表示名を設定します。  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 このコード例では、リソースライブラリ EventLogMsgs に組み込まれている次のメッセージテキストファイルを使用します。 メッセージテキストファイルは、メッセージリソースファイルの作成元のソースです。 メッセージテキストファイルは、カテゴリ、イベントメッセージ、およびパラメーター挿入文字列のリソース識別子とテキストを定義します。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.LogName" />
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カテゴリ リソース ファイル内のカテゴリの数を取得または設定します。</summary>
        <value>カテゴリ リソース ファイル内のカテゴリの数。 既定値はゼロです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> プロパティと <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> プロパティを使用して、ローカライズされたカテゴリ文字列を持つイベントを作成します。 イベントを記述するときにカテゴリを指定すると、イベントビューアーによってイベントエントリのカテゴリが表示されます。 イベントログカテゴリは、イベントをフィルター処理したり、イベントに関する詳細情報を提供したりするためのアプリケーション定義の文字列です。 たとえば、アプリケーションでは、さまざまなコンポーネントまたは異なる操作に対して個別のカテゴリを定義できます。  
  
 イベントカテゴリは省略可能です。アプリケーションでカテゴリを使用しない場合は、<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> と <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> のプロパティを設定しないでください。  
  
 イベントメッセージの定義とイベントリソースファイルの作成の詳細については、プラットフォーム SDK ドキュメントの「Message Compiler」 ( [https://msdn.microsoft.com](https://msdn.microsoft.com/)) を参照してください。  
  
   
  
## Examples  
 次のコード例では、`SampleApplicationSource` という名前のイベントソースがローカルコンピューターに登録されているかどうかを確認します。 イベントソースが存在しない場合、この例では、ソースのメッセージリソースファイルを設定し、新しいイベントソースを作成します。 最後に、コード例では、`DisplayNameMsgId` のリソース識別子の値と `messageFile`のリソースファイルパスを使用して、イベントログのローカライズされた表示名を設定します。  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 このコード例では、リソースライブラリ EventLogMsgs に組み込まれている次のメッセージテキストファイルを使用します。 メッセージテキストファイルは、メッセージリソースファイルの作成元のソースです。 メッセージテキストファイルは、カテゴリ、イベントメッセージ、およびパラメーター挿入文字列のリソース識別子とテキストを定義します。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが負の値または <see cref="F:System.UInt16.MaxValue" /> より大きい値に設定されています。</exception>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ソースのカテゴリ文字列が格納されたリソース ファイルのパスを取得または設定します。</summary>
        <value>カテゴリ リソース ファイルのパス。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> プロパティと <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> プロパティを使用して、ローカライズされたカテゴリ文字列を持つイベントを作成します。 イベントを記述するときにカテゴリを指定すると、イベントビューアーによってイベントエントリのカテゴリが表示されます。 イベントログカテゴリは、イベントをフィルター処理したり、イベントに関する詳細情報を提供したりするためのアプリケーション定義の文字列です。 たとえば、アプリケーションでは、さまざまなコンポーネントまたは異なる操作に対して個別のカテゴリを定義できます。  
  
 イベントカテゴリは省略可能です。アプリケーションでカテゴリを使用しない場合は、<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> と <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> のプロパティを設定しないでください。  
  
 イベントメッセージの定義とイベントリソースファイルの作成の詳細については、プラットフォーム SDK ドキュメントの「Message Compiler」 ( [https://msdn.microsoft.com](https://msdn.microsoft.com/)) を参照してください。  
  
   
  
## Examples  
 次のコード例では、`SampleApplicationSource` という名前のイベントソースがローカルコンピューターに登録されているかどうかを確認します。 イベントソースが存在しない場合、この例では、ソースのメッセージリソースファイルを設定し、新しいイベントソースを作成します。 最後に、コード例では、`DisplayNameMsgId` のリソース識別子の値と `messageFile`のリソースファイルパスを使用して、イベントログのローカライズされた表示名を設定します。  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 このコード例では、リソースライブラリ EventLogMsgs に組み込まれている次のメッセージテキストファイルを使用します。 メッセージテキストファイルは、メッセージリソースファイルの作成元のソースです。 メッセージテキストファイルは、カテゴリ、イベントメッセージ、およびパラメーター挿入文字列のリソース識別子とテキストを定義します。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="LogName">
      <MemberSignature Language="C#" Value="public string LogName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LogName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ソースがエントリを書き込むイベント ログの名前を取得または設定します。</summary>
        <value>イベント ログの名前。 ログ名には、アプリケーション ログ名、システム ログ名、またはカスタム ログ名を指定できます。 既定値は "Application" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> プロパティを使用して、アプリケーションが新しいソースを使用してエントリを書き込むイベントログを識別します。 イベントログには、新しいログまたは既存のログを指定できます。 アプリケーションとサービスは、アプリケーションログまたはカスタムログに書き込む必要があります。 デバイスドライバーは、システムログに書き込む必要があります。 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> プロパティを明示的に設定しない場合、イベントログの既定値はアプリケーションログになります。  
  
> [!NOTE]
>  セキュリティログは読み取り専用です。  
  
 新しいソースの既存のログを対象にするには、[<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>] プロパティを既存のイベントログ名に設定します。 ソースの新しいイベントログを作成するには、<xref:System.Diagnostics.EventSourceCreationData.LogName%2A> プロパティを設定する必要があります。 イベント ログ名は、印字可能な文字で構成されている必要があります。文字 '*'、'?'、または '\\' を含めないでください。 イベントログ名の最初の8文字は、指定したコンピューター上のイベントログの既存の名前の最初の8文字と異なる必要があります。  
  
 オペレーティング システムではイベント ログはファイルとして保存されます。 <xref:System.Diagnostics.EventLogInstaller> または <xref:System.Diagnostics.EventLog.CreateEventSource%2A> 方法を使用して新しいイベントログを作成する場合、関連付けられているファイルは、指定したコンピューターの%SystemRoot%\System32\Config ディレクトリに格納されます。 ファイル名を設定するには、<xref:System.Diagnostics.EventSourceCreationData.LogName%2A> プロパティの最初の8文字に ".evt" というファイル名拡張子を追加します。  
  
   
  
## Examples  
 次のコード例では、コマンドライン引数からイベントソースの構成プロパティを設定します。 入力引数は、イベントソース名、イベントログ名、コンピューター名、およびイベントメッセージリソースファイルを指定します。 この例は、<xref:System.Diagnostics.EventSourceCreationData> クラス用に用意されている大規模な例の一部です。  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベント ソースを登録するコンピューターの名前を取得または設定します。</summary>
        <value>イベント ソースを登録するシステムの名前。 既定値はローカル コンピューター (".") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> 値を空の文字列にすることはできません。 コンピューター名が明示的に設定されていない場合は、既定でローカルコンピューター (".") に設定されます。  
  
 リモートコンピューターにソースを登録する場合、十分なアクセス許可を持つレジストリ値を書き込むには、そのコンピューターの管理者権限を持っている必要があります。  
  
   
  
## Examples  
 次のコード例では、コマンドライン引数からイベントソースの構成プロパティを設定します。 入力引数は、イベントソース名、イベントログ名、コンピューター名、およびイベントメッセージリソースファイルを指定します。 この例は、<xref:System.Diagnostics.EventSourceCreationData> クラス用に用意されている大規模な例の一部です。  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">コンピューター名が無効です。</exception>
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ソースのメッセージ書式指定文字列が格納されたメッセージ リソース ファイルのパスを取得または設定します。</summary>
        <value>メッセージ リソース ファイルのパス。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ローカライズされたイベントメッセージを書き込むようにイベントログソースを構成するには、<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> プロパティを使用します。 イベントメッセージは、ユーザーにイベントを記述するアプリケーション定義の文字列です。  
  
 アプリケーションでは、リソース識別子を使用してイベントログエントリを書き込むことができます。 リソース識別子は、<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>にあるメッセージにインデックスを付けます。 イベントビューアーは、リソース識別子を使用して、ローカライズされたメッセージリソースファイルから、現在の言語設定に基づいて、対応する文字列を検索して表示します。  
  
 イベントソースは、ローカライズされたエントリを書き込むか、または直接文字列を書き込むために構成する必要があります。 <xref:System.Diagnostics.EventLog.WriteEvent%2A> メソッドを使用して、メッセージリソースファイルで構成されたソースのローカライズされたエントリを書き込みます。  
  
 アプリケーションで、ローカライズされたリソースファイル内のリソース識別子を使用せずに、イベントメッセージ文字列を直接書き込む場合は、<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> プロパティを設定しないでください。  
  
 イベントメッセージの定義とイベントリソースファイルの作成の詳細については、プラットフォーム SDK ドキュメントの「Message Compiler」 ( [https://msdn.microsoft.com](https://msdn.microsoft.com/)) を参照してください。  
  
   
  
## Examples  
 次のコード例では、`SampleApplicationSource` という名前のイベントソースがローカルコンピューターに登録されているかどうかを確認します。 イベントソースが存在しない場合、この例では、ソースのメッセージリソースファイルを設定し、新しいイベントソースを作成します。 最後に、コード例では、`DisplayNameMsgId` のリソース識別子の値と `messageFile`のリソースファイルパスを使用して、イベントログのローカライズされた表示名を設定します。  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 このコード例では、リソースライブラリ EventLogMsgs に組み込まれている次のメッセージテキストファイルを使用します。 メッセージテキストファイルは、メッセージリソースファイルの作成元のソースです。 メッセージテキストファイルは、カテゴリ、イベントメッセージ、およびパラメーター挿入文字列のリソース識別子とテキストを定義します。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ソースのメッセージ パラメーター文字列が格納されたリソース ファイルのパスを取得または設定します。</summary>
        <value>パラメーター リソース ファイルのパス。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> プロパティを使用して、挿入されたパラメーター文字列を使用してローカライズされたイベントメッセージを書き込むようにイベントログソースを構成します。 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> プロパティで指定したローカライズされた各イベントメッセージには、挿入文字列のプレースホルダーを含めることができます。 これらのプレースホルダーは、イベントメッセージ内の言語に依存しない文字列の位置とリソース識別子を指定するために使用されます。 イベントビューアーは、<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> の対応する文字列を使用してプレースホルダーを塗りつぶし、ローカライズされたイベントエントリのイベントログメッセージを書式設定します。  
  
 たとえば、メッセージテキストファイルの次のセクションでは、パラメータープレースホルダーを含む文字列を定義しています。  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 パラメーターリソースファイル内では、次に示すように、プレースホルダーに対応するリソース識別子を使用して挿入文字列を定義する必要があります。  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 イベントソースは、ローカライズされたエントリを書き込むか、または直接文字列を書き込むために構成する必要があります。 <xref:System.Diagnostics.EventLog.WriteEvent%2A> メソッドを使用して、メッセージリソースファイルで構成されたソースのローカライズされたエントリを書き込みます。  
  
 アプリケーションでイベントメッセージ文字列をイベントログに直接書き込む場合、または <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> プロパティにパラメーター挿入プレースホルダーを含むメッセージが含まれていない場合は、<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> プロパティを設定しないでください。  
  
 イベントメッセージの定義とイベントリソースファイルの作成の詳細については、プラットフォーム SDK ドキュメントの「Message Compiler」 ( [https://msdn.microsoft.com](https://msdn.microsoft.com/)) を参照してください。  
  
   
  
## Examples  
 次のコード例では、`SampleApplicationSource` という名前のイベントソースがローカルコンピューターに登録されているかどうかを確認します。 イベントソースが存在しない場合、この例では、ソースのメッセージリソースファイルを設定し、新しいイベントソースを作成します。 最後に、コード例では、`DisplayNameMsgId` のリソース識別子の値と `messageFile`のリソースファイルパスを使用して、イベントログのローカライズされた表示名を設定します。  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 このコード例では、リソースライブラリ EventLogMsgs に組み込まれている次のメッセージテキストファイルを使用します。 メッセージテキストファイルは、メッセージリソースファイルの作成元のソースです。 メッセージテキストファイルは、カテゴリ、イベントメッセージ、およびパラメーター挿入文字列のリソース識別子とテキストを定義します。 具体的には、リソース識別子1004に定義されたメッセージは、リソース識別子5002に定義されているパラメーター文字列のプレースホルダーを使用します。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベント ソースとしてイベント ログに登録する名前を取得または設定します。</summary>
        <value>エントリのソースとしてイベント ログに登録する名前。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース名は、多くの場合、アプリケーションの名前、または大規模なアプリケーション内のコンポーネントの名前です。 <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> メソッドでは、<xref:System.Diagnostics.EventSourceCreationData.Source%2A>、<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>、および <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> プロパティを使用して、新しいソースとそれに関連付けられているイベントログのターゲットコンピューターでレジストリ値を作成します。 新しいソース名は、既存のソース名またはターゲットコンピューターの既存のイベントログ名と一致することはできません。  
  
 ソースのレジストリ値が作成されると、アプリケーションはソースを使用して、構成されているイベントログにエントリを書き込むことができます。  
  
 各ソースは、一度に1つのイベントログにのみ書き込むことができます。ただし、アプリケーションで複数のソースを使用して複数のイベントログに書き込むことができます。 たとえば、アプリケーションによっては、異なるイベントログまたは異なるリソースファイル用に複数のソースが構成されている必要があります。  
  
   
  
## Examples  
 次のコード例では、コマンドライン引数からイベントソースの構成プロパティを設定します。 入力引数は、イベントソース名、イベントログ名、コンピューター名、およびイベントメッセージリソースファイルを指定します。 この例は、<xref:System.Diagnostics.EventSourceCreationData> クラス用に用意されている大規模な例の一部です。  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
