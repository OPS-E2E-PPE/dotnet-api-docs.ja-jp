<Type Name="ProcessThread" FullName="System.Diagnostics.ProcessThread">
  <Metadata><Meta Name="ms.openlocfilehash" Value="934ffb4cd762cfa7b76b16d6e969c275fc9ede64" /><Meta Name="ms.sourcegitcommit" Value="c7fba4a529a39ce5480e57ff2519295822f78c1d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/15/2020" /><Meta Name="ms.locfileid" Value="83413165" /></Metadata><TypeSignature Language="C#" Value="public class ProcessThread : System.ComponentModel.Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProcessThread extends System.ComponentModel.Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ProcessThread" />
  <TypeSignature Language="VB.NET" Value="Public Class ProcessThread&#xA;Inherits Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProcessThread : System::ComponentModel::Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type ProcessThread = class&#xA;    inherit Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public class ProcessThread" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProcessThread extends System.Object" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="VB.NET" Value="Public Class ProcessThread" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProcessThread" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="F#" Value="type ProcessThread = class" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Diagnostics.Process" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-1.0;netcore-1.1">System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b57ec-101">オペレーティング システムのプロセス スレッドを表します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-101">Represents an operating system process thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b57ec-102">システムで現在実行されているスレッドに関する情報を取得するには、<xref:System.Diagnostics.ProcessThread> を使用します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-102">Use <xref:System.Diagnostics.ProcessThread> to obtain information about a thread that is currently running on the system.</span></span> <span data-ttu-id="b57ec-103">これにより、たとえば、スレッドのパフォーマンス特性を監視できます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-103">Doing so allows you, for example, to monitor the thread's performance characteristics.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b57ec-104">この型は <xref:System.IDisposable> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-104">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="b57ec-105">型の使用が完了したら、直接的または間接的に型を破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-105">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="b57ec-106">直接的に型を破棄するには、`try`/`catch` ブロック内で <xref:System.IDisposable.Dispose%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-106">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="b57ec-107">間接的に型を破棄するには、`using` (C# の場合) または `Using` (Visual Basic 言語) などの言語構成要素を使用します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-107">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="b57ec-108">詳細については、<xref:System.IDisposable> インターフェイスに関するトピック内の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b57ec-108">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="b57ec-109">スレッドは、プログラムによる実行のパスです。</span><span class="sxs-lookup"><span data-stu-id="b57ec-109">A thread is a path of execution through a program.</span></span> <span data-ttu-id="b57ec-110">これは、Win32 がスケジュールする最小の実行単位です。</span><span class="sxs-lookup"><span data-stu-id="b57ec-110">It is the smallest unit of execution that Win32 schedules.</span></span> <span data-ttu-id="b57ec-111">これは、スタック、CPU レジスタの状態、およびシステムスケジューラの実行リスト内のエントリで構成されます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-111">It consists of a stack, the state of the CPU registers, and an entry in the execution list of the system scheduler.</span></span>  
  
 <span data-ttu-id="b57ec-112">プロセスは、1つまたは複数のスレッドと、メモリ内のプログラムのコード、データ、およびその他のリソースで構成されます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-112">A process consists of one or more threads and the code, data, and other resources of a program in memory.</span></span> <span data-ttu-id="b57ec-113">一般的なプログラムリソースは、開いているファイル、セマフォ、および動的に割り当てられたメモリです。</span><span class="sxs-lookup"><span data-stu-id="b57ec-113">Typical program resources are open files, semaphores, and dynamically allocated memory.</span></span> <span data-ttu-id="b57ec-114">プロセスの各リソースは、そのプロセスのすべてのスレッドによって共有されます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-114">Each resource of a process is shared by all that process's threads.</span></span>  
  
 <span data-ttu-id="b57ec-115">プログラムは、システムスケジューラによって、プログラムのいずれかのスレッドに実行制御が与えられたときに実行されます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-115">A program executes when the system scheduler gives execution control to one of the program's threads.</span></span> <span data-ttu-id="b57ec-116">スケジューラは、実行するスレッドとタイミングを決定します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-116">The scheduler determines which threads should run and when.</span></span> <span data-ttu-id="b57ec-117">優先順位の低いスレッドは、優先度の高いスレッドがタスクを完了するまで待機することがあります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-117">A lower-priority thread might be forced to wait while higher-priority threads complete their tasks.</span></span> <span data-ttu-id="b57ec-118">マルチプロセッサコンピューターでは、スケジューラが個々のスレッドを異なるプロセッサに移動し、CPU 負荷を分散させることができます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-118">On multiprocessor computers, the scheduler can move individual threads to different processors, thus balancing the CPU load.</span></span>  
  
 <span data-ttu-id="b57ec-119">各プロセスは、プライマリスレッドと呼ばれる1つのスレッドで開始されます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-119">Each process starts with a single thread, which is known as the primary thread.</span></span> <span data-ttu-id="b57ec-120">どのスレッドでも新しいスレッドを作成できます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-120">Any thread can create additional threads.</span></span> <span data-ttu-id="b57ec-121">プロセス内のすべてのスレッドは、そのプロセスのアドレス空間を共有します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-121">All the threads within a process share the address space of that process.</span></span>  
  
 <span data-ttu-id="b57ec-122">プライマリスレッドは、必ずしもコレクション内の最初のインデックス位置にありません。</span><span class="sxs-lookup"><span data-stu-id="b57ec-122">The primary thread is not necessarily located at the first index in the collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b57ec-123">.NET Framework バージョン2.0 以降、.NET Framework の方法とプロパティの多くで、他のコンピューター上のパフォーマンスカウンターデータを参照できるようになりました。</span><span class="sxs-lookup"><span data-stu-id="b57ec-123">Starting with the .NET Framework version 2.0, the ability to reference performance counter data on other computers has been eliminated for many of the .NET Framework methods and properties.</span></span> <span data-ttu-id="b57ec-124">この変更は、パフォーマンスを向上させ、管理者以外の管理者が <xref:System.Diagnostics.ProcessThread> クラスを使用できるようにするために行われました。</span><span class="sxs-lookup"><span data-stu-id="b57ec-124">This change was made to improve performance and to enable non-administrators to use the <xref:System.Diagnostics.ProcessThread> class.</span></span> <span data-ttu-id="b57ec-125">その結果、以前のバージョンの .NET Framework で例外を取得しなかった一部のアプリケーションは、<xref:System.NotSupportedException>を取得できるようになります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-125">As a result, some applications that did not get exceptions in earlier versions of the .NET Framework may now get a <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="b57ec-126">影響を受けるメソッドとプロパティは、この一覧には多すぎますが、影響を受けるメンバーのトピックには例外情報が追加されています。</span><span class="sxs-lookup"><span data-stu-id="b57ec-126">The methods and properties affected are too numerous to list here, but the exception information has been added to the affected member topics.</span></span>  
  
 <span data-ttu-id="b57ec-127">プロセスのスレッドは個別に実行され、互いに見えるようにしない限り、互いを認識しません。</span><span class="sxs-lookup"><span data-stu-id="b57ec-127">The threads of a process execute individually and are unaware of each other unless you make them visible to each other.</span></span> <span data-ttu-id="b57ec-128">ただし、共通のリソースを共有するスレッドでは、セマフォや、プロセス間通信の別の方法を使用して、作業を調整する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-128">Threads that share common resources, however, must coordinate their work by using semaphores or another method of interprocess communication.</span></span>  
  
 <span data-ttu-id="b57ec-129">現在のプロセスに関連付けられているすべての <xref:System.Diagnostics.ProcessThread> オブジェクトのコレクションを取得するには、<xref:System.Diagnostics.Process> インスタンスの <xref:System.Diagnostics.Process.Threads%2A> プロパティを取得します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-129">To get a collection of all the <xref:System.Diagnostics.ProcessThread> objects associated with the current process, get the <xref:System.Diagnostics.Process.Threads%2A> property of the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.Process" />
    <altmember cref="P:System.Diagnostics.Process.Threads" />
  </Docs>
  <Members>
    <Member MemberName="BasePriority">
      <MemberSignature Language="C#" Value="public int BasePriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BasePriority" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.BasePriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BasePriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BasePriority { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BasePriority : int" Usage="System.Diagnostics.ProcessThread.BasePriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The base priority of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadBasePriority")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b57ec-130">スレッドの基本優先順位を取得します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-130">Gets the base priority of the thread.</span></span></summary>
        <value><span data-ttu-id="b57ec-131">プロセスの優先順位クラスと関連付けられたスレッドの優先順位との組み合わせからオペレーティング システムが算出した、スレッドの基本優先順位。</span><span class="sxs-lookup"><span data-stu-id="b57ec-131">The base priority of the thread, which the operating system computes by combining the process priority class with the priority level of the associated thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b57ec-132"><xref:System.Diagnostics.ProcessThread.BasePriority%2A> は、プロセススレッドの開始優先順位です。</span><span class="sxs-lookup"><span data-stu-id="b57ec-132">The <xref:System.Diagnostics.ProcessThread.BasePriority%2A> is the starting priority for the process thread.</span></span> <span data-ttu-id="b57ec-133">基本優先順位に関する情報は、システムモニターの優先順位ベースカウンターを使用して表示できます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-133">You can view information about the base priority through the System Monitor's Priority Base counter.</span></span>  
  
 <span data-ttu-id="b57ec-134">オペレーティングシステムは、スレッドの優先度レベルの範囲とプロセスの優先度クラスを組み合わせることによって、スレッドの基本優先順位を計算します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-134">The operating system computes a thread's base priority by combining the thread's priority level range with the process's priority class.</span></span> <span data-ttu-id="b57ec-135">プロセスの <xref:System.Diagnostics.Process.PriorityClass%2A?displayProperty=nameWithType> プロパティは、<xref:System.Diagnostics.ProcessPriorityClass.Idle>、<xref:System.Diagnostics.ProcessPriorityClass.Normal>、<xref:System.Diagnostics.ProcessPriorityClass.High>、<xref:System.Diagnostics.ProcessPriorityClass.AboveNormal>、<xref:System.Diagnostics.ProcessPriorityClass.BelowNormal>、または <xref:System.Diagnostics.ProcessPriorityClass.RealTime>の <xref:System.Diagnostics.ProcessPriorityClass> 列挙のいずれかの値に設定できます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-135">You can set the process's <xref:System.Diagnostics.Process.PriorityClass%2A?displayProperty=nameWithType> property to one of the values in the <xref:System.Diagnostics.ProcessPriorityClass> enumeration, which are <xref:System.Diagnostics.ProcessPriorityClass.Idle>, <xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, <xref:System.Diagnostics.ProcessPriorityClass.AboveNormal>, <xref:System.Diagnostics.ProcessPriorityClass.BelowNormal>, or <xref:System.Diagnostics.ProcessPriorityClass.RealTime>.</span></span> <span data-ttu-id="b57ec-136">スレッドの <xref:System.Diagnostics.ProcessThread.PriorityLevel%2A> プロパティは、スレッドの基本優先順位を範囲とする値の範囲に設定できます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-136">You can set the thread's <xref:System.Diagnostics.ProcessThread.PriorityLevel%2A> property to a range of values that bounds the thread's base priority.</span></span> <span data-ttu-id="b57ec-137">Win32 では、クラスごとに7つの基本優先度レベルを持つ4つの優先度クラスが使用されます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-137">Win32 uses four priority classes with seven base priority levels per class.</span></span>  
  
 <span data-ttu-id="b57ec-138">スレッドの現在の優先順位は、基本優先順位とは異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-138">The thread's current priority might deviate from the base priority.</span></span> <span data-ttu-id="b57ec-139">たとえば、プロセッサにアクセスするためにプロセスを事前に配置する必要がある場合、オペレーティングシステムは、経過時間やその他のブーストに基づいて、<xref:System.Diagnostics.ProcessThread.CurrentPriority%2A> プロパティを変更できます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-139">For example, the operating system can change the <xref:System.Diagnostics.ProcessThread.CurrentPriority%2A> property based on the time elapsed or other boosts when a process must be put ahead of others for access to the processor.</span></span> <span data-ttu-id="b57ec-140">また、<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> プロパティを設定して、プロセスが待機状態から除外されるたびにスレッドの優先順位を一時的に上げることができます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-140">In addition, you can set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> property to cause the system to temporarily boost the priority of a thread whenever the process is taken out of the wait state.</span></span> <span data-ttu-id="b57ec-141">プロセスが待機状態に戻ると、優先順位がリセットされます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-141">The priority is reset when the process returns to the wait state.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled" />
        <altmember cref="T:System.Diagnostics.ProcessPriorityClass" />
        <altmember cref="P:System.Diagnostics.Process.PriorityClass" />
        <altmember cref="P:System.Diagnostics.ProcessThread.CurrentPriority" />
      </Docs>
    </Member>
    <Member MemberName="CurrentPriority">
      <MemberSignature Language="C#" Value="public int CurrentPriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentPriority" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.CurrentPriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentPriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentPriority { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentPriority : int" Usage="System.Diagnostics.ProcessThread.CurrentPriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The current priority of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadCurrentPriority")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b57ec-142">スレッドの現在の優先順位を取得します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-142">Gets the current priority of the thread.</span></span></summary>
        <value><span data-ttu-id="b57ec-143">オペレーティング システムがスレッドをスケジュールする方法によっては、スレッドの現在の優先順位が基本優先順位と異なることがあります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-143">The current priority of the thread, which may deviate from the base priority based on how the operating system is scheduling the thread.</span></span> <span data-ttu-id="b57ec-144">アクティブなスレッドの優先順位を一時的に上げることもできます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-144">The priority may be temporarily boosted for an active thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b57ec-145">スレッドの現在の優先順位は、基本優先順位とは異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-145">The thread's current priority might deviate from the base priority.</span></span> <span data-ttu-id="b57ec-146">たとえば、プロセッサにアクセスするためにプロセスを事前に配置する必要がある場合、オペレーティングシステムは、経過時間 (またはその他のブースト) に基づいて、<xref:System.Diagnostics.ProcessThread.CurrentPriority%2A> プロパティを変更できます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-146">For example, the operating system can change the <xref:System.Diagnostics.ProcessThread.CurrentPriority%2A> property based on the time elapsed, or other boosts, when a process must be put ahead of others for access to the processor.</span></span> <span data-ttu-id="b57ec-147">また、<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> プロパティを設定して、プロセスが待機状態から除外されるたびにスレッドの優先順位を一時的に上げることができます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-147">In addition, you can set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> property to cause the system to temporarily boost the priority of a thread whenever the process is taken out of the wait state.</span></span> <span data-ttu-id="b57ec-148">プロセスが待機状態に戻ると、優先順位がリセットされます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-148">The priority is reset when the process returns to the wait state.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.ProcessThread.BasePriority" />
        <altmember cref="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : int" Usage="System.Diagnostics.ProcessThread.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The ID of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b57ec-149">スレッドの一意な識別子を取得します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-149">Gets the unique identifier of the thread.</span></span></summary>
        <value><span data-ttu-id="b57ec-150">特定のスレッドに関連付けられた一意な識別子。</span><span class="sxs-lookup"><span data-stu-id="b57ec-150">The unique identifier associated with a specific thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b57ec-151">オペレーティングシステムは、スレッド id 番号を再利用します。これは、その有効期間中にのみスレッドを識別します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-151">The operating system reuses thread identification numbers, which identify threads only during their lifetimes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IdealProcessor">
      <MemberSignature Language="C#" Value="public int IdealProcessor { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IdealProcessor" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.IdealProcessor" />
      <MemberSignature Language="VB.NET" Value="Public Property IdealProcessor As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IdealProcessor {  void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IdealProcessor : int" Usage="System.Diagnostics.ProcessThread.IdealProcessor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b57ec-152">このスレッドを実行する優先プロセッサを設定します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-152">Sets the preferred processor for this thread to run on.</span></span></summary>
        <value><span data-ttu-id="b57ec-153">スレッドの優先プロセッサは、システムがスレッドをスケジュールするときに、スレッドを実行するプロセッサを決定するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-153">The preferred processor for the thread, used when the system schedules threads, to determine which processor to run the thread on.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b57ec-154"><xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> 値は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-154">The <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> value is zero-based.</span></span>  <span data-ttu-id="b57ec-155">つまり、最初のプロセッサに対してスレッドアフィニティを設定するには、プロパティを0に設定します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-155">In other words, to set the thread affinity for the first processor, set the property to zero.</span></span>  
  
 <span data-ttu-id="b57ec-156">システムは、可能な限り、優先プロセッサのスレッドをスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="b57ec-156">The system schedules threads on their preferred processors whenever possible.</span></span>  
  
 <span data-ttu-id="b57ec-157">プロセススレッドはプロセッサからプロセッサに移行でき、各移行によってプロセッサキャッシュが再読み込みされます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-157">A process thread can migrate from processor to processor, with each migration reloading the processor cache.</span></span> <span data-ttu-id="b57ec-158">スレッドにプロセッサを指定すると、プロセッサキャッシュを再読み込みする回数を減らすことによって、システムの負荷が高くなってもパフォーマンスを向上させることができます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-158">Specifying a processor for a thread can improve performance under heavy system loads by reducing the number of times the processor cache is reloaded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b57ec-159">次の例は、メモ帳のインスタンスの <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> プロパティを最初のプロセッサに設定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b57ec-159">The following example demonstrates how to set the <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> property for an instance of Notepad to the first processor.</span></span>  
  
 [!code-csharp[ProcessThreadIdealProcessor#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessThreadIdealProcessor/CS/program.cs#1)]
 [!code-vb[ProcessThreadIdealProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessThreadIdealProcessor/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="b57ec-160">指定したプロセッサでスレッドを起動するよう設定できませんでした。</span><span class="sxs-lookup"><span data-stu-id="b57ec-160">The system could not set the thread to start on the specified processor.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b57ec-161">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-161">The process is on a remote computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PriorityBoostEnabled">
      <MemberSignature Language="C#" Value="public bool PriorityBoostEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PriorityBoostEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property PriorityBoostEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PriorityBoostEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PriorityBoostEnabled : bool with get, set" Usage="System.Diagnostics.ProcessThread.PriorityBoostEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Thread gets a priority boot when interactively used by a user.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadPriorityBoostEnabled")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b57ec-162">スレッドのプロセスのメイン ウィンドウがフォーカスを受け取るたびに、関連付けられたスレッドの優先順位をオペレーティング システムが一時的に上げるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-162">Gets or sets a value indicating whether the operating system should temporarily boost the priority of the associated thread whenever the main window of the thread's process receives the focus.</span></span></summary>
        <value><span data-ttu-id="b57ec-163">ユーザーがプロセスのインターフェイスと対話しているときにスレッドの優先順位を上げる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b57ec-163"><see langword="true" /> to boost the thread's priority when the user interacts with the process's interface; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="b57ec-164">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="b57ec-164">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b57ec-165"><xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> が `true`されると、関連付けられているプロセスが待機状態から除外されるたびに、システムによってスレッドの優先順位が一時的にブーストされます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-165">When <xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> is `true`, the system temporarily boosts the thread's priority whenever its associated process is taken out of the wait state.</span></span> <span data-ttu-id="b57ec-166">この操作により、他のプロセスが現在のスレッドの処理を中断するのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-166">This action prevents other processes from interrupting the processing of the current thread.</span></span> <span data-ttu-id="b57ec-167"><xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> 設定は、既存のすべてのスレッドだけでなく、そのプロセスによって作成されたすべてのスレッドにも影響します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-167">The <xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> setting affects all existing threads as well as any threads subsequently created by the process.</span></span> <span data-ttu-id="b57ec-168">通常の動作を復元するには、<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> プロパティを `false`に設定します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-168">To restore normal behavior, set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> property to `false`.</span></span>  
  
 <span data-ttu-id="b57ec-169"><xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> は、<xref:System.Diagnostics.Process.PriorityClass%2A> が動的優先順位列挙値 (<xref:System.Diagnostics.ProcessPriorityClass.Normal>、<xref:System.Diagnostics.ProcessPriorityClass.High>、または <xref:System.Diagnostics.ProcessPriorityClass.RealTime>) のいずれかに設定されているプロセスでスレッドが実行されている場合にのみ効果があります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-169"><xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> has an effect only when the thread is running in a process that has a <xref:System.Diagnostics.Process.PriorityClass%2A> set to one of the dynamic priority enumeration values (<xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, or <xref:System.Diagnostics.ProcessPriorityClass.RealTime>).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b57ec-170">優先順位を上げると、重要なオペレーティングシステムやネットワーク機能からリソースをドレインできます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-170">Boosting the priority too high can drain resources from essential operating system and network functions.</span></span> <span data-ttu-id="b57ec-171">これにより、他のオペレーティングシステムのタスクで問題が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-171">This could cause problems with other operating system tasks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="b57ec-172">優先順位上昇情報を取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="b57ec-172">The priority boost information could not be retrieved.</span></span>  
  
 <span data-ttu-id="b57ec-173">または</span><span class="sxs-lookup"><span data-stu-id="b57ec-173">-or-</span></span>  
  
 <span data-ttu-id="b57ec-174">優先順位上昇情報を設定できませんでした。</span><span class="sxs-lookup"><span data-stu-id="b57ec-174">The priority boost information could not be set.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b57ec-175">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-175">The process is on a remote computer.</span></span></exception>
        <altmember cref="T:System.Diagnostics.ProcessPriorityClass" />
      </Docs>
    </Member>
    <Member MemberName="PriorityLevel">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ThreadPriorityLevel PriorityLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.ThreadPriorityLevel PriorityLevel" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.PriorityLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property PriorityLevel As ThreadPriorityLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ThreadPriorityLevel PriorityLevel { System::Diagnostics::ThreadPriorityLevel get(); void set(System::Diagnostics::ThreadPriorityLevel value); };" />
      <MemberSignature Language="F#" Value="member this.PriorityLevel : System.Diagnostics.ThreadPriorityLevel with get, set" Usage="System.Diagnostics.ProcessThread.PriorityLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The priority level of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadPriorityLevel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ThreadPriorityLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b57ec-176">スレッドの優先順位を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-176">Gets or sets the priority level of the thread.</span></span></summary>
        <value><span data-ttu-id="b57ec-177">スレッドの優先順位の範囲を指定する <see cref="T:System.Diagnostics.ThreadPriorityLevel" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="b57ec-177">One of the <see cref="T:System.Diagnostics.ThreadPriorityLevel" /> values, specifying a range that bounds the thread's priority.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b57ec-178">優先度レベルは単一の値ではなく、値の範囲です。</span><span class="sxs-lookup"><span data-stu-id="b57ec-178">The priority level is not a single value, but rather a range of values.</span></span> <span data-ttu-id="b57ec-179">オペレーティングシステムは、プロセスの <xref:System.Diagnostics.Process.PriorityClass%2A> を使用して、<xref:System.Diagnostics.ProcessThread.PriorityLevel%2A> プロパティで指定された範囲の値を選択することによって、スレッドの基本優先順位を計算します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-179">The operating system computes the thread's base priority by using the process's <xref:System.Diagnostics.Process.PriorityClass%2A> to choose a value from the range specified in the <xref:System.Diagnostics.ProcessThread.PriorityLevel%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="b57ec-180">スレッドの優先順位情報を取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="b57ec-180">The thread priority level information could not be retrieved.</span></span>  
  
 <span data-ttu-id="b57ec-181">または</span><span class="sxs-lookup"><span data-stu-id="b57ec-181">-or-</span></span>  
  
 <span data-ttu-id="b57ec-182">スレッドの優先順位を設定できませんでした。</span><span class="sxs-lookup"><span data-stu-id="b57ec-182">The thread priority level could not be set.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b57ec-183">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-183">The process is on a remote computer.</span></span></exception>
        <altmember cref="T:System.Diagnostics.ThreadPriorityLevel" />
        <altmember cref="P:System.Diagnostics.Process.PriorityClass" />
        <altmember cref="P:System.Diagnostics.ProcessThread.BasePriority" />
        <altmember cref="P:System.Diagnostics.ProcessThread.CurrentPriority" />
      </Docs>
    </Member>
    <Member MemberName="PrivilegedProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan PrivilegedProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan PrivilegedProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrivilegedProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan PrivilegedProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.PrivilegedProcessorTime : TimeSpan" Usage="System.Diagnostics.ProcessThread.PrivilegedProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time used in privileged mode.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadPrivilegedProcessorTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b57ec-184">スレッドが、オペレーティング システム コアでコードを実行した時間を取得します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-184">Gets the amount of time that the thread has spent running code inside the operating system core.</span></span></summary>
        <value><span data-ttu-id="b57ec-185">スレッドが、オペレーティング システム コアでコードを実行した時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="b57ec-185">A <see cref="T:System.TimeSpan" /> indicating the amount of time that the thread has spent running code inside the operating system core.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b57ec-186">Windows ではいくつかの異なる保護メカニズムが使用されており、それらのルートではユーザーモードと特権モードが区別されています。</span><span class="sxs-lookup"><span data-stu-id="b57ec-186">Windows uses several different protection mechanisms, and at the root of them all is the distinction between user mode and privileged mode.</span></span> <span data-ttu-id="b57ec-187"><xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> は、アプリケーションが特権モードでの実行に費やした時間 (オペレーティングシステムのコア内) に対応します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-187"><xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> corresponds to the amount of time that the application has spent running in privileged mode, inside the operating system core.</span></span> <span data-ttu-id="b57ec-188"><xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> プロパティは、システムコアの外部で、アプリケーションがユーザーモードでコードを実行するために費やした時間を示します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-188">The <xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> property indicates the amount of time that the application has spent running code in user mode, outside the system core.</span></span>  
  
 <span data-ttu-id="b57ec-189">ユーザーモードでは、アプリケーションを2つの重要な方法で制限します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-189">User mode restricts the application in two important ways.</span></span> <span data-ttu-id="b57ec-190">まず、アプリケーションは周辺機器に直接アクセスすることはできませんが、代わりにオペレーティングシステムコアを呼び出して、周辺機器データを取得または設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-190">First, the application cannot directly access the peripherals, but instead must call the operating system core to get or set peripheral data.</span></span> <span data-ttu-id="b57ec-191">オペレーティングシステムによって、あるアプリケーションが、別のアプリケーションが必要とする周辺データを破棄しないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-191">The operating system can thus ensure that one application does not destroy peripheral data that is needed by another.</span></span> <span data-ttu-id="b57ec-192">次に、アプリケーションは、オペレーティングシステム自体によって管理されているデータの読み取りや変更を行うことができません。</span><span class="sxs-lookup"><span data-stu-id="b57ec-192">Second, the application cannot read or change data that the operating system itself maintains.</span></span> <span data-ttu-id="b57ec-193">この制限により、アプリケーションが誤って、または意図せずにコアを破損するのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-193">This restriction prevents applications from either inadvertently or intentionally corrupting the core.</span></span> <span data-ttu-id="b57ec-194">操作を実行するためにアプリケーションがオペレーティングシステムを必要とする場合は、システムのルーチンの1つを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-194">If the application needs the operating system to perform an operation, it calls one of the system's routines.</span></span> <span data-ttu-id="b57ec-195">これらの多くは特権モードに移行し、操作を実行して、ユーザーモードにスムーズに戻ります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-195">Many of these transition into privileged mode, perform the operation, and smoothly return to user mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="b57ec-196">スレッド時間を取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="b57ec-196">The thread time could not be retrieved.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b57ec-197">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-197">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.UserProcessorTime" />
        <altmember cref="P:System.Diagnostics.ProcessThread.TotalProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="ProcessorAffinity">
      <MemberSignature Language="C#" Value="public IntPtr ProcessorAffinity { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ProcessorAffinity" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.ProcessorAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Property ProcessorAffinity As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr ProcessorAffinity {  void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.ProcessorAffinity : nativeint" Usage="System.Diagnostics.ProcessThread.ProcessorAffinity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b57ec-198">関連付けられたスレッドを実行できるプロセッサを設定します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-198">Sets the processors on which the associated thread can run.</span></span></summary>
        <value><span data-ttu-id="b57ec-199">スレッドを実行できるプロセッサを表すビットのセットを指す <see cref="T:System.IntPtr" />。</span><span class="sxs-lookup"><span data-stu-id="b57ec-199">An <see cref="T:System.IntPtr" /> that points to a set of bits, each of which represents a processor that the thread can run on.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b57ec-200">スレッドのプロセッサ関係は、そのスレッドが関係しているプロセッサのセットです。</span><span class="sxs-lookup"><span data-stu-id="b57ec-200">The processor affinity of a thread is the set of processors it has a relationship to.</span></span> <span data-ttu-id="b57ec-201">つまり、実行するようにスケジュールすることができます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-201">In other words, those it can be scheduled to run on.</span></span>  
  
 <span data-ttu-id="b57ec-202"><xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> は、各プロセッサをビットとして表します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-202"><xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> represents each processor as a bit.</span></span> <span data-ttu-id="b57ec-203">ビット0はプロセッサ1を表し、ビット1はプロセッサ2を表します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-203">Bit 0 represents processor one, bit 1 represents processor two, and so on.</span></span> <span data-ttu-id="b57ec-204">次の表は、4プロセッサシステムで使用できる <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> のサブセットを示しています。</span><span class="sxs-lookup"><span data-stu-id="b57ec-204">The following table shows a subset of the possible <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> for a four-processor system.</span></span>  
  
|<span data-ttu-id="b57ec-205">プロパティ値 (16 進数)</span><span class="sxs-lookup"><span data-stu-id="b57ec-205">Property value (in hexadecimal)</span></span>|<span data-ttu-id="b57ec-206">有効なプロセッサ</span><span class="sxs-lookup"><span data-stu-id="b57ec-206">Valid processors</span></span>|  
|---------------------------------------|----------------------|  
|<span data-ttu-id="b57ec-207">0x0001</span><span class="sxs-lookup"><span data-stu-id="b57ec-207">0x0001</span></span>|<span data-ttu-id="b57ec-208">1</span><span class="sxs-lookup"><span data-stu-id="b57ec-208">1</span></span>|  
|<span data-ttu-id="b57ec-209">0x0002</span><span class="sxs-lookup"><span data-stu-id="b57ec-209">0x0002</span></span>|<span data-ttu-id="b57ec-210">2</span><span class="sxs-lookup"><span data-stu-id="b57ec-210">2</span></span>|  
|<span data-ttu-id="b57ec-211">0x0003</span><span class="sxs-lookup"><span data-stu-id="b57ec-211">0x0003</span></span>|<span data-ttu-id="b57ec-212">1 または 2</span><span class="sxs-lookup"><span data-stu-id="b57ec-212">1 or 2</span></span>|  
|<span data-ttu-id="b57ec-213">0x0004</span><span class="sxs-lookup"><span data-stu-id="b57ec-213">0x0004</span></span>|<span data-ttu-id="b57ec-214">3</span><span class="sxs-lookup"><span data-stu-id="b57ec-214">3</span></span>|  
|<span data-ttu-id="b57ec-215">0x0005</span><span class="sxs-lookup"><span data-stu-id="b57ec-215">0x0005</span></span>|<span data-ttu-id="b57ec-216">1または3</span><span class="sxs-lookup"><span data-stu-id="b57ec-216">1 or 3</span></span>|  
|<span data-ttu-id="b57ec-217">0x0007</span><span class="sxs-lookup"><span data-stu-id="b57ec-217">0x0007</span></span>|<span data-ttu-id="b57ec-218">1、2、または3</span><span class="sxs-lookup"><span data-stu-id="b57ec-218">1, 2, or 3</span></span>|  
|<span data-ttu-id="b57ec-219">0x000F</span><span class="sxs-lookup"><span data-stu-id="b57ec-219">0x000F</span></span>|<span data-ttu-id="b57ec-220">1、2、3、または 4</span><span class="sxs-lookup"><span data-stu-id="b57ec-220">1, 2, 3, or 4</span></span>|  
  
 <span data-ttu-id="b57ec-221">また、<xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> プロパティを設定して、スレッドに対して1つの優先プロセッサを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-221">You can also specify the single, preferred processor for a thread by setting the <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> property.</span></span> <span data-ttu-id="b57ec-222">プロセススレッドはプロセッサからプロセッサに移行でき、各移行によってプロセッサキャッシュが再読み込みされます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-222">A process thread can migrate from processor to processor, with each migration reloading the processor cache.</span></span> <span data-ttu-id="b57ec-223">スレッドにプロセッサを指定すると、プロセッサキャッシュを再読み込みする回数を減らすことによって、システムの負荷が高くなってもパフォーマンスを向上させることができます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-223">Specifying a processor for a thread can improve performance under heavy system loads by reducing the number of times the processor cache is reloaded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b57ec-224">次の例は、メモ帳のインスタンスの <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> プロパティを最初のプロセッサに設定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b57ec-224">The following example shows how to set the <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> property for an instance of Notepad to the first processor.</span></span>  
  
 [!code-csharp[ProcessThreadIdealProcessor#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessThreadIdealProcessor/CS/program.cs#1)]
 [!code-vb[ProcessThreadIdealProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessThreadIdealProcessor/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="b57ec-225">プロセッサ アフィニティを設定できませんでした。</span><span class="sxs-lookup"><span data-stu-id="b57ec-225">The processor affinity could not be set.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b57ec-226">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-226">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.IdealProcessor" />
      </Docs>
    </Member>
    <Member MemberName="ResetIdealProcessor">
      <MemberSignature Language="C#" Value="public void ResetIdealProcessor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetIdealProcessor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ProcessThread.ResetIdealProcessor" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetIdealProcessor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetIdealProcessor();" />
      <MemberSignature Language="F#" Value="member this.ResetIdealProcessor : unit -&gt; unit" Usage="processThread.ResetIdealProcessor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b57ec-227">このスレッドに最も適したプロセッサをリセットして、単一の最も適したプロセッサがないことを示します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-227">Resets the ideal processor for this thread to indicate that there is no single ideal processor.</span></span> <span data-ttu-id="b57ec-228">つまり、どのプロセッサも適しています。</span><span class="sxs-lookup"><span data-stu-id="b57ec-228">In other words, so that any processor is ideal.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="b57ec-229">最適なプロセッサをリセットできませんでした。</span><span class="sxs-lookup"><span data-stu-id="b57ec-229">The ideal processor could not be reset.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b57ec-230">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-230">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.IdealProcessor" />
      </Docs>
    </Member>
    <Member MemberName="StartAddress">
      <MemberSignature Language="C#" Value="public IntPtr StartAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int StartAddress" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.StartAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartAddress As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr StartAddress { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.StartAddress : nativeint" Usage="System.Diagnostics.ProcessThread.StartAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The start address in memory of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadStartAddress")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b57ec-231">このスレッドを起動するときにオペレーティング システムが呼び出した関数のメモリ アドレスを取得します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-231">Gets the memory address of the function that the operating system called that started this thread.</span></span></summary>
        <value><span data-ttu-id="b57ec-232">スレッドを実行するアプリケーション定義の関数を指すスレッドの起動アドレス。</span><span class="sxs-lookup"><span data-stu-id="b57ec-232">The thread's starting address, which points to the application-defined function that the thread executes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b57ec-233">各プロセスは、プライマリスレッドと呼ばれる1つのスレッドで開始されます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-233">Each process starts with a single thread, which is known as the primary thread.</span></span> <span data-ttu-id="b57ec-234">どのスレッドでも新しいスレッドを作成できます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-234">Any thread can create additional threads.</span></span>  
  
 <span data-ttu-id="b57ec-235">プロセスには、仮想アドレス空間、実行可能コード、データ、オブジェクトハンドル、環境変数、基本優先順位、およびワーキングセットの最小サイズと最大サイズがあります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-235">A process has a virtual address space, executable code, data, object handles, environment variables, a base priority, and minimum and maximum working set sizes.</span></span> <span data-ttu-id="b57ec-236">プロセスのすべてのスレッドは、その仮想アドレス空間とシステムリソースを共有します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-236">All the threads of a process share its virtual address space and system resources.</span></span> <span data-ttu-id="b57ec-237">さらに、各スレッドは、スレッドがスケジュールされるのを待機している間に、スレッドコンテキストを保存する、例外ハンドラー、スケジューリング優先順位、および一連の構造体を保持します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-237">In addition, each thread maintains exception handlers, a scheduling priority, and a set of structures in which the system saves the thread context while the thread is waiting to be scheduled.</span></span> <span data-ttu-id="b57ec-238">スレッドコンテキストには、スレッドのコンピューターレジスタのセット、カーネルスタック、スレッド環境ブロック、およびスレッドのプロセスのアドレス空間内のユーザースタックが含まれます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-238">The thread context includes the thread's set of machine registers, the kernel stack, a thread environment block, and a user stack in the address space of the thread's process.</span></span>  
  
 <span data-ttu-id="b57ec-239">各 Windows スレッドは、実際には、アプリケーションが提供する関数ではなく、システムによって提供される関数で実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-239">Every Windows thread actually begins execution in a system-supplied function, not the application-supplied function.</span></span> <span data-ttu-id="b57ec-240">したがって、プライマリスレッドの開始アドレスは、システム内のすべての Windows プロセスについて、同じ (システムによって提供される関数のアドレスを表します) と同じになります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-240">The starting address for the primary thread is, therefore, the same (as it represents the address of the system-supplied function) for every Windows process in the system.</span></span> <span data-ttu-id="b57ec-241">ただし、<xref:System.Diagnostics.ProcessThread.StartAddress%2A> プロパティを使用すると、アプリケーションに固有の開始関数アドレスを取得できます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-241">However, the <xref:System.Diagnostics.ProcessThread.StartAddress%2A> property allows you to get the starting function address that is specific to your application.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b57ec-242">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-242">The process is on a remote computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="StartTime">
      <MemberSignature Language="C#" Value="public DateTime StartTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime StartTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.StartTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime StartTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.StartTime : DateTime" Usage="System.Diagnostics.ProcessThread.StartTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The time this thread was started.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadStartTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b57ec-243">オペレーティング システムによってスレッドを起動した時刻を取得します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-243">Gets the time that the operating system started the thread.</span></span></summary>
        <value><span data-ttu-id="b57ec-244">オペレーティング システムがスレッドを起動したときのシステム上の時刻を表す <see cref="T:System.DateTime" />。</span><span class="sxs-lookup"><span data-stu-id="b57ec-244">A <see cref="T:System.DateTime" /> representing the time that was on the system when the operating system started the thread.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="b57ec-245">スレッド時間を取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="b57ec-245">The thread time could not be retrieved.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b57ec-246">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-246">The process is on a remote computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ThreadState">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ThreadState ThreadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.ThreadState ThreadState" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.ThreadState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ThreadState As ThreadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ThreadState ThreadState { System::Diagnostics::ThreadState get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreadState : System.Diagnostics.ThreadState" Usage="System.Diagnostics.ProcessThread.ThreadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The current state of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadThreadState")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ThreadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b57ec-247">このスレッドの現在の状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-247">Gets the current state of this thread.</span></span></summary>
        <value><span data-ttu-id="b57ec-248">実行中、待機中、終了など、スレッドの実行状態を示す <see cref="T:System.Diagnostics.ThreadState" />。</span><span class="sxs-lookup"><span data-stu-id="b57ec-248">A <see cref="T:System.Diagnostics.ThreadState" /> that indicates the thread's execution, for example, running, waiting, or terminated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b57ec-249"><xref:System.Diagnostics.ProcessThread.WaitReason%2A> プロパティ値は、<xref:System.Diagnostics.ProcessThread.ThreadState%2A> 値が <xref:System.Diagnostics.ThreadState.Wait>場合にのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="b57ec-249">The <xref:System.Diagnostics.ProcessThread.WaitReason%2A> property value is valid only when the <xref:System.Diagnostics.ProcessThread.ThreadState%2A> value is <xref:System.Diagnostics.ThreadState.Wait>.</span></span> <span data-ttu-id="b57ec-250">したがって、<xref:System.Diagnostics.ProcessThread.WaitReason%2A> プロパティを取得する前に、<xref:System.Diagnostics.ProcessThread.ThreadState%2A> の値を確認してください。</span><span class="sxs-lookup"><span data-stu-id="b57ec-250">Therefore, check the <xref:System.Diagnostics.ProcessThread.ThreadState%2A> value before you get the <xref:System.Diagnostics.ProcessThread.WaitReason%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b57ec-251">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-251">The process is on a remote computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TotalProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan TotalProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TotalProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.TotalProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TotalProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalProcessorTime : TimeSpan" Usage="System.Diagnostics.ProcessThread.TotalProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The total amount of CPU time used.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadTotalProcessorTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b57ec-252">このスレッドがプロセッサを使用した時間の合計を取得します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-252">Gets the total amount of time that this thread has spent using the processor.</span></span></summary>
        <value><span data-ttu-id="b57ec-253">スレッドがプロセッサの制御を取得していた時間の合計を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="b57ec-253">A <see cref="T:System.TimeSpan" /> that indicates the amount of time that the thread has had control of the processor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b57ec-254"><xref:System.Diagnostics.ProcessThread.TotalProcessorTime%2A> プロパティは、システムがスレッドを待機状態から取得し、任意のプロセッサで優先順位を指定した合計時間を示します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-254">The <xref:System.Diagnostics.ProcessThread.TotalProcessorTime%2A> property indicates the total amount of time that the system has taken the thread out of the wait state and given it priority on any processor.</span></span> <span data-ttu-id="b57ec-255">複数のプロセッサシステムでは、スレッドが複数のプロセッサを使用している場合、この値には各プロセッサで費やされた時間が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-255">On a multiple processor system, this value would include time spent on each processor, if the thread used more than one processor.</span></span>  
  
 <span data-ttu-id="b57ec-256"><xref:System.Diagnostics.ProcessThread.TotalProcessorTime%2A> プロパティは、<xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> プロパティと <xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> プロパティの合計です。</span><span class="sxs-lookup"><span data-stu-id="b57ec-256">The <xref:System.Diagnostics.ProcessThread.TotalProcessorTime%2A> property is the sum of the <xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> and <xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> properties.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="b57ec-257">スレッド時間を取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="b57ec-257">The thread time could not be retrieved.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b57ec-258">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-258">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime" />
        <altmember cref="P:System.Diagnostics.ProcessThread.UserProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="UserProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan UserProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan UserProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.UserProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan UserProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.UserProcessorTime : TimeSpan" Usage="System.Diagnostics.ProcessThread.UserProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time used in user mode.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadUserProcessorTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b57ec-259">関連付けられたスレッドが、アプリケーションでコードを実行した時間を取得します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-259">Gets the amount of time that the associated thread has spent running code inside the application.</span></span></summary>
        <value><span data-ttu-id="b57ec-260">スレッドによるコード実行がオペレーティング システム コアではなくアプリケーションで行われた時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="b57ec-260">A <see cref="T:System.TimeSpan" /> indicating the amount of time that the thread has spent running code inside the application, as opposed to inside the operating system core.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b57ec-261">Windows NT では、さまざまな保護メカニズムが使用されており、それらのルートでは、ユーザーモードと特権モードが区別されています。</span><span class="sxs-lookup"><span data-stu-id="b57ec-261">Windows NT uses several different protection mechanisms, and at the root of them all is the distinction between user mode and privileged mode.</span></span> <span data-ttu-id="b57ec-262"><xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> は、オペレーティングシステムのコアの外部で、アプリケーションがユーザーモードで実行に費やした時間に対応します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-262"><xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> corresponds to the amount of time that the application has spent running in user mode, outside the operating system core.</span></span> <span data-ttu-id="b57ec-263"><xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> は、システムコア内で、アプリケーションが特権モードでコードを実行するために費やした時間に対応します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-263">The <xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> corresponds to the amount of time that the application has spent running code in privileged mode, inside the system core.</span></span>  
  
 <span data-ttu-id="b57ec-264">ユーザーモードでは、アプリケーションを2つの重要な方法で制限します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-264">User mode restricts the application in two important ways.</span></span> <span data-ttu-id="b57ec-265">まず、アプリケーションは周辺機器に直接アクセスすることはできませんが、代わりにオペレーティングシステムコアを呼び出して、周辺機器データを取得または設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-265">First, the application cannot directly access the peripherals, but instead must call the operating system core to get or set peripheral data.</span></span> <span data-ttu-id="b57ec-266">オペレーティングシステムによって、あるアプリケーションが、別のアプリケーションが必要とする周辺データを破棄しないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-266">The operating system can thus ensure that one application does not destroy peripheral data that is needed by another.</span></span> <span data-ttu-id="b57ec-267">次に、アプリケーションは、オペレーティングシステム自体によって管理されているデータの読み取りや変更を行うことができません。</span><span class="sxs-lookup"><span data-stu-id="b57ec-267">Second, the application cannot read or change data that the operating system itself maintains.</span></span> <span data-ttu-id="b57ec-268">この制限により、アプリケーションが誤って、または意図せずにコアを破損するのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="b57ec-268">This restriction prevents applications from either inadvertently or intentionally corrupting the core.</span></span> <span data-ttu-id="b57ec-269">操作を実行するためにアプリケーションがオペレーティングシステムを必要とする場合は、システムのルーチンの1つを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-269">If the application needs the operating system to perform an operation, it calls one of the system's routines.</span></span> <span data-ttu-id="b57ec-270">これらの多くは特権モードに移行し、操作を実行して、ユーザーモードにスムーズに戻ります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-270">Many of these transition into privileged mode, perform the operation, and smoothly return to user mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="b57ec-271">スレッド時間を取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="b57ec-271">The thread time could not be retrieved.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b57ec-272">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-272">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime" />
        <altmember cref="P:System.Diagnostics.ProcessThread.TotalProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="WaitReason">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ThreadWaitReason WaitReason { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.ThreadWaitReason WaitReason" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.WaitReason" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitReason As ThreadWaitReason" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ThreadWaitReason WaitReason { System::Diagnostics::ThreadWaitReason get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitReason : System.Diagnostics.ThreadWaitReason" Usage="System.Diagnostics.ProcessThread.WaitReason" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The reason why this thread is waiting.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadWaitReason")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ThreadWaitReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b57ec-273">スレッドが待機している理由を取得します。</span><span class="sxs-lookup"><span data-stu-id="b57ec-273">Gets the reason that the thread is waiting.</span></span></summary>
        <value><span data-ttu-id="b57ec-274">スレッドが待機状態にある理由を表す <see cref="T:System.Diagnostics.ThreadWaitReason" />。</span><span class="sxs-lookup"><span data-stu-id="b57ec-274">A <see cref="T:System.Diagnostics.ThreadWaitReason" /> representing the reason that the thread is in the wait state.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b57ec-275"><xref:System.Diagnostics.ProcessThread.WaitReason%2A> プロパティは、<xref:System.Diagnostics.ProcessThread.ThreadState%2A> が <xref:System.Diagnostics.ThreadState.Wait>場合にのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="b57ec-275">The <xref:System.Diagnostics.ProcessThread.WaitReason%2A> property is valid only when the <xref:System.Diagnostics.ProcessThread.ThreadState%2A> is <xref:System.Diagnostics.ThreadState.Wait>.</span></span> <span data-ttu-id="b57ec-276">したがって、<xref:System.Diagnostics.ProcessThread.WaitReason%2A> プロパティを取得する前に、<xref:System.Diagnostics.ProcessThread.ThreadState%2A> の値を確認してください。</span><span class="sxs-lookup"><span data-stu-id="b57ec-276">Therefore, check the <xref:System.Diagnostics.ProcessThread.ThreadState%2A> value before you get the <xref:System.Diagnostics.ProcessThread.WaitReason%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b57ec-277">スレッドが待機状態にありません。</span><span class="sxs-lookup"><span data-stu-id="b57ec-277">The thread is not in the wait state.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b57ec-278">プロセスは、リモート コンピューター上にあります。</span><span class="sxs-lookup"><span data-stu-id="b57ec-278">The process is on a remote computer.</span></span></exception>
        <altmember cref="T:System.Diagnostics.ThreadWaitReason" />
        <altmember cref="P:System.Diagnostics.ProcessThread.ThreadState" />
      </Docs>
    </Member>
  </Members>
</Type>
