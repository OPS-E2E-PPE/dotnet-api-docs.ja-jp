<Type Name="DiagnosticListener" FullName="System.Diagnostics.DiagnosticListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="14db37d0bc3e99847cfb73dc13621747177a53d2" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75137887" /></Metadata><TypeSignature Language="C#" Value="public class DiagnosticListener : System.Diagnostics.DiagnosticSource, IDisposable, IObservable&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DiagnosticListener extends System.Diagnostics.DiagnosticSource implements class System.IDisposable, class System.IObservable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DiagnosticListener" />
  <TypeSignature Language="VB.NET" Value="Public Class DiagnosticListener&#xA;Inherits DiagnosticSource&#xA;Implements IDisposable, IObservable(Of KeyValuePair(Of String, Object))" />
  <TypeSignature Language="C++ CLI" Value="public ref class DiagnosticListener : System::Diagnostics::DiagnosticSource, IDisposable, IObservable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt;" />
  <TypeSignature Language="F#" Value="type DiagnosticListener = class&#xA;    inherit DiagnosticSource&#xA;    interface IDisposable&#xA;    interface IObservable&lt;KeyValuePair&lt;string, obj&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.1</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.DiagnosticSource</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IObservable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="4dac2-101">ソースがその情報を送信する (イベント) 名前付きの場所を表す抽象 <see cref="T:System.Diagnostics.DiagnosticSource" /> クラスの実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-101">Provides an implementation of the abstract <see cref="T:System.Diagnostics.DiagnosticSource" /> class that represents a named place to which a source sends its information (events).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="4dac2-102">`DiagnosticListener` は NotificationSource です。これは、返された結果を使用して通知をログに記録することを意味しますが、通知を任意に転送できるように、<xref:System.Diagnostics.DiagnosticListener.Subscribe%2A> メソッドもあります。</span><span class="sxs-lookup"><span data-stu-id="4dac2-102">`DiagnosticListener` is a NotificationSource, which means the returned result can be used to  log notifications, but it also has a <xref:System.Diagnostics.DiagnosticListener.Subscribe%2A> method so notifications can be forwarded arbitrarily.</span></span> <span data-ttu-id="4dac2-103">そのため、ジョブはプロデューサーからすべてのリスナー (マルチキャスト) に項目を転送します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-103">Thus, its job is to forward things from the producer to all the listeners (multi-casting).</span></span> <span data-ttu-id="4dac2-104">一般に、独自の <xref:System.Diagnostics.DiagnosticListener> を作成するのではなく、既定のを使用して、通知が可能な限りパブリックになるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="4dac2-104">Generally, you should not be making your own <xref:System.Diagnostics.DiagnosticListener> but use the default, so that notifications are as public as possible.</span></span>

<span data-ttu-id="4dac2-105"><xref:System.Diagnostics.DiagnosticSource> クラスと <xref:System.Diagnostics.DiagnosticListener> クラスの詳細については、「 [DiagnosticSource User Guide](https://github.com/dotnet/corefx/blob/d3942d4671919edb0cca6ddc1840190f524a809d/src/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4dac2-105">For more information on the <xref:System.Diagnostics.DiagnosticSource> and <xref:System.Diagnostics.DiagnosticListener> classes, see [DiagnosticSource User's Guide](https://github.com/dotnet/corefx/blob/d3942d4671919edb0cca6ddc1840190f524a809d/src/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md).</span></span>

        ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DiagnosticListener (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DiagnosticListener(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.DiagnosticListener : string -&gt; System.Diagnostics.DiagnosticListener" Usage="new System.Diagnostics.DiagnosticListener name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="4dac2-106">この <see cref="T:System.Diagnostics.DiagnosticListener" /> の名前。</span><span class="sxs-lookup"><span data-stu-id="4dac2-106">The name of this <see cref="T:System.Diagnostics.DiagnosticListener" />.</span></span></param>
        <summary><span data-ttu-id="4dac2-107">新しい<see cref="T:System.Diagnostics.DiagnosticListener" />を作成します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-107">Creates a new <see cref="T:System.Diagnostics.DiagnosticListener" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllListeners">
      <MemberSignature Language="C#" Value="public static IObservable&lt;System.Diagnostics.DiagnosticListener&gt; AllListeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IObservable`1&lt;class System.Diagnostics.DiagnosticListener&gt; AllListeners" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DiagnosticListener.AllListeners" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AllListeners As IObservable(Of DiagnosticListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property IObservable&lt;System::Diagnostics::DiagnosticListener ^&gt; ^ AllListeners { IObservable&lt;System::Diagnostics::DiagnosticListener ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AllListeners : IObservable&lt;System.Diagnostics.DiagnosticListener&gt;" Usage="System.Diagnostics.DiagnosticListener.AllListeners" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;System.Diagnostics.DiagnosticListener&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4dac2-108">この <see cref="T:System.Diagnostics.DiagnosticListener" /> のリスナーのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-108">Gets the collection of listeners for this <see cref="T:System.Diagnostics.DiagnosticListener" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="4dac2-109">これをサブスクライブすると、appdomain 内のすべての NotificationListeners のコールバックと、過去に発生したすべての NotificationListeners、および今後作成されるすべてのリスナーのコールバックが取得されます。</span><span class="sxs-lookup"><span data-stu-id="4dac2-109">When you subscribe to this, you get callbacks for all NotificationListeners in the appdomain, as well as those that occurred in the past, and all future Listeners created in the future.</span></span>

        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="diagnosticListener.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4dac2-110">NotificationListeners を破棄します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-110">Disposes the NotificationListeners.</span></span></summary>
        <remarks><span data-ttu-id="4dac2-111">通知リスナーは、グローバルリスト (探索可能) にあるため、独自には死んでいません。</span><span class="sxs-lookup"><span data-stu-id="4dac2-111">Notification listeners do not die on their own because they are in a global list (for discoverability).</span></span> <span data-ttu-id="4dac2-112">それらを明示的に破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4dac2-112">You must dispose of them explicitly.</span></span> <span data-ttu-id="4dac2-113">管理されていない状態のサブクラスはサポートしないため、 <c>Dispose (bool)</c>パターンは行わないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="4dac2-113">Note that we do not do the <c>Dispose(bool)</c> pattern because we don't want to support subclasses that have non-managed state.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsEnabled() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEnabled () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEnabled();" />
      <MemberSignature Language="F#" Value="override this.IsEnabled : unit -&gt; bool" Usage="diagnosticListener.IsEnabled " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4dac2-114">登録されているサブスクライバーが存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-114">Determines whether there are any registered subscribers.</span></span></summary>
        <returns><span data-ttu-id="4dac2-115">登録されているサブスクライバーがいる場合は <see langword="true" /> で、それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="4dac2-115"><see langword="true" /> if there are any registered subscribers, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="4dac2-116">通知のセットアップに負荷がかかる場合は、このセットアップを実行する前に `IsEnabled()` を呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="4dac2-116">If setup for the notification is expensive, you can call `IsEnabled()` before performing this setup.</span></span> <span data-ttu-id="4dac2-117">プロデューサーは、必要に応じて `IsEnabled()` を呼び出してから、アプリケーションのパフォーマンスが重要な部分の <xref:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)> を呼び出して、<xref:System.Diagnostics.DiagnosticListener>にリスナーがあるかどうかを判断することができます。</span><span class="sxs-lookup"><span data-stu-id="4dac2-117">Producers may optionally call `IsEnabled()` before calling <xref:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)> in performance-critical parts of the application to determine whether there are any listeners to the <xref:System.Diagnostics.DiagnosticListener>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public override bool IsEnabled (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEnabled(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEnabled (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEnabled(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.IsEnabled : string -&gt; bool" Usage="diagnosticListener.IsEnabled name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary><span data-ttu-id="4dac2-118"><see cref="T:System.Diagnostics.DiagnosticListener" /> が有効かどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-118">Checks whether the <see cref="T:System.Diagnostics.DiagnosticListener" /> is enabled.</span></span></summary>
        <returns><span data-ttu-id="4dac2-119">通知が有効になっている場合は <see langword="true" /> で、それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="4dac2-119"><see langword="true" /> if notifications are enabled; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public override bool IsEnabled (string name, object arg1, object arg2 = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEnabled(string name, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.IsEnabled(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEnabled (name As String, arg1 As Object, Optional arg2 As Object = null) As Boolean" />
      <MemberSignature Language="F#" Value="override this.IsEnabled : string * obj * obj -&gt; bool" Usage="diagnosticListener.IsEnabled (name, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="arg1" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="arg2" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="4dac2-120">確認するイベントの名前。</span><span class="sxs-lookup"><span data-stu-id="4dac2-120">The name of the event to check.</span></span></param>
        <param name="arg1"><span data-ttu-id="4dac2-121">コンテキストを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="4dac2-121">The object that represents a context.</span></span></param>
        <param name="arg2"><span data-ttu-id="4dac2-122">コンテキストを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="4dac2-122">The object that represents a context.</span></span></param>
        <summary><span data-ttu-id="4dac2-123">診断イベントに対するいずれかのサブスクライバーが、この名前のイベントの受信に関心があるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-123">Checks if any subscriber to the diagnostic events is interested in receiving events with this name.</span></span> <span data-ttu-id="4dac2-124">サブスクライバーは、<see cref="Overload:System.Diagnostics.DiagnosticListener.Subscribe" /> で提供されるデリゲートを使用して関心を示します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-124">Subscribers indicate their interest using a delegate provided in <see cref="Overload:System.Diagnostics.DiagnosticListener.Subscribe" />.</span></span></summary>
        <returns><span data-ttu-id="4dac2-125">有効な場合は <see langword="true" /> で、それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="4dac2-125"><see langword="true" /> if it is enabled, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DiagnosticListener.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Diagnostics.DiagnosticListener.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4dac2-126">この <see cref="T:System.Diagnostics.DiagnosticListener" /> の名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-126">Gets the name of this <see cref="T:System.Diagnostics.DiagnosticListener" />.</span></span></summary>
        <value><span data-ttu-id="4dac2-127"><see cref="T:System.Diagnostics.DiagnosticListener" /> の名前。</span><span class="sxs-lookup"><span data-stu-id="4dac2-127">The name of the <see cref="T:System.Diagnostics.DiagnosticListener" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityExport">
      <MemberSignature Language="C#" Value="public override void OnActivityExport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnActivityExport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.OnActivityExport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void OnActivityExport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="override this.OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticListener.OnActivityExport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="4dac2-128">外部イベントの影響を受けるアクティビティ。</span><span class="sxs-lookup"><span data-stu-id="4dac2-128">The activity affected by an external event.</span></span></param>
        <param name="payload"><span data-ttu-id="4dac2-129">送信要求を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="4dac2-129">An object that represents the outgoing request.</span></span></param>
        <summary><span data-ttu-id="4dac2-130">すべてのサブスクライバーの OnActivityExport メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-130">Invokes the OnActivityExport method of all the subscribers.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityImport">
      <MemberSignature Language="C#" Value="public override void OnActivityImport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnActivityImport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.OnActivityImport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void OnActivityImport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="override this.OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticListener.OnActivityImport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="4dac2-131">外部イベントの影響を受けるアクティビティ。</span><span class="sxs-lookup"><span data-stu-id="4dac2-131">The activity affected by an external event.</span></span></param>
        <param name="payload"><span data-ttu-id="4dac2-132">受信要求を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="4dac2-132">An object that represents the incoming request.</span></span></param>
        <summary><span data-ttu-id="4dac2-133">すべてのサブスクライバーの OnActivityImport メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-133">Invokes the OnActivityImport method of all the subscribers.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subscribe">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4dac2-134">これらのメソッドを使用するとサブスクライバーを追加でき、その一部でオプションのイベント フィルター メソッドが提供されます。</span><span class="sxs-lookup"><span data-stu-id="4dac2-134">These methods allow adding a subscriber, and some of them provide optional event filtering methods.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public IDisposable Subscribe (IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; observer);" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; observer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Subscribe (observer As IObserver(Of KeyValuePair(Of String, Object))) As IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IDisposable ^ Subscribe(IObserver&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ observer);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; -&gt; IDisposable&#xA;override this.Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; -&gt; IDisposable" Usage="diagnosticListener.Subscribe observer" />
      <MemberSignature Language="C#" Value="public virtual IDisposable Subscribe (IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; observer);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Subscribe (observer As IObserver(Of KeyValuePair(Of String, Object))) As IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IObservable`1.Subscribe(System.IObserver{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="observer"><span data-ttu-id="4dac2-135">サブスクライバーです。</span><span class="sxs-lookup"><span data-stu-id="4dac2-135">A subscriber.</span></span></param>
        <summary><span data-ttu-id="4dac2-136">サブスクライバーを追加します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-136">Adds a subscriber.</span></span></summary>
        <returns><span data-ttu-id="4dac2-137"><see cref="T:System.Diagnostics.DiagnosticSource" /> が通知の送信を完了する前に、リスナーが通知の受信を停止できるインターフェイスへの参照。</span><span class="sxs-lookup"><span data-stu-id="4dac2-137">A reference to an interface that allows the listener to stop receiving notifications before the <see cref="T:System.Diagnostics.DiagnosticSource" /> has finished sending them.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public virtual IDisposable Subscribe (IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; observer, Func&lt;string,object,object,bool&gt; isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; observer, class System.Func`4&lt;string, object, object, bool&gt; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Func{System.String,System.Object,System.Object,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Subscribe (observer As IObserver(Of KeyValuePair(Of String, Object)), isEnabled As Func(Of String, Object, Object, Boolean)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IDisposable ^ Subscribe(IObserver&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ observer, Func&lt;System::String ^, System::Object ^, System::Object ^, bool&gt; ^ isEnabled);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Func&lt;string, obj, obj, bool&gt; -&gt; IDisposable&#xA;override this.Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Func&lt;string, obj, obj, bool&gt; -&gt; IDisposable" Usage="diagnosticListener.Subscribe (observer, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="isEnabled" Type="System.Func&lt;System.String,System.Object,System.Object,System.Boolean&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="observer"><span data-ttu-id="4dac2-138">サブスクライバーです。</span><span class="sxs-lookup"><span data-stu-id="4dac2-138">A subscriber.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="4dac2-139">その名前と最大 2 つのコンテキスト オブジェクト (<see langword="null" /> が可能) に基づいてイベントをフィルタリングするデリゲートです。あるいは、イベント フィルターが望ましくない場合、<see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4dac2-139">A delegate that filters events based on their name and up to two context objects (which can be <see langword="null" />), or <see langword="null" /> to if an event filter is not desirable.</span></span></param>
        <summary><span data-ttu-id="4dac2-140">サブスクライバーを追加し、任意で、その名前と最大 2 つのコンテキスト オブジェクトに基づいてイベントをフィルタリングします。</span><span class="sxs-lookup"><span data-stu-id="4dac2-140">Adds a subscriber, and optionally filters events based on their name and up to two context objects.</span></span></summary>
        <returns><span data-ttu-id="4dac2-141"><see cref="T:System.Diagnostics.DiagnosticSource" /> が通知の送信を完了する前に、リスナーが通知の受信を停止できるインターフェイスへの参照。</span><span class="sxs-lookup"><span data-stu-id="4dac2-141">A reference to an interface that allows the listener to stop receiving notifications before the <see cref="T:System.Diagnostics.DiagnosticSource" /> has finished sending them.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="4dac2-142">`isEnabled` が `null`されていない場合は、一部のイベントが無視されて効率が低下する可能性があることを示しています。</span><span class="sxs-lookup"><span data-stu-id="4dac2-142">If `isEnabled` is not `null`, it indicates that some events are uninteresting can be skipped for efficiency.</span></span>

<span data-ttu-id="4dac2-143">特定のインストルメンテーションサイトでは、1つまたは複数の <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> オーバーロードを呼び出すことができます。このオーバーロードでは、イベントの名前と、他の2つの (インストルメンテーションサイト固有の) オブジェクトを引数として渡します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-143">A particular instrumentation site has the option of calling one or more <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> overloads  in which it passes the name of the event and up to two other (instrumentation site specific) objects as arguments.</span></span> <span data-ttu-id="4dac2-144">これらの <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> 呼び出しのいずれかが行われた場合は、渡された値を使用してこの `isEnabled` 述語が呼び出されます (短いオーバーロードが使用されている場合は、不足しているコンテキストオブジェクトに対して `null` が渡されます)。</span><span class="sxs-lookup"><span data-stu-id="4dac2-144">If any of these <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> calls are made then this `isEnabled` predicate is invoked with passed values (if shorter overloads are used, `null` is passed for missing context objects).</span></span>

<span data-ttu-id="4dac2-145">これにより、特定のインストルメンテーションサイトは、高度で効率的なフィルター処理を行うために、サブスクライバーに2つの情報を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="4dac2-145">This gives any particular instrumentation site the ability to pass up to two pieces of information to the subscriber to do sophisticated, efficient filtering.</span></span> <span data-ttu-id="4dac2-146">そのためには、インストルメンテーションサイトとサブスクライバーコードの間により多くの結合が必要になります。</span><span class="sxs-lookup"><span data-stu-id="4dac2-146">This requires more coupling between the instrumentation site and the subscriber code.</span></span>

<span data-ttu-id="4dac2-147">特定のインストルメンテーションサイトで、同じイベントに対して `IsEnabled` の異なるオーバーロードを呼び出すことが想定されています。最初に <xref:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)>を呼び出します。これにより、2つの `null` コンテキストオブジェクトを持つフィルターが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="4dac2-147">It is expected that a particular instrumentation site may call different overloads of `IsEnabled` for the same event, first calling <xref:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)>, which calls the filter with two `null` context objects.</span></span> <span data-ttu-id="4dac2-148">`isEnabled` が `true`を返す場合は、コンテキストオブジェクトを使用して再度を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-148">If `isEnabled` returns `true`, it calls again with context objects.</span></span> <span data-ttu-id="4dac2-149">`isEnabled` フィルターは、この点を念頭に置いて設計する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4dac2-149">The `isEnabled` filter should be designed with this in mind.</span></span>

<span data-ttu-id="4dac2-150">`isEnabled` 述語はオプションの最適化であり、インストルメンテーションサイトがペイロードの設定を回避し、サブスクライバーが関心を持たない場合に <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)> を呼び出すことができないようにします。</span><span class="sxs-lookup"><span data-stu-id="4dac2-150">Note that the `isEnabled` predicate is an optional optimization to allow the instrumentation site to avoid setting up the payload and calling <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)> when no subscriber cares about it.</span></span> <span data-ttu-id="4dac2-151">具体的には、インストルメンテーションサイトには、<xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> 述語を無視し、単に <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)>を呼び出すオプションがあります。</span><span class="sxs-lookup"><span data-stu-id="4dac2-151">In particular, the instrumentation site has the option of ignoring the <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> predicate (not calling it) and simply calling <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)>.</span></span> <span data-ttu-id="4dac2-152">そのため、サブスクライバーがフィルター処理を必要とする場合は、サブスクライバー自体を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4dac2-152">Thus, if the subscriber requires the filtering, it needs to do it itself.</span></span>

<span data-ttu-id="4dac2-153">このパラメーターが `null`場合、フィルター処理は行われません (<xref:System.Diagnostics.DiagnosticSource.IsEnabled%2A> のすべてのオーバーロードは `true`を返します)。</span><span class="sxs-lookup"><span data-stu-id="4dac2-153">If this parameter is `null`, no filtering is done (all overloads of <xref:System.Diagnostics.DiagnosticSource.IsEnabled%2A> return `true`).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public virtual IDisposable Subscribe (IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; observer, Predicate&lt;string&gt; isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; observer, class System.Predicate`1&lt;string&gt; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Predicate{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Subscribe (observer As IObserver(Of KeyValuePair(Of String, Object)), isEnabled As Predicate(Of String)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IDisposable ^ Subscribe(IObserver&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ observer, Predicate&lt;System::String ^&gt; ^ isEnabled);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Predicate&lt;string&gt; -&gt; IDisposable&#xA;override this.Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Predicate&lt;string&gt; -&gt; IDisposable" Usage="diagnosticListener.Subscribe (observer, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;" />
        <Parameter Name="isEnabled" Type="System.Predicate&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="observer"><span data-ttu-id="4dac2-154">サブスクライバーです。</span><span class="sxs-lookup"><span data-stu-id="4dac2-154">A subscriber.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="4dac2-155">その名前 (<see cref="T:System.String" />) に基づいてイベントをフィルタリングするデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="4dac2-155">A delegate that filters events based on their name (<see cref="T:System.String" />).</span></span> <span data-ttu-id="4dac2-156">イベントが有効な場合、このデリゲートは <see langword="true" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-156">The delegate should return <see langword="true" /> if the event is enabled.</span></span></param>
        <summary><span data-ttu-id="4dac2-157">サブスクライバーを追加し、任意で、その名前に基づいてイベントをフィルタリングします。</span><span class="sxs-lookup"><span data-stu-id="4dac2-157">Adds a subscriber, and optionally filters events based on their name.</span></span></summary>
        <returns><span data-ttu-id="4dac2-158"><see cref="T:System.Diagnostics.DiagnosticSource" /> が通知の送信を完了する前に、リスナーが通知の受信を停止できるインターフェイスへの参照。</span><span class="sxs-lookup"><span data-stu-id="4dac2-158">A reference to an interface that allows the listener to stop receiving notifications before the <see cref="T:System.Diagnostics.DiagnosticSource" /> has finished sending them.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="4dac2-159">`isEnabled` が `null`されていない場合、一部のイベントは無意味であり、効率を上げるためにスキップできます。</span><span class="sxs-lookup"><span data-stu-id="4dac2-159">If `isEnabled` is not `null`, some events are uninteresting and can be skipped for efficiency.</span></span> <span data-ttu-id="4dac2-160">`isEnabled` 述語は、インストルメンテーションサイトがペイロードの設定を回避し、サブスクライバーが関心を持たない場合に <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)> を呼び出すことができないようにするためのオプションの最適化です。</span><span class="sxs-lookup"><span data-stu-id="4dac2-160">The `isEnabled` predicate is an optional optimization to allow the instrumentation site to avoid setting up the payload and calling <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)> when no subscriber cares about it.</span></span> <span data-ttu-id="4dac2-161">特に、インストルメンテーションサイトには、<xref:System.Diagnostics.DiagnosticListener.IsEnabled> 述語 (呼び出さない) を無視し、単純に <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)>を呼び出すオプションがあります。</span><span class="sxs-lookup"><span data-stu-id="4dac2-161">In particular the instrumentation site has the option of ignoring the <xref:System.Diagnostics.DiagnosticListener.IsEnabled> predicate (not calling it) and simply calling <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)>.</span></span> <span data-ttu-id="4dac2-162">したがって、サブスクライバーがフィルター処理を必要とする場合は、それ自体を行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="4dac2-162">Thus if the subscriber requires the filtering, it needs to do it itself.</span></span>

<span data-ttu-id="4dac2-163">`isEnabled` が `null`場合、フィルター処理は行われません (<xref:System.Diagnostics.DiagnosticSource.IsEnabled%2A> のすべてのオーバーロードは `true`を返します)。</span><span class="sxs-lookup"><span data-stu-id="4dac2-163">If `isEnabled` is `null`, no filtering is done (all overloads of <xref:System.Diagnostics.DiagnosticSource.IsEnabled%2A> return `true`).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public virtual IDisposable Subscribe (IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; observer, Func&lt;string,object,object,bool&gt; isEnabled, Action&lt;System.Diagnostics.Activity,object&gt; onActivityImport = null, Action&lt;System.Diagnostics.Activity,object&gt; onActivityExport = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; observer, class System.Func`4&lt;string, object, object, bool&gt; isEnabled, class System.Action`2&lt;class System.Diagnostics.Activity, object&gt; onActivityImport, class System.Action`2&lt;class System.Diagnostics.Activity, object&gt; onActivityExport) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Func{System.String,System.Object,System.Object,System.Boolean},System.Action{System.Diagnostics.Activity,System.Object},System.Action{System.Diagnostics.Activity,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Subscribe (observer As IObserver(Of KeyValuePair(Of String, Object)), isEnabled As Func(Of String, Object, Object, Boolean), Optional onActivityImport As Action(Of Activity, Object) = null, Optional onActivityExport As Action(Of Activity, Object) = null) As IDisposable" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Func&lt;string, obj, obj, bool&gt; * Action&lt;System.Diagnostics.Activity, obj&gt; * Action&lt;System.Diagnostics.Activity, obj&gt; -&gt; IDisposable&#xA;override this.Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Func&lt;string, obj, obj, bool&gt; * Action&lt;System.Diagnostics.Activity, obj&gt; * Action&lt;System.Diagnostics.Activity, obj&gt; -&gt; IDisposable" Usage="diagnosticListener.Subscribe (observer, isEnabled, onActivityImport, onActivityExport)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="isEnabled" Type="System.Func&lt;System.String,System.Object,System.Object,System.Boolean&gt;" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="onActivityImport" Type="System.Action&lt;System.Diagnostics.Activity,System.Object&gt;" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="onActivityExport" Type="System.Action&lt;System.Diagnostics.Activity,System.Object&gt;" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="observer"><span data-ttu-id="4dac2-164">サブスクライバーです。</span><span class="sxs-lookup"><span data-stu-id="4dac2-164">A subscriber.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="4dac2-165">その名前と最大 2 つのコンテキスト オブジェクト (<see langword="null" /> が可能) に基づいてイベントをフィルタリングするデリゲートです。あるいは、イベント フィルターが望ましくない場合、<see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4dac2-165">A delegate that filters events based on their name and up to two context objects (which can be <see langword="null" />), or <see langword="null" /> if an event filter is not desirable.</span></span></param>
        <param name="onActivityImport"><span data-ttu-id="4dac2-166">外部イベントの影響を受けるアクティビティを受け取るアクション デリゲートおよび受信要求を表すオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="4dac2-166">An action delegate that receives the activity affected by an external event and an object that represents the incoming request.</span></span></param>
        <param name="onActivityExport"><span data-ttu-id="4dac2-167">外部イベントの影響を受けるアクティビティを受け取るアクション デリゲートおよび送信要求を表すオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="4dac2-167">An action delegate that receives the activity affected by an external event and an object that represents the outgoing request.</span></span></param>
        <summary><span data-ttu-id="4dac2-168">サブスクライバーを追加し、任意で、その名前と最大 2 つのコンテキスト オブジェクトに基づいてイベントをフィルタリングし、プロバイダーがプロセスの外からアクティビティをインポートまたはエクスポートするときに呼び出すメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-168">Adds a subscriber, optionally filters events based on their name and up to two context objects, and specifies methods to call when providers import or export activites from outside the process.</span></span></summary>
        <returns><span data-ttu-id="4dac2-169"><see cref="T:System.Diagnostics.DiagnosticSource" /> が通知の送信を完了する前に、リスナーが通知の受信を停止できるインターフェイスへの参照。</span><span class="sxs-lookup"><span data-stu-id="4dac2-169">A reference to an interface that allows the listener to stop receiving notifications before the <see cref="T:System.Diagnostics.DiagnosticSource" /> has finished sending them.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="4dac2-170">`isEnabled` が null 以外の場合は、一部のイベントが無視されて効率が低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="4dac2-170">If `isEnabled` is non-null, some events are uninteresting can be skipped for efficiency.</span></span>  

<span data-ttu-id="4dac2-171">また、プロセスの外部から (たとえば、HTTP 要求から) アクティビティをインポートまたはエクスポートするときに呼び出される "onActivityImport" メソッドと "Onactivityimport" メソッドを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="4dac2-171">You can also supply 'onActivityImport' and 'onActivityExport' methods that are called when providers importing or export activities from outside the process (for example, from HTTP requests).</span></span> <span data-ttu-id="4dac2-172">これらのメソッドは、アクティビティをインポートまたはエクスポートした後に呼び出され、アクティビティまたは送信要求を変更してポリシーを追加するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="4dac2-172">These methods are called after importing or exporting the activity and can be used to modify the activity or the outgoing request to add policy.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="diagnosticListener.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4dac2-173">この DiagnosticListener の名前と共に文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-173">Returns a string with the name of this DiagnosticListener.</span></span></summary>
        <returns><span data-ttu-id="4dac2-174">この DiagnosticListener の名前です。</span><span class="sxs-lookup"><span data-stu-id="4dac2-174">The name of this DiagnosticListener.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string name, object value);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string name, object value) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (name As String, value As Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ name, System::Object ^ value);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj -&gt; unit" Usage="diagnosticListener.Write (name, value)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C#" Value="public override void Write (string name, object parameters);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string name, object parameters) cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (name As String, parameters As Object)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ name, System::Object ^ parameters);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj -&gt; unit" Usage="diagnosticListener.Write (name, parameters)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
        <Parameter Name="parameters" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="4dac2-175">ログ記録するイベントの名前。</span><span class="sxs-lookup"><span data-stu-id="4dac2-175">The name of the event to log.</span></span></param>
        <param name="value"><span data-ttu-id="4dac2-176">イベントのペイロードを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="4dac2-176">An object that represents the payload for the event.</span></span></param>
        <param name="parameters"><span data-ttu-id="4dac2-177">イベントのペイロードを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="4dac2-177">An object that represents the payload for the event.</span></span></param>
        <summary><span data-ttu-id="4dac2-178">通知をログ記録します。</span><span class="sxs-lookup"><span data-stu-id="4dac2-178">Logs a notification.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="4dac2-179">詳細については、<xref:System.Diagnostics.DiagnosticSource.Write%2A?displayProperty=nameWithType> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="4dac2-179">For more information, see the <xref:System.Diagnostics.DiagnosticSource.Write%2A?displayProperty=nameWithType> method.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
