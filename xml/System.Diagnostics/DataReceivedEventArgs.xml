<Type Name="DataReceivedEventArgs" FullName="System.Diagnostics.DataReceivedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="48ad7452fef44afc0ec620fd08eca900bcaae7d1" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82317960" /></Metadata><TypeSignature Language="C#" Value="public class DataReceivedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataReceivedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DataReceivedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataReceivedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type DataReceivedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="E:System.Diagnostics.Process.OutputDataReceived" /> イベントおよび <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> イベントのデータを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロセスのリダイレクトされた <xref:System.Diagnostics.Process.StandardOutput%2A> または <xref:System.Diagnostics.Process.StandardError%2A> ストリーム出力を非同期に収集するには、リダイレクトされたストリーム出力イベントを処理するメソッドを作成する必要があります。 プロセスがリダイレクトされたストリームに書き込むときに、イベントハンドラーメソッドが呼び出されます。 イベントデリゲートは、<xref:System.Diagnostics.DataReceivedEventArgs>のインスタンスを使用してイベントハンドラーを呼び出します。 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> プロパティには、プロセスがリダイレクトされたストリームに書き込んだテキスト行が含まれます。  
  
   
  
## Examples  
 次のコード例は、`sort` コマンドのリダイレクトされた <xref:System.Diagnostics.Process.StandardOutput%2A> ストリームで非同期読み取り操作を実行する方法を示しています。 `sort` コマンドは、テキスト入力の読み取りと並べ替えを行うコンソールアプリケーションです。  
  
 この例では、`SortOutputHandler` イベントハンドラーのイベントデリゲートを作成し、それを <xref:System.Diagnostics.Process.OutputDataReceived> イベントに関連付けます。 イベントハンドラーは、リダイレクトされた <xref:System.Diagnostics.Process.StandardOutput%2A> ストリームからテキスト行を受信し、テキストを書式設定して、画面にテキストを書き込みます。  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
  <Members>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public string Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DataReceivedEventArgs.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Data { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : string" Usage="System.Diagnostics.DataReceivedEventArgs.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リダイレクトされた <see cref="T:System.Diagnostics.Process" /> 出力ストリームに書き込まれた文字の行を取得します。</summary>
        <value>関連する <see cref="T:System.Diagnostics.Process" /> によって、リダイレクトされた <see cref="P:System.Diagnostics.Process.StandardOutput" /> または <see cref="P:System.Diagnostics.Process.StandardError" /> ストリームに書き込まれた行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Process> の <xref:System.Diagnostics.Process.StandardOutput%2A> または <xref:System.Diagnostics.Process.StandardError%2A> ストリームをイベントハンドラーにリダイレクトすると、プロセスがリダイレクトされたストリームに行を書き込むたびにイベントが発生します。 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> プロパティは、<xref:System.Diagnostics.Process> によってリダイレクトされた出力ストリームに書き込まれた行です。 イベントハンドラーは、<xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> プロパティを使用して、プロセスの出力をフィルター処理したり、出力を別の場所に書き込むことができます。 たとえば、すべてのエラー出力行を指定されたエラーログファイルに格納するイベントハンドラーを作成できます。  
  
 行は、一連の文字として定義され、その後に改行 ("\n")、またはキャリッジリターンの直後に改行 ("\r\n") が続きます。 行文字は、既定のシステム ANSI コードページを使用してエンコードされます。 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> プロパティには、終端の復帰またはラインフィードは含まれません。  
  
 リダイレクトされたストリームが閉じられると、null 行がイベントハンドラーに送信されます。 アクセスする前に、イベントハンドラーが <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> プロパティを適切にチェックしていることを確認します。 たとえば、静的メソッド <xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType> を使用して、イベントハンドラーの <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> プロパティを検証できます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Diagnostics.Process.OutputDataReceived> イベントに関連付けられた単純なイベントハンドラーを示しています。 イベントハンドラーは、リダイレクトされた <xref:System.Diagnostics.Process.StandardOutput%2A> ストリームからテキスト行を受信し、テキストを書式設定して、画面にテキストを書き込みます。  
  
 [!code-cpp[Process_AsyncStreams#4](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/datareceivedevent.cpp#4)]
 [!code-csharp[Process_AsyncStreams#4](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/datareceivedevent.cs#4)]
 [!code-vb[Process_AsyncStreams#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/datareceivedevent.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
