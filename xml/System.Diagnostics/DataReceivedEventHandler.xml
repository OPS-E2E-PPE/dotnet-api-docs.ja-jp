<Type Name="DataReceivedEventHandler" FullName="System.Diagnostics.DataReceivedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="227d91df9ef7fd392e3cd53aa639d4c84d5a502c" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83947249" /></Metadata><TypeSignature Language="C#" Value="public delegate void DataReceivedEventHandler(object sender, DataReceivedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed DataReceivedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub DataReceivedEventHandler(sender As Object, e As DataReceivedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void DataReceivedEventHandler(System::Object ^ sender, DataReceivedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type DataReceivedEventHandler = delegate of obj * DataReceivedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Diagnostics.Process" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Diagnostics.DataReceivedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender"><span data-ttu-id="55e53-101">イベントのソースです。</span><span class="sxs-lookup"><span data-stu-id="55e53-101">The source of the event.</span></span></param>
    <param name="e"><span data-ttu-id="55e53-102">イベント データを含んでいる <see cref="T:System.Diagnostics.DataReceivedEventArgs" /> です。</span><span class="sxs-lookup"><span data-stu-id="55e53-102">A <see cref="T:System.Diagnostics.DataReceivedEventArgs" /> that contains the event data.</span></span></param>
    <summary><span data-ttu-id="55e53-103"><see cref="E:System.Diagnostics.Process.OutputDataReceived" /> の <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> イベントまたは <see cref="T:System.Diagnostics.Process" /> イベントを処理するメソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="55e53-103">Represents the method that will handle the <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> event or <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> event of a <see cref="T:System.Diagnostics.Process" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55e53-104"><xref:System.Diagnostics.DataReceivedEventHandler> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="55e53-104">When you create a <xref:System.Diagnostics.DataReceivedEventHandler> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="55e53-105">イベント ハンドラーにイベントを関連付けるには、イベントにデリゲートのインスタンスを追加します。</span><span class="sxs-lookup"><span data-stu-id="55e53-105">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="55e53-106">イベント ハンドラーは、デリゲートを削除しない限り、イベントが発生するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="55e53-106">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="55e53-107">イベントハンドラーデリゲートの詳細については、「[イベントの処理と発生](/dotnet/standard/events/)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="55e53-107">For more information about event-handler delegates, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
 <span data-ttu-id="55e53-108">プロセスのリダイレクトされた <xref:System.Diagnostics.Process.StandardOutput%2A> または <xref:System.Diagnostics.Process.StandardError%2A> ストリーム出力を非同期に収集するには、イベントハンドラーを <xref:System.Diagnostics.Process.OutputDataReceived> または <xref:System.Diagnostics.Process.ErrorDataReceived> イベントに追加します。</span><span class="sxs-lookup"><span data-stu-id="55e53-108">To asynchronously collect the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> or <xref:System.Diagnostics.Process.StandardError%2A> stream output of a process, add your event handler to the <xref:System.Diagnostics.Process.OutputDataReceived> or <xref:System.Diagnostics.Process.ErrorDataReceived> event.</span></span> <span data-ttu-id="55e53-109">これらのイベントは、プロセスが、対応するリダイレクトされたストリームに行を書き込むたびに発生します。</span><span class="sxs-lookup"><span data-stu-id="55e53-109">These events are raised each time the process writes a line to the corresponding redirected stream.</span></span> <span data-ttu-id="55e53-110">リダイレクトされたストリームが閉じられると、null 行がイベントハンドラーに送信されます。</span><span class="sxs-lookup"><span data-stu-id="55e53-110">When the redirected stream is closed, a null line is sent to the event handler.</span></span> <span data-ttu-id="55e53-111"><xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> プロパティにアクセスする前に、イベントハンドラーがこの条件を確認するようにしてください。</span><span class="sxs-lookup"><span data-stu-id="55e53-111">Ensure that your event handler checks for this condition before accessing the <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> property.</span></span> <span data-ttu-id="55e53-112">たとえば、`static` メソッド <xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType> を使用して、イベントハンドラーの <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> プロパティを検証できます。</span><span class="sxs-lookup"><span data-stu-id="55e53-112">For example, you can use the `static` method <xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType> to validate the <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> property in your event handler.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="55e53-113">次のコード例は、 **sort**コマンドのリダイレクトされた <xref:System.Diagnostics.Process.StandardOutput%2A> ストリームに対して非同期読み取り操作を実行する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="55e53-113">The following code example illustrates how to perform asynchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream of the **sort** command.</span></span> <span data-ttu-id="55e53-114">**Sort**コマンドは、テキスト入力の読み取りと並べ替えを行うコンソールアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="55e53-114">The **sort** command is a console application that reads and sorts text input.</span></span>  
  
 <span data-ttu-id="55e53-115">この例では、`SortOutputHandler` イベントハンドラーの <xref:System.Diagnostics.DataReceivedEventHandler> デリゲートを作成し、デリゲートを <xref:System.Diagnostics.Process.OutputDataReceived> イベントに関連付けます。</span><span class="sxs-lookup"><span data-stu-id="55e53-115">The example creates a <xref:System.Diagnostics.DataReceivedEventHandler> delegate for the `SortOutputHandler` event handler and associates the delegate with the <xref:System.Diagnostics.Process.OutputDataReceived> event.</span></span> <span data-ttu-id="55e53-116">イベントハンドラーは、リダイレクトされた <xref:System.Diagnostics.Process.StandardOutput%2A> ストリームからテキスト行を受信し、テキストを書式設定して、画面にテキストを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="55e53-116">The event handler receives text lines from the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream, formats the text, and writes the text to the screen.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventArgs" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
</Type>
