<Type Name="SchemaImporterExtension" FullName="System.Xml.Serialization.Advanced.SchemaImporterExtension">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aafdd9a1541c1705356c4b5a72b868029c3d4701" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83952381" /></Metadata><TypeSignature Language="C#" Value="public abstract class SchemaImporterExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SchemaImporterExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SchemaImporterExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class SchemaImporterExtension abstract" />
  <TypeSignature Language="F#" Value="type SchemaImporterExtension = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>自動クエリ ツールを使用するときに Web サービス記述言語 (WSDL: Web Services Description Language) ドキュメントから生成されたコードをカスタマイズできます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 スキーマのインポートは、Visual Studio の [Web 参照の追加] ダイアログボックスなどのツールによって、または[Web サービス記述言語ツール (wsdl.exe)](https://msdn.microsoft.com/library/b9210348-8bc2-4367-8c91-d1a04b403e88)を使用して、web サービスプロキシが生成されるたびに発生します。 スキーマのインポートは、 [XML スキーマ定義ツール (xsd.exe)](/dotnet/standard/serialization/xml-schema-definition-tool-xsd-exe)を使用して特定の xsd ドキュメントからコードを生成する場合にも発生します。  
  
 <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension> クラスを使用すると、これらのツールのいずれかを使用する場合に生成されるコードを変更できます。 たとえば、システム上の書籍の注文を処理する既存のクラスがあり、注文を提供する既存の XSD ドキュメントがあるとします。 <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension> クラスを使用すると、ツールの1つを有効にして、クラスを使用するコードを生成できます。  
  
 コードの生成を制御するには、<xref:System.CodeDom> 名前空間で見つかったクラスを使用する必要があります。 詳細については、「CodeDOM および[Codedom クイックリファレンス](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx)[の使用](/dotnet/framework/reflection-and-codedom/using-the-codedom)」を参照してください。  
  
 WSDL.EXE ツール ([Web 参照の追加] ダイアログボックスなどの他のツールによって使用される) を有効にする手順は、次のとおりです。  
  
1.  <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension> クラスの実装を作成します。  
  
2.  <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%2A> メソッドを使用して、コードジェネレーターのコードを記述します。 メソッドには、インターセプトした XSD 型を調べて、新しい CLR コードを生成するために使用する CodeDOM オブジェクトを作成するためのパラメーターが含まれています。  
  
3.  必要に応じて、<xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportAnyElement%2A> メソッドを使用して \<xsd: XSD ドキュメントで見つかった > の要素を処理します。  
  
4.  必要に応じて、<xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportDefaultValue%2A> メソッドを使用して、XSD ドキュメントで検出された既定値を確認し、別の既定値を返します。  
  
5.  拡張機能をライブラリにコンパイルします。  
  
6.  アセンブリに署名します。  
  
7.  アセンブリをグローバルアセンブリキャッシュ (GAC) にインストールします。  
  
8.  拡張子が含まれるように machine.config ファイルを変更します。  
  
   
  
## Examples  
 [Schemaの Terextension のテクノロジサンプル](/dotnet/standard/serialization/schemaimporterextension-technology-sample)を参照してください。 この例には、署名付きのアセンブリは含まれていないことに注意してください。 代わりに、コマンドウィンドウで <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension> を使用する方法を示します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SchemaImporterExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SchemaImporterExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportAnyElement">
      <MemberSignature Language="C#" Value="public virtual string ImportAnyElement (System.Xml.Schema.XmlSchemaAny any, bool mixed, System.Xml.Serialization.XmlSchemas schemas, System.Xml.Serialization.XmlSchemaImporter importer, System.CodeDom.CodeCompileUnit compileUnit, System.CodeDom.CodeNamespace mainNamespace, System.Xml.Serialization.CodeGenerationOptions options, System.CodeDom.Compiler.CodeDomProvider codeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImportAnyElement(class System.Xml.Schema.XmlSchemaAny any, bool mixed, class System.Xml.Serialization.XmlSchemas schemas, class System.Xml.Serialization.XmlSchemaImporter importer, class System.CodeDom.CodeCompileUnit compileUnit, class System.CodeDom.CodeNamespace mainNamespace, valuetype System.Xml.Serialization.CodeGenerationOptions options, class System.CodeDom.Compiler.CodeDomProvider codeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportAnyElement(System.Xml.Schema.XmlSchemaAny,System.Boolean,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportAnyElement (any As XmlSchemaAny, mixed As Boolean, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ImportAnyElement(System::Xml::Schema::XmlSchemaAny ^ any, bool mixed, System::Xml::Serialization::XmlSchemas ^ schemas, System::Xml::Serialization::XmlSchemaImporter ^ importer, System::CodeDom::CodeCompileUnit ^ compileUnit, System::CodeDom::CodeNamespace ^ mainNamespace, System::Xml::Serialization::CodeGenerationOptions options, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider);" />
      <MemberSignature Language="F#" Value="abstract member ImportAnyElement : System.Xml.Schema.XmlSchemaAny * bool * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string&#xA;override this.ImportAnyElement : System.Xml.Schema.XmlSchemaAny * bool * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="schemaImporterExtension.ImportAnyElement (any, mixed, schemas, importer, compileUnit, mainNamespace, options, codeProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="any" Type="System.Xml.Schema.XmlSchemaAny" />
        <Parameter Name="mixed" Type="System.Boolean" />
        <Parameter Name="schemas" Type="System.Xml.Serialization.XmlSchemas" />
        <Parameter Name="importer" Type="System.Xml.Serialization.XmlSchemaImporter" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="mainNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="options" Type="System.Xml.Serialization.CodeGenerationOptions" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="any">XSD (XML スキーマ ドキュメント) 内で見つかった <see langword="xsd:any" /> 要素。</param>
        <param name="mixed">属性が "mixed" に設定されている XSD <see langword="true" /> 属性を表す場合は <see langword="complex" />。それ以外の場合は <see langword="false" />。</param>
        <param name="schemas">XSD 内で見つかったスキーマのコレクション。</param>
        <param name="importer">使用されているインポーターです。</param>
        <param name="compileUnit">XSD の代替コードを生成するための CodeDOM 構造体の追加先である <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
        <param name="mainNamespace">要素用の現在の名前空間です。</param>
        <param name="options">コード コンパイラ上で設定オプションを指定する列挙値のビットごとの組み合わせです。</param>
        <param name="codeProvider">新しいコードの生成に使用される CodeDOM プロバイダーです。</param>
        <summary>スキーマの &lt;xsd:any&gt; 要素のインポートを処理します。</summary>
        <returns>要素が割り当てられる CLR 型の名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コードの生成を制御するには、<xref:System.CodeDom> 名前空間で見つかったクラスを使用する必要があります。 詳細については、「CodeDOM および[Codedom クイックリファレンス](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx)[の使用](/dotnet/framework/reflection-and-codedom/using-the-codedom)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportDefaultValue">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeExpression ImportDefaultValue (string value, string type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeExpression ImportDefaultValue(string value, string type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportDefaultValue(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportDefaultValue (value As String, type As String) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeExpression ^ ImportDefaultValue(System::String ^ value, System::String ^ type);" />
      <MemberSignature Language="F#" Value="abstract member ImportDefaultValue : string * string -&gt; System.CodeDom.CodeExpression&#xA;override this.ImportDefaultValue : string * string -&gt; System.CodeDom.CodeExpression" Usage="schemaImporterExtension.ImportDefaultValue (value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">元の XSD で見つかった値。</param>
        <param name="type">XSD 型の名前。</param>
        <summary>インポートされる XSD 型の既定値を指定できます。</summary>
        <returns>新しい既定値を設定する <see cref="T:System.CodeDom.CodeExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コードの生成を制御するには、<xref:System.CodeDom> 名前空間で見つかったクラスを使用する必要があります。 詳細については、「CodeDOM および[Codedom クイックリファレンス](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx)[の使用](/dotnet/framework/reflection-and-codedom/using-the-codedom)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ImportSchemaType">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>インポートされたスキーマをチェックし、そのスキーマが割り当てられる CLR 型を指定することによって、生成されるコードを操作できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、<xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%28System.String%2CSystem.String%2CSystem.Xml.Schema.XmlSchemaObject%2CSystem.Xml.Serialization.XmlSchemas%2CSystem.Xml.Serialization.XmlSchemaImporter%2CSystem.CodeDom.CodeCompileUnit%2CSystem.CodeDom.CodeNamespace%2CSystem.Xml.Serialization.CodeGenerationOptions%2CSystem.CodeDom.Compiler.CodeDomProvider%29> メソッドの単純な実装を示しています。 このコードでは、名前空間と名前を確認します。 右側の値が見つかった場合は、生成されたコード内で参照する必要があるカスタムアセンブリ ("順序 .dll") の名前を追加します。 次に、コードで生成された新しい名前空間 ("Microsoft. Samples") を追加します。  
  
 [!code-csharp[SchemaImporterExtensionExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SchemaImporterExtensionExample/CS/SchemaImporterExtensionExample.cs#1)]
 [!code-vb[SchemaImporterExtensionExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SchemaImporterExtensionExample/VB/SchemaImporterExtensionExample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ImportSchemaType">
      <MemberSignature Language="C#" Value="public virtual string ImportSchemaType (System.Xml.Schema.XmlSchemaType type, System.Xml.Schema.XmlSchemaObject context, System.Xml.Serialization.XmlSchemas schemas, System.Xml.Serialization.XmlSchemaImporter importer, System.CodeDom.CodeCompileUnit compileUnit, System.CodeDom.CodeNamespace mainNamespace, System.Xml.Serialization.CodeGenerationOptions options, System.CodeDom.Compiler.CodeDomProvider codeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImportSchemaType(class System.Xml.Schema.XmlSchemaType type, class System.Xml.Schema.XmlSchemaObject context, class System.Xml.Serialization.XmlSchemas schemas, class System.Xml.Serialization.XmlSchemaImporter importer, class System.CodeDom.CodeCompileUnit compileUnit, class System.CodeDom.CodeNamespace mainNamespace, valuetype System.Xml.Serialization.CodeGenerationOptions options, class System.CodeDom.Compiler.CodeDomProvider codeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportSchemaType (type As XmlSchemaType, context As XmlSchemaObject, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ImportSchemaType(System::Xml::Schema::XmlSchemaType ^ type, System::Xml::Schema::XmlSchemaObject ^ context, System::Xml::Serialization::XmlSchemas ^ schemas, System::Xml::Serialization::XmlSchemaImporter ^ importer, System::CodeDom::CodeCompileUnit ^ compileUnit, System::CodeDom::CodeNamespace ^ mainNamespace, System::Xml::Serialization::CodeGenerationOptions options, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider);" />
      <MemberSignature Language="F#" Value="abstract member ImportSchemaType : System.Xml.Schema.XmlSchemaType * System.Xml.Schema.XmlSchemaObject * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string&#xA;override this.ImportSchemaType : System.Xml.Schema.XmlSchemaType * System.Xml.Schema.XmlSchemaObject * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="schemaImporterExtension.ImportSchemaType (type, context, schemas, importer, compileUnit, mainNamespace, options, codeProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xml.Schema.XmlSchemaType" />
        <Parameter Name="context" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Serialization.XmlSchemas" />
        <Parameter Name="importer" Type="System.Xml.Serialization.XmlSchemaImporter" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="mainNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="options" Type="System.Xml.Serialization.CodeGenerationOptions" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="type">XSD 型です。</param>
        <param name="context">XML 要素の行番号などのスキーマ情報です。</param>
        <param name="schemas">ドキュメント内のスキーマのコレクションです。</param>
        <param name="importer">使用されているインポーターです。</param>
        <param name="compileUnit">XSD の代替コードを生成するための CodeDOM 構造体の追加先である <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
        <param name="mainNamespace">要素用の現在の名前空間です。</param>
        <param name="options">コード コンパイラ上で設定オプションを指定する列挙値のビットごとの組み合わせです。</param>
        <param name="codeProvider">新しいコードの生成に使用される <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />。</param>
        <summary>インポートされたスキーマをチェックし、そのスキーマが割り当てられる CLR 型を指定することによって、生成されるコードを操作できます。</summary>
        <returns>これが割り当てられる CLR 型の名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、<xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%28System.String%2CSystem.String%2CSystem.Xml.Schema.XmlSchemaObject%2CSystem.Xml.Serialization.XmlSchemas%2CSystem.Xml.Serialization.XmlSchemaImporter%2CSystem.CodeDom.CodeCompileUnit%2CSystem.CodeDom.CodeNamespace%2CSystem.Xml.Serialization.CodeGenerationOptions%2CSystem.CodeDom.Compiler.CodeDomProvider%29> メソッドの単純な実装を示しています。 このコードでは、名前空間と名前を確認します。 右側の値が見つかった場合は、生成されたコード内で参照する必要があるカスタムアセンブリ ("順序 .dll") の名前を追加します。 次に、コードで生成された新しい名前空間 ("Microsoft. Samples") を追加します。  
  
 [!code-csharp[SchemaImporterExtensionExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SchemaImporterExtensionExample/CS/SchemaImporterExtensionExample.cs#1)]
 [!code-vb[SchemaImporterExtensionExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SchemaImporterExtensionExample/VB/SchemaImporterExtensionExample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportSchemaType">
      <MemberSignature Language="C#" Value="public virtual string ImportSchemaType (string name, string ns, System.Xml.Schema.XmlSchemaObject context, System.Xml.Serialization.XmlSchemas schemas, System.Xml.Serialization.XmlSchemaImporter importer, System.CodeDom.CodeCompileUnit compileUnit, System.CodeDom.CodeNamespace mainNamespace, System.Xml.Serialization.CodeGenerationOptions options, System.CodeDom.Compiler.CodeDomProvider codeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImportSchemaType(string name, string ns, class System.Xml.Schema.XmlSchemaObject context, class System.Xml.Serialization.XmlSchemas schemas, class System.Xml.Serialization.XmlSchemaImporter importer, class System.CodeDom.CodeCompileUnit compileUnit, class System.CodeDom.CodeNamespace mainNamespace, valuetype System.Xml.Serialization.CodeGenerationOptions options, class System.CodeDom.Compiler.CodeDomProvider codeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType(System.String,System.String,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportSchemaType (name As String, ns As String, context As XmlSchemaObject, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ImportSchemaType(System::String ^ name, System::String ^ ns, System::Xml::Schema::XmlSchemaObject ^ context, System::Xml::Serialization::XmlSchemas ^ schemas, System::Xml::Serialization::XmlSchemaImporter ^ importer, System::CodeDom::CodeCompileUnit ^ compileUnit, System::CodeDom::CodeNamespace ^ mainNamespace, System::Xml::Serialization::CodeGenerationOptions options, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider);" />
      <MemberSignature Language="F#" Value="abstract member ImportSchemaType : string * string * System.Xml.Schema.XmlSchemaObject * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string&#xA;override this.ImportSchemaType : string * string * System.Xml.Schema.XmlSchemaObject * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="schemaImporterExtension.ImportSchemaType (name, ns, context, schemas, importer, compileUnit, mainNamespace, options, codeProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="context" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Serialization.XmlSchemas" />
        <Parameter Name="importer" Type="System.Xml.Serialization.XmlSchemaImporter" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="mainNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="options" Type="System.Xml.Serialization.CodeGenerationOptions" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="name">要素の名前です。</param>
        <param name="ns">要素の名前空間。</param>
        <param name="context">XML 要素の行番号などのスキーマ情報です。</param>
        <param name="schemas">ドキュメント内のスキーマのコレクションです。</param>
        <param name="importer">使用されているインポーターです。</param>
        <param name="compileUnit">XSD の代替コードを生成するための CodeDOM 構造体の追加先である <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
        <param name="mainNamespace">要素用の現在の名前空間です。</param>
        <param name="options">コード コンパイラ上で設定オプションを指定する列挙値のビットごとの組み合わせです。</param>
        <param name="codeProvider">新しいコードの生成に使用される <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />。</param>
        <summary>インポートされたスキーマをチェックし、そのスキーマが割り当てられる CLR 型を指定することによって、生成されるコードを操作できます。</summary>
        <returns>これが割り当てられる CLR 型の名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コードの生成を制御するには、<xref:System.CodeDom> 名前空間で見つかったクラスを使用する必要があります。 詳細については、「CodeDOM および[Codedom クイックリファレンス](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx)[の使用](/dotnet/framework/reflection-and-codedom/using-the-codedom)」を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%28System.String%2CSystem.String%2CSystem.Xml.Schema.XmlSchemaObject%2CSystem.Xml.Serialization.XmlSchemas%2CSystem.Xml.Serialization.XmlSchemaImporter%2CSystem.CodeDom.CodeCompileUnit%2CSystem.CodeDom.CodeNamespace%2CSystem.Xml.Serialization.CodeGenerationOptions%2CSystem.CodeDom.Compiler.CodeDomProvider%29> メソッドの単純な実装を示しています。 このコードでは、名前空間と名前を確認します。 右側の値が見つかった場合は、生成されたコード内で参照する必要があるカスタムアセンブリ ("順序 .dll") の名前を追加します。 次に、コードで生成された新しい名前空間 ("Microsoft. Samples") を追加します。  
  
 [!code-csharp[SchemaImporterExtensionExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SchemaImporterExtensionExample/CS/SchemaImporterExtensionExample.cs#1)]
 [!code-vb[SchemaImporterExtensionExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SchemaImporterExtensionExample/VB/SchemaImporterExtensionExample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
