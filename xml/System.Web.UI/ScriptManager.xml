<Type Name="ScriptManager" FullName="System.Web.UI.ScriptManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="63dcee8091a26fe76fcd4b1142448d8e98bdf526" /><Meta Name="ms.sourcegitcommit" Value="f9576bf8c61e3d46834aeeff50f858359f2a99ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/09/2020" /><Meta Name="ms.locfileid" Value="77105901" /></Metadata><TypeSignature Language="C#" Value="public class ScriptManager : System.Web.UI.Control, System.Web.UI.IPostBackDataHandler, System.Web.UI.IPostBackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ScriptManager extends System.Web.UI.Control implements class System.Web.UI.IPostBackDataHandler, class System.Web.UI.IPostBackEventHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ScriptManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ScriptManager&#xA;Inherits Control&#xA;Implements IPostBackDataHandler, IPostBackEventHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ScriptManager : System::Web::UI::Control, System::Web::UI::IPostBackDataHandler, System::Web::UI::IPostBackEventHandler" />
  <TypeSignature Language="F#" Value="type ScriptManager = class&#xA;    inherit Control&#xA;    interface IPostBackDataHandler&#xA;    interface IPostBackEventHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackDataHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Scripts")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.ScriptManagerDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(EmbeddedResourceFinder), "System.Web.Resources.ScriptManager.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.NonVisualControl</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.ScriptManagerDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", System.ComponentModel.ToolboxItemFilterType.Require)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ASP.NET Ajax スクリプト ライブラリとスクリプト ファイル、部分ページ レンダリング、および Web サービスとアプリケーション サービスのクライアント プロキシ クラス生成を管理します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このトピックの内容:  
  
-   [はじめに](#introduction)  
  
-   [部分ページレンダリング](#partial_page_rendering)  
  
-   [ScriptManager コントロールをマスターページ、ユーザーコントロール、およびその他の子コンポーネントと共に使用する](#using_the_scriptmanager_control_with_master_pages__user_controls__and_other_child_components)  
  
-   [スクリプトの管理と登録](#script_management_and_registration)  
  
-   [Web サービスの参照](#web_service_references)  
  
-   [ローカリゼーション](#localization)  
  
-   [エラー処理](#error_handling)  
  
-   [宣言型の構文](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>はじめに  
 <xref:System.Web.UI.ScriptManager> コントロールは、ASP.NET の Ajax 機能の中心です。 コントロールは、ページ上のすべての ASP.NET Ajax リソースを管理します。 これには、ブラウザーへの Microsoft Ajax ライブラリスクリプトのダウンロードや、<xref:System.Web.UI.UpdatePanel> コントロールを使用して有効になっている部分ページ更新の調整が含まれます。 また、<xref:System.Web.UI.ScriptManager> コントロールでは、次の操作を行うことができます。  
  
-   部分ページ更新と互換性のあるスクリプトを登録します。 スクリプトとコアライブラリの間の依存関係を管理するために、登録するスクリプトは、Microsoft Ajax ライブラリスクリプトの後に読み込まれます。  
  
-   リリースまたはデバッグスクリプトをブラウザーに送信するかどうかを指定します。  
  
-   <xref:System.Web.UI.ScriptManager> コントロールに Web サービスを登録することにより、スクリプトから Web サービスメソッドへのアクセスを提供します。  
  
-   クライアントスクリプトから ASP.NET 認証、ロール、およびプロファイルアプリケーションサービスへのアクセスを提供するには、これらのサービスを <xref:System.Web.UI.ScriptManager> コントロールに登録します。  
  
-   ブラウザーで ECMAScript (JavaScript)、、および[文字列](https://msdn.microsoft.com/library/517a1992-3295-484e-9b9c-07ebfd8fe4db)関数のカルチャ固有の表示を有効にします。  
  
-   <xref:System.Web.UI.ScriptReference> コントロールの <xref:System.Web.UI.ScriptReferenceBase.ResourceUICultures%2A> プロパティを使用して、埋め込みスクリプトファイルまたはスタンドアロンスクリプトファイルのローカライズリソースにアクセスします。  
  
-   <xref:System.Web.UI.IExtenderControl> または <xref:System.Web.UI.IScriptControl> インターフェイスを実装するサーバーコントロールを <xref:System.Web.UI.ScriptManager> コントロールに登録して、クライアントコンポーネントと動作に必要なスクリプトがレンダリングされるようにします。  
  
<a name="partial_page_rendering"></a>   
## <a name="partial-page-rendering"></a>部分ページレンダリング  
 部分ページレンダリングをサポートする ASP.NET ページの機能は、次の要因によって制御されます。  
  
-   <xref:System.Web.UI.ScriptManager> コントロールの <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> プロパティを `true` (既定値) にする必要があります。  
  
-   ページには、少なくとも1つの <xref:System.Web.UI.UpdatePanel> コントロールが必要です。  
  
-   <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> プロパティは `true` (既定値) である必要があります。 <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> プロパティが明示的に設定されていない場合、その値はブラウザーの機能に基づいています。  
  
 <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> プロパティの値は、ページの <xref:System.Web.UI.Control.Init> イベントの実行中またはその前に実行時にオーバーライドできます。 ページの <xref:System.Web.UI.Control.Init> イベントが発生した後にこのプロパティを変更しようとすると、<xref:System.InvalidOperationException> の例外がスローされます。  
  
 部分ページレンダリングがサポートされている場合、<xref:System.Web.UI.ScriptManager> コントロールは、非同期ポストバックと部分ページ更新を有効にするスクリプトをレンダリングします。 更新されるページの領域は、<xref:System.Web.UI.UpdatePanel> コントロールを使用して指定されます。 <xref:System.Web.UI.ScriptManager> コントロールは、非同期ポストバックを処理し、更新する必要があるページの領域のみを更新します。 部分ページレンダリングの詳細については、「[部分ページレンダリングの概要](https://docs.microsoft.com/previous-versions/aspnet/bb386573(v=vs.100))」を参照してください。 更新を引き起こす条件の詳細については、「 [UpdatePanel コントロールの概要](https://docs.microsoft.com/previous-versions/aspnet/bb386454(v=vs.100))」を参照してください。  
  
<a name="using_the_scriptmanager_control_with_master_pages__user_controls__and_other_child_components"></a>   
## <a name="using-the-scriptmanager-control-with-master-pages-user-controls-and-other-child-components"></a>ScriptManager コントロールをマスターページ、ユーザーコントロール、およびその他の子コンポーネントと共に使用する  
 ページに含めることができるのは、その階層内の1つの <xref:System.Web.UI.ScriptManager> コントロールのみです。 入れ子になったページ、ユーザーコントロール、またはコンポーネントのサービスとスクリプトを登録するには、親ページに既に <xref:System.Web.UI.ScriptManager> コントロールがある場合は、<xref:System.Web.UI.ScriptManagerProxy> コントロールを使用します。 詳細については、「[マスターページでの UpdatePanel コントロールの使用](https://msdn.microsoft.com/library/b1c974d5-a6b2-4bb3-a3cc-61dd9dc0e1d6)」を参照してください。  
  
<a name="script_management_and_registration"></a>   
## <a name="script-management-and-registration"></a>スクリプトの管理と登録  
 <xref:System.Web.UI.ScriptManager> コントロールを使用すると、ページの一部としてレンダリングされるスクリプトを登録できます。 <xref:System.Web.UI.ScriptManager> コントロールの登録方法は、次の3つのカテゴリに分けることができます。  
  
-   Microsoft Ajax ライブラリに対するスクリプトの依存関係が維持されることを保証する登録方法。  
  
-   Microsoft Ajax ライブラリに依存せず、<xref:System.Web.UI.UpdatePanel> コントロールと互換性のある登録メソッド。  
  
-   <xref:System.Web.UI.UpdatePanel> コントロールの操作をサポートする登録メソッド。  
  
 ASP.NET で Ajax スクリプトを作成して使用する方法の詳細については、「 [Microsoft Ajax ライブラリを使用したカスタムクライアントスクリプトの作成](https://msdn.microsoft.com/library/285e3a65-b42e-42c5-952d-baf184057899)」を参照してください。  
  
### <a name="registering-script-that-is-dependent-on-the-microsoft-ajax-library"></a>Microsoft Ajax ライブラリに依存するスクリプトの登録  
 次のメソッドを使用すると、Microsoft Ajax ライブラリに対する依存関係が確実に維持されるようにスクリプトファイルを登録できます。  
  
|方法|Definition|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A>|System.object[クライアントオブジェクトを定義](https://msdn.microsoft.com/library/6fba3595-e425-4e48-b4e9-fc16a0272381)するために使用される <xref:System.Web.UI.IScriptControl> インターフェイスを実装するサーバーコントロールを登録します。 <xref:System.Web.UI.ScriptManager> コントロールは、クライアントオブジェクトをサポートするスクリプトをレンダリングします。|  
|<xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A>|System.object[クライアントオブジェクトを定義](https://msdn.microsoft.com/library/6fba3595-e425-4e48-b4e9-fc16a0272381)するために使用される <xref:System.Web.UI.IExtenderControl> インターフェイスを実装するサーバーコントロールを登録します。 <xref:System.Web.UI.ScriptManager> コントロールは、クライアントオブジェクトをサポートするスクリプトをレンダリングします。|  
  
### <a name="registering-partial-page-update-compatible-scripts"></a>部分ページ更新の互換性のあるスクリプトを登録しています  
 Microsoft Ajax ライブラリに依存せず、<xref:System.Web.UI.UpdatePanel> コントロールと互換性のあるスクリプトファイルを登録するには、次のメソッドを使用できます。 これらのメソッドは、<xref:System.Web.UI.ClientScriptManager> コントロールの同様のメソッドに対応しています。 <xref:System.Web.UI.UpdatePanel> コントロール内で使用するスクリプトをレンダリングする場合は、<xref:System.Web.UI.ScriptManager> コントロールのメソッドを呼び出すようにしてください。  
  
|方法|Definition|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A>|JavaScript 配列に値を追加します。 配列が存在しない場合は、作成されます。|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A>|ページの開始 `<form>` タグの後に `script` 要素をレンダリングします。 スクリプトは文字列パラメーターとして指定されます。|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A>|ページの開始 `<form>` タグの後に `script` 要素をレンダリングします。 スクリプトの内容は、`src` 属性を、スクリプトファイルを指す URL に設定することによって指定します。|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A>|ページの開始 `<form>` タグの後に `script` 要素をレンダリングします。 スクリプトの内容は、アセンブリ内のリソース名を使用して指定されます。 `src` 属性には、アセンブリから名前付きスクリプトを取得する HTTP ハンドラーへの呼び出しによって、URL が自動的に設定されます。|  
|<xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A>|指定したコントロールのマークアップにカスタムの名前/値属性ペア (expando) をレンダリングします。|  
|<xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A>|隠しフィールドをレンダリングします。|  
|<xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A>|`form` 要素の `submit` イベントに応答して実行されるスクリプトを登録します。 `onSubmit` 属性は、指定されたスクリプトを参照します。|  
|<xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A>|ページの終了 `</form>` タグの直前にスタートアップスクリプトブロックをレンダリングします。 レンダリングするスクリプトは、文字列パラメーターとして指定されます。|  
  
 メソッドを登録するときに、そのスクリプトの型とキーのペアを指定します。 同じ種類/キーペアのスクリプトが既に登録されている場合、新しいスクリプトは登録されません。 同様に、既に存在する型/リソース名のペアを使用してスクリプトを登録した場合、そのリソースを参照する `script` 要素は再度追加されません。 以前に登録された属性の expando 属性を登録すると、例外がスローされます。 配列値の重複登録が許可されています。  
  
 <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> または <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> メソッドを呼び出す場合は、インライン関数を実行するスクリプトを登録しないようにしてください。 代わりに、アプリケーションのイベントハンドラーやカスタムクラス定義などの関数定義を含むスクリプトを登録します。  
  
### <a name="registration-methods-for-updatepanel-controls"></a>UpdatePanel コントロールの登録方法  
 <xref:System.Web.UI.UpdatePanel> コントロールを使用して、部分ページ更新をカスタマイズするには、次のメソッドを使用します。  
  
|方法|Definition|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A>|コントロールを非同期ポストバックのトリガーとして登録します。|  
|<xref:System.Web.UI.ScriptManager.RegisterDataItem%2A>|部分ページ レンダリング中にカスタム データをコントロールに送信します。|  
|<xref:System.Web.UI.ScriptManager.RegisterDispose%2A>|<xref:System.Web.UI.UpdatePanel> コントロール内にあるコントロールに対して、dispose スクリプトを登録します。 このスクリプトは、<xref:System.Web.UI.UpdatePanel> コントロールが更新または削除されるときに実行されます。 Dispose メソッドは、Microsoft Ajax ライブラリの一部であり、コンポーネントが使用されなくなったときにリソースを解放する必要があるクライアントコンポーネントに使用されます。|  
|<xref:System.Web.UI.ScriptManager.RegisterPostBackControl%2A>|完全なポストバックのトリガーとしてコントロールを登録します。 このメソッドは、他の方法で非同期ポストバックを実行する <xref:System.Web.UI.UpdatePanel> コントロール内のコントロールに使用されます。|  
  
<a name="web_service_references"></a>   
## <a name="web-service-references"></a>Web サービスの参照  
 <xref:System.Web.UI.ServiceReference> オブジェクトを作成し、それを <xref:System.Web.UI.ScriptManager> コントロールの <xref:System.Web.UI.ScriptManager.Services%2A> コレクションに追加することによって、クライアントスクリプトから呼び出される Web サービスを登録できます。 ASP.NET は、<xref:System.Web.UI.ScriptManager.Services%2A> コレクション内の各 <xref:System.Web.UI.ServiceReference> オブジェクトに対してクライアントプロキシオブジェクトを生成します。 プログラムを使用して <xref:System.Web.UI.ServiceReference> オブジェクトを <xref:System.Web.UI.ScriptManager.Services%2A> コレクションに追加して、実行時に Web サービスを登録できます。  
  
 スクリプトで Web サービスにアクセスする方法の詳細については、「 [ASP.NET ajax でクライアントスクリプトに Web サービスを公開](https://msdn.microsoft.com/library/fe3f6e9e-0acd-44c9-bf0f-0a8598fc13b8)する」および「 [ASP.NET Ajax でクライアントスクリプトから Web サービスを呼び出す](https://msdn.microsoft.com/library/fc06c224-f01a-45be-94af-bd71afbc07b0)」を参照してください。  
  
<a name="localization"></a>   
## <a name="localization"></a>ローカリゼーション  
 <xref:System.Web.UI.ScriptManager> コントロールは、表示されるページで、ローカライズされた適切なスクリプトファイルを指す参照を生成します。このファイルは、アセンブリまたはスタンドアロンスクリプトファイルに埋め込まれているスクリプトファイルのいずれかです。  
  
 <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> プロパティが `true`に設定されている場合、<xref:System.Web.UI.ScriptManager> コントロールは、現在のカルチャのローカライズされたリソース (ローカライズされた文字列など) を取得します (存在する場合)。 <xref:System.Web.UI.ScriptManager> コントロールには、ローカライズされたリソースを使用するための次の機能が用意されています。  
  
-   **アセンブリに埋め込まれているスクリプトファイル**。 <xref:System.Web.UI.ScriptManager> コントロールは、ブラウザーに送信するカルチャ固有またはフォールバックカルチャのスクリプトファイルを決定します。 これを行うには、カルチャ固有の <xref:System.Resources.NeutralResourcesLanguageAttribute> アセンブリ属性、アセンブリと共にパッケージ化されたリソース、およびブラウザーの UI カルチャ (存在する場合) を使用します。  
  
-   **スタンドアロンのスクリプトファイル**。 <xref:System.Web.UI.ScriptManager> コントロールは、<xref:System.Web.UI.ScriptReference> オブジェクトの <xref:System.Web.UI.ScriptReferenceBase.ResourceUICultures%2A> プロパティを使用してサポートされる UI カルチャの一覧を定義します。  
  
-   **デバッグモード**。 <xref:System.Web.UI.ScriptManager> コントロールは、デバッグ情報を含むカルチャ固有のスクリプトファイルを表示しようとします。 たとえば、ページがデバッグモードであり、現在のカルチャが en-us に設定されている場合、`scriptname`このコントロールは、ファイルが存在する場合、en-MX などの名前を持つスクリプトファイルをレンダリングします。 ファイルが存在しない場合は、適切なフォールバックカルチャのデバッグファイルがレンダリングされます。  
  
 リソースをローカライズする方法の詳細については、「[コンポーネントライブラリのリソースのローカライズの概要](https://msdn.microsoft.com/library/e6b15435-57c1-4dd1-9bd3-5d4c509685bb)」を参照してください。  
  
<a name="error_handling"></a>   
## <a name="error-handling"></a>エラー処理  
 非同期ポストバック中にページエラーが発生すると、<xref:System.Web.UI.ScriptManager.AsyncPostBackError> イベントが発生します。 サーバー上のエラーをクライアントに送信する方法は、web.config ファイルの <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> プロパティ、<xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> プロパティ、およびカスタムエラーセクションによって異なります。 詳細については、「 [UpdatePanel コントロールのエラー処理のカスタマイズ](https://msdn.microsoft.com/library/e15e7ffb-e4b2-4a89-b99e-16624a5861d0)」を参照してください。  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>宣言型の構文  
  
```  
<asp:ScriptManager  
    AllowCustomErrorsRedirect="True|False"  
    AsyncPostBackErrorMessage="string"  
    AsyncPostBackTimeout="integer"  
    AuthenticationService-Path="uri"  
    EnablePageMethods="True|False"  
    EnablePartialRendering="True|False"  
    EnableScriptGlobalization="True|False"  
    EnableScriptLocalization="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    LoadScriptsBeforeUI="True|False"  
    OnAsyncPostBackError="AsyncPostBackError event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnResolveScriptReference="ResolveScriptReference event handler"  
    OnUnload="Unload event handler"  
    ProfileService-LoadProperties="string"  
    ProfileService-Path="uri"  
    RoleService-LoadRoles="True|False"  
    RoleService-Path="uri"  
    runat="server"  
    ScriptMode="Auto|Inherit|Debug|Release"  
    ScriptPath="string"  
    SkinID="string"  
    SupportsPartialRendering="True|False"  
    Visible="True|False"  
>  
        <AuthenticationService  
            Path="uri"  
        />  
        <ProfileService  
            LoadProperties="string"  
            Path="uri"  
        />  
        <RoleService  
            LoadRoles="True|False"  
            Path="uri"  
        />  
        <Scripts>  
            <asp:ScriptReference  
                Assembly="string"  
                IgnoreScriptPath="True|False"  
                Name="string"  
                NotifyScriptLoaded="True|False"  
                Path="string"  
                ResourceUICultures="string"  
                ScriptMode="Auto|Debug|Inherit|Release"  
            />  
        </Scripts>  
        <Services>  
            <asp:ServiceReference  
                InlineScript="True|False"  
                Path="string"  
            />  
        </Services>  
</asp:ScriptManager>  
```  
  
   
  
## Examples  
 次の例は、<xref:System.Web.UI.ScriptManager> コントロールを使用するさまざまなシナリオを示しています。  
  
 **部分ページ更新を有効にする**  
  
 次の例では、<xref:System.Web.UI.ScriptManager> コントロールを使用して部分ページ更新を有効にする方法を示します。 この例では、<xref:System.Web.UI.WebControls.Calendar> と <xref:System.Web.UI.WebControls.DropDownList> コントロールは <xref:System.Web.UI.UpdatePanel> コントロール内にあります。 既定では、<xref:System.Web.UI.UpdatePanel.UpdateMode%2A> プロパティの値は <xref:System.Web.UI.UpdatePanelUpdateMode.Always>であり、<xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> プロパティの値は `true`です。 したがって、パネルの子コントロールは非同期ポストバックを発生させます。  
  
 [!code-aspx-csharp[System.Web.UI.UpdatePanel#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.UpdatePanel/CS/UpdatePanelExample1CS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.UpdatePanel#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.UpdatePanel/VB/UpdatePanelExample1VB.aspx#1)]  
  
 **部分ページ更新エラーの処理とスクリプトの登録**  
  
 次の例は、部分ページ更新中にカスタムエラー処理を提供する方法を示しています。 既定では、部分ページ更新中にエラーが発生すると、JavaScript のメッセージボックスが表示されます。 この例では、<xref:System.Web.UI.ScriptManager.AsyncPostBackError> イベントのハンドラーを提供し、イベントハンドラーで <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> プロパティを設定することによって、カスタムエラー処理を使用する方法を示します。 また、<xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> プロパティを設定して、部分ページ更新中にエラーが発生したときに web.config ファイルのカスタムエラーセクションを使用する方法を指定することもできます。 この例では、<xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> プロパティの既定値が使用されます。 これは、web.config ファイルに[customErrors](https://msdn.microsoft.com/library/6c3b53ec-00df-4967-b0fb-351c02867650)要素が含まれている場合に、その要素によってエラーがどのように表示されるかが決まることを意味します。 詳細については、「 [CustomErrors 要素 (ASP.NET Settings スキーマ)](https://msdn.microsoft.com/library/288c32e2-df1f-4548-abda-de6b4cb989a6)」を参照してください。  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.OnAsyncPostBackError#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.OnAsyncPostBackError/CS/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.OnAsyncPostBackError#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.OnAsyncPostBackError/VB/default.aspx#1)]  
  
 **ブラウザーに表示される日付と時刻のグローバル化**  
  
 次の例では、クライアントスクリプトがブラウザーにカルチャ固有の日付と時刻を表示できるように <xref:System.Web.UI.ScriptManager.EnableScriptGlobalization%2A> プロパティを設定する方法を示します。 この例では、 [@ Page](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ydy4x04a(v=vs.100))ディレクティブの `Culture` 属性が `auto`に設定されています。 その結果、現在のブラウザーの設定で指定されている最初の言語によって、ページのカルチャと UI カルチャが決まります。 詳細については、「[方法: ASP.NET Web ページのグローバリゼーション用のカルチャおよび UI カルチャを設定する](https://msdn.microsoft.com/library/76091f86-f967-4687-a40f-de87bd8cc9a0)」を参照してください。  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.EnableScriptGlobalization#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.EnableScriptGlobalization/CS/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.EnableScriptGlobalization#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.EnableScriptGlobalization/VB/default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ScriptManagerProxy" />
    <altmember cref="T:System.Web.UI.UpdatePanel" />
    <altmember cref="T:System.Web.UI.ClientScriptManager" />
    <altmember cref="T:System.Web.UI.ScriptMode" />
    <altmember cref="T:System.Web.UI.ScriptReference" />
    <altmember cref="T:System.Web.UI.ServiceReference" />
    <related type="Article" href="https://msdn.microsoft.com/library/fceeb3c5-c59f-46a9-af4f-b0d7155a1efc">WebForms. PageRequestManager クラス</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.ScriptManager" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、ページ、コントロール、および配置情報を追跡するために <xref:System.Web.UI.ScriptManager> コントロールによって使用される内部フィールドを初期化します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHistoryPoint">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>履歴ポイントを作成してブラウザーの履歴スタックに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これらのメソッドオーバーロードを使用すると、サーバーの状態と、必要に応じてブラウザーでの履歴エントリのタイトルを定義できます。 履歴ポイントを作成すると、シリアル化および暗号化されたデータが Web ページの URL に追加され、エントリがブラウザーの履歴スタックに含まれます。 状態データを使用して、後続のサーバーナビゲーションイベントが発生したときにページを再作成できます。 詳細については、「[サーバーコントロールを使用したブラウザーの履歴の管理](https://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (System.Collections.Specialized.NameValueCollection state, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(class System.Collections.Specialized.NameValueCollection state, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.Collections.Specialized.NameValueCollection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (state As NameValueCollection, title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::Collections::Specialized::NameValueCollection ^ state, System::String ^ title);" />
      <MemberSignature Language="F#" Value="member this.AddHistoryPoint : System.Collections.Specialized.NameValueCollection * string -&gt; unit" Usage="scriptManager.AddHistoryPoint (state, title)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="state">状態データを含むキーと値のペアのコレクション。</param>
        <param name="title">この状態のタイトルとしてブラウザーの履歴スタックに追加するテキスト。</param>
        <summary>指定した状態データ コレクションおよび状態タイトルを使用して、履歴ポイントを作成し、ブラウザーの履歴スタックに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、状態データに対して複数のキー/値ペアを保存する場合に、履歴ポイントを作成するために使用します。 履歴ポイントを作成すると、シリアル化および暗号化されたデータが Web ページの URL に追加され、エントリがブラウザーの履歴スタックに含まれます。 `title` パラメーターが `null`場合、Web ページのタイトルは、履歴スタックの状態エントリのタイトルとして使用されます。  
  
 状態データを使用して、後続のサーバーナビゲーションイベントが発生したときにページを再作成できます。 詳細については、「[サーバーコントロールを使用したブラウザーの履歴の管理](https://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (key As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::String ^ key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddHistoryPoint : string * string -&gt; unit" Usage="scriptManager.AddHistoryPoint (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Web ページの状態を識別するキーと値のペアのキー部分。</param>
        <param name="value">Web ページの状態を識別するキーと値のペアの値部分。</param>
        <summary>指定した状態キーおよび状態値を使用して、履歴ポイントを作成し、ブラウザーの履歴スタックに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、状態を識別するために値を保存するだけの場合に、履歴ポイントを作成するために使用します。 履歴ポイントを作成すると、シリアル化および暗号化されたデータが Web ページの URL に追加され、エントリがブラウザーの履歴スタックに含まれます。 Web ページのタイトルは、履歴スタック内の状態エントリのタイトルとして使用されます。  
  
 状態データを使用して、後続のサーバーナビゲーションイベントが発生したときにページを再作成できます。 詳細については、「[サーバーコントロールを使用したブラウザーの履歴の管理](https://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (string key, string value, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(string key, string value, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (key As String, value As String, title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::String ^ key, System::String ^ value, System::String ^ title);" />
      <MemberSignature Language="F#" Value="member this.AddHistoryPoint : string * string * string -&gt; unit" Usage="scriptManager.AddHistoryPoint (key, value, title)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Web ページの状態を識別するキーと値のペアのキー部分。</param>
        <param name="value">Web ページの状態を識別するキーと値のペアの値部分。</param>
        <param name="title">この状態のタイトルとしてブラウザーの履歴スタックに追加するテキスト。</param>
        <summary>指定した状態キー、状態値、および状態タイトルを使用して、履歴ポイントを作成し、ブラウザーの履歴スタックに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、状態の状態とタイトルを識別する値を保存するときに、履歴ポイントを作成します。 履歴ポイントを作成すると、シリアル化および暗号化されたデータが Web ページの URL に追加され、エントリがブラウザーの履歴スタックに含まれます。 `title` パラメーターが `null`場合、Web ページのタイトルは、履歴スタックの状態エントリのタイトルとして使用されます。  
  
 状態データを使用して、後続のサーバーナビゲーションイベントが発生したときにページを再作成できます。 詳細については、「[サーバーコントロールを使用したブラウザーの履歴の管理](https://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AjaxFrameworkAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly AjaxFrameworkAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly AjaxFrameworkAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AjaxFrameworkAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AjaxFrameworkAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ AjaxFrameworkAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AjaxFrameworkAssembly : System.Reflection.Assembly" Usage="System.Web.UI.ScriptManager.AjaxFrameworkAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ページのコンポーネントが使用する AJAX フレームワーク アセンブリを取得します。</summary>
        <value>Ajax フレームワーク アセンブリ。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AjaxFrameworkMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.AjaxFrameworkMode AjaxFrameworkMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.AjaxFrameworkMode AjaxFrameworkMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AjaxFrameworkMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AjaxFrameworkMode As AjaxFrameworkMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::AjaxFrameworkMode AjaxFrameworkMode { System::Web::UI::AjaxFrameworkMode get(); void set(System::Web::UI::AjaxFrameworkMode value); };" />
      <MemberSignature Language="F#" Value="member this.AjaxFrameworkMode : System.Web.UI.AjaxFrameworkMode with get, set" Usage="System.Web.UI.ScriptManager.AjaxFrameworkMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AjaxFrameworkMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Microsoft Ajax クライアント ライブラリのクライアント スクリプトをクライアントに含める方法を示す値を取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.AjaxFrameworkMode" /> 列挙値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.AjaxFrameworkMode%2A> プロパティを使用して、すべての Microsoft Ajax スクリプトファイルを有効にするか、すべての Microsoft Ajax スクリプトファイルを無効にするか、個々のスクリプトファイルを明示的に含めます。  
  
   
  
## Examples  
 次の例では、スクリプトが明示的に指定できることを示すために、<xref:System.Web.UI.ScriptManager.AjaxFrameworkMode%2A> プロパティを `Explicit` に設定する方法を示します。  
  
```  
<asp:ScriptManager ID="sm1" AjaxFrameworkMode="Explicit" runat="server">   
<Scripts>   
    <asp:ScriptReference Name="MicrosoftAjaxCore.js" />   
    <asp:ScriptReference Name="MicrosoftAjaxComponentModel.js" />    
    <asp:ScriptReference Name="MicrosoftAjaxSerialization.js" />   
    <asp:ScriptReference Name="MicrosoftAjaxNetwork.js" />       
</Scripts>   
</asp:ScriptManager>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.AjaxFrameworkMode" />
      </Docs>
    </Member>
    <Member MemberName="AllowCustomErrorsRedirect">
      <MemberSignature Language="C#" Value="public bool AllowCustomErrorsRedirect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowCustomErrorsRedirect" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowCustomErrorsRedirect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowCustomErrorsRedirect { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowCustomErrorsRedirect : bool with get, set" Usage="System.Web.UI.ScriptManager.AllowCustomErrorsRedirect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期ポストバック中にエラーが発生したときに Web.config ファイルのカスタム エラー セクションを使用するかどうかを指定する値を取得または設定します。</summary>
        <value>Web.config ファイルのカスタム エラー設定を使用して非同期ポストバック中のエラー動作を決定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> イベントは、非同期ポストバック中にページエラーが発生した場合に発生します。 サーバーでのエラーがクライアントに送信される方法は、web.config ファイルの <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> プロパティ、<xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> プロパティ、およびカスタムエラーセクションによって異なります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt; AsyncPostBackError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.AsyncPostBackErrorEventArgs&gt; AsyncPostBackError" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AsyncPostBackError As EventHandler(Of AsyncPostBackErrorEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::AsyncPostBackErrorEventArgs ^&gt; ^ AsyncPostBackError;" />
      <MemberSignature Language="F#" Value="member this.AsyncPostBackError : EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt; " Usage="member this.AsyncPostBackError : System.EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期ポストバックの実行中にページ エラーが発生すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> イベントは、非同期ポストバック中にページエラーが発生した場合に発生します。 サーバーでのエラーがクライアントに送信される方法は、web.config ファイルの <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> プロパティ、<xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> プロパティ、およびカスタムエラーセクションによって異なります。  
  
   
  
## Examples  
 次の例では、<xref:System.Web.UI.ScriptManager.AsyncPostBackError> イベントを処理して、<xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> プロパティ (クライアントに送信される) をサーバー例外エラーメッセージに設定する方法を示します。  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.OnAsyncPostBackError(System.Web.UI.AsyncPostBackErrorEventArgs)" />
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackErrorMessage">
      <MemberSignature Language="C#" Value="public string AsyncPostBackErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AsyncPostBackErrorMessage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPostBackErrorMessage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AsyncPostBackErrorMessage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncPostBackErrorMessage : string with get, set" Usage="System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期ポストバック中に未処理のサーバー例外が発生するとクライアントに送信されるエラー メッセージを取得または設定します。</summary>
        <value>エラー メッセージです。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> イベントは、非同期ポストバック中にページエラーが発生した場合に発生します。 サーバーでのエラーがクライアントに送信される方法は、web.config ファイルの <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> プロパティ、<xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> プロパティ、およびカスタムエラーセクションによって異なります。  
  
   
  
## Examples  
 次の例では、<xref:System.Web.UI.ScriptManager.AsyncPostBackError> イベントを処理して、<xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> プロパティ (クライアントに送信される) をサーバー例外エラーメッセージに設定する方法を示します。  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackSourceElementID">
      <MemberSignature Language="C#" Value="public string AsyncPostBackSourceElementID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AsyncPostBackSourceElementID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackSourceElementID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncPostBackSourceElementID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AsyncPostBackSourceElementID { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncPostBackSourceElementID : string" Usage="System.Web.UI.ScriptManager.AsyncPostBackSourceElementID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期ポストバックを発生させたコントロールの一意の ID を取得します。</summary>
        <value>コントロールに ID がある場合は、コントロールの一意の ID。それ以外の場合は、空の文字列 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.AsyncPostBackSourceElementID%2A> プロパティには、非同期ポストバックの原因となったコントロール ID の値が含まれます。これは、次のいずれかになります。  
  
-   <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> プロパティが `true` (既定値) に設定されている、<xref:System.Web.UI.UpdatePanel> コントロール内にあるコントロールからのポストバック。  
  
-   <xref:System.Web.UI.UpdatePanel> コントロールのトリガーであるコントロールからのポストバック。  
  
-   <xref:System.Web.UI.ScriptManager> コントロールの <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> メソッドを呼び出すことによって登録されるコントロールからのポストバック。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackTimeout">
      <MemberSignature Language="C#" Value="public int AsyncPostBackTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AsyncPostBackTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPostBackTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AsyncPostBackTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncPostBackTimeout : int with get, set" Usage="System.Web.UI.ScriptManager.AsyncPostBackTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(90)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>応答がない場合に非同期ポストバックがタイムアウトするまでの時間 (秒単位) を表す値を取得または設定します。</summary>
        <value>タイムアウトを秒単位で表す整数。 既定値は90秒です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationService">
      <MemberSignature Language="C#" Value="public System.Web.UI.AuthenticationServiceManager AuthenticationService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.AuthenticationServiceManager AuthenticationService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AuthenticationService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AuthenticationService As AuthenticationServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::AuthenticationServiceManager ^ AuthenticationService { System::Web::UI::AuthenticationServiceManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationService : System.Web.UI.AuthenticationServiceManager" Usage="System.Web.UI.ScriptManager.AuthenticationService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AuthenticationServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Web.UI.AuthenticationServiceManager" /> インスタンスに関連付けられている <see cref="T:System.Web.UI.ScriptManager" /> オブジェクトを取得します。</summary>
        <value>現在の <see cref="T:System.Web.UI.AuthenticationServiceManager" /> インスタンスに対する <see cref="T:System.Web.UI.ScriptManager" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティによって返される <xref:System.Web.UI.AuthenticationServiceManager> オブジェクトは、ページに登録されている認証サービスを表します。 認証サービスは、<xref:System.Web.UI.ScriptManager> コントロール、または関連する <xref:System.Web.UI.ScriptManagerProxy> コントロールで定義できます。  
  
 ASP.NET 認証サービスを使用することも、カスタム認証サービスを使用することもできます。 次の例に示すように、ページの `asp:ScriptManager` 要素内に `AuthenticationService` 要素を含めることにより、マークアップにカスタムサービスを追加できます。  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <AuthenticationService Path="MyAuthenticationService.asmx" />  
</asp:ScriptManager>  
```  
  
 <xref:System.Web.UI.AuthenticationServiceManager> オブジェクトをプログラムで構成することもできます。 サービスは、ページの <xref:System.Web.UI.Control.PreRender> ライフサイクルステージ中に <xref:System.Web.UI.ScriptManager> コントロールに登録されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientNavigateHandler">
      <MemberSignature Language="C#" Value="public string ClientNavigateHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientNavigateHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ClientNavigateHandler" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientNavigateHandler As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClientNavigateHandler { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ClientNavigateHandler : string with get, set" Usage="System.Web.UI.ScriptManager.ClientNavigateHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントで <see href="https://msdn.microsoft.com/library/79ac04af-18b4-4106-9ab7-9cb10fbd0b93">Sys.Application.navigate</see> イベントを処理するメソッドの名前を取得または設定します。</summary>
        <value>クライアントで [Sys.Application.navigate](https://msdn.microsoft.com/library/79ac04af-18b4-4106-9ab7-9cb10fbd0b93) イベントを処理するメソッドの名前。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositeScript">
      <MemberSignature Language="C#" Value="public System.Web.UI.CompositeScriptReference CompositeScript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.CompositeScriptReference CompositeScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.CompositeScript" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompositeScript As CompositeScriptReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::CompositeScriptReference ^ CompositeScript { System::Web::UI::CompositeScriptReference ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompositeScript : System.Web.UI.CompositeScriptReference" Usage="System.Web.UI.ScriptManager.CompositeScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.CompositeScriptReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web ページをサポートする複合スクリプトへの参照を取得します。</summary>
        <value>複合スクリプトへの参照。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細については、「[クライアントスクリプトと複合スクリプトの組み合わせ](https://msdn.microsoft.com/library/d0f608d0-b4c8-4795-990b-ede68c1239b3)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyPageUrl">
      <MemberSignature Language="C#" Value="public virtual string EmptyPageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EmptyPageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EmptyPageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EmptyPageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EmptyPageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EmptyPageUrl : string with get, set" Usage="System.Web.UI.ScriptManager.EmptyPageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor(typeof(System.Web.UI.Design.UrlEditor), typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>空白の Web ページの URL を取得または設定します。</summary>
        <value>対象 Web ページが空の場合に使用する URL。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.EmptyPageUrl%2A> プロパティは、Ajax ブラウザーの履歴をサポートします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCdn">
      <MemberSignature Language="C#" Value="public bool EnableCdn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCdn" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableCdn" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableCdn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableCdn { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCdn : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableCdn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のページがクライアント スクリプト参照を CDN (Content Delivery Network) パスから読み込むかどうかを判断します。</summary>
        <value>クライアント スクリプト参照が CDN パスから読み込まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> を既に `true` に設定している場合は、このプロパティを `true` に設定しないでください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCdnFallback">
      <MemberSignature Language="C#" Value="public bool EnableCdnFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCdnFallback" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableCdnFallback" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableCdnFallback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableCdnFallback { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCdnFallback : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableCdnFallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>CDN (Content Delivery Network) が使用できない場合にスクリプトのローカル コピーの読み込みを有効にします。</summary>
        <value>フォールバック CDN 値が有効になっている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableHistory">
      <MemberSignature Language="C#" Value="public bool EnableHistory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableHistory" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableHistory" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableHistory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableHistory { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableHistory : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableHistory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web ページが履歴ポイントの管理をサポートしているかどうかを示す値を取得または設定します。</summary>
        <value>Web ページがブラウザーの履歴スタックへの履歴ポイントの追加をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web ページで履歴管理を有効にするには、<xref:System.Web.UI.ScriptManager.EnableHistory%2A> プロパティを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePageMethods">
      <MemberSignature Language="C#" Value="public bool EnablePageMethods { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePageMethods" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnablePageMethods" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePageMethods As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePageMethods { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnablePageMethods : bool with get, set" Usage="System.Web.UI.ScriptManager.EnablePageMethods" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET ページ内のパブリック静的ページ メソッドをクライアント スクリプトから 呼び出せるかどうかを示す値を取得または設定します。</summary>
        <value>ASP.NET ページ上の静的ページ メソッドをクライアント スクリプトから Web メソッドとして呼び出せる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 静的なページメソッドを ASP.NET ページに追加し、それらを Web メソッドとしてマークできます。 これらのメソッドは、Web サービスの一部としてスクリプトから呼び出すことができますが、別の .asmx ファイルを作成する必要はありません。 ページに Web メソッドを作成するには、<xref:System.Web.Services> 名前空間をインポートし、公開する各静的メソッドに <xref:System.Web.Services.WebMethodAttribute> 属性を追加します。 メソッドは public に設定する必要があります。  
  
 詳細については、「 [ASP.NET AJAX でクライアントスクリプトに Web サービスを公開する](https://msdn.microsoft.com/library/fe3f6e9e-0acd-44c9-bf0f-0a8598fc13b8)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePartialRendering">
      <MemberSignature Language="C#" Value="public bool EnablePartialRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePartialRendering" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePartialRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePartialRendering { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnablePartialRendering : bool with get, set" Usage="System.Web.UI.ScriptManager.EnablePartialRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ページの部分レンダリングを有効化する値を取得または設定します。これにより、<see cref="T:System.Web.UI.UpdatePanel" /> コントロールを使用してページの各部を個別に更新できるようになります。</summary>
        <value>部分レンダリングが有効で、ページ全体の更新が実行されない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> プロパティが `true`場合でも、部分ページレンダリングが行われないことがあります。 ブラウザーが部分ページレンダリングをサポートしていないか、または <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> プロパティが `false`に設定されている可能性があります。  
  
 <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> プロパティの値は、ページの <xref:System.Web.UI.Control.Init> イベントの実行中またはその前に実行時にオーバーライドできます。 ページの <xref:System.Web.UI.Control.Init> イベントが発生した後にこのプロパティを変更しようとすると、<xref:System.InvalidOperationException> の例外がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" /> プロパティは、ページの <see cref="E:System.Web.UI.Control.Init" /> イベントが発生した後に設定されます。</exception>
        <altmember cref="T:System.Web.UI.UpdatePanel" />
        <altmember cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />
      </Docs>
    </Member>
    <Member MemberName="EnableScriptGlobalization">
      <MemberSignature Language="C#" Value="public bool EnableScriptGlobalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScriptGlobalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableScriptGlobalization" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableScriptGlobalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableScriptGlobalization { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableScriptGlobalization : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableScriptGlobalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.ScriptManager" /> コントロールが、カルチャ固有の情報の解析および書式設定をサポートするスクリプトをレンダリングするかどうかを示す値を取得または設定します。</summary>
        <value>カルチャ固有の情報を表示できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.EnableScriptGlobalization%2A> プロパティが `true`に設定されている場合、`Date.localeFormat` メソッドなどのグローバル化 ECMAScript (JavaScript) 関数は、カルチャ固有の情報を表示します。 カルチャは、ブラウザー、サーバーコード、または Web サイトの構成ファイルで設定できます。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/69b34e6d-d590-4d03-a763-b7ae54b47d74">クライアントスクリプトを使用した日付のローカライズ</related>
      </Docs>
    </Member>
    <Member MemberName="EnableScriptLocalization">
      <MemberSignature Language="C#" Value="public bool EnableScriptLocalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScriptLocalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableScriptLocalization" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableScriptLocalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableScriptLocalization { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableScriptLocalization : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableScriptLocalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.ScriptManager" /> コントロールが、スクリプト ファイルのローカライズ バージョンをレンダリングするかどうかを示す値を取得または設定します。</summary>
        <value>ローカライズされたスクリプト ファイルがレンダリングされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> プロパティが `true`に設定されている場合、<xref:System.Web.UI.ScriptManager> オブジェクトは、現在のカルチャのスクリプトファイルが存在する場合、そのファイルを取得します。 たとえば、CustomScript という名前のスクリプトファイルがページに指定されているとします。 カルチャが fr-fr に設定されている場合、<xref:System.Web.UI.ScriptManager> オブジェクトは CustomScript.fr という名前のスクリプトファイルの取得を試みます。  
  
> [!NOTE]
>  スクリプトファイルが2回表示されないようにするには、非同期ポストバック中に <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> プロパティを変更しないようにする必要があります。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/e6b15435-57c1-4dd1-9bd3-5d4c509685bb">コンポーネントライブラリのリソースのローカライズの概要</related>
      </Docs>
    </Member>
    <Member MemberName="EnableSecureHistoryState">
      <MemberSignature Language="C#" Value="public bool EnableSecureHistoryState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSecureHistoryState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableSecureHistoryState" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableSecureHistoryState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableSecureHistoryState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableSecureHistoryState : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableSecureHistoryState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>履歴状態文字列を暗号化するかどうかを示す値を取得または設定します。</summary>
        <value>履歴状態文字列を暗号化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  このプロパティは、実稼働 web サイトでは `false` に***設定しないでください。***  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrent">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ScriptManager GetCurrent (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.ScriptManager GetCurrent(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetCurrent(System.Web.UI.Page)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::ScriptManager ^ GetCurrent(System::Web::UI::Page ^ page);" />
      <MemberSignature Language="F#" Value="static member GetCurrent : System.Web.UI.Page -&gt; System.Web.UI.ScriptManager" Usage="System.Web.UI.ScriptManager.GetCurrent page" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page"><see cref="T:System.Web.UI.ScriptManager" /> の取得元のページ インスタンス。</param>
        <summary>指定された <see cref="T:System.Web.UI.ScriptManager" /> オブジェクトの <see cref="T:System.Web.UI.Page" /> インスタンスを取得します。</summary>
        <returns>選択された <see cref="T:System.Web.UI.ScriptManager" /> オブジェクトの現在の <see cref="T:System.Web.UI.Page" /> インスタンス。または、インスタンスが定義されていない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この静的メソッドは、<xref:System.Web.UI.ScriptManager> コントロールがページ上にあるかどうかを判断したり、ID がわからない場合に <xref:System.Web.UI.ScriptManager> コントロールのプロパティとメソッドにアクセスしたりするために使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="page" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredArrayDeclarations">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt; GetRegisteredArrayDeclarations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredArrayDeclaration&gt; GetRegisteredArrayDeclarations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredArrayDeclarations" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredArrayDeclarations () As ReadOnlyCollection(Of RegisteredArrayDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredArrayDeclaration ^&gt; ^ GetRegisteredArrayDeclarations();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredArrayDeclarations : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt;" Usage="scriptManager.GetRegisteredArrayDeclarations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.Page" /> オブジェクトに既に登録済みの ECMAScript (JavaScript) 配列宣言の読み取り専用のコレクションを取得します。</summary>
        <returns>配列宣言を含むジェネリック コレクション。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterArrayDeclaration" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredClientScriptBlocks">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredClientScriptBlocks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredClientScriptBlocks() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredClientScriptBlocks" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredClientScriptBlocks () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredClientScriptBlocks();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredClientScriptBlocks : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;" Usage="scriptManager.GetRegisteredClientScriptBlocks " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.ScriptManager" /> コントロールに既に登録済みのクライアント スクリプト ブロックの読み取り専用のコレクションを取得します。</summary>
        <returns>クライアント スクリプト ブロックを含むジェネリック コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クライアントスクリプトブロックは、<xref:System.Web.UI.UpdatePanel> コントロール内のコントロールで使用するために、<xref:System.Web.UI.ScriptManager> コントロールに登録されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredDisposeScripts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt; GetRegisteredDisposeScripts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredDisposeScript&gt; GetRegisteredDisposeScripts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredDisposeScripts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredDisposeScripts () As ReadOnlyCollection(Of RegisteredDisposeScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredDisposeScript ^&gt; ^ GetRegisteredDisposeScripts();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredDisposeScripts : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt;" Usage="scriptManager.GetRegisteredDisposeScripts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see langword="dispose" /> オブジェクトに既に登録済みの <see cref="T:System.Web.UI.Page" /> スクリプトの読み取り専用のコレクションを取得します。</summary>
        <returns><see langword="dispose" /> スクリプトを含むジェネリック コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.UpdatePanel> コントロールが更新または削除されると、`dispose` スクリプトが実行されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDispose(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredExpandoAttributes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt; GetRegisteredExpandoAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredExpandoAttribute&gt; GetRegisteredExpandoAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredExpandoAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredExpandoAttributes () As ReadOnlyCollection(Of RegisteredExpandoAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredExpandoAttribute ^&gt; ^ GetRegisteredExpandoAttributes();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredExpandoAttributes : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt;" Usage="scriptManager.GetRegisteredExpandoAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.Page" /> オブジェクトに既に登録済みのカスタム (expando) 属性の読み取り専用のコレクションを取得します。</summary>
        <returns>カスタム属性を含むジェネリック コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カスタム属性は、名前と値のペアであり、クライアントスクリプトで読み取りおよび設定できます。  
  
   
  
## Examples  
 <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>  
  
 <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A>  
  
 <xref:System.Web.UI.RegisteredExpandoAttribute>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredHiddenFields">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt; GetRegisteredHiddenFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredHiddenField&gt; GetRegisteredHiddenFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredHiddenFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredHiddenFields () As ReadOnlyCollection(Of RegisteredHiddenField)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredHiddenField ^&gt; ^ GetRegisteredHiddenFields();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredHiddenFields : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt;" Usage="scriptManager.GetRegisteredHiddenFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.Page" /> オブジェクトに既に登録済みの隠しフィールドの読み取り専用のコレクションを取得します。</summary>
        <returns>隠しフィールドを含むジェネリック コレクション。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.RegisteredHiddenField" />
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterHiddenField" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredOnSubmitStatements">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredOnSubmitStatements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredOnSubmitStatements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredOnSubmitStatements" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredOnSubmitStatements () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredOnSubmitStatements();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredOnSubmitStatements : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;" Usage="scriptManager.GetRegisteredOnSubmitStatements " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see langword="onsubmit" /> オブジェクトに既に登録済みの <see cref="T:System.Web.UI.Page" /> ステートメントの読み取り専用のコレクションを取得します。</summary>
        <returns><see langword="onsubmit" /> ステートメントを含むジェネリック コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `onsubmit` ステートメントは、フォームが送信されるときに実行される ECMAScript (JavaScript) です。  
  
   
  
## Examples  
 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A>  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredStartupScripts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredStartupScripts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredStartupScripts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredStartupScripts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredStartupScripts () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredStartupScripts();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredStartupScripts : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;" Usage="scriptManager.GetRegisteredStartupScripts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.Page" /> オブジェクトに既に登録済みの起動スクリプトの読み取り専用のコレクションを取得します。</summary>
        <returns>起動スクリプトを含むジェネリック コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 スタートアップスクリプトは、コントロールが開始されたときに実行されるコントロールに関連付けられたクライアントスクリプトです。  
  
   
  
## Examples  
 <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A>  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>  
  
 <xref:System.Web.UI.ScriptManager.GetRegisteredStartupScripts%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStateString">
      <MemberSignature Language="C#" Value="public string GetStateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetStateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetStateString" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetStateString();" />
      <MemberSignature Language="F#" Value="member this.GetStateString : unit -&gt; string" Usage="scriptManager.GetStateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Web ページの状態を表すキーと値のペアが含まれる文字列を取得します。</summary>
        <returns>Web ページの状態を表すキーと値のペアが含まれる文字列。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDebuggingEnabled">
      <MemberSignature Language="C#" Value="public bool IsDebuggingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDebuggingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsDebuggingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDebuggingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDebuggingEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDebuggingEnabled : bool" Usage="System.Web.UI.ScriptManager.IsDebuggingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアント スクリプト ライブラリのデバッグ バージョンがレンダリングされるかどうかを示す値を取得します。</summary>
        <value>デバッグ モードで現在の要求が実行されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> プロパティは、次のいずれかの条件に該当する場合に `false` を返します。  
  
-   構成ファイルの[deployment](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms228298(v%3dvs.100))要素で、`retail` 属性は `true`に設定されます。 これにより、他のすべての設定が上書きされます。  
  
-   <xref:System.Web.UI.ScriptManager.ScriptMode%2A> プロパティが `Auto` または `Inherit`に設定されており、アプリケーションルートの Web.config ファイルの `compilation` セクションでデバッグが有効になっていません。  
  
-   <xref:System.Web.UI.ScriptManager.ScriptMode%2A> プロパティが `Release` に設定されている。  
  
    > [!NOTE]
    >  [@ Page](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ydy4x04a(v=vs.100))ディレクティブの `debug` 属性は、Ajax 対応の ASP.NET アプリケーションには影響しません。 <xref:System.Web.UI.ScriptManager> コントロールでは、Web.config ファイルの設定とその <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> と <xref:System.Web.UI.ScriptManager.ScriptMode%2A> プロパティを使用して、デバッグスクリプトを表示するかどうかを決定します。  
  
 詳細については、「 [Ajax アプリケーションのデバッグとトレースの概要](https://msdn.microsoft.com/library/92684ea0-7bb4-4a34-9203-3aa6394ce375)」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpContext.IsDebuggingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsInAsyncPostBack">
      <MemberSignature Language="C#" Value="public bool IsInAsyncPostBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInAsyncPostBack" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsInAsyncPostBack" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInAsyncPostBack As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInAsyncPostBack { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInAsyncPostBack : bool" Usage="System.Web.UI.ScriptManager.IsInAsyncPostBack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>部分レンダリング モードで現在のポストバックが実行されているかどうかを示す値を取得します。</summary>
        <value>部分レンダリング モードで現在のポストバックが実行されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> プロパティを <xref:System.Web.UI.Page.IsPostBack%2A> プロパティと組み合わせて使用して、初期ページの読み込み、部分ページ更新、<xref:System.Web.UI.Control.Load>、<xref:System.Web.UI.Page.InitComplete>、または <xref:System.Web.UI.Control.PreRender> イベントの全ページ更新を区別します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
      </Docs>
    </Member>
    <Member MemberName="IsNavigating">
      <MemberSignature Language="C#" Value="public bool IsNavigating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNavigating" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsNavigating" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNavigating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNavigating { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNavigating : bool" Usage="System.Web.UI.ScriptManager.IsNavigating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Web.UI.ScriptManager.Navigate" /> イベントが現在処理されているかどうかを示す値を取得します。</summary>
        <value><see langword="true" /> が処理されている場合は <see cref="E:System.Web.UI.ScriptManager.Navigate" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.Navigate> イベントが発生したかどうかを確認するには、<xref:System.Web.UI.ScriptManager.IsNavigating%2A> プロパティを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadPostData">
      <MemberSignature Language="C#" Value="protected virtual bool LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LoadPostData (postDataKey As String, postCollection As NameValueCollection) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LoadPostData(System::String ^ postDataKey, System::Collections::Specialized::NameValueCollection ^ postCollection);" />
      <MemberSignature Language="F#" Value="abstract member LoadPostData : string * System.Collections.Specialized.NameValueCollection -&gt; bool&#xA;override this.LoadPostData : string * System.Collections.Specialized.NameValueCollection -&gt; bool" Usage="scriptManager.LoadPostData (postDataKey, postCollection)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">コントロールのキー識別子。</param>
        <param name="postCollection">受信するすべてのポスト データのコレクション。</param>
        <summary>ブラウザーからサーバーへポストされたフォーム データを読み取り、非同期ポストバックのソースを判断します。</summary>
        <returns>ポストバックの結果、<see langword="true" /> コントロールの状態が変化した場合は <see cref="T:System.Web.UI.ScriptManager" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.LoadPostData%2A> メソッドは、主にコントロールの開発者が、<xref:System.Web.UI.ScriptManager> コントロールの機能を拡張するために使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
      </Docs>
    </Member>
    <Member MemberName="LoadScriptsBeforeUI">
      <MemberSignature Language="C#" Value="public bool LoadScriptsBeforeUI { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LoadScriptsBeforeUI" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.LoadScriptsBeforeUI" />
      <MemberSignature Language="VB.NET" Value="Public Property LoadScriptsBeforeUI As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LoadScriptsBeforeUI { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.LoadScriptsBeforeUI : bool with get, set" Usage="System.Web.UI.ScriptManager.LoadScriptsBeforeUI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ページ UI のマークアップが読み込まれる前と後のどちらにスクリプトが読み込まれるかを示す値を取得または設定します。</summary>
        <value>UI のマークアップが読み込まれる前にスクリプトが読み込まれる場合は <see langword="true" />。UI のマークアップが読み込まれた後にスクリプトが読み込まれる場合は <see langword="false" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> プロパティは、ページ UI のマークアップに対して、<xref:System.Web.UI.ScriptManager.Scripts%2A> コレクション内のスクリプトがどのように読み込まれるかを決定します。  
  
 <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> プロパティが `true`場合、ページの UI マークアップが読み込まれる前に `script` 要素がレンダリングされます。 このシナリオでは、UI 要素がスクリプトで定義されている場合、UI が読み込まれると完全に機能します。 ただし、インスタンスがまだ作成されていないマークアップ内の UI 要素にスクリプトがアクセスする場合は、エラーが発生することがあります。 UI 要素にアクセスする前に読み込まれるようにするには、`Sys.Application` クラスの `load` イベントを処理します。  
  
 <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> プロパティが `false`場合、ページの UI マークアップがレンダリングされた後に `script` 要素がレンダリングされます。 このシナリオでは、UI の読み込みが速くなりますが、追加の UI 要素を定義するスクリプトの読み込みが完了していない場合は、完全には機能しない可能性があります。  
  
 <xref:System.Web.UI.ScriptManager.EnableCdn%2A> を既に `true` に設定している場合は、このプロパティを `true` に設定しないでください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.Scripts" />
        <altmember cref="T:System.Web.UI.ScriptReference" />
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.HistoryEventArgs&gt; Navigate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.HistoryEventArgs&gt; Navigate" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.Navigate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Navigate As EventHandler(Of HistoryEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::HistoryEventArgs ^&gt; ^ Navigate;" />
      <MemberSignature Language="F#" Value="member this.Navigate : EventHandler&lt;System.Web.UI.HistoryEventArgs&gt; " Usage="member this.Navigate : System.EventHandler&lt;System.Web.UI.HistoryEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.HistoryEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがブラウザーの **[戻る]** ボタンまたは **[進む]** ボタンをクリックしたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーがブラウザーの **[戻る]** ボタンをクリックすると、ブラウザーは以前に表示されていた url に移動します。これには、履歴ポイント状態データを含む url を含めることができます。 Web ページのクライアントコードで、URL に履歴状態データが含まれていることが検出されると、サーバーページへの要求が行われます。 これはポストバックイベントとして機能し、<xref:System.Web.UI.ScriptManagerProxy> サーバーコントロールが `Navigate` イベントを発生させます。 このイベントを処理し、イベントと共に渡された状態データを使用して、Web アプリケーションで必要に応じてページを再作成することができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAsyncPostBackError">
      <MemberSignature Language="C#" Value="protected internal virtual void OnAsyncPostBackError (System.Web.UI.AsyncPostBackErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnAsyncPostBackError(class System.Web.UI.AsyncPostBackErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnAsyncPostBackError(System.Web.UI.AsyncPostBackErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnAsyncPostBackError (e As AsyncPostBackErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnAsyncPostBackError(System::Web::UI::AsyncPostBackErrorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAsyncPostBackError : System.Web.UI.AsyncPostBackErrorEventArgs -&gt; unit&#xA;override this.OnAsyncPostBackError : System.Web.UI.AsyncPostBackErrorEventArgs -&gt; unit" Usage="scriptManager.OnAsyncPostBackError e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.AsyncPostBackErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">エラー イベント データ。</param>
        <summary><see cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> イベントは、非同期ポストバック中にページエラーが発生した場合に発生します。 サーバーでのエラーがクライアントに送信される方法は、web.config ファイルの <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> プロパティ、<xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> プロパティ、およびカスタムエラーセクションによって異なります。  
  
   
  
## Examples  
 次の例では、<xref:System.Web.UI.ScriptManager.AsyncPostBackError> イベントを処理して、<xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> プロパティ (クライアントに送信される) をサーバー例外エラーメッセージに設定する方法を示します。  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="scriptManager.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary><see cref="E:System.Web.UI.Control.Init" /> イベントを発生させ、ページ上に 1 つの <see cref="T:System.Web.UI.ScriptManager" /> コントロールのみ存在することを確認します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">ページ上には、<see cref="T:System.Web.UI.ScriptManager" /> の複数のインスタンスが存在します。</exception>
        <block subset="none" type="overrides"><para>このメソッドをオーバーライドする場合は、部分ページレンダリングに対してスクリプトファイルが正しく処理されるように、基本 <see cref="M:System.Web.UI.ScriptManager.OnInit(System.EventArgs)" /> メソッドを呼び出します。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="scriptManager.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary><see cref="E:System.Web.UI.Control.PreRender" /> イベントを発生させ、部分ページ更新用のスクリプト ファイルおよびサービスを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 DOM の詳細については、World Wide Web コンソーシアム (W3C) Web サイトの[ドキュメントオブジェクトモデル (dom) Level 1 仕様](https://go.microsoft.com/fwlink/?LinkId=73305)を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">部分ページ要求を行うブラウザーは、少なくとも DOM レベル 1.0 はサポートしません。</exception>
        <block subset="none" type="overrides"><para>このメソッドをオーバーライドする場合は、スクリプトブロックとサービスが部分ページレンダリングに対して正しく処理されるように、基本 <see cref="M:System.Web.UI.ScriptManager.OnPreRender(System.EventArgs)" /> メソッドを呼び出します。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET ページのライフサイクルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="OnResolveCompositeScriptReference">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveCompositeScriptReference (System.Web.UI.CompositeScriptReferenceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveCompositeScriptReference(class System.Web.UI.CompositeScriptReferenceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnResolveCompositeScriptReference(System.Web.UI.CompositeScriptReferenceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResolveCompositeScriptReference (e As CompositeScriptReferenceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResolveCompositeScriptReference(System::Web::UI::CompositeScriptReferenceEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnResolveCompositeScriptReference : System.Web.UI.CompositeScriptReferenceEventArgs -&gt; unit&#xA;override this.OnResolveCompositeScriptReference : System.Web.UI.CompositeScriptReferenceEventArgs -&gt; unit" Usage="scriptManager.OnResolveCompositeScriptReference e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.CompositeScriptReferenceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">複合スクリプト参照を表すオブジェクト。</param>
        <summary><see cref="E:System.Web.UI.ScriptManager.ResolveCompositeScriptReference" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResolveScriptReference">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveScriptReference (System.Web.UI.ScriptReferenceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveScriptReference(class System.Web.UI.ScriptReferenceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnResolveScriptReference(System.Web.UI.ScriptReferenceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResolveScriptReference (e As ScriptReferenceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResolveScriptReference(System::Web::UI::ScriptReferenceEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnResolveScriptReference : System.Web.UI.ScriptReferenceEventArgs -&gt; unit&#xA;override this.OnResolveScriptReference : System.Web.UI.ScriptReferenceEventArgs -&gt; unit" Usage="scriptManager.OnResolveScriptReference e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.ScriptReferenceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">現在のスクリプトを表すオブジェクト。</param>
        <summary><see cref="E:System.Web.UI.ScriptManager.ResolveScriptReference" /> コントロールによって管理される各スクリプト参照に対して <see cref="T:System.Web.UI.ScriptManager" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Web.UI.ScriptManager.OnPreRender%2A> のイベントハンドラーによって、<xref:System.Web.UI.ScriptManager.Scripts%2A> コレクション内の <xref:System.Web.UI.ScriptReference> ごとに1回呼び出されます。  
  
 <xref:System.Web.UI.ScriptManager.ResolveScriptReference> イベントは、スクリプトエントリが重複して解決された後に発生します。  
  
 このメソッドをオーバーライドして、ポストバックまたは部分ページ更新時の個々のスクリプトブロックの動作に影響を与えます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProfileService">
      <MemberSignature Language="C#" Value="public System.Web.UI.ProfileServiceManager ProfileService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ProfileServiceManager ProfileService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ProfileService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProfileService As ProfileServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ProfileServiceManager ^ ProfileService { System::Web::UI::ProfileServiceManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProfileService : System.Web.UI.ProfileServiceManager" Usage="System.Web.UI.ScriptManager.ProfileService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ProfileServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Web.UI.ProfileServiceManager" /> インスタンスに関連付けられている <see cref="T:System.Web.UI.ScriptManager" /> オブジェクトを取得します。</summary>
        <value>現在の <see cref="T:System.Web.UI.ProfileServiceManager" /> インスタンスに対する <see cref="T:System.Web.UI.ScriptManager" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティによって返される <xref:System.Web.UI.ProfileServiceManager> オブジェクトは、ページに登録されているプロファイルサービスを表します。 プロファイルサービスは、<xref:System.Web.UI.ScriptManager> コントロール、または関連付けられた <xref:System.Web.UI.ScriptManagerProxy> コントロールで定義できます。  
  
 ASP.NET profile service を使用することも、カスタムプロファイルサービスを使用することもできます。 次の例に示すように、ページの `asp:ScriptManager` 要素内に `ProfileService` 要素を含めることにより、マークアップにカスタムサービスを追加できます。  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <ProfileService LoadProperties="propertyA,propertyB"  
    Path="MyProfileService.asmx" />  
</asp:ScriptManager>  
```  
  
 <xref:System.Web.UI.ProfileServiceManager> オブジェクトをプログラムで構成することもできます。 サービスは、ページの <xref:System.Web.UI.Control.PreRender> ライフサイクルステージ中に <xref:System.Web.UI.ScriptManager> コントロールに登録されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostBackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostBackEvent(System::String ^ eventArgument);" />
      <MemberSignature Language="F#" Value="abstract member RaisePostBackEvent : string -&gt; unit&#xA;override this.RaisePostBackEvent : string -&gt; unit" Usage="scriptManager.RaisePostBackEvent eventArgument" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Web ページの履歴状態を表すキーと値のペアが含まれる文字列。</param>
        <summary><see cref="T:System.Web.UI.ScriptManager" /> コントロールによって発生させられたポストバック イベントを処理し、Web ページの履歴状態を読み込みます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RaisePostDataChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostDataChangedEvent ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostDataChangedEvent();" />
      <MemberSignature Language="F#" Value="abstract member RaisePostDataChangedEvent : unit -&gt; unit&#xA;override this.RaisePostDataChangedEvent : unit -&gt; unit" Usage="scriptManager.RaisePostDataChangedEvent " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>サーバーへのポストバック時に、<see cref="T:System.Web.UI.ScriptManager" /> コントロールのイベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.RaisePostDataChangedEvent%2A> メソッドは、主にコントロールの開発者が、<xref:System.Web.UI.ScriptManager> コントロールの機能を拡張するために使用します。 <xref:System.Web.UI.ScriptManager> コントロールの既定の実装では、イベントは発生しません。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterArrayDeclaration">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Web.UI.ScriptManager" /> コントロール内のコントロールで使用できるように ECMAScript (JavaScript) 配列宣言を <see cref="T:System.Web.UI.UpdatePanel" /> コントロールに登録し、配列をページに追加します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public static void RegisterArrayDeclaration (System.Web.UI.Control control, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterArrayDeclaration(class System.Web.UI.Control control, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterArrayDeclaration(System::Web::UI::Control ^ control, System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberSignature Language="F#" Value="static member RegisterArrayDeclaration : System.Web.UI.Control * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterArrayDeclaration (control, arrayName, arrayValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">配列を登録するコントロール。</param>
        <param name="arrayName">登録する配列の名前。</param>
        <param name="arrayValue">登録する配列値。</param>
        <summary><see cref="T:System.Web.UI.ScriptManager" /> コントロール内のコントロールで使用できるように ECMAScript (JavaScript) 配列宣言を <see cref="T:System.Web.UI.UpdatePanel" /> コントロールに登録し、配列をページに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 部分ページレンダリングと互換性があり、Microsoft Ajax ライブラリの依存関係がないクライアントスクリプト配列を登録するには、<xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> メソッドを使用します。 このメソッドは、更新される <xref:System.Web.UI.UpdatePanel> コントロール内にあるコントロールを `control` が表す場合に、配列を登録します。 非同期ポストバックが発生するたびに配列を登録するには、このメソッドの <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%28System.Web.UI.Page%2CSystem.String%2CSystem.String%29> オーバーロードを使用します。  
  
 部分ページ更新に関連しない配列を登録する場合、および初期ページレンダリング中に配列を1回だけ登録する場合は、<xref:System.Web.UI.ClientScriptManager> クラスの <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> メソッドを使用します。 <xref:System.Web.UI.ClientScriptManager> オブジェクトへの参照は、ページの <xref:System.Web.UI.Page.ClientScript%2A> プロパティから取得できます。  
  
 <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> メソッドは、`arrayName` パラメーターで指定された名前の配列が既に登録されているかどうかを判断します。 その場合、メソッドは `arrayValue`で指定された値を追加します。 登録される配列は <xref:System.Collections.ArrayList> クラスに基づいているため、重複が許可されます。 `arrayName` に名前が付けられた登録済みの配列が存在しない場合は、配列が作成され、`arrayValue` の値が追加されます。  
  
 配列に文字列リテラルを含めるには、`arrayValue`で単一引用符 (') またはエスケープされた二重引用符 (\\") を使用します。  
  
 JavaScript では、コンマ (,) が配列内の区切り記号として扱われることに注意してください。 `arrayValue`でコンマ区切りの文字列を渡すことによって、複数の配列値を指定できます。 `arrayValue` で2つの項目をコンマで区切ることは、項目ごとに1回ずつ、<xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> メソッドを2回呼び出すことと同じです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="arrayName" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Page,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public static void RegisterArrayDeclaration (System.Web.UI.Page page, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterArrayDeclaration(class System.Web.UI.Page page, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Page,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterArrayDeclaration(System::Web::UI::Page ^ page, System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberSignature Language="F#" Value="static member RegisterArrayDeclaration : System.Web.UI.Page * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterArrayDeclaration (page, arrayName, arrayValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">配列を登録するページ オブジェクト。</param>
        <param name="arrayName">登録する配列の名前。</param>
        <param name="arrayValue">登録する配列値。</param>
        <summary><see cref="T:System.Web.UI.ScriptManager" /> コントロール内のコントロールで使用できるように ECMAScript (JavaScript) 配列宣言を <see cref="T:System.Web.UI.UpdatePanel" /> コントロールに登録し、配列をページに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 部分ページレンダリングと互換性があり、Microsoft Ajax ライブラリの依存関係がないクライアントスクリプト配列を登録するには、<xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> メソッドを使用します。 このメソッドは、非同期ポストバックが発生するたびに配列を登録します。 <xref:System.Web.UI.UpdatePanel> コントロール内のコントロールに配列を登録して、パネルが更新されたときにのみ配列が登録されるようにするには、このメソッドの <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%28System.Web.UI.Control%2CSystem.String%2CSystem.String%29> オーバーロードを使用します。  
  
 部分ページ更新に関連しない配列を登録する場合、および初期ページレンダリング中に配列を1回だけ登録する場合は、<xref:System.Web.UI.ClientScriptManager> クラスの <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> メソッドを使用します。 <xref:System.Web.UI.ClientScriptManager> オブジェクトへの参照は、ページの <xref:System.Web.UI.Page.ClientScript%2A> プロパティから取得できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="arrayName" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAsyncPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterAsyncPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterAsyncPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterAsyncPostBackControl(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member RegisterAsyncPostBackControl : System.Web.UI.Control -&gt; unit&#xA;override this.RegisterAsyncPostBackControl : System.Web.UI.Control -&gt; unit" Usage="scriptManager.RegisterAsyncPostBackControl control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">非同期ポストバック用に登録するコントロール。</param>
        <summary>コントロールを非同期ポストバックのトリガーとして登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> メソッドを使用すると、Web サーバーコントロールをトリガーとして登録し、同期ポストバックではなく非同期ポストバックを実行することができます。 <xref:System.Web.UI.UpdatePanel> コントロールの <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> プロパティが `true` (既定) に設定されている場合、<xref:System.Web.UI.UpdatePanel> コントロール内のポストバックコントロールは、非同期ポストバックコントロールとして自動的に登録されます。  
  
 <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> メソッドを使用して、非同期ポストバックのトリガーとして <xref:System.Web.UI.UpdatePanel> コントロールの外部にコントロールを登録したり、更新パネルの内容を更新したりすることができます。 プログラムによって <xref:System.Web.UI.UpdatePanel> コントロールを更新するには、<xref:System.Web.UI.UpdatePanel.Update%2A> メソッドを呼び出します。  
  
 <xref:System.Web.UI.UpdatePanel> コントロールの `Triggers` 要素を使用して、トリガーを宣言によって追加できます。 Visual Studio で、デザイナーの **[Updatepaneltrigger コレクションエディター]** ダイアログボックスを使用します。  
  
   
  
## Examples  
 次の例では、<xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> メソッドを呼び出して、<xref:System.Web.UI.UpdatePanel> コントロールのコンテンツが更新されるように <xref:System.Web.UI.WebControls.Button> コントロールを登録する方法を示します。 <xref:System.Web.UI.WebControls.Button> コントロールが <xref:System.Web.UI.UpdatePanel> コントロールの内部にありません。 `Button1` と `Button2`の2つのボタンが表示されます。 `Button1` によってパネルの内容が更新され、`Button2` ページ全体が更新されます。  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/CS/ScriptManager1CS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/VB/ScriptManager1VB.aspx#1)]  
  
 次の例では、<xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> メソッドを呼び出して、<xref:System.Web.UI.UpdatePanel> コントロールのコンテンツを更新するようにユーザーコントロールを登録する方法を示します。 最初の例では、ユーザーコントロールを使用してページを表示しています。 2番目の例は、ユーザーコントロールを示しています。  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/CS/ScriptManager2CS.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/VB/ScriptManager2VB.aspx#2)]  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">ページは、非同期ポストバック コントロールとして登録されます。

または

登録されたコントロールは、<see cref="T:System.Web.UI.INamingContainer" /> インターフェイス、<see cref="T:System.Web.UI.IPostBackDataHandler" /> インターフェイス、または <see cref="T:System.Web.UI.IPostBackEventHandler" /> インターフェイスを実装しません。</exception>
        <altmember cref="P:System.Web.UI.UpdatePanel.Triggers" />
        <altmember cref="M:System.Web.UI.UpdatePanel.Update" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptBlock">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Web.UI.ScriptManager" /> コントロール内のコントロールで使用できるようにクライアント スクリプト ブロックを <see cref="T:System.Web.UI.UpdatePanel" /> コントロールに登録し、スクリプト ブロックをページに追加します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptBlock (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptBlock(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptBlock(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptBlock : System.Web.UI.Control * Type * string * string * bool -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptBlock (control, type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">クライアント スクリプト ブロックを登録するコントロール。</param>
        <param name="type">クライアント スクリプト ブロックの型。 このパラメーターは、通常、<see langword="typeof" /> 演算子 (C#) または <see langword="GetType" /> 演算子 (Visual Basic) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="key">スクリプト ブロックの一意の識別子。</param>
        <param name="script">スクリプト。</param>
        <param name="addScriptTags">スクリプト ブロックを <see langword="true" /> タグと <see langword="&lt;script&gt;" /> タグで囲む場合は <see langword="&lt;/script&gt;" />。それ以外の場合は <see langword="false" />。</param>
        <summary><see cref="T:System.Web.UI.ScriptManager" /> コントロール内のコントロールで使用できるようにクライアント スクリプト ブロックを <see cref="T:System.Web.UI.UpdatePanel" /> コントロールに登録し、スクリプト ブロックをページに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 部分ページレンダリングと互換性があり、Microsoft Ajax ライブラリの依存関係がないクライアントスクリプトブロックを登録するには、<xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> メソッドを使用します。 このメソッドを使用して登録されたクライアントスクリプトブロックがページに送信されるのは、`control` が、更新される <xref:System.Web.UI.UpdatePanel> コントロール内のコントロールを表している場合のみです。 非同期ポストバックが発生するたびにスクリプトブロックを登録するには、このメソッドの <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> オーバーロードを使用します。  
  
 部分ページ更新に関連しないスクリプトブロックを登録する場合、および最初のページレンダリング中にスクリプトブロックを1回だけ登録する場合は、<xref:System.Web.UI.ClientScriptManager> クラスの <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッドを使用します。 <xref:System.Web.UI.ClientScriptManager> オブジェクトへの参照は、ページの <xref:System.Web.UI.Page.ClientScript%2A> プロパティから取得できます。  
  
 `addScriptTags` が `true`場合、<xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> メソッドによって、スクリプトブロックの周囲に `<script>` タグが追加されます。 特定の `<script>` タグの属性を設定する場合など、`<script>` タグを自分で作成する場合は、`false` を渡します。 `addScriptTags` が `false`、`script` パラメーターに複数のスクリプトブロックが含まれている場合は、例外がスローされます。  
  
 <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> メソッドは、`<form>` タグの開始後にスクリプトブロックをページに追加します。 スクリプトブロックは、登録されている順序と同じ順序で出力されるとは限りません。 スクリプトブロックの順序が重要な場合は、スクリプトブロックを1つの文字列に連結し (たとえば、<xref:System.Text.StringBuilder> オブジェクトを使用)、1つのクライアントスクリプトブロックとして登録します。  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterClientScriptBlock#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/CS/ScriptManager_RegisterClientScriptBlockCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterClientScriptBlock#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/vb/ScriptManager_RegisterClientScriptBlockVB.aspx#1)]  
  
 [!code-xml[System.Web.UI.ScriptManager.RegisterClientScriptBlock#2](~/samples/snippets/common/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/Common/App_Data/Contacts.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント スクリプト ブロックの <paramref name="type" /> が <see langword="null" /> です。  
  
または 
スクリプト ブロックを登録するコントロールが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">スクリプト ブロックを登録するコントロールがページのコントロール ツリー内にありません。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptBlock (System.Web.UI.Page page, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptBlock(class System.Web.UI.Page page, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptBlock(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptBlock : System.Web.UI.Page * Type * string * string * bool -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptBlock (page, type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">クライアント スクリプト ブロックを登録するページ オブジェクト。</param>
        <param name="type">クライアント スクリプト ブロックの型。 このパラメーターは、通常、<see langword="typeof" /> 演算子 (C#) または <see langword="GetType" /> 演算子 (Visual Basic) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="key">スクリプト ブロックの一意の識別子。</param>
        <param name="script">登録するスクリプト。</param>
        <param name="addScriptTags">スクリプト ブロックを <see langword="true" /> タグと <see langword="&lt;script&gt;" /> タグで囲む場合は <see langword="&lt;/script&gt;" />。それ以外の場合は <see langword="false" />。</param>
        <summary><see cref="T:System.Web.UI.ScriptManager" /> コントロール内のコントロールで使用できるようにクライアント スクリプト ブロックを <see cref="T:System.Web.UI.UpdatePanel" /> コントロールに登録し、スクリプト ブロックをページに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用してスクリプトブロックを登録すると、非同期ポストバックが発生するたびにスクリプトがレンダリングされます。 <xref:System.Web.UI.UpdatePanel> コントロール内にあるコントロールのスクリプトブロックを登録して、<xref:System.Web.UI.UpdatePanel> コントロールが更新されたときにのみスクリプトが登録されるようにするには、このメソッドの <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> オーバーロードを使用します。  
  
 部分ページ更新に関連しないスクリプトブロックを登録する場合、および最初のページレンダリング中にスクリプトブロックを1回だけ登録する場合は、<xref:System.Web.UI.ClientScriptManager> クラスの <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッドを使用します。 <xref:System.Web.UI.ClientScriptManager> オブジェクトへの参照は、ページの <xref:System.Web.UI.Page.ClientScript%2A> プロパティから取得できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">スクリプト ブロックの <paramref name="type" /> が <see langword="null" /> です。  
  
または 
スクリプト ブロックを登録するページが <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptInclude">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Web.UI.ScriptManager" /> コントロール内のコントロールで使用できるようにクライアント スクリプト ファイルを <see cref="T:System.Web.UI.UpdatePanel" /> コントロールに登録し、スクリプト ファイルの参照をページに追加します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptInclude (System.Web.UI.Control control, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptInclude(class System.Web.UI.Control control, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptInclude(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptInclude : System.Web.UI.Control * Type * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptInclude (control, type, key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">クライアント スクリプト ファイルを登録するコントロール。</param>
        <param name="type">クライアント スクリプト ファイルの型。 このパラメーターは、通常、typeof 演算子 (C#) または GetType 演算子 (Visual Basic) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="key">スクリプト ファイルの一意の識別子。</param>
        <param name="url">スクリプト ファイルの URL。</param>
        <summary><see cref="T:System.Web.UI.ScriptManager" /> コントロール内のコントロールで使用できるようにクライアント スクリプト ファイルを <see cref="T:System.Web.UI.UpdatePanel" /> コントロールに登録し、スクリプト ファイルの参照をページに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 部分ページ更新に参加しているページまたはページの一部に対してクライアントスクリプトファイルを登録するには、<xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> メソッドを使用します。 このメソッドを使用して登録されたクライアントスクリプトファイルは、`control` が、更新されている <xref:System.Web.UI.UpdatePanel> コントロール内のコントロールを表している場合にのみページに送信されます。 非同期ポストバックが発生するたびにスクリプトファイルを登録するには、このメソッドの <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%29> オーバーロードを使用します。  
  
 部分ページ更新に関連しないスクリプトブロックを登録する場合、および最初のページレンダリング中にスクリプトブロックを1回だけ登録する場合は、<xref:System.Web.UI.ClientScriptManager> クラスの <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッドを使用します。 <xref:System.Web.UI.ClientScriptManager> オブジェクトへの参照は、ページの <xref:System.Web.UI.Page.ClientScript%2A> プロパティから取得できます。  
  
 <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> メソッドは、開始タグに `src` 属性が含まれている `script` 要素を表示することによって、ページにクライアントスクリプトファイルを登録します。 `url` パラメーターは、`src` 属性を設定するために使用されます。 Url を解決するには、<xref:System.Web.UI.Control.ResolveClientUrl%2A> メソッドを使用します。 このメソッドは、パスを解決するために呼び出される URL のコンテキストを使用します。  
  
 <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> と <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> の両方のメソッドで、スクリプトファイルがブラウザーに表示されます。 同じ種類およびキー (スクリプトファイルの場合) または同じ型とリソース名 (埋め込みリソースの場合) を持つスクリプトが既に表示されている場合、スクリプトは再びレンダリングされません。  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterClientScriptInclude#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptInclude/CS/ScriptManager_RegisterClientScriptIncludeCS.aspx#1)]  
  
 [!code-javascript[System.Web.UI.ScriptManager.RegisterClientScriptInclude#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptInclude/CS/scripts/script_alertdiv.js#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント スクリプト ファイルの <paramref name="type" /> が <see langword="null" /> です。  
  
または 
スクリプト ファイルを登録するコントロールが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">スクリプト ファイルを登録するコントロールがページのコントロール ツリー内にありません。  
  
または 
 <paramref name="url" /> は <see langword="null" /> です。  
  
または 
 <paramref name="url" /> が空です。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Page,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptInclude (System.Web.UI.Page page, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptInclude(class System.Web.UI.Page page, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Page,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptInclude(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptInclude : System.Web.UI.Page * Type * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptInclude (page, type, key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">クライアント スクリプト ファイルを登録するページ オブジェクト。</param>
        <param name="type">クライアント スクリプト ファイルの型。 このパラメーターは、通常、typeof 演算子 (C#) または GetType 演算子 (Visual Basic) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="key">スクリプト ファイルの一意の識別子。</param>
        <param name="url">スクリプト ファイルの URL。</param>
        <summary>非同期ポストバックが発生するたびにクライアント スクリプトを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録し、スクリプト ファイルの参照をページに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドにスクリプトファイルを登録すると、非同期ポストバックが発生するたびにスクリプトがレンダリングされます。 <xref:System.Web.UI.UpdatePanel> コントロール内にあるコントロールのスクリプトファイルを登録して、<xref:System.Web.UI.UpdatePanel> コントロールが更新されたときにのみスクリプトが登録されるようにするには、このメソッドの <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%29> オーバーロードを使用します。  
  
 部分ページ更新に関連しないスクリプトブロックを登録する場合、および最初のページレンダリング中にスクリプトブロックを1回だけ登録する場合は、<xref:System.Web.UI.ClientScriptManager> クラスの <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッドを使用します。 <xref:System.Web.UI.ClientScriptManager> オブジェクトへの参照は、ページの <xref:System.Web.UI.Page.ClientScript%2A> プロパティから取得できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント スクリプト ファイルの <paramref name="type" /> が <see langword="null" /> です。  
  
または 
スクリプト ファイルを登録するページが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="url" /> は <see langword="null" /> です。  
  
または 
 <paramref name="url" /> が空です。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptResource">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>部分ページ レンダリングに関係するコントロールで使用できるように、アセンブリに埋め込まれているクライアント スクリプトを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptResource (System.Web.UI.Control control, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptResource(class System.Web.UI.Control control, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptResource(System::Web::UI::Control ^ control, Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptResource : System.Web.UI.Control * Type * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptResource (control, type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">スクリプトを登録するコントロール。</param>
        <param name="type">クライアント スクリプトの型。 このパラメーターは、通常、typeof 演算子 (C#) または GetType 演算子 (Visual Basic) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="resourceName">リソースの識別子。</param>
        <summary>部分ページ レンダリングに関係するコントロールで使用できるように、アセンブリに埋め込まれているクライアント スクリプトを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> メソッドを使用して、部分ページレンダリングと互換性のあるスクリプトを登録します。このスクリプトには、Microsoft Ajax ライブラリの依存関係はありません。 このメソッドを使用して登録されたスクリプトリソースは、`control` が、更新された <xref:System.Web.UI.UpdatePanel> コントロール内にあるコントロールを表している場合にのみ登録されます。 非同期ポストバックが発生するたびにスクリプトを登録するには、このメソッドの <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> オーバーロードを使用します。  
  
 部分ページ更新に関連しないスクリプトブロックを登録する場合、および最初のページレンダリング中にスクリプトブロックを1回だけ登録する場合は、<xref:System.Web.UI.ClientScriptManager> クラスの <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッドを使用します。 <xref:System.Web.UI.ClientScriptManager> オブジェクトへの参照は、ページの <xref:System.Web.UI.Page.ClientScript%2A> プロパティから取得できます。  
  
 <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> メソッドは、HTTP ハンドラーを介してアセンブリのリソースにアクセスするときに使用されます。 このメソッドには、リソース URL の内容が `script` 要素に含まれています。  
  
 <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> と <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> メソッドの両方で、スクリプトファイルがブラウザーに読み込まれます。 同じ種類およびキー (スクリプトファイルの場合) または同じ型とリソース名 (埋め込みリソースの場合) を持つスクリプトが既に読み込まれている場合、スクリプトは再読み込みされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント リソースの <paramref name="type" /> が <see langword="null" /> です。  
  
または 
スクリプトを登録するコントロールが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">スクリプトを登録するコントロールがページのコントロール ツリー内にありません。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Page,System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptResource (System.Web.UI.Page page, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptResource(class System.Web.UI.Page page, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Page,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptResource(System::Web::UI::Page ^ page, Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptResource : System.Web.UI.Page * Type * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptResource (page, type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">スクリプトを登録するページ オブジェクト。</param>
        <param name="type">クライアント スクリプトの型。 このパラメーターは、通常、typeof 演算子 (C#) または GetType 演算子 (Visual Basic) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="resourceName">リソースの識別子。</param>
        <summary>ポストバックが発生するたびに、アセンブリに埋め込まれているクライアント スクリプト ファイルを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドにスクリプトファイルを登録すると、非同期ポストバックが発生するたびにスクリプトがレンダリングされます。 <xref:System.Web.UI.UpdatePanel> コントロール内にあるコントロールのスクリプトを登録して、<xref:System.Web.UI.UpdatePanel> コントロールが更新されたときにのみスクリプトが登録されるようにするには、このメソッドの <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%29> オーバーロードを使用します。  
  
 部分ページ更新に関連しないスクリプトブロックを登録する場合、および最初のページレンダリング中にスクリプトブロックを1回だけ登録する場合は、<xref:System.Web.UI.ClientScriptManager> クラスの <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッドを使用します。 <xref:System.Web.UI.ClientScriptManager> オブジェクトへの参照は、ページの <xref:System.Web.UI.Page.ClientScript%2A> プロパティから取得できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント リソースの <paramref name="type" /> が <see langword="null" /> です。  
  
または 
スクリプトを登録するページが <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterDataItem">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>部分ページ レンダリング中にカスタム データをコントロールに送信します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterDataItem">
      <MemberSignature Language="C#" Value="public void RegisterDataItem (System.Web.UI.Control control, string dataItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDataItem(class System.Web.UI.Control control, string dataItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDataItem(System::Web::UI::Control ^ control, System::String ^ dataItem);" />
      <MemberSignature Language="F#" Value="member this.RegisterDataItem : System.Web.UI.Control * string -&gt; unit" Usage="scriptManager.RegisterDataItem (control, dataItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="dataItem" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">データを受け取るコントロール。</param>
        <param name="dataItem">コントロールに送信されるデータ。</param>
        <summary>部分ページ レンダリング中にカスタム データをコントロールに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データを受信するコントロールが <xref:System.Web.UI.UpdatePanel> コントロール内にあるかどうかに関係なく、非同期ポストバック中にサーバーからクライアントにデータを送信するには、<xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> メソッドを使用します。  
  
 <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> メソッドは、非同期ポストバック中にのみ呼び出すことができます。 ポストバックが非同期かどうかを判断するには、<xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> プロパティを使用します。 このメソッドは、`false`に設定されている `isJsonSerialized` という名前のパラメーターを受け取るオーバーロードを呼び出します。 `isJsonSerialized` パラメーターが `false`に設定されている場合、文字列は JavaScript Object Notation (JSON) としてシリアル化されません。 JSON 形式の詳細については、JSON Web サイトの[概要](https://go.microsoft.com/fwlink/?LinkId=77297)に関するページを参照してください。  
  
 <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> メソッドに登録されているデータ項目には、`PageRequestManager` オブジェクトの `pageLoading`、`pageLoaded`、および `endRequest` イベント時にクライアントスクリプトでアクセスできます。 これらのイベントを処理すると、カスタムデータはイベント引数オブジェクトで渡されます。 たとえば、`pageLoading` イベントのハンドラーを指定した場合、カスタムデータは、プロパティを公開する `PageLoadingEventArgs` クラスに渡されます。  
  
   
  
## Examples  
 次の例は、非同期ポストバック中にページ上の2つの <xref:System.Web.UI.WebControls.Label> コントロールにデータを送信する方法を示しています。 <xref:System.Web.UI.WebControls.Label> コントロールが <xref:System.Web.UI.UpdatePanel> コントロールの内部にありません。  
  
> [!NOTE]
>  この例で送信されるデータは、例示のみを目的としています。 実際のアプリケーションでは、<xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> メソッドを使用して、サーバーからカスタムデータを送信します。  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/CS/ScriptManagerRegisterDataItemCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/VB/ScriptManagerRegisterDataItemVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" /> メソッドはポストバックの際に呼び出されます。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="dataItem" /> は <paramref name="control" /> に既に登録されています。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDataItem">
      <MemberSignature Language="C#" Value="public void RegisterDataItem (System.Web.UI.Control control, string dataItem, bool isJsonSerialized);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDataItem(class System.Web.UI.Control control, string dataItem, bool isJsonSerialized) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDataItem(System::Web::UI::Control ^ control, System::String ^ dataItem, bool isJsonSerialized);" />
      <MemberSignature Language="F#" Value="member this.RegisterDataItem : System.Web.UI.Control * string * bool -&gt; unit" Usage="scriptManager.RegisterDataItem (control, dataItem, isJsonSerialized)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="dataItem" Type="System.String" />
        <Parameter Name="isJsonSerialized" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">データを受け取るページ コントロール。</param>
        <param name="dataItem">コントロールに送信されるデータ。</param>
        <param name="isJsonSerialized"><see langword="true" /> が JSON としてシリアル化されている場合は <paramref name="dataItem" />。それ以外の場合は <see langword="false" />。</param>
        <summary>部分ページ レンダリング中にカスタム データをコントロールに送信し、データが JSON (JavaScript Object Notation) 形式かどうかを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データを受信するコントロールが <xref:System.Web.UI.UpdatePanel> コントロール内にあるかどうかに関係なく、非同期ポストバック中にサーバーからクライアントにデータを送信するには、<xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> メソッドを使用します。  
  
 `control` に登録する `dataItem` パラメーターが JSON としてシリアル化されない場合は、`isJsonSerialized` パラメーターを `false`に設定します。 これにより、クライアントに送信される文字列ごとに `eval` 関数を使用する必要がなくなります。 JSON 形式の詳細については、JSON Web サイトの[概要](https://go.microsoft.com/fwlink/?LinkId=77297)に関するページを参照してください。  
  
 <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> メソッドは、非同期ポストバック中にのみ呼び出すことができます。 ポストバックが非同期かどうかを判断するには、<xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> プロパティを使用します。  
  
 <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> メソッドを使用して登録されたデータ項目には、`PageRequestManager` オブジェクトの `pageLoading`、`pageLoaded`、および `endRequest` イベント時にクライアントスクリプトでアクセスできます。 これらのイベントを処理すると、カスタムデータはイベント引数オブジェクトで渡されます。 たとえば、`pageLoading` イベントのハンドラーを指定した場合、カスタムデータは、プロパティを公開する `PageLoadingEventArgs` クラスに渡されます。  
  
   
  
## Examples  
 次の例は、非同期ポストバック中にページ上の2つの <xref:System.Web.UI.WebControls.Label> コントロールにデータを送信する方法を示しています。 <xref:System.Web.UI.WebControls.Label> コントロールが <xref:System.Web.UI.UpdatePanel> コントロールの内部にありません。 この例は、`isJsonSerialized` パラメーターを受け取らないオーバーロードを示しています。 それ以外の場合、`PageLoadingEventArgs` オブジェクトの `dataItems` プロパティを取得する手順は、そのオーバーロードを使用していない場合と同じです。  
  
> [!NOTE]
>  この例で送信されるデータは、例示のみを目的としています。 実際のアプリケーションでは、<xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> メソッドを使用して、サーバーからカスタムデータを送信します。 たとえば、データ項目を使用して、<xref:System.Web.UI.UpdatePanel> コントロールの内部にないクライアント要素を表示または非表示にするかどうかに関する情報を送信することができます。  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/CS/ScriptManagerRegisterDataItemCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/VB/ScriptManagerRegisterDataItemVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" /> メソッドはポストバックの際に呼び出されます。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="dataItem" /> は <paramref name="control" /> に既に登録されています。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDispose">
      <MemberSignature Language="C#" Value="public void RegisterDispose (System.Web.UI.Control control, string disposeScript);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDispose(class System.Web.UI.Control control, string disposeScript) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDispose(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDispose(System::Web::UI::Control ^ control, System::String ^ disposeScript);" />
      <MemberSignature Language="F#" Value="member this.RegisterDispose : System.Web.UI.Control * string -&gt; unit" Usage="scriptManager.RegisterDispose (control, disposeScript)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="disposeScript" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control"><see langword="dispose" /> スクリプトの目的のコントロール。</param>
        <param name="disposeScript"><see langword="dispose" /> スクリプト。</param>
        <summary><see langword="dispose" /> コントロール内にあるコントロールに対して <see cref="T:System.Web.UI.UpdatePanel" /> スクリプトを登録します。 このスクリプトは、<see cref="T:System.Web.UI.UpdatePanel" /> コントロールが更新または削除されるときに実行されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.UpdatePanel> コントロール内にあるコントロールに対して `dispose` スクリプトを登録するには、<xref:System.Web.UI.ScriptManager.RegisterDispose%2A> メソッドを使用します。 非同期ポストバック中に、<xref:System.Web.UI.UpdatePanel> コントロールを更新、削除、または作成できます。 パネルが更新または削除されると、<xref:System.Web.UI.UpdatePanel> 内にあるコントロールに登録されている `dispose` スクリプトが呼び出されます。 一般的なページ開発シナリオでは、<xref:System.Web.UI.ScriptManager.RegisterDispose%2A> メソッドを呼び出す必要はありません。  
  
 <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> メソッドは、コントロール開発者がスクリプトを登録したり、<xref:System.Web.UI.IScriptControl> インターフェイスから継承するコントロールを作成したりするために使用されます。 たとえば、コンポジションを使用してクライアントコントロールを開発する場合は、`dispose` スクリプトを使用することができます。 コントロールでは、<xref:System.Web.UI.IScriptControl> を実装し、個々のコントロールをレンダリングします。 `Sys.TextBox`などの定義済みのクライアントコンポーネントに対応していない項目の `dispose` メソッドを登録します。 カスタムコントロールが Microsoft Ajax ライブラリ内のクライアントコンポーネントに対応する要素を構成している場合は、`dispose` が自動的に呼び出されるため、`dispose` スクリプトを登録する必要はありません。 そのため、Microsoft Ajax ライブラリの一部であり、コンポーネントが使用されなくなったときにリソースを解放する必要があるクライアントコンポーネントには、<xref:System.Web.UI.ScriptManager.RegisterDispose%2A> メソッドを使用します。  
  
 <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> メソッドは、コントロールに対して複数回呼び出すことができます。 複数のスクリプトが集計されます。 破棄スクリプトの順序は、スクリプトが登録された順序と一致します。  
  
 <xref:System.Web.UI.UpdatePanel> コントロールに含まれていないコントロールに対して `dispose` スクリプトを登録すると、例外がスローされます。 `dispose` スクリプトは、`PageRequestManager` クラスの `pageLoading` と `pageLoaded` イベントの間で呼び出されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> は <see langword="null" /> です。  
  
または 
 <paramref name="disposeScript" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="control" /> がページ上で見つかりません。  
  
または 
 <paramref name="control" /> が <see cref="T:System.Web.UI.UpdatePanel" /> コントロール内にありません。</exception>
        <altmember cref="T:System.Web.UI.IScriptControl" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public static void RegisterExpandoAttribute (System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterExpandoAttribute(class System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterExpandoAttribute(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterExpandoAttribute(System::Web::UI::Control ^ control, System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode);" />
      <MemberSignature Language="F#" Value="static member RegisterExpandoAttribute : System.Web.UI.Control * string * string * string * bool -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterExpandoAttribute (control, controlId, attributeName, attributeValue, encode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">expando 属性を登録するコントロール。</param>
        <param name="controlId">カスタム属性を含むページ上のコントロール。</param>
        <param name="attributeName">登録するカスタム属性の名前。</param>
        <param name="attributeValue">カスタム属性の値。</param>
        <param name="encode">登録されるカスタム属性をエンコードする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定されたコントロールのカスタム (expando) 属性として名前/値ペアを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A> メソッドを使用して、部分ページレンダリングと互換性のあるコントロールのカスタム (expando) プロパティを登録します。これには、Microsoft Ajax ライブラリの依存関係はありません。  
  
 <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A> メソッドは、指定されたコントロールのカスタム属性として名前/値ペアを登録します。 プロパティは、表示されるコントロールのマークアップの XHTML の互換性を維持するために、ECMAScript (JavaScript) から動的に設定されます。 動的プロパティの値の文字をエスケープする必要がある場合は、`encode` を `true` に設定します。  
  
 動的プロパティが追加されるコントロールが見つからない場合は、スクリプトエラーが発生します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="control" /> がページのコントロール ツリーにありません。  
  
または 
 <paramref name="controlId" /> は <see langword="null" /> です。  
  
または 
 <paramref name="controlId" /> が空です。  
  
または 
 <paramref name="attributeName" /> は <see langword="null" /> です。  
  
または 
 <paramref name="attributeName" /> が空です。  
  
または 
 <paramref name="attributeName" /> は既に登録されています。</exception>
        <altmember cref="T:System.Web.UI.ClientScriptManager" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExtenderControl&lt;TExtenderControl&gt;">
      <MemberSignature Language="C#" Value="public void RegisterExtenderControl&lt;TExtenderControl&gt; (TExtenderControl extenderControl, System.Web.UI.Control targetControl) where TExtenderControl : System.Web.UI.Control, System.Web.UI.IExtenderControl;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterExtenderControl&lt;(class System.Web.UI.Control, class System.Web.UI.IExtenderControl) TExtenderControl&gt;(!!TExtenderControl extenderControl, class System.Web.UI.Control targetControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterExtenderControl``1(``0,System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExtenderControl(Of TExtenderControl As {Control, IExtenderControl}) (extenderControl As TExtenderControl, targetControl As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExtenderControl&gt;&#xA; where TExtenderControl : System::Web::UI::Control, System::Web::UI::IExtenderControl virtual void RegisterExtenderControl(TExtenderControl extenderControl, System::Web::UI::Control ^ targetControl);" />
      <MemberSignature Language="F#" Value="abstract member RegisterExtenderControl : 'ExtenderControl * System.Web.UI.Control -&gt; unit (requires 'ExtenderControl :&gt; System.Web.UI.Control and 'ExtenderControl :&gt; System.Web.UI.IExtenderControl)&#xA;override this.RegisterExtenderControl : 'ExtenderControl * System.Web.UI.Control -&gt; unit (requires 'ExtenderControl :&gt; System.Web.UI.Control and 'ExtenderControl :&gt; System.Web.UI.IExtenderControl)" Usage="scriptManager.RegisterExtenderControl (extenderControl, targetControl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExtenderControl">
          <Constraints>
            <BaseTypeName>System.Web.UI.Control</BaseTypeName>
            <InterfaceName>System.Web.UI.IExtenderControl</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="extenderControl" Type="TExtenderControl" />
        <Parameter Name="targetControl" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <typeparam name="TExtenderControl"><see cref="T:System.Web.UI.IExtenderControl" /> インターフェイスを実装しているコントロール。</typeparam>
        <param name="extenderControl">登録するエクステンダー コントロール。</param>
        <param name="targetControl">エクステンダー コントロールが拡張するスクリプト コントロール。</param>
        <summary>現在の <see cref="T:System.Web.UI.ScriptManager" /> インスタンスにエクステンダー コントロールを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、主にコントロールの開発者によって使用されます。 `onInit` イベントハンドラーでカスタム ASP.NET Ajax エクステンダーコントロールから <xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A> メソッドを呼び出して、そのコントロールをページに登録します。 部分ページレンダリングに参加するには、ASP.NET Ajax エクステンダーコントロールを登録する必要があります。  
  
 <xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A> メソッドは、指定されたエクステンダーコントロールを、拡張するエクステンダーコントロールとターゲットスクリプトコントロールの内部リストに追加します。 この一覧は、<xref:System.Web.UI.Control.PreRender> イベント中に処理されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="extenderControl" /> は <see langword="null" /> です。  
  
または 
 <paramref name="targetControl" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterHiddenField">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>隠しフィールドを登録します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public static void RegisterHiddenField (System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterHiddenField(class System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterHiddenField(System::Web::UI::Control ^ control, System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberSignature Language="F#" Value="static member RegisterHiddenField : System.Web.UI.Control * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterHiddenField (control, hiddenFieldName, hiddenFieldInitialValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">隠しフィールドを登録するコントロール。</param>
        <param name="hiddenFieldName">登録する隠しフィールドの名前。</param>
        <param name="hiddenFieldInitialValue">隠しフィールドの初期値。</param>
        <summary><see cref="T:System.Web.UI.ScriptManager" /> コントロール内のコントロールについて、隠しフィールドを <see cref="T:System.Web.UI.UpdatePanel" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> メソッドを使用して、部分ページレンダリングと互換性のある隠しフィールドを登録し、Microsoft Ajax ライブラリの依存関係を持たないようにします。 このメソッドは、フィールドを登録するコントロールが、更新されている <xref:System.Web.UI.UpdatePanel> コントロールの内部にある場合に、隠しフィールドを登録します。 非同期ポストバックが発生するたびに隠しフィールドを登録するには、このメソッドの <xref:System.Web.UI.ScriptManager.RegisterHiddenField%28System.Web.UI.Page%2CSystem.String%2CSystem.String%29> オーバーロードを使用します。  
  
 部分ページ更新に関係のない隠しフィールドを登録する場合や、最初のページのレンダリング中に非表示フィールドを1回だけ登録する場合は、<xref:System.Web.UI.ClientScriptManager> クラスの <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> メソッドを使用します。 <xref:System.Web.UI.ClientScriptManager> オブジェクトへの参照は、ページの <xref:System.Web.UI.Page.ClientScript%2A> プロパティから取得できます。  
  
 <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> メソッドは、レンダリングされた HTML ページに非表示の `input` 要素を作成します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> は <see langword="null" /> です。  
  
または 
 <paramref name="hiddenFieldName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="control" /> がページのコントロール ツリーにありません。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Page,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public static void RegisterHiddenField (System.Web.UI.Page page, string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterHiddenField(class System.Web.UI.Page page, string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Page,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterHiddenField(System::Web::UI::Page ^ page, System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberSignature Language="F#" Value="static member RegisterHiddenField : System.Web.UI.Page * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterHiddenField (page, hiddenFieldName, hiddenFieldInitialValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">隠しフィールドを登録するページ オブジェクト。</param>
        <param name="hiddenFieldName">登録する隠しフィールドの名前。</param>
        <param name="hiddenFieldInitialValue">隠しフィールドの初期値。</param>
        <summary>非同期ポストバックのたびに、隠しフィールドを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> メソッドを使用して、部分ページレンダリングと互換性のある隠しフィールドを登録し、Microsoft Ajax ライブラリの依存関係を持たないようにします。 このメソッドは、非同期ポストバックが発生するたびに隠しフィールドを登録します。 <xref:System.Web.UI.UpdatePanel> コントロール内にあるコントロールの非表示フィールドを登録して、パネルが更新されたときにのみフィールドが登録されるようにするには、このメソッドの <xref:System.Web.UI.ScriptManager.RegisterHiddenField%28System.Web.UI.Control%2CSystem.String%2CSystem.String%29> オーバーロードを使用します。  
  
 部分ページ更新に関係のない隠しフィールドを登録する場合や、最初のページのレンダリング中に非表示フィールドを1回だけ登録する場合は、<xref:System.Web.UI.ClientScriptManager> クラスの <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> メソッドを使用します。 <xref:System.Web.UI.ClientScriptManager> オブジェクトへの参照は、ページの <xref:System.Web.UI.Page.ClientScript%2A> プロパティから取得できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="page" /> は <see langword="null" /> です。  
  
または 
 <paramref name="hiddenFieldName" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterNamedClientScriptResource">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>部分ページ レンダリングに関係するコントロールで使用できるように、アセンブリに埋め込まれているクライアント スクリプトを、リソース名で <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterNamedClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterNamedClientScriptResource (System.Web.UI.Control control, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterNamedClientScriptResource(class System.Web.UI.Control control, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterNamedClientScriptResource(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterNamedClientScriptResource(System::Web::UI::Control ^ control, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="static member RegisterNamedClientScriptResource : System.Web.UI.Control * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterNamedClientScriptResource (control, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="resourceName" Type="System.String" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="control">スクリプトを登録するコントロール。</param>
        <param name="resourceName">リソースの識別子。</param>
        <summary>部分ページ レンダリングに関係するコントロールで使用できるように、アセンブリに埋め込まれているクライアント スクリプトを、リソース名で <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterNamedClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterNamedClientScriptResource (System.Web.UI.Page page, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterNamedClientScriptResource(class System.Web.UI.Page page, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterNamedClientScriptResource(System.Web.UI.Page,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterNamedClientScriptResource(System::Web::UI::Page ^ page, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="static member RegisterNamedClientScriptResource : System.Web.UI.Page * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterNamedClientScriptResource (page, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="resourceName" Type="System.String" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="page">スクリプトを登録するページ オブジェクト。</param>
        <param name="resourceName">リソースの識別子。</param>
        <summary>部分ページ レンダリングに関係するコントロールで使用できるように、アセンブリに埋め込まれているクライアント スクリプトを、リソース名で <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterOnSubmitStatement">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>フォームが送信されるときに実行される ECMAScript (JavaScript) コードを登録します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public static void RegisterOnSubmitStatement (System.Web.UI.Control control, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterOnSubmitStatement(class System.Web.UI.Control control, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterOnSubmitStatement(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="static member RegisterOnSubmitStatement : System.Web.UI.Control * Type * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterOnSubmitStatement (control, type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control"><see langword="onsubmit" /> ステートメントを登録するコントロール。</param>
        <param name="type">クライアント スクリプト ステートメントの型。 このパラメーターは、通常、typeof 演算子 (C#) または GetType 演算子 (Visual Basic) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="key">スクリプト ステートメントの一意の識別子。</param>
        <param name="script">登録するスクリプト。</param>
        <summary>フォームが送信されるときに実行される <see cref="T:System.Web.UI.ScriptManager" /> コントロールと連携するコントロールについて、ECMAScript (JavaScript) コードを <see cref="T:System.Web.UI.UpdatePanel" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> は、フォームが送信される前に実行されるスクリプトを追加します。これにより、送信を変更したり、キャンセルしたりできます。  
  
 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> メソッドを使用して、部分ページレンダリングと互換性があり、Microsoft Ajax ライブラリの依存関係を持たない `onsubmit` ステートメントを表示します。 このメソッドを使用して登録された JavaScript コードは、ステートメントを登録しているコントロールが、更新されている <xref:System.Web.UI.UpdatePanel> コントロール内にある場合にのみページに送信されます。 すべての非同期ポストバックにコードを登録するには、このメソッドの <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%29> オーバーロードを使用します。  
  
 部分ページ更新に関連しない JavaScript コードを登録する場合、および初期ページレンダリング中にコードを1回だけ登録する場合は、<xref:System.Web.UI.ClientScriptManager> クラスの <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> メソッドを使用します。 <xref:System.Web.UI.ClientScriptManager> オブジェクトへの参照は、ページの <xref:System.Web.UI.Page.ClientScript%2A> プロパティから取得できます。  
  
 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> メソッドの*script*パラメーターには、セミコロン (;) を使用して区切られた複数のスクリプトコマンドを含めることができます。  
  
 HTML フォームと `onsubmit` イベントの詳細については、 [World Wide Web コンソーシアム (W3C) の Web サイト](https://go.microsoft.com/fwlink/?linkid=37125)を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> は <see langword="null" /> です。  
  
または 
 <paramref name="type" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="control" /> がページのコントロール ツリーにありません。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Page,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public static void RegisterOnSubmitStatement (System.Web.UI.Page page, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterOnSubmitStatement(class System.Web.UI.Page page, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Page,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterOnSubmitStatement(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="static member RegisterOnSubmitStatement : System.Web.UI.Page * Type * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterOnSubmitStatement (page, type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page"><see langword="onsubmit" /> ステートメントを登録するページ オブジェクト。</param>
        <param name="type">クライアント スクリプト ステートメントの型。 このパラメーターは、通常、typeof 演算子 (C#) または GetType 演算子 (Visual Basic) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="key">スクリプト ステートメントの一意の識別子。</param>
        <param name="script">登録するスクリプト。</param>
        <summary>フォームが送信されるときに実行される <see cref="T:System.Web.UI.ScriptManager" /> コントロールと連携するコントロールについて、ECMAScript (JavaScript) コードを <see cref="T:System.Web.UI.UpdatePanel" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドに JavaScript コードを登録すると、非同期ポストバックが発生するたびにスクリプトが含まれるようになります。  
  
> [!NOTE]
>  以前の非同期ポストバックからのコードは削除されません。 新しい非同期ポストバックでは、`onsubmit` ステートメントの既存のコードにコードが追加されます。  
  
 <xref:System.Web.UI.UpdatePanel> コントロール内にあるコントロールのコードを登録して、<xref:System.Web.UI.UpdatePanel> コントロールが更新されたときにのみコードが登録されるようにするには、このメソッドの <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%29> オーバーロードを使用します。  
  
 部分ページ更新に関連しない JavaScript コードを登録する場合、および初期ページレンダリング中にコードを1回だけ登録する場合は、<xref:System.Web.UI.ClientScriptManager> クラスの <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> メソッドを使用します。 <xref:System.Web.UI.ClientScriptManager> オブジェクトへの参照は、ページの <xref:System.Web.UI.Page.ClientScript%2A> プロパティから取得できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="page" /> は <see langword="null" /> です。  
  
または 
 <paramref name="type" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterPostBackControl(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member RegisterPostBackControl : System.Web.UI.Control -&gt; unit&#xA;override this.RegisterPostBackControl : System.Web.UI.Control -&gt; unit" Usage="scriptManager.RegisterPostBackControl control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">ポストバック用に登録するコントロール。</param>
        <summary>コントロールをポストバックのトリガーとして登録します。 このメソッドは、本来は非同期ポストバックを実行する <see cref="T:System.Web.UI.UpdatePanel" /> コントロール内のポストバック コントロールを構成するために使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.RegisterPostBackControl%2A> メソッドを使用して、<xref:System.Web.UI.UpdatePanel> コントロール内のポストバックコントロールをトリガーとして登録します。 このメソッドを使用して登録されたコントロールは、<xref:System.Web.UI.UpdatePanel> コントロールのコンテンツのみを更新するのではなく、ページ全体を更新します。 既定では、これらのコントロールは非同期ポストバックを実行しないため、このメソッドを使用してポストバックコントロールを <xref:System.Web.UI.UpdatePanel> コントロールの外部に登録しても、影響はありません。  
  
 <xref:System.Web.UI.UpdatePanel> コントロールの `Triggers` 要素を使用して、トリガーを宣言によって追加できます。 Visual Studio で、デザイナーの **[Updatepaneltrigger コレクションエディター]** ダイアログボックスを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.UpdatePanel.Triggers" />
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptControl&lt;TScriptControl&gt;">
      <MemberSignature Language="C#" Value="public void RegisterScriptControl&lt;TScriptControl&gt; (TScriptControl scriptControl) where TScriptControl : System.Web.UI.Control, System.Web.UI.IScriptControl;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptControl&lt;(class System.Web.UI.Control, class System.Web.UI.IScriptControl) TScriptControl&gt;(!!TScriptControl scriptControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptControl``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptControl(Of TScriptControl As {Control, IScriptControl}) (scriptControl As TScriptControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TScriptControl&gt;&#xA; where TScriptControl : System::Web::UI::Control, System::Web::UI::IScriptControl virtual void RegisterScriptControl(TScriptControl scriptControl);" />
      <MemberSignature Language="F#" Value="abstract member RegisterScriptControl : 'ScriptControl -&gt; unit (requires 'ScriptControl :&gt; System.Web.UI.Control and 'ScriptControl :&gt; System.Web.UI.IScriptControl)&#xA;override this.RegisterScriptControl : 'ScriptControl -&gt; unit (requires 'ScriptControl :&gt; System.Web.UI.Control and 'ScriptControl :&gt; System.Web.UI.IScriptControl)" Usage="scriptManager.RegisterScriptControl scriptControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TScriptControl">
          <Constraints>
            <BaseTypeName>System.Web.UI.Control</BaseTypeName>
            <InterfaceName>System.Web.UI.IScriptControl</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="scriptControl" Type="TScriptControl" />
      </Parameters>
      <Docs>
        <typeparam name="TScriptControl"><see cref="T:System.Web.UI.IScriptControl" /> インターフェイスを実装しているコントロール。</typeparam>
        <param name="scriptControl">登録するスクリプト コントロール。</param>
        <summary>現在の <see cref="T:System.Web.UI.ScriptManager" /> インスタンスにスクリプト コントロールを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、主にコントロールの開発者によって使用されます。 `onInit` イベントハンドラーでカスタム ASP.NET Ajax スクリプトコントロールから <xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A> メソッドを呼び出し、そのコントロールをページに登録します。 部分ページレンダリングに参加するには、ASP.NET Ajax スクリプトコントロールを登録する必要があります。  
  
 <xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A> メソッドは、指定されたエクステンダーコントロールを、<xref:System.Web.UI.Control.PreRender> イベント中に処理されるスクリプトコントロールの内部リストに追加します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="scriptControl" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterScriptDescriptors">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアントのコントロール、コンポーネント、または動作を表すクライアント オブジェクトをサポートするスクリプトを返すために、<see cref="T:System.Web.UI.ScriptManager" /> コントロールに対して、<see cref="T:System.Web.UI.ScriptControl" /> クラスまたは <see cref="T:System.Web.UI.ExtenderControl" /> クラスへのコールバックを指示します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterScriptDescriptors">
      <MemberSignature Language="C#" Value="public void RegisterScriptDescriptors (System.Web.UI.IExtenderControl extenderControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptDescriptors(class System.Web.UI.IExtenderControl extenderControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptDescriptors (extenderControl As IExtenderControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterScriptDescriptors(System::Web::UI::IExtenderControl ^ extenderControl);" />
      <MemberSignature Language="F#" Value="abstract member RegisterScriptDescriptors : System.Web.UI.IExtenderControl -&gt; unit&#xA;override this.RegisterScriptDescriptors : System.Web.UI.IExtenderControl -&gt; unit" Usage="scriptManager.RegisterScriptDescriptors extenderControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extenderControl" Type="System.Web.UI.IExtenderControl" />
      </Parameters>
      <Docs>
        <param name="extenderControl">スクリプト ディスクリプターが登録されるエクステンダー コントロール。</param>
        <summary><see cref="T:System.Web.UI.ExtenderControl" /> クラスにコールバックして、クライアントのコントロール、コンポーネント、または動作を表すクライアント オブジェクトをサポートするためにレンダリングする必要があるインスタンス スクリプトを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ExtenderControl> クラスは、<xref:System.Web.UI.Control.Render%2A> メソッドで <xref:System.Web.UI.ScriptManager.RegisterScriptDescriptors%2A> メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="T:System.Web.UI.ExtenderControl" /> クラスから派生し、<see cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" /> メソッドをオーバーライドしても、基本クラスのメソッドを呼び出さない場合は、<see cref="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)" /> メソッドを呼び出す必要があります。 これにより、コントロールが表すクライアントオブジェクトをサポートするインスタンススクリプトを、<see cref="T:System.Web.UI.ScriptManager" /> コントロールでレンダリングできるようになります。</para></block>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterExtenderControl``1(``0,System.Web.UI.Control)" />
        <altmember cref="T:System.Web.UI.ScriptDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptDescriptors">
      <MemberSignature Language="C#" Value="public void RegisterScriptDescriptors (System.Web.UI.IScriptControl scriptControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptDescriptors(class System.Web.UI.IScriptControl scriptControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IScriptControl)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptDescriptors (scriptControl As IScriptControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterScriptDescriptors(System::Web::UI::IScriptControl ^ scriptControl);" />
      <MemberSignature Language="F#" Value="abstract member RegisterScriptDescriptors : System.Web.UI.IScriptControl -&gt; unit&#xA;override this.RegisterScriptDescriptors : System.Web.UI.IScriptControl -&gt; unit" Usage="scriptManager.RegisterScriptDescriptors scriptControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptControl" Type="System.Web.UI.IScriptControl" />
      </Parameters>
      <Docs>
        <param name="scriptControl">スクリプト ディスクリプターが登録されるスクリプト コントロール。</param>
        <summary><see cref="T:System.Web.UI.ScriptControl" /> クラスを呼び出して、クライアントのコントロール、コンポーネント、または動作を表すクライアント オブジェクトをサポートするためにレンダリングする必要があるインスタンス スクリプトを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptControl> クラスは、<xref:System.Web.UI.Control.Render%2A> イベント中に <xref:System.Web.UI.ScriptManager.RegisterScriptDescriptors%2A> メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="T:System.Web.UI.ScriptControl" /> クラスから派生し、<see cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" /> メソッドをオーバーライドしても、基本クラスのメソッドを呼び出さない場合は、<see cref="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IScriptControl)" /> メソッドを呼び出す必要があります。 これにより、コントロールが表すクライアントオブジェクトをサポートするインスタンススクリプトを、<see cref="T:System.Web.UI.ScriptManager" /> コントロールでレンダリングできるようになります。</para></block>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterScriptControl``1(``0)" />
        <altmember cref="T:System.Web.UI.ScriptDescriptor" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterStartupScript">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>起動スクリプト ブロックを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録し、スクリプト ブロックをページに追加します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public static void RegisterStartupScript (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterStartupScript(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterStartupScript(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="static member RegisterStartupScript : System.Web.UI.Control * Type * string * string * bool -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterStartupScript (control, type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">クライアント スクリプト ブロックを登録するコントロール。</param>
        <param name="type">クライアント スクリプト ブロックの型。 このパラメーターは、通常、typeof 演算子 (C#) または GetType 演算子 (Visual Basic) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="key">スクリプト ブロックの一意の識別子。</param>
        <param name="script">登録するスクリプト。</param>
        <param name="addScriptTags">スクリプト ブロックを <see langword="true" /> タグと <see langword="&lt;script&gt;" /> タグで囲む場合は <see langword="&lt;/script&gt;" />。それ以外の場合は <see langword="false" />。</param>
        <summary><see cref="T:System.Web.UI.UpdatePanel" /> コントロールを使用して <see cref="T:System.Web.UI.ScriptManager" /> 内のコントロールの起動スクリプト ブロックを登録し、スクリプト ブロックをページに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> メソッドを使用して、部分ページレンダリングと互換性のあるページのスタートアップスクリプトブロックを登録します。これには、Microsoft Ajax ライブラリの依存関係はありません。 このメソッドを使用して登録されたスタートアップスクリプトブロックは、ブロックを登録するコントロールが、更新されている <xref:System.Web.UI.UpdatePanel> コントロール内にある場合にのみ、ページに送信されます。 非同期ポストバックが発生するたびにスタートアップスクリプトブロックを登録するには、このメソッドの <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> オーバーロードを使用します。  
  
 部分ページ更新に関連しないスタートアップスクリプトを登録する場合、および最初のページレンダリング中にスクリプトを1回だけ登録する場合は、<xref:System.Web.UI.ClientScriptManager> クラスの <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> メソッドを使用します。 <xref:System.Web.UI.ClientScriptManager> オブジェクトへの参照は、ページの <xref:System.Web.UI.Page.ClientScript%2A> プロパティから取得できます。  
  
 <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> メソッドによってレンダリングされるスクリプトブロックは、ページの読み込みが終了した後、ページのクライアント `onload` イベントが発生する前に実行されます。 スタートアップスクリプトブロックは、`</form>` タグの直前に表示される ASP.NET ページの下部にあります。  
  
 <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> を使用して登録されたスタートアップスクリプトブロックは、登録されている順序と同じ順序で出力されるとは限りません。 スタートアップスクリプトブロックの順序が重要な場合は、<xref:System.Text.StringBuilder> オブジェクトを使用して、スクリプトブロックを1つの文字列で収集し、それらをすべて1つのスタートアップスクリプトとして登録します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> は <see langword="null" /> です。  
  
または 
 <paramref name="type" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="control" /> がページのコントロール ツリーにありません。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public static void RegisterStartupScript (System.Web.UI.Page page, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterStartupScript(class System.Web.UI.Page page, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterStartupScript(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="static member RegisterStartupScript : System.Web.UI.Page * Type * string * string * bool -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterStartupScript (page, type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">クライアント スクリプト ブロックを登録するページ オブジェクト。</param>
        <param name="type">クライアント スクリプト ブロックの型。 このパラメーターは、通常、typeof 演算子 (C#) または GetType 演算子 (Visual Basic) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="key">スクリプト ブロックの一意の識別子。</param>
        <param name="script">登録するスクリプト。</param>
        <param name="addScriptTags">スクリプト ブロックを <see langword="true" /> タグと <see langword="&lt;script&gt;" /> タグで囲む場合は <see langword="&lt;/script&gt;" />。それ以外の場合は <see langword="false" />。</param>
        <summary>非同期ポストバックのたびに起動スクリプト ブロックを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録し、スクリプト ブロックをページに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、非同期ポストバックが発生するたびに含まれるスタートアップスクリプトブロックを登録します。 <xref:System.Web.UI.UpdatePanel> コントロール内にあるコントロールのスクリプトブロックを登録して、<xref:System.Web.UI.UpdatePanel> コントロールが更新されたときにのみスクリプトブロックが登録されるようにするには、このメソッドの <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> オーバーロードを使用します。  
  
 部分ページ更新に関連しないスタートアップスクリプトを登録する場合、および最初のページレンダリング中にスクリプトを1回だけ登録する場合は、<xref:System.Web.UI.ClientScriptManager> クラスの <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> メソッドを使用します。 <xref:System.Web.UI.ClientScriptManager> オブジェクトへの参照は、ページの <xref:System.Web.UI.Page.ClientScript%2A> プロパティから取得できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="scriptManager.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">ページに書き込むコントロールのコンテンツを受け取るオブジェクト。</param>
        <summary>指定された <see cref="T:System.Web.UI.ScriptManager" /> オブジェクトを使用して、ブラウザーに <see cref="T:System.Web.UI.HtmlTextWriter" /> コントロールのコンテンツをレンダリングします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、コントロールの開発者が <xref:System.Web.UI.ScriptManager> コントロールを拡張するために使用します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>このメソッドをオーバーライドする場合は、基本 <see cref="M:System.Web.UI.ScriptManager.Render(System.Web.UI.HtmlTextWriter)" /> メソッドを呼び出して、`Sys.WebForms.PageRequestManager` クラスを定義するクライアントスクリプトがページに表示されるようにします。</para></block>
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ResolveCompositeScriptReference">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt; ResolveCompositeScriptReference;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.CompositeScriptReferenceEventArgs&gt; ResolveCompositeScriptReference" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.ResolveCompositeScriptReference" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ResolveCompositeScriptReference As EventHandler(Of CompositeScriptReferenceEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::CompositeScriptReferenceEventArgs ^&gt; ^ ResolveCompositeScriptReference;" />
      <MemberSignature Language="F#" Value="member this.ResolveCompositeScriptReference : EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt; " Usage="member this.ResolveCompositeScriptReference : System.EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>複合スクリプトが <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録されるときに発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveScriptReference">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt; ResolveScriptReference;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.ScriptReferenceEventArgs&gt; ResolveScriptReference" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.ResolveScriptReference" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ResolveScriptReference As EventHandler(Of ScriptReferenceEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::ScriptReferenceEventArgs ^&gt; ^ ResolveScriptReference;" />
      <MemberSignature Language="F#" Value="member this.ResolveScriptReference : EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt; " Usage="member this.ResolveScriptReference : System.EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.ScriptManager.Scripts" /> コレクションのメンバーが <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録されるときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントは、ページの <xref:System.Web.UI.Control.PreRender> イベント中に、<xref:System.Web.UI.ScriptManager.Scripts%2A> コレクションのメンバーごとに1回発生します。 スクリプトをページに表示する前に、このイベントを使用して更新を実行します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoleService">
      <MemberSignature Language="C#" Value="public System.Web.UI.RoleServiceManager RoleService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.RoleServiceManager RoleService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.RoleService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoleService As RoleServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::RoleServiceManager ^ RoleService { System::Web::UI::RoleServiceManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RoleService : System.Web.UI.RoleServiceManager" Usage="System.Web.UI.ScriptManager.RoleService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.RoleServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Web.UI.RoleServiceManager" /> インスタンスに関連付けられている <see cref="T:System.Web.UI.ScriptManager" /> オブジェクトを取得します。</summary>
        <value>現在の <see cref="T:System.Web.UI.RoleServiceManager" /> インスタンスに対する <see cref="T:System.Web.UI.ScriptManager" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティによって返される <xref:System.Web.UI.RoleServiceManager> オブジェクトは、ページに登録されているロールサービスを表します。 ロールサービスは、<xref:System.Web.UI.ScriptManager> コントロール、または関連する <xref:System.Web.UI.ScriptManagerProxy> コントロールで定義できます。 ASP.NET ロールサービスを使用することも、カスタムロールサービスを使用することもできます。 次の例に示すように、ページの `asp:ScriptManager` 要素内に `RoleService` 要素を含めることにより、マークアップにカスタムサービスを追加できます。  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <RoleService Path="MyRoleService.asmx" LoadRoles="True" />  
</asp:ScriptManager>  
```  
  
 <xref:System.Web.UI.RoleServiceManager> オブジェクトをプログラムで構成することもできます。 サービスは、ページの <xref:System.Web.UI.Control.PreRender> ライフサイクルステージ中に <xref:System.Web.UI.ScriptManager> コントロールに登録されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.ScriptMode ScriptMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ScriptMode ScriptMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptMode As ScriptMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ScriptMode ScriptMode { System::Web::UI::ScriptMode get(); void set(System::Web::UI::ScriptMode value); };" />
      <MemberSignature Language="F#" Value="member this.ScriptMode : System.Web.UI.ScriptMode with get, set" Usage="System.Web.UI.ScriptManager.ScriptMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアント スクリプト ライブラリのデバッグ バージョンまたはリリース バージョンがレンダリングされるかどうかを示す値を取得または設定します。</summary>
        <value>現在のモードを示す列挙値。 既定では、 <see cref="F:System.Web.UI.ScriptMode.Auto" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.ScriptMode%2A> プロパティは、<xref:System.Web.UI.ScriptManager> コントロールでクライアントスクリプトライブラリのデバッグバージョンまたはリリースバージョンを表示するかどうかを指定します。 この値は、構成ファイルとページディレクティブで設定されている値に置き換えることができます。  
  
 次の表に、このプロパティの有効な値を示します。  
  
|値|Definition|  
|-----------|----------------|  
|<xref:System.Web.UI.ScriptMode.Auto>|クライアントスクリプトライブラリのデバッグバージョンは、[配置](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms228298(v%3dvs.100))構成要素の `retail` 属性が `false`に設定されている場合に、Web ページで使用されます。 それ以外の場合は、リリースバージョンのクライアントスクリプトライブラリが使用されます。|  
|<xref:System.Web.UI.ScriptMode.Inherit>|<xref:System.Web.UI.ScriptManager> オブジェクトの <xref:System.Web.UI.ScriptManager.ScriptMode%2A> プロパティに適用した場合、この値は <xref:System.Web.UI.ScriptMode.Auto>と同じになります。|  
|<xref:System.Web.UI.ScriptMode.Debug>|クライアントスクリプトライブラリのデバッグバージョンは、[配置](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms228298(v%3dvs.100))構成要素の `retail` 属性が `true`に設定されていない限り、Web ページで使用されます。|  
|<xref:System.Web.UI.ScriptMode.Release>|クライアントスクリプトライブラリのリリースバージョンは、[展開](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms228298(v%3dvs.100))構成要素の `retail` 属性が `false`に設定されていない限り、Web ページで使用されます。|  
  
> [!NOTE]
>  [@ Page](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ydy4x04a(v=vs.100))ディレクティブの `debug` 属性は、Ajax 対応の ASP.NET アプリケーションには影響しません。 <xref:System.Web.UI.ScriptManager> コントロールでは、Web.config ファイルの設定とその <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> と <xref:System.Web.UI.ScriptManager.ScriptMode%2A> プロパティを使用して、デバッグスクリプトを表示するかどうかを決定します。  
  
 詳細については、「 [Ajax アプリケーションのデバッグとトレースの概要](https://msdn.microsoft.com/library/92684ea0-7bb4-4a34-9203-3aa6394ce375)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Web.UI.ScriptManager.ScriptMode" /> が、<see cref="T:System.Web.UI.ScriptMode" /> 値の 1 つではありません。</exception>
        <altmember cref="T:System.Web.UI.ScriptMode" />
      </Docs>
    </Member>
    <Member MemberName="ScriptPath">
      <MemberSignature Language="C#" Value="public string ScriptPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptPath" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScriptPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ScriptPath : string with get, set" Usage="System.Web.UI.ScriptManager.ScriptPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This property is obsolete. Set the Path property on each individual ScriptReference instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET AJAX およびカスタム スクリプト ファイルへのパスを作成するために使用される場所のルート パスを取得または設定します。</summary>
        <value>スクリプト ファイルが格納される場所。 既定値は、相対パスとして解釈される空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.ScriptPath%2A> プロパティを使用すると、ページ上のすべてのスクリプトブロックに対して、絶対 URL、相対 URL、またはアプリケーション相対 URL を指定できます。 これには、現在の <xref:System.Web.UI.ScriptManager> インスタンスに登録されているカスタムおよびサードパーティのスクリプトブロックが含まれます。 <xref:System.Web.UI.ScriptManager.ScriptPath%2A> プロパティは、通常、ページの `ScriptManager` 要素の属性として宣言されますが、コードで設定することもできます。  
  
 <xref:System.Web.UI.ScriptManager.Scripts%2A> コレクション内の <xref:System.Web.UI.ScriptReference> オブジェクトに対して `path` 属性または <xref:System.Web.UI.ScriptReferenceBase.Path%2A> プロパティが設定されている場合、path 値はその <xref:System.Web.UI.ScriptManager.ScriptPath%2A> インスタンスの <xref:System.Web.UI.ScriptReference> 値よりも優先されます。  
  
 <xref:System.Web.UI.ScriptReferenceBase.Path%2A> 値が指定されていない場合、<xref:System.Web.UI.ScriptManager> コントロールは、<xref:System.Web.UI.ScriptManager.ScriptPath%2A> プロパティによって定義されているディレクトリを検索し、スクリプト参照を <xref:System.Web.UI.ScriptReference.Name%2A> または <xref:System.Web.UI.ScriptReference.Assembly%2A> のプロパティで解決します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptResourceMapping">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ScriptResourceMapping ScriptResourceMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.UI.ScriptResourceMapping ScriptResourceMapping" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptResourceMapping" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ScriptResourceMapping As ScriptResourceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::UI::ScriptResourceMapping ^ ScriptResourceMapping { System::Web::UI::ScriptResourceMapping ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ScriptResourceMapping : System.Web.UI.ScriptResourceMapping" Usage="System.Web.UI.ScriptManager.ScriptResourceMapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptResourceMapping</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.ScriptResourceMapping" /> オブジェクトを取得します。</summary>
        <value><see cref="T:System.Web.UI.ScriptResourceMapping" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 静的 <xref:System.Web.UI.ScriptManager.ScriptResourceMapping%2A> プロパティは、スクリプトリソースの場所 (スクリプトリダイレクト) を表すマッピングのコレクションを含むことができる <xref:System.Web.UI.ScriptResourceMapping> オブジェクトを返します。 このマッピングのコレクションは、名前または名前とアセンブリのペアに基づいてマップすることができ、<xref:System.Web.UI.ScriptResourceDefinition> オブジェクトを指すことができます。  
  
   
  
## Examples  
 次の例は、<xref:System.Web.UI.ScriptManager> オブジェクトで参照できる <xref:System.Web.UI.ScriptResourceDefinition> オブジェクトを追加する方法を示しています。 次のコードを、`Application_Start` イベントの global.asax ファイルに追加します。  
  
```csharp  
ScriptResourceDefinition myScriptResDef = new ScriptResourceDefinition();  
myScriptResDef.Path = "~/Scripts/jquery-1.4.2.min.js";  
myScriptResDef.DebugPath = "~/Scripts/jquery-1.4.2.js";  
myScriptResDef.CdnPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js";  
myScriptResDef.CdnDebugPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.js";  
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", null, myScriptResDef);  
```  
  
```vb  
Dim myScriptResDef As New ScriptResourceDefinition()  
myScriptResDef.Path = "~/Scripts/jquery-1.4.2.min.js"  
myScriptResDef.DebugPath = "~/Scripts/jquery-1.4.2.js"  
myScriptResDef.CdnPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js"  
myScriptResDef.CdnDebugPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.js"  
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", Nothing, myScriptResDef)  
```  
  
 ASP.NET Web フォームページ (.aspx ファイル) のマークアップで、`form` 要素内と jQuery スクリプトを使用する要素またはコードの前に、次のマークアップを追加します。  
  
```  
<asp:ScriptManager ID="sm1" runat="server">  
  <Scripts>  
    <asp:ScriptReference Name="jquery"/>  
  </Scripts>  
</asp:ScriptManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scripts">
      <MemberSignature Language="C#" Value="public System.Web.UI.ScriptReferenceCollection Scripts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ScriptReferenceCollection Scripts" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Scripts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scripts As ScriptReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ScriptReferenceCollection ^ Scripts { System::Web::UI::ScriptReferenceCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scripts : System.Web.UI.ScriptReferenceCollection" Usage="System.Web.UI.ScriptManager.Scripts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.CollectionEditorBase, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.CollectionEditorBase, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントにレンダリングされるスクリプト ファイルをそれぞれ表す <see cref="T:System.Web.UI.ScriptReferenceCollection" /> オブジェクトが格納された <see cref="T:System.Web.UI.ScriptReference" /> オブジェクトを取得します。</summary>
        <value><see cref="T:System.Web.UI.ScriptReferenceCollection" /> インスタンスの <see cref="T:System.Web.UI.ScriptManager" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティによって返される <xref:System.Web.UI.ScriptReferenceCollection> オブジェクトは <xref:System.Web.UI.ScriptReference> オブジェクトのコレクションであり、それぞれがスクリプトファイルを表します。 コレクションには、Ajax 機能に必要な ASP.NET のすべてのスクリプトファイルへの参照、およびカスタムスクリプトファイルへの参照が含まれています。 レンダリングするカスタムスクリプトファイルは、<xref:System.Web.UI.ScriptManager> コントロール、または関連付けられた <xref:System.Web.UI.ScriptManagerProxy> コントロールで定義できます。  
  
 次の例に示すように、ページの `asp:ScriptManager` 要素内の `Scripts` ノードに `asp:ScriptReference` 要素を追加することにより、マークアップでコレクションにスクリプトファイルを追加できます。  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <Scripts>  
    <asp:ScriptReference Name="Script.js" />  
  </Scripts>  
</asp:ScriptManager>  
```  
  
 <xref:System.Web.UI.ScriptReferenceCollection> クラスの <xref:System.Collections.ObjectModel.Collection%601.Add%2A> メソッドを使用して、<xref:System.Web.UI.ScriptManager.Scripts%2A> コレクションに <xref:System.Web.UI.ScriptReference> オブジェクトをプログラムで追加することもできます。  
  
 <xref:System.Web.UI.ScriptManager> コントロールは、コントロールの <xref:System.Web.UI.Control.PreRender> イベント中にスクリプトファイルを登録します。  
  
 <xref:System.Web.UI.ScriptManager.Scripts%2A> コレクションには、Microsoft Ajax のコアライブラリスクリプトが含まれていません。 コアライブラリ内のスクリプトは自動的にレンダリングされます。<xref:System.Web.UI.ScriptManager> コントロールに登録する必要はありません。 ただし、コアスクリプトまたは任意のコントロールスクリプトをオーバーライドし、別のバージョンのスクリプトに置き換える場合は、<xref:System.Web.UI.ScriptManager.Scripts%2A> コレクションにバージョンを追加できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Services">
      <MemberSignature Language="C#" Value="public System.Web.UI.ServiceReferenceCollection Services { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ServiceReferenceCollection Services" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Services" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Services As ServiceReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ServiceReferenceCollection ^ Services { System::Web::UI::ServiceReferenceCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Services : System.Web.UI.ServiceReferenceCollection" Usage="System.Web.UI.ScriptManager.Services" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ServiceReferenceCollectionEditor, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.CollectionEditorBase, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ServiceReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET が AJAX 機能用にクライアントに公開している各 Web サービスに対応する <see cref="T:System.Web.UI.ServiceReferenceCollection" /> オブジェクトが格納されている <see cref="T:System.Web.UI.ServiceReference" /> オブジェクトを取得します。</summary>
        <value>現在の <see cref="T:System.Web.UI.ServiceReferenceCollection" /> インスタンスに対する <see cref="T:System.Web.UI.ScriptManager" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティによって返される <xref:System.Web.UI.ServiceReferenceCollection> オブジェクトは <xref:System.Web.UI.ServiceReference> オブジェクトのコレクションであり、それぞれが <xref:System.Web.UI.ScriptManager> コントロールに登録されている Web サービスを表します。 サービスは、<xref:System.Web.UI.ScriptManager> コントロール、または関連付けられた <xref:System.Web.UI.ScriptManagerProxy> コントロールで定義できます。  
  
 次の例に示すように、ページの `asp:ScriptManager` インスタンス内の `Services` 要素に `asp:ServiceReference` 要素を追加することにより、マークアップでコレクションにサービスを追加できます。  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <Services>  
    <asp:ServiceReference Path="Service.asmx" />  
  </Services>  
</asp:ScriptManager>  
```  
  
 また、<xref:System.Web.UI.ServiceReferenceCollection> クラスの <xref:System.Collections.ObjectModel.Collection%601.Add%2A> メソッドを使用して、<xref:System.Web.UI.ServiceReference> オブジェクトを <xref:System.Web.UI.ScriptManager.Services%2A> コレクションにプログラムで追加することもできます。  
  
 サービスは、ページの <xref:System.Web.UI.Control.PreRender> ライフサイクルステージ中に <xref:System.Web.UI.ScriptManager> に登録されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetFocus">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ブラウザーのフォーカスを、指定したコントロールに設定します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (string clientID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(string clientID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.SetFocus(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFocus (clientID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus(System::String ^ clientID);" />
      <MemberSignature Language="F#" Value="member this.SetFocus : string -&gt; unit" Usage="scriptManager.SetFocus clientID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientID">フォーカスを受け取るコントロールの ID。</param>
        <summary>ブラウザーのフォーカスを、ID で指定されるコントロールに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.SetFocus%2A> メソッドは、<xref:System.Web.UI.Page> クラスの <xref:System.Web.UI.Page.SetFocus%2A> メソッドと同様に機能します。 どちらの方法でも、指定した ID を持つコントロールが Web ページ上のアクティブコントロールになります。 <xref:System.Web.UI.ScriptManager> クラスの <xref:System.Web.UI.ScriptManager.SetFocus%2A> メソッドは、非同期ポストバック中にフォーカスを設定するために使用されます。 ポストバック中に、ページが最初に表示されるときに、<xref:System.Web.UI.ScriptManager.SetFocus%2A> メソッドは <xref:System.Web.UI.Page> クラスの <xref:System.Web.UI.Page.SetFocus%2A> メソッドを呼び出します。  
  
 <xref:System.Web.UI.ScriptManager.SetFocus%2A> メソッドに対して複数の呼び出しがある場合、最後の呼び出しのコントロールはフォーカスを受け取ります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.String)" />
        <altmember cref="M:System.Web.UI.ScriptManager.SetFocus(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.SetFocus(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.SetFocus : System.Web.UI.Control -&gt; unit" Usage="scriptManager.SetFocus control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">フォーカスを受け取るコントロール。</param>
        <summary>ブラウザーのフォーカスを、指定したコントロールに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.SetFocus%2A> メソッドは、<xref:System.Web.UI.Page> クラスの <xref:System.Web.UI.Page.SetFocus%2A> メソッドと同様に機能します。 どちらの方法でも、指定したコントロールが Web ページ上のアクティブコントロールになります。 <xref:System.Web.UI.ScriptManager> クラスの <xref:System.Web.UI.ScriptManager.SetFocus%2A> メソッドは、非同期ポストバック中にフォーカスを設定するために使用されます。 ポストバック中に、ページが最初に表示されるときに、<xref:System.Web.UI.ScriptManager.SetFocus%2A> メソッドは <xref:System.Web.UI.Page> クラスの <xref:System.Web.UI.Page.SetFocus%2A> メソッドを呼び出します。  
  
 <xref:System.Web.UI.ScriptManager.SetFocus%2A> メソッドに対して複数の呼び出しがある場合は、最後の呼び出しで指定されたコントロールがフォーカスを受け取ります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.ScriptManager.SetFocus(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SupportsPartialRendering">
      <MemberSignature Language="C#" Value="public bool SupportsPartialRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsPartialRendering" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />
      <MemberSignature Language="VB.NET" Value="Public Property SupportsPartialRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsPartialRendering { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SupportsPartialRendering : bool with get, set" Usage="System.Web.UI.ScriptManager.SupportsPartialRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントが部分ページ レンダリングをサポートしているかどうかを示す値を取得します。</summary>
        <value>クライアントが部分ページ レンダリングをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> プロパティが `false`に設定されている場合、<xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> プロパティは `false`を返します。  
  
 部分ページレンダリングがサポートされているかどうかを判断する既定のチェックでは、次の条件に該当する場合に `true` が返されます。  
  
-   <xref:System.Web.Configuration.HttpCapabilitiesBase.W3CDomVersion%2A> プロパティ値は1.0 以上である必要があります。  
  
-   <xref:System.Web.Configuration.HttpCapabilitiesBase.EcmaScriptVersion%2A> プロパティ値は1.0 以上である必要があります。  
  
-   <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> プロパティ値は、`true`に設定する必要があります。  
  
 <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> プロパティが明示的に設定されている場合、これらのチェックは使用されません。  
  
 コントロール開発者は、<xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> プロパティを使用して、部分ページレンダリングをサポートする必要があるかどうかを判断する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" /> プロパティは <see langword="false" /> であり、<see cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" /> プロパティは <see langword="true" /> に設定されています。  
  
または 
<see cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" /> イベントの後に <see cref="E:System.Web.UI.Control.Init" /> プロパティが設定されました。</exception>
        <altmember cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
        <altmember cref="T:System.Web.HttpBrowserCapabilities" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.LoadPostData">
      <MemberSignature Language="C#" Value="bool IPostBackDataHandler.LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Function LoadPostData (postDataKey As String, postCollection As NameValueCollection) As Boolean Implements IPostBackDataHandler.LoadPostData" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Web.UI.IPostBackDataHandler.LoadPostData(System::String ^ postDataKey, System::Collections::Specialized::NameValueCollection ^ postCollection) = System::Web::UI::IPostBackDataHandler::LoadPostData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">コントロールのキー識別子。</param>
        <param name="postCollection">受信するすべてのポスト データのコレクション。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />」をご覧ください。</summary>
        <returns>ポストバックの結果、<see langword="true" /> コントロールの状態が変化した場合は <see cref="T:System.Web.UI.ScriptManager" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.ScriptManager> のインスタンスが <xref:System.Web.UI.IPostBackDataHandler> インターフェイスにキャストされる場合のみ、使用できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
        <altmember cref="M:System.Web.UI.ScriptManager.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="void IPostBackDataHandler.RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostDataChangedEvent () Implements IPostBackDataHandler.RaisePostDataChangedEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() = System::Web::UI::IPostBackDataHandler::RaisePostDataChangedEvent;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent" />」をご覧ください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.ScriptManager> のインスタンスが <xref:System.Web.UI.IPostBackDataHandler> インターフェイスにキャストされる場合のみ、使用できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
        <altmember cref="M:System.Web.UI.ScriptManager.RaisePostDataChangedEvent" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostBackEvent (eventArgument As String) Implements IPostBackEventHandler.RaisePostBackEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System::String ^ eventArgument) = System::Web::UI::IPostBackEventHandler::RaisePostBackEvent;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Web ページの履歴状態を表すキーと値のペアが含まれる文字列。</param>
        <summary><see cref="T:System.Web.UI.ScriptManager" /> コントロールでポストバック イベントの処理と Web ページの履歴状態の読み込みができるようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.IsSecureConnection">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IScriptManager.IsSecureConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IScriptManager.IsSecureConnection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#IsSecureConnection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSecureConnection As Boolean Implements IScriptManager.IsSecureConnection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Web::UI::IScriptManager::IsSecureConnection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.IScriptManager.IsSecureConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterArrayDeclaration (System.Web.UI.Control control, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterArrayDeclaration(class System.Web.UI.Control control, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterArrayDeclaration(System::Web::UI::Control ^ control, System::String ^ arrayName, System::String ^ arrayValue) = System::Web::UI::IScriptManager::RegisterArrayDeclaration;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="arrayName">To be added.</param>
        <param name="arrayValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptBlock (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptBlock(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptBlock(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags) = System::Web::UI::IScriptManager::RegisterClientScriptBlock;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <param name="addScriptTags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptInclude (System.Web.UI.Control control, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptInclude(class System.Web.UI.Control control, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptInclude(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ url) = System::Web::UI::IScriptManager::RegisterClientScriptInclude;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="url">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptResource (System.Web.UI.Control control, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptResource(class System.Web.UI.Control control, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptResource(System::Web::UI::Control ^ control, Type ^ type, System::String ^ resourceName) = System::Web::UI::IScriptManager::RegisterClientScriptResource;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="resourceName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterDispose">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterDispose (System.Web.UI.Control control, string disposeScript);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterDispose(class System.Web.UI.Control control, string disposeScript) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterDispose(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterDispose(System::Web::UI::Control ^ control, System::String ^ disposeScript) = System::Web::UI::IScriptManager::RegisterDispose;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="disposeScript" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="disposeScript">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterExpandoAttribute (System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterExpandoAttribute(class System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterExpandoAttribute(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterExpandoAttribute(System::Web::UI::Control ^ control, System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode) = System::Web::UI::IScriptManager::RegisterExpandoAttribute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="controlId">To be added.</param>
        <param name="attributeName">To be added.</param>
        <param name="attributeValue">To be added.</param>
        <param name="encode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterHiddenField">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterHiddenField (System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterHiddenField(class System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterHiddenField(System::Web::UI::Control ^ control, System::String ^ hiddenFieldName, System::String ^ hiddenFieldValue) = System::Web::UI::IScriptManager::RegisterHiddenField;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="hiddenFieldName">To be added.</param>
        <param name="hiddenFieldValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterOnSubmitStatement (System.Web.UI.Control control, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterOnSubmitStatement(class System.Web.UI.Control control, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterOnSubmitStatement(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script) = System::Web::UI::IScriptManager::RegisterOnSubmitStatement;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterPostBackControl">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterPostBackControl(System::Web::UI::Control ^ control) = System::Web::UI::IScriptManager::RegisterPostBackControl;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterStartupScript">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterStartupScript (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterStartupScript(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterStartupScript(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags) = System::Web::UI::IScriptManager::RegisterStartupScript;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <param name="addScriptTags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.SetFocusInternal">
      <MemberSignature Language="C#" Value="void IScriptManager.SetFocusInternal (string clientID);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.SetFocusInternal(string clientID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#SetFocusInternal(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub SetFocusInternal (clientID As String) Implements IScriptManager.SetFocusInternal" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.SetFocusInternal(System::String ^ clientID) = System::Web::UI::IScriptManager::SetFocusInternal;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientID">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public override bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Visible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool with get, set" Usage="System.Web.UI.ScriptManager.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基本 <see cref="P:System.Web.UI.Control.Visible" /> クラスから継承される <see cref="T:System.Web.UI.Control" /> プロパティをオーバーライドして、この値が設定されないようにします。</summary>
        <value>すべてのケースで <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この値を設定しないようにするために、<xref:System.Web.UI.Control.Visible%2A> プロパティは <xref:System.Web.UI.ScriptManager> クラスでオーバーライドされます。 このプロパティに値が割り当てられている場合、<xref:System.NotImplementedException> エラーが発生します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">値が <see cref="P:System.Web.UI.ScriptManager.Visible" /> プロパティに代入されます。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
