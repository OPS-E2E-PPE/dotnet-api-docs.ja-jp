<Type Name="PageStatePersister" FullName="System.Web.UI.PageStatePersister">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1db575a6f394bfded5fde87cacd67d921e5b6d6e" /><Meta Name="ms.sourcegitcommit" Value="f9576bf8c61e3d46834aeeff50f858359f2a99ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/09/2020" /><Meta Name="ms.locfileid" Value="77105953" /></Metadata><TypeSignature Language="C#" Value="public abstract class PageStatePersister" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PageStatePersister extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageStatePersister" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PageStatePersister" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageStatePersister abstract" />
  <TypeSignature Language="F#" Value="type PageStatePersister = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ASP.NET ビューステート永続化機構の基本機能を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTTP 要求と応答は本質的にステートレスです。 HTTP 要求間の状態情報を保持するために、ASP.NET サーバーページは <xref:System.Web.UI.Page> 状態を格納できます。 この状態は、ビューステートと呼ばれ、ページおよびコントロールの設定とデータで構成されています。ページとコントロールは、ユーザーが最後にサーバーに対して行ったラウンドトリップで見て操作したものと同じように見えます。 複数のメカニズムがあり、同じページに対する連続した要求の間にビューステートを格納します。 抽象 <xref:System.Web.UI.PageStatePersister> クラスは、これらの状態情報格納機構の基本クラスを表します。  
  
 ASP.NET の既定のビューステート永続化機構では、ページ上の非表示の HTML 要素 (`type` 属性が `"hidden"`に設定されている要素) で、Base64 でエンコードされた文字列として状態情報を保持します。 ASP.NET ページは、<xref:System.Web.UI.IStateFormatter> インスタンスを使用してオブジェクトの状態情報をシリアル化および逆シリアル化するために、<xref:System.Web.UI.HiddenFieldPageStatePersister> オブジェクトを使用してこの作業を実行します。 または、帯域幅とリソースが限られているモバイルクライアントの <xref:System.Web.UI.SessionPageStatePersister> クラスを使用して、ページのビューステートをサーバーの <xref:System.Web.HttpContext.Session%2A> オブジェクトに格納することもできます。 場合によっては、ビューステートの永続化を完全に無効にすることがあります。 これを行うと、状態の永続化に依存するページやコントロールが正しく動作しなくなることがあります。 ページ状態管理とビューステートの詳細については、「 [ASP.NET State management の概要](https://docs.microsoft.com/previous-versions/aspnet/75x4ha6s(v=vs.100))」を参照してください。  
  
 コントロールを作成する場合は、コントロールの状態情報を <xref:System.Web.UI.Control.ViewState%2A> ディクショナリ (<xref:System.Web.UI.StateBag> オブジェクト) に格納できます。 開発者は、<xref:System.Web.UI.PageStatePersister.ControlState%2A> プロパティを使用してコントロールの状態を取得します。 <xref:System.Web.UI.Control.ViewState%2A> プロパティにキーと値を割り当て、<xref:System.Web.UI.Page> オブジェクトが要求間で状態情報をシリアル化します。 コントロールでカスタムの状態処理を実行するには、<xref:System.Web.UI.Control.LoadViewState%2A> メソッドと <xref:System.Web.UI.Control.SaveViewState%2A> メソッドをオーバーライドします。 このディクショナリに格納されている状態情報は、ページ開発者によってビューステートが無効にされていると失われます。 この問題を軽減するために、ASP.NET バージョン2.0 では、重大な状態情報を制御状態と呼ばれる別のオブジェクトに格納できます。 コントロールの状態オブジェクトは、ページ開発者によってビューステートが無効にされている場合には影響を受けません。 状態情報をコントロール状態オブジェクトに格納するには、コントロールが <xref:System.Web.UI.Control.LoadControlState%2A> メソッドと <xref:System.Web.UI.Control.SaveControlState%2A> メソッドをオーバーライドし、コントロールが初期化されるたびに状態情報をコントロール状態に格納するようにコントロールを登録する必要があります。 <xref:System.Web.UI.Control.OnInit%2A> メソッドをオーバーライドし、<xref:System.Web.UI.Page.RegisterRequiresControlState%2A> メソッドを呼び出すことによって、コントロールの状態を使用するようにコントロールを登録できます。 コントロールの開発時に <xref:System.Web.UI.Control.ViewState%2A> プロパティとコントロールの状態を使用する方法の詳細については、「[カスタム ASP.NET サーバーコントロールの開発](https://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef)」を参照してください。  
  
 既存のビューステート永続化メカニズムをサポートできないクライアントのビューステートを維持するために、<xref:System.Web.UI.PageStatePersister> クラスを拡張して独自のビューステート永続化メソッドを導入できます。また、ページアダプターを使用すると、ページが提供されるクライアントの種類に基づいて、異なるビューステート永続化メカニズムを使用するように ASP.NET アプリケーションを構成できます。 <xref:System.Web.UI.PageStatePersister> クラスから派生するクラスは、抽象 <xref:System.Web.UI.PageStatePersister.Save%2A> メソッドをオーバーライドして、ビューステートとコントロールの状態を永続メディアに格納し、<xref:System.Web.UI.PageStatePersister.Load%2A> メソッドをオーバーライドして抽出する必要があります。 ビューステートとコントロールの状態を文字列にシリアル化する必要がある場合は、<xref:System.Web.UI.PageStatePersister.StateFormatter%2A> プロパティを使用してアクセスされる <xref:System.Web.UI.IStateFormatter> オブジェクトを使用できます。 オブジェクトの状態情報を、Base64 でエンコードされた文字列に効率的にシリアル化および逆シリアル化します。 また、<xref:System.Web.UI.PageStatePersister.StateFormatter%2A> プロパティをオーバーライドして、独自のオブジェクト状態のシリアル化メカニズムを提供することもできます。  
  
   
  
## Examples  
 次のコード例では、Web サーバーにビューとコントロールの状態を保存する <xref:System.Web.UI.PageStatePersister> オブジェクトを作成する方法を示します。 `StreamPageStatePersister` は、<xref:System.Web.UI.PageStatePersister.Load%2A> メソッドと <xref:System.Web.UI.PageStatePersister.Save%2A> メソッドをオーバーライドして、ビューステート情報を抽出して保存する方法を示しています。 状態の永続化メカニズムはアダプティブレンダリングとクライアント機能に関連しているため、ASP.NET アプリケーションの `StreamPageStatePersister` をアクティブ化するために `MyPageAdapter` クラスが用意されています。 最後に、ブラウザー機能 (ブラウザー) ファイルが提供され、特定のクライアントクラス (この場合は既定の Web ブラウザー) に対して `MyPageAdapter` アダプターが有効になります。  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#1)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#1)]  
  
 次のコード例は、`StreamPageStatePersister`のインスタンスを返す <xref:System.Web.UI.Adapters.PageAdapter> クラスを作成する方法を示しています。これは、ASP.NET Web ページのビューとコントロールの状態を保持するために使用されます。  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/mypageadapter.cs#5)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/mypageadapter.vb#5)]  
  
 次のコンパイラコマンドラインを使用して、サンプルを実行するために使用できるアセンブリにこれらの2つのクラスをコンパイルします。 コンパイルされたアセンブリが、ASP.NET アプリケーションルートの下の \Bin ディレクトリにあることを確認します。  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/mypageadapter.cs#6)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/mypageadapter.vb#6)]  
  
 最後に、`MyPageAdapter` アダプターを有効にするには、ASP.NET アプリケーションルートの下にブラウザーという名前のディレクトリを作成し、構成情報を含むブラウザーファイルをインクルードする必要があります。 構成ファイルの `<refid>` 要素は、構成が既定のブラウザー構成ファイルの既定のブラウザーに指定された値をオーバーライドすることを示します。 この例では、(通常はアダプターが使用されていない) ASP.NET Web ページに対して `MyPageAdapter` が使用されます。  
  
```  
<browsers>  
    <browser refid="Default" >  
        <controlAdapters>  
            <adapter   
                controlType="System.Web.UI.Page"                              
                adapterType="Samples.AspNet.CS.MyPageAdapter" />  
        </controlAdapters>  
    </browser>  
</browsers>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ObjectStateFormatter" />
    <altmember cref="T:System.Web.UI.LosFormatter" />
    <altmember cref="T:System.Web.UI.Pair" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PageStatePersister (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.#ctor(System.Web.UI.Page)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PageStatePersister(System::Web::UI::Page ^ page);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageStatePersister : System.Web.UI.Page -&gt; System.Web.UI.PageStatePersister" Usage="new System.Web.UI.PageStatePersister page" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">ビューステート永続化機構が作成される <see cref="T:System.Web.UI.Page" />。</param>
        <summary><see cref="T:System.Web.UI.PageStatePersister" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="page" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ControlState">
      <MemberSignature Language="C#" Value="public object ControlState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ControlState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.ControlState" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ControlState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ControlState : obj with get, set" Usage="System.Web.UI.PageStatePersister.ControlState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オブジェクトを取得または設定します。このオブジェクトは、現在の <see cref="T:System.Web.UI.Page" /> オブジェクトによって格納されているコントロールが Web サーバーへの HTTP 要求間で永続化するために使用しているデータを表します。</summary>
        <value>ビューステート データを格納しているオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントロールの状態は、Web サーバーコントロールが機能する必要がある重大なビューステートデータで構成されるオブジェクトであり、通常のビューステート情報とは別のオブジェクトに含まれています。 コントロールの状態データは、ビューステートが <xref:System.Web.UI.Page> レベルで無効になっている場合は影響を受けませんが、を使用するための追加の実装手順が必要です。 コントロールの開発時に <xref:System.Web.UI.Control.ViewState%2A> のプロパティとコントロールの状態を使用する方法の詳細については、「[カスタム ASP.NET サーバーコントロールの開発](https://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.PageStatePersister> クラスから派生したクラスが <xref:System.Web.UI.PageStatePersister.ControlState%2A> プロパティを初期化する方法を示しています。 この例では、<xref:System.Web.UI.PageStatePersister.ControlState%2A> プロパティが <xref:System.Web.UI.Pair> オブジェクトの <xref:System.Web.UI.Pair.Second> フィールドに割り当てられ、<xref:System.Web.UI.ObjectStateFormatter> クラスを使用してシリアル化されています。 <xref:System.Web.UI.PageStatePersister.Load%2A> メソッドが呼び出されると、<xref:System.Web.UI.ObjectStateFormatter> クラスを使用してビューステートとコントロールの状態情報が逆シリアル化され、<xref:System.Web.UI.PageStatePersister.ControlState%2A> プロパティが結果の <xref:System.Web.UI.Pair> オブジェクトの <xref:System.Web.UI.Pair.Second> フィールドから初期化されます。 このコード例は、<xref:System.Web.UI.PageStatePersister> クラス用に用意されている大規模な例の一部です。  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public abstract void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.Load" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Load();" />
      <MemberSignature Language="F#" Value="abstract member Load : unit -&gt; unit" Usage="pageStatePersister.Load " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスによってオーバーライドされ、<see cref="T:System.Web.UI.Page" /> オブジェクトが自身のコントロール階層を初期化するときに、永続化された状態情報を逆シリアル化して読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageStatePersister> クラスから派生するクラスは、<xref:System.Web.UI.PageStatePersister.Load%2A> メソッドを実装して、<xref:System.Web.UI.PageStatePersister.ViewState%2A> および <xref:System.Web.UI.PageStatePersister.ControlState%2A> プロパティを保存形式から初期化します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.PageStatePersister> クラスから派生したクラスが <xref:System.Web.UI.PageStatePersister.Load%2A> メソッドを実装して、永続メディアからビューステートを読み込む方法を示しています。 `StreamPageStatePersister` は、ストリームからデータを読み取ろうとします。 <xref:System.Web.UI.IStateFormatter> オブジェクトを使用して、ビューステートデータを逆シリアル化し、<xref:System.Web.UI.PageStatePersister.ViewState%2A> プロパティと <xref:System.Web.UI.PageStatePersister.ControlState%2A> プロパティを初期化します。このプロパティは、ページがコントロールを初期化するために使用します。 このコード例は、<xref:System.Web.UI.PageStatePersister> クラス用に用意されている大規模な例の一部です。  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Page">
      <MemberSignature Language="C#" Value="protected System.Web.UI.Page Page { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Page Page" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.Page" />
      <MemberSignature Language="VB.NET" Value="Protected Property Page As Page" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::Page ^ Page { System::Web::UI::Page ^ get(); void set(System::Web::UI::Page ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Page : System.Web.UI.Page with get, set" Usage="System.Web.UI.PageStatePersister.Page" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Page</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ビューステート永続化機構が作成される対象の <see cref="T:System.Web.UI.Page" /> オブジェクトを取得または設定します。</summary>
        <value><see cref="T:System.Web.UI.Page" /> が関連付けられる <see cref="T:System.Web.UI.PageStatePersister" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の <xref:System.Web.HttpContext> オブジェクトにアクセスするには、<xref:System.Web.UI.PageStatePersister.Page%2A> プロパティを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public abstract void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.Save" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Save();" />
      <MemberSignature Language="F#" Value="abstract member Save : unit -&gt; unit" Usage="pageStatePersister.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスによってオーバーライドされ、<see cref="T:System.Web.UI.Page" /> オブジェクトがメモリから読み出されるときに、永続化された状態情報をシリアル化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageStatePersister> クラスから派生するクラスは、<xref:System.Web.UI.PageStatePersister.ViewState%2A> および <xref:System.Web.UI.PageStatePersister.ControlState%2A> プロパティの内容を永続メディアに保存するための <xref:System.Web.UI.PageStatePersister.Save%2A> メソッドを実装します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.PageStatePersister> クラスから派生するクラスが <xref:System.Web.UI.PageStatePersister.Save%2A> メソッドを実装して、ビューステートを永続メディアに永続化する方法を示しています。 `StreamPageStatePersister` は <xref:System.Web.UI.IStateFormatter> オブジェクトを使用して、<xref:System.Web.UI.PageStatePersister.ViewState%2A> プロパティと <xref:System.Web.UI.PageStatePersister.ControlState%2A> プロパティの内容をシリアル化します。 このコード例は、<xref:System.Web.UI.PageStatePersister> クラス用に用意されている大規模な例の一部です。  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#3)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateFormatter">
      <MemberSignature Language="C#" Value="protected System.Web.UI.IStateFormatter StateFormatter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IStateFormatter StateFormatter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.StateFormatter" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StateFormatter As IStateFormatter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::IStateFormatter ^ StateFormatter { System::Web::UI::IStateFormatter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StateFormatter : System.Web.UI.IStateFormatter" Usage="System.Web.UI.PageStatePersister.StateFormatter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IStateFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.IStateFormatter" /> メソッドおよび <see cref="P:System.Web.UI.PageStatePersister.ViewState" /> メッソドへの呼び出しで、<see cref="P:System.Web.UI.PageStatePersister.ControlState" /> プロパティおよび <see cref="M:System.Web.UI.PageStatePersister.Save" /> プロパティに格納されている状態情報のシリアル化と逆シリアル化に使用する <see cref="M:System.Web.UI.PageStatePersister.Load" /> オブジェクトを取得します。</summary>
        <value>オブジェクトの状態のシリアル化と逆シリアル化に使用する <see cref="T:System.Web.UI.IStateFormatter" /> のインスタンス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> プロパティをオーバーライドして、独自のビューステートフォーマッタを提供できます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.PageStatePersister> クラスから派生したクラスが <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> プロパティにアクセスして <xref:System.Web.UI.ObjectStateFormatter> オブジェクトを取得する方法を示しています。これは、<xref:System.Web.UI.IStateFormatter> インターフェイスの既定の実装であり、ビューステートとコントロール状態をストリームにシリアル化するために使用されます。 このコード例は、<xref:System.Web.UI.PageStatePersister> クラス用に用意されている大規模な例の一部です。  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#3)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewState">
      <MemberSignature Language="C#" Value="public object ViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.ViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property ViewState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ViewState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ViewState : obj with get, set" Usage="System.Web.UI.PageStatePersister.ViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オブジェクトを取得または設定します。このオブジェクトは、現在の <see cref="T:System.Web.UI.Page" /> オブジェクトによって格納されているコントロールが Web サーバーへの HTTP 要求間で永続化するために使用しているデータを表します。</summary>
        <value>ビューステート データを格納しているオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ビューステートは、Web サーバーコントロールが自身で機能してレンダリングする必要がある状態データのディクショナリです。 コントロール開発者は、通常、<xref:System.Web.UI.Control.ViewState%2A> プロパティを使用してビューステートオブジェクトにアクセスします。 ビューステートは、<xref:System.Web.UI.Page> レベルでビューステートが無効になっていると影響を受けます。その結果、このようなシナリオでは、コントロールが正しく動作しなくなる可能性があります。 コントロールの開発時に <xref:System.Web.UI.Control.ViewState%2A> とコントロールの状態を使用する方法の詳細については、「[カスタム ASP.NET サーバーコントロールの開発](https://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.PageStatePersister> クラスから派生したクラスが <xref:System.Web.UI.PageStatePersister.ViewState%2A> プロパティを初期化する方法を示しています。 この例では、<xref:System.Web.UI.PageStatePersister.ViewState%2A> プロパティが <xref:System.Web.UI.Pair> オブジェクトの <xref:System.Web.UI.Pair.First> フィールドに割り当てられ、<xref:System.Web.UI.ObjectStateFormatter> オブジェクトを使用してシリアル化されています。これは <xref:System.Web.UI.IStateFormatter> インターフェイスのインスタンスです。 <xref:System.Web.UI.PageStatePersister.Load%2A> メソッドが呼び出されると、<xref:System.Web.UI.ObjectStateFormatter> インターフェイスを使用してビューステート情報が逆シリアル化され、<xref:System.Web.UI.PageStatePersister.ViewState%2A> プロパティが結果の <xref:System.Web.UI.Pair> オブジェクトの <xref:System.Web.UI.Pair.First> フィールドから初期化されます。 このコード例は、<xref:System.Web.UI.PageStatePersister> クラス用に用意されている大規模な例の一部です。  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
