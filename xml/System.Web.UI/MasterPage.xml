<Type Name="MasterPage" FullName="System.Web.UI.MasterPage">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e971d7a4ec5135eafa12bcacd1bc0c2ef6d71424" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77244331" /></Metadata><TypeSignature Language="C#" Value="public class MasterPage : System.Web.UI.UserControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MasterPage extends System.Web.UI.UserControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.MasterPage" />
  <TypeSignature Language="VB.NET" Value="Public Class MasterPage&#xA;Inherits UserControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class MasterPage : System::Web::UI::UserControl" />
  <TypeSignature Language="F#" Value="type MasterPage = class&#xA;    inherit UserControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.UserControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VisualStudio.Web.WebForms.MasterPageWebFormDesigner, Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.ComponentModel.Design.IRootDesigner))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlBuilder(typeof(System.Web.UI.MasterPageControlBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VisualStudio.Web.WebForms.MasterPageWebFormDesigner, Microsoft.VisualStudio.Web, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.ComponentModel.Design.IRootDesigner))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:System.Web.UI.WebControls.Content" /> コントロールとそれぞれの子コントロールのみで構成されるページのテンプレートおよびマージ コンテナーとして機能します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 マスターページは、ASP.NET Web アプリケーションのコンテンツページのテンプレートコンテナーおよびマージページとして機能します。 マスターページは、コンテンツページのセット全体で構造とコンテンツを共有するための便利な方法を提供します。 コンテンツのプレースホルダーを使用して、コンテンツページのコンテンツに置き換えるマスターページのセクションを定義します。  
  
 マスターページとそれに関連するコンテンツページを使用する場合は、必要な XHTML ドキュメントタグ (`html`、`head`、`body`など) のみをマスターページに追加し、他の .aspx ファイル (ASP.NET ページ) をスタンドアロン Web ページとして作成することはできなくなりました。 コンテンツページでは、マスターページのプレースホルダーに挿入するコンテンツを定義します。  
  
 実行時にページに対して HTTP 要求が行われると、マスターページとコンテンツページは、コンテンツページと同じ名前の単一のクラスに結合されます。 生成されたコンパイル済みのマージクラスは、<xref:System.Web.UI.Page> クラスから派生します。  
  
 マスターページには、直接のマークアップとサーバーコントロール、およびコンテナーコントロールを含めることができます。 マスターページ内の <xref:System.Web.UI.WebControls.ContentPlaceHolder> コントロールの外部に配置されているすべての要素は、マスターページとコンテンツページをマージした結果として得られるすべてのページにレンダリングされます。  
  
 マスターページに関連する各コンテンツページは、 [@ page](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ydy4x04a(v=vs.100))ディレクティブの `MasterPageFile` 属性のマスターページを参照する必要があります。 コンテンツページには、`@ Page` ディレクティブと1つ以上の <xref:System.Web.UI.WebControls.Content> コントロールのみを含めることができます。 すべてのページテキスト、マークアップ、およびサーバーコントロールは、<xref:System.Web.UI.WebControls.Content> コントロール内に配置する必要があります。 <xref:System.Web.UI.WebControls.Content> コントロールが関連付けられているマスターページの <xref:System.Web.UI.WebControls.ContentPlaceHolder> コントロールを特定するには、<xref:System.Web.UI.WebControls.Content> コントロールの <xref:System.Web.UI.WebControls.Content.ContentPlaceHolderID%2A> プロパティを設定します。  
  
 実行時に、要求されたページの各 <xref:System.Web.UI.WebControls.Content> コントロールの動的コンテンツは、関連する <xref:System.Web.UI.WebControls.ContentPlaceHolder> コントロールの正確な場所にあるマスターページとマージされます。 マスターページ内のその他のマークアップとコントロールは影響を受けません。 イベントハンドラーは、マスタークラスとコンテンツページの両方で定義できます。 詳細については、「 [ASP.NET マスターおよびコンテンツページのイベント](https://docs.microsoft.com/previous-versions/aspnet/dct97kc3(v=vs.100))」を参照してください。  
  
 <xref:System.Web.UI.MasterPage> クラスは、拡張子が .master のファイルに関連付けられています。 これらのファイルは、実行時に <xref:System.Web.UI.MasterPage> オブジェクトとしてコンパイルされ、サーバーメモリにキャッシュされます。  
  
 マスターページは、基本 <xref:System.Web.UI.Page> クラスの <xref:System.Web.UI.Page.Master%2A> プロパティを使用して、コンテンツページで使用できるようになります。 <xref:System.Web.UI.Page.Master%2A> プロパティは、マスターページのインスタンスを返します。ただし、基本 <xref:System.Web.UI.MasterPage> クラスとして型指定されます。 マスターページのコントロール、プロパティ、および関数にアクセスするには、<xref:System.Web.UI.Page.Master%2A> プロパティを <xref:System.Web.UI.MasterPage> オブジェクトにキャストします。 マスターページのクラス名は、 [@ master](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms228176(v=vs.100))ディレクティブの `ClassName` 属性を使用して定義されます。  
  
> [!NOTE]
>  .Master 拡張子を持つファイルは、ブラウザーには提供されません。  
  
 マスターページで有効なディレクティブは、<xref:System.Web.UI.UserControl> オブジェクトで使用できるディレクティブと同じです。 次の属性を含めることができます。  
  
-   `AutoEventWireup`  
  
-   `ClassName`  
  
-   `CodeFile`  
  
-   `CompilerMode`  
  
-   `CompilerOptions`  
  
-   `Debug`  
  
-   `Description`  
  
-   `EnableTheming`  
  
-   `EnableViewState`  
  
-   `Explicit`  
  
-   `Inherits`  
  
-   `Language`  
  
-   `LinePragmas`  
  
-   `MasterPageFile`  
  
-   `Src`  
  
-   `Strict`  
  
-   `WarningLevel`  
  
 マスターページのディレクティブでは、個々のコンテンツページのディレクティブはオーバーライドされません。  
  
 マスターページは、ほとんどの場合、宣言によって作成されます。 プログラムを使用してマスターページを作成する場合は、<xref:System.Web.UI.MasterPage> クラスから直接派生します。 <xref:System.Web.UI.MasterPage> クラスを拡張するだけでなく、ソースファイルで呼び出したクラスに関連付けられているユーザーインターフェイス (UI) を視覚的に表示するために、.master ファイルを作成する必要があります。  
  
> [!NOTE]
>  最初に独自のクラスを作成してマスターページを作成する場合は、ページで使用されるクラスに必要なすべての名前空間を含める必要があります。  
  
 マスターページの詳細については、「 [ASP.NET マスターページ](https://docs.microsoft.com/previous-versions/aspnet/wtxbf3hh(v=vs.100))」を参照してください。  
  
   
  
## Examples  
 このセクションには、次の4つのコード例が含まれます。  
  
-   最初のコード例では、マスターページを宣言によって作成する方法を示します。  
  
-   2番目のコード例は、最初のコード例で作成したマスターページに関連付けられているコンテンツページを表します。  
  
-   3番目のコード例では、マスターページにプロパティを追加する方法を示します。  
  
-   4番目のコード例では、コンテンツページを使用してマスターページのパブリックプロパティにアクセスする方法を示します。  
  
 次の例では、マスターページを宣言によって作成し、コンテンツページを使用してコンテンツを追加する方法を示します。 最初の Web ページは、`MasterPageSample_1.master`という名前の .master ページです。  
  
```csharp  
<%@ Master Language="C#" %>  
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">  
<html >  
<head runat="server">  
    <title>MasterPage Example</title>  
</head>  
<body>  
    <form id="form1" runat="server">  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder1" runat="server" />  
    </div>  
    </form>  
</body>  
</html>  
```  
  
```vb  
<%@ Master Language="VB" %>  
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">  
<html >  
<head runat="server">  
    <title>MasterPage Example</title>  
</head>  
<body>  
    <form id="form1" runat="server">  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder1" runat="server" />  
    </div>  
    </form>  
</body>  
</html>  
```  
  
 次の例は、`MasterPageSample_1.master`に関連付けられているコンテンツページを表しています。 これには、<xref:System.Web.UI.WebControls.Content> コントロールが含まれており、<xref:System.Web.UI.WebControls.Content.ContentPlaceHolderID%2A> プロパティを使用して、コンテンツが関連付けられている <xref:System.Web.UI.WebControls.ContentPlaceHolder> コントロールを識別します。  
  
```csharp  
<%@ Page Language="C#" MasterPageFile="~/MasterPageSample_1cs.master" Title="Content Page"%>  
  
<asp:content   
    runat="server"  
    contentplaceholderid="ContentPlaceHolder1" >Hello, Master Pages!</asp:content>  
```  
  
```vb  
<%@ Page Language="VB" MasterPageFile="~/MasterPageSample_1vb.master" Title="Content Page"%>  
  
<asp:content   
    runat="server"  
    contentplaceholderid="ContentPlaceHolder1" >Hello, Master Pages!</asp:content>  
```  
  
 次の例では、マスターページにプロパティを追加する方法を示します。 `ClassName` 属性は、マスターページの名前を指定するために使用されます。  
  
```csharp  
<%@ Master Language="C#" ClassName="MasterExample" %>  
  
<script runat="server">  
        public string SiteName  
        {  
            get { return "My Site Name"; }  
        }  
</script>  
  
<html >  
<head runat="server">  
    <title>MasterPage Example</title>  
</head>  
<body>  
    <form id="form1" runat="server">  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder1" runat="server">  
        </asp:contentplaceholder>  
    </div>  
    </form>  
</body>  
</html>  
```  
  
```vb  
<%@ Master Language="VB" ClassName="MasterExample" %>  
  
<script runat="server">  
  Public ReadOnly Property SiteName() As String  
    Get  
      Return "My Site Name"  
    End Get  
  End Property  
  
</script>  
  
<html >  
<head runat="server">  
    <title>MasterPage Example</title>  
</head>  
<body>  
    <form id="form1" runat="server">  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder1" runat="server">  
        </asp:contentplaceholder>  
    </div>  
    </form>  
</body>  
</html>  
```  
  
 次の例では、コンテンツページを使用して、前のコード例のマスターページで `SiteName` パブリックプロパティにアクセスする方法を示します。  
  
```csharp  
<%@ Page Language="C#" MasterPageFile="~/MasterPage.master" Title="MasterPage Example" %>  
  
<script runat="server">  
  protected void Page_Load(object sender, EventArgs e)  
  {  
    MasterExample m = (MasterExample)Page.Master;  
    mylabel.Text = m.SiteName;  
  }  
</script>  
  
<asp:Content ID="Content1" ContentPlaceHolderID="ContentPlaceHolder1" runat="Server">  
    Hello, Master Pages!  
    <asp:Label runat="server" Text="Label" ID="mylabel"></asp:Label>  
</asp:Content>  
```  
  
```vb  
<%@ Page Language="VB" MasterPageFile="~/MasterPage.master" Title="MasterPage Example" %>  
  
<script runat="server">  
  
  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)  
    Dim m As MasterExample = CType(Page.Master, MasterPage)  
    mylabel.Text = m.SiteName  
  End Sub  
</script>  
  
<asp:Content ID="Content1" ContentPlaceHolderID="ContentPlaceHolder1" runat="Server">  
    Hello, Master Pages!  
    <asp:Label runat="server" Text="Label" ID="mylabel"></asp:Label>  
</asp:Content>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.MasterPageControlBuilder" />
    <altmember cref="T:System.Web.UI.WebControls.ContentPlaceHolder" />
    <altmember cref="T:System.Web.UI.WebControls.Content" />
    <altmember cref="T:System.Web.UI.UserControl" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/wtxbf3hh(v=vs.100)">ASP.NET マスターページの概要</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/x2b3ktt7(v=vs.100)">入れ子になったマスターページ</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MasterPage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.MasterPage.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MasterPage();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.MasterPage" /> クラスの新しいインスタンスを作成します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddContentTemplate">
      <MemberSignature Language="C#" Value="protected internal void AddContentTemplate (string templateName, System.Web.UI.ITemplate template);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddContentTemplate(string templateName, class System.Web.UI.ITemplate template) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.MasterPage.AddContentTemplate(System.String,System.Web.UI.ITemplate)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddContentTemplate (templateName As String, template As ITemplate)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddContentTemplate(System::String ^ templateName, System::Web::UI::ITemplate ^ template);" />
      <MemberSignature Language="F#" Value="member this.AddContentTemplate : string * System.Web.UI.ITemplate -&gt; unit" Usage="masterPage.AddContentTemplate (templateName, template)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templateName" Type="System.String" />
        <Parameter Name="template" Type="System.Web.UI.ITemplate" />
      </Parameters>
      <Docs>
        <param name="templateName"><see cref="T:System.Web.UI.WebControls.Content" /> の一意の名前。</param>
        <param name="template"><see cref="T:System.Web.UI.WebControls.Content" />。</param>
        <summary><see cref="T:System.Web.UI.WebControls.Content" /> コントロールを <see cref="P:System.Web.UI.MasterPage.ContentTemplates" /> ディクショナリに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したマスターページクラスは、<xref:System.Web.UI.MasterPage.AddContentTemplate%2A> メソッドを使用して、<xref:System.Web.UI.MasterPage.ContentTemplates%2A> ディクショナリに <xref:System.Web.UI.WebControls.Content> コントロールを追加できます。 派生型は、通常、<xref:System.Web.UI.MasterPage.AddContentTemplate%2A> メソッドをオーバーライドしません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">同じ名前の <see cref="T:System.Web.UI.WebControls.Content" /> コントロールが <see cref="P:System.Web.UI.MasterPage.ContentTemplates" /> ディクショナリに既に存在します。</exception>
        <altmember cref="P:System.Web.UI.MasterPage.ContentTemplates" />
      </Docs>
    </Member>
    <Member MemberName="ContentPlaceHolders">
      <MemberSignature Language="C#" Value="protected internal System.Collections.IList ContentPlaceHolders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList ContentPlaceHolders" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.MasterPage.ContentPlaceHolders" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property ContentPlaceHolders As IList" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Collections::IList ^ ContentPlaceHolders { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentPlaceHolders : System.Collections.IList" Usage="System.Web.UI.MasterPage.ContentPlaceHolders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>別のコンテンツ領域を定義するときにマスター ページで使用される <see cref="T:System.Web.UI.WebControls.ContentPlaceHolder" /> コントロールのリストを取得します。</summary>
        <value>コンテンツ ページにある <see cref="T:System.Collections.IList" /> コントロールのプレースホルダーとしてマスター ページで使用される <see cref="T:System.Web.UI.WebControls.ContentPlaceHolder" /> コントロールの <see cref="T:System.Web.UI.WebControls.Content" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したマスターページクラスは、<xref:System.Web.UI.MasterPage.ContentPlaceHolders%2A> プロパティにアクセスして、マスターに含まれる現在の <xref:System.Web.UI.WebControls.ContentPlaceHolder> コントロールを一覧表示します。 派生型は、通常、<xref:System.Web.UI.MasterPage.ContentPlaceHolders%2A> プロパティをオーバーライドしません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentTemplates">
      <MemberSignature Language="C#" Value="protected internal System.Collections.IDictionary ContentTemplates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary ContentTemplates" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.MasterPage.ContentTemplates" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property ContentTemplates As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Collections::IDictionary ^ ContentTemplates { System::Collections::IDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentTemplates : System.Collections.IDictionary" Usage="System.Web.UI.MasterPage.ContentTemplates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マスター ページに関連付けられているコンテンツ コントロールのリストを取得します。</summary>
        <value>マスター ページに関連付けられているコンテンツ コントロールの <see cref="T:System.Collections.IList" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したマスターページクラスは、<xref:System.Web.UI.MasterPage.ContentTemplates%2A> プロパティにアクセスして、関連付けられているコンテンツページで定義されている現在の <xref:System.Web.UI.WebControls.Content> コントロールを取得します。 派生型は、通常、<xref:System.Web.UI.MasterPage.ContentTemplates%2A> プロパティをオーバーライドしません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InstantiateInContentPlaceHolder">
      <MemberSignature Language="C#" Value="public void InstantiateInContentPlaceHolder (System.Web.UI.Control contentPlaceHolder, System.Web.UI.ITemplate template);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InstantiateInContentPlaceHolder(class System.Web.UI.Control contentPlaceHolder, class System.Web.UI.ITemplate template) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.MasterPage.InstantiateInContentPlaceHolder(System.Web.UI.Control,System.Web.UI.ITemplate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InstantiateInContentPlaceHolder (contentPlaceHolder As Control, template As ITemplate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InstantiateInContentPlaceHolder(System::Web::UI::Control ^ contentPlaceHolder, System::Web::UI::ITemplate ^ template);" />
      <MemberSignature Language="F#" Value="member this.InstantiateInContentPlaceHolder : System.Web.UI.Control * System.Web.UI.ITemplate -&gt; unit" Usage="masterPage.InstantiateInContentPlaceHolder (contentPlaceHolder, template)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentPlaceHolder" Type="System.Web.UI.Control" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="template" Type="System.Web.UI.ITemplate" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="contentPlaceHolder">コンテンツのコンテナーを表すコントロール。</param>
        <param name="template">使用する <see cref="T:System.Web.UI.WebControls.Content" /> インスタンス。</param>
        <summary>マスター ページを所有するページに現在のテンプレート コントロールを設定するためのメソッドを提供します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Master">
      <MemberSignature Language="C#" Value="public System.Web.UI.MasterPage Master { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.MasterPage Master" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.MasterPage.Master" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Master As MasterPage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::MasterPage ^ Master { System::Web::UI::MasterPage ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Master : System.Web.UI.MasterPage" Usage="System.Web.UI.MasterPage.Master" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.MasterPage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>入れ子になったマスター ページの現在のマスターの親マスター ページを取得します。</summary>
        <value>現在のマスター ページの親であるマスター ページ。現在のマスター ページに親が存在しない場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 マスターページ階層は実行時に構築できないため、<xref:System.Web.UI.MasterPage.Master%2A> プロパティは読み取り専用です。  
  
   
  
## Examples  
 ここでは、3つのコード例について説明します。 最初のコード例では、入れ子になったマスターページを作成する方法を示しています。2番目のコード例では、最初のコード例で作成したマスターページを参照する方法を示してい`.`。 3番目のコード例では、コンテンツページを使用して、2番目のコード例で作成したマスターページを参照する方法を示します。  
  
 次のコード例は、入れ子になったマスターページを作成し、`ParentMasterPage_1`という名前の親マスターページを表す方法を示しています。  
  
```csharp  
<%@ Master Language="C#" %>  
  
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">  
  
<html >  
<head runat="server">  
    <title>Nested Master Page Example</title>  
</head>  
<body>  
    <form id="form1" runat="server">  
    <h1>This is content in the parent master page.</h1>  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder1" runat="server">  
        </asp:contentplaceholder>  
    </div>  
    </form>  
</body>  
</html>  
```  
  
```vb  
<%@ Master Language="VB" %>  
  
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">  
  
<html >  
<head runat="server">  
    <title>Nested Master Page Example</title>  
</head>  
<body>  
    <form id="form1" runat="server">  
    <h1>This is content in the parent master page.</h1>  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder1" runat="server">  
        </asp:contentplaceholder>  
    </div>  
    </form>  
</body>  
</html>  
```  
  
 次のコード例では、前のコード例で作成したマスターページを参照する `ChildMasterPage_1` という名前の入れ子になったマスターページを使用する方法を示します。  
  
```csharp  
<%@ Master Language="C#" MasterPageFile="~/ParentMasterPage_1cs.master" %>  
  
<asp:Content Runat="Server" ContentPlaceHolderID="ContentPlaceHolder1">  
    <h2>This is the content of a nested Master Page.</h2>  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder2" runat="server">  
        </asp:contentplaceholder>  
    </div>  
</asp:Content>  
```  
  
```vb  
<%@ Master Language="VB" MasterPageFile="~/ParentMasterPage_1vb.master" %>  
  
<asp:Content Runat="Server" ContentPlaceHolderID="ContentPlaceHolder1">  
    <h2>This is the content of a nested Master Page.</h2>  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder2" runat="server">  
        </asp:contentplaceholder>  
    </div>  
</asp:Content>  
```  
  
 次のコード例は、前のコード例で作成した `ChildMasterPage_1` を参照する `ContentPage` という名前のコンテンツページを使用する方法を示しています。  
  
```csharp  
<%@ Page Language="C#" MasterPageFile="~/ChildMasterPage_1cs.master" Title="Untitled Page"%>  
  
<asp:content runat="server" contentplaceholderid="ContentPlaceHolder2">  
This is the content of a Content control.  
</asp:content>  
```  
  
```vb  
<%@ Page Language="VB" MasterPageFile="~/ChildMasterPage_1vb.master" Title="Untitled Page"%>  
  
<asp:content runat="server" contentplaceholderid="ContentPlaceHolder2">  
This is the content of a Content control.  
</asp:content>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/x2b3ktt7(v=vs.100)">入れ子になったマスターページ</related>
      </Docs>
    </Member>
    <Member MemberName="MasterPageFile">
      <MemberSignature Language="C#" Value="public string MasterPageFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MasterPageFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.MasterPage.MasterPageFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MasterPageFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MasterPageFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MasterPageFile : string with get, set" Usage="System.Web.UI.MasterPage.MasterPageFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のコンテンツが格納されているマスター ページの名前を取得または設定します。</summary>
        <value>現在のマスター ページの親であるマスター ページの名前。現在のマスター ページに親が存在しない場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 ここでは、3つのコード例について説明します。 最初のコード例では、入れ子になったマスターページを作成する方法を示しています。2番目のコード例では、最初のコード例で作成したマスターページを参照する方法を示してい`.`。 3番目のコード例では、コンテンツページを使用して、2番目のコード例で作成したマスターページを参照する方法を示します。  
  
 次のコード例は、入れ子になったマスターページを作成し、`ParentMasterPage_1`という名前の親マスターページを表す方法を示しています。  
  
```csharp  
<%@ Master Language="C#" %>  
  
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">  
  
<html >  
<head runat="server">  
    <title>Nested Master Page Example</title>  
</head>  
<body>  
    <form id="form1" runat="server">  
    <h1>This is content in the parent master page.</h1>  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder1" runat="server">  
        </asp:contentplaceholder>  
    </div>  
    </form>  
</body>  
</html>  
```  
  
```vb  
<%@ Master Language="VB" %>  
  
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">  
  
<html >  
<head runat="server">  
    <title>Nested Master Page Example</title>  
</head>  
<body>  
    <form id="form1" runat="server">  
    <h1>This is content in the parent master page.</h1>  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder1" runat="server">  
        </asp:contentplaceholder>  
    </div>  
    </form>  
</body>  
</html>  
```  
  
 次のコード例では、前のコード例で作成したマスターページを参照する `ChildMasterPage_1` という名前の入れ子になったマスターページを使用する方法を示します。  
  
```csharp  
<%@ Master Language="C#" MasterPageFile="~/ParentMasterPage_1cs.master" %>  
  
<asp:Content Runat="Server" ContentPlaceHolderID="ContentPlaceHolder1">  
    <h2>This is the content of a nested Master Page.</h2>  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder2" runat="server">  
        </asp:contentplaceholder>  
    </div>  
</asp:Content>  
```  
  
```vb  
<%@ Master Language="VB" MasterPageFile="~/ParentMasterPage_1vb.master" %>  
  
<asp:Content Runat="Server" ContentPlaceHolderID="ContentPlaceHolder1">  
    <h2>This is the content of a nested Master Page.</h2>  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder2" runat="server">  
        </asp:contentplaceholder>  
    </div>  
</asp:Content>  
```  
  
 次のコード例は、前のコード例で作成した `ChildMasterPage_1` を参照する `ContentPage` という名前のコンテンツページを使用する方法を示しています。  
  
```csharp  
<%@ Page Language="C#" MasterPageFile="~/ChildMasterPage_1cs.master" Title="Untitled Page"%>  
  
<asp:content runat="server" contentplaceholderid="ContentPlaceHolder2">  
This is the content of a Content control.  
</asp:content>  
```  
  
```vb  
<%@ Page Language="VB" MasterPageFile="~/ChildMasterPage_1vb.master" Title="Untitled Page"%>  
  
<asp:content runat="server" contentplaceholderid="ContentPlaceHolder2">  
This is the content of a Content control.  
</asp:content>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.MasterPage.MasterPageFile" /> プロパティを設定できるのは、<see cref="E:System.Web.UI.Page.PreInit" /> イベントの中か前だけです。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/x2b3ktt7(v=vs.100)">入れ子になったマスターページ</related>
      </Docs>
    </Member>
  </Members>
</Type>
