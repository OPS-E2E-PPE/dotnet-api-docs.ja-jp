<Type Name="ClientScriptManager" FullName="System.Web.UI.ClientScriptManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="247741a791bcc13dd2c749f7a1c5806e39fc908e" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78760784" /></Metadata><TypeSignature Language="C#" Value="public sealed class ClientScriptManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ClientScriptManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ClientScriptManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClientScriptManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClientScriptManager sealed" />
  <TypeSignature Language="F#" Value="type ClientScriptManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Web アプリケーションのクライアント スクリプトを管理するためのメソッドを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager> クラスは、クライアントスクリプトを管理し、Web アプリケーションに追加するために使用されます。 <xref:System.Web.UI.ClientScriptManager> クラスへの参照は、<xref:System.Web.UI.Page> オブジェクトの <xref:System.Web.UI.Page.ClientScript%2A> プロパティから取得できます。  
  
 ページの HTML マークアップにスクリプトを含めることで、クライアントスクリプトを Web ページに宣言によって追加できます。 ただし、クライアントスクリプトを動的に追加する必要がある場合もあります。 スクリプトを動的に追加するには、スクリプトを追加するタイミングと方法に応じて、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッド、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> メソッド、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> メソッド、または <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> メソッドを使用します。 詳細については、「[方法: ASP.NET Web ページにクライアントスクリプトを動的に追加](https://msdn.microsoft.com/library/e89f1306-e43d-49ae-a66a-e18b71007666)する」を参照してください。  
  
 <xref:System.Web.UI.ClientScriptManager> クラスは、キー <xref:System.String> と <xref:System.Type>によってスクリプトを一意に識別します。 同じキーと種類のスクリプトは重複していると見なされます。 スクリプトの種類を使用すると、ページで使用されている可能性のあるさまざまなユーザーコントロールからの類似したスクリプトを混同しないようにすることができます。  
  
 <xref:System.Web.UI.ClientScriptManager> クラスを使用すると、ポストバックを実行せずにクライアントからサーバーコードを実行することが望ましい状況でクライアントコールバックを呼び出すことができます。 これは、サーバーへの帯域外コールバックの実行と呼ばれます。 クライアントコールバックでは、クライアントスクリプト関数は、ASP.NET Web ページに非同期要求を送信します。 Web ページは、通常のライフサイクルの変更されたバージョンを実行して、コールバックを処理します。 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> メソッドを使用して、クライアント関数への参照を取得します。この関数が呼び出されると、サーバーイベントへのクライアントコールバックが開始されます。 詳細については、「[ポストバックを使用しないクライアントコールバックの実装](https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100))」を参照してください。  
  
> [!NOTE]
>  スクリプトコールバックは、ドキュメントオブジェクトモデル (DOM) をサポートしていない古いブラウザーでは機能せず、クライアントで ECMAScript が有効になっている必要があります。 ブラウザーでコールバックがサポートされているかどうかを確認するには、<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> プロパティを使用します。このプロパティには、ASP.NET 組み込み <xref:System.Web.HttpContext.Request%2A> オブジェクトの <xref:System.Web.HttpRequest.Browser%2A> プロパティを使用してアクセスできます。  
  
 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッドと <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> メソッドを使用して、クライアントポストバックイベントを定義します。 これらのメソッドを使用すると、クライアントスクリプト関数が呼び出されると、サーバーはページにポストバックされます。 クライアントポストバックイベントは、クライアントのポストバックイベントを処理するために Web ページが通常のライフサイクルを完了するという、クライアントコールバックとは異なります。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.Button> コントロールを使用しており、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> プロパティが `false`に設定されている場合は、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッドを使用して、<xref:System.Web.UI.WebControls.Button> コントロールのクライアントポストバックイベントを返すことができます。  
  
 <xref:System.Web.UI.WebControls.Button> コントロール、<xref:System.Web.UI.WebControls.ImageButton> コントロール、および <xref:System.Web.UI.WebControls.LinkButton> コントロールの <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> プロパティを使用して、クライアントスクリプトを実行できます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager> クラスの <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッドの使用方法を示しています。 ページには、`PopupScript`という2つのクライアントスクリプトが定義されています。ページが読み込まれると警告メッセージが表示され、`ButtonClickScript`は HTML ボタンの `onClick` イベントのクライアントハンドラーを定義します。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback" />
    <altmember cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/3hc29e2a(v=vs.100)">ASP.NET Web ページのクライアントスクリプト</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)">ASP.NET ページでポストバックを使用しないクライアントコールバック</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetCallbackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コールバックが開始されます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackEventReference (control As Control, argument As String, clientCallback As String, context As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">クライアント コールバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。 このコントロールは <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスを実装し、<see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドを提供している必要があります。</param>
        <param name="argument">クライアント スクリプトからサーバーに渡される引数。 
 <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッド</param>
        <param name="clientCallback">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</param>
        <param name="context">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。 このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</param>
        <summary>クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コールバックが開始されます。 このオーバーロードされたメソッドに対するクライアント関数には、指定されたコントロール、引数、クライアント スクリプト、およびコンテキストが含まれます。</summary>
        <returns>クライアント コールバックを呼び出すクライアント関数の名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29> メソッドは、ページの通常のライフサイクルの変更されたバージョンであるサーバーへの帯域外コールバックを実行します。 詳細については、「[ポストバックを使用しないクライアントコールバックの実装](https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100))」を参照してください。  
  
> [!NOTE]
>  ブラウザーが Microsoft Internet Explorer (バージョン5.0 以降) の場合、スクリプトコールバック機構は、Microsoft の XmlHttp COM オブジェクトを介して実装され、ActiveX コントロールを実行するようにブラウザーを設定する必要があります。 その他のブラウザーでは、ブラウザーのローカルドキュメントオブジェクトモデル (DOM) を使用する XMLHttpRequest が使用されます。 ブラウザーがクライアントコールバックをサポートしているかどうかを確認するには、<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> プロパティを使用します。 ブラウザーが HTTP 経由の XML をサポートしているかどうかを確認するには、<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A> プロパティを使用します。 両方のプロパティには、組み込みの ASP.NET <xref:System.Web.HttpContext.Request%2A> オブジェクトの <xref:System.Web.HttpRequest.Browser%2A> プロパティを使用してアクセスできます。  
  
 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> メソッドの <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> のオーバーロードは、HTTP 経由で XML を使用して同期的にコールバックを実行します。 コールバックシナリオでデータを同期的に送信する場合、同期コールバックはすぐに制御を戻し、ブラウザーをブロックしません。 2つの同期コールバックコールバックは、ブラウザーで同時に実行することはできません。 現在保留中の同期コールバックが2番目に発生した場合は、2番目の同期コールバックによって最初のコールバックが取り消され、2番目のコールバックだけが返されます。  
  
 データを非同期で送信するには、`useAsync` パラメーターを受け取るオーバーロードのいずれかを使用します。これは、この動作を制御するブール値です。 非同期のシナリオでは、複数の保留中のコールバックを使用できます。ただし、が返される順序は、開始された順序と一致するとは限りません。  
  
 さらに、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> メソッドのこのオーバーロードは、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> メソッドによって生成されたエラー状態のケースを処理するクライアント関数を指定していません。 クライアントエラーのコールバックハンドラーを指定するには、`clientErrorCallback` パラメーターを受け取るオーバーロードのいずれかを使用します。  
  
 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29> メソッドは、省略可能な文字列 `argument` パラメーターを受け取り、文字列を返します。 複数の値を渡すか、または複数の値を受け取るには、それぞれの値を入力文字列または戻り値として連結します。  
  
> [!NOTE]
>  スクリプトのコールバック操作中に更新する必要があるページまたはコントロールのプロパティの実装では、ビューステートを使用しないようにしてください。 プロパティがページ要求を維持する場合は、セッション状態を使用できます。  
  
   
  
## Examples  
 次のコード例は、整数をインクリメントするクライアントコールバックシナリオで、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> メソッドの2つのオーバーロードを使用する方法を示しています。  
  
 2つのコールバック機構が表示されます。これらの違いは、`context` パラメーターを使用することです。 `ReceiveServerData1` クライアントコールバック関数は、`context` パラメーターを使用して提供されます。 これに対し、`ReceiveServerData2` クライアントコールバック関数は、ページの `<script>` ブロックで定義されます。 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> メソッドは、渡された値をインクリメントするサーバーハンドラーであり、<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> メソッドはインクリメントされた値を文字列として返します。 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> メソッドがエラーを返すと、`ProcessCallBackError` クライアント関数が呼び出されます。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/cs/getcallbackeventreference.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/vb/getcallbackeventreference.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">指定された <see cref="T:System.Web.UI.Control" /> に <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスが実装されていません。</exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)">ASP.NET ページでポストバックを使用しないクライアントコールバック</related>
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackEventReference (control As Control, argument As String, clientCallback As String, context As String, useAsync As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">クライアント コールバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。 このコントロールは <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスを実装し、<see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドを提供している必要があります。</param>
        <param name="argument">クライアント スクリプトからサーバーに渡される引数。 
 <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッド</param>
        <param name="clientCallback">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</param>
        <param name="context">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。 このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</param>
        <param name="useAsync">非同期コールバックを実行する場合は <see langword="true" />。同期コールバックを実行する場合は <see langword="false" />。</param>
        <summary>クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コール バックが開始されます。 このオーバーロードされたメソッドに対するクライアント関数には、指定されたコントロール、引数、クライアント スクリプト、コンテキスト、およびブール値が含まれます。</summary>
        <returns>クライアント コールバックを呼び出すクライアント関数の名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> メソッドのこのオーバーロードには、`useAsync` パラメーターが必要です。これにより、値を `true`に設定することによって、クライアントコールバックを非同期的に実行できます。 このメソッドのオーバーロードバージョンでは、`useAsync` パラメーターを必要としません。既定では、値は `false` に設定されます。  
  
 このメソッドの詳細については、「オーバーロード <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> メソッドの解説」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">指定された <see cref="T:System.Web.UI.Control" /> に <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスが実装されていません。</exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)">ASP.NET ページでポストバックを使用しないクライアントコールバック</related>
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackEventReference (target As String, argument As String, clientCallback As String, context As String, clientErrorCallback As String, useAsync As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::String ^ target, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, System::String ^ clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : string * string * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (target, argument, clientCallback, context, clientErrorCallback, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target">クライアント コールバックを処理するサーバー <see cref="T:System.Web.UI.Control" /> の名前。 このコントロールは <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスを実装し、<see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドを提供している必要があります。</param>
        <param name="argument">クライアント スクリプトからサーバーに渡される引数。 
 <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッド</param>
        <param name="clientCallback">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</param>
        <param name="context">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。 このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</param>
        <param name="clientErrorCallback">サーバー イベント ハンドラーでエラーが発生した際の結果を受け取るクライアント イベント ハンドラーの名前。</param>
        <param name="useAsync">非同期コールバックを実行する場合は <see langword="true" />。同期コールバックを実行する場合は <see langword="false" />。</param>
        <summary>クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コール バックが開始されます。 このオーバーロードされたメソッドに対するクライアント関数には、指定されたターゲット、引数、クライアント スクリプト、コンテキスト、エラー ハンドラー、およびブール値が含まれます。</summary>
        <returns>クライアント コールバックを呼び出すクライアント関数の名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> メソッドのこのオーバーロードは、<xref:System.Web.UI.Control> パラメーターではなく `target` 文字列パラメーターを受け取ります。 このオーバーロードは、コールバックがコントロールの <xref:System.Web.UI.Control.UniqueID%2A> を含む文字列以外に戻るようにする場合に使用します。  
  
 さらに、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> メソッドのこのオーバーロードには、`useAsync` と `clientErrorCallback` パラメーターが必要です。 `useAsync` パラメーターを使用すると、値を `true`に設定することによって、クライアントコールバックを非同期的に実行できます。 このメソッドのオーバーロードバージョンでは、`useAsync` パラメーターを必要としません。既定では、値は `false` に設定されます。 `clientErrorCallback` パラメーターを使用すると、サーバーハンドラー (<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> メソッド) によってエラーが返された場合に呼び出されるクライアント関数の名前を定義できます。 `clientErrorCallback` パラメーターを必要としない、このメソッドのオーバーロードバージョンでは、値を null に設定します。  
  
 このメソッドの詳細については、「オーバーロード <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> メソッドの解説」を参照してください。  
  
   
  
## Examples  
 次のコード例は、整数をインクリメントするクライアントコールバックシナリオで、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> メソッドの2つのオーバーロードを使用する方法を示しています。  
  
 2つのコールバック機構が表示されます。これらの違いは、`context` パラメーターを使用することです。 `ReceiveServerData1` クライアントコールバック関数は、`context` パラメーターを使用して提供されます。 これに対し、`ReceiveServerData2` クライアントコールバック関数は、ページの `<script>` ブロックで定義されます。 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> メソッドは、渡された値をインクリメントするサーバーハンドラーであり、<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> メソッドはインクリメントされた値を文字列として返します。 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> メソッドがエラーを返すと、クライアント関数 `ProcessCallBackError` が呼び出されます。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/cs/getcallbackeventreference.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/vb/getcallbackeventreference.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <altmember cref="P:System.Web.UI.Control.UniqueID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)">ASP.NET ページでポストバックを使用しないクライアントコールバック</related>
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackEventReference (control As Control, argument As String, clientCallback As String, context As String, clientErrorCallback As String, useAsync As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, System::String ^ clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context, clientErrorCallback, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">クライアント コールバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。 このコントロールは <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスを実装し、<see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドを提供している必要があります。</param>
        <param name="argument">クライアント スクリプトからサーバーの <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドに渡される引数。</param>
        <param name="clientCallback">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</param>
        <param name="context">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。 このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</param>
        <param name="clientErrorCallback">サーバー イベント ハンドラーでエラーが発生した際の結果を受け取るクライアント イベント ハンドラーの名前。</param>
        <param name="useAsync">非同期コールバックを実行する場合は <see langword="true" />。同期コールバックを実行する場合は <see langword="false" />。</param>
        <summary>クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コール バックが開始されます。 このオーバーロードされたメソッドに対するクライアント関数には、指定されたコントロール、引数、クライアント スクリプト、コンテキスト、エラー ハンドラー、およびブール値が含まれます。</summary>
        <returns>クライアント コールバックを呼び出すクライアント関数の名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> メソッドのこのオーバーロードには、`useAsync` と `clientErrorCallback` パラメーターが必要です。 `useAsync` パラメーターを使用すると、値を `true`に設定することによって、クライアントコールバックを非同期的に実行できます。 このメソッドのオーバーロードバージョンでは、`useAsync` パラメーターを必要としません。既定では、値は `false` に設定されます。 `clientErrorCallback` パラメーターを使用すると、サーバーハンドラー (<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> メソッド) によってエラーが返された場合に呼び出されるクライアント関数の名前を定義できます。 `clientErrorCallback` パラメーターを必要としない、このメソッドのオーバーロードバージョンでは、値を null に設定します。  
  
 このメソッドの詳細については、「オーバーロード <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> メソッドの解説」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">指定された <see cref="T:System.Web.UI.Control" /> に <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスが実装されていません。</exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)">ASP.NET ページでポストバックを使用しないクライアントコールバック</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackClientHyperlink">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see langword="javascript:" /> を参照の先頭に付加した上で参照を取得します。この参照をクライアント イベントで使用して、サーバーにポストバックできます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackClientHyperlink (control As Control, argument As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackClientHyperlink : System.Web.UI.Control * string -&gt; string" Usage="clientScriptManager.GetPostBackClientHyperlink (control, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">ポストバックを処理するサーバー コントロール。</param>
        <param name="argument">サーバー コントロールに渡されたパラメーター。</param>
        <summary><see langword="javascript:" /> を参照の先頭に追加した上で参照を取得します。この参照をクライアント イベントで使用して、指定したコントロールを、指定したイベント引数を使用してサーバーにポストバックできます。</summary>
        <returns>対象のコントロールの ID とイベント引数を保持しているポストバック関数に対する JavaScript 呼び出しを表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッドを使用するには、ポストバックを処理して <xref:System.Web.UI.IPostBackEventHandler> インターフェイスを実装するコントロールが必要です。 <xref:System.Web.UI.Page>の <xref:System.Web.UI.IPostBackEventHandler> インターフェイスを実装するには、ディレクティブを使用します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> メソッドの使用方法を示しています。 カスタムコントロール `MyControl`は、<xref:System.Web.UI.IPostBackEventHandler> インターフェイスを実装します。 ページの HTML アンカー要素がクリックされると、カスタムコントロールの <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> メソッドが呼び出されます。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreferencecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreferencevb.aspx#1)]  
  
 次のコード例は、前の例と同じ機能を持ちますが、カスタムコントロールではなく、<xref:System.Web.UI.Page> クラスが <xref:System.Web.UI.IPostBackEventHandler> インターフェイスを実装する点が異なります。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreference2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreference2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackClientHyperlink (control As Control, argument As String, registerForEventValidation As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackClientHyperlink : System.Web.UI.Control * string * bool -&gt; string" Usage="clientScriptManager.GetPostBackClientHyperlink (control, argument, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">ポストバックを処理するサーバー コントロール。</param>
        <param name="argument">サーバー コントロールに渡されたパラメーター。</param>
        <param name="registerForEventValidation">検証用にポストバック イベントを登録する場合は <see langword="true" />。検証用にポストバック イベントを登録しない場合は <see langword="false" />。</param>
        <summary><see langword="javascript:" /> を参照の先頭に追加した上で参照を取得します。この参照をクライアント イベントで使用して、指定したコントロールを、指定したイベント引数と、イベント検証用にポストバックを登録するかどうかを示すブール値を使用してサーバーにポストバックできます。</summary>
        <returns>対象のコントロールの ID とイベント引数を保持しているポストバック関数に対する JavaScript 呼び出しを表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッドを使用するには、ポストバックを処理して <xref:System.Web.UI.IPostBackEventHandler> インターフェイスを実装するコントロールが必要です。 <xref:System.Web.UI.Page>の <xref:System.Web.UI.IPostBackEventHandler> インターフェイスを実装するには、ディレクティブを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.PostBackOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (options As PostBackOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::PostBackOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.PostBackOptions -&gt; string" Usage="clientScriptManager.GetPostBackEventReference options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <param name="options">ポストバックを定義する <see cref="T:System.Web.UI.PostBackOptions" />。</param>
        <summary>クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。 この参照文字列は、指定された <see cref="T:System.Web.UI.PostBackOptions" /> インスタンスによって定義されます。</summary>
        <returns>クライアントでスクリプトとして扱われた場合に、クライアント ポストバックを初期化する文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page>の <xref:System.Web.UI.IPostBackEventHandler> インターフェイスを実装するには、ディレクティブを使用します。  
  
 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッドは、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> プロパティを `false`するときに、<xref:System.Web.UI.WebControls.Button> コントロールと共に使用できます。 このシナリオでは、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッドによって、<xref:System.Web.UI.WebControls.Button> コントロールのクライアントポストバックイベントが返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Web.UI.PostBackOptions" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.Button" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)">ASP.NET ページでポストバックを使用しないクライアントコールバック</related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (control As Control, argument As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.Control * string -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (control, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">サーバー上でポストバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。</param>
        <param name="argument">ポストバックを処理するコントロールに渡されるオプション引数の文字列。</param>
        <summary>クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。 この参照文字列は、ポストバックと追加のイベント情報の文字列引数を処理する、指定したコントロールによって定義されます。</summary>
        <returns>クライアントでスクリプトとして扱われた場合に、ポストバックを初期化する文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page>の <xref:System.Web.UI.IPostBackEventHandler> インターフェイスを実装するには、ディレクティブを使用します。  
  
 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッドは、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> プロパティを `false`するときに、<xref:System.Web.UI.WebControls.Button> コントロールと共に使用できます。 このシナリオでは、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッドによって、<xref:System.Web.UI.WebControls.Button> コントロールのクライアントポストバックイベントが返されます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッドの使用方法を示しています。 カスタムコントロール `MyControl`は、<xref:System.Web.UI.IPostBackEventHandler> インターフェイスを実装します。 ページのボタンをクリックすると、カスタムコントロールの <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> メソッドが呼び出されます。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreferencecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreferencevb.aspx#1)]  
  
 次のコード例は、前の例と同じ機能を持ちますが、カスタムコントロールではなく、<xref:System.Web.UI.Page> クラスが <xref:System.Web.UI.IPostBackEventHandler> インターフェイスを実装する点が異なります。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreference2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreference2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)">ASP.NET ページでポストバックを使用しないクライアントコールバック</related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.PostBackOptions options, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (options As PostBackOptions, registerForEventValidation As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::PostBackOptions ^ options, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.PostBackOptions * bool -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (options, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="options">ポストバックを定義する <see cref="T:System.Web.UI.PostBackOptions" />。</param>
        <param name="registerForEventValidation">検証用にイベント参照を登録する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。 この参照文字列は、指定した <see cref="T:System.Web.UI.PostBackOptions" /> オブジェクトによって定義されます。 オプションで、検証用にこのイベント参照を登録します。</summary>
        <returns>クライアントでスクリプトとして扱われた場合に、クライアント ポストバックを初期化する文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page> オブジェクトの <xref:System.Web.UI.IPostBackEventHandler> インターフェイスを実装するには、ディレクティブを使用します。  
  
 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッドは、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> プロパティを `false`するときに、<xref:System.Web.UI.WebControls.Button> コントロールと共に使用できます。 このシナリオでは、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッドによって、<xref:System.Web.UI.WebControls.Button> コントロールのクライアントポストバックイベントが返されます。  
  
 `registerForEventValidation` が `true`場合、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> メソッドは <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> メソッドを呼び出して、イベントを生成しているクライアントコントロールを表す一意のコントロール ID を使用して、検証用のイベント参照を登録します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Web.UI.PostBackOptions" /> が <see langword="null" /> です。</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.Button" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)">ASP.NET ページでポストバックを使用しないクライアントコールバック</related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (control As Control, argument As String, registerForEventValidation As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.Control * string * bool -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (control, argument, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">サーバー上でポストバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。</param>
        <param name="argument"><paramref name="control" /> に渡すオプション引数の文字列。</param>
        <param name="registerForEventValidation">検証用にイベント参照を登録する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>クライアント イベントで使用する、サーバーにポストバックするための文字列を返します。 この参照文字列は、ポストバックと追加のイベント情報の文字列引数を処理する、指定したコントロールによって定義されます。 オプションで、検証用にこのイベント参照を登録します。</summary>
        <returns>クライアントでスクリプトとして扱われた場合に、ポストバックを初期化する文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page>の <xref:System.Web.UI.IPostBackEventHandler> インターフェイスを実装するには、ディレクティブを使用します。  
  
 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッドは、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> プロパティを `false`するときに、<xref:System.Web.UI.WebControls.Button> コントロールと共に使用できます。 このシナリオでは、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッドによって、<xref:System.Web.UI.WebControls.Button> コントロールのクライアントポストバックイベントが返されます。  
  
 `registerForEventValidation` が true の場合、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> メソッドは <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> メソッドを呼び出して、イベントを生成しているクライアントコントロールを表す一意のコントロール ID を持つ検証用にイベント参照を登録します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178208(v=vs.100)">ASP.NET ページでポストバックを使用しないクライアントコールバック</related>
      </Docs>
    </Member>
    <Member MemberName="GetWebResourceUrl">
      <MemberSignature Language="C#" Value="public string GetWebResourceUrl (Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetWebResourceUrl(class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWebResourceUrl (type As Type, resourceName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetWebResourceUrl(Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="member this.GetWebResourceUrl : Type * string -&gt; string" Usage="clientScriptManager.GetWebResourceUrl (type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">リソースの型。</param>
        <param name="resourceName">アセンブリ内のリソースの完全修飾名。</param>
        <summary>アセンブリ内のリソースへの URL 参照を取得します。</summary>
        <returns>リソースへの URL 参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> メソッドは、アセンブリに埋め込まれているリソースへの URL 参照を返します。 返された参照は URL エンコードされていません。 リソースには、スクリプトファイル、イメージ、または任意の静的ファイルを指定できます。 リソースにアクセスするオブジェクトに基づいて、型を指定します。  
  
 ページに登録されている Web リソースは、その型と名前によって一意に識別されます。 このページに登録できるのは、特定の種類と名前のペアを持つリソースを1つだけです。 既に登録されているリソースを登録しようとしても、登録済みリソースの複製は作成されません。  
  
 <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> メソッドは、アセンブリに埋め込まれているリソースにアクセスするための <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> メソッドと組み合わせて使用されます。 アプリケーションでのリソースの使用の詳細については、「 [ASP.NET Web Page resources の概要](https://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> メソッドの使用方法を示しています。 この例の*型*パラメーターは、リソースを格納しているアセンブリ内のクラスの型に設定されます。 `resourceName` パラメーターは、既定の名前空間を含む、リソースへの完全修飾パスで指定されます。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/clientscriptwebresource.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/clientscriptwebresource.aspx#1)]  
  
 次のコード例は、<xref:System.Web.UI.WebResourceAttribute> メタデータ属性をプログラムで適用して、提供されるリソースのアセンブリをマークする方法を示しています。 使用している言語に応じて、`Samples.AspNet.CS.Controls` または `Samples.AspNet.VB.Controls`に設定された既定の名前空間を使用して、クラスライブラリ内の次のクラスをコンパイルします。  
  
 [!code-csharp[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/resource.cs#2)]
 [!code-vb[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/resource.vb#2)]  
  
 この例では、`Script_include.js`という名前の JavaScript ファイルが必要です。 .Js ファイルは、`ClientScriptResourceLabel` オブジェクトを含むアセンブリ内の埋め込みリソースです。 Visual Studio を使用している場合は、クラスライブラリプロジェクトのプロパティウィンドウで、スクリプトファイルを選択したときに **[ビルドアクション]** を **[埋め込みリソース]** に設定します。 コマンドラインでライブラリをコンパイルする場合は、 [/resource](~/docs/csharp/language-reference/compiler-options/resource-compiler-option.md)スイッチを使用してリソースを埋め込みます。  
  
```  
function DoClick() {Form1.Message.value='Text from resource script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Web リソース型が <see langword="null" /> です。

- または -

Web リソース名が <see langword="null" /> です。  
  
- または - 
Web リソース名の長さがゼロです。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
        <altmember cref="T:System.Web.Handlers.AssemblyResourceLoader" />
        <related type="Article" href="https://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd">ASP.NET Web ページのリソースの概要</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5212666e-98ab-47e4-a497-b5545ab15c7f">/resource (出力するリソースファイルを埋め込むC# ) (コンパイラオプション)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/eee2f227-91f2-4f2b-a9d6-1c51c5320858">/resource (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsClientScriptBlockRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアント スクリプト ブロックが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptBlockRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptBlockRegistered : string -&gt; bool" Usage="clientScriptManager.IsClientScriptBlockRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">検索対象のクライアント スクリプト ブロックのキー。</param>
        <summary>指定されたキーを使用して、クライアント スクリプト ブロックが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
        <returns>クライアント スクリプト ブロックが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重複したスクリプトの登録を避けるために、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッドを呼び出す前にこのメソッドを呼び出します。 これは、スクリプトで大量のサーバーリソースを作成する必要がある場合に特に重要です。  
  
 クライアントスクリプトは、キーとその型によって一意に識別されます。 同じキーと種類のスクリプトは重複していると見なされます。  
  
 <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> メソッドのこのオーバーロードは、<xref:System.Web.UI.Page> オブジェクトとして設定された型を持つ `key` と `type` パラメーターの両方を受け取るオーバーロードを呼び出します。  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptBlockRegistered (type As Type, key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptBlockRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsClientScriptBlockRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">検索対象のクライアント スクリプト ブロックの型。</param>
        <param name="key">検索対象のクライアント スクリプト ブロックのキー。</param>
        <summary>キーと型を使用して、クライアント スクリプト ブロックが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
        <returns>クライアント スクリプト ブロックが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重複したスクリプトの登録を避けるために、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッドを呼び出す前にこのメソッドを呼び出します。 これは、スクリプトで大量のサーバーリソースを作成する必要がある場合に特に重要です。  
  
 クライアントスクリプトは、キーとその型によって一意に識別されます。 同じキーと種類のスクリプトは重複していると見なされます。 リソースにアクセスするオブジェクトに基づいて、型を指定します。 たとえば、`Page` インスタンスを使用してリソースにアクセスする場合は、`Page` の種類を指定します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> メソッドの使用方法を示しています。 既存のクライアントスクリプトブロックをチェックするロジックが削除された場合は、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッドによって重複がチェックされるため、レンダリングされるページの HTML ソースコードに2つの重複するクライアントスクリプトは存在しません。 チェックの利点は、不要な計算を減らすことです。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント スクリプトの型が <see langword="null" />. です。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsClientScriptIncludeRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアント スクリプト インクルードが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptIncludeRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptIncludeRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptIncludeRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptIncludeRegistered : string -&gt; bool" Usage="clientScriptManager.IsClientScriptIncludeRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">検索対象のクライアント スクリプト インクルードのキー。</param>
        <summary>指定されたキーを使用して、クライアント スクリプト インクルードが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
        <returns>クライアント スクリプト インクルードが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重複したスクリプトの登録を避けるために、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> メソッドを呼び出す前にこのメソッドを呼び出します。 これは、スクリプトで大量のサーバーリソースを作成する必要がある場合に特に重要です。  
  
 クライアントスクリプトインクルードは、キーとその型によって一意に識別されます。 同じキーと種類のスクリプトは重複していると見なされます。  
  
 <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> メソッドのこのオーバーロードは、<xref:System.Web.UI.Page> オブジェクトとして設定された型を持つ `key` と `type` パラメーターの両方を受け取るオーバーロードを呼び出します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptIncludeRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptIncludeRegistered (type As Type, key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptIncludeRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptIncludeRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsClientScriptIncludeRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">検索対象のクライアント スクリプト インクルードの型。</param>
        <param name="key">検索対象のクライアント スクリプト インクルードのキー。</param>
        <summary>キーと型を使用して、クライアント スクリプト インクルードが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
        <returns>クライアント スクリプト インクルードが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重複するクライアントスクリプトインクルードが登録されないように、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> メソッドを呼び出す前にこのメソッドを呼び出します。 これは、スクリプトで大量のサーバーリソースを作成する必要がある場合に特に重要です。  
  
 クライアントスクリプトインクルードは、キーとその型によって一意に識別されます。 同じキーと種類のスクリプトは重複していると見なされます。 リソースにアクセスするオブジェクトに基づいて、型を指定します。 たとえば、ページインスタンスを使用してリソースにアクセスする場合は、`Page` の種類を指定します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> メソッドの使用方法を示しています。 既存のクライアントスクリプトインクルードをチェックするロジックが削除された場合は、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> メソッドによって重複がチェックされるため、レンダリングされるページの HTML ソースコードに2つの重複するクライアントスクリプトが存在しないことに注意してください。 チェックの利点は、不要な計算を減らすことです。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/cs/clientscriptincludes.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/vb/clientscriptincludes.aspx#1)]  
  
 この例では、次の内容を含む `Script_include.js`という名前の JavaScript ファイルが必要です。  
  
```  
function DoClick() {Form1.Message.value='Text from include script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント スクリプト インクルードの型が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsOnSubmitStatementRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>OnSubmit ステートメントが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOnSubmitStatementRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOnSubmitStatementRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOnSubmitStatementRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsOnSubmitStatementRegistered : string -&gt; bool" Usage="clientScriptManager.IsOnSubmitStatementRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">検索対象の OnSubmit ステートメントのキー。</param>
        <summary>指定されたキーを使用して OnSubmit ステートメントが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
        <returns>OnSubmit ステートメントが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> メソッドを呼び出してから、重複する OnSubmit ステートメントが登録されないようにするには、このメソッドを呼び出します。 これは、ステートメントで大量のサーバーリソースを作成する必要がある場合に特に重要です。  
  
 ステートメントは、そのキーとその型によって一意に識別されます。 同じキーと型のステートメントは重複していると見なされます。  
  
 <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> メソッドのこのオーバーロードは、<xref:System.Web.UI.Page> オブジェクトとして設定された型を持つ `key` と `type` パラメーターの両方を受け取るオーバーロードを呼び出します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOnSubmitStatementRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOnSubmitStatementRegistered (type As Type, key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOnSubmitStatementRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsOnSubmitStatementRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsOnSubmitStatementRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">検索対象の OnSubmit ステートメントの型。</param>
        <param name="key">検索対象の OnSubmit ステートメントのキー。</param>
        <summary>指定されたキーと型を使用して OnSubmit ステートメントが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
        <returns>OnSubmit ステートメントが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> メソッドを呼び出してから、重複するステートメントを登録しないようにするには、このメソッドを呼び出します。 これは、ステートメントで大量のサーバーリソースを作成する必要がある場合に特に重要です。  
  
 ステートメントは、そのキーとその型によって一意に識別されます。 同じキーと型のステートメントは重複していると見なされます。 リソースにアクセスするオブジェクトに基づいて、型を指定します。 たとえば、`Page` インスタンスを使用してリソースにアクセスする場合は、`Page` の種類を指定します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> メソッドの使用方法を示しています。 `OnSubmitScript` という名前のスクリプトが <xref:System.Web.UI.Page> に登録されているため、ページのフォームが送信されるとスクリプトが呼び出されます。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/cs/clientscriptonsubmit.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/vb/clientscriptonsubmit.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">OnSubmit ステートメントの型が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStartupScriptRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>起動スクリプトが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsStartupScriptRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsStartupScriptRegistered : string -&gt; bool" Usage="clientScriptManager.IsStartupScriptRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">検索対象のスタートアップ スクリプトのキー。</param>
        <summary>指定されたキーを使用して、スタートアップ スクリプトが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
        <returns>スタートアップ スクリプトが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重複したスクリプトの登録を避けるために、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> メソッドを呼び出す前にこのメソッドを呼び出します。 これは、スクリプトで大量のサーバーリソースを作成する必要がある場合に特に重要です。  
  
 スタートアップスクリプトは、キーとその型によって一意に識別されます。 同じキーと種類のスクリプトは重複していると見なされます。  
  
 <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> メソッドのこのオーバーロードは、文字列 `key` と、型が <xref:System.Web.UI.Page> オブジェクトとして設定された `type` パラメーターの両方を受け取るオーバーロードを呼び出します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" />
      </Docs>
    </Member>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsStartupScriptRegistered (type As Type, key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsStartupScriptRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsStartupScriptRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">検索対象のスタートアップ スクリプトの型。</param>
        <param name="key">検索対象のスタートアップ スクリプトのキー。</param>
        <summary>指定されたキーと型を使用して、スタートアップ スクリプトが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
        <returns>スタートアップ スクリプトが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重複したスクリプトの登録を避けるために、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> メソッドを呼び出す前にこのメソッドを呼び出します。 これは、スクリプトで大量のサーバーリソースを作成する必要がある場合に特に重要です。  
  
 クライアント起動スクリプトは、キーとその型によって一意に識別されます。 同じキーと種類のスクリプトは重複していると見なされます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> メソッドの使用方法を示しています。 既存のスタートアップスクリプトブロックをチェックするロジックが削除された場合は、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> メソッドによって重複がチェックされるため、表示されるページの HTML ソースコードに2つの重複するスタートアップスクリプトが存在しないことに注意してください。 チェックの利点は、不要な計算を減らすことです。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">スタートアップ スクリプトの型が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public void RegisterArrayDeclaration (string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterArrayDeclaration(string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterArrayDeclaration (arrayName As String, arrayValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterArrayDeclaration(System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterArrayDeclaration : string * string -&gt; unit" Usage="clientScriptManager.RegisterArrayDeclaration (arrayName, arrayValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="arrayName">登録する配列名。</param>
        <param name="arrayValue">登録する配列値。</param>
        <summary>配列名と配列値を使用して、JavaScript 配列宣言を <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> は、`arrayName` パラメーターで指定された名前と同じ名前の配列が登録されているかどうかを確認し、存在する場合は `arrayValue` パラメーターに指定された値を追加します。 基になるストレージメカニズムは <xref:System.Collections.ArrayList>に基づいているため、重複を許可します。 `arrayName` パラメーターと同じ名前の登録済み配列が存在しない場合は、作成され、`arrayValue` パラメーターの値が追加されます。  
  
 結果の JavaScript 配列に文字列リテラルが必要な場合は、`arrayValue` パラメーターに単一引用符 (') またはエスケープされた二重引用符 (\\") を含めます。 `arrayValue` パラメーターの値は、1つの要素である必要があります。 複数の値を配列に追加する必要がある場合は、<xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> メソッドを使用して複数の呼び出しを行います。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> メソッドと <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> メソッドの使用方法を示しています。 この例では、配列と非表示の値を登録し、`<input>` ボタンの `OnClick` イベントを定義して、配列の2つの値と非表示の値の合計を計算します。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/cs/clientscriptregisterarray.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/vb/clientscriptregisterarray.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="arrayName" /> が <see langword="null" />です。</exception>
        <altmember cref="Overload:System.String.Split" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptBlock">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアント スクリプトを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptBlock(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterClientScriptBlock (type As Type, key As String, script As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptBlock(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptBlock : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptBlock (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">登録するクライアント スクリプトの型。</param>
        <param name="key">登録するクライアント スクリプトのキー。</param>
        <param name="script">登録するクライアント スクリプト リテラル。</param>
        <summary>型、キー、およびスクリプト リテラルを使用して、<see cref="T:System.Web.UI.Page" /> オブジェクトにクライアント スクリプトを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クライアントスクリプトは、キーとその型によって一意に識別されます。 同じキーと種類のスクリプトは重複していると見なされます。 ページに登録できるのは、指定された型とキーのペアを持つスクリプト1つだけです。 既に登録されているスクリプトを登録しようとしても、スクリプトの複製は作成されません。  
  
 <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> メソッドを呼び出して、指定したキーと型のペアを持つクライアントスクリプトが既に登録されているかどうかを確認し、不必要にスクリプトを追加しようとしないようにします。  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッドのこのオーバーロードでは、`script` パラメーターに指定されたスクリプトが `<script>` 要素ブロックにラップされていることを確認する必要があります。  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッドは、レンダリングされたページの先頭にスクリプトブロックを追加します。 スクリプトブロックは、登録されている順序で出力されるとは限りません。 スクリプトブロックの順序が重要な場合は、<xref:System.Text.StringBuilder> オブジェクトを使用してスクリプトを1つの文字列でまとめて収集し、それらをすべて1つのクライアントスクリプトブロックに登録します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッドの使用方法を示しています。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager12/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager12/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptBlock(class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterClientScriptBlock (type As Type, key As String, script As String, addScriptTags As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptBlock(Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptBlock : Type * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterClientScriptBlock (type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">登録するクライアント スクリプトの型。</param>
        <param name="key">登録するクライアント スクリプトのキー。</param>
        <param name="script">登録するクライアント スクリプト リテラル。</param>
        <param name="addScriptTags">スクリプト タグを追加するかどうかを示すブール値。</param>
        <summary>型、キー、スクリプト リテラル、およびスクリプト タグを追加するかどうかを示すブール値を使用して、クライアント スクリプトを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クライアントスクリプトは、キーとその型によって一意に識別されます。 同じキーと種類のスクリプトは重複していると見なされます。 ページに登録できるのは、指定された型とキーのペアを持つスクリプト1つだけです。 既に登録されているスクリプトを登録しようとしても、スクリプトの複製は作成されません。  
  
 <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> メソッドを呼び出して、指定したキーと型のペアを持つクライアントスクリプトが既に登録されているかどうかを確認します。 これにより、不必要にスクリプトを追加しようとするのを防ぐことができます。  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッドのこのオーバーロードでは、`addScriptTags` パラメーターを使用して、`script` パラメーターに指定されたスクリプトが `<script>` 要素ブロックでラップされているかどうかを示すことができます。 `addScriptTags` を `true` に設定すると、スクリプトタグが自動的に追加されることを示します。  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッドは、レンダリングされたページの先頭にスクリプトブロックを追加します。 スクリプトブロックは、登録されている順序で出力されるとは限りません。 スクリプトブロックの順序が重要な場合は、<xref:System.Text.StringBuilder> オブジェクトを使用してスクリプトを1つの文字列でまとめて収集し、それらをすべて1つのクライアントスクリプトブロックに登録します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> メソッドの使用方法を示しています。 `addScriptTags` パラメーターが `true` に設定されているため、開始および終了のスクリプトタグが `script` パラメーターに含まれていないことに注意してください。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント スクリプト ブロックの型が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptInclude">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアント スクリプト インクルードを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptInclude(string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterClientScriptInclude (key As String, url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptInclude(System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptInclude : string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptInclude (key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">登録するクライアント スクリプト インクルードのキー。</param>
        <param name="url">登録するクライアント スクリプト インクルードの URL。</param>
        <summary>キーと URL を使用して、クライアント スクリプトを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。これにより、スクリプトをクライアントから呼び出せるようになります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クライアントスクリプトインクルードは、キーとその型によって一意に識別されます。 同じキーと種類のスクリプトは重複していると見なされます。 ページに登録できるのは、指定された型とキーのペアを持つスクリプト1つだけです。 既に登録されているスクリプトを登録しようとしても、スクリプトの複製は作成されません。  
  
 <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> メソッドを呼び出して、指定したキーと型のペアを持つクライアントスクリプトインクルードが既に登録されているかどうかを確認し、不必要にスクリプトを追加しようとしないようにします。  
  
> [!NOTE]
>  クライアント URL を解決するには、<xref:System.Web.UI.Control.ResolveClientUrl%2A> メソッドを使用します。 このメソッドは、パスを解決するために呼び出される URL のコンテキストを使用します。  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> メソッドのこのオーバーロードは、`key`、`URL`、および `type` パラメーターを受け取るオーバーロードを呼び出します。  
  
 メソッドは、レンダリングされたページの上部にスクリプトブロックを追加します。  
  
   
  
## Examples  
 構文、使用法、例など、関連情報については、「<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptInclude(class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterClientScriptInclude (type As Type, key As String, url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptInclude(Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptInclude : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptInclude (type, key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">登録するクライアント スクリプト インクルードの型。</param>
        <param name="key">登録するクライアント スクリプト インクルードのキー。</param>
        <param name="url">登録するクライアント スクリプト インクルードの URL。</param>
        <summary>型、キー、および URL を使用して、クライアント スクリプト インクルードを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> メソッドのこのオーバーロードは、スクリプトを識別するための*キー*および*url*パラメーターと、クライアントスクリプトインクルードの id を指定するための `type` パラメーターを受け取ります。 リソースにアクセスするオブジェクトに基づいて、型を指定します。 たとえば、`Page` インスタンスを使用してリソースにアクセスする場合は、`Page` の種類を指定します。  
  
> [!NOTE]
>  クライアント URL を解決するには、<xref:System.Web.UI.Control.ResolveClientUrl%2A> メソッドを使用します。 このメソッドは、パスを解決するために呼び出される URL のコンテキストを使用します。  
  
 このメソッドは、レンダリングされたページの上部にスクリプトブロックを追加します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> メソッドの使用方法を示しています。 既存のクライアントスクリプトインクルードをチェックするロジックが削除された場合でも、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> メソッドによって重複がチェックされるため、レンダリングされたページに重複するクライアントスクリプトは存在しないことに注意してください。 チェックの利点は、不要な計算を減らすことです。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/cs/clientscriptincludes.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/vb/clientscriptincludes.aspx#1)]  
  
 この例では、次の内容を含む Script_include .js という名前の JavaScript ファイルが必要です。  
  
```  
function DoClick() {Form1.Message.value='Text from include script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント スクリプト インクルードの型が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">URL が <see langword="null" /> です。  
  
- または - 
URL が空です。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptResource (Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptResource(class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterClientScriptResource (type As Type, resourceName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptResource(Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptResource : Type * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptResource (type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">登録するクライアント スクリプト リソースの型。</param>
        <param name="resourceName">登録するクライアント スクリプト リソースの名前。</param>
        <summary>型とリソース名を使用して、クライアント スクリプト リソースを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> メソッドは、Webresource.axd HTTP ハンドラーを介してアセンブリからコンパイル済みリソースにアクセスするときに使用されます。 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> メソッドは、スクリプトを <xref:System.Web.UI.Page> オブジェクトに登録し、スクリプトが重複しないようにします。 このメソッドは、`<script>` 要素ブロックを使用して、リソース URL の内容をラップします。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> メソッドの使用方法を示しています。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/clientscriptwebresource.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/clientscriptwebresource.aspx#1)]  
  
 次のコード例は、<xref:System.Web.UI.WebResourceAttribute> メタデータ属性をプログラムで適用して、提供されるリソースのアセンブリをマークする方法を示しています。  
  
 [!code-csharp[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/resource.cs#2)]
 [!code-vb[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/resource.vb#2)]  
  
 この例では、次の内容を含む `Script_include.js`という名前の JavaScript ファイルが必要です。  
  
```  
function DoClick() {Form1.Message.value='Text from resource script.'}  
```  
  
 `Script_include.js` ファイルを、`ClientScriptResourceLabel` クラスを含む `Samples.AspNet.CS.Controls` アセンブリ内のリソースとしてコンパイルします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント リソースの型が <see langword="null" /> です。

- または -

クライアント リソースの名前が <see langword="null" /> です。  
  
- または - 
クライアント リソースの名前の長さがゼロです。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
        <altmember cref="T:System.Web.Handlers.AssemblyResourceLoader" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterExpandoAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたコントロールのカスタム (expando) 属性として名前/値ペアを登録します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExpandoAttribute (controlId As String, attributeName As String, attributeValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterExpandoAttribute(System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterExpandoAttribute : string * string * string -&gt; unit" Usage="clientScriptManager.RegisterExpandoAttribute (controlId, attributeName, attributeValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="controlId">カスタム属性を含む、ページ上の <see cref="T:System.Web.UI.Control" />。</param>
        <param name="attributeName">登録するカスタム属性の名前。</param>
        <param name="attributeValue">カスタム属性の値。</param>
        <summary>コントロール ID、属性名、および属性値を指定して、指定されたコントロールのカスタム (expando) 属性として名前/値ペアを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> メソッドは、指定された <xref:System.Web.UI.Control>のカスタム (expando) 属性として名前/値ペアを登録します。 Expando 属性は、レンダリングされたコントロールのマークアップの XHTML の互換性を維持するために、JavaScript から動的に設定されます。 カスタム (expando) 属性の値の引用符とバックスラッシュはエスケープされます。 引用符とバックスラッシュをエスケープしない場合は、<xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> のオーバーロードメソッドを呼び出し、`encode` パラメーターを `false`に設定します。  
  
 Expando 属性が見つからない場合、または expando 属性を追加するコントロールが見つからない場合でも、クライアントスクリプトは出力されますが、コントロールには影響しません。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.JScript.Expando" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExpandoAttribute (controlId As String, attributeName As String, attributeValue As String, encode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterExpandoAttribute(System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode);" />
      <MemberSignature Language="F#" Value="member this.RegisterExpandoAttribute : string * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterExpandoAttribute (controlId, attributeName, attributeValue, encode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="controlId">カスタム属性を含む、ページ上の <see cref="T:System.Web.UI.Control" />。</param>
        <param name="attributeName">登録するカスタム属性の名前。</param>
        <param name="attributeValue">カスタム属性の値。</param>
        <param name="encode">登録するカスタム属性をエンコードするかどうかを示すブール値。</param>
        <summary>コントロール ID、属性名、属性値、および属性値をエンコードするかどうかを示すブール値を指定して、指定されたコントロールのカスタム (expando) 属性として名前/値ペアを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> メソッドは、指定された <xref:System.Web.UI.Control>のカスタム (expando) 属性として名前/値ペアを登録します。 Expando 属性は、レンダリングされたコントロールのマークアップの XHTML の互換性を維持するために、JavaScript から動的に設定されます。 Expando 属性の値で引用符とバックスラッシュをエスケープする必要がある場合は、`encode` パラメーターを `true` に設定します。  
  
 Expando 属性が見つからない場合、または expando 属性を追加するコントロールが見つからない場合でも、クライアントスクリプトは出力されますが、コントロールには影響しません。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager> クラスの <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> メソッドを使用する方法を示しています。 レンダリングされたページのクライアントスクリプトは、`<span>` 要素の `title` 属性を設定します。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager6/cs/clientscriptexpando.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager6/vb/clientscriptexpando.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.JScript.Expando" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterForEventValidation">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>検証用にイベント参照を登録します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(string uniqueId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (uniqueId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::String ^ uniqueId);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : string -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation uniqueId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId">イベントを生成するクライアント コントロールを表す一意の ID。</param>
        <summary>イベントを生成するクライアント コントロールを表す一意のコントロール ID を使用して、検証用にイベント参照を登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細と例については、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> メソッドを参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> メソッドと <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> メソッドを使用して、検証用のコールバックを登録する方法と、そのコールバックがページから送信されたことを検証する方法を示しています。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/eventvalidation2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/eventvalidation2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (System.Web.UI.PostBackOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(class System.Web.UI.PostBackOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (options As PostBackOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::Web::UI::PostBackOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : System.Web.UI.PostBackOptions -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <param name="options">ポストバック イベントを開始するためにクライアントの JavaScript を生成する方法を指定する <see cref="T:System.Web.UI.PostBackOptions" />ブジェクト。</param>
        <summary><see cref="T:System.Web.UI.PostBackOptions" /> を使用して、検証用にイベント参照を登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細と例については、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> メソッドを参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.ValidateEvent" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(string uniqueId, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (uniqueId As String, argument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::String ^ uniqueId, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : string * string -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation (uniqueId, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId">イベントを生成するクライアント コントロールを表す一意の ID。</param>
        <param name="argument">クライアント イベントで渡されるイベント引数。</param>
        <summary>イベントを生成するクライアント コントロールを表す一意のコントロール ID とイベント引数を使用して、検証用にイベント参照を登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> メソッドと <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> メソッドを使用して、検証用のコールバックを登録し、ページからのコールバックを検証する方法を示します。 例に示されている検証を改善するには、id やロールなどのユーザー固有の情報を含むように検証 `argument` パラメーターを変更します。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/EventValidationCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/EventValidationVB.aspx#1)]  
  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> メソッドを使用して、検証のためのコールバックを登録する方法を示しています。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager10/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager10/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このメソッドが <see cref="M:System.Web.UI.Page.Render(System.Web.UI.HtmlTextWriter)" /> メソッドの前に呼び出されます。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/18fc94c9-56fc-46c3-9f29-7358f18667df">検証実装を使用したクライアントコールバックの例</related>
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public void RegisterHiddenField (string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterHiddenField (hiddenFieldName As String, hiddenFieldInitialValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterHiddenField(System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterHiddenField : string * string -&gt; unit" Usage="clientScriptManager.RegisterHiddenField (hiddenFieldName, hiddenFieldInitialValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hiddenFieldName">登録する隠しフィールドの名前。</param>
        <param name="hiddenFieldInitialValue">登録するフィールドの初期値。</param>
        <summary>隠し値を <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> メソッドは、レンダリングされた HTML ページに非表示の `<input>` 要素を作成します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> メソッドと <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> メソッドの使用方法を示しています。 この例では、配列と非表示の値を登録し、`<input>` ボタンの `OnClick` イベントを定義して、配列の2つの値と非表示の値の合計を計算します。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/cs/clientscriptregisterarray.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/vb/clientscriptregisterarray.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hiddenFieldName" /> が <see langword="null" />です。</exception>
        <altmember cref="T:System.Web.UI.WebControls.HiddenField" />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public void RegisterOnSubmitStatement (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterOnSubmitStatement(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterOnSubmitStatement (type As Type, key As String, script As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterOnSubmitStatement(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterOnSubmitStatement : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterOnSubmitStatement (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">登録する OnSubmit ステートメントの型。</param>
        <param name="key">登録する OnSubmit ステートメントのキー。</param>
        <param name="script">登録する OnSubmit ステートメントのスクリプト リテラル。</param>
        <summary>型、キー、およびスクリプト リテラルを使用して、OnSubmit ステートメントを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。 ステートメントは、<see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> が送信されると、実行されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 OnSubmit ステートメントは、そのキーとその型によって一意に識別されます。 同じキーと型のステートメントは重複していると見なされます。 ページに登録できるのは、指定された型とキーのペアを持つステートメント1つだけです。 既に登録されているステートメントを登録しようとすると、ステートメントの複製が作成されません。  
  
 <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> メソッドを呼び出して、OnSubmit ステートメントが特定のキーと型のペアに既に登録されているかどうかを判断し、不必要にスクリプトを追加しようとしないようにします。  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> メソッドの `script` パラメーターには、セミコロン (;) で適切に区切られていれば、複数のスクリプトコマンドを含めることができます。  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> は、ページが送信される前に実行されるスクリプトを追加し、送信をキャンセルする機会を提供します。  
  
 HTML フォームと `OnSubmit` 属性の詳細については、 [World Wide Web コンソーシアム (W3C) の Web サイト](https://go.microsoft.com/fwlink/?linkid=37125)を参照してください。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> メソッドの使用方法を示しています。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/cs/clientscriptonsubmit.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/vb/clientscriptonsubmit.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> が <see langword="null" />です。</exception>
        <altmember cref="T:System.Web.UI.HtmlControls.HtmlForm" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterStartupScript">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>スタートアップ スクリプトを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStartupScript(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterStartupScript (type As Type, key As String, script As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterStartupScript(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterStartupScript : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterStartupScript (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">登録するスタートアップ スクリプの型。</param>
        <param name="key">登録するスタートアップ スクリプトのキー。</param>
        <param name="script">登録するスタートアップ スクリプ リテラル。</param>
        <summary>型、キー、およびスクリプト リテラルを使用して、<see cref="T:System.Web.UI.Page" /> オブジェクトにスタートアップ スクリプを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クライアントスクリプトは、キーとその型によって一意に識別されます。 同じキーと種類のスクリプトは重複していると見なされます。 ページに登録できるのは、指定された型とキーのペアを持つスクリプト1つだけです。 既に登録されているスクリプトを登録しようとしても、スクリプトの複製は作成されません。  
  
 <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> メソッドを呼び出して、指定したキーと型のペアを持つスタートアップスクリプトが既に登録されているかどうかを確認し、不必要にスクリプトを追加しようとしないようにします。  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> メソッドのこのオーバーロードでは、`script` パラメーターに指定されたスクリプトが `<script>` 要素ブロックでラップされていることを確認する必要があります。  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> メソッドによって追加されたスクリプトブロックは、ページの読み込みが終了した後、ページの <xref:System.Web.UI.Control.OnLoad%2A> イベントが発生する前に実行されます。 スクリプトブロックは、登録されている順序で出力されるとは限りません。 スクリプトブロックの順序が重要な場合は、<xref:System.Text.StringBuilder> オブジェクトを使用してスクリプトを1つの文字列でまとめて収集し、それらをすべて1つのクライアントスクリプトブロックに登録します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> メソッドの使用方法を示しています。 `script` パラメーターには、開始および終了のスクリプトタグが含まれていることに注意してください。 追加のパラメーター設定に基づいてスクリプトタグを追加するには、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> メソッドを参照してください。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager11#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager11/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager11#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager11/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStartupScript(class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterStartupScript (type As Type, key As String, script As String, addScriptTags As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterStartupScript(Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="member this.RegisterStartupScript : Type * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterStartupScript (type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">登録するスタートアップ スクリプの型。</param>
        <param name="key">登録するスタートアップ スクリプトのキー。</param>
        <param name="script">登録するスタートアップ スクリプ リテラル。</param>
        <param name="addScriptTags">スクリプト タグを追加するかどうかを示すブール値。</param>
        <summary>型、キー、スクリプト リテラル、およびスクリプト タグを追加するかどうかを示すブール値を使用して、スタートアップ スクリプを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 スタートアップスクリプトは、キーとその型によって一意に識別されます。 同じキーと種類のスクリプトは重複していると見なされます。 ページに登録できるのは、指定された型とキーのペアを持つスクリプト1つだけです。 既に登録されているスクリプトを登録しようとしても、スクリプトの複製は作成されません。  
  
 <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> メソッドを呼び出して、指定したキーと型のペアを持つスタートアップスクリプトが既に登録されているかどうかを確認し、不必要にスクリプトを追加しようとしないようにします。  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> メソッドのこのオーバーロードでは、`addScriptTags` パラメーターを使用して、`script` パラメーターに指定されたスクリプトが `<script>` 要素ブロックでラップされているかどうかを示すことができます。 `addScriptTags` を `true` に設定すると、スクリプトタグが自動的に追加されることを示します。  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> メソッドによって追加されたスクリプトブロックは、ページの読み込みが終了した後、ページの <xref:System.Web.UI.Control.OnLoad%2A> イベントが発生する前に実行されます。 スクリプトブロックは、登録されている順序で出力されるとは限りません。 スクリプトブロックの順序が重要な場合は、<xref:System.Text.StringBuilder> オブジェクトを使用してスクリプトを1つの文字列でまとめて収集し、それらをすべて1つのクライアントスクリプトブロックに登録します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> メソッドの使用方法を示しています。 `addScriptTags` パラメーターが `false` に設定されているので、開始および終了のスクリプトタグが `script` パラメーターに含まれていることに注意してください。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> が <see langword="null" />です。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)" />
        <altmember cref="F:System.Web.UI.HtmlTextWriterTag.Script" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateEvent">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアント イベントを検証します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEvent(string uniqueId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEvent (uniqueId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEvent(System::String ^ uniqueId);" />
      <MemberSignature Language="F#" Value="member this.ValidateEvent : string -&gt; unit" Usage="clientScriptManager.ValidateEvent uniqueId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId">イベントを生成するクライアント コントロールを表す一意の ID。</param>
        <summary><see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" /> メソッドを使用して、イベント検証用に登録されたクライアント イベントを検証します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEvent(string uniqueId, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEvent (uniqueId As String, argument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEvent(System::String ^ uniqueId, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.ValidateEvent : string * string -&gt; unit" Usage="clientScriptManager.ValidateEvent (uniqueId, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId">イベントを生成するクライアント コントロールを表す一意の ID。</param>
        <param name="argument">クライアント イベントで渡されるイベント引数。</param>
        <summary><see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /> メソッドを使用して、イベント検証用に登録されたクライアント イベントを検証します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> メソッドと <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> メソッドを使用して、検証用のコールバックを登録し、ページからのコールバックを検証する方法を示します。 ここに示されている検証を改善するには、id やロールなどのユーザー固有の情報を含むように、検証 `argument` パラメーターを変更します。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/EventValidationCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/EventValidationVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="uniqueId" /> は <see langword="null" /> または空の文字列 ("") です。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
