<Type Name="XhtmlTextWriter" FullName="System.Web.UI.XhtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e26743efb14c9e6fb39fe9acf3c0a223a98b0748" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73398976" /></Metadata><TypeSignature Language="C#" Value="public class XhtmlTextWriter : System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XhtmlTextWriter extends System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.XhtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XhtmlTextWriter&#xA;Inherits HtmlTextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XhtmlTextWriter : System::Web::UI::HtmlTextWriter" />
  <TypeSignature Language="F#" Value="type XhtmlTextWriter = class&#xA;    inherit HtmlTextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlTextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>XHTML から派生した拡張ハイパーテキスト マークアップ言語 (XHTML) モジュールのすべてのバリエーションを含む XHTML 固有文字が、モバイル デバイス用の ASP.NET サーバー コントロールの出力ストリームに書き込まれます。 ASP.NET ページとサーバー コントロールにカスタム XHTML レンダリングを行う場合には <see cref="T:System.Web.UI.XhtmlTextWriter" /> クラスをオーバーライドします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XHTML は、HTML 4.1 に基づく XML 準拠のマークアップ言語で、複数のデバイスの種類に適した Web サイトを作成することができます。 HTML によって提供される厳密な要素のガイドラインを使用して、HTML によって提供される使いやすさと、幅広い形式およびスタイルのオプションを持つマークアップ言語を生成し、マークアップタグのあいまいさを減らすことができます。 <xref:System.Web.UI.XhtmlTextWriter> クラスは、ASP.NET サーバーコントロールが XHTML コンテンツをクライアントに表示するときに使用する書式設定機能を提供します。 <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> メソッドを使用して、テキストライターがレンダリングする XHTML の種類を指定できます。 サポートされているドキュメントの種類は、<xref:System.Web.UI.XhtmlMobileDocType> 列挙体で定義されています。  
  
 <xref:System.Web.UI.XhtmlTextWriter> クラスは、要素の2つの属性セットをレンダリングします。 一方のセットは、<xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> プロパティで参照される共通属性のコレクションです。 2番目のセットは、<xref:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes%2A> プロパティで参照される、要素固有の属性のコレクションです。 レンダリングされる要素とスタイルの詳細については、 [World Wide Web コンソーシアム (W3C) の Web サイト](https://go.microsoft.com/fwlink/?linkid=37125)にある XHTML モジュール化の仕様を参照してください。  
  
 <xref:System.Web.UI.XhtmlTextWriter> クラスのメンバーと任意の派生クラスを使用して、カスタムの XHTML ページアダプターまたはクラスアダプターで使用するカスタムテキストライターを作成できます。 <xref:System.Web.UI.XhtmlTextWriter> クラスの標準動作をオーバーライドする派生クラスを作成することもできます。  
  
 既定では、HTML 4.0 をサポートするブラウザーで作業している場合、ASP.NET ページとコントロールは、XHTML 1.1 standard と互換性のあるマークアップを表示します。 詳細については、「 [Visual Studio と ASP.NET の XHTML 標準](https://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97)」を参照してください。  
  
 XHTML マークアップをレンダリングしないように ASP.NET を構成していない場合、<xref:System.Web.UI.HtmlTextWriter> は XHTML を出力します。 詳細については、「[方法: ASP.NET Web サイトで XHTML レンダリングを構成する](https://docs.microsoft.com/previous-versions/aspnet/ms178159(v=vs.100))」を参照してください。  
  
   
  
## Examples  
 このセクションのコード例には、4つの部分が含まれています。 最初の例では、派生クラスを作成する方法を示します。 2番目のコード例は、カスタムコントロールを作成する方法を示しています。 3番目のコード例は、カスタムコントロールの使用方法を示しています。 4番目のコード例では、カスタムコントロールを実行するために必要なコードを提供します。  
  
 次のコード例は、<xref:System.Web.UI.XhtmlTextWriter> クラスから派生したカスタムクラスを作成する方法を示しています。 これには、<xref:System.Web.UI.HtmlTextWriter> クラスから直接または間接的に継承するすべてのクラスの標準である2つのコンストラクターがあります。 最初のコンストラクターは、パラメーターとして <xref:System.IO.TextWriter> オブジェクトを受け取り、2番目のコンストラクターを呼び出して、次の2つのパラメーター値を渡します。  
  
-   <xref:System.IO.TextWriter> インスタンス。  
  
-   XHTML テキストライターによって使用される既定の行インデントを定義する <xref:System.Web.UI.HtmlTextWriter.DefaultTabString?displayProperty=nameWithType> プロパティの値。  
  
 このコード例では、<xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> および <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> メソッドをオーバーライドして、テキストサイズと色のスタイルをそれぞれフィルター処理する方法も示しています。 さらに、<xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> および <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> メソッドをオーバーライドして、コントロールがレンダリングされる前後にテキスト文字列を書き込みます。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#1)]  
  
 次のコード例は、`TestLabel` という名前のカスタム <xref:System.Web.UI.WebControls.Label> コントロールと、コントロールのコンテンツを XHTML としてレンダリングする `XhtmlTestLabelAdapter` という名前のカスタムアダプターを作成する方法を示しています。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#1)]  
  
 ASP.NET Web ページでカスタムコントロール `TestLabel` を使用する方法を次のコード例に示します。  
  
 [!code-aspx-csharp[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.aspx#4)]
 [!code-aspx-vb[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.aspx#4)]  
  
 前のコード例でカスタムコントロールを使用するには、次の `<controlAdapters>` 要素を2つのファイルのいずれかに追加します。 このファイルは、.NET Framework 構成ディレクトリのサブフォルダーとして、特定のブラウザーのサブディレクトリにある、適切なコンピューター全体のファイルに追加できます。 または、Web アプリケーションルートの下の App_Browsers ディレクトリにあるカスタムブラウザーファイルに追加することもできます。  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.TestLabel"  
   adapterType="AspNet.Samples.XhtmlTestLabelAdapter" />  
</controlAdapters>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <related type="Article" href="https://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97">ASP.NET と XHTML のコンプライアンス</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Web.UI.XhtmlTextWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">XHTML コンテンツをレンダリングする <see cref="T:System.IO.TextWriter" /> インスタンス。</param>
        <summary><see cref="T:System.Web.UI.XhtmlTextWriter" /> フィールドに指定されている行インデントを使用する、<see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> クラスの新しいインスタンスを初期化します。 既定の行インデントを変更しない場合に <see cref="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" /> コンストラクターを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パラメーターとして <xref:System.IO.TextWriter> オブジェクトを受け取る <xref:System.Web.UI.XhtmlTextWriter.%23ctor%2A> コンストラクターは、2つのパラメーター値を渡して2番目のコンストラクターを呼び出します。  
  
-   <xref:System.IO.TextWriter> インスタンス。  
  
-   <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> フィールドに指定された文字列値。 XHTML テキストライターによって使用されるタブ間隔を定義します。  
  
   
  
## Examples  
 次のコード例は、2つのコンストラクターを作成する方法を示しています。これは、<xref:System.Web.UI.XhtmlTextWriter> クラスから派生したカスタムクラスの、<xref:System.Web.UI.HtmlTextWriter> クラスから直接的または間接的に派生したすべてのクラスの標準です。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">XHTML コンテンツをレンダリングする <see cref="T:System.IO.TextWriter" /> インスタンス。</param>
        <param name="tabString">行のインデントをレンダリングする際に使用される文字列。</param>
        <summary>指定した行インデントを使用して <see cref="T:System.Web.UI.XhtmlTextWriter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、2つのコンストラクターを作成する方法を示しています。これは、<xref:System.Web.UI.XhtmlTextWriter> クラスから派生したカスタムクラスの、<xref:System.Web.UI.HtmlTextWriter> クラスから直接的または間接的に派生したすべてのクラスの標準です。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">属性を追加する XHTML 要素。</param>
        <param name="attributeName">追加する属性。</param>
        <summary>属性を XHTML 要素に追加します。 <see cref="T:System.Web.UI.XhtmlTextWriter" /> オブジェクトに対する要素固有属性のコレクションは、<see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> プロパティによって参照されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> メソッドを使用して、XHTML 要素に属性を追加します。 追加した属性は、<xref:System.Web.UI.XhtmlTextWriter> オブジェクトによって認識され、表示できます。 ライターが XHTML 要素の共通属性を表示しないようにするには、<xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> メソッドを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable CommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable CommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ CommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.Hashtable" /> オブジェクトに対するマークアップ タグの共通属性を格納している <see cref="T:System.Web.UI.XhtmlTextWriter" /> オブジェクトを取得します。</summary>
        <value>共通属性を格納している <see cref="T:System.Collections.Hashtable" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> コレクションには、XHTML 要素で許可され、<xref:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes%2A> プロパティでは抑制されない属性が含まれています。 一般的な属性の詳細については、 [World Wide Web コンソーシアム (W3C) の Web サイト](https://go.microsoft.com/fwlink/?linkid=37125)を参照してください。  
  
 <xref:System.Web.UI.XhtmlTextWriter> クラスの新しいインスタンスが作成されると、初期化される共通の属性は次のようになります。  
  
-   `class`  
  
-   `id`  
  
-   `title`  
  
-   `xml:lang`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="ElementSpecificAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable ElementSpecificAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable ElementSpecificAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ElementSpecificAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ ElementSpecificAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementSpecificAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要素固有属性を格納している <see cref="T:System.Collections.Hashtable" /> オブジェクトを取得します。</summary>
        <value>要素固有属性を格納している <see cref="T:System.Collections.Hashtable" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> メソッドを使用して、認識された属性を XHTML 要素に追加します。 XHTML 要素の共通属性を削除するには、<xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> メソッドを使用します。  
  
 <xref:System.Web.UI.XhtmlTextWriter> クラスの新しいインスタンスが作成されると、要素固有の属性の <xref:System.Collections.Hashtable> オブジェクトに、次の表に示す属性が設定されます。  
  
|要素|属性|  
|-------------|----------------|  
|`<a>`|`accesskey`, `href`, `charset`, `hreflang`, `rel`, `type`, `rev`, `title`, `tabindex`|  
|`<base>`|`href`|  
|`<blockquote>`|`cite`|  
|`<br>`|`id`、`class`、`title`|  
|`<form>`|`action`、`method`、`enctype`|  
|`<head>`|`xml:lang`|  
|`<html>`|`version`、`xml:lang`、`xmlns`|  
|`<img>`|`src`, `alt`, `width`, `longdesc`, `height`|  
|`<input>`|`size`, `accesskey`, `title`, `name`, `type`, `disabled`, `value`, `src`, `checked`, `maxlength`, `tabindex`|  
|`<label>`|`accesskey`、 `for`|  
|`<li>`|`value`|  
|`<link>`|`hreflang`, `rev`, `type`, `charset`, `rel`, `href`, `media`|  
|`<meta>`|`content`, `name`, `xml:lang`, `http-equiv`, `scheme`|  
|`<object>`|`codebase`, `classid`, `data`, `standby`, `name`, `type`, `height`, `archive`, `declare`, `width`, `tabindex`, `codetype`|  
|`<ol>`|`start`|  
|`<optgroup>`|`label`、 `disabled`|  
|`<option>`|`selected`、 `value`|  
|`<param>`|`id`, `name`, `valuetype`, `value`, `type`|  
|`<pre>`|`xml:space`|  
|`<q>`|`cite`|  
|`<select>`|`name`, `tabindex`, `disabled`, `multiple`, `size`|  
|`<style>`|`xml:lang`, `xml:space`, `type`, `title`, `media`|  
|`<table>`|`width`、 `summary`|  
|`<textarea>`|`name`, `cols`, `accesskey`, `tabindex`, `rows`|  
|`<td>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<th>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<title>`|`xml:lang`|  
|`<tr>`|`align`、 `valign`|  
  
 レンダリングされる要素とスタイルの詳細については、 [World Wide Web コンソーシアム (W3C) の Web サイト](https://go.microsoft.com/fwlink/?linkid=37125)にある XHTML モジュール化の仕様を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public override bool IsValidFormAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsValidFormAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsValidFormAttribute (attributeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsValidFormAttribute(System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="override this.IsValidFormAttribute : string -&gt; bool" Usage="xhtmlTextWriter.IsValidFormAttribute attributeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">確認対象の属性名。</param>
        <summary>XHTML 属性をチェックして、<see langword="&lt;form&gt;" /> 要素の開始タグにその XHTML 属性をレンダリングできるかどうかを確認します。</summary>
        <returns>属性を <see langword="true" /> 要素に適用できる場合は <see langword="&lt;form&gt;" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、要求元のデバイスの XHTML ドキュメントタイプによってサポートされているかどうかに応じて、条件付きで属性を表示する場合に便利です。  
  
   
  
## Examples  
 次のコード例は、カスタム <xref:System.Web.UI.WebControls.Label> コントロールと、XHTML としてコントロールのコンテンツをレンダリングするアダプターを作成する、より大きな例の一部です。  
  
 このコード例では、`attTest` という名前のブール型変数を作成し、パラメーター値 "style" を指定して <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> メソッドを呼び出した結果として返される戻り値に設定する方法を示します。 <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> メソッドが `true`を返す場合、コントロールに関連付けられているスタイルは、<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A?displayProperty=nameWithType> および <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A?displayProperty=nameWithType> メソッドを使用して表示されます。 `attTest` 値が `false`場合、スタイルはレンダリングされません。 このページには、コントロールのテキスト、<xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> メソッドによって表示される `<br/>` 要素、およびコントロールの XHTML コンテンツが条件付きでレンダリングされたことをユーザーに通知するテキスト文字列が表示されます。  
  
 このコード例は、<xref:System.Web.UI.XhtmlTextWriter> クラス用に用意されている大規模な例の一部です。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="xhtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">レンダリングする XHTML 属性。</param>
        <param name="value">XHTML 属性に代入される値。</param>
        <param name="key">XHTML 属性に関連付けられた <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 列挙値。</param>
        <summary>指定した XHTML 属性とその値を現在のマークアップ要素に出力できるかどうかを決定します。</summary>
        <returns>属性をページにレンダリングする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、<xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> メソッドをオーバーライドして、このテキストライターによってレンダリングされるいずれかの要素に対して `size` 属性が表示されるかどうかを確認する方法を示します。 `size` 属性がレンダリングされる場合、コードはその値が8ポイントかどうかをチェックします。 その場合、<xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> メソッドは `true`を返し、属性とその値を表示できるようにします。 値が8ポイント以外の場合、<xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> メソッドは `false`を返し、属性とその値はレンダリングされません。 <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> メソッドのキーパラメーターが <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 属性と一致しない場合、<xref:System.Web.UI.XhtmlTextWriter> クラスで定義されているように、<xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> メソッドの基本機能が呼び出されます。  
  
 このコード例は、<xref:System.Web.UI.XhtmlTextWriter> クラス用に用意されている大規模な例の一部です。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="xhtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">レンダリングする XHTML スタイル属性。</param>
        <param name="value">XHTML スタイル属性に代入される値。</param>
        <param name="key">XHTML スタイル属性に関連付けられた <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 列挙値。</param>
        <summary>指定した XHTML スタイル属性とその値を現在のマークアップ要素に出力できるかどうかを決定します。</summary>
        <returns>スタイル属性がレンダリングされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、<xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> メソッドをオーバーライドして、このテキストライターによってレンダリングされるいずれかの要素に対して <xref:System.Web.UI.HtmlTextWriterStyle.Color> 属性が表示されているかどうかを確認する方法を示します。 <xref:System.Web.UI.HtmlTextWriterStyle.Color> の属性が表示される場合、コードはその値が紫色であるかどうかをチェックします。 値が紫色の場合、<xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> メソッドは `false` を返し、属性とその値はレンダリングされません。 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 属性が他の値に設定されている場合、<xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> メソッドは `true` を返し、属性とその値が表示されます。 <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> メソッドのキーパラメーターが <xref:System.Web.UI.HtmlTextWriterStyle.Color> 属性と一致しない場合、<xref:System.Web.UI.XhtmlTextWriter> クラスで定義されているように、<xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> メソッドの基本機能が呼び出されます。  
  
 このコード例は、<xref:System.Web.UI.XhtmlTextWriter> クラス用に用意されている大規模な例の一部です。  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">属性を削除する XHTML 要素。</param>
        <param name="attributeName">指定された XHTML 要素から削除する属性。</param>
        <summary>要素の <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> コレクションから属性を削除します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetDocType">
      <MemberSignature Language="C#" Value="public virtual void SetDocType (System.Web.UI.XhtmlMobileDocType docType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDocType(valuetype System.Web.UI.XhtmlMobileDocType docType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.SetDocType(System.Web.UI.XhtmlMobileDocType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDocType (docType As XhtmlMobileDocType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDocType(System::Web::UI::XhtmlMobileDocType docType);" />
      <MemberSignature Language="F#" Value="abstract member SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit&#xA;override this.SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit" Usage="xhtmlTextWriter.SetDocType docType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="docType" Type="System.Web.UI.XhtmlMobileDocType" />
      </Parameters>
      <Docs>
        <param name="docType"><see cref="T:System.Web.UI.XhtmlMobileDocType" /> 列挙値のいずれか。</param>
        <summary>テキスト ライターがページまたはコントロールにレンダリングする XHTML ドキュメント タイプを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カスタムページアダプターの <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> メソッドを使用して、要求元のデバイスにレンダリングする XHTML の種類を定義します。 サポートされているドキュメントの種類は、<xref:System.Web.UI.XhtmlMobileDocType> 列挙体で定義されています。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.XhtmlMobileDocType" />
      </Docs>
    </Member>
    <Member MemberName="SuppressCommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressCommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressCommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressCommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressCommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressCommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.Hashtable" /> 属性が出力されない要素の <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> オブジェクトを取得します。</summary>
        <value>レンダリングされない <see cref="T:System.Collections.Hashtable" /> のコレクションを格納している要素の <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 抑制された属性のコレクションには、<xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> 属性がレンダリングされない XHTML 要素のリストが含まれます。  
  
 <xref:System.Web.UI.XhtmlTextWriter> クラスの新しいインスタンスが作成されると、<xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> 属性が抑制される要素の <xref:System.Collections.Hashtable> オブジェクトには次のものが含まれます。  
  
-   `base`  
  
-   `meta`  
  
-   `br`  
  
-   `head`  
  
-   `title`  
  
-   `html`  
  
-   `style`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="xhtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see langword="&lt;br/&gt;" /> 要素を XHTML 出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、継承された <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A?displayProperty=nameWithType> メソッドをオーバーライドし、<xref:System.Web.UI.HtmlTextWriter.Write%2A?displayProperty=nameWithType> メソッドと、<xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> メソッドを使用して `<br/>` 要素を使用してテキスト文字列を書き込む方法を示します。  
  
 [!code-csharp[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#4)]
 [!code-vb[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
