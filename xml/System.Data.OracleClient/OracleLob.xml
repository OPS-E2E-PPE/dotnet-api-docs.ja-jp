<Type Name="OracleLob" FullName="System.Data.OracleClient.OracleLob">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cf714b3bd2b53cdc8d043875d6ae1dc5390c45a4" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73344379" /></Metadata><TypeSignature Language="C#" Value="public sealed class OracleLob : System.IO.Stream, ICloneable, System.Data.SqlTypes.INullable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OracleLob extends System.IO.Stream implements class System.Data.SqlTypes.INullable, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OracleClient.OracleLob" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OracleLob&#xA;Inherits Stream&#xA;Implements ICloneable, INullable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OracleLob sealed : System::IO::Stream, ICloneable, System::Data::SqlTypes::INullable" />
  <TypeSignature Language="F#" Value="type OracleLob = class&#xA;    inherit Stream&#xA;    interface ICloneable&#xA;    interface IDisposable&#xA;    interface INullable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.OracleClient</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.SqlTypes.INullable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Oracle サーバーに格納される、<see langword="LOB" /> (Large Object Binary) データ型を表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob> は、データがオペレーティングシステムの物理ファイルではなくサーバーに格納されるという点で <xref:System.Data.OracleClient.OracleBFile> とは異なります。 また、読み取り/書き込み可能なオブジェクトである場合もあります。 <xref:System.Data.OracleClient.OracleBFile>とは異なり、常に読み取り専用です。  
  
 <xref:System.Data.OracleClient.OracleLob> は、これらの <xref:System.Data.OracleClient.OracleType> データ型のいずれかです。  
  
|OracleType データ型|説明|  
|--------------------------|-----------------|  
|`Blob`|最大サイズが 4 gb のバイナリデータを含む Oracle `BLOB` データ型。 <xref:System.Array> 型の <xref:System.Byte> に割り当てられます。|  
|`Clob`|サーバー上の既定の文字セットに基づいて文字データを格納する Oracle `CLOB` データ型。最大サイズは 4 GB です。 <xref:System.String> に割り当てられます。|  
|`NClob`|最大サイズが 4 GB のサーバー上の各国語文字セットに基づいて、文字データを格納する Oracle `NCLOB` データ型。 <xref:System.String> に割り当てられます。|  
  
 .NET アプリケーション開発者は、Oracle `LOB` 値を、型 <xref:System.Byte> および <xref:System.String>の <xref:System.Array> や、特殊な <xref:System.Data.OracleClient.OracleLob> データ型などの基本的な .NET データ型に取得できます。 <xref:System.Data.OracleClient.OracleLob> クラスは、Oracle データベースの Oracle `LOB` との間でのデータの読み取りおよび書き込みをサポートします。  
  
 基本的な .NET データ型と区別する <xref:System.Data.OracleClient.OracleLob> データ型の主な特性は次のとおりです。  
  
-   Oracle データベースから <xref:System.Data.OracleClient.OracleLob> クラスに Oracle `LOB` の値を取得した後は、開いているトランザクションの `LOB` データを変更し、変更内容をデータベースに直接反映することができます。 Oracle `LOB` の値を型 <xref:System.Byte> または <xref:System.String> の <xref:System.Array> に取得し、これらの配列を更新した場合、変更内容はデータベースに反映されません。  
  
-   <xref:System.Data.OracleClient.OracleLob> クラスを使用して `LOB` 値のチャンクにアクセスする場合、そのチャンクのみが Oracle データベースからクライアントに渡されます。 <xref:System.Data.OracleClient.OracleDataReader.GetChars%2A> メソッドを使用して `LOB` 値のチャンクにアクセスする場合、値の内容全体が Oracle データベースからクライアントに渡されます。  
  
 <xref:System.Data.OracleClient.OracleLob> オブジェクトを取得するには、<xref:System.Data.OracleClient.OracleDataReader.GetOracleLob%2A> メソッドを呼び出します。  
  
 この形式を使用して NULL の <xref:System.Data.OracleClient.OracleLob> を作成できます。  
  
```  
OracleLob myLob = OracleLob.Null;  
```  
  
 この手法は、主にサーバーから返された `LOB` が NULL かどうかをテストするために使用されます。この例を次に示します。  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 NULL `LOB` は、<xref:System.Data.OracleClient.OracleLob.Read%2A> 成功し、常に0バイトを返すの0バイト `LOB` と同様に動作します。  
  
 Null 値を含む `LOB` 列を選択すると、<xref:System.Data.OracleClient.OracleLob.Null>が返されます。  
  
 一時 `LOB`を取得する前に、トランザクションを開始する必要があります。 それ以外の場合、<xref:System.Data.OracleClient.OracleDataReader> は後でデータの取得に失敗する可能性があります。  
  
 DBMS_LOB を呼び出すことにより、Oracle で一時 `LOB` を開くこともできます。CREATETEMPORARY システムストアドプロシージャを指定し、`LOB` 出力パラメーターをバインドします。 クライアント側では、一時 `LOB` はテーブルベースの `LOB`のように動作します。 たとえば、一時 `LOB`を更新するには、トランザクションで囲む必要があります。  
  
 次C#の例では、一時 `LOB`を開く方法を示します。  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
byte[] tempbuff = new byte[10000];  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
> [!NOTE]
>  継承された <xref:System.IO.Stream.WriteByte%2A> メソッドは、文字データと共に使用すると失敗し、<xref:System.InvalidOperationException> がスローされます。 代わりに、<xref:System.Data.OracleClient.OracleLob.Write%2A> メソッドを使用してください。  
>   
>  一時的な `LOB`は、接続が閉じられたときにのみ閉じられます。ただし、プールと負荷がかかっている場合、一時的な `LOB`は閉じられません。 これは、`tempLob.Dispose()`を呼び出すことによって、一時的な `LOB`を破棄することによって解決できます。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Data.OracleClient.OracleLob source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Data.OracleClient.OracleLob source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Append(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (source As OracleLob)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Data::OracleClient::OracleLob ^ source);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Data.OracleClient.OracleLob -&gt; unit" Usage="oracleLob.Append source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="source">データの追加元の <see langword="LOB" />。</param>
        <summary>指定した <see langword="LOB" /> のデータを現在の <see langword="LOB" /> に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LOB`に書き込むには、SQL SELECT ステートメントで FOR UPDATE 句を使用して `LOB` を取得しておく必要があります。また、ローカルトランザクションが開始されている必要があります。  
  
 ソース `LOB` からのすべてのデータが、現在の `LOB`の末尾に追加されます。 このプロセスでは、どちらの `LOB` の位置も評価または変更されます。  
  
 基になるデータ型は、常に同じである必要があります。 たとえば、<xref:System.Data.OracleClient.OracleType.NClob>から追加する場合、変換先の <xref:System.Data.OracleClient.OracleLob> も <xref:System.Data.OracleClient.OracleType.NClob>である必要があります。  
  
> [!NOTE]
>  このリリースでは、読み取り専用 `LOB` に対する書き込み操作は成功する可能性がありますが、サーバー上の `LOB` は更新されません。 ただし、この場合、`LOB` のローカルコピーは更新されます。 そのため、<xref:System.Data.OracleClient.OracleLob> オブジェクトに対する読み取り操作では、書き込み操作の結果が返される可能性があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">ソースの <see cref="T:System.Data.OracleClient.OracleLob" /> が null です。</exception>
        <exception cref="T:System.InvalidOperationException">ソースの <see cref="T:System.Data.OracleClient.OracleLob" /> が null か、接続が閉じられています。</exception>
        <exception cref="T:System.ObjectDisposedException">ソースの <see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが閉じているか破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginBatch">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>複数の書き込み操作の実行中に、サーバー側のトリガーが発生しないようにします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch();" />
      <MemberSignature Language="F#" Value="member this.BeginBatch : unit -&gt; unit" Usage="oracleLob.BeginBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>複数の読み取り操作の実行中に、サーバー側のトリガーが発生しないようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLobOpenMode.ReadOnly> モードで `LOB` を開きます。したがって、`LOB` は、<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>への対応する呼び出しまでは書き込まれませんが、読み取ることはできません。 `LOB`へのバッチ書き込みを実行するには、<xref:System.Data.OracleClient.OracleLobOpenMode.ReadWrite>で <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> を呼び出します。  
  
 同じトランザクション内で複数回 <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> を呼び出すと、現在、Oracle の "ORA-22293: LOB は同じトランザクションで既に開かれています" というエラーがスローされます。 また、別の <xref:System.Data.OracleClient.OracleDataReader>を使用して `LOB` を取得し、元の呼び出し元が <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> メソッドを呼び出していない場合は、同じエラーが生成されます。 したがって、<xref:System.Data.OracleClient.OracleLob>の使用が終了したら、<xref:System.Data.OracleClient.OracleLob.EndBatch%2A> メソッドを呼び出す必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch (System.Data.OracleClient.OracleLobOpenMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch(valuetype System.Data.OracleClient.OracleLobOpenMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch (mode As OracleLobOpenMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch(System::Data::OracleClient::OracleLobOpenMode mode);" />
      <MemberSignature Language="F#" Value="member this.BeginBatch : System.Data.OracleClient.OracleLobOpenMode -&gt; unit" Usage="oracleLob.BeginBatch mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.OracleClient.OracleLobOpenMode" />
      </Parameters>
      <Docs>
        <param name="mode">この <see cref="T:System.Data.OracleClient.OracleLobOpenMode" /> 呼び出しと、対応する <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" /> 呼び出しの間に <see langword="LOB" /> にアクセスできるモード (いずれかの <see cref="M:System.Data.OracleClient.OracleLob.EndBatch" /> 値)。</param>
        <summary>指定したアクセス モードでの、複数の読み取り操作と書き込み操作の実行中に、サーバー側のトリガーが発生しないようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LOB`に書き込むには、SQL SELECT ステートメントで FOR UPDATE 句を使用して `LOB` を取得しておく必要があります。また、ローカルトランザクションが開始されている必要があります。  
  
 同じトランザクション内で複数回 <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> を呼び出すと、現在、Oracle の "ORA-22293: LOB は同じトランザクションで既に開かれています" というエラーがスローされます。 また、別の <xref:System.Data.OracleClient.OracleDataReader>を使用して `LOB` を取得し、元の呼び出し元が <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> メソッドを呼び出していない場合は、同じエラーが生成されます。 したがって、<xref:System.Data.OracleClient.OracleLob>の使用が終了したら、<xref:System.Data.OracleClient.OracleLob.EndBatch%2A> メソッドを呼び出す必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Data.OracleClient.OracleLob.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="LOB" /> ストリームを読み取ることができるかどうかを示す値を取得します。</summary>
        <value><see langword="true" /> ストリームが読み取りをサポートしている場合は <see langword="LOB" />。<see langword="false" /> が閉じているか破棄されている場合は <see langword="LOB" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>前方シークおよび後方シーク操作を実行できるかどうかを示す値を取得します。</summary>
        <value><see langword="false" /> が閉じているか破棄されている場合は <see langword="LOB" />。それ以外の場合は <see langword="true" />。 <see cref="F:System.Data.OracleClient.OracleLob.Null" /> の場合は、常に <see langword="true" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="LOB" /> が書き込みをサポートしているかどうかに関係なく、常に true を返します。</summary>
        <value><see langword="true" /> が開いている場合、または破棄されていない場合は、書き込みをサポートしているかどうかに関係なく、常に <see langword="LOB" /> を返します。<see langword="false" /> が閉じているか破棄されている場合は <see langword="LOB" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LOB`に書き込むには、SQL SELECT ステートメントで FOR UPDATE 句を使用して `LOB` を取得しておく必要があります。また、ローカルトランザクションを開始しておく必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChunkSize">
      <MemberSignature Language="C#" Value="public int ChunkSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChunkSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChunkSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ChunkSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ChunkSize : int" Usage="System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>読み取りまたは書き込み操作でサーバーから取得する、またはサーバーに送信する最小バイト数を示す値を取得します。</summary>
        <value>取得または送信する最小バイト数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.ChunkSize%2A> プロパティによって返される値は、Oracle の .NET Framework Data Provider の設定ではありません。 代わりに、Oracle Call Interface (OCI) がサーバーと通信するときに使用する値です。 <xref:System.Data.OracleClient.OracleLob.ChunkSize%2A> を使用して、クライアント側のチャンクが同じサイズであることを確認します。 より小さなチャンクで読み取りまたは書き込みを行ってもデータはキャッシュされず、サーバーへのラウンドトリップがあまり最適化されません。これは、完全なパケットが受信または送信されないためです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="oracleLob.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>元の <see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトと同じ Oracle の <see langword="LOB" /> を参照する、新しい <see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトを作成します。</summary>
        <returns>元の <see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトと同じ Oracle の <see langword="LOB" /> を参照する、新しい <see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新しい <xref:System.Data.OracleClient.OracleLob> オブジェクトのプロパティは、元のオブジェクトと同じ値に初期設定されています。 ただし、<xref:System.Data.OracleClient.OracleLob.Clone%2A> の完了後、各 <xref:System.Data.OracleClient.OracleLob> オブジェクトは互いに独立しています。 たとえば、元の <xref:System.Data.OracleClient.OracleLob> の [<xref:System.Data.OracleClient.OracleLob.Position%2A>] プロパティの値を変更しても、コピーの <xref:System.Data.OracleClient.OracleLob.Position%2A> の値は変更されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="oracleLob.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のストリームを終了し、ストリームに関連付けられたリソースを解放します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OracleClient.OracleConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As OracleConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleConnection ^ Connection { System::Data::OracleClient::OracleConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.OracleClient.OracleConnection" Usage="System.Data.OracleClient.OracleLob.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Data.OracleClient.OracleConnection" /> のインスタンスで使用される <see cref="T:System.Data.OracleClient.OracleLob" /> を取得します。</summary>
        <value>データ ソースへの接続。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Data.OracleClient.OracleLob" /> のデータをコピー先の <see cref="T:System.Data.OracleClient.OracleLob" /> にコピーします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Data.OracleClient.OracleLob -&gt; int64" Usage="oracleLob.CopyTo destination" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob -&gt; int64" Usage="oracleLob.CopyTo destination" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="destination">コピー先の <see cref="T:System.Data.OracleClient.OracleLob" />。</param>
        <summary>この <see cref="T:System.Data.OracleClient.OracleLob" /> のデータをコピー先の <see cref="T:System.Data.OracleClient.OracleLob" /> にコピーします。</summary>
        <returns>コピーされたバイト数。 これはすべての埋め込みバイトを除外します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基になるデータ型は、常に同じである必要があります。 たとえば、<xref:System.Data.OracleClient.OracleType.NClob>からコピーする場合、コピー先の <xref:System.Data.OracleClient.OracleLob> も <xref:System.Data.OracleClient.OracleType.NClob>である必要があります。  
  
 コピー先のオフセットが変換先の `LOB`の末尾を超えている場合、データのコピー先の `LOB` が拡張されます。 `LOB` の末尾と最後のオフセットの間のスペースは、データ型が `BLOB` の場合は0、`CLOB` および `NCLOB` のデータ型の場合は空白になります。  
  
 `LOB`に書き込むには、SQL SELECT ステートメントで FOR UPDATE 句を使用して `LOB` を取得しておく必要があります。また、ローカルトランザクションが開始されている必要があります。  
  
> [!NOTE]
>  このリリースでは、読み取り専用 `LOB` に対する書き込み操作は成功する可能性がありますが、サーバー上の `LOB` の更新は行われません。 ただし、この場合、`LOB` のローカルコピーが更新されます。 そのため、<xref:System.Data.OracleClient.OracleLob> オブジェクトに対する読み取り操作では、書き込み操作の結果が返される可能性があります。  
>   
>  `CopyTo` メソッドは、コピー操作を実行する前に、コピー先の `OracleLob` の内容をクリアしません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destination" /> パラメーターで指定されている <see cref="T:System.Data.OracleClient.OracleLob" /> が null です。</exception>
        <exception cref="T:System.InvalidOperationException">操作がトランザクション内で実行されていないか、<see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが null か、または接続が閉じられています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination, long destinationOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination, int64 destinationOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob, destinationOffset As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination, long destinationOffset);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Data.OracleClient.OracleLob * int64 -&gt; int64" Usage="oracleLob.CopyTo (destination, destinationOffset)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob * int64 -&gt; int64" Usage="oracleLob.CopyTo (destination, destinationOffset)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="destination">コピー先の <see cref="T:System.Data.OracleClient.OracleLob" />。</param>
        <param name="destinationOffset">コピー先のオフセット。 <see langword="CLOB" /> データ型および <see langword="NCLOB" /> データ型の場合、これは偶数のバイト数である必要があります。</param>
        <summary>この <see cref="T:System.Data.OracleClient.OracleLob" /> のデータを、コピーするデータ サイズを指定して、コピー先の <see cref="T:System.Data.OracleClient.OracleLob" /> にコピーします。</summary>
        <returns>コピーされたバイト数。 これはすべての埋め込みバイトを除外します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基になるデータ型は、常に同じである必要があります。 たとえば、<xref:System.Data.OracleClient.OracleType.NClob>からコピーする場合、コピー先の <xref:System.Data.OracleClient.OracleLob> も <xref:System.Data.OracleClient.OracleType.NClob>である必要があります。  
  
 コピー先のオフセットが変換先の `LOB`の末尾を超えている場合、データのコピー先の `LOB` が拡張されます。 `CLOB` および `NCLOB` データ型の `BLOB` データ型および空白の場合、`LOB` の末尾と終点のオフセットの間のスペースはゼロで埋められます。  
  
 `LOB`に書き込むには、SQL SELECT ステートメントで FOR UPDATE 句を使用して `LOB` を取得しておく必要があります。また、ローカルトランザクションが開始されている必要があります。  
  
> [!NOTE]
>  このリリースでは、読み取り専用 `LOB` に対する書き込み操作は成功する可能性がありますが、サーバー上の `LOB` は更新されません。 ただし、この場合、`LOB` のローカルコピーは更新されます。 そのため、<xref:System.Data.OracleClient.OracleLob> オブジェクトに対する読み取り操作では、書き込み操作の結果が返される可能性があります。  
>   
>  `CopyTo` メソッドは、コピー操作を実行する前に、コピー先の `OracleLob` の内容をクリアしません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destination" /> パラメーターで指定されている <see cref="T:System.Data.OracleClient.OracleLob" /> が null です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destinationOffset" /> で指定したパラメーターの値が 0 未満であるか、4 GB を超えています。  
  
- または - 
<paramref name="destinationOffset" /> パラメーターで <see langword="CLOB" /> または <see langword="NCLOB" /> データ型に指定した値が偶数ではありません。  
  
- または - 
<see langword="CLOB" /> および <see langword="NCLOB" /> データ型には、偶数のバイト数を指定する必要があります。</exception>
        <exception cref="T:System.InvalidOperationException">操作がトランザクション内で実行されていないか、<see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが null か、または接続が閉じられています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (long sourceOffset, System.Data.OracleClient.OracleLob destination, long destinationOffset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(int64 sourceOffset, class System.Data.OracleClient.OracleLob destination, int64 destinationOffset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (sourceOffset As Long, destination As OracleLob, destinationOffset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(long sourceOffset, System::Data::OracleClient::OracleLob ^ destination, long destinationOffset, long amount);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int64 * System.Data.OracleClient.OracleLob * int64 * int64 -&gt; int64" Usage="oracleLob.CopyTo (sourceOffset, destination, destinationOffset, amount)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="override this.CopyTo : int64 * System.Data.OracleClient.OracleLob * int64 * int64 -&gt; int64" Usage="oracleLob.CopyTo (sourceOffset, destination, destinationOffset, amount)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceOffset" Type="System.Int64" />
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="sourceOffset">コピー元のオフセット。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <param name="destination">コピー先 <see langword="OracleLob" /><see cref="N:System.Data.OracleClient" />。</param>
        <param name="destinationOffset">コピー先のオフセット。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <param name="amount">コピーするデータのサイズ (バイト単位)。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <summary>データ サイズとコピー先のオフセットを指定して、この <see cref="T:System.Data.OracleClient.OracleLob" /> からコピー先の <see cref="T:System.Data.OracleClient.OracleLob" /> にコピーします。</summary>
        <returns>コピーされたバイト数。 これはすべての埋め込みバイトを除外します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基になるデータ型は、常に同じである必要があります。 たとえば、<xref:System.Data.OracleClient.OracleType.NClob>からコピーする場合、コピー先の <xref:System.Data.OracleClient.OracleLob> も <xref:System.Data.OracleClient.OracleType.NClob>である必要があります。  
  
 コピー先のオフセットが変換先の `LOB`の末尾を超えている場合、データのコピー先の `LOB` が拡張されます。 `CLOB` および `NCLOB` データ型の `BLOB` データ型および空白の場合、`LOB` の末尾と終点のオフセットの間のスペースはゼロで埋められます。  
  
 `LOB`に書き込むには、SQL SELECT ステートメントで FOR UPDATE 句を使用して `LOB` を取得しておく必要があります。また、ローカルトランザクションが開始されている必要があります。  
  
> [!NOTE]
>  このリリースでは、読み取り専用 `LOB` に対する書き込み操作は成功する可能性がありますが、サーバー上の `LOB` は更新されません。 ただし、この場合、`LOB` のローカルコピーは更新されます。 そのため、<xref:System.Data.OracleClient.OracleLob> オブジェクトに対する読み取り操作では、書き込み操作の結果が返される可能性があります。  
>   
>  `CopyTo` メソッドは、コピー操作を実行する前に、コピー先の `OracleLob` の内容をクリアしません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destination" /> パラメーターで指定されている <see cref="T:System.Data.OracleClient.OracleLob" /> が null です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="amount" />、<paramref name="sourceOffset" />、または <paramref name="destinationOffset" /> パラメーターで指定したパラメーターの値が 0 未満であるか、4 GB を超えています。  
  
- または - 
<paramref name="amount" />、<paramref name="sourceOffset" />、または <paramref name="destinationOffset" /> パラメーターで <see langword="CLOB" /> または <see langword="NCLOB" /> データ型に指定した値が偶数ではありません。</exception>
        <exception cref="T:System.InvalidOperationException">操作がトランザクション内で実行されていないか、<see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが null か、または接続が閉じられています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="oracleLob.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このオブジェクトによって使用されているリソースを解放します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="oracleLob.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBatch">
      <MemberSignature Language="C#" Value="public void EndBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.EndBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndBatch();" />
      <MemberSignature Language="F#" Value="member this.EndBatch : unit -&gt; unit" Usage="oracleLob.EndBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>複数の書き込み操作の実行後に、サーバー側のトリガーの発生を再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob>に対する書き込み操作の実行を開始する前に、<xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Erase">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Data.OracleClient.OracleLob" /> からデータを消去します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase();" />
      <MemberSignature Language="F#" Value="member this.Erase : unit -&gt; int64" Usage="oracleLob.Erase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Data.OracleClient.OracleLob" /> からすべてのデータを消去します。</summary>
        <returns>消去したバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A> によってデータが切り捨てられることはありません。 `LOB` の長さは、`BLOB` データ型に対して同じままで、消去されたデータは0x00 で置き換えられます。 `CLOB` および `NCLOB` のデータ型はスペースで置き換えられます。  
  
 `LOB`に書き込むには、SQL SELECT ステートメントで FOR UPDATE 句を使用して `LOB` を取得しておく必要があります。また、ローカルトランザクションが開始されている必要があります。  
  
> [!NOTE]
>  このリリースでは、読み取り専用 `LOB` に対する書き込み操作は成功する可能性がありますが、サーバー上の `LOB` は更新されません。 ただし、この場合、`LOB` のローカルコピーは更新されます。 そのため、<xref:System.Data.OracleClient.OracleLob> オブジェクトに対する読み取り操作では、書き込み操作の結果が返される可能性があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">操作がトランザクション内で実行されていないか、<see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが null か、または接続が閉じられています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase (long offset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase(int64 offset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase (offset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase(long offset, long amount);" />
      <MemberSignature Language="F#" Value="member this.Erase : int64 * int64 -&gt; int64" Usage="oracleLob.Erase (offset, amount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">消去対象のオフセット。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <param name="amount">消去するデータのサイズ (バイト単位)。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <summary>この <see cref="T:System.Data.OracleClient.OracleLob" /> から、指定したサイズのデータを消去します。</summary>
        <returns>消去したバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `offset` パラメーターと `amount` パラメーターの値の合計は、<xref:System.Data.OracleClient.OracleLob>のサイズよりも大きくなる場合があります。 したがって、<xref:System.Data.OracleClient.OracleLob.Length%2A> プロパティによって返された値よりも大きい値を指定すると成功します。ただし <xref:System.Data.OracleClient.OracleLob.Erase%2A> は <xref:System.Data.OracleClient.OracleLob>の最後まで消去されます。 (同様に、`offset`に負の値が渡された場合、<xref:System.Data.OracleClient.OracleLob.Erase%2A> は成功しますが、<xref:System.Data.OracleClient.OracleLob>の先頭からのみ消去されます)。この動作は、<xref:System.Data.OracleClient.OracleLob.Read%2A> および <xref:System.Data.OracleClient.OracleLob.Write%2A> メソッドとは異なり、実際のサイズを確認するためにサーバーへのラウンドトリップを追加せずに、`offset` で指定された値からすべてのデータを消去できるという利点があります。  
  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A> によってデータが切り捨てられることはありません。 `LOB` の長さは、`BLOB` データ型に対して同じままで、消去されたデータは0x00 で置き換えられます。 `CLOB` および `NCLOB` のデータ型はスペースで置き換えられます。  
  
 `LOB`に書き込むには、SQL SELECT ステートメントで FOR UPDATE 句を使用して `LOB` を取得しておく必要があります。また、ローカルトランザクションが開始されている必要があります。  
  
> [!NOTE]
>  このリリースでは、読み取り専用 `LOB` に対する書き込み操作は成功する可能性がありますが、サーバー上の `LOB` は更新されません。 ただし、この場合、`LOB` のローカルコピーは更新されます。 そのため、<xref:System.Data.OracleClient.OracleLob> オブジェクトに対する読み取り操作では、書き込み操作の結果が返される可能性があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">操作がトランザクション内で実行されていないか、<see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが null か、または接続が閉じられています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="oracleLob.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在サポートされていません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このリリースでは、このメソッドは機能しません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBatched">
      <MemberSignature Language="C#" Value="public bool IsBatched { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBatched" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBatched As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBatched { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBatched : bool" Usage="System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションから <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> メソッドが呼び出されたかどうかを示す値を取得します。</summary>
        <value><see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> メソッドがアプリケーションから呼び出された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oracle 8.0.5 サーバーを使用すると、Oracle の "ORA-00600: 内部エラーコード" 例外がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public bool IsNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNull : bool" Usage="System.Data.OracleClient.OracleLob.IsNull" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.SqlTypes.INullable.IsNull</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.OracleClient.OracleLob" /> が <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> ストリームであるかどうかを示す値を取得します。</summary>
        <value><see cref="T:System.Data.OracleClient.OracleLob" /> が <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> ストリームである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemporary">
      <MemberSignature Language="C#" Value="public bool IsTemporary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemporary" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTemporary As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTemporary { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTemporary : bool" Usage="System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.OracleClient.OracleLob" /> が一時 <see langword="LOB" /> であるかどうかを示す値を取得します。</summary>
        <value><see cref="T:System.Data.OracleClient.OracleLob" /> が一時 <see langword="true" /> である場合は <see langword="LOB" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の例では、一時 `LOB`を作成する方法を示します。  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Data.OracleClient.OracleLob.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.OracleClient.OracleLob" /> のサイズを返す値を取得します。</summary>
        <value><see cref="T:System.Data.OracleClient.OracleLob" /> のサイズ (バイト単位)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob> のサイズは常に、すべてのデータ型についてバイト単位で返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="LobType">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleType LobType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.OracleClient.OracleType LobType" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.LobType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LobType As OracleType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleType LobType { System::Data::OracleClient::OracleType get(); };" />
      <MemberSignature Language="F#" Value="member this.LobType : System.Data.OracleClient.OracleType" Usage="System.Data.OracleClient.OracleLob.LobType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="LOB" /> データ型を返す値を取得します。</summary>
        <value><see cref="T:System.Data.OracleClient.OracleType" /><see langword="LOB" /> データ型の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob> には、次の <xref:System.Data.OracleClient.OracleType> データ型のいずれかを指定できます。  
  
|OracleType データ型|説明|  
|--------------------------|-----------------|  
|`Blob`|最大 4 GB のバイナリ データを格納する Oracle の `BLOB` 型。 <xref:System.Array> 型の <xref:System.Byte> に割り当てられます。|  
|`Clob`|サーバーの既定の文字セットに基づいて、最大 4 GB の文字データを格納する Oracle の `CLOB` 型。 <xref:System.String> に割り当てられます。|  
|`NClob`|最大サイズが 4 gb のサーバー上の各国語文字セットに基づいて、文字データを格納する Oracle `NCLOB` データ型。 <xref:System.String> に割り当てられます。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.Data.OracleClient.OracleLob Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Data.OracleClient.OracleLob Null" />
      <MemberSignature Language="DocId" Value="F:System.Data.OracleClient.OracleLob.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As OracleLob " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Data::OracleClient::OracleLob ^ Null;" />
      <MemberSignature Language="F#" Value=" staticval mutable Null : System.Data.OracleClient.OracleLob" Usage="System.Data.OracleClient.OracleLob.Null" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleLob</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>null の <see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトを表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この形式を使用して NULL の <xref:System.Data.OracleClient.OracleLob> を作成できます。  
  
```  
OracleLob myLob = OracleLOB.Null;  
```  
  
 この手法は、主にサーバーから返された `LOB` が NULL かどうかをテストするために使用されます。この例を次に示します。  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 NULL `LOB` は、<xref:System.Data.OracleClient.OracleLob.Read%2A> 成功し、常に0バイトを返す `LOB` ゼロバイトと同様に動作します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Data.OracleClient.OracleLob.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.OracleClient.OracleLob" /> ストリーム内の現在の読み込み位置を取得します。</summary>
        <value><see cref="T:System.Data.OracleClient.OracleLob" /> ストリーム内の現在位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ストリームは、位置を取得または設定するシークをサポートする必要があります。 ストリームでシークがサポートされているかどうかを確認するには、<xref:System.Data.OracleClient.OracleLob.CanSeek%2A> プロパティを使用します。  
  
 ストリームの長さを超えた場所へのシークはサポートされています。 `CLOB` データ型および `NCLOB` データ型については、奇数の位置をシークすることもできます。 詳細については、<xref:System.Data.OracleClient.OracleLob.Read%2A> プロパティの「解説」を参照してください。  
  
 <xref:System.Data.OracleClient.OracleLob.Position%2A> プロパティは、ストリームからの、使用、スキップ、またはその両方のバイト数を追跡しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="oracleLob.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">バイト配列。 このメソッドが戻るとき、指定したバイト配列の <paramref name="offset" /> から (<paramref name="offset" /> + <paramref name="count" />) までの値が、現在のソースから読み取られたバイトに置き換えられて含まれます。</param>
        <param name="offset">現在のストリームから読み取ったデータの格納を開始する位置を示す <paramref name="buffer" /> 内のバイト オフセット。インデックス番号は 0 から始まります。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <param name="count">現在のストリームから読み取る最大バイト数。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <summary>現在の <see cref="T:System.Data.OracleClient.OracleLob" /> ストリームからバイト シーケンスを読み取り、読み取ったバイト数の分だけストリーム内の位置を進めます。</summary>
        <returns>バッファーに読み取られた合計バイト数。 要求しただけのバイト数を読み取ることができなかった場合、この値は要求したバイト数より小さくなります。ストリームの末尾に到達した場合は 0 になることがあります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Read%2A> メソッドは、現在のストリームから最大 `count` バイトを読み取り、`offset`で始まる `buffer` に格納します。 ストリーム内の現在位置は、読み取ったバイト数だけ進んでいます。ただし、例外が発生した場合、ストリーム内の現在位置は変更されません。 <xref:System.Data.OracleClient.OracleLob.Read%2A> は、読み取ったバイト数を返します。 位置が現在ストリームの末尾にある場合にのみ、戻り値は0です。 データが使用できない場合、<xref:System.Data.OracleClient.OracleLob.Read%2A> は、少なくとも1バイトのデータを読み取ることができるまでブロックされます。<xref:System.Data.OracleClient.OracleLob.Read%2A> 現在の位置が `LOB`の最後にあるときに `LOB` から読み取ろうとした場合は0を返します。 ストリームの末尾に到達していない場合でも、<xref:System.Data.OracleClient.OracleLob.Read%2A> は要求されたバイト数を返すことができません。  
  
 Oracle 用の .NET Framework Data Provider は、すべての `CLOB` および `NCLOB` データを Unicode として処理します。 したがって、`CLOB` データ型および `NCLOB` データ型にアクセスする場合は、常にバイト数を処理します。このとき、各文字は2バイトになります。 たとえば、3文字の文字列が Oracle サーバーに `NCLOB` として保存されていて、その文字セットが1文字あたり4バイトの場合、`Read` 操作を実行する場合は、文字列の長さを6バイトとして指定します。。ただし、サーバーには12バイトとして格納されます。  
  
 次C#の例は、<xref:System.Data.OracleClient.OracleLob> オブジェクトを読み取る方法を示しています。  
  
```  
public static void ReadLobExample(OracleCommand command)  
{  
   int actual = 0;  
  
   //Select some data.  
   // Table Schema:  
   //  "CREATE TABLE TableWithLobs (a int, b BLOB, c CLOB, d NCLOB)";  
   //  "INSERT INTO TableWithLobs values (1, 'AA', 'AAA', N'AAAA')";  
   command.CommandText = "SELECT * FROM TableWithLobs";  
   OracleDataReader reader = command.ExecuteReader();  
   using(reader)  
   {  
      //Obtain the first row of data.  
      reader.Read();  
      //Obtain the LOBs (all 3 varieties).  
      OracleLob BLOB = reader.GetOracleLob(1);  
      OracleLob CLOB  = reader.GetOracleLob(2);  
      OracleLob NCLOB = reader.GetOracleLob(3);  
  
      //Example - Reading binary data (in chunks).  
      byte[] buffer = new byte[100];  
      while((actual = BLOB.Read(buffer, 0, buffer.Length)) >0)  
         Console.WriteLine(BLOB.LobType + ".Read(" + buffer + ", " + buffer.Length + ") => " + actual);  
  
      //Example - Reading CLOB/NCLOB data (in chunks).  
      //Note: You can read character data as raw Unicode bytes (using OracleLob.Read as in the above example).  
      //However, because the OracleLob object inherits directly from the.NET stream object,   
      //all the existing classes that manipulate streams can also be used. For example, the   
      //.NET StreamReader makes converting the raw bytes into actual characters easier.  
      StreamReader streamreader = new StreamReader(CLOB, Encoding.Unicode);  
      char[] cbuffer = new char[100];  
      while((actual = streamreader.Read(cbuffer, 0, cbuffer.Length)) >0)  
         Console.WriteLine(CLOB.LobType + ".Read(" + new string(cbuffer, 0, actual) + ", " + cbuffer.Length + ") => " + actual);  
  
      //Example - Reading data (all at once).  
      //You could use StreamReader.ReadToEnd to obtain all the string data,or simply  
      //call OracleLob.Value to obtain a contiguous allocation of all the data.  
      Console.WriteLine(NCLOB.LobType + ".Value => " + NCLOB.Value);  
   }  
}  
```  
  
 この形式を使用して NULL の <xref:System.Data.OracleClient.OracleLob> を作成できます。  
  
```  
OracleLob myLob = OracleLob.Null;  
```  
  
 この手法は、次の例に示すように、主にサーバーから返された `LOB` が NULL かどうかをテストするために使用されます。  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 NULL `LOB` は、<xref:System.Data.OracleClient.OracleLob.Read%2A> 成功し、常に0バイトを返す `LOB` ゼロバイトと同様に動作します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> が null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> パラメーターまたは <paramref name="count" /> パラメーターの値が正の値ではありません。  
  
- または - 
オフセット パラメーターとカウント パラメーターの合計値が、バッファー長を超えています。  
  
- または - 
<paramref name="amount" /> パラメーターまたは <paramref name="offset" /> パラメーターに指定された値が 0 より小さいか、4 GB を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">操作がトランザクション内で実行されていないか、<see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが null か、または接続が閉じられています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="oracleLob.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">原点からのバイト オフセット。 <paramref name="offset" /> が負の値の場合は、<paramref name="origin" /> で指定した位置から <paramref name="offset" /> で指定したバイト数だけさかのぼった位置が新しい位置になります。 <paramref name="offset" /> が 0 の場合は、<paramref name="origin" /> で指定した位置が新しい位置になります。 <paramref name="offset" /> が正の値の場合は、<paramref name="origin" /> で指定した位置から <paramref name="offset" /> で指定したバイト数だけ進んだ位置が新しい位置になります。</param>
        <param name="origin">新しい位置を取得するために使用する参照ポイントを示す <see cref="T:System.IO.SeekOrigin" /> 型の値。</param>
        <summary>現在の <see cref="T:System.Data.OracleClient.OracleLob" /> ストリームで位置を設定します。</summary>
        <returns>現在のストリーム内の新しい位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `offset` が負の場合、`origin` によって指定された位置の前に、`offset`で指定されたバイト数だけ新しい位置が配置される必要があります。 `offset` が0の場合、新しい位置は `origin`によって指定された位置である必要があります。 `offset` が正の値の場合、新しい位置は `offset`で指定されたバイト数で `origin` によって指定された位置に従う必要があります。  
  
 ストリームの長さを超えた場所へのシークはサポートされています。 `CLOB` データ型および `NCLOB` データ型については、奇数の位置をシークすることもできます。 詳細については、<xref:System.Data.OracleClient.OracleLob.Read%2A> プロパティの「解説」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="origin" /> パラメーターが、有効な値を格納していません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られた位置が値の長さを超えています。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが閉じているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="oracleLob.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">現在の <see cref="T:System.Data.OracleClient.OracleLob" /> ストリームの希望の長さ (バイト数)。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <summary><see cref="T:System.Data.OracleClient.OracleLob" /> ストリームの長さを、現在の長さより短い値に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob> ストリームの長さを増やしようとすると失敗し、"Message: ORA-22926: 指定されたトリミングの長さが現在の LOB 値の長さを超えています" が Oracle サーバーから返されます。  
  
 ストリームは、<xref:System.Data.OracleClient.OracleLob.SetLength%2A> を機能させるための書き込みとシークの両方をサポートする必要があります。  
  
 Oracle 用の .NET Framework Data Provider は、すべての `CLOB` および `NCLOB` データを Unicode として処理します。 したがって、`CLOB` データ型および `NCLOB` データ型にアクセスする場合は、常にバイト数を処理します。このとき、各文字は2バイトになります。 たとえば、3文字の文字列が Oracle サーバーに `NCLOB` として保存されていて、その文字セットが1文字あたり4バイトの場合、`SetLength` 操作を実行する場合は、文字列の長さを6バイトとして指定します。。ただし、サーバーには12バイトとして格納されます。  
  
 `LOB`に書き込むには、SQL SELECT ステートメントで FOR UPDATE 句を使用して `LOB` を取得しておく必要があります。また、ローカルトランザクションが開始されている必要があります。  
  
> [!NOTE]
>  読み取り専用 `LOB` に対する書き込み操作は成功する可能性がありますが、サーバー上の `LOB` は更新されません。 ただし、この場合、`LOB` のローカルコピーは更新されます。 そのため、<xref:System.Data.OracleClient.OracleLob> オブジェクトに対する読み取り操作では、書き込み操作の結果が返される可能性があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> パラメーターで <see langword="CLOB" /> または <see langword="NCLOB" /> データ型に指定した値が偶数ではありません。  
  
- または - 
<paramref name="value" /> で指定したパラメーターの値が 0 未満であるか、4 GB を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">操作がトランザクション内で実行されていないか、<see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが null か、または接続が閉じられています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Data.OracleClient.OracleLob.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になる値と等価の共通言語ランタイムの値を取得します。</summary>
        <value><see cref="F:System.Data.OracleClient.OracleType.Blob" /> の場合、<see langword="Byte[]" /> 型の配列。 <see cref="F:System.Data.OracleClient.OracleType.Clob" /> および <see cref="F:System.Data.OracleClient.OracleType.NClob" /> の場合、<see langword="String" />。 null データの場合、<see cref="T:System.DBNull" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データ型が <xref:System.Data.OracleClient.OracleType.Blob> の場合、<xref:System.Data.OracleClient.OracleLob.Value%2A> は、基になるデータ全体を `Byte[]`型の連続した配列として返します。 データ型の <xref:System.Data.OracleClient.OracleType.Clob> および <xref:System.Data.OracleClient.OracleType.NClob> の場合、<xref:System.Data.OracleClient.OracleLob.Value%2A> はすべてのデータを `String` データ型として返します。 Null データの場合、<xref:System.Data.OracleClient.OracleLob.Value%2A> は <xref:System.DBNull>を返します。 返された値を比較することによって、空のデータ、null データ、およびデータを区別できます。  
  
> [!NOTE]
>  `LOB` データ型を使用する利点は、クライアントで大量のデータをチャンク単位で取得する機能です。 ただし、<xref:System.Data.OracleClient.OracleLob.Value%2A>を使用すると、`LOB` 列のすべてのデータが1つの連続したチャンクとして取得されるため、アプリケーションのオーバーヘッドが大幅に増加する可能性があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="oracleLob.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">バイト配列。 このメソッドは、<paramref name="count" /> から現在のストリームに、<paramref name="buffer" /> で指定されたバイト数だけコピーします。</param>
        <param name="offset">現在のストリームへのバイトのコピーを開始する位置を示す <paramref name="buffer" /> 内のバイト オフセット。インデックス番号は 0 から始まります。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <param name="count">現在のストリームに書き込むバイト数。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <summary>バイト シーケンスを現在の <see cref="T:System.Data.OracleClient.OracleLob" /> ストリームに書き込み、書き込んだバイト数の分だけストリーム内の現在位置を進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 書き込み操作が成功した場合、ストリーム内の位置は、書き込まれたバイト数だけ進みます。 例外が発生した場合、ストリーム内の位置は変更されません。  
  
 `LOB` の末尾を越えた書き込みが許可され、書き込まれたバイト数で `LOB` が拡大されます。  
  
 Oracle 用の .NET Framework Data Provider は、すべての `CLOB` および `NCLOB` データを Unicode として処理します。 したがって、`CLOB` データ型および `NCLOB` データ型にアクセスする場合は、常にバイト数を処理します。このとき、各文字は2バイトになります。 たとえば、3文字の文字列が Oracle サーバーに `NCLOB` として保存されていて、その文字セットが1文字あたり4バイトの場合、`Write` 操作を実行する場合は、文字列の長さを6バイトとして指定します。。ただし、サーバーには12バイトとして格納されます。  
  
 `LOB`に書き込むには、SQL SELECT ステートメントで FOR UPDATE 句を使用して `LOB` を取得しておく必要があります。また、ローカルトランザクションが開始されている必要があります。  
  
 次C#の例は、<xref:System.Data.OracleClient.OracleLob> オブジェクトに書き込む方法を示しています。  
  
```  
public static void WriteLobExample(OracleCommand command)  
{  
   //Note: Updating LOB data requires a transaction.  
   command.Transaction = command.Connection.BeginTransaction();  
   //Select some data.  
   //    Table Schema:  
   //        "CREATE TABLE tablewithlobs (a int, b BLOB, c BLOB)";  
   //        "INSERT INTO tablewithlobs values (1, 'AA', 'AAA')";  
   command.CommandText = "SELECT * FROM TableWithLobs FOR UPDATE";  
   OracleDataReader reader = command.ExecuteReader();  
   using(reader)  
   {  
      //Obtain the first row of data.  
      reader.Read();  
      //Obtain both LOBs.  
      OracleLob BLOB1    = reader.GetOracleLob(1);  
      OracleLob BLOB2    = reader.GetOracleLob(2);  
      //Perform any desired operations on the LOB, (read, position, and so on).  
      //...  
      //Example - Writing binary data (directly to the backend).  
      //To write, you can use any of the stream classes, or write raw binary data using   
      //the OracleLob write method. Writing character vs. binary is the same;  
      //however note that character is always in terms of Unicode byte counts  
      //(for example: even number of bytes - 2 bytes for every Unicode character).  
      byte[] buffer = new byte[100];  
      buffer[0] = 0xCC;  
      buffer[1] = 0xDD;  
      BLOB1.Write(buffer, 0, 2);  
      BLOB1.Position = 0;  
      Console.WriteLine(BLOB1.LobType + ".Write(" + buffer + ", 0, 2) => " + BLOB1.Value);  
  
      //Example - Copying data into another LOB.  
      long actual = BLOB1.CopyTo(BLOB2);  
      Console.WriteLine(BLOB1.LobType + ".CopyTo(" + BLOB2.Value + ") => " + actual);  
  
      //Commit the transaction now that everything succeeded.  
      //Note: On error, Transaction.Dispose is called (from the using statement)  
      //and will automatically roll-back the pending transaction.  
      command.Transaction.Commit();  
   }  
}  
```  
  
> [!NOTE]
>  読み取り専用 `LOB` に対する書き込み操作は成功する可能性がありますが、サーバー上の `LOB` は更新されません。 ただし、この場合、`LOB` のローカルコピーは更新されます。 そのため、<xref:System.Data.OracleClient.OracleLob> オブジェクトに対する読み取り操作では、書き込み操作の結果が返される可能性があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> パラメーターまたは <paramref name="count" /> パラメーターの値が正の値ではありません。  
  
- または - 
<paramref name="offset" /> パラメーターと <paramref name="count" /> パラメーターの合計値が、<paramref name="buffer" /> の長さを超えています。  
  
- または - 
<paramref name="count" /> パラメーターまたは <paramref name="offset" /> パラメーターに指定された値が 0 より小さいか、4 GB を超えています。  
  
- または - 
<see langword="CLOB" /> および <see langword="NCLOB" /> データ型には、偶数のバイト数を指定する必要があります。</exception>
        <exception cref="T:System.InvalidOperationException">操作がトランザクション内で実行されていないか、<see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが null か、または接続が閉じられています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public override void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="override this.WriteByte : byte -&gt; unit" Usage="oracleLob.WriteByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">ストリームに書き込むバイト。</param>
        <summary><see cref="T:System.Data.OracleClient.OracleLob" /> ストリームの現在位置にバイトを書き込み、ストリームの位置を 1 バイトだけ進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 書き込み操作が成功した場合、ストリーム内の位置は1バイト進められます。 例外が発生した場合、ストリーム内の位置は変更されません。  
  
 `LOB` の末尾を越えた書き込みが許可され、`LOB` が1バイトだけ拡大されます。  
  
 `LOB`に書き込むには、SQL SELECT ステートメントで FOR UPDATE 句を使用して `LOB` を取得しておく必要があります。また、ローカルトランザクションが開始されている必要があります。  
  
> [!NOTE]
>  読み取り専用 `LOB` に対する書き込み操作は成功する可能性がありますが、サーバー上の `LOB` は更新されません。 ただし、この場合、`LOB` のローカルコピーは更新されます。 そのため、<xref:System.Data.OracleClient.OracleLob> オブジェクトに対する読み取り操作では、書き込み操作の結果が返される可能性があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
