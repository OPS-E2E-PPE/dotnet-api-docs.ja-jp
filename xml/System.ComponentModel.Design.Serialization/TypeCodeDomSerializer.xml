<Type Name="TypeCodeDomSerializer" FullName="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="43362f63756b7590fe4f4aab696dd0c82d29fc7a" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78711536" /></Metadata><TypeSignature Language="C#" Value="public class TypeCodeDomSerializer : System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeCodeDomSerializer extends System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeCodeDomSerializer&#xA;Inherits CodeDomSerializerBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeCodeDomSerializer : System::ComponentModel::Design::Serialization::CodeDomSerializerBase" />
  <TypeSignature Language="F#" Value="type TypeCodeDomSerializer = class&#xA;    inherit CodeDomSerializerBase" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Design" FromVersion="4.0.0.0" To="System.Windows.Forms.Design" ToVersion="4.0.0.0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ComponentModel.Design.Serialization.CodeDomSerializerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DefaultSerializationProvider(typeof(System.ComponentModel.Design.Serialization.CodeDomSerializationProvider))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7dc90-101">オブジェクトを新しい型にシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="7dc90-101">Serializes an object to a new type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7dc90-102"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer> クラスは <xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>と同じタスクを実行しますが、このクラスを介してオブジェクトをシリアル化すると、新しい型が定義されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-102">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer> class performs the same tasks as a <xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>, but serializing an object through this class defines a new type.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
    <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    <related type="Article" href="~/docs/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation.md"><span data-ttu-id="7dc90-103">動的なソース コードの生成とコンパイル</span><span class="sxs-lookup"><span data-stu-id="7dc90-103">Dynamic Source Code Generation and Compilation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeCodeDomSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCodeDomSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7dc90-104"><see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="7dc90-104">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public virtual object Deserialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Deserialize (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Deserialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; obj&#xA;override this.Deserialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; obj" Usage="typeCodeDomSerializer.Deserialize (manager, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="7dc90-105">シリアル化に使用するシリアル化マネージャー。</span><span class="sxs-lookup"><span data-stu-id="7dc90-105">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="7dc90-106">シリアル化に使用する型宣言。</span><span class="sxs-lookup"><span data-stu-id="7dc90-106">Type declaration to use for serialization.</span></span></param>
        <summary><span data-ttu-id="7dc90-107">指定した型宣言を逆シリアル化します。</span><span class="sxs-lookup"><span data-stu-id="7dc90-107">Deserializes the given type declaration.</span></span></summary>
        <returns><span data-ttu-id="7dc90-108">ルート オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7dc90-108">The root object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7dc90-109"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> メソッドは、以前にシリアル化されたコード型宣言を逆シリアル化します。</span><span class="sxs-lookup"><span data-stu-id="7dc90-109">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method deserializes a previously serialized code type declaration.</span></span> <span data-ttu-id="7dc90-110">既定の実装で実行されるタスクを次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="7dc90-110">The following table shows the tasks default implementation performs.</span></span>  
  
|<span data-ttu-id="7dc90-111">タスク</span><span class="sxs-lookup"><span data-stu-id="7dc90-111">Task</span></span>|<span data-ttu-id="7dc90-112">説明</span><span class="sxs-lookup"><span data-stu-id="7dc90-112">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="7dc90-113">大文字と小文字の区別のチェック</span><span class="sxs-lookup"><span data-stu-id="7dc90-113">Case Sensitivity Checks</span></span>|<span data-ttu-id="7dc90-114">実装では、<xref:System.CodeDom.Compiler.CodeDomProvider> サービスを検索して、メンバーが大文字と小文字を区別するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="7dc90-114">The implementation searches for a <xref:System.CodeDom.Compiler.CodeDomProvider> service to decide if it should treat members as case sensitive or case insensitive.</span></span>|  
|<span data-ttu-id="7dc90-115">ステートメントの並べ替え</span><span class="sxs-lookup"><span data-stu-id="7dc90-115">Statement Sorting</span></span>|<span data-ttu-id="7dc90-116">Init メソッドのすべてのメンバー変数とローカル変数は、テーブルに格納されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-116">All member variables and local variables from init methods are stored in a table.</span></span> <span data-ttu-id="7dc90-117">その後、init メソッドの各ステートメントは、左辺に従ってグループ化されたステートメントコレクションに追加されるため、特定の変数を割り当てたり操作したりするすべてのステートメントは、その変数の下にグループ化されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-117">Then each statement in an init method is added to a statement collection grouped according to its left-hand side, so all statements assigning or operating on a particular variable are grouped under that variable.</span></span> <span data-ttu-id="7dc90-118">ステートメントのない変数は破棄されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-118">Variables that have no statements are discarded.</span></span>|  
|<span data-ttu-id="7dc90-119">逆シリアル化</span><span class="sxs-lookup"><span data-stu-id="7dc90-119">Deserialization</span></span>|<span data-ttu-id="7dc90-120">各変数のステートメントコレクションは、変数に従って逆シリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-120">The statement collections for each variable are deserialized according to the variable.</span></span>|  
  
 <span data-ttu-id="7dc90-121">次の表は、<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> メソッドが必要とするサービスを示しています。</span><span class="sxs-lookup"><span data-stu-id="7dc90-121">The following table shows the services the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method requires.</span></span>  
  
|<span data-ttu-id="7dc90-122">サービス</span><span class="sxs-lookup"><span data-stu-id="7dc90-122">Service</span></span>|<span data-ttu-id="7dc90-123">説明</span><span class="sxs-lookup"><span data-stu-id="7dc90-123">Description</span></span>|  
|-------------|-----------------|  
|<xref:System.CodeDom.Compiler.CodeDomProvider>|<span data-ttu-id="7dc90-124">厳密には必要ありませんが、使用可能な場合はサービスを使用して、シリアル化で大文字と小文字を区別するか、大文字と小文字を区別しないかを決定します。</span><span class="sxs-lookup"><span data-stu-id="7dc90-124">While not strictly necessary, the service, if available, is used to determine if the serialization should be case sensitive or case insensitive.</span></span>|  
|<xref:System.ComponentModel.IContainer>|<span data-ttu-id="7dc90-125">逆シリアル化中にオブジェクトが name テーブルに存在しない場合は、<xref:System.ComponentModel.IContainer> に対するクエリが実行されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-125">If an object does not exist in the name table during deserialization, a query for <xref:System.ComponentModel.IContainer> is made.</span></span> <span data-ttu-id="7dc90-126">このクエリが成功した場合、オブジェクトのコンテナーがチェックされます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-126">If this query succeeds, the container is checked for the object.</span></span> <span data-ttu-id="7dc90-127">コンテナーは、コンポーネントで必要な任意のコンテナー引数のスタンドアロンとしても使用されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-127">The container is also used as a stand-in for any container argument needed by components.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7dc90-128"><paramref name="manager" /> または <paramref name="typeDecl" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7dc90-128"><paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation.md"><span data-ttu-id="7dc90-129">動的なソース コードの生成とコンパイル</span><span class="sxs-lookup"><span data-stu-id="7dc90-129">Dynamic Source Code Generation and Compilation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethod">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod GetInitializeMethod (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod GetInitializeMethod(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethod (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration, value As Object) As CodeMemberMethod" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::CodeDom::CodeMemberMethod ^ GetInitializeMethod(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializeMethod : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration * obj -&gt; System.CodeDom.CodeMemberMethod&#xA;override this.GetInitializeMethod : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration * obj -&gt; System.CodeDom.CodeMemberMethod" Usage="typeCodeDomSerializer.GetInitializeMethod (manager, declaration, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="7dc90-130">シリアル化に使用するシリアル化マネージャー。</span><span class="sxs-lookup"><span data-stu-id="7dc90-130">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="7dc90-131">シリアル化に使用する型宣言。</span><span class="sxs-lookup"><span data-stu-id="7dc90-131">The type declaration to use for serialization.</span></span></param>
        <param name="value"><span data-ttu-id="7dc90-132">シリアル化に使用する値。</span><span class="sxs-lookup"><span data-stu-id="7dc90-132">The value to use for serialization.</span></span></param>
        <summary><span data-ttu-id="7dc90-133">メンバーのシリアル化に使用するステートメントが格納されたメソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="7dc90-133">Returns the method where statements used to serialize a member are stored.</span></span></summary>
        <returns><span data-ttu-id="7dc90-134">指定したメンバーのすべての初期化コードを出力するために使用されるメソッド。</span><span class="sxs-lookup"><span data-stu-id="7dc90-134">The method used to emit all of the initialization code for the given member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7dc90-135"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A> メソッドは、指定されたメンバーのすべての初期化コードを出力するメソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="7dc90-135">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A> method returns the method to emit all of the initialization code for the given member.</span></span> <span data-ttu-id="7dc90-136">既定の実装では、空のコンストラクターが返されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-136">The default implementation returns an empty constructor.</span></span> <span data-ttu-id="7dc90-137">複数の値に対して同じメソッドが返される場合は、メソッドの同じインスタンスが返されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-137">If the same method is to be returned for multiple values, the same instance of the method should be returned.</span></span> <span data-ttu-id="7dc90-138"><xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType> ディクショナリを使用して、作成したメソッドを記憶できます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-138">You can use the <xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType> dictionary to remember methods you have created.</span></span> <span data-ttu-id="7dc90-139">`typeDecl` パラメーターを使用して、インフラストラクチャメソッドを追加することもできます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-139">The `typeDecl` parameter can also be used to add infrastructure methods.</span></span> <span data-ttu-id="7dc90-140">たとえば、オブジェクトごとに個別のメソッドを出力する場合は、これらのメソッドのすべてを順番に呼び出す1つのメソッドが必要です。</span><span class="sxs-lookup"><span data-stu-id="7dc90-140">For example, if you want to emit a separate method for each object, you need a single method that calls all of these methods in turn.</span></span> <span data-ttu-id="7dc90-141">このメソッドは、必要に応じてコードの種類の宣言に追加できます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-141">This method can be added to the code type declaration as needed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7dc90-142"><paramref name="manager" />、<paramref name="typeDecl" />、または <paramref name="value" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7dc90-142"><paramref name="manager" />, <paramref name="typeDecl" />, or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation.md"><span data-ttu-id="7dc90-143">動的なソース コードの生成とコンパイル</span><span class="sxs-lookup"><span data-stu-id="7dc90-143">Dynamic Source Code Generation and Compilation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethods">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod[] GetInitializeMethods (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod[] GetInitializeMethods(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethods (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As CodeMemberMethod()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::CodeDom::CodeMemberMethod ^&gt; ^ GetInitializeMethods(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializeMethods : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; System.CodeDom.CodeMemberMethod[]&#xA;override this.GetInitializeMethods : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; System.CodeDom.CodeMemberMethod[]" Usage="typeCodeDomSerializer.GetInitializeMethods (manager, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="7dc90-144">シリアル化に使用するシリアル化マネージャー。</span><span class="sxs-lookup"><span data-stu-id="7dc90-144">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="7dc90-145">シリアル化に使用する型宣言。</span><span class="sxs-lookup"><span data-stu-id="7dc90-145">The type declaration to use for serialization.</span></span></param>
        <summary><span data-ttu-id="7dc90-146">逆シリアル化中に解釈されるメソッドの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="7dc90-146">Returns an array of methods to be interpreted during deserialization.</span></span></summary>
        <returns><span data-ttu-id="7dc90-147">逆シリアル化中に解釈されるメソッドの <see cref="T:System.CodeDom.CodeMemberMethod" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="7dc90-147">A <see cref="T:System.CodeDom.CodeMemberMethod" /> array of methods to be interpreted during deserialization.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7dc90-148">既定の実装は、コンストラクターを含む単一要素の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="7dc90-148">The default implementation returns a single-element array with the constructor in it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7dc90-149"><paramref name="manager" /> または <paramref name="typeDecl" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7dc90-149"><paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation.md"><span data-ttu-id="7dc90-150">動的なソース コードの生成とコンパイル</span><span class="sxs-lookup"><span data-stu-id="7dc90-150">Dynamic Source Code Generation and Compilation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeTypeDeclaration Serialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, System.Collections.ICollection members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration Serialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, class System.Collections.ICollection members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Serialize (manager As IDesignerSerializationManager, root As Object, members As ICollection) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeTypeDeclaration ^ Serialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::Object ^ root, System::Collections::ICollection ^ members);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * obj * System.Collections.ICollection -&gt; System.CodeDom.CodeTypeDeclaration&#xA;override this.Serialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * obj * System.Collections.ICollection -&gt; System.CodeDom.CodeTypeDeclaration" Usage="typeCodeDomSerializer.Serialize (manager, root, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="root" Type="System.Object" />
        <Parameter Name="members" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="7dc90-151">シリアル化に使用するシリアル化マネージャー。</span><span class="sxs-lookup"><span data-stu-id="7dc90-151">The serialization manager to use for serialization.</span></span></param>
        <param name="root"><span data-ttu-id="7dc90-152">シリアル化するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7dc90-152">The object to serialize.</span></span></param>
        <param name="members"><span data-ttu-id="7dc90-153">省略可能なメンバーのコレクション。</span><span class="sxs-lookup"><span data-stu-id="7dc90-153">Optional collection of members.</span></span> <span data-ttu-id="7dc90-154"><see langword="null" /> または空になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="7dc90-154">Can be <see langword="null" /> or empty.</span></span></param>
        <summary><span data-ttu-id="7dc90-155">ルートを定義する新しい型宣言を作成することによって、オブジェクト ルートをシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="7dc90-155">Serializes the object root by creating a new type declaration that defines root.</span></span></summary>
        <returns><span data-ttu-id="7dc90-156">ルート オブジェクトを定義する <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</span><span class="sxs-lookup"><span data-stu-id="7dc90-156">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that defines the root object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7dc90-157"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> メソッドは、指定されたルートオブジェクトとオプションのメンバーのコレクションをシリアル化して、新しい型定義を作成します。</span><span class="sxs-lookup"><span data-stu-id="7dc90-157">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method serializes the given root object and optional collection of members to create a new type definition.</span></span> <span data-ttu-id="7dc90-158">`members` コレクションに値が含まれている場合は、これらの値がシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-158">If the `members` collection contains values, these values are serialized.</span></span> <span data-ttu-id="7dc90-159">値自体は、メンバー変数またはローカル変数としてシリアル化できます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-159">Values themselves may serialize as either member variables or local variables.</span></span> <span data-ttu-id="7dc90-160">この決定は、`GenerateMember`と呼ばれるオブジェクトで extender プロパティを検索することによって行われます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-160">This determination is done by searching for an extender property on the object called `GenerateMember`.</span></span> <span data-ttu-id="7dc90-161">`true`場合、メンバーが生成されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-161">If `true`, a member is generated.</span></span> <span data-ttu-id="7dc90-162">それ以外の場合は、ローカル変数が生成されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-162">Otherwise, a local variable is generated.</span></span> <span data-ttu-id="7dc90-163">便宜上、`members` コレクションにはルートオブジェクトを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-163">For convenience, the `members` collection can contain the root object.</span></span> <span data-ttu-id="7dc90-164">この場合、ルートオブジェクトもメンバーまたはローカル変数として追加されません。</span><span class="sxs-lookup"><span data-stu-id="7dc90-164">In this case, the root object is not also added as a member or local variable.</span></span>  
  
 <span data-ttu-id="7dc90-165">返される型の名前は、ルートオブジェクトの名前 (名前付きオブジェクトの場合) から取得されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-165">The name of the returned type is taken from the root object's name, if it was a named object.</span></span> <span data-ttu-id="7dc90-166">それ以外の場合は、ルートクラスの単純型名から名前が指定されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-166">If not, a name is fabricated from the simple type name of the root class.</span></span>  
  
 <span data-ttu-id="7dc90-167">次の表は、<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> メソッドの既定の実装によって実行されるタスクを示しています。</span><span class="sxs-lookup"><span data-stu-id="7dc90-167">The following table shows the tasks performed by the default implementation of the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method.</span></span>  
  
|<span data-ttu-id="7dc90-168">タスク</span><span class="sxs-lookup"><span data-stu-id="7dc90-168">Task</span></span>|<span data-ttu-id="7dc90-169">説明</span><span class="sxs-lookup"><span data-stu-id="7dc90-169">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="7dc90-170">コンテキストシード処理</span><span class="sxs-lookup"><span data-stu-id="7dc90-170">Context Seeding</span></span>|<span data-ttu-id="7dc90-171">シリアル化コンテキストは、<xref:System.ComponentModel.Design.Serialization.RootContext> および <xref:System.CodeDom.CodeTypeDeclaration> を含むデータで初期化されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-171">The serialization context is initialized with data including the <xref:System.ComponentModel.Design.Serialization.RootContext> and <xref:System.CodeDom.CodeTypeDeclaration></span></span>|  
|<span data-ttu-id="7dc90-172">メンバーのシリアル化</span><span class="sxs-lookup"><span data-stu-id="7dc90-172">Member Serialization</span></span>|<span data-ttu-id="7dc90-173">次に、<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> すべてのメンバーと呼び出し <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>について説明します。</span><span class="sxs-lookup"><span data-stu-id="7dc90-173">Next, <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> walks all of the members and calls <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>.</span></span> <span data-ttu-id="7dc90-174">シリアル化は <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>で実行されるため、シリアル化が2回行われないようにします。</span><span class="sxs-lookup"><span data-stu-id="7dc90-174">Because serialization is done opportunistically in <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>, this ensures that serialization is not done twice.</span></span>|  
|<span data-ttu-id="7dc90-175">ルートのシリアル化</span><span class="sxs-lookup"><span data-stu-id="7dc90-175">Root Serialization</span></span>|<span data-ttu-id="7dc90-176">次に、ルートオブジェクトがシリアル化され、ステートメントがステートメントコレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-176">Next, the root object is serialized and its statements are added to the statement collection.</span></span>|  
|<span data-ttu-id="7dc90-177">ステートメントの統合</span><span class="sxs-lookup"><span data-stu-id="7dc90-177">Statement Integration</span></span>|<span data-ttu-id="7dc90-178">すべてのオブジェクトがシリアル化された後、<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> メソッドはステートメントを並べ替え、<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>から返されたメソッドに追加します。</span><span class="sxs-lookup"><span data-stu-id="7dc90-178">After all objects are serialized, the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method orders the statements and adds them to a method returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span> <span data-ttu-id="7dc90-179">最後に、<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>から返されたすべてのメソッドを呼び出すコンストラクターが製造されます。</span><span class="sxs-lookup"><span data-stu-id="7dc90-179">Finally, a constructor is fabricated that calls all of the methods returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span>|  
  
-  
  
 <span data-ttu-id="7dc90-180">次の表は、<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> メソッドがコンテキストスタックに配置するオブジェクトを示しています。</span><span class="sxs-lookup"><span data-stu-id="7dc90-180">The following table shows the objects the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method places on the context stack.</span></span>  
  
|<span data-ttu-id="7dc90-181">インスタンス</span><span class="sxs-lookup"><span data-stu-id="7dc90-181">Instance</span></span>|<span data-ttu-id="7dc90-182">説明</span><span class="sxs-lookup"><span data-stu-id="7dc90-182">Description</span></span>|  
|--------------|-----------------|  
|<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>|<span data-ttu-id="7dc90-183">このシリアライザー。</span><span class="sxs-lookup"><span data-stu-id="7dc90-183">This serializer.</span></span> <span data-ttu-id="7dc90-184">派生クラスでは、このクラスにパブリックプロパティを追加すると便利な場合があります。</span><span class="sxs-lookup"><span data-stu-id="7dc90-184">Deriving classes may find it useful to add public properties to this class.</span></span>|  
|<xref:System.CodeDom.CodeTypeDeclaration>|<span data-ttu-id="7dc90-185">作成される型。</span><span class="sxs-lookup"><span data-stu-id="7dc90-185">The type being created.</span></span> <span data-ttu-id="7dc90-186">ほとんどのオブジェクトは、このへの直接アクセスを必要としません。</span><span class="sxs-lookup"><span data-stu-id="7dc90-186">Most objects do not need direct access to this.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7dc90-187"><paramref name="manager" /> または <paramref name="root" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7dc90-187"><paramref name="manager" /> or <paramref name="root" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation.md"><span data-ttu-id="7dc90-188">動的なソース コードの生成とコンパイル</span><span class="sxs-lookup"><span data-stu-id="7dc90-188">Dynamic Source Code Generation and Compilation</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
