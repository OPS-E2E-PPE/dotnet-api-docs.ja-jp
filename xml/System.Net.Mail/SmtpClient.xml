<Type Name="SmtpClient" FullName="System.Net.Mail.SmtpClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="61e5aff471bd7ea4a444bd29c577c8eca10ee717" /><Meta Name="ms.sourcegitcommit" Value="367e1eae0725e6da7136cd073aaa856ded5d5c29" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/13/2019" /><Meta Name="ms.locfileid" Value="75026730" /></Metadata><TypeSignature Language="C#" Value="public class SmtpClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SmtpClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Mail.SmtpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class SmtpClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SmtpClient : IDisposable" />
  <TypeSignature Language="F#" Value="type SmtpClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.Mail</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Obsolete("SmtpClient and its network of types are poorly designed, we strongly recommend you use https://github.com/jstedfast/MailKit and https://github.com/jstedfast/MimeKit instead")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>アプリケーションが SMTP (簡易メール転送プロトコル) を使用して電子メールを送信できるようにします。 <c>SmtpClient</c> 型は廃止されました。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

`SmtpClient` クラスは、配信のために電子メールを SMTP サーバーに送信するために使用されます。 SMTP プロトコルは、 [https://www.ietf.org](https://www.ietf.org/)で使用できる RFC 2821 で定義されています。  

> [!IMPORTANT]
> 新しい開発には `SmtpClient` クラスを使用しないことをお勧めします。 `SmtpClient` は多くの最新プロトコルをサポートしていないためです。 代わりに[Mailkit](https://github.com/jstedfast/MailKit)またはその他のライブラリを使用してください。 詳細については、GitHub で[Smtpclient を使用しないこと](https://github.com/dotnet/platform-compat/blob/master/docs/DE0005.md)をお勧めします。

`SmtpClient` クラスは、Xamarin では互換性のために残されています。 ただし、

- これは .NET Standard 2.0 以降のバージョンに含まれているため、これらのバージョンをサポートする .NET 実装の一部である必要があります。
- このファイルは存在し、.NET Framework 4 ~ .NET Framework 4.8 で使用できます。
- .NET Core で使用できますが、その使用は推奨されていません。

次の表に示すクラスは、<xref:System.Net.Mail.SmtpClient>を使用して送信できる電子メールメッセージを作成するために使用されます。  
  
|クラス|説明|  
|-----------|-----------------|  
|<xref:System.Net.Mail.Attachment>|添付ファイルを表します。 このクラスを使用すると、ファイル、ストリーム、またはテキストを電子メールメッセージに添付できます。|  
|<xref:System.Net.Mail.MailAddress>|送信者と受信者の電子メールアドレスを表します。|  
|<xref:System.Net.Mail.MailMessage>|電子メールメッセージを表します。|  
  
 <xref:System.Net.Mail.SmtpClient>を使用して電子メールメッセージを作成および送信するには、次の情報を指定する必要があります。  
  
-   電子メールの送信に使用する SMTP ホストサーバー。 <xref:System.Net.Mail.SmtpClient.Host%2A> と <xref:System.Net.Mail.SmtpClient.Port%2A> のプロパティを参照してください。  
  
-   認証用の資格情報 (SMTP サーバーで必要な場合)。 <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティを参照してください。  
  
-   送信者の電子メール アドレス。 `from` パラメーターを受け取る <xref:System.Net.Mail.SmtpClient.Send%2A> および <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドを参照してください。 また、<xref:System.Net.Mail.MailMessage.From%2A?displayProperty=nameWithType> プロパティも参照してください。  
  
-   受信者の電子メールアドレス。 `recipient` パラメーターを受け取る <xref:System.Net.Mail.SmtpClient.Send%2A> および <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドを参照してください。 また、<xref:System.Net.Mail.MailMessage.To%2A?displayProperty=nameWithType> プロパティも参照してください。  
  
-   メッセージの内容。 `body` パラメーターを受け取る <xref:System.Net.Mail.SmtpClient.Send%2A> および <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドを参照してください。 また、<xref:System.Net.Mail.MailMessage.Body%2A?displayProperty=nameWithType> プロパティも参照してください。  
  
 電子メールメッセージと共に添付ファイルを含めるには、まず <xref:System.Net.Mail.Attachment> クラスを使用して添付ファイルを作成し、次に <xref:System.Net.Mail.MailMessage.Attachments%2A?displayProperty=nameWithType> プロパティを使用してメッセージに追加します。 受信者と添付ファイルのファイルの種類によって使用される電子メールリーダーによっては、一部の受信者が添付ファイルを読み取ることができない場合があります。 添付ファイルを元の形式で表示できないクライアントの場合は、<xref:System.Net.Mail.MailMessage.AlternateViews%2A?displayProperty=nameWithType> プロパティを使用して代替ビューを指定できます。  
  
 .NET Framework では、アプリケーションまたはコンピューターの構成ファイルを使用して、すべての <xref:System.Net.Mail.SmtpClient> オブジェクトの既定のホスト、ポート、および資格情報の値を指定できます。 詳細については、「 [&lt;mailsettings&gt; 要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)」を参照してください。 .NET Core では、設定の既定値はサポートされていません。 回避策として、<xref:System.Net.Mail.SmtpClient> の関連プロパティを直接設定する必要があります。  
  
 電子メールが SMTP サーバーに送信されるのを待機している間に電子メールメッセージとブロックを送信するには、同期 <xref:System.Net.Mail.SmtpClient.Send%2A> の方法のいずれかを使用します。 電子メールの送信中にプログラムのメインスレッドの実行を継続できるようにするには、非同期の <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドのいずれかを使用します。 <xref:System.Net.Mail.SmtpClient.SendAsync%2A> 操作が完了すると、<xref:System.Net.Mail.SmtpClient.SendCompleted> イベントが発生します。 このイベントを受信するには、<xref:System.Net.Mail.SmtpClient.SendCompleted>に <xref:System.Net.Mail.SendCompletedEventHandler> デリゲートを追加する必要があります。 <xref:System.Net.Mail.SendCompletedEventHandler> デリゲートは、<xref:System.Net.Mail.SmtpClient.SendCompleted> イベントの通知を処理するコールバックメソッドを参照する必要があります。 電子メールの非同期送信を取り消すには、<xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> メソッドを使用します。  
  
> [!NOTE]
>  進行中の電子メール送信があり、<xref:System.Net.Mail.SmtpClient.SendAsync%2A> または <xref:System.Net.Mail.SmtpClient.Send%2A> を再度呼び出すと、<xref:System.InvalidOperationException>が表示されます。  
  
 アプリケーションが同じ SMTP サーバーに複数のメッセージを送信する場合は、<xref:System.Net.Mail.SmtpClient> クラスの現在のインスタンスによって確立された接続を SMTP サーバーに再利用できます。 これは、認証または暗号化を使用して SMTP サーバーへの接続を確立する場合に特に便利です。 TLS セッションの認証と確立のプロセスは、コストのかかる操作になることがあります。 多数の電子メールを同じ SMTP サーバーに送信するときに、各メッセージの接続を再確立する必要があることが、パフォーマンスに大きな影響を与える可能性があります。 電子メールの状態の更新、ニュースレターの配布、または電子メールのアラートを送信する大量の電子メールアプリケーションがあります。 また、多くの電子メールクライアントアプリケーションはオフラインモードをサポートしています。このモードでは、SMTP サーバーへの接続が確立されたときに、後で送信される多くの電子メールメッセージをユーザーが構成できます。 通常は、電子メールクライアントがすべての SMTP メッセージを (インターネットサービスプロバイダーによって提供される) 特定の SMTP サーバーに送信し、その後、この電子メールを他の SMTP サーバーに転送します。  
  
 <xref:System.Net.Mail.SmtpClient> クラス実装は、すべてのメッセージの接続を同じサーバーに再確立するオーバーヘッドを回避できるように、SMTP 接続をプールします。 アプリケーションは同じ <xref:System.Net.Mail.SmtpClient> オブジェクトを再利用して、同じ SMTP サーバーおよびさまざまな SMTP サーバーに多数の異なる電子メールを送信できます。 そのため、<xref:System.Net.Mail.SmtpClient> オブジェクトを使用してアプリケーションが終了したことを確認する方法はなく、クリーンアップする必要があります。  
  
 SMTP セッションが完了し、クライアントが接続を終了する場合は、送信するメッセージがなくなったことを示すために、サーバーに終了メッセージを送信する必要があります。 これにより、サーバーは、クライアントからの接続に関連付けられたリソースを解放し、クライアントから送信されたメッセージを処理することができます。  
  
 <xref:System.Net.Mail.SmtpClient> クラスには `Finalize` メソッドがないため、リソースを明示的に解放するには、アプリケーションで <xref:System.Net.Mail.SmtpClient.Dispose%2A> を呼び出す必要があります。 <xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドは、<xref:System.Net.Mail.SmtpClient.Host%2A> プロパティで指定された SMTP サーバーに対して確立されたすべての接続を反復処理し、終了メッセージを送信した後、TCP 接続を適切に終了します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドは、<xref:System.Net.Sockets.Socket> によって使用されているアンマネージリソースも解放し、オプションでマネージリソースも破棄します。  
  
 <xref:System.Net.Mail.SmtpClient> を使い終わったら、<xref:System.Net.Mail.SmtpClient.Dispose%2A>を呼び出します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドによって、<xref:System.Net.Mail.SmtpClient> は使用不可の状態になります。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>呼び出し後は、<xref:System.Net.Mail.SmtpClient>によって占有されていたメモリをガベージ コレクターがクリアできるよう、<xref:System.Net.Mail.SmtpClient> へのすべての参照を解放する必要があります。  
  
   
  
## Examples  
 次のコード例は、電子メールメッセージを非同期に送信する方法を示しています。  
  
 [!code-cpp[NclMailAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Net.Mime" />
    <related type="Article" href="~/docs/framework/network-programming/index.md">.NET Framework のネットワーク プログラミング</related>
    <related type="Article" href="~/docs/framework/network-programming/network-programming-samples.md">ネットワーク プログラミングのサンプル</related>
    <related type="Article" href="~/docs/framework/network-programming/network-tracing.md">.NET Framework のネットワークのトレース</related>
    <related type="Article" href="~/docs/framework/network-programming/security-in-network-programming.md">ネットワーク プログラミングにおけるセキュリティ</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Net.Mail.SmtpClient" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SmtpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SmtpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>構成ファイルの設定を使用して <see cref="T:System.Net.Mail.SmtpClient" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、アプリケーションまたはコンピューターの構成ファイルの設定を使用して、新しい <xref:System.Net.Mail.SmtpClient> の <xref:System.Net.Mail.SmtpClient.Host%2A>、<xref:System.Net.Mail.SmtpClient.Credentials%2A>、および <xref:System.Net.Mail.SmtpClient.Port%2A> の各プロパティを初期化します。 詳細については、「 [&lt;mailsettings&gt; 要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、電子メールメッセージを送信する方法を示しています。  
  
 [!code-cpp[NclMailSync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#4)]
 [!code-csharp[NclMailSync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#4)]  
  
 アプリケーションまたはコンピューターの構成ファイルの \<mailSettings > ノードの例については、「 [&lt;mailsettings&gt; 要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.Mail.SmtpPermission"><see cref="T:System.Net.Mail.SmtpClient" />を構築するには <see cref="F:System.Net.Mail.SmtpAccess.Connect" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SmtpClient (string host);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (host As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SmtpClient(System::String ^ host);" />
      <MemberSignature Language="F#" Value="new System.Net.Mail.SmtpClient : string -&gt; System.Net.Mail.SmtpClient" Usage="new System.Net.Mail.SmtpClient host" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="host">SMTP トランザクションで使用されるホスト コンピューターの名前または IP アドレスを格納している <see cref="T:System.String" />。</param>
        <summary>指定した SMTP サーバーを使用して電子メールを送信する <see cref="T:System.Net.Mail.SmtpClient" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `host` パラメーターは、<xref:System.Net.Mail.SmtpClient.Host%2A> プロパティの値を初期化するために使用されます。 <xref:System.Net.Mail.SmtpClient.Credentials%2A> と <xref:System.Net.Mail.SmtpClient.Port%2A> のプロパティは、アプリケーションまたはコンピューターの構成ファイルの設定を使用して初期化されます。 `host` が <xref:System.String.Empty?displayProperty=nameWithType>に `null` か等しい場合は、アプリケーションまたはコンピューターの構成ファイルの設定を使用して <xref:System.Net.Mail.SmtpClient.Host%2A> が初期化されます。  
  
 アプリケーションとコンピューターの構成ファイルの使用方法の詳細については、「 [&lt;mailSettings&gt; 要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)」を参照してください。 <xref:System.Net.Mail.SmtpClient> コンストラクターまたはプロパティを使用して情報を指定した場合、この情報は構成ファイルの設定よりも優先されます。  
  
   
  
## Examples  
 次のコード例は、このコンストラクターを呼び出す方法を示しています。  
  
 [!code-cpp[NclMailSync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#3)]
 [!code-csharp[NclMailSync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.Mail.SmtpPermission"><see cref="T:System.Net.Mail.SmtpClient" />を構築するには <see cref="F:System.Net.Mail.SmtpAccess.Connect" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SmtpClient (string host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string host, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (host As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SmtpClient(System::String ^ host, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Mail.SmtpClient : string * int -&gt; System.Net.Mail.SmtpClient" Usage="new System.Net.Mail.SmtpClient (host, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host">SMTP トランザクションで使用されるホストの名前または IP アドレスを格納している <see cref="T:System.String" />。</param>
        <param name="port"><paramref name="host" /> 上で使用されるポートを格納している 1 以上の <see cref="T:System.Int32" />。</param>
        <summary>指定した SMTP サーバーとポートを使用して電子メールを送信する <see cref="T:System.Net.Mail.SmtpClient" /> クラスのインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `host` パラメーターと `port` パラメーターによって、<xref:System.Net.Mail.SmtpClient.Host%2A> と <xref:System.Net.Mail.SmtpClient.Port%2A> プロパティの値がそれぞれ設定されます。 `host` が <xref:System.String.Empty?displayProperty=nameWithType>に `null` か等しい場合は、アプリケーションまたはコンピューターの構成ファイルの設定を使用して <xref:System.Net.Mail.SmtpClient.Host%2A> が初期化されます。 `port` がゼロの場合、<xref:System.Net.Mail.SmtpClient.Port%2A> はアプリケーションまたはコンピューターの構成ファイルの設定を使用して初期化されます。 <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティは、アプリケーションまたはコンピューターの構成ファイルの設定を使用して初期化されます。  
  
 アプリケーションとコンピューターの構成ファイルの使用方法の詳細については、「 [&lt;mailSettings&gt; 要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)」を参照してください。 <xref:System.Net.Mail.SmtpClient> コンストラクターまたはプロパティを使用して情報を指定した場合、この情報は構成ファイルの設定よりも優先されます。  
  
   
  
## Examples  
 次のコード例は、このコンストラクターを呼び出す方法を示しています。  
  
 [!code-cpp[NclMailSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#1)]
 [!code-csharp[NclMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" /> は 0 未満には設定できません。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">ポートを指定します。 <see cref="F:System.Net.Mail.SmtpAccess.ConnectToUnrestrictedPort" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="ClientCertificates">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.ClientCertificates" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientCertificates As X509CertificateCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ ClientCertificates { System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientCertificates : System.Security.Cryptography.X509Certificates.X509CertificateCollection" Usage="System.Net.Mail.SmtpClient.ClientCertificates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Client certificates not used")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509CertificateCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SSL (Secure Sockets Layer) 接続を確立するために使用する必要のある証明書を指定します。</summary>
        <value>1 つ以上のクライアント証明書を保持している <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。 既定値は、構成ファイルのメール構成属性から派生します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クライアント証明書は、既定では省略可能です。ただし、サーバー構成では、クライアントが最初の接続ネゴシエーションの一部として有効な証明書を提示することが必要になる場合があります。  
  
> [!NOTE]
>  フレームワークは、作成時に SSL セッションをキャッシュし、可能であれば、新しい要求に対してキャッシュされたセッションの再利用を試みます。 SSL セッションを再利用しようとすると、フレームワークは <xref:System.Net.Mail.SmtpClient.ClientCertificates%2A> の最初の要素 (存在する場合) を使用するか、<xref:System.Net.Mail.SmtpClient.ClientCertificates%2A> が空の場合は匿名セッションを再利用しようとします。  
  
   
  
## Examples  
 次のコード例では、SMTP サーバーとの SSL 接続を確立し、その接続を使用して電子メールを送信します。  
  
 [!code-csharp[NclSSLMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSSLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md">MailSettings 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Net.ICredentialsByHost Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentialsByHost Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Property Credentials As ICredentialsByHost" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::ICredentialsByHost ^ Credentials { System::Net::ICredentialsByHost ^ get(); void set(System::Net::ICredentialsByHost ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentialsByHost with get, set" Usage="System.Net.Mail.SmtpClient.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentialsByHost</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>差出人の認証に使用する資格情報を取得または設定します。</summary>
        <value>認証に使用する資格情報を表す <see cref="T:System.Net.ICredentialsByHost" />。資格情報が指定されなかった場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一部の SMTP サーバーでは、サーバーが電子メールを送信する前に、クライアントを認証する必要があります。 既定のネットワーク資格情報を使用するには、このプロパティを設定する代わりに、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> を `true` に設定します。 <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> プロパティが `false,` に設定されている場合、サーバーに接続するときに、<xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティで設定された値が資格情報に使用されます。 <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> プロパティが `false` に設定されていて、<xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティが設定されていない場合、メールはサーバーに匿名で送信されます。  
  
 資格情報は、アプリケーションおよびコンピューターの構成ファイルを使用して指定することもできます。 詳細については、「 [&lt;mailsettings&gt; 要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)」を参照してください。 <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティを使用して情報を指定した場合、この情報は構成ファイルの設定よりも優先されます。  
  
> [!CAUTION]
>  基本認証の資格情報を指定した場合、資格情報はクリア テキストでサーバーに送信されます。 これにより、資格情報が表示され、他のユーザーによって使用されるため、セキュリティ上の問題が発生する可能性があります。  
  
   
  
## Examples  
 次のコード例は、電子メールの送信に使用する資格情報を設定する方法を示しています。  
  
 [!code-cpp[NclMailSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#1)]
 [!code-csharp[NclMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">電子メールが送信中の場合、このプロパティの値は変更できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="DeliveryFormat">
      <MemberSignature Language="C#" Value="public System.Net.Mail.SmtpDeliveryFormat DeliveryFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Mail.SmtpDeliveryFormat DeliveryFormat" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.DeliveryFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property DeliveryFormat As SmtpDeliveryFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Mail::SmtpDeliveryFormat DeliveryFormat { System::Net::Mail::SmtpDeliveryFormat get(); void set(System::Net::Mail::SmtpDeliveryFormat value); };" />
      <MemberSignature Language="F#" Value="member this.DeliveryFormat : System.Net.Mail.SmtpDeliveryFormat with get, set" Usage="System.Net.Mail.SmtpClient.DeliveryFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.SmtpDeliveryFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>電子メールを送信するために <see cref="T:System.Net.Mail.SmtpClient" /> によって使用される配信形式を取得または設定します。</summary>
        <value><see cref="T:System.Net.Mail.SmtpClient" /> で使用される配信形式。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliveryMethod">
      <MemberSignature Language="C#" Value="public System.Net.Mail.SmtpDeliveryMethod DeliveryMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Mail.SmtpDeliveryMethod DeliveryMethod" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.DeliveryMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property DeliveryMethod As SmtpDeliveryMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Mail::SmtpDeliveryMethod DeliveryMethod { System::Net::Mail::SmtpDeliveryMethod get(); void set(System::Net::Mail::SmtpDeliveryMethod value); };" />
      <MemberSignature Language="F#" Value="member this.DeliveryMethod : System.Net.Mail.SmtpDeliveryMethod with get, set" Usage="System.Net.Mail.SmtpClient.DeliveryMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Mail.SmtpDeliveryMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>送信メッセージの処理方法を指定します。</summary>
        <value>電子メール メッセージの配信方法を示す <see cref="T:System.Net.Mail.SmtpDeliveryMethod" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配信方法は次のとおりです。  
  
-   SMTP サーバー。  
  
-   IIS のピックアップディレクトリに電子メールを移動すると、メッセージが配信されます。  
  
-   <xref:System.Net.Mail.SmtpClient.PickupDirectoryLocation%2A> によって指定されたディレクトリに電子メールを移動すると、後で別のアプリケーションによって配信されます。  
  
 このプロパティの既定値は、コンピューターまたはアプリケーションの構成ファイルで設定することもできます。 <xref:System.Net.Mail.SmtpClient.PickupDirectoryLocation%2A> プロパティに加えられた変更は、構成ファイルの設定よりも優先されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="P:System.Net.Configuration.SmtpSection.DeliveryMethod" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md">&lt;mailSettings&gt; 要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md">&lt;smtp&gt; 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>QUIT メッセージを SMTP サーバーに送信し、TCP 接続を適切に終了して、<see cref="T:System.Net.Mail.SmtpClient" /> クラスの現在のインスタンスで使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションが同じ SMTP サーバーに複数のメッセージを送信する場合は、<xref:System.Net.Mail.SmtpClient> クラスの現在のインスタンスによって確立された接続を SMTP サーバーに再利用できます。 これは、認証または暗号化を使用して SMTP サーバーへの接続を確立する場合に特に便利です。 TLS セッションの認証と確立のプロセスは、コストのかかる操作になることがあります。 多数の電子メールを同じ SMTP サーバーに送信するときに、各メッセージの接続を再確立する必要があることが、パフォーマンスに大きな影響を与える可能性があります。 電子メールの状態の更新、ニュースレターの配布、または電子メールのアラートを送信する大量の電子メールアプリケーションがあります。 また、多くの電子メールクライアントアプリケーションはオフラインモードをサポートしています。このモードでは、SMTP サーバーへの接続が確立されたときに、後で送信される多くの電子メールメッセージをユーザーが構成できます。 通常は、電子メールクライアントがすべての SMTP メッセージを (インターネットサービスプロバイダーによって提供される) 特定の SMTP サーバーに送信し、その後、この電子メールを他の SMTP サーバーに転送します。  
  
 <xref:System.Net.Mail.SmtpClient> クラス実装は、すべてのメッセージの接続を同じサーバーに再確立するオーバーヘッドを回避できるように、SMTP 接続をプールします。 アプリケーションは同じ <xref:System.Net.Mail.SmtpClient> オブジェクトを再利用して、同じ SMTP サーバーおよびさまざまな SMTP サーバーに多数の異なる電子メールを送信できます。 そのため、<xref:System.Net.Mail.SmtpClient> オブジェクトを使用してアプリケーションが終了したことを確認する方法はなく、クリーンアップする必要があります。  
  
 SMTP セッションが完了し、クライアントが接続を終了する場合は、送信するメッセージがなくなったことを示すために、サーバーに終了メッセージを送信する必要があります。 これにより、サーバーは、クライアントからの接続に関連付けられたリソースを解放し、クライアントから送信されたメッセージを処理することができます。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドは、確立されたすべての接続を反復処理し、各 SMTP サーバーに終了メッセージを送信した後、TCP 接続を正常に終了します。 また、これらのメソッドは、<xref:System.Net.Sockets.Socket> によって使用されているアンマネージリソースを解放し、必要に応じてマネージリソースを破棄します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="smtpClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>QUIT メッセージを SMTP サーバーに送信し、TCP 接続を適切に終了して、<see cref="T:System.Net.Mail.SmtpClient" /> クラスの現在のインスタンスで使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションが同じ SMTP サーバーに複数のメッセージを送信する場合は、<xref:System.Net.Mail.SmtpClient> クラスの現在のインスタンスによって確立された接続を SMTP サーバーに再利用できます。 これは、認証または暗号化を使用して SMTP サーバーへの接続を確立する場合に特に便利です。 TLS セッションの認証と確立のプロセスは、コストのかかる操作になることがあります。 多数の電子メールを同じ SMTP サーバーに送信するときに、各メッセージの接続を再確立する必要があることが、パフォーマンスに大きな影響を与える可能性があります。 電子メールの状態の更新、ニュースレターの配布、または電子メールのアラートを送信する大量の電子メールアプリケーションがあります。 また、多くの電子メールクライアントアプリケーションはオフラインモードをサポートしています。このモードでは、SMTP サーバーへの接続が確立されたときに、後で送信される多くの電子メールメッセージをユーザーが構成できます。 通常は、電子メールクライアントがすべての SMTP メッセージを (インターネットサービスプロバイダーによって提供される) 特定の SMTP サーバーに送信し、その後、この電子メールを他の SMTP サーバーに転送します。  
  
 <xref:System.Net.Mail.SmtpClient> クラス実装は、すべてのメッセージの接続を同じサーバーに再確立するオーバーヘッドを回避できるように、SMTP 接続をプールします。 アプリケーションは同じ <xref:System.Net.Mail.SmtpClient> オブジェクトを再利用して、同じ SMTP サーバーおよびさまざまな SMTP サーバーに多数の異なる電子メールを送信できます。 そのため、<xref:System.Net.Mail.SmtpClient> オブジェクトを使用してアプリケーションが終了したことを確認する方法はなく、クリーンアップする必要があります。  
  
 SMTP セッションが完了し、クライアントが接続を終了する場合は、送信するメッセージがなくなったことを示すために、サーバーに終了メッセージを送信する必要があります。 これにより、サーバーは、クライアントからの接続に関連付けられたリソースを解放し、クライアントから送信されたメッセージを処理することができます。  
  
 非同期 <xref:System.Net.Mail.SmtpClient.SendAsync%2A> 操作を実行している <xref:System.Net.Mail.SmtpClient> オブジェクトで <xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドを呼び出すと、<xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> メソッドが呼び出されたかのように送信操作が取り消されます。  
  
 <xref:System.Net.Mail.SmtpClient> クラスには、`Finalize` メソッドがありません。 そのため、アプリケーションは、リソースを明示的に解放するために <xref:System.Net.Mail.SmtpClient.Dispose%2A> を呼び出す必要があります。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドは、<xref:System.Net.Mail.SmtpClient.Host%2A> プロパティで指定された SMTP サーバーに対して確立されたすべての接続を反復処理し、終了メッセージを送信した後、TCP 接続を適切に終了します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドは、基になる <xref:System.Net.Sockets.Socket>によって使用されているアンマネージリソースも解放します。  
  
 <xref:System.Net.Mail.SmtpClient> を使い終わったら、<xref:System.Net.Mail.SmtpClient.Dispose%2A>を呼び出します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドによって、<xref:System.Net.Mail.SmtpClient> は使用不可の状態になります。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>呼び出し後は、<xref:System.Net.Mail.SmtpClient>によって占有されていたメモリをガベージ コレクターがクリアできるよう、<xref:System.Net.Mail.SmtpClient> へのすべての参照を解放する必要があります。  
  
 詳細については、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)および[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)を参照してください。  
  
> [!NOTE]
>  <xref:System.Net.Mail.SmtpClient>への最後の参照を解放する前に、必ず<xref:System.Net.Mail.SmtpClient.Dispose%2A>を呼び出してください。 それ以外の場合、ガベージコレクターがメモリを再利用できるように、使用しているリソースは解放されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="smtpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Does nothing at the moment.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>QUIT メッセージを SMTP サーバーに送信し、TCP 接続を適切に終了して、<see cref="T:System.Net.Mail.SmtpClient" /> クラスの現在のインスタンスで使用されているすべてのリソースを解放します。オプションでマネージド リソースも破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションが同じ SMTP サーバーに複数のメッセージを送信する場合は、<xref:System.Net.Mail.SmtpClient> クラスの現在のインスタンスによって確立された接続を SMTP サーバーに再利用できます。 これは、認証または暗号化を使用して SMTP サーバーへの接続を確立する場合に特に便利です。 TLS セッションの認証と確立のプロセスは、コストのかかる操作になることがあります。 多数の電子メールを同じ SMTP サーバーに送信するときに、各メッセージの接続を再確立する必要があることが、パフォーマンスに大きな影響を与える可能性があります。 電子メールの状態の更新、ニュースレターの配布、または電子メールのアラートを送信する大量の電子メールアプリケーションがあります。 また、多くの電子メールクライアントアプリケーションはオフラインモードをサポートしています。このモードでは、SMTP サーバーへの接続が確立されたときに、後で送信される多くの電子メールメッセージをユーザーが構成できます。 通常は、電子メールクライアントがすべての SMTP メッセージを (インターネットサービスプロバイダーによって提供される) 特定の SMTP サーバーに送信し、その後、この電子メールを他の SMTP サーバーに転送します。  
  
 <xref:System.Net.Mail.SmtpClient> クラス実装は、すべてのメッセージの接続を同じサーバーに再確立するオーバーヘッドを回避できるように、SMTP 接続をプールします。 アプリケーションは同じ <xref:System.Net.Mail.SmtpClient> オブジェクトを再利用して、同じ SMTP サーバーおよびさまざまな SMTP サーバーに多数の異なる電子メールを送信できます。 そのため、<xref:System.Net.Mail.SmtpClient> オブジェクトを使用してアプリケーションが終了したことを確認する方法はなく、クリーンアップする必要があります。  
  
 SMTP セッションが完了し、クライアントが接続を終了する場合は、送信するメッセージがなくなったことを示すために、サーバーに終了メッセージを送信する必要があります。 これにより、サーバーは、クライアントからの接続に関連付けられたリソースを解放し、クライアントから送信されたメッセージを処理することができます。  
  
 非同期 <xref:System.Net.Mail.SmtpClient.SendAsync%2A> 操作を実行している <xref:System.Net.Mail.SmtpClient> オブジェクトで <xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドを呼び出すと、<xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> メソッドが呼び出されたかのように送信操作が取り消されます。  
  
 <xref:System.Net.Mail.SmtpClient> クラスには、`Finalize` メソッドがありません。 そのため、アプリケーションは、リソースを明示的に解放するために <xref:System.Net.Mail.SmtpClient.Dispose%2A> を呼び出す必要があります。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドは、<xref:System.Net.Mail.SmtpClient.Host%2A> プロパティで指定された SMTP サーバーに対して確立されたすべての接続を反復処理し、終了メッセージを送信した後、TCP 接続を適切に終了します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドは、<xref:System.Net.Sockets.Socket> によって使用されているアンマネージリソースも解放し、オプションでマネージリソースも破棄します。  
  
 <xref:System.Net.Mail.SmtpClient> を使い終わったら、<xref:System.Net.Mail.SmtpClient.Dispose%2A>を呼び出します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドによって、<xref:System.Net.Mail.SmtpClient> は使用不可の状態になります。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>呼び出し後は、<xref:System.Net.Mail.SmtpClient>によって占有されていたメモリをガベージ コレクターがクリアできるよう、<xref:System.Net.Mail.SmtpClient> へのすべての参照を解放する必要があります。  
  
 詳細については、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)および[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)を参照してください。  
  
> [!NOTE]
>  <xref:System.Net.Mail.SmtpClient>への最後の参照を解放する前に、必ず<xref:System.Net.Mail.SmtpClient.Dispose%2A>を呼び出してください。 それ以外の場合、ガベージコレクターがメモリを再利用できるように、使用しているリソースは解放されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSsl">
      <MemberSignature Language="C#" Value="public bool EnableSsl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSsl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.EnableSsl" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableSsl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableSsl { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableSsl : bool with get, set" Usage="System.Net.Mail.SmtpClient.EnableSsl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Net.Mail.SmtpClient" /> が、接続を暗号化するために SSL (Secure Sockets Layer) を使用するかどうかを指定します。</summary>
        <value><see cref="T:System.Net.Mail.SmtpClient" /> が SSL を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> プロパティは、指定した SMTP メールサーバーへのアクセスに SSL を使用するかどうかを指定します。  
  
 このプロパティの既定値は、コンピューターまたはアプリケーションの構成ファイルで設定することもできます。 <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> プロパティに加えられた変更は、構成ファイルの設定よりも優先されます。  
  
 <xref:System.Net.Mail.SmtpClient> クラスでサポートされているのは、RFC 3207 で定義されているトランスポート層セキュリティを介した Secure SMTP に対する SMTP サービス拡張のみです。 このモードでは、暗号化されていないチャネルで SMTP セッションが開始され、SSL を使用してセキュリティで保護された通信に切り替えるために、クライアントからサーバーに STARTTLS コマンドが発行されます。 詳細については、インターネット技術標準化委員会 (IETF) によって発行された RFC 3207 を参照してください。  
  
 代替の接続方法では、プロトコルコマンドが送信される前に、SSL セッションが事前に確立されます。 この接続方法は、SMTP/SSL、SMTP over SSL、または SMTPS とも呼ばれ、既定ではポート465を使用します。 SSL を使用したこの代替接続方法は、現在サポートされていません。  
  
 <xref:System.Net.Mail.SmtpClient.ClientCertificates%2A> を使用して、SSL 接続の確立に使用するクライアント証明書を指定できます。 <xref:System.Net.ServicePointManager.ServerCertificateValidationCallback%2A> では、SMTP サーバーによって提供される証明書を拒否することができます。 <xref:System.Net.ServicePointManager.SecurityProtocol%2A> プロパティでは、使用する SSL プロトコルのバージョンを指定できます。  
  
> [!NOTE]
>  <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> プロパティが `true`に設定されていて、SMTP メールサーバーが EHLO コマンドに対する応答で STARTTLS をアドバタイズしていない場合、<xref:System.Net.Mail.SmtpClient.Send%2A> または <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドを呼び出すと <xref:System.Net.Mail.SmtpException>がスローされます。  
  
   
  
## Examples  
 次のコード例では、SMTP サーバーとの SSL 接続を確立し、その接続を使用して電子メールを送信します。  
  
 [!code-csharp[NclSSLMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSSLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="T:System.Net.Configuration.SmtpNetworkElement" />
        <altmember cref="P:System.Net.Configuration.SmtpNetworkElement.EnableSsl" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md">&lt;mailSettings&gt; 要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md">&lt;smtp&gt; 要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/network-element-network-settings.md">&lt;network&gt; 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="public string Host { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Host" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Host" />
      <MemberSignature Language="VB.NET" Value="Public Property Host As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Host { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Host : string with get, set" Usage="System.Net.Mail.SmtpClient.Host" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SMTP トランザクションで使用されるホストの名前または IP アドレスを取得または設定します。</summary>
        <value>SMTP トランザクションで使用するコンピューターの名前または IP アドレスを格納している <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.SmtpClient.Host%2A> プロパティの値は、コンストラクターまたはアプリケーションまたはコンピューターの構成ファイルを使用して設定することもできます。 詳細については、「 [&lt;mailsettings&gt; 要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)」を参照してください。  
  
 このプロパティを使用して情報を指定した場合、この情報は構成ファイルの設定よりも優先されます。  
  
   
  
## Examples  
 次のコード例は、アプリケーション構成ファイルで指定されたホストとポートを使用して電子メールメッセージを送信する方法を示しています。  
  
 [!code-cpp[NclMailSync#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#7)]
 [!code-csharp[NclMailSync#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作に指定された値は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">設定操作として指定した値が <see cref="F:System.String.Empty" /> ("") です。</exception>
        <exception cref="T:System.InvalidOperationException">電子メールが送信中の場合、このプロパティの値は変更できません。</exception>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="T:System.Net.Configuration.SmtpNetworkElement" />
        <altmember cref="P:System.Net.Configuration.SmtpNetworkElement.Host" />
        <altmember cref="P:System.Net.Mail.SmtpClient.Port" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md">system.net の mailSettings</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md">&lt;smtp&gt; 要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/network-element-network-settings.md">&lt;network&gt; 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="OnSendCompleted">
      <MemberSignature Language="C#" Value="protected void OnSendCompleted (System.ComponentModel.AsyncCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnSendCompleted(class System.ComponentModel.AsyncCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnSendCompleted (e As AsyncCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnSendCompleted(System::ComponentModel::AsyncCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnSendCompleted : System.ComponentModel.AsyncCompletedEventArgs -&gt; unit" Usage="smtpClient.OnSendCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.AsyncCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />。</param>
        <summary><see cref="E:System.Net.Mail.SmtpClient.SendCompleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.SmtpClient> クラスを継承するクラスは、<xref:System.Net.Mail.SmtpClient.OnSendCompleted%2A> メソッドをオーバーライドして、<xref:System.Net.Mail.SmtpClient.SendCompleted> イベントが発生したときに追加のタスクを実行できます。  
  
 <xref:System.Net.Mail.SmtpClient.OnSendCompleted%2A> では、デリゲートをアタッチせずに <xref:System.Net.Mail.SmtpClient.SendCompleted> を処理することもできます。 これは、派生クラスで <xref:System.Net.Mail.SmtpClient.SendCompleted> を処理する場合に推奨される手法です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートが <see cref="E:System.Net.Mail.SmtpClient.SendCompleted" /> イベントを受け取るように、基本クラスの <see cref="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)" /> メソッドを呼び出す必要があります。</para></block>
      </Docs>
    </Member>
    <Member MemberName="PickupDirectoryLocation">
      <MemberSignature Language="C#" Value="public string PickupDirectoryLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PickupDirectoryLocation" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.PickupDirectoryLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property PickupDirectoryLocation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PickupDirectoryLocation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PickupDirectoryLocation : string with get, set" Usage="System.Net.Mail.SmtpClient.PickupDirectoryLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ローカルの SMTP サーバーによって処理される電子メール メッセージをアプリケーションが保存するフォルダーを取得または設定します。</summary>
        <value>メール メッセージのピックアップ ディレクトリを指定する <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ピックアップディレクトリ内のメールメッセージは、IIS などのローカル SMTP サーバー (存在する場合) によって自動的に送信されます。  
  
 このプロパティの既定値は、コンピューターまたはアプリケーションの構成ファイルで設定することもできます。 <xref:System.Net.Mail.SmtpClient.PickupDirectoryLocation%2A> プロパティに加えられた変更は、構成ファイルの設定よりも優先されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="P:System.Net.Configuration.SmtpSection.DeliveryMethod" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md">&lt;mailSettings&gt; 要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md">&lt;smtp&gt; 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="Port">
      <MemberSignature Language="C#" Value="public int Port { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Port" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Port" />
      <MemberSignature Language="VB.NET" Value="Public Property Port As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Port { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Port : int with get, set" Usage="System.Net.Mail.SmtpClient.Port" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SMTP トランザクションで使用されるポートを取得または設定します。</summary>
        <value>SMTP ホスト上のポート番号を格納している <see cref="T:System.Int32" />。 既定値は 25 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.SmtpClient.Port%2A> プロパティの値は、コンストラクターまたはアプリケーションまたはコンピューターの構成ファイルを使用して設定することもできます。 構成ファイルの使用方法の詳細については、「 [&lt;mailsettings&gt; 要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)」を参照してください。 このプロパティを使用して情報を指定した場合、この情報は構成ファイルの設定よりも優先されます。  
  
   
  
## Examples  
 次のコード例は、アプリケーション構成ファイルで指定されたホストとポートを使用して電子メールメッセージを送信する方法を示しています。  
  
 [!code-cpp[NclMailSync#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#7)]
 [!code-csharp[NclMailSync#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作として指定した値が 0 以下です。</exception>
        <exception cref="T:System.InvalidOperationException">電子メールが送信中の場合、このプロパティの値は変更できません。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission"><see cref="P:System.Net.Mail.SmtpClient.Port" /> プロパティを設定します。 <see cref="F:System.Net.Mail.SmtpAccess.ConnectToUnrestrictedPort" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="T:System.Net.Configuration.SmtpNetworkElement" />
        <altmember cref="P:System.Net.Configuration.SmtpNetworkElement.Port" />
        <altmember cref="P:System.Net.Mail.SmtpClient.Host" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md">system.net の mailSettings</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md">&lt;smtp&gt; 要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/network-element-network-settings.md">&lt;network&gt; 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>電子メール メッセージを、配信用 SMTP サーバーに送信します。 これらのメソッドは、メッセージの送信中はブロックします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Net.Mail.MailMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Net.Mail.MailMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Send(System.Net.Mail.MailMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As MailMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Net::Mail::MailMessage ^ message);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.Mail.MailMessage -&gt; unit" Usage="smtpClient.Send message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" />
      </Parameters>
      <Docs>
        <param name="message">送信するメッセージを格納した <see cref="T:System.Net.Mail.MailMessage" />。</param>
        <summary>指定したメッセージを、配信用 SMTP サーバーに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、電子メールの送信中にブロックします。 <xref:System.Net.Mail.SmtpClient.Timeout%2A> プロパティを使用してタイムアウト値を指定すると、指定した時間が経過した後にメソッドが返されるようにすることができます。  
  
 このメソッドを呼び出す前に、関連するプロパティを設定するか、この情報を <xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29> コンストラクターに渡すことによって、構成ファイルを使用して <xref:System.Net.Mail.SmtpClient.Host%2A> プロパティと <xref:System.Net.Mail.SmtpClient.Port%2A> プロパティを設定する必要があります。  
  
 非同期的に送信されるメッセージがある場合は、このメソッドを呼び出すことはできません。  
  
 SMTP ホストで資格情報が必要な場合は、このメソッドを呼び出す前に設定する必要があります。 資格情報を指定するには、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> または <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティを使用します。  
  
 <xref:System.Net.Mail.SmtpException> 例外が発生した場合は、<xref:System.Net.Mail.SmtpException.StatusCode%2A> プロパティを調べて、操作が失敗した理由を確認します。 <xref:System.Net.Mail.SmtpException> には、操作が失敗した理由を示す内部例外を含めることもできます。  
  
 <xref:System.Net.Mail.SmtpClient.Send%2A> を使用して複数の受信者に電子メールを送信しているときに、SMTP サーバーが受信者の一部を有効で受け入れ、他の受信者を拒否した場合、<xref:System.Net.Mail.SmtpClient.Send%2A> は、承認された受信者に電子メールを送信し、<xref:System.Net.Mail.SmtpFailedRecipientsException> がスローされます (また <xref:System.Net.Mail.SmtpFailedRecipientException> は、1人の受信者のみが拒否された <xref:System.Net.Mail.SmtpFailedRecipientsException> には、拒否された受信者の一覧が含まれています。
  
> [!NOTE]
>  <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> プロパティが `true`に設定されていて、SMTP メールサーバーが EHLO コマンドに対する応答で STARTTLS をアドバタイズしていない場合、<xref:System.Net.Mail.SmtpClient.Send%2A> または <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドを呼び出すと <xref:System.Net.Mail.SmtpException>がスローされます。  
  
   
  
## Examples  
 次のコード例は、このメソッドの使用方法を示しています。  
  
 [!code-cpp[NclMailSync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#2)]
 [!code-csharp[NclMailSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">この <see cref="T:System.Net.Mail.SmtpClient" /> は、<see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> の呼び出し中です。  
  
- または - 
 <see cref="P:System.Net.Mail.MailMessage.From" /> は <see langword="null" />です。  
  
- または - 
<see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" />、および <see cref="P:System.Net.Mail.MailMessage.Bcc" /> の各プロパティで受信者が指定されていません。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Host" /> は <see langword="null" /> です。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Host" /> は空の文字列 ("") と等しくなります。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティが <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Port" /> がゼロ、負の値、または 65,535 より大きい値になっています。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.Net.Mail.SmtpException">SMTP サーバーへの接続に失敗しました。  
  
- または - 
認証に失敗しました。  
  
- または - 
操作はタイムアウトしました。 
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> は <see langword="true" /> に設定されますが、<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> または <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" /> に設定されます。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> が <see langword="true," /> に設定されていますが、SMTP メール サーバーが EHLO コマンドに対する応答で STARTTLS をアドバタイズしませんでした。</exception>
        <exception cref="T:System.Net.Mail.SmtpFailedRecipientException"><see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" />、または <see cref="P:System.Net.Mail.MailMessage.Bcc" /> 内の 1 人の受信者に、<paramref name="message" /> を配信できませんでした。</exception>
        <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException"><see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" />、または <see cref="P:System.Net.Mail.MailMessage.Bcc" /> 内の複数の受信者に、<paramref name="message" /> を配信できませんでした。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">SMTP サーバーに接続します。 関連付けられた列挙型: <see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string from, string recipients, string subject, string body);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string from, string recipients, string subject, string body) cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Send(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (from As String, recipients As String, subject As String, body As String)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ from, System::String ^ recipients, System::String ^ subject, System::String ^ body);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="F#" Value="member this.Send : string * string * string * string -&gt; unit" Usage="smtpClient.Send (from, recipients, subject, body)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public void Send (string from, string to, string subject, string body);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string from, string to, string subject, string body) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (from As String, to As String, subject As String, body As String)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ from, System::String ^ to, System::String ^ subject, System::String ^ body);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Send : string * string * string * string -&gt; unit" Usage="smtpClient.Send (from, to, subject, body)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" Index="0" />
        <Parameter Name="recipients" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
        <Parameter Name="to" Type="System.String" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="subject" Type="System.String" Index="2" />
        <Parameter Name="body" Type="System.String" Index="3" />
      </Parameters>
      <Docs>
        <param name="from">メッセージの差出人のアドレス情報を格納している <see cref="T:System.String" />。</param>
        <param name="recipients">メッセージの送信先のアドレスを格納している <see cref="T:System.String" />。</param>
        <param name="to">メッセージの送信先のアドレスを格納している <see cref="T:System.String" />。</param>
        <param name="subject">メッセージの件名を格納している <see cref="T:System.String" />。</param>
        <param name="body">メッセージ本文を格納している <see cref="T:System.String" />。</param>
        <summary>指定した電子メール メッセージを、配信用 SMTP サーバーに送信します。 メッセージの差出人、受信者、件名、およびメッセージ本文は、<see cref="T:System.String" /> オブジェクトを使用して指定されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、電子メールの送信中にブロックします。 <xref:System.Net.Mail.SmtpClient.Timeout%2A> プロパティを使用してタイムアウト値を指定すると、指定した時間が経過した後にメソッドが返されるようにすることができます。  
  
 このメソッドを呼び出す前に、関連するプロパティを設定するか、この情報を <xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29> コンストラクターに渡すことによって、構成ファイルを使用して <xref:System.Net.Mail.SmtpClient.Host%2A> プロパティと <xref:System.Net.Mail.SmtpClient.Port%2A> プロパティを設定する必要があります。  
  
 非同期的に送信されるメッセージがある場合は、このメソッドを呼び出すことはできません。  
  
 SMTP ホストで資格情報が必要な場合は、このメソッドを呼び出す前に設定する必要があります。 資格情報を指定するには、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> または <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティを使用します。  
  
 <xref:System.Net.Mail.SmtpException> 例外が発生した場合は、<xref:System.Net.Mail.SmtpException.StatusCode%2A> プロパティを調べて、操作が失敗した理由を確認します。 <xref:System.Net.Mail.SmtpException> には、操作が失敗した理由を示す内部例外を含めることもできます。  

 <xref:System.Net.Mail.SmtpClient.Send%2A> を使用して複数の受信者に電子メールを送信しているときに、SMTP サーバーが受信者の一部を有効で受け入れ、他の受信者を拒否した場合、<xref:System.Net.Mail.SmtpClient.Send%2A> は、承認された受信者に電子メールを送信し、<xref:System.Net.Mail.SmtpFailedRecipientsException> がスローされます (また <xref:System.Net.Mail.SmtpFailedRecipientException> は、1人の受信者のみが拒否された <xref:System.Net.Mail.SmtpFailedRecipientsException> には、拒否された受信者の一覧が含まれています。
 
> [!NOTE]
>  <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> プロパティが `true`に設定されていて、SMTP メールサーバーが EHLO コマンドに対する応答で STARTTLS をアドバタイズしていない場合、<xref:System.Net.Mail.SmtpClient.Send%2A> または <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドを呼び出すと <xref:System.Net.Mail.SmtpException>がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="from" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="recipients" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="from" /> が <see cref="F:System.String.Empty" /> です。  
  
- または - 
 <paramref name="recipients" /> が <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">この <see cref="T:System.Net.Mail.SmtpClient" /> は、<see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> の呼び出し中です。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Host" /> は <see langword="null" /> です。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Host" /> は空の文字列 ("") と等しくなります。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティが <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Port" /> がゼロ、負の値、または 65,535 より大きい値になっています。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.Net.Mail.SmtpException">SMTP サーバーへの接続に失敗しました。  
  
- または - 
認証に失敗しました。  
  
- または - 
操作はタイムアウトしました。 
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> は <see langword="true" /> に設定されますが、<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> または <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" /> に設定されます。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> が <see langword="true," /> に設定されていますが、SMTP メール サーバーが EHLO コマンドに対する応答で STARTTLS をアドバタイズしませんでした。</exception>
        <exception cref="T:System.Net.Mail.SmtpFailedRecipientException"><see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" />、または <see cref="P:System.Net.Mail.MailMessage.Bcc" /> 内の 1 人の受信者に、<paramref name="message" /> を配信できませんでした。</exception>
        <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException"><see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" />、または <see cref="P:System.Net.Mail.MailMessage.Bcc" /> 内の複数の受信者に、<paramref name="message" /> を配信できませんでした。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">SMTP サーバーに接続します。 関連付けられた列挙型: <see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>電子メールを送信します。 これらのメソッドは、呼び出し元のスレッドをブロックしません。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.Mail.MailMessage message, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.Mail.MailMessage message, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendAsync(System.Net.Mail.MailMessage,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (message As MailMessage, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::Mail::MailMessage ^ message, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.Mail.MailMessage * obj -&gt; unit" Usage="smtpClient.SendAsync (message, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">送信するメッセージを格納した <see cref="T:System.Net.Mail.MailMessage" />。</param>
        <param name="userToken">非同期操作の完了時に呼び出されるメソッドに渡されるユーザー定義のオブジェクト。</param>
        <summary>指定した電子メール メッセージを、配信用 SMTP サーバーに送信します。 このメソッドは、呼び出し元のスレッドをブロックしません。また、呼び出し元は、操作の完了時に呼び出されるメソッドにオブジェクトを渡すことができます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 電子メールが送信されたとき、または操作が取り消されたときに通知を受信するには、<xref:System.Net.Mail.SmtpClient.SendCompleted> イベントにイベントハンドラーを追加します。 <xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> メソッドを呼び出すことによって、<xref:System.Net.Mail.SmtpClient.SendAsync%2A> 操作を取り消すことができます。  
  
 <xref:System.Net.Mail.SmtpClient.SendAsync%2A>を呼び出した後、電子メールの送信が完了するのを待ってから、<xref:System.Net.Mail.SmtpClient.Send%2A> または <xref:System.Net.Mail.SmtpClient.SendAsync%2A>を使用して別の電子メールメッセージを送信してください。  
  
 このメソッドを呼び出す前に、関連するプロパティを設定するか、この情報を <xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29> コンストラクターに渡すことによって、構成ファイルを介して <xref:System.Net.Mail.SmtpClient.Host%2A> と <xref:System.Net.Mail.SmtpClient.Port%2A> を設定する必要があります。  
  
 SMTP ホストで資格情報が必要な場合は、このメソッドを呼び出す前に設定する必要があります。 資格情報を指定するには、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> または <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティを使用します。  
  
 <xref:System.Net.Mail.SmtpException> 例外が発生した場合は、<xref:System.Net.Mail.SmtpException.StatusCode%2A> プロパティを調べて、操作が失敗した理由を確認します。 <xref:System.Net.Mail.SmtpException> には、操作が失敗した理由を示す内部例外を含めることもできます。  
  
 <xref:System.Net.Mail.SmtpClient.SendAsync%2A> を使用して複数の受信者に電子メールを送信する場合、SMTP サーバーが有効として受信者を受け入れ、他の受信者を拒否すると、内部例外の <xref:System.NullReferenceException> と共に <xref:System.Net.Mail.SmtpException> がスローされます。 このエラーが発生した場合、<xref:System.Net.Mail.SmtpClient.SendAsync%2A> は、受信者に電子メールを送信できません。  
  
 アプリケーションでは、<xref:System.Net.Mail.SendCompletedEventHandler> デリゲートに渡された <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> プロパティを調べることによって、サーバー証明書の検証エラーを検出できます。  
  
 <xref:System.Net.Mail.SmtpClient.Timeout%2A> プロパティは、<xref:System.Net.Mail.SmtpClient.SendAsync%2A> の呼び出しには影響しません。  
  
 SMTP サーバーへの送信中にメールとブロックを送信するには、<xref:System.Net.Mail.SmtpClient.Send%2A> の方法のいずれかを使用します。  
  
> [!NOTE]
>  <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> プロパティが `true`に設定されていて、SMTP メールサーバーが EHLO コマンドに対する応答で STARTTLS をアドバタイズしていない場合、<xref:System.Net.Mail.SmtpClient.Send%2A> または <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドを呼び出すと <xref:System.Net.Mail.SmtpException>がスローされます。  
  
   
  
## Examples  
 次のコード例は、このメソッドの呼び出しを示しています。  
  
 [!code-cpp[NclMailAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> が <see langword="null" /> です。  
  
- または - 
 <see cref="P:System.Net.Mail.MailMessage.From" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">この <see cref="T:System.Net.Mail.SmtpClient" /> は、<see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> の呼び出し中です。  
  
- または - 
<see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" />、および <see cref="P:System.Net.Mail.MailMessage.Bcc" /> の各プロパティで受信者が指定されていません。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Host" /> は <see langword="null" /> です。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Host" /> は空の文字列 ("") と等しくなります。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティが <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Port" /> がゼロ、負の値、または 65,535 より大きい値になっています。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.Net.Mail.SmtpException">SMTP サーバーへの接続に失敗しました。  
  
- または - 
認証に失敗しました。  
  
- または - 
操作はタイムアウトしました。 
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> は <see langword="true" /> に設定されますが、<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> または <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" /> に設定されます。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> が <see langword="true," /> に設定されていますが、SMTP メール サーバーが EHLO コマンドに対する応答で STARTTLS をアドバタイズしませんでした。  
  
- または - 
<see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" />、または <see cref="P:System.Net.Mail.MailMessage.Bcc" /> 内の 1 人以上の受信者に、<paramref name="message" /> を配信できませんでした。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">SMTP サーバーに接続します。 関連付けられた列挙型: <see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string from, string recipients, string subject, string body, object userToken);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string from, string recipients, string subject, string body, object userToken) cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendAsync(System.String,System.String,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (from As String, recipients As String, subject As String, body As String, userToken As Object)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ from, System::String ^ recipients, System::String ^ subject, System::String ^ body, System::Object ^ userToken);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * string * string * string * obj -&gt; unit" Usage="smtpClient.SendAsync (from, recipients, subject, body, userToken)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public void SendAsync (string from, string to, string subject, string body, object userToken);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string from, string to, string subject, string body, object userToken) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (from As String, to As String, subject As String, body As String, userToken As Object)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ from, System::String ^ to, System::String ^ subject, System::String ^ body, System::Object ^ userToken);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * string * string * string * obj -&gt; unit" Usage="smtpClient.SendAsync (from, to, subject, body, userToken)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" Index="0" />
        <Parameter Name="recipients" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
        <Parameter Name="to" Type="System.String" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="subject" Type="System.String" Index="2" />
        <Parameter Name="body" Type="System.String" Index="3" />
        <Parameter Name="userToken" Type="System.Object" Index="4" />
      </Parameters>
      <Docs>
        <param name="from">メッセージの差出人のアドレス情報を格納している <see cref="T:System.String" />。</param>
        <param name="recipients">メッセージの送信先のアドレスを格納している <see cref="T:System.String" />。</param>
        <param name="to">メッセージの送信先のアドレスを格納している <see cref="T:System.String" />。</param>
        <param name="subject">メッセージの件名を格納している <see cref="T:System.String" />。</param>
        <param name="body">メッセージ本文を格納している <see cref="T:System.String" />。</param>
        <param name="userToken">非同期操作の完了時に呼び出されるメソッドに渡されるユーザー定義のオブジェクト。</param>
        <summary>電子メール メッセージを、配信用 SMTP サーバーに送信します。 メッセージの差出人、受信者、件名、およびメッセージ本文は、<see cref="T:System.String" /> オブジェクトを使用して指定されます。 このメソッドは、呼び出し元のスレッドをブロックしません。また、呼び出し元は、操作の完了時に呼び出されるメソッドにオブジェクトを渡すことができます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 電子メールが送信されたとき、または操作が取り消されたときに通知を受信するには、<xref:System.Net.Mail.SmtpClient.SendCompleted> イベントにイベントハンドラーを追加します。 <xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> メソッドを呼び出すことによって、<xref:System.Net.Mail.SmtpClient.SendAsync%2A> 操作を取り消すことができます。  
  
 <xref:System.Net.Mail.SmtpClient.SendAsync%2A>を呼び出した後、電子メールの送信が完了するのを待ってから、<xref:System.Net.Mail.SmtpClient.Send%2A> または <xref:System.Net.Mail.SmtpClient.SendAsync%2A>を使用して別の電子メールメッセージを送信してください。  
  
 このメソッドを呼び出す前に、構成ファイルを使用するかプロパティを設定するか、またはこの情報を <xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29> コンストラクターに渡すことによって、<xref:System.Net.Mail.SmtpClient.Host%2A> と <xref:System.Net.Mail.SmtpClient.Port%2A> のプロパティを設定する必要があります。  
  
 SMTP ホストで資格情報が必要な場合は、このメソッドを呼び出す前に設定する必要があります。 資格情報を指定するには、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> または <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティを使用します。  
  
 <xref:System.Net.Mail.SmtpException> 例外が発生した場合は、<xref:System.Net.Mail.SmtpException.StatusCode%2A> プロパティを調べて、操作が失敗した理由を確認します。 <xref:System.Net.Mail.SmtpException> には、操作が失敗した理由を示す内部例外を含めることもできます。  
  
 <xref:System.Net.Mail.SmtpClient.SendAsync%2A> を使用して複数の受信者に電子メールを送信する場合、SMTP サーバーが有効として受信者を受け入れ、他の受信者を拒否すると、内部例外の <xref:System.NullReferenceException> と共に <xref:System.Net.Mail.SmtpException> がスローされます。 このエラーが発生した場合、<xref:System.Net.Mail.SmtpClient.SendAsync%2A> は、受信者に電子メールを送信できません。  
  
 アプリケーションでは、<xref:System.Net.Mail.SendCompletedEventHandler> デリゲートに渡された <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> プロパティを調べることによって、サーバー証明書の検証エラーを検出できます。  
  
 <xref:System.Net.Mail.SmtpClient.Timeout%2A> プロパティは、<xref:System.Net.Mail.SmtpClient.SendAsync%2A> の呼び出しには影響しません。  
  
 SMTP サーバーへの送信中にメールとブロックを送信するには、<xref:System.Net.Mail.SmtpClient.Send%2A> の方法のいずれかを使用します。  
  
> [!NOTE]
>  <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> プロパティが `true`に設定されていて、SMTP メールサーバーが EHLO コマンドに対する応答で STARTTLS をアドバタイズしていない場合、<xref:System.Net.Mail.SmtpClient.Send%2A> または <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドを呼び出すと <xref:System.Net.Mail.SmtpException>がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="from" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="recipient" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="from" /> が <see cref="F:System.String.Empty" /> です。  
  
- または - 
 <paramref name="recipient" /> が <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">この <see cref="T:System.Net.Mail.SmtpClient" /> は、<see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> の呼び出し中です。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Host" /> は <see langword="null" /> です。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Host" /> は空の文字列 ("") と等しくなります。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティが <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Port" /> がゼロ、負の値、または 65,535 より大きい値になっています。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.Net.Mail.SmtpException">SMTP サーバーへの接続に失敗しました。  
  
- または - 
認証に失敗しました。  
  
- または - 
操作はタイムアウトしました。 
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> は <see langword="true" /> に設定されますが、<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> または <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" /> に設定されます。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> が <see langword="true," /> に設定されていますが、SMTP メール サーバーが EHLO コマンドに対する応答で STARTTLS をアドバタイズしませんでした。  
  
- または - 
<paramref name="recipients" /> 内の 1 人以上の受信者に、メッセージを配信できませんでした。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">SMTP サーバーに接続します。 関連付けられた列挙型: <see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.SendAsyncCancel : unit -&gt; unit" Usage="smtpClient.SendAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>電子メール メッセージを送信する非同期操作をキャンセルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 保留中の <xref:System.Net.Mail.SmtpClient.SendAsync%2A> 操作を取り消すには、<xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> メソッドを使用します。 送信待ちのメールがある場合、このメソッドはメールの格納に使用されているリソースを解放します。 送信待ちのメールがない場合、このメソッドは何も行いません。  
  
   
  
## Examples  
 次のコード例は、電子メールメッセージを非同期に送信する方法を示しています。 電子メールが送信されていない場合は、ユーザーがメールを取り消すことができます。  
  
 [!code-cpp[NclMailAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.Mail.SendCompletedEventHandler SendCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.Mail.SendCompletedEventHandler SendCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.Mail.SmtpClient.SendCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SendCompleted As SendCompletedEventHandler " FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::Mail::SendCompletedEventHandler ^ SendCompleted;" />
      <MemberSignature Language="F#" Value="member this.SendCompleted : System.Net.Mail.SendCompletedEventHandler " Usage="member this.SendCompleted : System.Net.Mail.SendCompletedEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event SendCompleted As SendCompletedEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.SendCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>電子メールの非同期的な送信操作が完了した場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.SmtpClient.SendCompleted> イベントは、送信操作の完了時に電子メールメッセージが非同期に送信されるたびに発生します。 電子メールメッセージを非同期で送信するには、<xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドを使用します。  
  
 <xref:System.Net.Mail.SendCompletedEventHandler> は <xref:System.Net.Mail.SmtpClient.SendCompleted>のデリゲートです。 <xref:System.ComponentModel.AsyncCompletedEventArgs> クラスは、イベントデータを含むイベントハンドラーを提供します。  
  
   
  
## Examples  
 次のコード例は、電子メールメッセージを非同期に送信する方法を示しています。  
  
 [!code-cpp[NclMailAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendMailAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>非同期操作として、指定したメッセージを配信用 SMTP サーバーに送信します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendMailAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SendMailAsync (System.Net.Mail.MailMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SendMailAsync(class System.Net.Mail.MailMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendMailAsync(System.Net.Mail.MailMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendMailAsync (message As MailMessage) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SendMailAsync(System::Net::Mail::MailMessage ^ message);" />
      <MemberSignature Language="F#" Value="member this.SendMailAsync : System.Net.Mail.MailMessage -&gt; System.Threading.Tasks.Task" Usage="smtpClient.SendMailAsync message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="message">送信するメッセージを格納した <see cref="T:System.Net.Mail.MailMessage" />。</param>
        <summary>非同期操作として、指定したメッセージを配信用 SMTP サーバーに送信します。</summary>
        <returns>非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task> オブジェクトは、メッセージが送信された後に完了します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendMailAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SendMailAsync (string from, string recipients, string subject, string body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SendMailAsync(string from, string recipients, string subject, string body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendMailAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendMailAsync (from As String, recipients As String, subject As String, body As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SendMailAsync(System::String ^ from, System::String ^ recipients, System::String ^ subject, System::String ^ body);" />
      <MemberSignature Language="F#" Value="member this.SendMailAsync : string * string * string * string -&gt; System.Threading.Tasks.Task" Usage="smtpClient.SendMailAsync (from, recipients, subject, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="recipients" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="subject" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="body" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="from">メッセージの差出人のアドレス情報を格納している <see cref="T:System.String" />。</param>
        <param name="recipients">メッセージの送信先のアドレスを格納している <see cref="T:System.String" />。</param>
        <param name="subject">メッセージの件名を格納している <see cref="T:System.String" />。</param>
        <param name="body">メッセージ本文を格納している <see cref="T:System.String" />。</param>
        <summary>非同期操作として、指定したメッセージを配信用 SMTP サーバーに送信します。 . メッセージの差出人、受信者、件名、およびメッセージ本文は、<see cref="T:System.String" /> オブジェクトを使用して指定されます。</summary>
        <returns>非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task> オブジェクトは、メッセージが送信された後に完了します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="from" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="recipients" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="from" /> が <see cref="F:System.String.Empty" /> です。  
  
- または - 
 <paramref name="recipients" /> が <see cref="F:System.String.Empty" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ServicePoint">
      <MemberSignature Language="C#" Value="public System.Net.ServicePoint ServicePoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ServicePoint ServicePoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.ServicePoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServicePoint As ServicePoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::ServicePoint ^ ServicePoint { System::Net::ServicePoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServicePoint : System.Net.ServicePoint" Usage="System.Net.Mail.SmtpClient.ServicePoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ServicePoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>電子メール メッセージの送信に使用するネットワーク接続を取得します。</summary>
        <value>SMTP で使用される <see cref="T:System.Net.ServicePoint" /> プロパティに接続する <see cref="P:System.Net.Mail.SmtpClient.Host" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.SmtpClient.ServicePoint%2A> プロパティの設定は、アプリケーションまたはコンピューターの構成ファイルと <xref:System.Net.ServicePointManager> クラスで指定された既定値を使用して作成されます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Net.Mail.SmtpClient.ServicePoint%2A> プロパティにアクセスする方法を示しています。  
  
 [!code-cpp[NclMailSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#1)]
 [!code-csharp[NclMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Net.Mail.SmtpClient.Host" /> が <see langword="null" /> または空の文字列 ("") です。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.Port" /> が 0 です。</exception>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/connectionmanagement-element-network-settings.md">connectionManagement 要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/network-programming/managing-connections.md">接続の管理</related>
      </Docs>
    </Member>
    <Member MemberName="TargetName">
      <MemberSignature Language="C#" Value="public string TargetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TargetName" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.TargetName" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TargetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetName : string with get, set" Usage="System.Net.Mail.SmtpClient.TargetName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>拡張保護を使用するときの認証に使用するサービス プロバイダー名 (SPN: Service Provider Name) を取得または設定します。</summary>
        <value>拡張保護に使用する SPN を指定する <see cref="T:System.String" />。 この SPN の既定値の形式は "SMTPSVC/&lt;host&gt;" で、&lt;host&gt; は SMTP メールサーバーのホスト名です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.SmtpClient.TargetName%2A> プロパティは、アプリケーションが拡張保護を使用している場合に、統合 Windows 認証で使用されます。 この <xref:System.Net.Mail.SmtpClient> は、資格情報のチャレンジ応答に、サービス固有の情報 (SPN) と、必要に応じてチャネル固有の情報 (チャネルバインディングトークンまたは CBT) を含めることができるように拡張保護を提供できます。 資格情報の交換でこの情報を使用すると、不適切に取得された可能性がある資格情報チャレンジ応答の悪意のある使用からサービスを保護することができます。  
  
 このプロパティの既定値は、コンピューターまたはアプリケーションの構成ファイルで設定することもできます。 <xref:System.Net.Mail.SmtpClient.TargetName%2A> プロパティに加えられた変更は、構成ファイルの設定よりも優先されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="T:System.Net.Configuration.SmtpNetworkElement" />
        <altmember cref="P:System.Net.Configuration.SmtpNetworkElement.TargetName" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">統合 Windows 認証と拡張保護</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md">&lt;mailSettings&gt; 要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md">&lt;smtp&gt; 要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/network-element-network-settings.md">&lt;network&gt; 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Timeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : int with get, set" Usage="System.Net.Mail.SmtpClient.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>同期的な <see cref="Overload:System.Net.Mail.SmtpClient.Send" /> 呼び出しがタイムアウトになるまでの時間を指定する値を取得または設定します。</summary>
        <value>タイムアウト値 (ミリ秒) を指定する <see cref="T:System.Int32" />。 既定値は 100,000 ミリ秒 (100 秒) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、<xref:System.Net.Mail.SmtpClient.Send%2A> メソッドの呼び出しは、操作が完了するまでブロックされます。 <xref:System.Net.Mail.SmtpClient.Timeout%2A> プロパティを正の値に設定し、割り当てられた時間内に <xref:System.Net.Mail.SmtpClient.Send%2A> 操作を完了できない場合、<xref:System.Net.Mail.SmtpClient> クラスは <xref:System.Net.Mail.SmtpException> 例外をスローします。  
  
 メッセージを送信し、アプリケーションスレッドでの実行を継続するには、<xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドを使用します。  
  
   
  
## Examples  
 次のコード例は、タイムアウト値を取得して設定する方法を示しています。  
  
 [!code-cpp[NclMailSync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#3)]
 [!code-csharp[NclMailSync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作として指定した値が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">電子メールが送信中の場合、このプロパティの値は変更できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.UseDefaultCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDefaultCredentials As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDefaultCredentials { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDefaultCredentials : bool with get, set" Usage="System.Net.Mail.SmtpClient.UseDefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>set: System.MonoNotSupported("no DefaultCredential support in Mono")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Boolean" /> が要求と共に送信されるかどうかを制御する <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 値を取得または設定します。</summary>
        <value>既定の資格情報を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一部の SMTP サーバーでは、サーバーが電子メールを送信する前に、クライアントを認証する必要があります。 この <xref:System.Net.Mail.SmtpClient> オブジェクトがサーバーから要求された場合に、現在ログオンしているユーザーの既定の資格情報を使用して認証する必要がある場合は、このプロパティを `true` に設定します。 クライアントアプリケーションの場合、これはほとんどのシナリオで望ましい動作です。  
  
 資格情報は、アプリケーションおよびコンピューターの構成ファイルを使用して指定することもできます。 詳細については、「 [&lt;mailsettings&gt; 要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)」を参照してください。  
  
 <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> プロパティが `false,` に設定されている場合、サーバーに接続するときに、<xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティで設定された値が資格情報に使用されます。 <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> プロパティが `false` に設定されていて、<xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティが設定されていない場合、メールはサーバーに匿名で送信されます。  
  
> [!CAUTION]
>  基本認証の資格情報を指定した場合、資格情報はクリア テキストでサーバーに送信されます。 これにより、資格情報が表示され、他のユーザーによって使用されるため、セキュリティ上の問題が発生する可能性があります。  
  
   
  
## Examples  
 このプロパティの使用例を次のコード例に示します。  
  
 [!code-cpp[NclMailSync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#2)]
 [!code-csharp[NclMailSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">電子メールが送信中の場合、このプロパティの値は変更できません。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
