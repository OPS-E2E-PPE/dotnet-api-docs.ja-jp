<Type Name="TextPatternRange" FullName="System.Windows.Automation.Text.TextPatternRange">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cc9f045a08009bf8bdc5713c020fda55231af7a3" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82358247" /></Metadata><TypeSignature Language="C#" Value="public class TextPatternRange" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextPatternRange extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Text.TextPatternRange" />
  <TypeSignature Language="VB.NET" Value="Public Class TextPatternRange" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextPatternRange" />
  <TypeSignature Language="F#" Value="type TextPatternRange = class" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e7090-101"><see cref="T:System.Windows.Automation.TextPattern" /> コンテナー内の連続するテキストの範囲を表します。</span><span class="sxs-lookup"><span data-stu-id="e7090-101">Represents a span of continuous text in a <see cref="T:System.Windows.Automation.TextPattern" /> container.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7090-102"><xref:System.Windows.Automation.Text.TextPatternRange> は、<xref:System.Windows.Automation.TextPattern> コンテナー内の挿入ポイント、サブセット、またはすべてのテキストを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="e7090-102">A <xref:System.Windows.Automation.Text.TextPatternRange> can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container.</span></span>  
  
 <span data-ttu-id="e7090-103">次のいずれかが発生した場合、<xref:System.Windows.Automation.Text.TextPatternRange> は無効になります。一部のユーザーアクティビティが原因で <xref:System.Windows.Automation.TextPattern> コンテナー内のテキストが変更された場合、または <xref:System.Windows.Automation.ValuePattern> の <xref:System.Windows.Automation.ValuePattern.SetValue%2A> メソッドが、<xref:System.Windows.Automation.TextPattern> コンテナー内のテキストの値をプログラムで変更する場合に使用されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-103">A <xref:System.Windows.Automation.Text.TextPatternRange> will become invalid if one of the following occurs: the text in the <xref:System.Windows.Automation.TextPattern> container changes because of some user activity, or the <xref:System.Windows.Automation.ValuePattern.SetValue%2A> method of <xref:System.Windows.Automation.ValuePattern> is used to programmatically change the value of the text in the <xref:System.Windows.Automation.TextPattern> container.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-control-patterns-overview.md"><span data-ttu-id="e7090-104">UI オートメーション コントロール パターンの概要</span><span class="sxs-lookup"><span data-stu-id="e7090-104">UI Automation Control Patterns Overview</span></span></related>
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-control-patterns-for-clients.md"><span data-ttu-id="e7090-105">クライアントの UI オートメーション コントロール パターン</span><span class="sxs-lookup"><span data-stu-id="e7090-105">UI Automation Control Patterns for Clients</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="AddToSelection">
      <MemberSignature Language="C#" Value="public void AddToSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToSelection();" />
      <MemberSignature Language="F#" Value="member this.AddToSelection : unit -&gt; unit" Usage="textPatternRange.AddToSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e7090-106">複数の非結合選択をサポートするテキスト コンテナー内の強調表示されたテキストのコレクションに追加します。</span><span class="sxs-lookup"><span data-stu-id="e7090-106">Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7090-107">テキストの挿入ポイントが、新しい選択範囲の領域に移動します。</span><span class="sxs-lookup"><span data-stu-id="e7090-107">The text insertion point moves to the area of the new selection.</span></span>  
  
 <span data-ttu-id="e7090-108">低次元テキスト範囲を指定すると、カーソル位置が移動します。</span><span class="sxs-lookup"><span data-stu-id="e7090-108">Providing a degenerate text range moves the insertion point.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e7090-109">テキスト プロバイダーが複数の非結合選択をサポートしていない (たとえば、<see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> の値は <see langword="Multiple" /> である必要があります)。</span><span class="sxs-lookup"><span data-stu-id="e7090-109">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of <see langword="Multiple" />).</span></span></exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.Select" />
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Windows.Automation.Text.TextPatternRange" Usage="textPatternRange.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e7090-110">元の <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> と同一で、元のプロパティをすべて継承する新しい <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="e7090-110">Retrieves a new <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> identical to the original <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> and inheriting all properties of the original.</span></span></summary>
        <returns><span data-ttu-id="e7090-111">新しいテキスト範囲。</span><span class="sxs-lookup"><span data-stu-id="e7090-111">The new text range.</span></span> <span data-ttu-id="e7090-112">null 参照 (Visual Basic では <see langword="Nothing" />) は返されません。</span><span class="sxs-lookup"><span data-stu-id="e7090-112">A null reference (<see langword="Nothing" /> in Visual Basic) is never returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7090-113">または、<xref:System.Windows.Automation.TextPattern> から新しい <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> を作成し、元のテキスト範囲のエンドポイントに対応するように2つのエンドポイントを移動します。</span><span class="sxs-lookup"><span data-stu-id="e7090-113">Alternatively, create a new <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> from the <xref:System.Windows.Automation.TextPattern> and move the two endpoints to correspond with the endpoints of the original text range.</span></span>  
  
 <span data-ttu-id="e7090-114">新しい範囲は元とは別に操作できます。</span><span class="sxs-lookup"><span data-stu-id="e7090-114">The new range can be manipulated independently from the original.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1060](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1060)]  
  
 [!code-vb[UIATextPattern_snip#2060](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2060)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <altmember cref="M:System.Windows.Automation.TextPattern.RangeFromChild(System.Windows.Automation.AutomationElement)" />
        <altmember cref="M:System.Windows.Automation.TextPattern.RangeFromPoint(System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public bool Compare (System.Windows.Automation.Text.TextPatternRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Compare(class System.Windows.Automation.Text.TextPatternRange range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (range As TextPatternRange) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Compare(System::Windows::Automation::Text::TextPatternRange ^ range);" />
      <MemberSignature Language="F#" Value="member this.Compare : System.Windows.Automation.Text.TextPatternRange -&gt; bool" Usage="textPatternRange.Compare range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Windows.Automation.Text.TextPatternRange" />
      </Parameters>
      <Docs>
        <param name="range"><span data-ttu-id="e7090-115">比較するテキスト範囲。</span><span class="sxs-lookup"><span data-stu-id="e7090-115">A text range to compare.</span></span></param>
        <summary><span data-ttu-id="e7090-116">テキスト範囲全体 (<see cref="T:System.Boolean" /> エンドポイントから <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> エンドポイントまで) が別のテキスト範囲と同じであるかどうかを示す <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="e7090-116">Returns a <see cref="T:System.Boolean" /> value indicating whether the span (the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> endpoint to the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint) of a text range is the same as another text range.</span></span></summary>
        <returns><span data-ttu-id="e7090-117">両方のテキスト範囲が同じである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e7090-117"><see langword="true" /> if the span of both text ranges is identical; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1061](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1061)]  
  
 [!code-vb[UIATextPattern_snip#2061](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2061)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e7090-118">比較している範囲が同じテキスト プロバイダーからのものではない。</span><span class="sxs-lookup"><span data-stu-id="e7090-118">If the range being compared does not come from the same text provider.</span></span></exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="CompareEndpoints">
      <MemberSignature Language="C#" Value="public int CompareEndpoints (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareEndpoints(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Text.TextPatternRange targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareEndpoints (endpoint As TextPatternRangeEndpoint, targetRange As TextPatternRange, targetEndpoint As TextPatternRangeEndpoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareEndpoints(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextPatternRange ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="F#" Value="member this.CompareEndpoints : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextPatternRange * System.Windows.Automation.Text.TextPatternRangeEndpoint -&gt; int" Usage="textPatternRange.CompareEndpoints (endpoint, targetRange, targetEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Text.TextPatternRange" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="e7090-119">呼び出し元の <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> エンドポイントまたは <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> エンドポイント。</span><span class="sxs-lookup"><span data-stu-id="e7090-119">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the caller.</span></span></param>
        <param name="targetRange"><span data-ttu-id="e7090-120">比較対象の範囲。</span><span class="sxs-lookup"><span data-stu-id="e7090-120">The target range for comparison.</span></span></param>
        <param name="targetEndpoint"><span data-ttu-id="e7090-121">比較対象の <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> エンドポイントまたは <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> エンドポイント。</span><span class="sxs-lookup"><span data-stu-id="e7090-121">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the target.</span></span></param>
        <summary><span data-ttu-id="e7090-122">2 つのテキスト範囲のエンドポイントが同じかどうかを示す <see cref="T:System.Int32" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e7090-122">Returns an <see cref="T:System.Int32" /> indicating whether two text ranges have identical endpoints.</span></span></summary>
        <returns><span data-ttu-id="e7090-123">テキストにおいて、呼び出し元のエンドポイントが比較対象のエンドポイントよりも前方にある場合は、負の値を返します。</span><span class="sxs-lookup"><span data-stu-id="e7090-123">Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.</span></span>  
  
 <span data-ttu-id="e7090-124">呼び出し元のエンドポイントが比較対象のエンドポイントと同じ位置にある場合は、0 を返します。</span><span class="sxs-lookup"><span data-stu-id="e7090-124">Returns zero if the caller's endpoint is at the same location as the target endpoint.</span></span>  
  
 <span data-ttu-id="e7090-125">テキストにおいて、呼び出し元のエンドポイントが比較対象のエンドポイントより後方にある場合は、正の値を返します。</span><span class="sxs-lookup"><span data-stu-id="e7090-125">Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7090-126">同じテキスト範囲の開始エンドポイントと終了エンドポイントを比較することで、テキスト範囲が低次元であるかどうか、またはエンドポイントが論理テキストフローの順序であるかどうかを識別できます。</span><span class="sxs-lookup"><span data-stu-id="e7090-126">By comparing the starting and ending endpoints of the same text range you can identify if a text range is degenerate or if the endpoints are in the order of logical text flow.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1062](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1062)]  
  
 [!code-vb[UIATextPattern_snip#2062](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2062)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e7090-127">範囲が null 参照 (Visual Basic では <see langword="Nothing" />) の場合。</span><span class="sxs-lookup"><span data-stu-id="e7090-127">If range is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e7090-128">別のコンテナーの範囲である場合。</span><span class="sxs-lookup"><span data-stu-id="e7090-128">If range is from another container.</span></span></exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="ExpandToEnclosingUnit">
      <MemberSignature Language="C#" Value="public void ExpandToEnclosingUnit (System.Windows.Automation.Text.TextUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExpandToEnclosingUnit(valuetype System.Windows.Automation.Text.TextUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExpandToEnclosingUnit (unit As TextUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExpandToEnclosingUnit(System::Windows::Automation::Text::TextUnit unit);" />
      <MemberSignature Language="F#" Value="member this.ExpandToEnclosingUnit : System.Windows.Automation.Text.TextUnit -&gt; unit" Usage="textPatternRange.ExpandToEnclosingUnit unit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
      </Parameters>
      <Docs>
        <param name="unit"><span data-ttu-id="e7090-129">テキスト単位。</span><span class="sxs-lookup"><span data-stu-id="e7090-129">The textual unit.</span></span></param>
        <summary><span data-ttu-id="e7090-130">指定した <see cref="T:System.Windows.Automation.Text.TextUnit" /> にテキスト範囲を拡大します。</span><span class="sxs-lookup"><span data-stu-id="e7090-130">Expands the text range to the specified <see cref="T:System.Windows.Automation.Text.TextUnit" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7090-131">範囲が既に指定した単位の正確な数量である場合は、変更されません。</span><span class="sxs-lookup"><span data-stu-id="e7090-131">If the range is already an exact quantity of the specified units then it remains unchanged.</span></span>  
  
 <span data-ttu-id="e7090-132"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> メソッドを正常に実行するために、一連の操作がバックグラウンドで実行されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-132">In order for the <xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> method to execute successfully, a sequence of actions is performed behind the scenes.</span></span>  
  
1.  <span data-ttu-id="e7090-133">テキスト範囲は正規化されます。つまり、テキスト範囲は <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> エンドポイントで低次元テキスト範囲に折りたたまれ、<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> エンドポイントは不要になります。</span><span class="sxs-lookup"><span data-stu-id="e7090-133">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, making the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="e7090-134">この手順は、テキスト範囲が境界 `unit` 範囲内にある場合にあいまいさを解消するために必要です。たとえば、"{the U} RL [https://www.microsoft.com/](https://www.microsoft.com/)は、テキスト範囲エンドポイントである" {"と"} "がテキスト範囲内に埋め込まれています。</span><span class="sxs-lookup"><span data-stu-id="e7090-134">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="e7090-135">結果として得られる範囲は、 <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> 内で、要求された `unit` 境界の先頭に向かって後方に移動されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-135">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="e7090-136">この範囲は、 <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> 内で、 `unit` 境界の要求された数だけ、前方または後方に移動されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-136">The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries.</span></span>  
  
4.  <span data-ttu-id="e7090-137">その後、この範囲は、要求された 1 つの <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 境界の分、 `unit` エンドポイントを移動することによって、低次元テキスト範囲の状態から展開されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-137">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="e7090-138">![移動 & ExpandToEnclosingUnit による範囲の調整](~/add/media/uia-textpattern-moveandexpand-examples.png "Move & ExpandToEnclosingUnit による範囲調整")</span><span class="sxs-lookup"><span data-stu-id="e7090-138">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="e7090-139">テキスト範囲を Move() と ExpandToEnclosingUnit() に対して調整する方法の例</span><span class="sxs-lookup"><span data-stu-id="e7090-139">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e7090-140">これらの手順は、スクリーンリーダーが挿入ポイントまたは任意の仮想カーソル位置で完全な単語、文、または段落全体を読み取ることが一般的であるために必要です。</span><span class="sxs-lookup"><span data-stu-id="e7090-140">These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.</span></span>  
  
 <span data-ttu-id="e7090-141"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> は、非表示テキストと表示テキストの両方に反映されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-141"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="e7090-142">UI オートメーションクライアントは、テキストの可視性について <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> をチェックできます。</span><span class="sxs-lookup"><span data-stu-id="e7090-142">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="e7090-143">指定された <xref:System.Windows.Automation.Text.TextUnit> がコントロールでサポートされていない場合、<xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> は、次にサポートされる最大の <xref:System.Windows.Automation.Text.TextUnit> に従います。</span><span class="sxs-lookup"><span data-stu-id="e7090-143"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="e7090-144">最小単位から最大値までの順序を以下に示します。</span><span class="sxs-lookup"><span data-stu-id="e7090-144">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1063](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1063)]  
  
 [!code-vb[UIATextPattern_snip#2063](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2063)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="FindAttribute">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange FindAttribute (System.Windows.Automation.AutomationTextAttribute attribute, object value, bool backward);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange FindAttribute(class System.Windows.Automation.AutomationTextAttribute attribute, object value, bool backward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAttribute (attribute As AutomationTextAttribute, value As Object, backward As Boolean) As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ FindAttribute(System::Windows::Automation::AutomationTextAttribute ^ attribute, System::Object ^ value, bool backward);" />
      <MemberSignature Language="F#" Value="member this.FindAttribute : System.Windows.Automation.AutomationTextAttribute * obj * bool -&gt; System.Windows.Automation.Text.TextPatternRange" Usage="textPatternRange.FindAttribute (attribute, value, backward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Windows.Automation.AutomationTextAttribute" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="backward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attribute"><span data-ttu-id="e7090-145">検索対象の属性。</span><span class="sxs-lookup"><span data-stu-id="e7090-145">The attribute to search for.</span></span></param>
        <param name="value"><span data-ttu-id="e7090-146">検索対象の属性値。</span><span class="sxs-lookup"><span data-stu-id="e7090-146">The attribute value to search for.</span></span> <span data-ttu-id="e7090-147">この値は、属性に指定されている型と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e7090-147">This value must match the type specified for the attribute.</span></span></param>
        <param name="backward"><span data-ttu-id="e7090-148">最初に発生したテキスト範囲ではなく、最後に発生したテキスト範囲を返す必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e7090-148"><see langword="true" /> if the last occurring text range should be returned instead of the first; otherwise <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e7090-149">指定された属性の値を持つテキスト範囲のサブセットを返します。</span><span class="sxs-lookup"><span data-stu-id="e7090-149">Returns a text range subset that has the specified attribute value.</span></span></summary>
        <returns><span data-ttu-id="e7090-150">一致する属性と属性値を持つテキスト範囲。それ以外の場合は null (Visual Basic では <see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="e7090-150">A text range having a matching attribute and attribute value; otherwise null (<see langword="Nothing" /> in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7090-151">非表示テキストと表示テキストは区別されません。</span><span class="sxs-lookup"><span data-stu-id="e7090-151">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="e7090-152">UI オートメーションクライアントは、<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> を使用してテキストの表示を確認できます。</span><span class="sxs-lookup"><span data-stu-id="e7090-152">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e7090-153"><xref:System.Windows.Automation.TextPattern.DocumentRange%2A> を使用して、ドキュメント全体を検索します。</span><span class="sxs-lookup"><span data-stu-id="e7090-153">Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1064](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1064)]  
  
 [!code-vb[UIATextPattern_snip#2064](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2064)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.TextPattern" />
      </Docs>
    </Member>
    <Member MemberName="FindText">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange FindText (string text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange FindText(string text, bool backward, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindText (text As String, backward As Boolean, ignoreCase As Boolean) As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ FindText(System::String ^ text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="member this.FindText : string * bool * bool -&gt; System.Windows.Automation.Text.TextPatternRange" Usage="textPatternRange.FindText (text, backward, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="backward" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="e7090-154">検索対象の文字列。</span><span class="sxs-lookup"><span data-stu-id="e7090-154">The text string to search for.</span></span></param>
        <param name="backward"><span data-ttu-id="e7090-155">最初に発生したテキスト範囲ではなく、最後に発生したテキスト範囲を返す必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e7090-155"><see langword="true" /> if the last occurring text range should be returned instead of the first; otherwise <see langword="false" />.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="e7090-156">大文字と小文字を区別しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e7090-156"><see langword="true" /> if case should be ignored; otherwise <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e7090-157">指定したテキストを含むテキスト範囲のサブセットを返します。</span><span class="sxs-lookup"><span data-stu-id="e7090-157">Returns a text range subset that contains the specified text.</span></span></summary>
        <returns><span data-ttu-id="e7090-158">指定したテキストと一致するテキスト範囲。それ以外の場合は null (Visual Basic では <see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="e7090-158">A text range matching the specified text; otherwise null (<see langword="Nothing" /> in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7090-159">非表示テキストと表示テキストは区別されません。</span><span class="sxs-lookup"><span data-stu-id="e7090-159">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="e7090-160">UI オートメーションクライアントは、<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> を使用してテキストの表示を確認できます。</span><span class="sxs-lookup"><span data-stu-id="e7090-160">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e7090-161"><xref:System.Windows.Automation.TextPattern.DocumentRange%2A> を使用して、ドキュメント全体を検索します。</span><span class="sxs-lookup"><span data-stu-id="e7090-161">Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1065](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1065)]  
  
 [!code-vb[UIATextPattern_snip#2065](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2065)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.TextPattern" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeValue">
      <MemberSignature Language="C#" Value="public object GetAttributeValue (System.Windows.Automation.AutomationTextAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetAttributeValue(class System.Windows.Automation.AutomationTextAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttributeValue (attribute As AutomationTextAttribute) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetAttributeValue(System::Windows::Automation::AutomationTextAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeValue : System.Windows.Automation.AutomationTextAttribute -&gt; obj" Usage="textPatternRange.GetAttributeValue attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Windows.Automation.AutomationTextAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute"><span data-ttu-id="e7090-162">テキスト属性。</span><span class="sxs-lookup"><span data-stu-id="e7090-162">The text attribute.</span></span></param>
        <summary><span data-ttu-id="e7090-163">指定した属性の値をテキスト範囲全体から返します。</span><span class="sxs-lookup"><span data-stu-id="e7090-163">Returns the value of the specified attribute across the entire text range.</span></span></summary>
        <returns><span data-ttu-id="e7090-164">指定した属性の値を返します。</span><span class="sxs-lookup"><span data-stu-id="e7090-164">Returns the value of the specified attribute.</span></span> <span data-ttu-id="e7090-165">たとえば、GetAttributeValue(TextPattern.FontNameAttribute) はテキスト範囲のフォント名が一意の場合にそのフォント名を表す文字列を返し、GetAttributeValue(TextPattern.IsItalicAttribute) はブール値を返します。</span><span class="sxs-lookup"><span data-stu-id="e7090-165">For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name, if unique, of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a boolean.</span></span>  
  
<span data-ttu-id="e7090-166">指定した属性の値がテキスト範囲内で異なる場合は <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e7090-166">Returns <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> if the value of the specified attribute varies over the text range.</span></span>  
  
<span data-ttu-id="e7090-167">指定された属性がプロバイダーまたはコントロールによってサポートされない場合は <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e7090-167">Returns <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> if the specified attribute is not supported by the provider or the control.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7090-168">非表示テキストと表示テキストは区別されません。</span><span class="sxs-lookup"><span data-stu-id="e7090-168">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="e7090-169">UI オートメーションクライアントは、<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> を使用してテキストの表示を確認できます。</span><span class="sxs-lookup"><span data-stu-id="e7090-169">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1066](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1066)]  
  
 [!code-vb[UIATextPattern_snip#2066](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2066)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e7090-170">指定した属性が無効な場合。</span><span class="sxs-lookup"><span data-stu-id="e7090-170">If the specified attribute is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetBoundingRectangles">
      <MemberSignature Language="C#" Value="public System.Windows.Rect[] GetBoundingRectangles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Rect[] GetBoundingRectangles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoundingRectangles () As Rect()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Rect&gt; ^ GetBoundingRectangles();" />
      <MemberSignature Language="F#" Value="member this.GetBoundingRectangles : unit -&gt; System.Windows.Rect[]" Usage="textPatternRange.GetBoundingRectangles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e7090-171">テキスト範囲内のテキストの表示されている各行 (全体または一部) に外接する四角形のコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="e7090-171">Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</span></span></summary>
        <returns><span data-ttu-id="e7090-172">テキスト範囲内の各行 (全体または一部) に外接する四角形の配列。</span><span class="sxs-lookup"><span data-stu-id="e7090-172">An array of bounding rectangles for each full or partial line of text in a text range.</span></span>  
  
 <span data-ttu-id="e7090-173">低次元テキスト範囲の空の配列。</span><span class="sxs-lookup"><span data-stu-id="e7090-173">An empty array for a degenerate text range.</span></span>  
  
 <span data-ttu-id="e7090-174">完全に画面外となる、スクロール アウトする、または重なったウィンドウによって隠れる画面座標を持つテキスト範囲を表す空の配列。</span><span class="sxs-lookup"><span data-stu-id="e7090-174">An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1067](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1067)]  
  
 [!code-vb[UIATextPattern_snip#2067](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2067)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElement[] GetChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationElement[] GetChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetChildren" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildren () As AutomationElement()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::AutomationElement ^&gt; ^ GetChildren();" />
      <MemberSignature Language="F#" Value="member this.GetChildren : unit -&gt; System.Windows.Automation.AutomationElement[]" Usage="textPatternRange.GetChildren " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElement[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e7090-175">テキスト範囲内にあるすべての埋め込みオブジェクトのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="e7090-175">Retrieves a collection of all embedded objects that fall within the text range.</span></span></summary>
        <returns><span data-ttu-id="e7090-176">範囲内にあるすべての子オブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="e7090-176">A collection of all child objects that fall within the range.</span></span> <span data-ttu-id="e7090-177">範囲と重なっているが完全には範囲に含まれていない子オブジェクトもコレクションに含まれます。</span><span class="sxs-lookup"><span data-stu-id="e7090-177">Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.</span></span>  
  
 <span data-ttu-id="e7090-178">子オブジェクトが存在しない場合は、空のコレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="e7090-178">Returns an empty collection if there are no child objects.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#StartTarget](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#starttarget)]
 [!code-vb[UIATextPattern_snip#StartTarget](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#starttarget)]  
[!code-csharp[UIATextPattern_snip#GetTextElement](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#gettextelement)]
[!code-vb[UIATextPattern_snip#GetTextElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#gettextelement)]  
[!code-csharp[UIATextPattern_snip#GetEmbeddedObjects](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#getembeddedobjects)]
[!code-vb[UIATextPattern_snip#GetEmbeddedObjects](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#getembeddedobjects)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnclosingElement">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElement GetEnclosingElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationElement GetEnclosingElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnclosingElement () As AutomationElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::AutomationElement ^ GetEnclosingElement();" />
      <MemberSignature Language="F#" Value="member this.GetEnclosingElement : unit -&gt; System.Windows.Automation.AutomationElement" Usage="textPatternRange.GetEnclosingElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e7090-179">テキスト範囲を囲む最も内側の <see cref="T:System.Windows.Automation.AutomationElement" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e7090-179">Returns the innermost <see cref="T:System.Windows.Automation.AutomationElement" /> that encloses the text range.</span></span></summary>
        <returns><span data-ttu-id="e7090-180">呼び出し元を囲む最も内側の要素。</span><span class="sxs-lookup"><span data-stu-id="e7090-180">The innermost element enclosing the caller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7090-181">外側の <xref:System.Windows.Automation.AutomationElement>。通常はテキスト範囲を提供するテキストプロバイダーです。</span><span class="sxs-lookup"><span data-stu-id="e7090-181">The enclosing <xref:System.Windows.Automation.AutomationElement>, typically the text provider that supplies the text range.</span></span> <span data-ttu-id="e7090-182">ただし、テキスト プロバイダーがテーブル、ハイパーリンクなどの子要素をサポートする場合は、外側の要素がそのテキスト プロバイダーの子孫である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e7090-182">However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1069](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1069)]  
  
 [!code-vb[UIATextPattern_snip#2069](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2069)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetText">
      <MemberSignature Language="C#" Value="public string GetText (int maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetText(int32 maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetText (maxLength As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetText(int maxLength);" />
      <MemberSignature Language="F#" Value="member this.GetText : int -&gt; string" Usage="textPatternRange.GetText maxLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxLength"><span data-ttu-id="e7090-183">返す文字列の最大長。</span><span class="sxs-lookup"><span data-stu-id="e7090-183">The maximum length of the string to return.</span></span> <span data-ttu-id="e7090-184">制限が必要ない場合は、<c>-1</c> を使用します。</span><span class="sxs-lookup"><span data-stu-id="e7090-184">Use <c>-1</c> if no limit is required.</span></span></param>
        <summary><span data-ttu-id="e7090-185">テキスト範囲のプレーンテキストを返します。</span><span class="sxs-lookup"><span data-stu-id="e7090-185">Returns the plain text of the text range.</span></span></summary>
        <returns><span data-ttu-id="e7090-186">テキスト範囲のプレーンテキスト。指定した <paramref name="maxLength" /> で切り捨てられている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e7090-186">The plain text of the text range, possibly truncated at the specified <paramref name="maxLength" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7090-187"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> は、非表示テキストと表示テキストの両方に反映されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-187"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="e7090-188">UI オートメーションクライアントは、テキストの可視性について <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> をチェックできます。</span><span class="sxs-lookup"><span data-stu-id="e7090-188">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="e7090-189">`maxLength` が呼び出し元のテキスト範囲の長さを超える場合、返される文字列はテキスト範囲のプレーンテキストになります。</span><span class="sxs-lookup"><span data-stu-id="e7090-189">If `maxLength` is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.</span></span>  
  
 <span data-ttu-id="e7090-190"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> は、テキストフロー内のエンドポイントの順序に影響されません。このメソッドは、論理テキストフローの順序で、テキスト範囲の開始エンドポイントと終了エンドポイントの間のテキストを常に返します。</span><span class="sxs-lookup"><span data-stu-id="e7090-190"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1070](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1070)]  
  
 [!code-vb[UIATextPattern_snip#2070](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2070)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e7090-191"><paramref name="maxLength" /> が -1 より小さい場合。</span><span class="sxs-lookup"><span data-stu-id="e7090-191">If <paramref name="maxLength" /> is less than -1.</span></span></exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public int Move (System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Move(valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Move (unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Move(System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberSignature Language="F#" Value="member this.Move : System.Windows.Automation.Text.TextUnit * int -&gt; int" Usage="textPatternRange.Move (unit, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unit"><span data-ttu-id="e7090-192">テキスト単位の境界。</span><span class="sxs-lookup"><span data-stu-id="e7090-192">The text unit boundary.</span></span></param>
        <param name="count"><span data-ttu-id="e7090-193">移動するテキスト単位の数。</span><span class="sxs-lookup"><span data-stu-id="e7090-193">The number of text units to move.</span></span> <span data-ttu-id="e7090-194">正の値はテキスト範囲を前方に移動し、負の値はテキスト範囲を後方に移動します。0 の場合は移動されません。</span><span class="sxs-lookup"><span data-stu-id="e7090-194">A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</span></span></param>
        <summary><span data-ttu-id="e7090-195">指定されたテキスト単位数の分、テキスト範囲を移動します。</span><span class="sxs-lookup"><span data-stu-id="e7090-195">Moves the text range the specified number of text units.</span></span></summary>
        <returns><span data-ttu-id="e7090-196">実際に移動された単位の数。</span><span class="sxs-lookup"><span data-stu-id="e7090-196">The number of units actually moved.</span></span> <span data-ttu-id="e7090-197">移動後のテキスト範囲のエンドポイントのいずれかが <see cref="P:System.Windows.Automation.TextPattern.DocumentRange" /> エンドポイントよりも大きい、または小さい場合、要求した数よりも小さくなる場合があります。</span><span class="sxs-lookup"><span data-stu-id="e7090-197">This can be less than the number requested if either of the new text range endpoints is greater than or less than the <see cref="P:System.Windows.Automation.TextPattern.DocumentRange" /> endpoints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7090-198">テキスト範囲の内容を走査する必要がある場合、 <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> メソッドを正常に実行するために、一連の手順がその背後で関係しています。</span><span class="sxs-lookup"><span data-stu-id="e7090-198">When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="e7090-199">テキスト範囲は正規化されます。つまり、テキスト範囲は <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> エンドポイントで低次元テキスト範囲に縮小されるため、 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> エンドポイントは不要になります。</span><span class="sxs-lookup"><span data-stu-id="e7090-199">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="e7090-200">この手順は、テキスト範囲が境界 `unit` 範囲内にある場合にあいまいさを解消するために必要です。たとえば、"{the U} RL [https://www.microsoft.com/](https://www.microsoft.com/)は、テキスト範囲エンドポイントである" {"と"} "がテキスト範囲内に埋め込まれています。</span><span class="sxs-lookup"><span data-stu-id="e7090-200">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="e7090-201">結果として得られる範囲は、 <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> 内で、要求された `unit` 境界の先頭に向かって後方に移動されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-201">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="e7090-202">この範囲は、 <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> 内で、 `unit` 境界の要求された数だけ、前方または後方に移動されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-202">The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries.</span></span>  
  
4.  <span data-ttu-id="e7090-203">その後、この範囲は、要求された 1 つの <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 境界の分、 `unit` エンドポイントを移動することによって、低次元テキスト範囲の状態から展開されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-203">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="e7090-204">![移動 & ExpandToEnclosingUnit による範囲の調整](~/add/media/uia-textpattern-moveandexpand-examples.png "Move & ExpandToEnclosingUnit による範囲調整")</span><span class="sxs-lookup"><span data-stu-id="e7090-204">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="e7090-205">テキスト範囲を Move() と ExpandToEnclosingUnit() に対して調整する方法の例</span><span class="sxs-lookup"><span data-stu-id="e7090-205">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
 <span data-ttu-id="e7090-206">テキスト コンテナーのテキスト コンテンツ (内部テキスト) と埋め込みオブジェクト (ハイパーリンクやテーブルのセルなど) は、連続する単一のテキスト ストリームとして、 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] ツリーのコントロール ビューとコンテンツ ビューの両方で公開されます。そのため、オブジェクトの境界は無視されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-206">The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.</span></span> <span data-ttu-id="e7090-207">UI オートメーション クライアントがなんらかの方法で列挙、解釈、分析を目的としてテキストを取得している場合、テキスト コンテンツを含むテーブルやその他の埋め込みオブジェクトなど、特殊なケースについて、テキスト範囲を確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e7090-207">If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</span></span> <span data-ttu-id="e7090-208">これは、<xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> を呼び出して各埋め込みオブジェクトの <xref:System.Windows.Automation.AutomationElement> を取得し、<xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> を呼び出して各要素のテキスト範囲を取得することで実現できます。これは、すべてのテキストコンテンツが取得されるまで再帰的に行われます。</span><span class="sxs-lookup"><span data-stu-id="e7090-208">This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</span></span>  
  
 <span data-ttu-id="e7090-209">![埋め込みオブジェクトによってスパンされるテキスト範囲。](~/add/media/uia-textpattern-embeddedobjecttextranges.png "埋め込みオブジェクトにまたがるテキスト範囲。")</span><span class="sxs-lookup"><span data-stu-id="e7090-209">![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png "Text ranges spanned by embedded objects.")</span></span>  
<span data-ttu-id="e7090-210">埋め込みオブジェクトとその範囲を含むテキスト ストリームの例</span><span class="sxs-lookup"><span data-stu-id="e7090-210">Example of a text stream with embedded objects and their range spans</span></span>  
  
 <span data-ttu-id="e7090-211"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> は、非表示テキストと表示テキストの両方に反映されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-211"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="e7090-212">UI オートメーションクライアントは、テキストの可視性について <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> をチェックできます。</span><span class="sxs-lookup"><span data-stu-id="e7090-212">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="e7090-213">指定された <xref:System.Windows.Automation.Text.TextUnit> がコントロールでサポートされていない場合、<xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> は、次にサポートされる最大の <xref:System.Windows.Automation.Text.TextUnit> に従います。</span><span class="sxs-lookup"><span data-stu-id="e7090-213"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="e7090-214">最小単位から最大値までの順序を以下に示します。</span><span class="sxs-lookup"><span data-stu-id="e7090-214">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
> [!NOTE]
>  <span data-ttu-id="e7090-215">テキスト範囲がテキストの異なる部分にまたがっているため、テキストはどのようにも変更されません。</span><span class="sxs-lookup"><span data-stu-id="e7090-215">The text is not altered in any way as the text range just spans a different part of the text.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#StartTarget](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#starttarget)]
 [!code-vb[UIATextPattern_snip#StartTarget](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#starttarget)]  
[!code-csharp[UIATextPattern_snip#GetTextElement](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#gettextelement)]
[!code-vb[UIATextPattern_snip#GetTextElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#gettextelement)]  
[!code-csharp[UIATextPattern_snip#MoveSelection](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#moveselection)]
[!code-vb[UIATextPattern_snip#MoveSelection](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#moveselection)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByRange">
      <MemberSignature Language="C#" Value="public void MoveEndpointByRange (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveEndpointByRange(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Text.TextPatternRange targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveEndpointByRange (endpoint As TextPatternRangeEndpoint, targetRange As TextPatternRange, targetEndpoint As TextPatternRangeEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveEndpointByRange(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextPatternRange ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="F#" Value="member this.MoveEndpointByRange : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextPatternRange * System.Windows.Automation.Text.TextPatternRangeEndpoint -&gt; unit" Usage="textPatternRange.MoveEndpointByRange (endpoint, targetRange, targetEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Text.TextPatternRange" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="e7090-216">移動するエンドポイント。</span><span class="sxs-lookup"><span data-stu-id="e7090-216">The endpoint to move.</span></span></param>
        <param name="targetRange"><span data-ttu-id="e7090-217">同じテキスト プロバイダーからの別の範囲。</span><span class="sxs-lookup"><span data-stu-id="e7090-217">Another range from the same text provider.</span></span></param>
        <param name="targetEndpoint"><span data-ttu-id="e7090-218">他の範囲にあるエンドポイント。</span><span class="sxs-lookup"><span data-stu-id="e7090-218">An endpoint on the other range.</span></span></param>
        <summary><span data-ttu-id="e7090-219">テキスト範囲の 1 つのエンドポイントを、2 番目のテキスト範囲の指定のエンドポイントに移動します。</span><span class="sxs-lookup"><span data-stu-id="e7090-219">Moves one endpoint of a text range to the specified endpoint of a second text range.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7090-220">移動されるエンドポイントが同じテキスト範囲の他のエンドポイントと交差する場合は、他のエンドポイントも移動されます。その結果、低次元テキスト範囲が作成され、エンドポイントの正しい順序 (つまり、<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> が常に <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>以下) であることが確認されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-220">If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> is always less than or equal to <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1072](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1072)]  
  
 [!code-vb[UIATextPattern_snip#2072](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2072)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByUnit">
      <MemberSignature Language="C#" Value="public int MoveEndpointByUnit (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 MoveEndpointByUnit(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveEndpointByUnit (endpoint As TextPatternRangeEndpoint, unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int MoveEndpointByUnit(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberSignature Language="F#" Value="member this.MoveEndpointByUnit : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextUnit * int -&gt; int" Usage="textPatternRange.MoveEndpointByUnit (endpoint, unit, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="e7090-221">移動するエンドポイント。</span><span class="sxs-lookup"><span data-stu-id="e7090-221">The endpoint to move.</span></span></param>
        <param name="unit"><span data-ttu-id="e7090-222">移動対象のテキスト範囲。</span><span class="sxs-lookup"><span data-stu-id="e7090-222">The textual unit for moving.</span></span></param>
        <param name="count"><span data-ttu-id="e7090-223">移動する単位の数。</span><span class="sxs-lookup"><span data-stu-id="e7090-223">The number of units to move.</span></span> <span data-ttu-id="e7090-224">正の数はエンドポイントを前方に移動します。</span><span class="sxs-lookup"><span data-stu-id="e7090-224">A positive count moves the endpoint forward.</span></span> <span data-ttu-id="e7090-225">負の数は後方に移動します。</span><span class="sxs-lookup"><span data-stu-id="e7090-225">A negative count moves backward.</span></span> <span data-ttu-id="e7090-226">0 の場合は移動されません。</span><span class="sxs-lookup"><span data-stu-id="e7090-226">A count of 0 has no effect.</span></span></param>
        <summary><span data-ttu-id="e7090-227">テキスト範囲の 1 つのエンドポイントを、指定された数の <see cref="T:System.Windows.Automation.Text.TextUnit" /> の分、ドキュメントの範囲内で移動します。</span><span class="sxs-lookup"><span data-stu-id="e7090-227">Moves one endpoint of the text range the specified number of <see cref="T:System.Windows.Automation.Text.TextUnit" />s within the document range.</span></span></summary>
        <returns><span data-ttu-id="e7090-228">実際に移動した単位の数。エンドポイントの移動によりドキュメントの先頭または末尾に達した場合は、要求した数よりも小さくなる場合があります。</span><span class="sxs-lookup"><span data-stu-id="e7090-228">The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7090-229">テキスト範囲の内容を走査する必要がある場合、 <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> メソッドを正常に実行するために、一連の手順がその背後で関係しています。</span><span class="sxs-lookup"><span data-stu-id="e7090-229">When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="e7090-230">テキスト範囲は正規化されます。つまり、テキスト範囲は <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> エンドポイントで低次元テキスト範囲に縮小されるため、 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> エンドポイントは不要になります。</span><span class="sxs-lookup"><span data-stu-id="e7090-230">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="e7090-231">この手順は、テキスト範囲が境界 `unit` 範囲内にある場合にあいまいさを解消するために必要です。たとえば、"{the U} RL [https://www.microsoft.com/](https://www.microsoft.com/)は、テキスト範囲エンドポイントである" {"と"} "がテキスト範囲内に埋め込まれています。</span><span class="sxs-lookup"><span data-stu-id="e7090-231">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="e7090-232">結果として得られる範囲は、 <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> 内で、要求された `unit` 境界の先頭に向かって後方に移動されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-232">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="e7090-233">その後、この範囲は、要求された 1 つの <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 境界の分、 `unit` エンドポイントを移動することによって、低次元テキスト範囲の状態から展開されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-233">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="e7090-234">![移動 & ExpandToEnclosingUnit による範囲の調整](~/add/media/uia-textpattern-moveandexpand-examples.png "Move & ExpandToEnclosingUnit による範囲調整")</span><span class="sxs-lookup"><span data-stu-id="e7090-234">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="e7090-235">テキスト範囲を Move() と ExpandToEnclosingUnit() に対して調整する方法の例</span><span class="sxs-lookup"><span data-stu-id="e7090-235">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
 <span data-ttu-id="e7090-236">テキスト コンテナーのテキスト コンテンツ (内部テキスト) と埋め込みオブジェクト (ハイパーリンクやテーブルのセルなど) は、連続する単一のテキスト ストリームとして、 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] ツリーのコントロール ビューとコンテンツ ビューの両方で公開されます。そのため、オブジェクトの境界は無視されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-236">The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.</span></span> <span data-ttu-id="e7090-237">UI オートメーション クライアントがなんらかの方法で列挙、解釈、分析を目的としてテキストを取得している場合、テキスト コンテンツを含むテーブルやその他の埋め込みオブジェクトなど、特殊なケースについて、テキスト範囲を確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e7090-237">If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</span></span> <span data-ttu-id="e7090-238">これは、<xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> を呼び出して各埋め込みオブジェクトの <xref:System.Windows.Automation.AutomationElement> を取得し、<xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> を呼び出して各要素のテキスト範囲を取得することで実現できます。これは、すべてのテキストコンテンツが取得されるまで再帰的に行われます。</span><span class="sxs-lookup"><span data-stu-id="e7090-238">This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</span></span>  
  
 <span data-ttu-id="e7090-239">![埋め込みオブジェクトによってスパンされるテキスト範囲。](~/add/media/uia-textpattern-embeddedobjecttextranges.png "埋め込みオブジェクトにまたがるテキスト範囲。")</span><span class="sxs-lookup"><span data-stu-id="e7090-239">![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png "Text ranges spanned by embedded objects.")</span></span>  
<span data-ttu-id="e7090-240">埋め込みオブジェクトとその範囲を含むテキスト ストリームの例</span><span class="sxs-lookup"><span data-stu-id="e7090-240">Example of a text stream with embedded objects and their range spans</span></span>  
  
 <span data-ttu-id="e7090-241">指定された <xref:System.Windows.Automation.Text.TextUnit> がコントロールでサポートされていない場合、<xref:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit%2A> は、次にサポートされる最大の <xref:System.Windows.Automation.Text.TextUnit> に従います。</span><span class="sxs-lookup"><span data-stu-id="e7090-241"><xref:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="e7090-242">最小単位から最大値までの順序を以下に示します。</span><span class="sxs-lookup"><span data-stu-id="e7090-242">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1073](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1073)]  
  
 [!code-vb[UIATextPattern_snip#2073](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2073)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromSelection">
      <MemberSignature Language="C#" Value="public void RemoveFromSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFromSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFromSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFromSelection();" />
      <MemberSignature Language="F#" Value="member this.RemoveFromSelection : unit -&gt; unit" Usage="textPatternRange.RemoveFromSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e7090-243">複数の非結合選択をサポートするテキスト コンテナー内の強調表示されたテキストの既存のコレクションから、呼び出し元のテキスト範囲の <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> エンドポイントおよび <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> エンドポイントに対応する、強調表示されたセクションを削除します。</span><span class="sxs-lookup"><span data-stu-id="e7090-243">Removes a highlighted section of text, corresponding to the calling text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7090-244">テキスト挿入ポイントは、削除された強調表示の領域に移動します。</span><span class="sxs-lookup"><span data-stu-id="e7090-244">The text insertion point will move to the area of the removed highlight.</span></span>  
  
 <span data-ttu-id="e7090-245">低次元テキスト範囲を指定すると、カーソル位置が移動します。</span><span class="sxs-lookup"><span data-stu-id="e7090-245">Providing a degenerate text range will move the insertion point.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e7090-246">テキスト プロバイダーが複数の非結合選択をサポートしていない (たとえば、<see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> の値は <see langword="Multiple" /> である必要があります)。</span><span class="sxs-lookup"><span data-stu-id="e7090-246">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of <see langword="Multiple" />).</span></span></exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.Select" />
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (bool alignToTop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollIntoView(bool alignToTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollIntoView (alignToTop As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollIntoView(bool alignToTop);" />
      <MemberSignature Language="F#" Value="member this.ScrollIntoView : bool -&gt; unit" Usage="textPatternRange.ScrollIntoView alignToTop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignToTop" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="alignToTop"><span data-ttu-id="e7090-247">テキスト範囲をスクロールしてビューポートの上辺と揃える場合は <see langword="true" />。ビューポートの底辺と揃える場合は <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="e7090-247"><see langword="true" /> if the text control should be scrolled so the text range is flush with the top of the viewport; <see langword="false" /> if it should be flush with the bottom of the viewport.</span></span></param>
        <summary><span data-ttu-id="e7090-248">テキスト範囲がビューポート内に表示されるまで、テキスト コントロールを垂直方向にスクロールします。</span><span class="sxs-lookup"><span data-stu-id="e7090-248">Causes the text control to scroll vertically until the text range is visible in the viewport.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7090-249"><xref:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView%2A> は、非表示テキストと表示テキストの両方に反映されます。</span><span class="sxs-lookup"><span data-stu-id="e7090-249"><xref:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="e7090-250">UI オートメーションクライアントは、テキストの可視性について <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> をチェックできます。</span><span class="sxs-lookup"><span data-stu-id="e7090-250">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span> <span data-ttu-id="e7090-251">テキスト範囲が非表示の場合、テキストコントロールは、非表示テキストにビューポートのアンカーがある場合にのみスクロールします。</span><span class="sxs-lookup"><span data-stu-id="e7090-251">If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1074](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1074)]  
  
 [!code-vb[UIATextPattern_snip#2074](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2074)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e7090-252">スクロールがコントロールでサポートされていない場合。</span><span class="sxs-lookup"><span data-stu-id="e7090-252">If scrolling is not supported by the control.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; unit" Usage="textPatternRange.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e7090-253">テキスト範囲の <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> エンドポイントおよび <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> エンドポイントに対応するテキスト コントロール内のテキストを強調表示します。</span><span class="sxs-lookup"><span data-stu-id="e7090-253">Highlights text in the text control corresponding to the text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7090-254">低次元テキスト範囲が指定されている場合は、テキストの挿入ポイントがテキスト範囲の <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> エンドポイントに移動します。</span><span class="sxs-lookup"><span data-stu-id="e7090-254">If a degenerate text range is provided, the text insertion point will move to the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint of the text range.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1075](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1075)]  
  
 [!code-vb[UIATextPattern_snip#2075](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2075)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e7090-255">テキストの選択がテキスト コントロールによってサポートされていない場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="e7090-255">Occurs when text selection is not supported by the text control.</span></span></exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
        <altmember cref="M:System.Windows.Automation.SelectionItemPattern.RemoveFromSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="TextPattern">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TextPattern TextPattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.TextPattern TextPattern" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Text.TextPatternRange.TextPattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TextPattern As TextPattern" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TextPattern ^ TextPattern { System::Windows::Automation::TextPattern ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TextPattern : System.Windows.Automation.TextPattern" Usage="System.Windows.Automation.Text.TextPatternRange.TextPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TextPattern</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e7090-256">テキスト範囲に関連付けられている <see cref="T:System.Windows.Automation.TextPattern" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="e7090-256">Gets the <see cref="T:System.Windows.Automation.TextPattern" /> associated with the text range.</span></span></summary>
        <value><span data-ttu-id="e7090-257">テキスト プロバイダー。</span><span class="sxs-lookup"><span data-stu-id="e7090-257">The text provider.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1076](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1076)]  
  
 [!code-vb[UIATextPattern_snip#2076](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2076)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
