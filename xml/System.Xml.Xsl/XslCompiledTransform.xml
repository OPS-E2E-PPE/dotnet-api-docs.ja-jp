<Type Name="XslCompiledTransform" FullName="System.Xml.Xsl.XslCompiledTransform">
  <Metadata><Meta Name="ms.openlocfilehash" Value="75fcfe070b49f0cf350eadfdbc358e51c644d738" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78676171" /></Metadata><TypeSignature Language="C#" Value="public sealed class XslCompiledTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XslCompiledTransform extends System.Object" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslCompiledTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslCompiledTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslCompiledTransform sealed" />
  <TypeSignature Language="F#" Value="type XslCompiledTransform = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed XslCompiledTransform extends System.Object" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>XSLT スタイル シートを使用して、XML データを変換します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、XSLT 1.0 構文をサポートする XSLT プロセッサです。 これは新しい実装であり、廃止された <xref:System.Xml.Xsl.XslTransform> クラスと比較すると、パフォーマンスが向上します。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスの構造は、<xref:System.Xml.Xsl.XslTransform> クラスと非常によく似ています。 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> メソッドはスタイルシートを読み込み、コンパイルしますが、<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> メソッドは XSLT 変換を実行します。  
  
 XSLT `document()` 関数と埋め込みスクリプトブロックのサポートは、既定では無効になっています。 これらの機能を有効にするには、<xref:System.Xml.Xsl.XsltSettings> オブジェクトを作成し、<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> メソッドに渡します。  
  
 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
## <a name="security-considerations"></a>セキュリティの考慮事項  
 <xref:System.Xml.Xsl.XslCompiledTransform> クラスを使用するアプリケーションを作成するときには、次の項目とその関連事項に注意する必要があります。  
  
-   XSLT スクリプトは既定で無効になっています。 XSLT スクリプトは、スクリプトのサポートが必要であり、完全に信頼された環境で作業している場合のみ有効にします。  
  
-   XSLT `document()` 関数は既定で無効になっています。 `document()` 関数を有効にした場合は、<xref:System.Xml.XmlSecureResolver> オブジェクトを <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> メソッドに渡すことによって、アクセス可能なリソースを制限してください。  
  
-   拡張オブジェクトは既定で有効になっています。 拡張オブジェクトを含む <xref:System.Xml.Xsl.XsltArgumentList> オブジェクトが <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> メソッドに渡されると、拡張オブジェクトは使用されます。  
  
-   XSLT スタイル シートには、他のファイルへの参照や埋め込みのスクリプト ブロックを含めることができます。 悪意のあるユーザーがこれを悪用して、コンピューターがリソース不足に陥るまでシステムに処理を行わせようとするデータやスタイル シートを提供する可能性があります。  
  
-   混在信頼環境で動作する XSLT アプリケーションは、スタイル シートのなりすましを引き起こす可能性があります。 たとえば、悪意のあるユーザーは、有害なスタイル シートを含むオブジェクトを読み込み、それを <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> メソッドを呼び出して変換を実行する別のユーザーに渡す可能性があります。  
  
 これらのセキュリティ上の問題は、スタイル シートが信頼されたソースからのものでない限り、スクリプトや `document()` 関数を有効にしないこと、および信頼されていないソースからの <xref:System.Xml.Xsl.XslCompiledTransform> オブジェクト、XSLT スタイル シート、または XML ソース データを受け入れないことによって軽減できます。  
  
   
  
## Examples  
 次の例では、変換を実行し、ファイルに出力します。  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 このサンプルでは、次の2つの入力ファイルを使用します。  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe><see cref="T:System.Xml.Xsl.XslCompiledTransform" /> オブジェクトは、読み込まれるとスレッドセーフです。 つまり、<see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> メソッドが正常に完了した後、<see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> メソッドを複数のスレッドから同時に呼び出すことができます。  
  
<see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> メソッドが別のスレッドで呼び出されている間に、1つのスレッドで <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> メソッドが再度呼び出された場合、<see cref="T:System.Xml.Xsl.XslCompiledTransform" /> オブジェクトは引き続き古い状態を使用して <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> の呼び出しの実行を終了します。 新しい状態は、<see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> メソッドが正常に完了したときに使用されます。  
  
 <block subset="none" type="note"><para>  
 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> メソッドは、複数のスレッドから同時に呼び出された場合、スレッドセーフではありません。  
  
</para></block></threadsafe>
    <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
    <altmember cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />
    <altmember cref="N:System.Xml" />
    <related type="Article" href="https://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03">XSLT 変換</related>
    <related type="Article" href="~/docs/standard/data/xml/index.md">XML ドキュメントと XML データ</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Xml.Xsl.XslCompiledTransform" /> クラスの新しいインスタンスを初期化します。</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.Xsl.XslCompiledTransform" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform (bool enableDebug);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableDebug) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableDebug As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform(bool enableDebug);" />
      <MemberSignature Language="F#" Value="new System.Xml.Xsl.XslCompiledTransform : bool -&gt; System.Xml.Xsl.XslCompiledTransform" Usage="new System.Xml.Xsl.XslCompiledTransform enableDebug" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="enableDebug" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableDebug">デバッグ情報を生成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 これを <see langword="true" /> に設定すると、Microsoft Visual Studio デバッガーを使用してスタイル シートをデバッグできます。</param>
        <summary><see cref="T:System.Xml.Xsl.XslCompiledTransform" /> クラスの新しいインスタンスを、指定されたデバッグ設定を使用して初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コードにステップインしてスタイルシートをデバッグするには、次の条件を満たす必要があります。  
  
-   `enableDebug` パラメーターを `true` に設定します。  
  
-   スタイルシートは、URI として <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> メソッドに渡されるか、または <xref:System.Xml.IXmlLineInfo> インターフェイスを実装する <xref:System.Xml.XmlReader> クラスの実装として渡されます。 <xref:System.Xml.IXmlLineInfo> インターフェイスは、すべてのテキスト解析 <xref:System.Xml.XmlReader> オブジェクトに実装されます。  
  
     つまり、スタイルシートが、<xref:System.Xml.XmlDocument> や <xref:System.Xml.XPath.XPathDocument>などの <xref:System.Xml.XPath.IXPathNavigable> オブジェクト、または <xref:System.Xml.IXmlLineInfo> インターフェイスを実装していない <xref:System.Xml.XmlReader> の実装を使用して読み込まれている場合、スタイルシートをデバッグすることはできません。  
  
-   スタイルシートの読み込みに使用される <xref:System.Xml.XmlResolver> は、<xref:System.Xml.XmlUrlResolver> などのファイルベースの <xref:System.Xml.XmlResolver>です (これは <xref:System.Xml.Xsl.XslCompiledTransform> クラスによって使用される既定の <xref:System.Xml.XmlResolver> です)。  
  
-   スタイルシートは、ローカルコンピューターまたはイントラネット上にあります。  
  
   
  
## Examples  
 XSLT デバッグを有効にする方法を次の例に示します。  
  
 [!code-csharp[XslCompiledTransform.Load#10](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#10)]
 [!code-vb[XslCompiledTransform.Load#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="CompileToType">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerErrorCollection CompileToType (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver, bool debug, System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerErrorCollection CompileToType(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver, bool debug, class System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileToType (stylesheet As XmlReader, settings As XsltSettings, stylesheetResolver As XmlResolver, debug As Boolean, typeBuilder As TypeBuilder, scriptAssemblyPath As String) As CompilerErrorCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerErrorCollection ^ CompileToType(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver, bool debug, System::Reflection::Emit::TypeBuilder ^ typeBuilder, System::String ^ scriptAssemblyPath);" />
      <MemberSignature Language="F#" Value="static member CompileToType : System.Xml.XmlReader * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver * bool * System.Reflection.Emit.TypeBuilder * string -&gt; System.CodeDom.Compiler.CompilerErrorCollection" Usage="System.Xml.Xsl.XslCompiledTransform.CompileToType (stylesheet, settings, stylesheetResolver, debug, typeBuilder, scriptAssemblyPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerErrorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="debug" Type="System.Boolean" Index="3" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="typeBuilder" Type="System.Reflection.Emit.TypeBuilder" Index="4" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="scriptAssemblyPath" Type="System.String" Index="5" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">コンパイル対象のスタイル シートの先頭に配置された <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="settings">スタイル シートに適用される <see cref="T:System.Xml.Xsl.XsltSettings" />。 これが <see langword="null" /> の場合、<see cref="P:System.Xml.Xsl.XsltSettings.Default" /> が適用されます。</param>
        <param name="stylesheetResolver"><see cref="T:System.Xml.XmlResolver" /> 要素および <see langword="xsl:import" /> 要素で参照されているスタイル シート モジュールの解決に使用する <see langword="xsl:include" />。 これが <see langword="null" /> の場合は、外部リソースが解決されません。</param>
        <param name="debug">これを <see langword="true" /> に設定すると、スタイル シートをデバッガーでデバッグできるようになります。</param>
        <param name="typeBuilder">スタイル シートのコンパイルに使用する <see cref="T:System.Reflection.Emit.TypeBuilder" />。 指定された TypeBuilder を使用して、結果の型を生成します。</param>
        <param name="scriptAssemblyPath"><see langword="msxsl:script" /> 要素向けに生成されるアセンブリのベース パス。 生成されるスクリプト アセンブリが 1 つだけの場合、このパラメーターはそのアセンブリのパスを指定します。 スクリプト アセンブリの生成が複数にわたる場合、アセンブリ名が一意になるよう、区別のためのサフィックスがファイル名に追加されます。</param>
        <summary>XSLT スタイル シートを指定された型にコンパイルします。</summary>
        <returns>コンパイルの結果を示すコンパイラ エラーおよび警告を含む <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `xsltc.exe` ツールは、<xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> メソッドのラッパーです。 `xsltc.exe` を使用してスタイルシートをコンパイルすると、コンパイルされたスタイルシートの使用を活用するほとんどのアプリケーションの要求が満たされます。 カスタムコンパイルツールをビルドする場合は、<xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> メソッドを使用する必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>スタイル シートをコンパイルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 全体的なパフォーマンスは <xref:System.Xml.Xsl.XslCompiledTransform> クラスの方が <xref:System.Xml.Xsl.XslTransform> クラスより優れていますが、<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> クラスの <xref:System.Xml.Xsl.XslCompiledTransform> メソッドが変換で初めて呼び出されたときは、<xref:System.Xml.Xsl.XslTransform.Load%2A> クラスの <xref:System.Xml.Xsl.XslTransform> メソッドよりパフォーマンスが劣る場合があります。 これは、XSLT ファイルを読み込む前にコンパイルする必要があるためです。 詳しくは、ブログの投稿「[XslCompiledTransform Slower than XslTransform?](https://go.microsoft.com/fwlink/?LinkId=130590)」(XslCompiledTransform は XslTransform より遅い?) をご覧ください。  
  
> [!NOTE]
>  デバッグ モードでコンパイルされた XSLT と、リリース モードでコンパイルされた XSLT には違いがあります。 状況によっては、デバッグ モードでコンパイルされたスタイル シートが、<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> の間にはエラーをスローしないが、その後の <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> の間にエラーとなります。 同じスタイル シートをリリース モードでコンパイルすると、<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> の間にエラーが発生します。 このような動作の 1 つの例は、ノード セット型ではない変数を、ノード セット型が必要な式に代入する場合です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri);" />
      <MemberSignature Language="F#" Value="member this.Load : string -&gt; unit" Usage="xslCompiledTransform.Load stylesheetUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">スタイル シートの URI。</param>
        <summary>指定された URI にあるスタイル シートの読み込みおよびコンパイルを行います。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> クラスでは、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートでは、`http://www.w3.org/1999/XSL/Transform` 名前空間を使用する必要があります。  
  
 このメソッドの動作は次のとおりです。  
  
-   ユーザー資格情報を持たない <xref:System.Xml.XmlUrlResolver> は、スタイルシートの URI の解決に使用され、`xsl:import` または `xsl:include` 要素を処理します。  
  
-   既定の設定の <xref:System.Xml.XmlReader> は、スタイルシートの読み込みに使用されます。 <xref:System.Xml.XmlReader>で DTD 処理が無効になっています。 DTD 処理が必要な場合は、この機能が有効になっている <xref:System.Xml.XmlReader> を作成し、<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> メソッドに渡します。  
  
-   `document()` 関数は無効になっています。  
  
-   埋め込みスクリプトはサポートされていません。  
  
 <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.String%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> オーバーロードを使用して、必要な認証資格情報を持つ <xref:System.Xml.XmlResolver> を指定したり、別の XSLT 設定を指定したりすることができます。  
  
   
  
## Examples  
 次の例では、変換を実行し、ファイルに出力します。  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheetUri" /> 値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">スタイル シートにエラーが含まれています。</exception>
        <exception cref="T:System.IO.FileNotFoundException">スタイル シートが見つかりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="stylesheetUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
        <exception cref="T:System.Net.WebException"><paramref name="stylesheetUri" /> 値を解決できません。  
  
または 
要求の処理中にエラーが発生しました。</exception>
        <exception cref="T:System.UriFormatException"><paramref name="stylesheetUri" /> は有効な URI ではありません。</exception>
        <exception cref="T:System.Xml.XmlException">スタイル シートの読み込み中に解析エラーが発生しました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (Type compiledStylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Type compiledStylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (compiledStylesheet As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(Type ^ compiledStylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : Type -&gt; unit" Usage="xslCompiledTransform.Load compiledStylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compiledStylesheet" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="compiledStylesheet">コンパイル済みスタイル シートを含むクラスの名前。  
  
 これは、通常、スタイル シート名です。 別途指定しない限り、xsltc.exe ツールはスタイル シート名をクラス名およびアセンブリ名に使用します。</param>
        <summary><see href="https://docs.microsoft.com/dotnet/standard/data/xml/xslt-compiler-xsltc-exe">XSLT コンパイラ (xsltc.exe)</see> を使用して作成されたコンパイル済みスタイル シートを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Xsltc.exe ツールは、スタイルシートをコンパイルし、スタイルシートからアセンブリを生成するために使用されます。 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> メソッドは、コンパイルされたスタイルシートをアセンブリから読み込みます。  
  
> [!NOTE]
>  また、XSLT アセンブリをアプリケーションに参照として含める必要があります。  
  
   
  
## Examples  
 次の例は、コンパイルされたスタイルシートを XSLT アセンブリから読み込む方法を示しています。 この例では、xsltc.exe ツールを使用して、bookOrders という名前のクラスを持つ、bookOrders という名前のアセンブリを作成していることを前提としています。  
  
> [!NOTE]
>  コードをコンパイルするときに、XSLT アセンブリを参照する必要があります。 たとえば、「 `csc /r:system.dll;system.xml.dll;bookOrders.dll myCode.cs` 」のように入力します。  
  
```csharp  
// Load the type of the class.  
XslCompiledTransform xslt = new XslCompiledTransform();  
xslt.Load(typeof(bookOrders));  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/672a5ac8-8305-4d28-ba10-11089c2c0924">XSLT アセンブリツール (xsltc.exe)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/76ee440b-d134-4f8f-8262-b917ad6dcbf6">方法: アセンブリを使用して XSLT 変換を実行する</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader -&gt; unit" Usage="xslCompiledTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">スタイル シートが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
        <summary><see cref="T:System.Xml.XmlReader" /> に格納されているスタイル シートをコンパイルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> クラスでは、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートでは、`http://www.w3.org/1999/XSL/Transform` 名前空間を使用する必要があります。  
  
 スタイルシートは、すべての子を通じて <xref:System.Xml.XmlReader> の現在のノードから読み込まれます。 これにより、ドキュメントの一部をスタイルシートとして使用できるようになります。 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> メソッドが完了すると、スタイルシートの末尾の次のノードに <xref:System.Xml.XmlReader> が配置されます。 ドキュメントの末尾に到達すると、<xref:System.Xml.XmlReader> はファイルの末尾 (EOF) に位置します。  
  
 このメソッドの動作は次のとおりです。  
  
-   ユーザー資格情報を持たない <xref:System.Xml.XmlUrlResolver> は、`xsl:import` または `xsl:include` 要素を処理するために使用されます。  
  
-   `document()` 関数は無効になっています。  
  
-   埋め込みスクリプトはサポートされていません。  
  
 <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> オーバーロードを使用して、必要な認証資格情報を持つ <xref:System.Xml.XmlResolver> を指定したり、別の XSLT 設定を指定したりすることができます。  
  
   
  
## Examples  
 次の例では、<xref:System.Xml.XmlReader> オブジェクトに含まれているスタイルシートを読み込みます。  
  
 [!code-csharp[XslCompiledTransform.Load#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Load#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheet" /> 値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">スタイル シートにエラーが含まれています。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable -&gt; unit" Usage="xslCompiledTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、またはスタイル シートが格納されている <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトに格納されているスタイル シートをコンパイルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> クラスでは、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートでは、`http://www.w3.org/1999/XSL/Transform` 名前空間を使用する必要があります。  
  
 このメソッドの動作は次のとおりです。  
  
-   ユーザー資格情報を持たない <xref:System.Xml.XmlUrlResolver> は、`xsl:import` または `xsl:include` 要素を処理するために使用されます。  
  
-   `document()` 関数は無効になっています。  
  
-   埋め込みスクリプトはサポートされていません。  
  
 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> オーバーロードを使用して、必要な認証資格情報を持つ <xref:System.Xml.XmlResolver> を指定したり、別の XSLT 設定を指定したりすることができます。  
  
   
  
## Examples  
 次の例では、<xref:System.Xml.XPath.XPathDocument> オブジェクトに含まれているスタイルシートを読み込みます。  
  
 [!code-csharp[XslCompiledTransform.Load#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Load#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheet" /> 値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">スタイル シートにエラーが含まれています。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Reflection.MethodInfo executeMethod, byte[] queryData, Type[] earlyBoundTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Reflection.MethodInfo executeMethod, unsigned int8[] queryData, class System.Type[] earlyBoundTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (executeMethod As MethodInfo, queryData As Byte(), earlyBoundTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Reflection::MethodInfo ^ executeMethod, cli::array &lt;System::Byte&gt; ^ queryData, cli::array &lt;Type ^&gt; ^ earlyBoundTypes);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Reflection.MethodInfo * byte[] * Type[] -&gt; unit" Usage="xslCompiledTransform.Load (executeMethod, queryData, earlyBoundTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executeMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="queryData" Type="System.Byte[]" />
        <Parameter Name="earlyBoundTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="executeMethod">コンパイラが生成した、コンパイル済みスタイル シートの <see cref="T:System.Reflection.MethodInfo" />execute<c> メソッドを表す </c> オブジェクト。</param>
        <param name="queryData"><c> メソッドによって生成されたコンパイル済みスタイル シートの </c>staticData<see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" /> フィールドに含まれるシリアル化されたデータ構造のバイト配列。</param>
        <param name="earlyBoundTypes">コンパイラが生成した、コンパイル済みスタイル シートの <c>ebTypes</c> フィールドに格納された型の配列。</param>
        <summary><see langword="XSLTC.exe" /> ユーティリティを使用してコンパイルされたスタイル シートからメソッドを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、コンパイルされたスタイルシートを <xref:System.Reflection.MethodInfo> オブジェクト、バイト配列、および型配列の形式で受け取ります。 <xref:System.Reflection.Emit.DynamicMethod> オブジェクトを使用して、<xref:System.Xml.Xsl.XslCompiledTransform> オブジェクトを再利用するときに、コンパイル済みスタイルシートメソッドを破棄することができます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> を使用して、コンパイル済みスタイルシートを読み込みます。 変換により、`Price` 要素の値が10% 減少します。  
  
 [!code-csharp[XsltDynamicMethodLoad#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltDynamicMethodLoad/CS/XsltDynamicMethodLoad.cs#1)]
 [!code-vb[XsltDynamicMethodLoad#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltDynamicMethodLoad/VB/XsltDynamicMethodLoad.vb#1)]  
  
> [!NOTE]
>  この例で使用される "Transform" アセンブリは、xsltc.exe ユーティリティを使用してビルドされました。 このコマンドラインツールの使用方法の詳細については、「[方法: アセンブリを使用して XSLT 変換を実行する](~/docs/standard/data/xml/how-to-perform-an-xslt-transformation-by-using-an-assembly.md)」を参照してください。  
  
 前のコード例では、次の変換を使用しています。  
 [!code-xml[XsltDynamicMethodLoad-xslt](~/samples/snippets/csharp/VS_Snippets_Data/XsltDynamicMethodLoad/CS/Transform.xslt)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : string * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheetUri, settings, stylesheetResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">スタイル シートの URI。</param>
        <param name="settings">スタイル シートに適用する <see cref="T:System.Xml.Xsl.XsltSettings" />。 これが <see langword="null" /> の場合は、<see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定が適用されます。</param>
        <param name="stylesheetResolver">XSLT の <see cref="T:System.Xml.XmlResolver" />import<c> 要素および </c>include<c> 要素で参照されるスタイル シート URI および任意のスタイル シートを解決するために使用する </c>。</param>
        <summary>URI で指定された XSLT スタイル シートの読み込みおよびコンパイルを行います。 <see cref="T:System.Xml.XmlResolver" /> は、XSLT の <c>import</c> 要素または <c>include</c> 要素を解決し、XSLT 設定でスタイル シートに対するアクセス許可を確認します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> クラスでは、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートでは、`http://www.w3.org/1999/XSL/Transform` 名前空間を使用する必要があります。  
  
 既定の設定の <xref:System.Xml.XmlReader> は、スタイルシートの読み込みに使用されます。 <xref:System.Xml.XmlReader>で DTD 処理が無効になっています。 DTD 処理が必要な場合は、この機能が有効になっている <xref:System.Xml.XmlReader> を作成し、<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> メソッドに渡します。  
  
   
  
## Examples  
 次の例では、ネットワークリソースに格納されているスタイルシートを読み込みます。 <xref:System.Xml.XmlSecureResolver> オブジェクトには、スタイル シートにアクセスするのに必要な資格情報を指定します。  
  
 [!code-csharp[XslCompiledTransform.Load#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Load#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheetUri" /> または <paramref name="stylesheetResolver" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">スタイル シートにエラーが含まれています。</exception>
        <exception cref="T:System.IO.FileNotFoundException">スタイル シートが見つかりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="stylesheetUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
        <exception cref="T:System.Net.WebException"><paramref name="stylesheetUri" /> 値を解決できません。  
  
または 
要求の処理中にエラーが発生しました。</exception>
        <exception cref="T:System.UriFormatException"><paramref name="stylesheetUri" /> は有効な URI ではありません。</exception>
        <exception cref="T:System.Xml.XmlException">スタイル シートの読み込み中に解析エラーが発生しました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheet, settings, stylesheetResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">スタイル シートが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="settings">スタイル シートに適用する <see cref="T:System.Xml.Xsl.XsltSettings" />。 これが <see langword="null" /> の場合は、<see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定が適用されます。</param>
        <param name="stylesheetResolver">XSLT の <see cref="T:System.Xml.XmlResolver" />import<c> 要素および </c>include<c> 要素で参照される任意のスタイル シートを解決するために使用する </c>。 これが <see langword="null" /> の場合は、外部リソースが解決されません。</param>
        <summary><see cref="T:System.Xml.XmlReader" /> に格納されている XSLT スタイル シートをコンパイルします。 <see cref="T:System.Xml.XmlResolver" /> は、XSLT の <c>import</c> 要素または <c>include</c> 要素を解決し、XSLT 設定でスタイル シートに対するアクセス許可を確認します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> クラスでは、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートでは、`http://www.w3.org/1999/XSL/Transform` 名前空間を使用する必要があります。  
  
 スタイルシートは、すべての子を通じて <xref:System.Xml.XmlReader> の現在のノードから読み込まれます。 これにより、ドキュメントの一部をスタイルシートとして使用できるようになります。 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> メソッドが完了すると、スタイルシートの末尾の次のノードに <xref:System.Xml.XmlReader> が配置されます。 ドキュメントの末尾に到達すると、<xref:System.Xml.XmlReader> はファイルの末尾 (EOF) に位置します。  
  
   
  
## Examples  
 次の例では、スタイルシートを読み込み、XSLT スクリプトのサポートを有効にします。  
  
 [!code-csharp[XslCompiledTransform.Load#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Load#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheet" /> 値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">スタイル シートにエラーが含まれています。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheet, settings, stylesheetResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、またはスタイル シートが格納されている <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <param name="settings">スタイル シートに適用する <see cref="T:System.Xml.Xsl.XsltSettings" />。 これが <see langword="null" /> の場合は、<see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定が適用されます。</param>
        <param name="stylesheetResolver">XSLT の <see cref="T:System.Xml.XmlResolver" />import<c> 要素および </c>include<c> 要素で参照される任意のスタイル シートを解決するために使用する </c>。 これが <see langword="null" /> の場合は、外部リソースが解決されません。</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" /> に格納されている XSLT スタイル シートをコンパイルします。 <see cref="T:System.Xml.XmlResolver" /> は、XSLT の <c>import</c> 要素または <c>include</c> 要素を解決し、XSLT 設定でスタイル シートに対するアクセス許可を確認します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> クラスでは、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートでは、`http://www.w3.org/1999/XSL/Transform` 名前空間を使用する必要があります。  
  
   
  
## Examples  
 次の例では、スタイルシートを読み込みます。 <xref:System.Xml.XmlSecureResolver> オブジェクトには、スタイルシートにある `import` または `include` 要素にアクセスするために必要な資格情報が含まれています。  
  
 [!code-csharp[XslCompiledTransform.Load#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Load#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheet" /> 値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">スタイル シートにエラーが含まれています。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="OutputSettings">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings OutputSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings OutputSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputSettings As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlWriterSettings ^ OutputSettings { System::Xml::XmlWriterSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputSettings : System.Xml.XmlWriterSettings" Usage="System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スタイル シートの <see cref="T:System.Xml.XmlWriterSettings" />xsl:output<c> 要素から派生した出力情報が格納された </c> オブジェクトを取得します。</summary>
        <value>スタイルシートの<c>xsl: output</c>要素から派生した出力情報を格納する、読み取り専用の <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。 この値には <see langword="null" /> を指定できます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> メソッドの呼び出しが成功した後に設定されます。 これには、コンパイルされたスタイルシートの `xsl:output` 要素から派生した情報が含まれます。 この <xref:System.Xml.XmlWriterSettings> オブジェクトを <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> メソッドに渡して、出力先の <xref:System.Xml.XmlWriter> オブジェクトを作成できます。  
  
   
  
## Examples  
 次の例では、<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> プロパティを使用して、コンソールにテキストを書き込む <xref:System.Xml.XmlWriter> オブジェクトを作成する方法を示します。  
  
 [!code-csharp[XslCompiledTransform.OutputSettings#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.OutputSettings/CS/xslt_OutputSettings.cs#1)]
 [!code-vb[XslCompiledTransform.OutputSettings#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.OutputSettings/VB/xslt_OutputSettings.vb#1)]  
  
 この例では、`books.xml` と `outputConsole.xsl` ファイルを入力として使用します。  
  
 `books.xml`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#2](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/books.xml#2)]  
  
 `outputConsole.xsl`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#3](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/outputConsole.xsl#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="TemporaryFiles">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.TempFileCollection TemporaryFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.TempFileCollection TemporaryFiles" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.TemporaryFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemporaryFiles As TempFileCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::TempFileCollection ^ TemporaryFiles { System::CodeDom::Compiler::TempFileCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemporaryFiles : System.CodeDom.Compiler.TempFileCollection" Usage="System.Xml.Xsl.XslCompiledTransform.TemporaryFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.TempFileCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.CodeDom.Compiler.TempFileCollection" /> メソッドの呼び出しが正常に完了した後でディスク上に作成される一時ファイルが格納された <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> を取得します。</summary>
        <value>ディスク上に作成された一時ファイルを格納する <see cref="T:System.CodeDom.Compiler.TempFileCollection" />。 <see langword="null" /> メソッドの呼び出しが正常に完了しなかった場合、またはデバッグが有効になっていない場合は、この値は <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> になります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、XSLT 処理中に生成されたファイルを識別します。 ファイルは一時ディレクトリ (% TEMP% 環境変数で指定) に配置されます。これらのファイルは、XSLT 処理が完了した後に削除できます。  
  
   
  
## Examples  
 次の例では、一時ファイルの名前をコンソールに書き込みます。  
  
> [!NOTE]
>  一時ファイルが作成されるのは、\<msxsl: script > block を使用してスタイルシートを読み込むときだけです。  
  
 [!code-csharp[XslCompiledTransform.Transform#8](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#8)]
 [!code-vb[XslCompiledTransform.Transform#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XSLT 変換を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  デバッグ モードでコンパイルされた XSLT と、リリース モードでコンパイルされた XSLT には違いがあります。 状況によっては、デバッグ モードでコンパイルされたスタイル シートが、<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> の間にはエラーをスローしないが、その後の <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> の間にエラーとなります。 同じスタイル シートをリリース モードでコンパイルすると、<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> の間にエラーが発生します。 このような動作の 1 つの例は、ノード セット型ではない変数を、ノード セット型が必要な式に代入する場合です。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, string resultsFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, string resultsFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, resultsFile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::String ^ resultsFile);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, resultsFile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="resultsFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputUri">入力ドキュメントの URI。</param>
        <param name="resultsFile">出力ファイルの URI。</param>
        <summary>URI で指定された入力ドキュメントを使用して変換を実行し、結果をファイルに出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドでは、ユーザーの資格情報なしで既定の <xref:System.Xml.XmlUrlResolver> を使用して、入力および出力ドキュメントを解決します。 これらのリソースのいずれかが、認証を必要とするネットワークリソースに配置されている場合は、<xref:System.Xml.XmlResolver> を引数の1つとして受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
 既定の設定の <xref:System.Xml.XmlReader> が、入力ドキュメントの読み込みに使用されます。 <xref:System.Xml.XmlReader>で DTD 処理が無効になっています。 DTD 処理が必要な場合は、この機能が有効になっている <xref:System.Xml.XmlReader> を作成し、<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> メソッドに渡します。  
  
   
  
## Examples  
 次の例では、変換を実行し、ファイルに出力します。  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 このサンプルでは、次の2つの入力ファイルを使用します。  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inputUri" /> または <paramref name="resultsFile" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
        <exception cref="T:System.IO.FileNotFoundException">入力ドキュメントが見つかりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputUri" /> 値または <paramref name="resultsFile" /> 値に、存在しないファイル名またはディレクトリが含まれています。</exception>
        <exception cref="T:System.Net.WebException"><paramref name="inputUri" /> 値または <paramref name="resultsFile" /> 値を解決できません。  
  
または 
要求の処理中にエラーが発生しました。</exception>
        <exception cref="T:System.UriFormatException"><paramref name="inputUri" /> または <paramref name="resultsFile" /> が有効な URI ではありません。</exception>
        <exception cref="T:System.Xml.XmlException">入力ドキュメントの読み込み中に解析エラーが発生しました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">入力ドキュメントの URI。</param>
        <param name="results">出力先の <see cref="T:System.Xml.XmlWriter" />。  
  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="T:System.Xml.XmlWriter" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> を作成する必要があります。 これにより、 <see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
        <summary>URI で指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドでは、ユーザーの資格情報なしで既定の <xref:System.Xml.XmlUrlResolver> を使用して、入力ドキュメントと、スタイルシートにある XSLT `document()` 関数のインスタンスを解決します。 これらのリソースのいずれかが、認証を必要とするネットワークリソースに配置されている場合は、<xref:System.Xml.XmlResolver> を引数の1つとして受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
 既定の設定の <xref:System.Xml.XmlReader> が、入力ドキュメントの読み込みに使用されます。 <xref:System.Xml.XmlReader>で DTD 処理が無効になっています。 DTD 処理が必要な場合は、この機能が有効になっている <xref:System.Xml.XmlReader> を作成し、<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> メソッドに渡します。  
  
 このメソッドは、`xsl:strip-space` 要素をサポートしていません。 コンパイルしたスタイルシートに `xsl:strip-space` 要素が含まれている場合は、入力引数として <xref:System.Xml.XmlReader> を受け取る <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> オーバーロードを使用する必要があります。  
  
   
  
## Examples  
 次の例では、XSLT 変換を実行し、<xref:System.Xml.XmlWriter> オブジェクトに出力します。  
  
 [!code-csharp[XslCompiledTransform.Transform#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Transform#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inputUri" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
        <exception cref="T:System.Net.WebException"><paramref name="inputUri" /> 値を解決できません。  
  
または 
要求の処理中にエラーが発生しました。</exception>
        <exception cref="T:System.UriFormatException"><paramref name="inputUri" /> は有効な URI ではありません。</exception>
        <exception cref="T:System.Xml.XmlException">入力ドキュメントの読み込み中に解析エラーが発生しました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">入力ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="results">出力先の <see cref="T:System.Xml.XmlWriter" />。  
  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="T:System.Xml.XmlWriter" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> を作成する必要があります。 これにより、 <see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
        <summary><see cref="T:System.Xml.XmlReader" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XSLT `document()` 関数が有効になっている場合は、ユーザー資格情報のない <xref:System.Xml.XmlUrlResolver> を使用して解決されます。 外部リソースが認証を必要とするネットワークリソースに配置されている場合は、引数の1つとして <xref:System.Xml.XmlResolver> を受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
   
  
## Examples  
 次の例では、books.xml ファイル内の最初のブックを変換します。  
  
 [!code-csharp[XslCompiledTransform.Transform#7](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#7)]
 [!code-vb[XslCompiledTransform.Transform#7](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <param name="results">出力先の <see cref="T:System.Xml.XmlWriter" />。  
  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="T:System.Xml.XmlWriter" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> を作成する必要があります。 これにより、 <see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XSLT `document()` 関数が有効になっている場合は、ユーザー資格情報のない <xref:System.Xml.XmlUrlResolver> を使用して解決されます。 外部リソースが認証を必要とするネットワークリソースに配置されている場合は、引数の1つとして <xref:System.Xml.XmlResolver> を受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
 このメソッドは、`xsl:strip-space` 要素をサポートしていません。 コンパイルしたスタイルシートに `xsl:strip-space` 要素が含まれている場合は、入力引数として <xref:System.Xml.XmlReader> を受け取る <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> オーバーロードを使用する必要があります。  
  
 <xref:System.Xml.XPath.IXPathNavigable> インターフェイスは、<xref:System.Xml.XmlNode> および <xref:System.Xml.XPath.XPathDocument> クラスに実装されています。 これらのクラスは XML データのメモリ内のキャッシュを表します。  
  
-   <xref:System.Xml.XmlNode> クラスは W3C ドキュメント オブジェクト モデル (DOM) を基礎とし、編集機能も含んでいます。  
  
-   <xref:System.Xml.XPath.XPathDocument> クラスは、XPath データ モデルに基づいた読み取り専用のデータ ストアです。 <xref:System.Xml.XPath.XPathDocument> は、XSLT 処理に推奨されるクラスです。 これは、<xref:System.Xml.XmlNode> クラスと比較して、より高速なパフォーマンスを提供します。  
  
 変換はドキュメント全体に対して行われます。 つまり、ドキュメント ルート ノード以外のノードを指定しても、変換処理では、読み込んだドキュメントのすべてのノードがアクセスされます。 ノード フラグメントを変換するには、ノード フラグメントだけを含むオブジェクトを作成し、そのオブジェクトを <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> メソッドに渡します。 詳細については、「[方法 : ノード フラグメントを変換する](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、XSLT 変換を実行し、<xref:System.Xml.XmlWriter> オブジェクトに出力します。  
  
 [!code-csharp[XslCompiledTransform.Transform#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Transform#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="inputUri">入力ドキュメントの URI。</param>
        <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値には <see langword="null" /> を指定できます。</param>
        <param name="results">出力先のストリーム。</param>
        <summary>URI で指定された入力ドキュメントを使用して変換を実行し、結果をストリームに出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドでは、ユーザーの資格情報なしで既定の <xref:System.Xml.XmlUrlResolver> を使用して、入力ドキュメントと、スタイルシートにある XSLT `document()` 関数のインスタンスを解決します。 これらのリソースのいずれかが、認証を必要とするネットワークリソースに配置されている場合は、<xref:System.Xml.XmlResolver> を引数の1つとして受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
 既定の設定の <xref:System.Xml.XmlReader> が、入力ドキュメントの読み込みに使用されます。 <xref:System.Xml.XmlReader>で DTD 処理が無効になっています。 DTD 処理が必要な場合は、この機能が有効になっている <xref:System.Xml.XmlReader> を作成し、<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> メソッドに渡します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inputUri" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
        <exception cref="T:System.Net.WebException"><paramref name="inputUri" /> 値を解決できません。  
  
または 
要求の処理中にエラーが発生しました。</exception>
        <exception cref="T:System.UriFormatException"><paramref name="inputUri" /> は有効な URI ではありません。</exception>
        <exception cref="T:System.Xml.XmlException">入力ドキュメントの読み込み中に解析エラーが発生しました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">入力ドキュメントの URI。</param>
        <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値には <see langword="null" /> を指定できます。</param>
        <param name="results">出力先の <see cref="T:System.IO.TextWriter" />。</param>
        <summary>URI で指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.IO.TextWriter" /> に出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドでは、ユーザーの資格情報なしで既定の <xref:System.Xml.XmlUrlResolver> を使用して、入力ドキュメントと、スタイルシートにある XSLT `document()` 関数のインスタンスを解決します。 これらのリソースのいずれかが、認証を必要とするネットワークリソースに配置されている場合は、<xref:System.Xml.XmlResolver> を引数の1つとして受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
 既定の設定の <xref:System.Xml.XmlReader> が、入力ドキュメントの読み込みに使用されます。 <xref:System.Xml.XmlReader>で DTD 処理が無効になっています。 DTD 処理が必要な場合は、この機能が有効になっている <xref:System.Xml.XmlReader> を作成し、<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> メソッドに渡します。  
  
   
  
## Examples  
 次の例では、XSLT 変換を実行し、文字列を出力します。  
  
 [!code-csharp[XslCompiledTransform.Transform#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Transform#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inputUri" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
        <exception cref="T:System.Net.WebException"><paramref name="inputUri" /> 値を解決できません。  
  
または 
要求の処理中にエラーが発生しました。</exception>
        <exception cref="T:System.UriFormatException"><paramref name="inputUri" /> は有効な URI ではありません。</exception>
        <exception cref="T:System.Xml.XmlException">入力ドキュメントの読み込み中に解析エラーが発生しました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">入力ドキュメントの URI。</param>
        <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値には <see langword="null" /> を指定できます。</param>
        <param name="results">出力先の <see cref="T:System.Xml.XmlWriter" />。  
  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="T:System.Xml.XmlWriter" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> を作成する必要があります。 これにより、 <see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
        <summary>URI で指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドでは、ユーザーの資格情報なしで既定の <xref:System.Xml.XmlUrlResolver> を使用して、入力ドキュメントと、スタイルシートにある XSLT `document()` 関数のインスタンスを解決します。 これらのリソースのいずれかが、認証を必要とするネットワークリソースに配置されている場合は、<xref:System.Xml.XmlResolver> を引数の1つとして受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
 既定の設定の <xref:System.Xml.XmlReader> が、入力ドキュメントの読み込みに使用されます。 <xref:System.Xml.XmlReader>で DTD 処理が無効になっています。 DTD 処理が必要な場合は、この機能が有効になっている <xref:System.Xml.XmlReader> を作成し、<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> メソッドに渡します。  
  
   
  
## Examples  
 次の例では、<xref:System.Xml.Xsl.XsltArgumentList> オブジェクトを使用して、現在の日付と時刻を表すパラメーターを作成します。  
  
 [!code-csharp[XsltArgumentList.AddParam#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltArgumentList.AddParam/CS/addparam.cs#1)]
 [!code-vb[XsltArgumentList.AddParam#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltArgumentList.AddParam/VB/addparam.vb#1)]  
  
 この例では、入力として次の2つのデータファイルを使用します。  
  
 order.xml  
  
 [!code-xml[XsltArgumentList.AddParam#2](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xml#2)]  
  
 order.xsl  
  
 [!code-xml[XsltArgumentList.AddParam#3](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inputUri" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputtUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
        <exception cref="T:System.Net.WebException"><paramref name="inputUri" /> 値を解決できません。  
  
または 
要求の処理中にエラーが発生しました。</exception>
        <exception cref="T:System.UriFormatException"><paramref name="inputUri" /> は有効な URI ではありません。</exception>
        <exception cref="T:System.Xml.XmlException">入力ドキュメントの読み込み中に解析エラーが発生しました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">入力ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値には <see langword="null" /> を指定できます。</param>
        <param name="results">出力先のストリーム。</param>
        <summary><see cref="T:System.Xml.XmlReader" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果をストリームに出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 スタイルシートに XSLT `document()` 関数が含まれている場合は、ユーザー資格情報のない <xref:System.Xml.XmlUrlResolver> を使用して解決されます。 外部リソースが認証を必要とするネットワークリソースに配置されている場合は、引数の1つとして <xref:System.Xml.XmlResolver> を受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">入力ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値には <see langword="null" /> を指定できます。</param>
        <param name="results">出力先の <see cref="T:System.IO.TextWriter" />。</param>
        <summary><see cref="T:System.Xml.XmlReader" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.IO.TextWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 スタイルシートに XSLT `document()` 関数が含まれている場合は、ユーザー資格情報のない <xref:System.Xml.XmlUrlResolver> を使用して解決されます。 外部リソースが認証を必要とするネットワークリソースに配置されている場合は、引数の1つとして <xref:System.Xml.XmlResolver> を受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">入力ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値には <see langword="null" /> を指定できます。</param>
        <param name="results">出力先の <see cref="T:System.Xml.XmlWriter" />。  
  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="T:System.Xml.XmlWriter" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> を作成する必要があります。 これにより、 <see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
        <summary><see cref="T:System.Xml.XmlReader" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 スタイルシートに XSLT `document()` 関数が含まれている場合は、ユーザー資格情報のない <xref:System.Xml.XmlUrlResolver> を使用して解決されます。 外部リソースが認証を必要とするネットワークリソースに配置されている場合は、引数の1つとして <xref:System.Xml.XmlResolver> を受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値には <see langword="null" /> を指定できます。</param>
        <param name="results">出力先のストリーム。</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果をストリームに出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XSLT `document()` 関数が有効になっている場合は、ユーザー資格情報のない <xref:System.Xml.XmlUrlResolver> を使用して解決されます。 外部リソースが認証を必要とするネットワークリソースに配置されている場合は、引数の1つとして <xref:System.Xml.XmlResolver> を受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
 このメソッドは、`xsl:strip-space` 要素をサポートしていません。 コンパイルしたスタイルシートに `xsl:strip-space` 要素が含まれている場合は、入力引数として <xref:System.Xml.XmlReader> を受け取る <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> オーバーロードを使用する必要があります。  
  
 <xref:System.Xml.XPath.IXPathNavigable> インターフェイスは、<xref:System.Xml.XmlNode> および <xref:System.Xml.XPath.XPathDocument> クラスに実装されています。 これらのクラスは XML データのメモリ内のキャッシュを表します。  
  
-   <xref:System.Xml.XmlNode> クラスは W3C ドキュメント オブジェクト モデル (DOM) を基礎とし、編集機能も含んでいます。  
  
-   <xref:System.Xml.XPath.XPathDocument> クラスは、XPath データ モデルに基づいた読み取り専用のデータ ストアです。 <xref:System.Xml.XPath.XPathDocument> は、XSLT 処理に推奨されるクラスです。 これは、<xref:System.Xml.XmlNode> クラスと比較して、より高速なパフォーマンスを提供します。  
  
 変換はドキュメント全体に対して行われます。 つまり、ドキュメント ルート ノード以外のノードを指定しても、変換処理では、読み込んだドキュメントのすべてのノードがアクセスされます。 ノード フラグメントを変換するには、ノード フラグメントだけを含むオブジェクトを作成し、そのオブジェクトを <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> メソッドに渡します。 詳細については、「[方法 : ノード フラグメントを変換する](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、XSLT 変換を実行し、<xref:System.IO.FileStream>に出力します。  
  
 [!code-csharp[XslCompiledTransform.Transform#6](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#6)]
 [!code-vb[XslCompiledTransform.Transform#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値には <see langword="null" /> を指定できます。</param>
        <param name="results">出力先の <see cref="T:System.IO.TextWriter" />。</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.IO.TextWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XSLT `document()` 関数が有効になっている場合は、ユーザー資格情報のない <xref:System.Xml.XmlUrlResolver> を使用して解決されます。 外部リソースが認証を必要とするネットワークリソースに配置されている場合は、引数の1つとして <xref:System.Xml.XmlResolver> を受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
 このメソッドは、`xsl:strip-space` 要素をサポートしていません。 コンパイルしたスタイルシートに `xsl:strip-space` 要素が含まれている場合は、入力引数として <xref:System.Xml.XmlReader> を受け取る <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> オーバーロードを使用する必要があります。  
  
 <xref:System.Xml.XPath.IXPathNavigable> インターフェイスは、<xref:System.Xml.XmlNode> および <xref:System.Xml.XPath.XPathDocument> クラスに実装されています。 これらのクラスは XML データのメモリ内のキャッシュを表します。  
  
-   <xref:System.Xml.XmlNode> クラスは W3C ドキュメント オブジェクト モデル (DOM) を基礎とし、編集機能も含んでいます。  
  
-   <xref:System.Xml.XPath.XPathDocument> クラスは、XPath データ モデルに基づいた読み取り専用のデータ ストアです。 <xref:System.Xml.XPath.XPathDocument> は、XSLT 処理に推奨されるクラスです。 これは、<xref:System.Xml.XmlNode> クラスと比較して、より高速なパフォーマンスを提供します。  
  
 変換はドキュメント全体に対して行われます。 つまり、ドキュメント ルート ノード以外のノードを指定しても、変換処理では、読み込んだドキュメントのすべてのノードがアクセスされます。 ノード フラグメントを変換するには、ノード フラグメントだけを含むオブジェクトを作成し、そのオブジェクトを <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> メソッドに渡します。 詳細については、「[方法 : ノード フラグメントを変換する](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値には <see langword="null" /> を指定できます。</param>
        <param name="results">出力先の <see cref="T:System.Xml.XmlWriter" />。  
  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="T:System.Xml.XmlWriter" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> を作成する必要があります。 これにより、 <see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XSLT `document()` 関数が有効になっている場合は、ユーザー資格情報のない <xref:System.Xml.XmlUrlResolver> を使用して解決されます。 外部リソースが認証を必要とするネットワークリソースに配置されている場合は、引数の1つとして <xref:System.Xml.XmlResolver> を受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
 このメソッドは、`xsl:strip-space` 要素をサポートしていません。 コンパイルしたスタイルシートに `xsl:strip-space` 要素が含まれている場合は、入力引数として <xref:System.Xml.XmlReader> を受け取る <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> オーバーロードを使用する必要があります。  
  
 <xref:System.Xml.XPath.IXPathNavigable> インターフェイスは、<xref:System.Xml.XmlNode> および <xref:System.Xml.XPath.XPathDocument> クラスに実装されています。 これらのクラスは XML データのメモリ内のキャッシュを表します。  
  
-   <xref:System.Xml.XmlNode> クラスは W3C ドキュメント オブジェクト モデル (DOM) を基礎とし、編集機能も含んでいます。  
  
-   <xref:System.Xml.XPath.XPathDocument> クラスは、XPath データ モデルに基づいた読み取り専用のデータ ストアです。 <xref:System.Xml.XPath.XPathDocument> は、XSLT 処理に推奨されるクラスです。 これは、<xref:System.Xml.XmlNode> クラスと比較して、より高速なパフォーマンスを提供します。  
  
 変換はドキュメント全体に対して行われます。 つまり、ドキュメント ルート ノード以外のノードを指定しても、変換処理では、読み込んだドキュメントのすべてのノードがアクセスされます。 ノード フラグメントを変換するには、ノード フラグメントだけを含むオブジェクトを作成し、そのオブジェクトを <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> メソッドに渡します。 詳細については、「[方法 : ノード フラグメントを変換する](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results, documentResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">入力ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値には <see langword="null" /> を指定できます。</param>
        <param name="results">出力先の <see cref="T:System.Xml.XmlWriter" />。  
  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="T:System.Xml.XmlWriter" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> を作成する必要があります。 これにより、 <see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
        <param name="documentResolver">XSLT の <see cref="T:System.Xml.XmlResolver" />document()<c> 関数を解決するために使用する </c>。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。</param>
        <summary><see cref="T:System.Xml.XmlReader" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には追加の実行時引数を指定し、XmlResolver で XSLT の <c>document()</c> 関数を解決します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Xml.XmlSecureResolver> を使用して、XSLT `document()` 関数を解決します。  
  
 [!code-csharp[XslCompiledTransform.Transform#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Transform#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform クラスの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results, documentResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された変換対象のドキュメント。</param>
        <param name="arguments">引数リスト ( <see cref="T:System.Xml.Xsl.XsltArgumentList" />)。</param>
        <param name="results">出力先の <see cref="T:System.Xml.XmlWriter" />。  
  
スタイル シートに <see langword="xsl:output" /> 要素が含まれている場合は、 <see cref="T:System.Xml.XmlWriter" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> を作成する必要があります。 これにより、 <see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
        <param name="documentResolver">XSLT の <see cref="T:System.Xml.XmlResolver" /> 関数を解決するために使用する <see langword="document()" /> 。 これが <see langword="null" />の場合、 <see langword="document()" /> 関数は解決されません。</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には追加の実行時引数を指定し、 <see cref="T:System.Xml.XmlResolver" /> は XSLT の <see langword="document()" /> 関数を解決します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
