<Type Name="XslTransform" FullName="System.Xml.Xsl.XslTransform">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c5cc03e580a9603abd294581df3e6747493e52ed" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77219106" /></Metadata><TypeSignature Language="C#" Value="public sealed class XslTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XslTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslTransform sealed" />
  <TypeSignature Language="F#" Value="type XslTransform = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Obsolete("This class has been deprecated. Please use System.Xml.Xsl.XslCompiledTransform instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>XSLT (Extensible Stylesheet Language Transformations) スタイル シートを使用して XML データを変換します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、Microsoft .NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートでは、`http://www.w3.org/1999/XSL/Transform`名前空間を使用する必要があります。  
  
 <xref:System.Xml.Xsl.XsltArgumentList> クラスを使用して、追加の引数をスタイルシートに追加することもできます。 このクラスには、スタイルシートと拡張オブジェクトの入力パラメーターが含まれています。これは、スタイルシートから呼び出すことができます。  
  
 XML データを変換するには:  
  
1.  <xref:System.Xml.Xsl.XslTransform> オブジェクトを作成します。  
  
2.  <xref:System.Xml.Xsl.XslTransform.Load%2A> メソッドを使用して、変換のスタイルシートを読み込みます。 このメソッドにはいくつかのオーバーロードがあり、<xref:System.Xml.XmlReader>、<xref:System.Xml.XPath.XPathNavigator>、<xref:System.Xml.XPath.IXPathNavigable>、またはファイルの場所を含む URL を使用してスタイルシートを読み込むことができます。  
  
3.  <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドを使用して、XML データを変換します。 このメソッドにはいくつかのオーバーロードがあり、さまざまな種類の入力と出力を処理できます。 変換中に入力として使用する追加の引数を含む <xref:System.Xml.Xsl.XsltArgumentList> を指定することもできます。  
  
 **セキュリティに関する考慮事項**  
  
 <xref:System.Xml.Xsl.XslTransform> クラスを使用するアプリケーションを作成するときには、次の項目とその関連事項に注意する必要があります。  
  
-   拡張オブジェクトは既定で有効になっています。 拡張オブジェクトを含む <xref:System.Xml.Xsl.XsltArgumentList> オブジェクトが <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドに渡されると、拡張オブジェクトは使用されます。  
  
-   XSLT スタイル シートには、他のファイルへの参照や埋め込みのスクリプト ブロックを含めることができます。 悪意のあるユーザーがこの問題を悪用する可能性があります。これを実行すると、コンピューターがリソース不足になるまでシステムが処理されるデータまたはスタイルシートが提供されます。  
  
-   混在信頼環境で動作する XSLT アプリケーションは、スタイル シートのなりすましを引き起こす可能性があります。 たとえば、悪意のあるユーザーは、有害なスタイル シートを含むオブジェクトを読み込み、それを <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドを呼び出して変換を実行する別のユーザーに渡す可能性があります。  
  
 これらのセキュリティの問題は、<xref:System.Xml.Xsl.XslTransform> オブジェクト、XSLT スタイルシート、または信頼されていないソースからの XML ソースデータを受け入れないことで軽減できます。  
  
 **スクリプトのサポート**  
  
 このクラスは、`msxsl:script` 要素を使用した埋め込みスクリプトをサポートしています。  
  
 .NET Framework のバージョン1.1 では、スタイルシートの証拠によって、埋め込みスクリプトに与えられるアクセス許可が決定されます。  
  
-   スタイルシートが Uniform Resource Identifier (URI) から読み込まれた場合は、URI が証拠の作成に使用されます。 この証拠には、URI とそのサイトとゾーンが含まれます。  
  
-   スタイルシートが別のソースを使用して読み込まれた場合は、<xref:System.Security.Policy.Evidence?displayProperty=nameWithType> オブジェクトを <xref:System.Xml.Xsl.XslTransform.Load%2A> メソッドに渡すことによって、証拠を提供できます。 それ以外の場合、スクリプトアセンブリには完全な信頼が与えられます。  
  
 信頼されていない呼び出し元: 埋め込みスクリプトをコンパイルするには、`UnmanagedCode` アクセス許可が必要です。 <xref:System.Xml.Xsl.XslTransform.Load%2A> メソッドに <xref:System.Security.Policy.Evidence> を提供するには、`ControlEvidence` アクセス許可が必要です。 <xref:System.Security.SecurityException> は、呼び出し元に必要なアクセス許可がない場合にスローされます。 詳細については、「<xref:System.Security.Permissions.SecurityPermission?displayProperty=nameWithType>」および「<xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=nameWithType>」を参照してください。  
  
 `msxsl:script` 要素には、次の要件があります。  
  
-   `msxsl:script` 要素は `urn:schemas-microsoft-com:xslt` 名前空間に属します。 スタイルシートには `xmlns:msxsl=urn:schemas-microsoft-com:xslt`名前空間の宣言が含まれている必要があります。  
  
-   `msxsl:script` 要素には、使用するスクリプト言語を指定する `language` 属性を含めることができます。 `language` 属性の値はC#、、CSHARP、VB、visual Basic、JScript、または JavaScript のいずれかである必要があります。 言語名では大文字と小文字が区別されないため、JavaScript と javascript は両方とも有効です。 `language` 属性が指定されていない場合、既定値は JScript になります。  
  
-   `msxsl:script` 要素には、スクリプトブロックに関連付けられている名前空間を表すプレフィックスを含む `implements-prefix` 属性が含まれている必要があります。 この名前空間は、スタイルシート内で定義する必要があります。 スタイルシートには、名前空間によってグループ化された複数のスクリプトブロックを含めることができます。 同じ名前空間内に複数の言語のスクリプトブロックを含めることはできません。 スクリプトブロックは、別のスクリプトブロックで定義されている関数を呼び出すことができます。これは、同じ名前空間内にスクリプトブロックが存在する場合に使用します。 スクリプトブロックの内容は、スクリプト言語の規則と構文 (`language` 属性によって指定) に従って解析されます。 たとえば、スクリプトブロックがC#ある場合、コメントの先頭には `//` 文字が付きます。 コメントは、有効な XML コンテンツである必要があります。  
  
> [!NOTE]
> スクリプトブロックを CDATA セクションにラップすることをお勧めします。
  
 [!INCLUDE [xsltransform-script](~/includes/xsltransform-script.md)] 
   
 関数は、`msxsl:script` 要素内で宣言できます。 既定でサポートされる名前空間を次の表に示します。  
  
|サポートされている名前空間|説明|  
|--------------------------|-----------------|  
|`System`|システムクラス。|  
|`System.Collection`|コレクション クラス|  
|`System.Text`|テキスト処理クラス。|  
|`System.Xml`|コア XML クラス|  
|`System.Xml.Xsl`|XSLT クラス|  
|`System.Xml.XPath`|XPath (XML Path Language) クラス|  
  
 スクリプト関数によって定義される引数と戻り値は、以下に示す World Wide Web コンソーシアム (W3C) のいずれかの型である必要があります。 次の表では、W3C 型 (XPath または XSLT) と、対応する .NET Framework クラスとの間のマッピングについて説明します。  
  
|W3C 型|同等の .NET クラス|  
|--------------|---------------------------|  
|String (XPath)|`System.String`|  
|ブール値 (XPath)|`System.Boolean`|  
|数値 (XPath)|`System.Double`|  
|結果ツリーフラグメント (XSLT)|`System.Xml.XPath.XPathNavigator`|  
|ノードセット (XPath)|`System.Xml.XPath.XPathNodeIterator`|  
  
 スクリプト関数で、Int16、UInt16、Int32、UInt32、Int64、UInt64、Single、Decimal のいずれかの数値型を使用する場合、これらの型は、W3C XPath 型の数値にマップされる Double に強制的に変換されます。  
  
 例外は、引数の結果を必要な型の1つに変換できない関数が呼び出された場合にスローされます。  
  
> [!NOTE]
>  `msxsl:script` と `msxsl:node-list` は、<xref:System.Xml.Xsl.XslTransform> クラスでサポートされている `urn:schemas-microsoft-com:xslt` 名前空間の唯一の関数です。  
  
 <xref:System.Xml.Xsl.XslTransform> には、CLR (共通言語ランタイム) コードを拡張メカニズムとして使用する機能があります。 これを実現するには、クラスのインスタンスを <xref:System.Xml.Xsl.XslTransform> クラスに渡し、XSLT スタイルシート内でそのパブリックメソッドを呼び出します。 `params` キーワードで定義されたメソッドは、指定された数のパラメーターを渡すことができますが、このシナリオでは正しく機能しません。 詳細については、「 [params](~/docs/csharp/language-reference/keywords/params.md) 」を参照してください。  
  
 詳細について[は、「XslTransform クラスを使用した XSLT 変換](~/docs/standard/data/xml/xslt-transformations-with-the-xsltransform-class.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、指定された XML ドキュメントを変換し、結果をコンソールに出力します。  
  
 [!code-csharp[Classic WebData XslTransform Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><see cref="T:System.Xml.Xsl.XslTransform" /> オブジェクトは、変換操作に対してのみスレッドセーフです。 他の操作は、スレッドセーフであるとは限りません。 読み込み操作中に、オブジェクトに対して他のメソッドが呼び出されないようにする必要があります。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.Xsl.XslTransform" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XSLT スタイル シートを読み込みます。XSLT の <see langword="xsl:include" /> 要素および <see langword="xsl:import" /> 要素で参照されるスタイル シートが読み込まれます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.Load : string -&gt; unit" Usage="xslTransform.Load url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">読み込む XSLT スタイル シートを指定する URL。</param>
        <summary>URL で指定された XSLT スタイル シートを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl="http://www.w3.org/1999/XSL/Transform"`名前空間の宣言が含まれている必要があります。  
  
 このメソッドは、`xsl:include` および `xsl:import` 要素で参照されているスタイルシートを含む XSLT スタイルシートを読み込みます。 外部リソースは、ユーザー資格情報のない <xref:System.Xml.XmlUrlResolver> を使用して解決されます。 スタイルシートが、認証を必要とするネットワークリソースに配置されている場合は、引数の1つとして <xref:System.Xml.XmlResolver> を受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
 スタイルシートに埋め込みスクリプトが含まれている場合、スクリプトはアセンブリにコンパイルされます。 スタイルシートの URI は、アセンブリに適用される証拠の作成に使用されます。
  
> [!NOTE]
>  呼び出し元に `UnmanagedCode` のアクセス許可がない場合、埋め込みスクリプトはコンパイルされず、<xref:System.Security.SecurityException> がスローされます。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 次の例では、XML ドキュメントを HTML ドキュメントに変換します。 テーブル内の各書籍の ISBN、タイトル、価格が表示されます。  
  
 [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/VB/source.vb#1)]  
  
 このサンプルは、次の 2 つの入力ファイルを使用します。  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">読み込まれたリソースが、有効なスタイル シートではありません。</exception>
        <exception cref="T:System.Security.SecurityException">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">XSLT スタイル シートを格納している <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
        <summary><see cref="T:System.Xml.XmlReader" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 このメソッドは、`xsl:include` および `xsl:import` 要素で参照されているスタイルシートを含む XSLT スタイルシートを読み込みます。 外部リソースは、ユーザー資格情報のない <xref:System.Xml.XmlUrlResolver> を使用して解決されます。 スタイルシートが、認証を必要とするネットワークリソースに配置されている場合は、引数の1つとして <xref:System.Xml.XmlResolver> を受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
 スタイルシートは、すべての子を通じて <xref:System.Xml.XmlReader> の現在のノードから読み込まれます。 これにより、ドキュメントの一部をスタイルシートとして使用できるようになります。 <xref:System.Xml.Xsl.XslTransform.Load%2A> メソッドから制御が戻った後、スタイルシートの末尾の次のノードに <xref:System.Xml.XmlReader> が配置されます。 ドキュメントの末尾に到達すると、<xref:System.Xml.XmlReader> はファイルの末尾 (EOF) に位置します。  
  
 スタイルシートにエンティティが含まれている場合は、エンティティを解決できる <xref:System.Xml.XmlReader> を指定する必要があります (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> は `true`を返します)。 この場合は、<xref:System.Xml.XmlValidatingReader> を使用できます。  
  
 スタイルシートに埋め込みスクリプトが含まれている場合、スクリプトはアセンブリにコンパイルされます。 アセンブリには完全な信頼があります。 <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> メソッドを使用して証拠を提供することをお勧めします。
  
> [!NOTE]
>  呼び出し元に `UnmanagedCode` のアクセス許可がない場合、埋め込みスクリプトはコンパイルされず、<xref:System.Security.SecurityException> がスローされます。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 次の例では、すべての書籍をタイトルで並べ替えて XML ファイルを変換します。  
  
 [!code-cpp[XslTransform.Load3#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Load3/CPP/trans3.cpp#1)]
 [!code-csharp[XslTransform.Load3#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load3/CS/trans3.cs#1)]
 [!code-vb[XslTransform.Load3#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load3/VB/trans3.vb#1)]  
  
 この例では、入力として次のデータファイルを使用します。  
  
 `books.xml`  
  
 [!code-xml[XslTransform.Load3#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load3/XML/books.xml#2)]  
  
 `titles.xsl`  
  
 [!code-xml[XslTransform.Load3#3](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load3/XML/titles.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">現在のノードは、有効なスタイル シートに準拠していません。</exception>
        <exception cref="T:System.Security.SecurityException">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または XSLT スタイル シートを含んでいる <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 このメソッドは、`xsl:include` および `xsl:import` 要素で参照されているスタイルシートを含む XSLT スタイルシートを読み込みます。 外部リソースは、ユーザー資格情報のない <xref:System.Xml.XmlUrlResolver> を使用して解決されます。 スタイルシートが、認証を必要とするネットワークリソースに配置されている場合は、引数の1つとして <xref:System.Xml.XmlResolver> を受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
 スタイルシートに埋め込みスクリプトが含まれている場合、スクリプトはアセンブリにコンパイルされます。 アセンブリには完全な信頼があります。 <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> メソッドを使用して証拠を提供することをお勧めします。
  
> [!NOTE]
>  呼び出し元に `UnmanagedCode` のアクセス許可がない場合、埋め込みスクリプトはコンパイルされず、<xref:System.Security.SecurityException> がスローされます。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">読み込まれたリソースが、有効なスタイル シートではありません。</exception>
        <exception cref="T:System.Security.SecurityException">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="stylesheet">XSLT スタイル シートを格納している <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
        <summary><see cref="T:System.Xml.XPath.XPathNavigator" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 このメソッドは、`xsl:include` および `xsl:import` 要素で参照されているスタイルシートを含む XSLT スタイルシートを読み込みます。 外部リソースは、ユーザー資格情報のない <xref:System.Xml.XmlUrlResolver> を使用して解決されます。 スタイルシートが、認証を必要とするネットワークリソースに配置されている場合は、引数の1つとして <xref:System.Xml.XmlResolver> を受け取るオーバーロードを使用し、必要な資格情報で <xref:System.Xml.XmlResolver> を指定します。  
  
 スタイルシートは、<xref:System.Xml.XPath.XPathNavigator>の現在位置から読み込まれます。 読み込まれたドキュメントの一部だけをスタイルシートとして使用するには、スタイルシートの先頭に対応するノードに移動します。 <xref:System.Xml.Xsl.XslTransform.Load%2A> メソッドから制御が戻った後、<xref:System.Xml.XPath.XPathNavigator> はスタイルシートの先頭 ([`xsl:style sheet`] ノード) に配置されます。  
  
 スタイルシートに埋め込みスクリプトが含まれている場合、スクリプトはアセンブリにコンパイルされます。 アセンブリには完全な信頼があります。 <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> メソッドを使用して証拠を提供することをお勧めします。
  
> [!NOTE]
>  呼び出し元に `UnmanagedCode` のアクセス許可がない場合、埋め込みスクリプトはコンパイルされず、<xref:System.Security.SecurityException> がスローされます。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">現在のノードは、有効なスタイル シートに準拠していません。</exception>
        <exception cref="T:System.Security.SecurityException">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string url, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string url, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (url As String, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ url, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : string * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (url, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="url">読み込む XSLT スタイル シートを指定する URL。</param>
        <param name="resolver">スタイル シート、および <see cref="T:System.Xml.XmlResolver" />xsl:import<c> 要素と </c>xsl:include<c> 要素で参照される任意のスタイル シートの読み込みに使用する </c>。  
  
これが <see langword="null" /> の場合は、ユーザー資格情報を持たない既定の <see cref="T:System.Xml.XmlUrlResolver" /> がスタイル シートを開くときに使用されます。 既定の <see cref="T:System.Xml.XmlUrlResolver" /> は、スタイル シート内の外部リソースの解決には使用されないため、<c>xsl:import</c> 要素と <c>xsl:include</c> 要素は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
        <summary>URL で指定された XSLT スタイル シートを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 スタイルシートに埋め込みスクリプトが含まれている場合、スクリプトはアセンブリにコンパイルされます。 スタイルシートの URI は、アセンブリに適用される証拠の作成に使用されます。
  
> [!NOTE]
>  呼び出し元に `UnmanagedCode` のアクセス許可がない場合、埋め込みスクリプトはコンパイルされず、<xref:System.Security.SecurityException> がスローされます。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 次の例では、XML ドキュメントを HTML ドキュメントに変換します。 この例では、別のスタイルシートを参照する `xsl:include` 要素を含む XSLT スタイルシートを読み込みます。 <xref:System.Xml.XmlUrlResolver> は、含まれているスタイルシートのネットワークリソースにアクセスするために必要な資格情報を設定する <xref:System.Xml.Xsl.XslTransform.Load%2A> メソッドに渡されます。  
  
 [!code-csharp[XslTransform.Load2#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load2/CS/trans2.cs#1)]
 [!code-vb[XslTransform.Load2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load2/VB/trans2.vb#1)]  
  
 この例では、入力として次のデータファイルを使用します。  
  
 `books.xml`  
  
 [!code-xml[XslTransform.Load2#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/books.xml#2)]  
  
 `sort.xsl`  
  
 [!code-xml[XslTransform.Load2#3](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/sort.xsl#3)]  
  
 `includefile.xsl`  
  
 [!code-xml[XslTransform.Load2#4](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/includefile.xsl#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">読み込まれたリソースが、有効なスタイル シートではありません。</exception>
        <exception cref="T:System.Security.SecurityException">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">XSLT スタイル シートを格納している <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" />xsl:import<c> 要素および </c>xsl:include<c> 要素で参照される任意のスタイル シートを読み込むために使用される </c>。 これが <see langword="null" /> の場合は、外部リソースが解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
        <summary><see cref="T:System.Xml.XmlReader" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 このメソッドは、`xsl:include` および `xsl:import` 要素で参照されているスタイルシートを含む XSLT スタイルシートを読み込みます。 スタイルシートは、すべての子を通じて <xref:System.Xml.XmlReader> の現在のノードから読み込まれます。 これにより、ドキュメントの一部をスタイルシートとして使用できるようになります。  
  
 <xref:System.Xml.Xsl.XslTransform.Load%2A> メソッドから制御が戻った後、スタイルシートの末尾の次のノードに <xref:System.Xml.XmlReader> が配置されます。 ドキュメントの末尾に到達すると、<xref:System.Xml.XmlReader> はファイルの末尾 (EOF) に位置します。  
  
 スタイルシートにエンティティが含まれている場合は、エンティティを解決できる <xref:System.Xml.XmlReader> を指定する必要があります (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> は `true`を返します)。 この場合は、<xref:System.Xml.XmlValidatingReader> を使用できます。  
  
 スタイルシートに埋め込みスクリプトが含まれている場合、スクリプトはアセンブリにコンパイルされます。 アセンブリには完全な信頼があります。 <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> メソッドを使用して証拠を提供することをお勧めします。
  
> [!NOTE]
>  呼び出し元に `UnmanagedCode` のアクセス許可がない場合、埋め込みスクリプトはコンパイルされず、<xref:System.Security.SecurityException> がスローされます。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">現在のノードは、有効なスタイル シートに準拠していません。</exception>
        <exception cref="T:System.Security.SecurityException">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または XSLT スタイル シートを含んでいる <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" />xsl:import<c> 要素および </c>xsl:include<c> 要素で参照される任意のスタイル シートを読み込むために使用される </c>。 これが <see langword="null" /> の場合は、外部リソースが解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> がキャッシュされていません。</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 スタイルシートに埋め込みスクリプトが含まれている場合、スクリプトはアセンブリにコンパイルされます。 アセンブリには完全な信頼があります。 <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> メソッドを使用して証拠を提供することをお勧めします。
  
> [!NOTE]
>  呼び出し元に `UnmanagedCode` のアクセス許可がない場合、埋め込みスクリプトはコンパイルされず、<xref:System.Security.SecurityException> がスローされます。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">読み込まれたリソースが、有効なスタイル シートではありません。</exception>
        <exception cref="T:System.Security.SecurityException">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">XSLT スタイル シートを格納している <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" />xsl:import<c> 要素および </c>xsl:include<c> 要素で参照される任意のスタイル シートを読み込むために使用される </c>。 これが <see langword="null" /> の場合は、外部リソースが解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> がキャッシュされていません。</param>
        <summary><see cref="T:System.Xml.XPath.XPathNavigator" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 スタイルシートは、<xref:System.Xml.XPath.XPathNavigator>の現在位置から読み込まれます。 読み込まれたドキュメントの一部をスタイルシートとして使用するには、スタイルシートの先頭に対応するノードに移動します。 <xref:System.Xml.Xsl.XslTransform.Load%2A> メソッドから制御が戻った後、<xref:System.Xml.XPath.XPathNavigator> はスタイルシートの先頭 ([`xsl:style sheet`] ノード) に配置されます。  
  
 スタイルシートに埋め込みスクリプトが含まれている場合、スクリプトはアセンブリにコンパイルされます。 アセンブリには完全な信頼があります。 <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>を使用して証拠を提供することをお勧めします。
  
> [!NOTE]
>  呼び出し元に `UnmanagedCode` のアクセス許可がない場合、埋め込みスクリプトはコンパイルされず、<xref:System.Security.SecurityException> がスローされます。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">現在のノードは、有効なスタイル シートに準拠していません。</exception>
        <exception cref="T:System.Security.SecurityException">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">読み込むスタイル シートを格納している <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" />xsl:import<c> 要素および </c>xsl:include<c> 要素で参照される任意のスタイル シートを読み込むために使用される </c>。 これが <see langword="null" /> の場合は、外部リソースが解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> がキャッシュされていません。</param>
        <param name="evidence">XSLT スタイル シート内のスクリプト ブロックに対して生成されたアセンブリに設定された <see cref="T:System.Security.Policy.Evidence" />。  
  
これが <see langword="null" /> の場合、スクリプト ブロックは処理されません。また、XSLT の <c>document()</c> 関数はサポートされず、特権拡張機能オブジェクトは許可されません。  
  
呼び出し元には、スクリプト アセンブリの証拠を提供するための <see langword="ControlEvidence" /> アクセス許可が必要です。 信頼度の低い呼び出し元は、このパラメーターを <see langword="null" /> に設定できます。</param>
        <summary><see cref="T:System.Xml.XmlReader" /> に格納されている XSLT スタイル シートを読み込みます。 このメソッドを使用すると、証拠を指定することによって、スタイル シートのアクセス許可を制限できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 このメソッドは、`xsl:include` および `xsl:import` 要素で参照されているスタイルシートを含む XSLT スタイルシートを読み込みます。 スタイルシートは、すべての子を通じて <xref:System.Xml.XmlReader> の現在のノードから読み込まれます。 これにより、ドキュメントの一部をスタイルシートとして使用できるようになります。  
  
 <xref:System.Xml.Xsl.XslTransform.Load%2A> メソッドから制御が戻った後、スタイルシートの末尾の次のノードに <xref:System.Xml.XmlReader> が配置されます。 ドキュメントの末尾に到達すると、<xref:System.Xml.XmlReader> はファイルの末尾 (EOF) に位置します。  
  
 スタイルシートにエンティティが含まれている場合は、エンティティを解決できる <xref:System.Xml.XmlReader> を指定する必要があります (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> は `true`を返します)。 この場合は、<xref:System.Xml.XmlValidatingReader> を使用できます。  
  

  
 証拠を提供するには、さまざまな方法があります。 次の表は、一般的なユーザーシナリオに対して提供する証拠の種類を示しています。  
  
|シナリオ|提供する証拠の種類|  
|--------------|---------------------------------|  
|XSLT スタイルシートは、自己完結型であるか、信頼できるコードベースから取得されます。|アセンブリからの証拠を使用します。<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;xslt.Load(xslReader, resolver, this.GetType().Assembly.Evidence);</code></pre>|  
|XSLT スタイル シートが外部ソースにある場合。 ソースの出所がわかっており、検証可能な URL があります。|URL を使用して証拠を作成します。<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform();&#13;&#10; Evidence evidence = XmlSecureResolver.CreateEvidenceForUrl(stylesheetURL); &#13;&#10;xslt.Load(xslReader,resolver,evidence);</code></pre>|  
|XSLT スタイル シートが外部ソースにある場合。 ソースの出所は不明。|証拠を `null` に設定します。 スクリプト ブロックは処理されません。XSLT `document()` 関数はサポートされません。特権を持つ拡張オブジェクトは許可されません。<br /><br /> さらに、`resolver` パラメーターを `null`に設定することもできます。 これにより、`xsl:import` と `xsl:include` の要素が処理されなくなります。|  
|XSLT スタイル シートが外部ソースにある場合。 ソースの出所が不明であるが、スクリプトのサポートが必要。|呼び出し元の証拠を要求します。 呼び出し元の API は、証拠 (通常は <xref:System.Security.Policy.Evidence> クラス) を提供する手段を提供する必要があります。|  
  
     
## Examples  
 次の例では、XSLT 変換を実行します。 `xsltReader` はスタイルシートを含む <xref:System.Xml.XmlReader> であり、`secureURL` は <xref:System.Security.Policy.Evidence>の作成に使用できる信頼された URL です。 <xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A?displayProperty=nameWithType> メソッドは、スタイルシートに適用される <xref:System.Security.Policy.Evidence> を作成するために使用されます。  
  
 [!code-cpp[XslTransform.Load4#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Load4/CPP/trans_ev.cpp#1)]
 [!code-csharp[XslTransform.Load4#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load4/CS/trans_ev.cs#1)]
 [!code-vb[XslTransform.Load4#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load4/VB/trans_ev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">現在のノードは、有効なスタイル シートに準拠していません。</exception>
        <exception cref="T:System.Security.SecurityException">参照されているスタイル シートには、提供された証拠で許可されていない機能が必要です。  
  
呼び出し元は証拠を提供しようとしましたが、<see langword="ControlEvidence" /> アクセス許可を持っていません。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または XSLT スタイル シートを含んでいる <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" />xsl:import<c> 要素および </c>xsl:include<c> 要素で参照される任意のスタイル シートを読み込むために使用される </c>。 これが <see langword="null" /> の場合は、外部リソースが解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> がキャッシュされていません。</param>
        <param name="evidence">XSLT スタイル シート内のスクリプト ブロックに対して生成されたアセンブリに設定された <see cref="T:System.Security.Policy.Evidence" />。  
  
これが <see langword="null" /> の場合、スクリプト ブロックは処理されません。また、XSLT の <c>document()</c> 関数はサポートされず、特権拡張機能オブジェクトは許可されません。  
  
呼び出し元には、スクリプト アセンブリの証拠を提供するための <see langword="ControlEvidence" /> アクセス許可が必要です。 信頼度の低い呼び出し元は、このパラメーターを <see langword="null" /> に設定できます。</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" /> に格納されている XSLT スタイル シートを読み込みます。 このメソッドを使用すると、証拠を指定することによって、スタイル シートのアクセス許可を制限できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  

  
 証拠を提供するには、さまざまな方法があります。 次の表は、一般的なユーザーシナリオに対して提供する証拠の種類を示しています。  
  
|シナリオ|提供する証拠の種類|  
|--------------|---------------------------------|  
|XSLT スタイルシートは、自己完結型であるか、信頼できるコードベースから取得されます。|アセンブリからの証拠を使用します。<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;xslt.Load(style sheet, resolver, this.GetType().Assembly.Evidence);</code></pre>|  
|XSLT スタイル シートが外部ソースにある場合。 ソースの出所がわかっており、検証可能な URL があります。|URL を使用して証拠を作成します。<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;Evidence evidence = XmlSecureResolver.CreateEvidenceForUrl(style sheetURL); &#13;&#10;xslt.Load(style sheet,resolver,evidence);</code></pre>|  
|XSLT スタイル シートが外部ソースにある場合。 ソースの出所は不明。|証拠を `null` に設定します。 スクリプト ブロックは処理されません。XSLT `document()` 関数はサポートされません。特権を持つ拡張オブジェクトは許可されません。<br /><br /> さらに、`resolver` パラメーターを `null`に設定することもできます。 これにより、`xsl:import` と `xsl:include` の要素が処理されなくなります。|  
|XSLT スタイル シートが外部ソースにある場合。 ソースの出所が不明であるが、スクリプトのサポートが必要。|呼び出し元の証拠を要求します。 呼び出し元の API は、証拠 (通常は <xref:System.Security.Policy.Evidence> クラス) を提供する手段を提供する必要があります。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">読み込まれたリソースが、有効なスタイル シートではありません。</exception>
        <exception cref="T:System.Security.SecurityException">参照されているスタイル シートには、提供された証拠で許可されていない機能が必要です。  
  
呼び出し元は証拠を提供しようとしましたが、<see langword="ControlEvidence" /> アクセス許可を持っていません。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">読み込むスタイル シートを格納している <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" />xsl:import<c> 要素および </c>xsl:include<c> 要素で参照される任意のスタイル シートを読み込むために使用される </c>。 これが <see langword="null" /> の場合は、外部リソースが解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> がキャッシュされていません。</param>
        <param name="evidence">XSLT スタイル シート内のスクリプト ブロックに対して生成されたアセンブリに設定された <see cref="T:System.Security.Policy.Evidence" />。  
  
これが <see langword="null" /> の場合、スクリプト ブロックは処理されません。また、XSLT の <c>document()</c> 関数はサポートされず、特権拡張機能オブジェクトは許可されません。  
  
呼び出し元には、スクリプト アセンブリの証拠を提供するための <see langword="ControlEvidence" /> アクセス許可が必要です。 信頼度の低い呼び出し元は、このパラメーターを <see langword="null" /> に設定できます。</param>
        <summary><see cref="T:System.Xml.XPath.XPathNavigator" /> に格納されている XSLT スタイル シートを読み込みます。 このメソッドを使用すると、証拠を指定することによって、スタイル シートのアクセス許可を制限できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 スタイルシートは、<xref:System.Xml.XPath.XPathNavigator>の現在位置から読み込まれます。 読み込まれたドキュメントの一部をスタイルシートとして使用するには、スタイルシートの先頭に対応するノードに移動します。 <xref:System.Xml.Xsl.XslTransform.Load%2A> メソッドから制御が戻った後、<xref:System.Xml.XPath.XPathNavigator> はスタイルシートの先頭 ([`xsl:style sheet`] ノード) に配置されます。  
  

  
 証拠を提供するには、さまざまな方法があります。 次の表は、一般的なユーザーシナリオに対して提供する証拠の種類を示しています。  
  
|シナリオ|提供する証拠の種類|  
|--------------|---------------------------------|  
|XSLT スタイルシートは、自己完結型であるか、信頼できるコードベースから取得されます。|アセンブリからの証拠を使用します。<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;xslt.Load(xslNav, resolver, this.GetType().Assembly.Evidence);</code></pre>|  
|XSLT スタイル シートが外部ソースにある場合。 ソースの出所がわかっており、検証可能な URL があります。|URL を使用して証拠を作成します。<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;Evidence evidence = XmlSecureResolver.CreateEvidenceForUrl(style sheetURL); &#13;&#10;xslt.Load(xslNav,resolver,evidence);</code></pre>|  
|XSLT スタイル シートが外部ソースにある場合。 ソースの出所は不明。|証拠を `null` に設定します。 スクリプト ブロックは処理されません。XSLT `document()` 関数はサポートされません。特権を持つ拡張オブジェクトは許可されません。<br /><br /> さらに、`resolver` パラメーターを `null`に設定することもできます。 これにより、`xsl:import` と `xsl:include` の要素が処理されなくなります。|  
|XSLT スタイル シートが外部ソースにある場合。 ソースの出所が不明であるが、スクリプトのサポートが必要。|呼び出し元の証拠を要求します。 呼び出し元の API は、証拠 (通常は `Evidence` クラス) を提供する手段を提供する必要があります。|  
  
   
  
## Examples  
 次の例では、外部ソースのスタイルシートを使用して XSLT 変換を実行します。 スタイルシートは信頼できないソースからのものであるため、`resolver` パラメーターと `evidence` パラメーターは `null`に設定されます。  
 
 [!code-csharp[XslTransform.Load5#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load5/CS/trans_noev.cs#1)]
 [!code-vb[XslTransform.Load5#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load5/VB/trans_noev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">現在のノードは、有効なスタイル シートに準拠していません。</exception>
        <exception cref="T:System.Security.SecurityException">参照されているスタイル シートには、提供された証拠で許可されていない機能が必要です。  
  
呼び出し元は証拠を提供しようとしましたが、<see langword="ControlEvidence" /> アクセス許可を持っていません。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>読み込まれた XSLT スタイル シートを使用して、XML データを変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputfile, string outputfile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputfile As String, outputfile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputfile, System::String ^ outputfile);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string -&gt; unit" Usage="xslTransform.Transform (inputfile, outputfile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputfile" Type="System.String" />
        <Parameter Name="outputfile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputfile">変換するソース ドキュメントの URL。</param>
        <param name="outputfile">出力ファイルの URL。</param>
        <summary>XML データを入力ファイルに変換し、その結果を出力ファイルに出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
> [!NOTE]
>  このメソッドは、バージョン1.1 の .NET Framework では廃止されています。 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> プロパティの設定によって、XSLT `document()` 関数がどのように解決されるかが決まります。 <xref:System.Xml.XmlResolver> オブジェクトを引数の1つとして受け取る <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドを使用することをお勧めします。  
  
   
  
## Examples  
 次の例では、`output.xsl` スタイルシートを使用して `books.xml` ファイルを変換し、結果を `books.html` ファイルに出力します。  
  
 [!code-cpp[XslTransform.Transform3#1](~/samples/snippets/cpp/VS_Snippets_Data/xsltransform.transform3/CPP/trans_snip2.cpp#1)]
 [!code-csharp[XslTransform.Transform3#1](~/samples/snippets/csharp/VS_Snippets_Data/xsltransform.transform3/CS/trans_snip2.cs#1)]
 [!code-vb[XslTransform.Transform3#1](~/samples/snippets/visualbasic/VS_Snippets_Data/xsltransform.transform3/VB/trans_snip2.vb#1)]  
  
 このサンプルでは、次の2つの入力ファイルを使用します。  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform からの出力</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IXPathNavigable, args As XsltArgumentList) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
        <summary>指定した <see cref="T:System.Xml.XPath.IXPathNavigable" /> を使用して <paramref name="args" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlReader" /> に出力します。</summary>
        <returns>変換結果を格納している <see cref="T:System.Xml.XmlReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
> [!NOTE]
>  このメソッドは、互換性のために残されています。 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> プロパティの設定によって、XSLT `document()` 関数がどのように解決されるかが決まります。 <xref:System.Xml.XmlResolver> オブジェクトを引数の1つとして受け取る <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドを使用することをお勧めします。  
  
 `args` は、スタイルシートで定義されている `xsl:param` の要素と一致します。 `xsl:output` 要素は、<xref:System.Xml.XmlReader> への出力時にはサポートされません (`xsl:output` 要素は無視されます)。 詳細について[は、「XslTransform からの出力](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)」を参照してください。  
  
 このメソッドを使用すると、ソースドキュメントの非同期変換を実行できます。  
  
 変換はドキュメント全体に対して行われます。 つまり、ドキュメント ルート ノード以外のノードを指定しても、変換処理では、読み込んだドキュメントのすべてのノードがアクセスされます。 ノードフラグメントを変換するには、ノードフラグメントだけを含む <xref:System.Xml.XmlDocument> を作成し、その <xref:System.Xml.XmlDocument> を <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドに渡す必要があります。  
  
 次の例では、ノードフラグメントに対して変換を実行します。  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 この例では、`library.xml` と `print_root.xsl` ファイルを入力として使用し、次の情報をコンソールに出力します。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform からの出力</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As XPathNavigator, args As XsltArgumentList) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
      </Parameters>
      <Docs>
        <param name="input">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
        <summary>指定した <see cref="T:System.Xml.XPath.XPathNavigator" /> を使用して <paramref name="args" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlReader" /> に出力します。</summary>
        <returns>変換結果を格納している <see cref="T:System.Xml.XmlReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 `args` は、スタイルシートで定義されている `xsl:param` の要素と一致します。 変換の選択は、ドキュメント全体に適用されます。 つまり、現在のノードがドキュメントルートノード以外のノードツリーで設定されている場合、この操作によって、読み込まれたドキュメント内のすべてのノードに変換処理がアクセスするのを防ぐことはできません。 変換が実行されると、<xref:System.Xml.XPath.XPathNavigator> は元の状態のままになります。 これは、<xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドが呼び出された後に、変換プロセスの前にあるノードが現在のノードのままになることを意味します。  
  
 <xref:System.Xml.XmlReader> は読み取り専用の出力を提供するため、`xsl:output` 要素は無視されます。 詳細について[は、「XslTransform からの出力](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)」を参照してください。  
  
 このメソッドを使用すると、ソースドキュメントの非同期変換を実行できます。  
  
> [!NOTE]
>  このメソッドは、互換性のために残されています。 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> プロパティの設定によって、XSLT ドキュメント () 関数がどのように解決されるかが決まります。 <xref:System.Xml.XmlResolver> オブジェクトを引数の1つとして受け取る <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドを使用することをお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputfile, string outputfile, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputfile As String, outputfile As String, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputfile, System::String ^ outputfile, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (inputfile, outputfile, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputfile" Type="System.String" />
        <Parameter Name="outputfile" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="inputfile">変換するソース ドキュメントの URL。</param>
        <param name="outputfile">出力ファイルの URL。</param>
        <param name="resolver">XSLT の <see cref="T:System.Xml.XmlResolver" />document()<c> 関数を解決するために使用する </c>。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> がキャッシュされていません。</param>
        <summary>XML データを入力ファイルに変換し、その結果を出力ファイルに出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
   
  
## Examples  
 次の例では、XSLT 変換を実行し、ファイルに出力します。 既定の資格情報を持つ <xref:System.Xml.XmlUrlResolver> は、外部リソースを解決するために使用されます。 詳細については、「<xref:System.Net.CredentialCache.DefaultCredentials%2A>」を参照してください。  
  
 [!code-cpp[XslTransform.Transform7#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTRansform.Transform7/CPP/trans_snip4.cpp#1)]
 [!code-csharp[XslTransform.Transform7#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTRansform.Transform7/CS/trans_snip4.cs#1)]
 [!code-vb[XslTransform.Transform7#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTRansform.Transform7/VB/trans_snip4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
        <param name="output">出力先のストリーム。</param>
        <summary>指定した <see cref="T:System.Xml.XPath.IXPathNavigable" /> を使用して <paramref name="args" /> の XML データを変換し、その結果を <see cref="T:System.IO.Stream" /> に出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
> [!NOTE]
>  このメソッドは、互換性のために残されています。 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> プロパティの設定によって、XSLT `document()` 関数がどのように解決されるかが決まります。 <xref:System.Xml.XmlResolver> オブジェクトを引数の1つとして受け取る <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドを使用することをお勧めします。  
  
 `args` は、スタイルシートで定義されている `xsl:param` の要素と一致します。  
  
 変換はドキュメント全体に対して行われます。 つまり、ドキュメント ルート ノード以外のノードを指定しても、変換処理では、読み込んだドキュメントのすべてのノードがアクセスされます。 ノードフラグメントを変換するには、ノードフラグメントだけを含む <xref:System.Xml.XmlDocument> を作成し、その <xref:System.Xml.XmlDocument> を <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドに渡す必要があります。  
  
 次の例では、ノードフラグメントに対して変換を実行します。  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 この例では、`library.xml` と `print_root.xsl` ファイルを入力として使用し、次の情報をコンソールに出力します。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform からの出力</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
        <param name="output">出力先の <see cref="T:System.IO.TextWriter" />。</param>
        <summary>指定した <see cref="T:System.Xml.XPath.IXPathNavigable" /> を使用して <paramref name="args" /> の XML データを変換し、その結果を <see cref="T:System.IO.TextWriter" /> に出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
> [!NOTE]
>  このメソッドは、互換性のために残されています。 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> プロパティの設定によって、XSLT `document()` 関数がどのように解決されるかが決まります。 <xref:System.Xml.XmlResolver> オブジェクトを引数の1つとして受け取る <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドを使用することをお勧めします。  
  
 `args` は、スタイルシートで定義されている `xsl:param` の要素と一致します。  
  
 `xsl:output` 要素の encoding 属性は、<xref:System.IO.TextWriter>への出力時にはサポートされません。 サポートされている `xsl:output` 属性の詳細については[、「XslTransform からの出力](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)」を参照してください。  
  
 変換はドキュメント全体に対して行われます。 つまり、ドキュメント ルート ノード以外のノードを指定しても、変換処理では、読み込んだドキュメントのすべてのノードがアクセスされます。 ノードフラグメントを変換するには、ノードフラグメントだけを含む <xref:System.Xml.XmlDocument> を作成し、その <xref:System.Xml.XmlDocument> を <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドに渡す必要があります。  
  
 次の例では、ノードフラグメントに対して変換を実行します。  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 この例では、`library.xml` と `print_root.xsl` ファイルを入力として使用し、次の情報をコンソールに出力します。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform からの出力</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IXPathNavigable, args As XsltArgumentList, resolver As XmlResolver) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlResolver -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
        <param name="resolver">XSLT の <see cref="T:System.Xml.XmlResolver" />document()<c> 関数を解決するために使用する </c>。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
        <summary>指定した <see cref="T:System.Xml.XPath.IXPathNavigable" /> を使用して <paramref name="args" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlReader" /> に出力します。</summary>
        <returns>変換結果を格納している <see cref="T:System.Xml.XmlReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 `args` は、スタイルシートで定義されている `xsl:param` の要素と一致します。 `xsl:output` 要素は、<xref:System.Xml.XmlReader> への出力時にはサポートされません (`xsl:output` 要素は無視されます)。 詳細について[は、「XslTransform からの出力](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)」を参照してください。  
  
 このメソッドを使用すると、ソースドキュメントの非同期変換を実行できます。  
  
 変換はドキュメント全体に対して行われます。 つまり、ドキュメント ルート ノード以外のノードを指定しても、変換処理では、読み込んだドキュメントのすべてのノードがアクセスされます。 ノードフラグメントを変換するには、ノードフラグメントだけを含む <xref:System.Xml.XmlDocument> を作成し、その <xref:System.Xml.XmlDocument> を <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドに渡す必要があります。  
  
 次の例では、ノードフラグメントに対して変換を実行します。  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 この例では、`library.xml` と `print_root.xsl` ファイルを入力として使用し、次の情報をコンソールに出力します。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 次の例では、XML ドキュメントを変換し、結果を `XmlReader`に出力します。 任意の XSLT `document()` 関数の処理には、必要な資格情報を持つ <xref:System.Xml.XmlUrlResolver> が使用されます。  
  
 [!code-cpp[XslTransform.Transform4#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Transform4/CPP/trans_snip3.cpp#1)]
 [!code-csharp[XslTransform.Transform4#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform4/CS/trans_snip3.cs#1)]
 [!code-vb[XslTransform.Transform4#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform4/VB/trans_snip3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform からの出力</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
        <param name="output">出力先の <see cref="T:System.Xml.XmlWriter" />。</param>
        <summary>指定した <see cref="T:System.Xml.XPath.IXPathNavigable" /> を使用して <paramref name="args" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
> [!NOTE]
>  このメソッドは、互換性のために残されています。 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> プロパティの設定によって、XSLT `document()` 関数がどのように解決されるかが決まります。 <xref:System.Xml.XmlResolver> オブジェクトを引数の1つとして受け取る <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドを使用することをお勧めします。  
  
 `args` は、スタイルシートで定義されている `xsl:param` の要素と一致します。 `xsl:output` 要素は、<xref:System.Xml.XmlWriter> への出力時にはサポートされません (`xsl:output` は無視されます)。 詳細について[は、「XslTransform からの出力](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)」を参照してください。  
  
 変換はドキュメント全体に対して行われます。 つまり、ドキュメント ルート ノード以外のノードを指定しても、変換処理では、読み込んだドキュメントのすべてのノードがアクセスされます。 ノードフラグメントを変換するには、ノードフラグメントだけを含む <xref:System.Xml.XmlDocument> を作成し、その <xref:System.Xml.XmlDocument> を <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドに渡す必要があります。  
  
 次の例では、ノードフラグメントに対して変換を実行します。  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 この例では、`library.xml` と `print_root.xsl` ファイルを入力として使用し、次の情報をコンソールに出力します。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />  
  <template match="/">  
  Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform からの出力</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
        <param name="output">出力先のストリーム。</param>
        <summary>指定した <see cref="T:System.Xml.XPath.XPathNavigator" /> を使用して <paramref name="args" /> の XML データを変換し、その結果を <see cref="T:System.IO.Stream" /> に出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 `args` は、スタイルシートで定義されている `xsl:param` の要素と一致します。 変換の選択は、ドキュメント全体に適用されます。 つまり、現在のノードがドキュメントルートノード以外のノードツリーで設定されている場合、この操作によって、読み込まれたドキュメント内のすべてのノードに変換処理がアクセスするのを防ぐことはできません。 変換が実行されると、<xref:System.Xml.XPath.XPathNavigator> は元の状態のままになります。 これは、<xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドが呼び出された後に、変換プロセスの前にあるノードが現在のノードのままになることを意味します。  
  
 サポートされている `xsl:output` 属性の詳細については[、「XslTransform からの出力](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)」を参照してください。  
  
> [!NOTE]
>  このメソッドは、互換性のために残されています。 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> プロパティの設定によって、XSLT `document()` 関数がどのように解決されるかが決まります。 <xref:System.Xml.XmlResolver> オブジェクトを引数の1つとして受け取る <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドを使用することをお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
        <param name="output">出力先の <see cref="T:System.IO.TextWriter" />。</param>
        <summary>指定した <see cref="T:System.Xml.XPath.XPathNavigator" /> を使用して <paramref name="args" /> の XML データを変換し、その結果を <see cref="T:System.IO.TextWriter" /> に出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 `args` は、スタイルシートで定義されている `xsl:param` の要素と一致します。 変換の選択は、ドキュメント全体に適用されます。 つまり、現在のノードがドキュメントルートノード以外のノードツリーで設定されている場合、この操作によって、読み込まれたドキュメント内のすべてのノードに変換処理がアクセスするのを防ぐことはできません。 変換が実行されると、<xref:System.Xml.XPath.XPathNavigator> は元の状態のままになります。 これは、<xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドが呼び出された後に、変換プロセスの前にあるノードが現在のノードのままになることを意味します。  
  
 `xsl:output` 要素の encoding 属性は、<xref:System.IO.TextWriter>への出力時にはサポートされません。 サポートされている `xsl:output` 属性の詳細については[、「XslTransform からの出力](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)」を参照してください。  
  
> [!NOTE]
>  このメソッドは、互換性のために残されています。 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> プロパティの設定によって、XSLT `document()` 関数がどのように解決されるかが決まります。 <xref:System.Xml.XmlResolver> オブジェクトを引数の1つとして受け取る <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドを使用することをお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As XPathNavigator, args As XsltArgumentList, resolver As XmlResolver) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlResolver -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
        <param name="resolver">XSLT の <see cref="T:System.Xml.XmlResolver" />document()<c> 関数を解決するために使用する </c>。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
        <summary>指定した <see cref="T:System.Xml.XPath.XPathNavigator" /> を使用して <paramref name="args" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlReader" /> に出力します。</summary>
        <returns>変換結果を格納している <see cref="T:System.Xml.XmlReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 `args` は、スタイルシートで定義されている `xsl:param` の要素と一致します。 変換の選択は、ドキュメント全体に適用されます。 つまり、現在のノードがドキュメントルートノード以外のノードツリーで設定されている場合、この操作によって、読み込まれたドキュメント内のすべてのノードに変換処理がアクセスするのを防ぐことはできません。 変換が実行されると、<xref:System.Xml.XPath.XPathNavigator> は元の状態のままになります。 これは、<xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドが呼び出された後に、変換プロセスの前にあるノードが現在のノードのままになることを意味します。  
  
 <xref:System.Xml.XmlReader> は読み取り専用の出力を提供するため、`xsl:output` 要素は無視されます。 詳細について[は、「XslTransform からの出力](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)」を参照してください。  
  
 このメソッドを使用すると、ソースドキュメントの非同期変換を実行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
        <param name="output">出力先の <see cref="T:System.Xml.XmlWriter" />。</param>
        <summary>指定した args を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 `args` は、スタイルシートで定義されている `xsl:param` の要素と一致します。 変換の選択は、ドキュメント全体に適用されます。 つまり、現在のノードがドキュメントルートノード以外のノードツリーで設定されている場合、この操作によって、読み込まれたドキュメント内のすべてのノードに変換処理がアクセスするのを防ぐことはできません。 変換が実行されると、<xref:System.Xml.XPath.XPathNavigator> は元の状態のままになります。 これは、<xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドが呼び出された後に、変換プロセスの前にあるノードが現在のノードのままになることを意味します。  
  
 `xsl:output` 要素は、<xref:System.Xml.XmlWriter> への出力時にはサポートされません (`xsl:output` は無視されます)。 詳細について[は、「XslTransform からの出力](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)」を参照してください。  
  
> [!NOTE]
>  このメソッドは、互換性のために残されています。 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> プロパティの設定によって、XSLT `document()` 関数がどのように解決されるかが決まります。 <xref:System.Xml.XmlResolver> オブジェクトを引数の1つとして受け取る <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドを使用することをお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As Stream, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
        <param name="output">出力先のストリーム。</param>
        <param name="resolver">XSLT の <see cref="T:System.Xml.XmlResolver" />document()<c> 関数を解決するために使用する </c>。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> がキャッシュされていません。</param>
        <summary>指定した <see cref="T:System.Xml.XPath.IXPathNavigable" /> を使用して <paramref name="args" /> の XML データを変換し、その結果を <see cref="T:System.IO.Stream" /> に出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 `args` は、スタイルシートで定義されている `xsl:param` の要素と一致します。  
  
 変換はドキュメント全体に対して行われます。 つまり、ドキュメント ルート ノード以外のノードを指定しても、変換処理では、読み込んだドキュメントのすべてのノードがアクセスされます。 ノードフラグメントを変換するには、ノードフラグメントだけを含む <xref:System.Xml.XmlDocument> を作成し、その <xref:System.Xml.XmlDocument> を <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドに渡す必要があります。  
  
 次の例では、ノードフラグメントに対して変換を実行します。  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 この例では、`library.xml` と `print_root.xsl` ファイルを入力として使用し、次の情報をコンソールに出力します。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 次の例では、ASP.NET ページ内で変換を実行します。  
  
 [!code-aspx-csharp[XslTransform.Transform5#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform5/CS/transcs.aspx#1)]
 [!code-aspx-vb[XslTransform.Transform5#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform5/VB/transvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform からの出力</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As TextWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
        <param name="output">出力先の <see cref="T:System.IO.TextWriter" />。</param>
        <param name="resolver">XSLT の <see cref="T:System.Xml.XmlResolver" />document()<c> 関数を解決するために使用する </c>。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
        <summary>指定した <see cref="T:System.Xml.XPath.IXPathNavigable" /> を使用して <paramref name="args" /> の XML データを変換し、その結果を <see cref="T:System.IO.TextWriter" /> に出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 `args` は、スタイルシートで定義されている `xsl:param` の要素と一致します。  
  
 `xsl:output` 要素の encoding 属性は、<xref:System.IO.TextWriter>への出力時にはサポートされません。 サポートされている `xsl:output` 属性の詳細については[、「XslTransform からの出力](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)」を参照してください。  
  
 変換はドキュメント全体に対して行われます。 つまり、ドキュメント ルート ノード以外のノードを指定しても、変換処理では、読み込んだドキュメントのすべてのノードがアクセスされます。 ノードフラグメントを変換するには、ノードフラグメントだけを含む <xref:System.Xml.XmlDocument> を作成し、その <xref:System.Xml.XmlDocument> を <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドに渡す必要があります。  
  
 次の例では、ノードフラグメントに対して変換を実行します。  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 この例では、`library.xml` と `print_root.xsl` ファイルを入力として使用し、次の情報をコンソールに出力します。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 次の例では、XML ファイルを変換し、HTML 文字列を出力します。 <xref:System.IO.StringReader> クラスと <xref:System.IO.StringWriter> クラスを使用して、文字列の読み取りと書き込みを行います。  
  
 [!code-csharp[XslTransform.Transform6#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform6/CS/transstring.cs#1)]
 [!code-vb[XslTransform.Transform6#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform6/VB/transstring.vb#1)]  
  
 この例は、`books.xml` ファイルを入力として使用します。  
  
 [!code-xml[XslTransform.Transform6#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Transform6/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform からの出力</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As XmlWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
        <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
        <param name="output">出力先の <see cref="T:System.Xml.XmlWriter" />。</param>
        <param name="resolver">XSLT の <see cref="T:System.Xml.XmlResolver" />document()<c> 関数を解決するために使用する </c>。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
        <summary>指定した <see cref="T:System.Xml.XPath.IXPathNavigable" /> を使用して <paramref name="args" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 `args` は、スタイルシートで定義されている `xsl:param` の要素と一致します。 `xsl:output` 要素は、<xref:System.Xml.XmlWriter> への出力時にはサポートされません (`xsl:output` は無視されます)。 詳細について[は、「XslTransform からの出力](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)」を参照してください。  
  
 変換はドキュメント全体に対して行われます。 つまり、ドキュメント ルート ノード以外のノードを指定しても、変換処理では、読み込んだドキュメントのすべてのノードがアクセスされます。 ノードフラグメントを変換するには、ノードフラグメントだけを含む <xref:System.Xml.XmlDocument> を作成し、その <xref:System.Xml.XmlDocument> を <xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドに渡す必要があります。  
  
 次の例では、ノードフラグメントに対して変換を実行します。  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 この例では、`library.xml` と `print_root.xsl` ファイルを入力として使用し、次の情報をコンソールに出力します。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />  
  <template match="/">  
  Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 次の例では、XML ドキュメントを HTML ドキュメントに変換します。 テーブル内の各書籍の ISBN、タイトル、価格が表示されます。  
  
 [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/VB/source.vb#1)]  
  
 このサンプルは、次の 2 つの入力ファイルを使用します。  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform からの出力</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As Stream, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.Stream * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
        <param name="output">出力先のストリーム。</param>
        <param name="resolver">XSLT の <see cref="T:System.Xml.XmlResolver" />document()<c> 関数を解決するために使用する </c>。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
        <summary>指定した <see cref="T:System.Xml.XPath.XPathNavigator" /> を使用して <paramref name="args" /> の XML データを変換し、その結果を <see cref="T:System.IO.Stream" /> に出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 `args` は、スタイルシートで定義されている `xsl:param` の要素と一致します。 変換の選択は、ドキュメント全体に適用されます。 つまり、現在のノードがドキュメントルートノード以外のノードツリーで設定されている場合、この操作によって、読み込まれたドキュメント内のすべてのノードに変換処理がアクセスするのを防ぐことはできません。 変換が実行されると、<xref:System.Xml.XPath.XPathNavigator> は元の状態のままになります。 これは、<xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドが呼び出された後に、変換プロセスの前にあるノードが現在のノードのままになることを意味します。  
  
 サポートされている `xsl:output` 属性の詳細については[、「XslTransform からの出力](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、顧客テーブルを <xref:System.Xml.XmlDataDocument> に読み込み、XSLT 変換を実行して、顧客データを HTML テーブルにプルします。 この例では、Microsoft SQL Server 2000 Northwind データベースを使用します。  
  
 [!code-csharp[XmlDataDocument.CreateNavigator#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlDataDocument.CreateNavigator/CS/dataset_trans.cs#1)]
 [!code-vb[XmlDataDocument.CreateNavigator#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlDataDocument.CreateNavigator/VB/dataset_trans.vb#1)]  
  
 この例は、`customers.xsl` ファイルを入力として使用します。  
  
 [!code-xml[XmlDataDocument.CreateNavigator#2](~/samples/snippets/xml/VS_Snippets_Data/XmlDataDocument.CreateNavigator/XML/customers.xsl#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As TextWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
        <param name="output">出力先の <see cref="T:System.IO.TextWriter" />。</param>
        <param name="resolver">XSLT の <see cref="T:System.Xml.XmlResolver" />document()<c> 関数を解決するために使用する </c>。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
        <summary>指定した <see cref="T:System.Xml.XPath.XPathNavigator" /> を使用して <paramref name="args" /> の XML データを変換し、その結果を <see cref="T:System.IO.TextWriter" /> に出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 `args` は、スタイルシートで定義されている `xsl:param` の要素と一致します。 変換の選択は、ドキュメント全体に適用されます。 つまり、現在のノードがドキュメントルートノード以外のノードツリーで設定されている場合、この操作によって、読み込まれたドキュメント内のすべてのノードに変換処理がアクセスするのを防ぐことはできません。 変換が実行されると、<xref:System.Xml.XPath.XPathNavigator> は元の状態のままになります。 これは、<xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドが呼び出された後に、変換プロセスの前にあるノードが現在のノードのままになることを意味します。  
  
 `xsl:output` 要素の encoding 属性は、<xref:System.IO.TextWriter>への出力時にはサポートされません。 サポートされている `xsl:output` 属性の詳細については[、「XslTransform からの出力](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As XmlWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
        <param name="output">出力先の <see cref="T:System.Xml.XmlWriter" />。</param>
        <param name="resolver">XSLT の <see cref="T:System.Xml.XmlResolver" />document()<c> 関数を解決するために使用する </c>。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
        <summary>指定した args を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 <xref:System.Xml.Xsl.XslTransform> では、XSLT 1.0 構文がサポートされています。 XSLT スタイルシートには `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`名前空間の宣言が含まれている必要があります。  
  
 `args` は、スタイルシートで定義されている `xsl:param` の要素と一致します。 変換の選択は、ドキュメント全体に適用されます。 つまり、現在のノードがドキュメントルートノード以外のノードツリーで設定されている場合、この操作によって、読み込まれたドキュメント内のすべてのノードに変換処理がアクセスするのを防ぐことはできません。 変換が実行されると、<xref:System.Xml.XPath.XPathNavigator> は元の状態のままになります。 これは、<xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドが呼び出された後に、変換プロセスの前にあるノードが現在のノードのままになることを意味します。  
  
 `xsl:output` 要素は、<xref:System.Xml.XmlWriter> への出力時にはサポートされません (`xsl:output` は無視されます)。 詳細について[は、「XslTransform からの出力](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、XSLT 変換を実行する前に、XML ドキュメントを読み込んで編集します。  
  
 [!code-cpp[XslTransform.Transform2#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Transform2/CPP/trans_snip.cpp#1)]
 [!code-csharp[XslTransform.Transform2#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform2/CS/trans_snip.cs#1)]
 [!code-vb[XslTransform.Transform2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform2/VB/trans_snip.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform クラスの随意動作の実装</related>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslTransform.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Xsl.XslTransform.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlResolver" /> メソッドの呼び出し時に外部リソースの解決に使用する <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> を設定します。</summary>
        <value>変換中に使用する <see cref="T:System.Xml.XmlResolver" />。 <see langword="null" />に設定した場合、XSLT<c>ドキュメント ()</c>関数は解決されません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform> クラスは、.NET Framework バージョン2.0 では廃止されています。 <xref:System.Xml.Xsl.XslCompiledTransform> クラスは、新しい XSLT プロセッサです。 詳細については、「 [XslCompiledTransform クラスの使用](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)」および「 [XslTransform クラスからの移行](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)」を参照してください。  
  
 .NET Framework のバージョン1.1 では、アプリケーションの信頼レベルによって既定の動作が決定されます。  
  
 ユーザー資格情報を持たない既定の <xref:System.Xml.XmlUrlResolver> を `Fully trusted code:`、`document()` 関数を解決するために使用されます。 外部リソースにアクセスするために認証が必要な場合は、このプロパティを使用して、必要な資格情報を持つ <xref:System.Xml.XmlResolver> を指定します。  
  
 プロパティが `null`に設定されている `Semi-trusted code:`、`document()` 関数が解決されないことを意味します。 <xref:System.Xml.XmlResolver>を指定するには完全信頼が必要であるため、このプロパティも設定できません。  
  
 このリゾルバーは、XSLT `document()` 関数が呼び出されたときに使用されます。 スタイルシートで参照されている要素の `xsl:import` および `xsl:include` の解決には使用されません。 スタイルシートで参照される `xsl:import` および `xsl:include` 要素の解決に使用する <xref:System.Xml.XmlResolver> を指定するには、引数の1つとして <xref:System.Xml.XmlResolver> を受け取る <xref:System.Xml.Xsl.XslTransform.Load%2A> オーバーロードを使用します。  
  
> [!NOTE]
>  このプロパティは、バージョン1.1 の .NET Framework では廃止されています。 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法を使用して <xref:System.Xml.XmlResolver> を指定することをお勧めします。 この場合、<xref:System.Xml.Xsl.XslTransform.Transform%2A> メソッドの完了後に <xref:System.Xml.XmlResolver> はキャッシュされません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
  </Members>
</Type>
