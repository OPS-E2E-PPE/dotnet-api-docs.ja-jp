<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e7375086bc62b8b06936cdb71b2517188381adcf" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83953242" /></Metadata><TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthorizationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="3acfa-101">クレーム承認マネージャーの基本実装を定義します。</span><span class="sxs-lookup"><span data-stu-id="3acfa-101">Defines the base implementation for a claims authorization manager.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3acfa-102"><xref:System.Security.Claims.ClaimsAuthorizationManager> クラスは、要求承認マネージャーの基本実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="3acfa-102">The <xref:System.Security.Claims.ClaimsAuthorizationManager> class provides the base implementation for a claims authorization manager.</span></span> <span data-ttu-id="3acfa-103">要求承認マネージャーは、次の2つのシナリオで使用できます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-103">A claims authorization manager can be used in the following two scenarios:</span></span>  
  
-   <span data-ttu-id="3acfa-104">Web ベースのアプリケーションとサービスでは、要求承認マネージャーを処理パイプラインに追加して、要求されたリソースを実際に実装するアプリケーションコードが呼び出される前に、入力方向の要求の値に基づいてリソースへのアクセスを承認できる機能拡張ポイントを提供できます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-104">In web-based applications and services, a claims authorization manager  can be added to the processing pipeline to provide an extensibility point from which you can authorize access to a resource according to the value of incoming claims before the application code that actually implements the requested resource is called.</span></span>  
  
-   <span data-ttu-id="3acfa-105"><xref:System.IdentityModel.Services.ClaimsPrincipalPermission> クラスまたは <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> クラスを使用して、コードで命令型または宣言型のアクセスチェックを実行すると、アプリケーション用に構成されている要求承認マネージャーがシステムによって呼び出され、チェックが実行されます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-105">When you use the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> class or the <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> class to perform either imperative or declarative claims-based access checks in your code, the claims authorization manager that is configured for your application is called by the system to perform the check.</span></span> <span data-ttu-id="3acfa-106">要求ベースのアクセスチェックは、web ベースのアプリケーションとデスクトップアプリケーションの両方で実行できます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-106">Claims-based access checks can be performed in both web-based applications and desktop applications.</span></span>  
  
 <span data-ttu-id="3acfa-107"><xref:System.Security.Claims.ClaimsAuthorizationManager> クラスによって提供される既定の実装は、提示された各要求のアクセスを承認します。ただし、このクラスから派生させ、<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> メソッドをオーバーライドして、独自の承認ロジックを提供できます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-107">The default implementation provided by the <xref:System.Security.Claims.ClaimsAuthorizationManager> class authorizes access for each claim presented; however, you can derive from this class and override the <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> method to provide your own authorization logic.</span></span>  
  
 <span data-ttu-id="3acfa-108">要求承認マネージャーの使用は任意です。</span><span class="sxs-lookup"><span data-stu-id="3acfa-108">The use of a claims authorization manager is optional.</span></span> <span data-ttu-id="3acfa-109"><xref:System.IdentityModel.Configuration.IdentityConfiguration> クラスを使用してプログラムで要求承認マネージャーを使用するようにアプリケーションを構成したり、 [&lt;claimsAuthorizationManager&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager)要素を指定することによって、アプリケーション構成ファイル内の&lt;のユーザー[構成&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration)要素の子要素である、宣言によって要求承認マネージャーを使用するように構成することができます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-109">You can configure your application to use a claims authorization manager either programmatically by using the <xref:System.IdentityModel.Configuration.IdentityConfiguration> class or declaratively, by specifying the [&lt;claimsAuthorizationManager&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager) element, which is a child element of the [&lt;identityConfiguration&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration) element in your application configuration file.</span></span> <span data-ttu-id="3acfa-110">アプリケーションがインターネットインフォメーションサービス (IIS) でホストされている web サイトまたは web アプリケーションの場合は、ASP.NET HTTP Modules コレクションにも <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> を追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3acfa-110">If your application is a web site or a web application hosted in Internet Information Services (IIS), you must also add the <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> in the ASP.NET HTTP Modules collection.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3acfa-111"><xref:System.IdentityModel.Services.ClaimsPrincipalPermission> クラスまたは <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> クラスを使用する場合、アクセスチェックを実行するために使用される要求承認マネージャーは、<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> プロパティの id 構成で指定されているものです。</span><span class="sxs-lookup"><span data-stu-id="3acfa-111">When you use the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> class or the <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> class, the claims authorization manager that is used to perform the access check is the one that is specified in the identity configuration under the <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="3acfa-112">構成ファイルでは、これは既定の `<federationConfiguration>` 要素から参照される `<identityConfiguration>` セクションです。</span><span class="sxs-lookup"><span data-stu-id="3acfa-112">In a configuration file, it is the `<identityConfiguration>` section that is referenced from the default `<federationConfiguration>` element.</span></span> <span data-ttu-id="3acfa-113">これは、Windows Communication Foundation (WCF) サービスとデスクトップアプリケーションにも当てはまります。</span><span class="sxs-lookup"><span data-stu-id="3acfa-113">This is true even for Windows Communication Foundation (WCF) services and desktop applications.</span></span>  
  
 <span data-ttu-id="3acfa-114"><xref:System.Security.Claims.ClaimsAuthorizationManager> の基本クラスは、追加の構成を行いません。ただし、派生クラスの <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> をオーバーライドして、`<claimsAuthorizationElement>`の子要素から要求承認マネージャーを初期化することができます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-114">The <xref:System.Security.Claims.ClaimsAuthorizationManager> base class does not take any additional configuration; however, you can override the <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> in derived classes to provide initialization of your claims authorization manager from child elements of the `<claimsAuthorizationElement>`.</span></span> <span data-ttu-id="3acfa-115">一般的なシナリオでは、これらの子要素を使用して承認ポリシーを指定し、どの要求の種類と値がリソースにアクセスするために必要かを決定します。</span><span class="sxs-lookup"><span data-stu-id="3acfa-115">The typical scenario is to use these child elements to specify authorization policies which determine which claim types and values are required in order to gain access to which resource.</span></span> <span data-ttu-id="3acfa-116">これは難しい要件ではありませんが、実装に適した使用法と構文を自由に定義できます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-116">This is not a hard requirement, though you are free to define whatever usage and syntax make sense for your implementation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3acfa-117"><xref:System.Security.Claims.ClaimsAuthorizationManager> のトピックで使用されているコード例は、`Claims Based Authorization` のサンプルから抜粋したものです。</span><span class="sxs-lookup"><span data-stu-id="3acfa-117">The code examples that are used in the <xref:System.Security.Claims.ClaimsAuthorizationManager> topics are taken from the `Claims Based Authorization` sample.</span></span> <span data-ttu-id="3acfa-118">このサンプルでは、構成で指定されたポリシーに基づいてサブジェクトを承認できるカスタムクレーム承認マネージャーを提供します。</span><span class="sxs-lookup"><span data-stu-id="3acfa-118">This sample provides a custom claims authorization manager that can authorize subjects based on a policy that is specified in configuration.</span></span> <span data-ttu-id="3acfa-119">カスタム要求承認マネージャーは、3つの基本コンポーネントで構成されます。マネージャーを実装する <xref:System.Security.Claims.ClaimsAuthorizationManager> から派生したクラス、リソースとアクションを組み合わせた `ResourceAction` クラス、および構成ファイルで指定されたポリシーを読み取り、コンパイルするポリシーリーダーです。</span><span class="sxs-lookup"><span data-stu-id="3acfa-119">The custom claims authorization manager consists of three basic components: a class derived from <xref:System.Security.Claims.ClaimsAuthorizationManager> that implements the manager, the `ResourceAction` class that pairs a resource and an action, and a policy reader that reads and compiles policy that is specified in the configuration file.</span></span> <span data-ttu-id="3acfa-120">このコンパイル済みポリシーは、リソースへのアクセスを承認するために、要求承認マネージャーがプリンシパルを評価するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-120">This compiled policy can then be used by the claims authorization manager to evaluate a principal in order to authorize access to resources.</span></span> <span data-ttu-id="3acfa-121">簡潔にするために、すべての要素が表示されるわけではありません。</span><span class="sxs-lookup"><span data-stu-id="3acfa-121">Not all elements are shown for the sake of brevity.</span></span> <span data-ttu-id="3acfa-122">このサンプルと、WIF で使用できるその他のサンプルと、それらをダウンロードする場所については、「 [WIF Code Sample Index](/dotnet/framework/security/wif-code-sample-)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3acfa-122">For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](/dotnet/framework/security/wif-code-sample-).</span></span>  
  
 <span data-ttu-id="3acfa-123">次のコードは、カスタムクレーム承認マネージャーの実装を示しています。</span><span class="sxs-lookup"><span data-stu-id="3acfa-123">The following code shows the implementation of the custom claims authorization manager.</span></span> <span data-ttu-id="3acfa-124"><xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> メソッドは、ポリシーリーダーヘルパークラス (表示されません) を使用して構成からポリシーを読み取り、コンパイルします。また、<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> メソッドは、このポリシーに基づいてアクセスを許可または拒否します。</span><span class="sxs-lookup"><span data-stu-id="3acfa-124">The <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> method reads and compiles the policy from configuration by using the policy reader helper class (not shown) and the <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> method grants or denies access based on this policy.</span></span>  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 <span data-ttu-id="3acfa-125">次のコードは、カスタムクレームマネージャーによって使用される `ResourceAction` クラスを示しています。</span><span class="sxs-lookup"><span data-stu-id="3acfa-125">The following code shows the `ResourceAction` class used by the custom claims manager.</span></span>  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 <span data-ttu-id="3acfa-126">次の XML は、IIS 7.5 でホストされる web アプリケーションに対して、上記の要求承認マネージャーを構成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3acfa-126">The following XML shows how to configure the claims authorization manager shown above for a web application hosted in IIS 7.5.</span></span> <span data-ttu-id="3acfa-127">要求承認マネージャーの構成に固有の要素のみが表示されます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-127">Only the elements specific to the configuration of the claims authorization manager are shown.</span></span> <span data-ttu-id="3acfa-128"><xref:System.IdentityModel.Services.ClaimsAuthorizationModule> クラスへの参照は、パイプラインの `<system.Webserver>` 要素の下に追加する必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="3acfa-128">Note that a reference to the <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> class must be added to the pipeline under the `<system.Webserver>` element.</span></span> <span data-ttu-id="3acfa-129">IIS 7 より前のバージョンの IIS でホストされているサイトおよびアプリケーションでは、モジュールをパイプラインの `<system.Web>` 要素の下に追加できます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-129">For sites and applications hosted in versions of IIS prior to IIS 7 the modules can be added to the pipeline under the `<system.Web>` element.</span></span> <span data-ttu-id="3acfa-130">この構成は表示されていますが、コメントアウトされています。</span><span class="sxs-lookup"><span data-stu-id="3acfa-130">This configuration is shown but commented out.</span></span>  
  
 <span data-ttu-id="3acfa-131">要求承認マネージャーによって使用されるポリシーは、 [&lt;claimsAuthorizationManager&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager)要素の下のカスタム `<policy>` 要素によって指定されます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-131">The policy used by the claims authorization manager is specified by custom `<policy>` elements under the [&lt;claimsAuthorizationManager&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager) element.</span></span> <span data-ttu-id="3acfa-132">最初のポリシーでは、指定されたリソースに対して指定されたアクションを実行するために、プリンシパルは指定された要求の1つを所有している必要があります。</span><span class="sxs-lookup"><span data-stu-id="3acfa-132">In the first policy, the principal must possess one of the specified claims in order to perform the specified action on the specified resource.</span></span> <span data-ttu-id="3acfa-133">2番目のポリシーでは、プリンシパルは、指定されたリソースに対して指定されたアクションを実行できるように、両方の要求を持つ必要があります。</span><span class="sxs-lookup"><span data-stu-id="3acfa-133">In the second policy, the principal must possess both claims to be able to perform the specified action on the specified resource.</span></span> <span data-ttu-id="3acfa-134">それ以外の場合、プリンシパルには、所有している要求に関係なく、自動的にアクセス権が付与されます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-134">In all others, the principal is automatically granted access regardless of the claims it possesses.</span></span>  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthorizationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3acfa-135"><see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3acfa-135">Initializes a new instance of the <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool&#xA;override this.CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool" Usage="claimsAuthorizationManager.CheckAccess context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="3acfa-136">認証がチェックされるサブジェクト、リソース、およびアクションを含む認証コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="3acfa-136">The authorization context that contains the subject, resource, and action for which authorization is to be checked.</span></span></param>
        <summary><span data-ttu-id="3acfa-137">派生クラスで実装された場合、指定されたリソースで指定されたアクションを実行するために、指定されたコンテキストでサブジェクトの承認を確認します。</span><span class="sxs-lookup"><span data-stu-id="3acfa-137">When implemented in a derived class, checks authorization for the subject in the specified context to perform the specified action on the specified resource.</span></span></summary>
        <returns><span data-ttu-id="3acfa-138">サブジェクトが指定したリソースで指定されたアクションを実行することが承認されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3acfa-138"><see langword="true" /> if the subject is authorized to perform the specified action on the specified resource; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3acfa-139">基本実装は常に `true`を返します。これはアクセスを承認します。</span><span class="sxs-lookup"><span data-stu-id="3acfa-139">The base implementation always returns `true`, which authorizes access.</span></span> <span data-ttu-id="3acfa-140">派生クラスでこのメソッドをオーバーライドして、RP アプリケーションの要件に基づいてアクセスを承認することができます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-140">You can override this method in a derived class to authorize access based on the requirements of your RP application.</span></span> <span data-ttu-id="3acfa-141">このメソッドが `false`を返す場合、Windows Identity Foundation (WIF) は承認されていないエラーを呼び出し元に返します。それ以外の場合は、実行が RP アプリケーションに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-141">If this method returns `false`, Windows Identity Foundation (WIF) returns an unauthorized error to the caller; otherwise, execution is passed to the RP application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3acfa-142"><xref:System.Security.Claims.ClaimsAuthorizationManager> のトピックで使用されているコード例は、`Claims Based Authorization` のサンプルから抜粋したものです。</span><span class="sxs-lookup"><span data-stu-id="3acfa-142">The code examples that are used in the <xref:System.Security.Claims.ClaimsAuthorizationManager> topics are taken from the `Claims Based Authorization` sample.</span></span> <span data-ttu-id="3acfa-143">このサンプルでは、構成で指定されたポリシーに基づいてサブジェクトを承認できるカスタムクレーム承認マネージャーを提供します。</span><span class="sxs-lookup"><span data-stu-id="3acfa-143">This sample provides a custom claims authorization manager that can authorize subjects based on a policy that is specified in configuration.</span></span> <span data-ttu-id="3acfa-144">カスタム要求承認マネージャーは、3つの基本コンポーネントで構成されます。マネージャーを実装する <xref:System.Security.Claims.ClaimsAuthorizationManager> から派生したクラス、リソースとアクションを組み合わせた `ResourceAction` クラス、および構成ファイルで指定されたポリシーを読み取り、コンパイルするポリシーリーダーです。</span><span class="sxs-lookup"><span data-stu-id="3acfa-144">The custom claims authorization manager consists of three basic components: a class derived from <xref:System.Security.Claims.ClaimsAuthorizationManager> that implements the manager, the `ResourceAction` class that pairs a resource and an action, and a policy reader that reads and compiles policy that is specified in the configuration file.</span></span> <span data-ttu-id="3acfa-145">このコンパイル済みポリシーは、リソースへのアクセスを承認するために、要求承認マネージャーがプリンシパルを評価するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-145">This compiled policy can then be used by the claims authorization manager to evaluate a principal in order to authorize access to resources.</span></span> <span data-ttu-id="3acfa-146">簡潔にするために、すべての要素が表示されるわけではありません。</span><span class="sxs-lookup"><span data-stu-id="3acfa-146">Not all elements are shown for the sake of brevity.</span></span> <span data-ttu-id="3acfa-147">このサンプルと、WIF で使用できるその他のサンプルと、それらをダウンロードする場所については、「 [WIF Code Sample Index](/dotnet/framework/security/wif-code-sample-)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3acfa-147">For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](/dotnet/framework/security/wif-code-sample-).</span></span>  
  
 <span data-ttu-id="3acfa-148">次のコードは、<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> メソッドのオーバーライドを示しています。</span><span class="sxs-lookup"><span data-stu-id="3acfa-148">The following code shows the override of the <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> method.</span></span> <span data-ttu-id="3acfa-149">このメソッドは、構成ファイルから読み取ってコンパイルされたポリシーに基づいてアクセスを許可または拒否します。</span><span class="sxs-lookup"><span data-stu-id="3acfa-149">This method grants or denies access based on a policy read and compiled from the configuration file.</span></span>  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 <span data-ttu-id="3acfa-150">次のコードは、カスタムクレームマネージャーによって使用される `ResourceAction` クラスを示しています。</span><span class="sxs-lookup"><span data-stu-id="3acfa-150">The following code shows the `ResourceAction` class used by the custom claims manager.</span></span>  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 <span data-ttu-id="3acfa-151">要求承認マネージャーによって使用されるポリシーは、 [&lt;claimsAuthorizationManager&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager)要素の下のカスタム `<policy>` 要素によって指定されます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-151">The policy used by the claims authorization manager is specified by custom `<policy>` elements under the [&lt;claimsAuthorizationManager&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager) element.</span></span> <span data-ttu-id="3acfa-152">このポリシーは、<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> メソッドによって読み取られ、コンパイルされます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-152">This policy is read and compiled by the <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> method.</span></span> <span data-ttu-id="3acfa-153">最初のポリシーでは、指定されたリソースに対して指定されたアクションを実行するために、プリンシパルは指定された要求の1つを所有している必要があります。</span><span class="sxs-lookup"><span data-stu-id="3acfa-153">In the first policy, the principal must possess one of the specified claims in order to perform the specified action on the specified resource.</span></span> <span data-ttu-id="3acfa-154">2番目のポリシーでは、プリンシパルは、指定されたリソースに対して指定されたアクションを実行できるように、両方の要求を持つ必要があります。</span><span class="sxs-lookup"><span data-stu-id="3acfa-154">In the second policy, the principal must possess both claims to be able to perform the specified action on the specified resource.</span></span> <span data-ttu-id="3acfa-155">それ以外の場合、プリンシパルには、所有している要求に関係なく、自動的にアクセス権が付与されます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-155">In all others, the principal is automatically granted access regardless of the claims it possesses.</span></span>  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthorizationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist"><span data-ttu-id="3acfa-156">カスタム構成要素。</span><span class="sxs-lookup"><span data-stu-id="3acfa-156">The custom configuration elements.</span></span> <span data-ttu-id="3acfa-157">リスト内の各ノードは <see cref="T:System.Xml.XmlElement" /> 型です。</span><span class="sxs-lookup"><span data-stu-id="3acfa-157">Each node in the list is of type <see cref="T:System.Xml.XmlElement" />.</span></span></param>
        <summary><span data-ttu-id="3acfa-158">派生クラスでオーバーライドされると、XML からカスタム構成を読み込みます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-158">When overridden in a derived class, loads custom configuration from XML.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3acfa-159"><xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> メソッドは、構成インフラストラクチャによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-159">The <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> method is called by the configuration infrastructure.</span></span> <span data-ttu-id="3acfa-160">このメソッドが呼び出されると、`nodelist` には、構成ファイルの[&lt;claimsAuthorizationManager&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager)要素の最上位レベルの子要素が含まれます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-160">When this method is called, the `nodelist` will contain the top-level child elements of the [&lt;claimsAuthorizationManager&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager) element from the configuration file.</span></span> <span data-ttu-id="3acfa-161">これらの各要素には、派生クラスに対して定義した構成スキーマに応じて、属性または子要素が含まれている場合があります。</span><span class="sxs-lookup"><span data-stu-id="3acfa-161">Each of these elements may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.</span></span> <span data-ttu-id="3acfa-162">構成ファイルの `<claimsAuthorizationManager>` 要素の下に子要素が表示されない場合、このメソッドは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="3acfa-162">If no child elements appear under the `<claimsAuthorizationManager>` element in the configuration file, this method is not called.</span></span>  
  
 <span data-ttu-id="3acfa-163">既定の実装では、<xref:System.NotImplementedException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-163">The default implementation throws a <xref:System.NotImplementedException>.</span></span> <span data-ttu-id="3acfa-164">派生クラスでこのメソッドをオーバーライドして、構成ファイルから要求承認マネージャーを初期化できるようにします。</span><span class="sxs-lookup"><span data-stu-id="3acfa-164">Override this method in your derived class to enable initialization of your claims authorization manager from a configuration file.</span></span> <span data-ttu-id="3acfa-165">通常、構成要素は承認ポリシーを表すために使用されます。ただし、要素を定義して、アプリケーションの要件に基づいて意味のある方法で使用することができます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-165">Typically, the configuration elements are used to express an authorization policy; however, you can define elements and use them in any way that makes sense based on the requirements of your application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3acfa-166"><xref:System.Security.Claims.ClaimsAuthorizationManager> のトピックで使用されているコード例は、`Claims Based Authorization` のサンプルから抜粋したものです。</span><span class="sxs-lookup"><span data-stu-id="3acfa-166">The code examples that are used in the <xref:System.Security.Claims.ClaimsAuthorizationManager> topics are taken from the `Claims Based Authorization` sample.</span></span> <span data-ttu-id="3acfa-167">このサンプルでは、構成で指定されたポリシーに基づいてサブジェクトを承認できるカスタムクレーム承認マネージャーを提供します。</span><span class="sxs-lookup"><span data-stu-id="3acfa-167">This sample provides a custom claims authorization manager that can authorize subjects based on a policy that is specified in configuration.</span></span> <span data-ttu-id="3acfa-168">カスタム要求承認マネージャーは、3つの基本コンポーネントで構成されます。マネージャーを実装する <xref:System.Security.Claims.ClaimsAuthorizationManager> から派生したクラス、リソースとアクションを組み合わせた `ResourceAction` クラス、および構成ファイルで指定されたポリシーを読み取り、コンパイルするポリシーリーダーです。</span><span class="sxs-lookup"><span data-stu-id="3acfa-168">The custom claims authorization manager consists of three basic components: a class derived from <xref:System.Security.Claims.ClaimsAuthorizationManager> that implements the manager, the `ResourceAction` class that pairs a resource and an action, and a policy reader that reads and compiles policy that is specified in the configuration file.</span></span> <span data-ttu-id="3acfa-169">このコンパイル済みポリシーは、リソースへのアクセスを承認するために、要求承認マネージャーがプリンシパルを評価するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-169">This compiled policy can then be used by the claims authorization manager to evaluate a principal in order to authorize access to resources.</span></span> <span data-ttu-id="3acfa-170">簡潔にするために、すべての要素が表示されるわけではありません。</span><span class="sxs-lookup"><span data-stu-id="3acfa-170">Not all elements are shown for the sake of brevity.</span></span> <span data-ttu-id="3acfa-171">このサンプルと、WIF で使用できるその他のサンプルと、それらをダウンロードする場所については、「 [WIF Code Sample Index](/dotnet/framework/security/wif-code-sample-)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3acfa-171">For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](/dotnet/framework/security/wif-code-sample-).</span></span>  
  
 <span data-ttu-id="3acfa-172">次のコードは、<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> メソッドのオーバーライドを示しています。</span><span class="sxs-lookup"><span data-stu-id="3acfa-172">The following code shows the override of the <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> method.</span></span> <span data-ttu-id="3acfa-173">このメソッドは、ヘルパーポリシーリーダークラス (非表示) を使用して、構成ファイルで指定された承認ポリシーを読み取り、コンパイルします。</span><span class="sxs-lookup"><span data-stu-id="3acfa-173">This method uses a helper policy reader class (not shown) to read and compile authorization policies specified in the configuration file.</span></span> <span data-ttu-id="3acfa-174">ポリシーはディクショナリに追加され、対象となるリソースおよびアクションから作成された `ResourceAction` キーオブジェクトによってアクセスされます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-174">Policies are added to a dictionary and are accessed by a `ResourceAction` key object that is created from the resource and action for which they are intended.</span></span>  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 <span data-ttu-id="3acfa-175">次のコードは、カスタムクレームマネージャーによって使用される `ResourceAction` クラスを示しています。</span><span class="sxs-lookup"><span data-stu-id="3acfa-175">The following code shows the `ResourceAction` class used by the custom claims manager.</span></span>  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 <span data-ttu-id="3acfa-176">要求承認マネージャーによって使用されるポリシーは、 [&lt;claimsAuthorizationManager&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager)要素の下のカスタム `<policy>` 要素によって指定されます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-176">The policy used by the claims authorization manager is specified by custom `<policy>` elements under the [&lt;claimsAuthorizationManager&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager) element.</span></span> <span data-ttu-id="3acfa-177">このポリシーは、<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> メソッドによって読み取られ、コンパイルされます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-177">This policy is read and compiled by the <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> method.</span></span> <span data-ttu-id="3acfa-178">最初のポリシーでは、指定されたリソースに対して指定されたアクションを実行するために、プリンシパルは指定された要求の1つを所有している必要があります。</span><span class="sxs-lookup"><span data-stu-id="3acfa-178">In the first policy, the principal must possess one of the specified claims in order to perform the specified action on the specified resource.</span></span> <span data-ttu-id="3acfa-179">2番目のポリシーでは、プリンシパルは、指定されたリソースに対して指定されたアクションを実行できるように、両方の要求を持つ必要があります。</span><span class="sxs-lookup"><span data-stu-id="3acfa-179">In the second policy, the principal must possess both claims to be able to perform the specified action on the specified resource.</span></span> <span data-ttu-id="3acfa-180">それ以外の場合、プリンシパルには、所有している要求に関係なく、自動的にアクセス権が付与されます。</span><span class="sxs-lookup"><span data-stu-id="3acfa-180">In all others, the principal is automatically granted access regardless of the claims it possesses.</span></span>  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
