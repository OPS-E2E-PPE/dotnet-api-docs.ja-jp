<Type Name="Block" FullName="System.Windows.Documents.Block">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b2a0aa227839a59947f31770b4cc0364ed082d76" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82472182" /></Metadata><TypeSignature Language="C#" Value="public abstract class Block : System.Windows.Documents.TextElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Block extends System.Windows.Documents.TextElement" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.Block" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Block&#xA;Inherits TextElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class Block abstract : System::Windows::Documents::TextElement" />
  <TypeSignature Language="F#" Value="type Block = class&#xA;    inherit TextElement" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Documents.TextElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>すべてのブロック レベルのフロー コンテンツ要素のベースを提供する抽象クラス。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.Block> クラス (<xref:System.Windows.Documents.Section>など) を継承する要素は、共通の親の下に要素をグループ化したり、共通の属性をグループに適用したりするために使用できます。 概念的には、これは [!INCLUDE[TLA#tla_html](~/includes/tlasharptla-html-md.md)]で \<DIV > タグを使用する方法と似ています。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Documents.Run" />
    <altmember cref="T:System.Windows.Documents.Span" />
    <altmember cref="T:System.Windows.Documents.InlineUIContainer" />
    <altmember cref="T:System.Windows.Documents.Floater" />
    <altmember cref="T:System.Windows.Documents.Figure" />
    <altmember cref="T:System.Windows.Documents.LineBreak" />
    <altmember cref="T:System.Windows.Documents.FlowDocument" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Block ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.Block.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Block();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>派生クラスによって呼び出されるときに <see cref="T:System.Windows.Documents.Block" /> 基本クラスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderBrush">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush BorderBrush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush BorderBrush" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.Block.BorderBrush" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderBrush As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ BorderBrush { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BorderBrush : System.Windows.Media.Brush with get, set" Usage="System.Windows.Documents.Block.BorderBrush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要素の境界線を描画するときに使用する <see cref="T:System.Windows.Media.Brush" /> を取得または設定します。</summary>
        <value>要素の境界線に適用するために使用するブラシ。 既定では、 <see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用できる定義済みのブラシの色を示す見本の表については、「<xref:System.Windows.Media.Brushes>」を参照してください。  
  
<a name="dependencyPropertyInfo_BorderBrush"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子フィールド|<xref:System.Windows.Documents.Block.BorderBrushProperty>|  
|メタデータプロパティが `true` に設定される|<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>|  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Documents.Block> 要素 (<xref:System.Windows.Documents.Paragraph>) の <xref:System.Windows.Documents.Block.BorderBrush%2A> 属性を設定する方法を示しています。  
  
 [!code-xaml[BlockSnippets#_Block_BordersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_bordersxaml)]  
  
 次の図は、前の例がどのようにレンダリングされるかを示しています。  
  
 ![スクリーンショット: ブロックの&#47;周囲に青、4インチの境界線](~/add/media/block-borders.png "スクリーンショット: 青、ブロックの周囲の 1/4 インチ境界線")  
  
 次の例は、<xref:System.Windows.Documents.Block.BorderBrush%2A> プロパティをプログラムで設定する方法を示しています。  
  
 [!code-csharp[BlockSnippets#_Block_Borders](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_borders)]
 [!code-vb[BlockSnippets#_Block_Borders](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_borders)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.Block.BorderThickness" />
      </Docs>
    </Member>
    <Member MemberName="BorderBrushProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BorderBrushProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BorderBrushProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.Block.BorderBrushProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BorderBrushProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BorderBrushProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BorderBrushProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.Block.BorderBrushProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Documents.Block.BorderBrush" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderThickness">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness BorderThickness { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness BorderThickness" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.Block.BorderThickness" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderThickness As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness BorderThickness { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberSignature Language="F#" Value="member this.BorderThickness : System.Windows.Thickness with get, set" Usage="System.Windows.Documents.Block.BorderThickness" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要素の境界線の太さを取得または設定します。</summary>
        <value>適用する境界線の量を指定する <see cref="T:System.Windows.Thickness" /> 構造体。デバイス非依存のピクセル単位で指定します。 既定値は 0 (0.0) の均一の太さです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_BorderThickness"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object BorderThickness="uniformThickness"/>  
- or -  
<object BorderThickness="independentThickness"/>  
- or -  
<object BorderThickness="qualifiedUniformThickness"/>  
- or -  
<object BorderThickness="qualifiedIndependentThickness"/>  
```  
  
<a name="xamlValues_BorderThickness"></a>   
## <a name="xaml-values"></a>XAML の値  
 *uniformThickness*  
 4つのすべての太さ寸法に一様に適用される単一 <xref:System.Double> 値の文字列表現。  たとえば、`"10"` の値は `"10,10,10,10"`の値に相当します。  非修飾値は、デバイス非依存のピクセル単位で測定されます。 文字列には、小数点を明示的に含める必要があります。  
  
 *independentThickness*  
 4つの順序付けられた <xref:System.Double> 値の文字列形式。左、上、右、下の独立した太さの寸法に対応します。  4つの値はコンマで区切る必要があります。スペースは使用できません。  たとえば、"5, 10, 15, 20" を使用すると、コンテンツの左側に5ピクセルの境界線が表示され、コンテンツの上に10ピクセルの境界線が表示され、コンテンツの右側に15ピクセルの境界線が表示され、コンテンツの下に20ピクセルの罫線が表示されます。  
  
 *qualifiedUniformThickness*  
 *UniformThickness*によって記述された値の後に、`px`、`in`のいずれかの単位指定子が続きます。  
  
 `px` (既定値) は [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` はインチ。1in==96px  
  
 たとえば、`"1in"` では、すべての方向に1インチの均一な境界線が提供されます。  
  
 *qualifiedIndependentThickness*  
 *IndependentThickness*によって記述される値。それぞれの値に続けて次のいずれかの単位指定子が続きます。 `px`、`in`です。  
  
 `px` (既定値) は [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` はインチ。1in==96px  
  
 たとえば、「 `"1.5in,0.8in,1.5in,0.8in"` 」のように入力します。  単位指定子は、1つまたは複数の値から混在させることも、省略することもできます。  
  
<a name="dependencyPropertyInfo_BorderThickness"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子フィールド|<xref:System.Windows.Documents.Block.BorderThicknessProperty>|  
|メタデータプロパティが `true` に設定される|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Documents.Block> 要素 (<xref:System.Windows.Documents.Paragraph>) の <xref:System.Windows.Documents.Block.BorderThickness%2A> 属性を設定する方法を示しています。  
  
 [!code-xaml[BlockSnippets#_Block_BordersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_bordersxaml)]  
  
 次の図は、前の例がどのようにレンダリングされるかを示しています。  
  
 ![スクリーンショット: ブロックの&#47;周囲に青、4インチの境界線](~/add/media/block-borders.png "スクリーンショット: 青、ブロックの周囲の 1/4 インチ境界線")  
  
 次の例は、<xref:System.Windows.Documents.Block.BorderThickness%2A> プロパティをプログラムで設定する方法を示しています。  
  
 [!code-csharp[BlockSnippets#_Block_Borders](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_borders)]
 [!code-vb[BlockSnippets#_Block_Borders](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_borders)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.Block.BorderBrush" />
      </Docs>
    </Member>
    <Member MemberName="BorderThicknessProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BorderThicknessProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BorderThicknessProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.Block.BorderThicknessProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BorderThicknessProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BorderThicknessProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BorderThicknessProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.Block.BorderThicknessProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Documents.Block.BorderThickness" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BreakColumnBefore">
      <MemberSignature Language="C#" Value="public bool BreakColumnBefore { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BreakColumnBefore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.Block.BreakColumnBefore" />
      <MemberSignature Language="VB.NET" Value="Public Property BreakColumnBefore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BreakColumnBefore { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BreakColumnBefore : bool with get, set" Usage="System.Windows.Documents.Block.BreakColumnBefore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この要素が列に基づく表示に参加する場合に要素の前に段区切りを自動的に挿入するかどうかを示す値を取得または設定します。</summary>
        <value>この要素の前に段区切りを自動的に挿入する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_BreakColumnBefore"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子フィールド|<xref:System.Windows.Documents.Block.BreakColumnBeforeProperty>|  
|メタデータプロパティが `true` に設定される|<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.Block.BreakPageBefore" />
      </Docs>
    </Member>
    <Member MemberName="BreakColumnBeforeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BreakColumnBeforeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BreakColumnBeforeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.Block.BreakColumnBeforeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BreakColumnBeforeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BreakColumnBeforeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BreakColumnBeforeProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.Block.BreakColumnBeforeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Documents.Block.BreakColumnBefore" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BreakPageBefore">
      <MemberSignature Language="C#" Value="public bool BreakPageBefore { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BreakPageBefore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.Block.BreakPageBefore" />
      <MemberSignature Language="VB.NET" Value="Public Property BreakPageBefore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BreakPageBefore { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BreakPageBefore : bool with get, set" Usage="System.Windows.Documents.Block.BreakPageBefore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この要素の前にページ区切りを自動的に挿入するかどうかを示す値を取得または設定します。</summary>
        <value>この要素の前にページ区切りを自動的に挿入する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_BreakPageBefore"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子フィールド|<xref:System.Windows.Documents.Block.BreakColumnBeforeProperty>|  
|メタデータプロパティが `true` に設定される|<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.Block.BreakColumnBefore" />
      </Docs>
    </Member>
    <Member MemberName="BreakPageBeforeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BreakPageBeforeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BreakPageBeforeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.Block.BreakPageBeforeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BreakPageBeforeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BreakPageBeforeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BreakPageBeforeProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.Block.BreakPageBeforeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Documents.Block.BreakPageBefore" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearFloaters">
      <MemberSignature Language="C#" Value="public System.Windows.WrapDirection ClearFloaters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WrapDirection ClearFloaters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.Block.ClearFloaters" />
      <MemberSignature Language="VB.NET" Value="Public Property ClearFloaters As WrapDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WrapDirection ClearFloaters { System::Windows::WrapDirection get(); void set(System::Windows::WrapDirection value); };" />
      <MemberSignature Language="F#" Value="member this.ClearFloaters : System.Windows.WrapDirection with get, set" Usage="System.Windows.Documents.Block.ClearFloaters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WrapDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Documents.Floater" /> 要素に含まれる <see cref="T:System.Windows.Documents.Block" /> 要素を再配置する方向を取得または設定します。</summary>
        <value><see cref="T:System.Windows.WrapDirection" /> 要素に含まれる他のコンテンツから <see cref="T:System.Windows.Documents.Floater" /> 要素を分離する方向を指定する <see cref="T:System.Windows.Documents.Block" /> 値のいずれか。 既定値は <see cref="F:System.Windows.WrapDirection.None" /> で、浮遊要素をその位置に描画することを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.Block.ClearFloaters%2A> プロパティは <xref:System.Windows.Documents.Block> 内でのコンテンツのレイアウト方法に影響し、<xref:System.Windows.Documents.Floater> 要素が <xref:System.Windows.Documents.Block> 要素の内容を congesting ことを防ぐために使用されます。  このプロパティの方向を指定すると、<xref:System.Windows.Documents.Block> コンテンツ内で floater が一方向に位置が移動します。  Floater は親 <xref:System.Windows.Documents.Block>の外では再配置されません。  
  
<a name="dependencyPropertyInfo_ClearFloaters"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子フィールド|<xref:System.Windows.Documents.Block.ClearFloatersProperty>|  
|メタデータプロパティが `true` に設定される|<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearFloatersProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClearFloatersProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClearFloatersProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.Block.ClearFloatersProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClearFloatersProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClearFloatersProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClearFloatersProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.Block.ClearFloatersProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Documents.Block.ClearFloaters" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirection">
      <MemberSignature Language="C#" Value="public System.Windows.FlowDirection FlowDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FlowDirection FlowDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.Block.FlowDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property FlowDirection As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FlowDirection FlowDirection { System::Windows::FlowDirection get(); void set(System::Windows::FlowDirection value); };" />
      <MemberSignature Language="F#" Value="member this.FlowDirection : System.Windows.FlowDirection with get, set" Usage="System.Windows.Documents.Block.FlowDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Documents.Block" /> 要素内のコンテンツのフローの相対的な方向を指定する値を取得または設定します。</summary>
        <value>相対的なフロー方向を指定する <see cref="T:System.Windows.FlowDirection" /> 値のいずれか。 既定では、 <see cref="F:System.Windows.FlowDirection.LeftToRight" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを取得すると、現在有効なフロー方向が返されます。  このプロパティを設定すると、<xref:System.Windows.Documents.Block> 要素のコンテンツが指定した方向に再フローされます。  
  
 コンテンツのフロー方向は、通常、表現される言語の innate flow 方向に対応します。  ヘブライ語とアラビア語は、自然に右から左に流れる言語の例です。  英語、ドイツ語、ロシア語は、自然に左から右に流れる言語の例です。  
  
> [!NOTE]
>  **このプロパティの値は、オペレーティングシステムで使用される言語に合わせて自動的に変更されることはありません。** 既定の <xref:System.Windows.FlowDirection.LeftToRight>**の n 以外の**値を使用する必要がある場合は **、自分で指定する必要があります。**  
  
<a name="dependencyPropertyInfo_FlowDirection"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子フィールド|<xref:System.Windows.Documents.Block.FlowDirectionProperty>|  
|メタデータプロパティが `true` に設定される|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>|  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Documents.Block> 要素 (<xref:System.Windows.Documents.Paragraph>) の <xref:System.Windows.Documents.Block.FlowDirection%2A> 属性を設定する方法を示しています。  
  
 [!code-xaml[BlockSnippets#_Block_FlowDirectionXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_flowdirectionxaml)]  
  
 次の例は、<xref:System.Windows.Documents.Block.FlowDirection%2A> プロパティをプログラムで設定する方法を示しています。  
  
 [!code-csharp[BlockSnippets#_Block_FlowDirection](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_flowdirection)]
 [!code-vb[BlockSnippets#_Block_FlowDirection](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_flowdirection)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FlowDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FlowDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.Block.FlowDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FlowDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FlowDirectionProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FlowDirectionProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.Block.FlowDirectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Documents.Block.FlowDirection" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIsHyphenationEnabled">
      <MemberSignature Language="C#" Value="public static bool GetIsHyphenationEnabled (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsHyphenationEnabled(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.Block.GetIsHyphenationEnabled(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetIsHyphenationEnabled (element As DependencyObject) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetIsHyphenationEnabled(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetIsHyphenationEnabled : System.Windows.DependencyObject -&gt; bool" Usage="System.Windows.Documents.Block.GetIsHyphenationEnabled element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="P:System.Windows.Documents.Block.IsHyphenationEnabled" /> プロパティの値を取得する対象の依存関係オブジェクト。</param>
        <summary>指定した依存関係オブジェクトの <see cref="P:System.Windows.Documents.Block.IsHyphenationEnabled" /> 添付プロパティの値を返します。</summary>
        <returns>指定した依存関係オブジェクトの <see cref="P:System.Windows.Documents.Block.IsHyphenationEnabled" /> 添付プロパティの現在値。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="element" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Documents.Block.SetIsHyphenationEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetLineHeight">
      <MemberSignature Language="C#" Value="public static double GetLineHeight (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetLineHeight(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.Block.GetLineHeight(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLineHeight (element As DependencyObject) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetLineHeight(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetLineHeight : System.Windows.DependencyObject -&gt; double" Usage="System.Windows.Documents.Block.GetLineHeight element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="P:System.Windows.Documents.Block.LineHeight" /> プロパティの値を取得する対象の依存関係オブジェクト。</param>
        <summary>指定した依存関係オブジェクトの <see cref="P:System.Windows.Documents.Block.LineHeight" /> 添付プロパティの値を返します。</summary>
        <returns>指定した依存関係オブジェクトの <see cref="P:System.Windows.Documents.Block.LineHeight" /> 添付プロパティの現在値。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="element" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Documents.Block.SetLineHeight(System.Windows.DependencyObject,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="GetLineStackingStrategy">
      <MemberSignature Language="C#" Value="public static System.Windows.LineStackingStrategy GetLineStackingStrategy (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.LineStackingStrategy GetLineStackingStrategy(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.Block.GetLineStackingStrategy(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLineStackingStrategy (element As DependencyObject) As LineStackingStrategy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::LineStackingStrategy GetLineStackingStrategy(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetLineStackingStrategy : System.Windows.DependencyObject -&gt; System.Windows.LineStackingStrategy" Usage="System.Windows.Documents.Block.GetLineStackingStrategy element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LineStackingStrategy</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="P:System.Windows.Documents.Block.LineStackingStrategy" /> 添付プロパティの値を取得する対象の依存関係オブジェクト。</param>
        <summary>指定した依存関係オブジェクトの <see cref="P:System.Windows.Documents.Block.LineStackingStrategy" /> 添付プロパティの値を返します。</summary>
        <returns>指定した依存関係オブジェクトの <see cref="P:System.Windows.Documents.Block.LineStackingStrategy" /> 添付プロパティの現在値。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="element" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Documents.Block.SetLineStackingStrategy(System.Windows.DependencyObject,System.Windows.LineStackingStrategy)" />
      </Docs>
    </Member>
    <Member MemberName="GetTextAlignment">
      <MemberSignature Language="C#" Value="public static System.Windows.TextAlignment GetTextAlignment (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.TextAlignment GetTextAlignment(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.Block.GetTextAlignment(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTextAlignment (element As DependencyObject) As TextAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::TextAlignment GetTextAlignment(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetTextAlignment : System.Windows.DependencyObject -&gt; System.Windows.TextAlignment" Usage="System.Windows.Documents.Block.GetTextAlignment element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.TextAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="P:System.Windows.Documents.Block.TextAlignment" /> プロパティの値を取得する対象の依存関係オブジェクト。</param>
        <summary>指定した依存関係オブジェクトの <see cref="P:System.Windows.Documents.Block.TextAlignment" /> 添付プロパティの値を返します。</summary>
        <returns>指定した依存関係オブジェクトの <see cref="P:System.Windows.Documents.Block.TextAlignment" /> 添付プロパティの現在値。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="element" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Documents.Block.SetTextAlignment(System.Windows.DependencyObject,System.Windows.TextAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="IsHyphenationEnabled">
      <MemberSignature Language="C#" Value="public bool IsHyphenationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHyphenationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.Block.IsHyphenationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHyphenationEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHyphenationEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsHyphenationEnabled : bool with get, set" Usage="System.Windows.Documents.Block.IsHyphenationEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>単語の自動ハイフネーションが有効かどうかを示す値を取得または設定します。</summary>
        <value>自動改行と単語の自動ハイフネーションが有効である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 単語の自動ハイフネーション機能を使用すると、現在のレイアウト条件に基づいて、<xref:System.Windows.Documents.Block> の要素が自動的に単語を分割してハイフネーションを行うことができます。  これにより、長い単語を1行で開始し、次に進むことができます。また、均等に配置されたテキストに空白が均等に分散される傾向があります。  単語は、標準の文法規則に従って分割され、ハイフネーションが適用されます。  
  
<a name="dependencyPropertyInfo_IsHyphenationEnabled"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子フィールド|<xref:System.Windows.Documents.Block.IsHyphenationEnabledProperty>|  
|メタデータプロパティが `true` に設定される|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>、<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Documents.Block> 要素の <xref:System.Windows.Documents.Block.IsHyphenationEnabled%2A> 属性を設定する方法を示しています。  
  
 [!code-xaml[BlockSnippets#_Block_HyphenateXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_hyphenatexaml)]  
  
 次の図は、前の例がどのようにレンダリングされるかを示しています。  
  
 ![スクリーンショット: FlowDocument ハイフンが有効](~/add/media/flowdoc-hyphenenabled.png "スクリーンショット: ハイフンが有効になった FlowDocument")  
  
 次の図は、同じ例が <xref:System.Windows.Documents.Block.IsHyphenationEnabled%2A>=`false`の既定の設定で表示される方法を示しています。  
  
 ![スクリーンショット: 無効なハイフンを含む FlowDocument](~/add/media/flowdoc-hyphendisabled.png "スクリーンショット: ハイフンが無効になった FlowDocument")  
  
 次の例は、<xref:System.Windows.Documents.Block.IsHyphenationEnabled%2A> プロパティをプログラムで設定する方法を示しています。  
  
 [!code-csharp[BlockSnippets#_Block_Hyphenate](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_hyphenate)]
 [!code-vb[BlockSnippets#_Block_Hyphenate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_hyphenate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHyphenationEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHyphenationEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHyphenationEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.Block.IsHyphenationEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHyphenationEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHyphenationEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHyphenationEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.Block.IsHyphenationEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Documents.Block.IsHyphenationEnabled" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineHeight">
      <MemberSignature Language="C#" Value="public double LineHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LineHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.Block.LineHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property LineHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double LineHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.LineHeight : double with get, set" Usage="System.Windows.Documents.Block.LineHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテンツの各行の高さを取得または設定します。</summary>
        <value>各行の高さ (デバイス非依存のピクセル単位)。範囲は 0.0034 ～ 160000 です。<see cref="F:System.Double.NaN" /> にすると高さが自動的に決定されます。 既定では、 <see cref="F:System.Double.NaN" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Double.NaN?displayProperty=nameWithType> の値 (`Auto`の属性値と等価) は、現在のフォント特性を基に行の高さが自動的に決定されることを示します。  
  
 この値を変更しても、関連付けられているテキストの高さは変わりません。代わりに、テキストを含む行の高さを変更します。 テキストのサイズを変更するには、<xref:System.Windows.Documents.FlowDocument.FontSize%2A> プロパティを使用します。  
  
 このプロパティに加えて、<xref:System.Windows.Documents.Block> 内の行のレイアウトは <xref:System.Windows.Documents.Block.LineStackingStrategy%2A> プロパティの影響を受けます。  
  
<a name="xamlAttributeUsage_LineHeight"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object LineHeight="double"/>  
- or -  
<object LineHeight="qualifiedDouble"/>  
- or -  
<object LineHeight="Auto"/>  
```  
  
<a name="xamlValues_LineHeight"></a>   
## <a name="xaml-values"></a>XAML の値  
 *double*  
 <xref:System.Double>  
  
 0.0034 以上で16万に等しいかそれより小さい <xref:System.Double> 値の文字列表現。 非修飾値は、デバイス非依存のピクセル単位で測定されます。 文字列には、小数点を明示的に含める必要があります。  
  
 *qualifiedDouble*  
 前述の*double*値 (違う `Auto`) の後に、次のいずれかの単位指定子が続いています: `px`、`in`、`cm`、`pt`。  
  
 `px` (既定値) は [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` はインチ。1in==96px  
  
 `cm` はセンチメートルです。1cm = = (96/2.54) px  
  
 `pt` はポイント。1pt==(96/72) px  
  
 Auto  
 現在のフォント特性を基に行の高さが自動的に決定されます。  <xref:System.Double.NaN?displayProperty=nameWithType>のプロパティ値と同じです。  
  
<a name="dependencyPropertyInfo_LineHeight"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子フィールド|<xref:System.Windows.Documents.Block.LineHeightProperty>|  
|メタデータプロパティが `true` に設定される|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>、<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Documents.Block> 要素の <xref:System.Windows.Documents.Block.LineHeight%2A> 属性を設定する方法を示しています。  
  
 [!code-xaml[BlockSnippets#_Block_LineHeightXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_lineheightxaml)]  
  
 次の図は、前の例がどのようにレンダリングされるかを示しています。  
  
 ![スクリーンショット: FlowDocument LineHeight](~/add/media/flowdocument-lineheight.png "スクリーンショット: FlowDocument LineHeight")  
  
 次の図は、同じ <xref:System.Windows.Documents.FlowDocument> が <xref:System.Windows.Documents.FlowDocument.LineHeight%2A>=<xref:System.Double.NaN?displayProperty=nameWithType>の既定の設定で表示される方法を示しています。  
  
 ![スクリーンショット: FlowDocument LineHeight の既定値](~/add/media/flowdocument-lineheightdefault.png "スクリーンショット: FlowDocument LineHeight の既定値")  
  
 次の例は、<xref:System.Windows.Documents.Block.LineHeight%2A> プロパティをプログラムで設定する方法を示しています。  
  
 [!code-csharp[BlockSnippets#_Block_LineHeight](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_lineheight)]
 [!code-vb[BlockSnippets#_Block_LineHeight](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_lineheight)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Windows.Controls.TextBlock.LineHeight" /> が負の値に設定されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="LineHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LineHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LineHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.Block.LineHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LineHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LineHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LineHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.Block.LineHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Documents.Block.LineHeight" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineStackingStrategy">
      <MemberSignature Language="C#" Value="public System.Windows.LineStackingStrategy LineStackingStrategy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.LineStackingStrategy LineStackingStrategy" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.Block.LineStackingStrategy" />
      <MemberSignature Language="VB.NET" Value="Public Property LineStackingStrategy As LineStackingStrategy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::LineStackingStrategy LineStackingStrategy { System::Windows::LineStackingStrategy get(); void set(System::Windows::LineStackingStrategy value); };" />
      <MemberSignature Language="F#" Value="member this.LineStackingStrategy : System.Windows.LineStackingStrategy with get, set" Usage="System.Windows.Documents.Block.LineStackingStrategy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LineStackingStrategy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ブロック レベルのフロー コンテンツ要素内のテキストの行ごとに行ボックスを決定する方法を取得または設定します。</summary>
        <value>ブロック レベルのフロー コンテンツ要素内のテキストの行ごとに行ボックスを決定する方法を指定する <see cref="T:System.Windows.LineStackingStrategy" /> 値の 1 つ。 既定値は <see cref="F:System.Windows.LineStackingStrategy.MaxHeight" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この依存関係プロパティには、プロパティの使用法も添付されています。 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]では、オブジェクトは `<object Block.LineStackingStrategy="value".../>`になります。ここで、 *object*は <xref:System.Windows.Documents.Block> 派生クラスに含まれるオブジェクト要素 (通常はフロー要素) であり、 *value*は <xref:System.Windows.LineStackingStrategy> 列挙体の文字列値です。 コードでは、添付プロパティの使用は <xref:System.Windows.Documents.Block.GetLineStackingStrategy%2A> および <xref:System.Windows.Documents.Block.SetLineStackingStrategy%2A> メソッドによってサポートされています。 添付プロパティの使用は一般的ではありません。  
  
<a name="dependencyPropertyInfo_LineStackingStrategy"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子フィールド|<xref:System.Windows.Documents.Block.LineStackingStrategyProperty>|  
|メタデータプロパティが `true` に設定される|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>|  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Controls.TextBlock.LineStackingStrategy%2A> プロパティを使用して、<xref:System.Windows.Controls.TextBlock>のテキスト行に対して行ボックスを作成する方法を決定する方法を示しています。 最初の <xref:System.Windows.Controls.TextBlock> の値は <xref:System.Windows.LineStackingStrategy.MaxHeight> で <xref:System.Windows.Controls.TextBlock.LineStackingStrategy%2A> 2 番目の <xref:System.Windows.Controls.TextBlock> の値は <xref:System.Windows.LineStackingStrategy.BlockLineHeight>です。  
  
 [!code-xaml[FlowMiscSnippets_snip#LineStackingStrategyExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/FlowMiscSnippets_snip/cs/linestackingstrategyexample.xaml#linestackingstrategyexamplewholepage)]  
  
 次の図は、上記のコードの結果を示しています。  
  
 ![スクリーンショット: LineStackingStrategy 値の比較](~/add/media/flow-linestackingstrategy.gif "スクリーンショット: LineStackingStrategy 値の比較")  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineStackingStrategyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LineStackingStrategyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LineStackingStrategyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.Block.LineStackingStrategyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LineStackingStrategyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LineStackingStrategyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LineStackingStrategyProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.Block.LineStackingStrategyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Documents.Block.LineStackingStrategy" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.Block.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Margin { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberSignature Language="F#" Value="member this.Margin : System.Windows.Thickness with get, set" Usage="System.Windows.Documents.Block.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要素の余白の厚みを取得または設定します。</summary>
        <value>適用する余白の量を指定する <see cref="T:System.Windows.Thickness" /> 構造体。デバイス非依存のピクセル単位で指定します。 既定値は 0 (0.0) の均一の太さです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.Block.Margin%2A> は、要素のコンテンツ領域の端と親要素の端との間にある要素のコンテンツ領域の外側にあるバッファー領域です。  <xref:System.Windows.Documents.Block.Padding%2A>とは対照的です。これは要素のコンテンツ領域の内側にあるバッファー領域であり、要素のコンテンツと要素の内部エッジの間にあります。  
  
<a name="xamlAttributeUsage_Margin"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object Margin="uniformThickness"/>  
- or -  
<object Margin="independentThickness"/>  
- or -  
<object Margin="qualifiedUniformThickness"/>  
- or -  
<object Margin="qualifiedIndependentThickness"/>  
```  
  
<a name="xamlValues_Margin"></a>   
## <a name="xaml-values"></a>XAML の値  
 *uniformThickness*  
 4つのすべての太さ寸法に一様に適用される単一 <xref:System.Double> 値の文字列表現。  たとえば、`"10"` の値は `"10,10,10,10"`の値に相当します。  非修飾値は、デバイス非依存のピクセル単位で測定されます。 文字列には、小数点を明示的に含める必要があります。  
  
 *independentThickness*  
 4つの順序付けられた <xref:System.Double> 値の文字列形式。左、上、右、下の独立した太さの寸法に対応します。  4つの値はコンマで区切る必要があります。スペースは使用できません。  たとえば、"5, 10, 15, 20" の場合、コンテンツの左側に5ピクセルの余白、コンテンツの上に10ピクセルの余白、コンテンツの右側に15ピクセルの余白、コンテンツの下に20ピクセルの余白が表示されます。  
  
 *qualifiedUniformThickness*  
 *UniformThickness*によって記述された値の後に、`px`、`in`のいずれかの単位指定子が続きます。  
  
 `px` (既定値) は [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` はインチ。1in==96px  
  
 たとえば、`"1in"` では、すべての方向に1インチの均一な余白が提供されます。  
  
 *qualifiedIndependentThickness*  
 *IndependentThickness*によって記述される値。それぞれの値に続けて次のいずれかの単位指定子が続きます。 `px`、`in`です。  
  
 `px` (既定値) は [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` はインチ。1in==96px  
  
 たとえば、「 `"1.5in,0.8in,1.5in,0.8in"` 」のように入力します。  単位指定子は、1つまたは複数の値から混在させることも、省略することもできます。  
  
<a name="dependencyPropertyInfo_Margin"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子フィールド|<xref:System.Windows.Documents.Block.MarginProperty>|  
|メタデータプロパティが `true` に設定される|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Documents.Block> 要素 (<xref:System.Windows.Documents.Paragraph>) の <xref:System.Windows.Documents.Block.Margin%2A> 属性を設定する方法を示しています。  
  
 [!code-xaml[BlockSnippets#_Block_MarginPaddingXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_marginpaddingxaml)]  
  
 次の図は、前の例がどのようにレンダリングされるかを示しています。  図には、誇張された太さと色が使用されています。  
  
 ![スクリーンショット: 埋め込みと余白がある段落](~/add/media/block-marginpadding.png "スクリーンショット: 埋め込みと余白がある段落")  
  
 次の例は、<xref:System.Windows.Documents.Block.Margin%2A> プロパティをプログラムで設定する方法を示しています。  
  
 [!code-csharp[BlockSnippets#_Block_MarginPadding](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_marginpadding)]
 [!code-vb[BlockSnippets#_Block_MarginPadding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_marginpadding)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.Block.Padding" />
      </Docs>
    </Member>
    <Member MemberName="MarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MarginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.Block.MarginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MarginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MarginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MarginProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.Block.MarginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Documents.Block.Margin" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextBlock">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.Block NextBlock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.Block NextBlock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.Block.NextBlock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextBlock As Block" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::Block ^ NextBlock { System::Windows::Documents::Block ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NextBlock : System.Windows.Documents.Block" Usage="System.Windows.Documents.Block.NextBlock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.Block</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Windows.Documents.Block" /> 要素の直後にある兄弟 <see cref="T:System.Windows.Documents.Block" /> 要素を取得します。</summary>
        <value>現在の <see cref="T:System.Windows.Documents.Block" /> 要素の直後にある兄弟 <see cref="T:System.Windows.Documents.Block" /> 要素。そのような要素が存在しない場合は <see langword="null" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Documents.Block.PreviousBlock" />
        <altmember cref="P:System.Windows.Documents.Block.SiblingBlocks" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.Block.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Padding { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Thickness with get, set" Usage="System.Windows.Documents.Block.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要素のパディングの厚みを取得または設定します。</summary>
        <value>適用する余白の量を指定する <see cref="T:System.Windows.Thickness" /> 構造体。デバイス非依存のピクセル単位で指定します。 既定値は 0 (0.0) の均一の太さです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.Block.Padding%2A> は、要素のコンテンツと要素の内側の境界の間にある要素のコンテンツ領域の内側にあるバッファー領域です。  <xref:System.Windows.Documents.Block.Margin%2A>とは対照的です。これは、要素のコンテンツ領域の外側にあるバッファー領域であり、要素のコンテンツ領域の端と親要素の端との間にあります。  
  
<a name="xamlAttributeUsage_Padding"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用  
  
```  
<object Padding="uniformThickness"/>  
- or -  
<object Padding="independentThickness"/>  
- or -  
<object Padding="qualifiedUniformThickness"/>  
- or -  
<object Padding="qualifiedIndependentThickness"/>  
```  
  
<a name="xamlValues_Padding"></a>   
## <a name="xaml-values"></a>XAML の値  
 *uniformThickness*  
 4つのすべての太さ寸法に一様に適用される単一 <xref:System.Double> 値の文字列表現。  たとえば、`"10"` の値は `"10,10,10,10"`の値に相当します。  非修飾値は、デバイス非依存のピクセル単位で測定されます。 文字列には、小数点を明示的に含める必要があります。  
  
 *independentThickness*  
 4つの順序付けられた <xref:System.Double> 値の文字列形式。左、上、右、下の独立した太さの寸法に対応します。  4つの値はコンマで区切る必要があります。スペースは使用できません。  たとえば、"5, 10, 15, 20" の場合、コンテンツの左側に5ピクセルの余白、コンテンツの上に10ピクセルの余白、コンテンツの右側に15ピクセルの余白、コンテンツの下に20ピクセルの余白があります。  
  
 *qualifiedUniformThickness*  
 *UniformThickness*によって記述された値の後に、`px`、`in`のいずれかの単位指定子が続きます。  
  
 `px` (既定値) は [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` はインチ。1in==96px  
  
 たとえば、`"1in"` では、すべての方向に1インチの均一な余白が提供されます。  
  
 *qualifiedIndependentThickness*  
 *IndependentThickness*によって記述される値。それぞれの値に続けて次のいずれかの単位指定子が続きます。 `px`、`in`です。  
  
 `px` (既定値) は [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` はインチ。1in==96px  
  
 たとえば、「 `"1.5in,0.8in,1.5in,0.8in"` 」のように入力します。  単位指定子は、1つまたは複数の値から混在させることも、省略することもできます。  
  
<a name="dependencyPropertyInfo_Padding"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子フィールド|<xref:System.Windows.Documents.Block.PaddingProperty>|  
|メタデータプロパティが `true` に設定される|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Documents.Block> 要素 (<xref:System.Windows.Documents.Paragraph>) の <xref:System.Windows.Documents.Block.Padding%2A> 属性を設定する方法を示しています。  
  
 [!code-xaml[BlockSnippets#_Block_MarginPaddingXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_marginpaddingxaml)]  
  
 次の図は、前の例がどのようにレンダリングされるかを示しています。  図には、誇張された太さと色が使用されています。  
  
 ![スクリーンショット: 埋め込みと余白がある段落](~/add/media/block-marginpadding.png "スクリーンショット: 埋め込みと余白がある段落")  
  
 次の例は、<xref:System.Windows.Documents.Block.Padding%2A> プロパティをプログラムで設定する方法を示しています。  
  
 [!code-csharp[BlockSnippets#_Block_MarginPadding](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_marginpadding)]
 [!code-vb[BlockSnippets#_Block_MarginPadding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_marginpadding)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.Block.Margin" />
      </Docs>
    </Member>
    <Member MemberName="PaddingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PaddingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PaddingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.Block.PaddingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PaddingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PaddingProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable PaddingProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.Block.PaddingProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Documents.Block.Padding" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviousBlock">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.Block PreviousBlock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.Block PreviousBlock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.Block.PreviousBlock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreviousBlock As Block" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::Block ^ PreviousBlock { System::Windows::Documents::Block ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PreviousBlock : System.Windows.Documents.Block" Usage="System.Windows.Documents.Block.PreviousBlock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.Block</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Windows.Documents.Block" /> 要素の直前にある兄弟 <see cref="T:System.Windows.Documents.Block" /> 要素を取得します。</summary>
        <value>現在の <see cref="T:System.Windows.Documents.Block" /> 要素の直前にある兄弟 <see cref="T:System.Windows.Documents.Block" /> 要素。そのような要素が存在しない場合は <see langword="null" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Documents.Block.NextBlock" />
        <altmember cref="P:System.Windows.Documents.Block.SiblingBlocks" />
      </Docs>
    </Member>
    <Member MemberName="SetIsHyphenationEnabled">
      <MemberSignature Language="C#" Value="public static void SetIsHyphenationEnabled (System.Windows.DependencyObject element, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsHyphenationEnabled(class System.Windows.DependencyObject element, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.Block.SetIsHyphenationEnabled(System.Windows.DependencyObject,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetIsHyphenationEnabled (element As DependencyObject, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIsHyphenationEnabled(System::Windows::DependencyObject ^ element, bool value);" />
      <MemberSignature Language="F#" Value="static member SetIsHyphenationEnabled : System.Windows.DependencyObject * bool -&gt; unit" Usage="System.Windows.Documents.Block.SetIsHyphenationEnabled (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="P:System.Windows.Documents.Block.IsHyphenationEnabled" /> プロパティの値を設定する対象の依存関係オブジェクト。</param>
        <param name="value">プロパティに設定する新しい値。</param>
        <summary>指定した依存関係オブジェクトの <see cref="P:System.Windows.Documents.Block.IsHyphenationEnabled" /> 添付プロパティの値を設定します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="element" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Documents.Block.GetIsHyphenationEnabled(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="SetLineHeight">
      <MemberSignature Language="C#" Value="public static void SetLineHeight (System.Windows.DependencyObject element, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLineHeight(class System.Windows.DependencyObject element, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.Block.SetLineHeight(System.Windows.DependencyObject,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLineHeight (element As DependencyObject, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLineHeight(System::Windows::DependencyObject ^ element, double value);" />
      <MemberSignature Language="F#" Value="static member SetLineHeight : System.Windows.DependencyObject * double -&gt; unit" Usage="System.Windows.Documents.Block.SetLineHeight (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="P:System.Windows.Documents.Block.LineHeight" /> プロパティの値を設定する対象の依存関係オブジェクト。</param>
        <param name="value">プロパティに設定する新しい値。</param>
        <summary>指定した依存関係オブジェクトの <see cref="P:System.Windows.Documents.Block.LineHeight" /> 添付プロパティの値を設定します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="element" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="value" /> は負の値です。</exception>
        <altmember cref="M:System.Windows.Documents.Block.GetLineHeight(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="SetLineStackingStrategy">
      <MemberSignature Language="C#" Value="public static void SetLineStackingStrategy (System.Windows.DependencyObject element, System.Windows.LineStackingStrategy value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLineStackingStrategy(class System.Windows.DependencyObject element, valuetype System.Windows.LineStackingStrategy value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.Block.SetLineStackingStrategy(System.Windows.DependencyObject,System.Windows.LineStackingStrategy)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLineStackingStrategy (element As DependencyObject, value As LineStackingStrategy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLineStackingStrategy(System::Windows::DependencyObject ^ element, System::Windows::LineStackingStrategy value);" />
      <MemberSignature Language="F#" Value="static member SetLineStackingStrategy : System.Windows.DependencyObject * System.Windows.LineStackingStrategy -&gt; unit" Usage="System.Windows.Documents.Block.SetLineStackingStrategy (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.LineStackingStrategy" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="P:System.Windows.Documents.Block.LineStackingStrategy" /> プロパティの値を設定する対象の依存関係オブジェクト。</param>
        <param name="value">プロパティに設定する新しい値。</param>
        <summary>指定した依存関係オブジェクトの <see cref="P:System.Windows.Documents.Block.LineStackingStrategy" /> 添付プロパティの値を設定します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="element" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Documents.Block.GetLineStackingStrategy(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="SetTextAlignment">
      <MemberSignature Language="C#" Value="public static void SetTextAlignment (System.Windows.DependencyObject element, System.Windows.TextAlignment value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetTextAlignment(class System.Windows.DependencyObject element, valuetype System.Windows.TextAlignment value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.Block.SetTextAlignment(System.Windows.DependencyObject,System.Windows.TextAlignment)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetTextAlignment (element As DependencyObject, value As TextAlignment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetTextAlignment(System::Windows::DependencyObject ^ element, System::Windows::TextAlignment value);" />
      <MemberSignature Language="F#" Value="static member SetTextAlignment : System.Windows.DependencyObject * System.Windows.TextAlignment -&gt; unit" Usage="System.Windows.Documents.Block.SetTextAlignment (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.TextAlignment" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="P:System.Windows.Documents.Block.TextAlignment" /> プロパティの値を設定する対象の依存関係オブジェクト。</param>
        <param name="value">プロパティに設定する新しい値。</param>
        <summary>指定した依存関係オブジェクトの <see cref="P:System.Windows.Documents.Block.TextAlignment" /> 添付プロパティの値を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <xref:System.Windows.Documents.Block.GetTextAlignment%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="element" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SiblingBlocks">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.BlockCollection SiblingBlocks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.BlockCollection SiblingBlocks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.Block.SiblingBlocks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SiblingBlocks As BlockCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::BlockCollection ^ SiblingBlocks { System::Windows::Documents::BlockCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SiblingBlocks : System.Windows.Documents.BlockCollection" Usage="System.Windows.Documents.Block.SiblingBlocks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.BlockCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Windows.Documents.Block" /> 要素と兄弟関係にある <see cref="T:System.Windows.Documents.Block" /> 要素のコレクションを取得します。</summary>
        <value>現在の <see cref="T:System.Windows.Documents.BlockCollection" /> 要素の親が直接ホストする子 <see cref="T:System.Windows.Documents.Block" /> 要素を格納する <see cref="T:System.Windows.Documents.Block" />。現在の <see langword="null" /> 要素に親がない場合は <see cref="T:System.Windows.Documents.Block" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティによって返される <xref:System.Windows.Documents.BlockCollection> には、コレクションへのアクセスに使用する <xref:System.Windows.Documents.Block> 要素が含まれます。つまり、このプロパティを所有する要素は、兄弟のコレクションを生成するために、独自の兄弟と見なされます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.Block.NextBlock" />
        <altmember cref="P:System.Windows.Documents.Block.PreviousBlock" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.TextAlignment TextAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.TextAlignment TextAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.Block.TextAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property TextAlignment As TextAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TextAlignment TextAlignment { System::Windows::TextAlignment get(); void set(System::Windows::TextAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.TextAlignment : System.Windows.TextAlignment with get, set" Usage="System.Windows.Documents.Block.TextAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.TextAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テキスト コンテンツの水平方向の配置を取得または設定します。</summary>
        <value>必要な配置を指定する <see cref="T:System.Windows.TextAlignment" /> の値の 1 つ。 既定では、 <see cref="F:System.Windows.TextAlignment.Left" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_TextAlignment"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子フィールド|<xref:System.Windows.Documents.Block.TextAlignmentProperty>|  
|メタデータプロパティが `true` に設定される|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>、<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Documents.Block> 要素の <xref:System.Windows.Documents.Block.TextAlignment%2A> 属性を設定する方法を示しています。  
  
 [!code-xaml[BlockSnippets#_Block_TextAlignmentXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_textalignmentxaml)]  
  
 次の図は、前の例が <xref:System.Windows.TextAlignment.Left> テキストの配置 (既定値) でどのようにレンダリングされるかを示しています。  
  
 ![スクリーンショット: Left の TextAlign プロパティ値](~/add/media/flowdoc-textalign-left.png "スクリーンショット: TextAlign プロパティ値が Left の場合")  
  
 次の図は、同じ例を <xref:System.Windows.TextAlignment.Right> テキストの配置と共にレンダリングする方法を示しています。  
  
 ![スクリーンショット: 右詰めの値](~/add/media/flowdoc-textalign-right.png "スクリーンショット: 右の TextAlign 値")  
  
 次の図は、同じ例を <xref:System.Windows.TextAlignment.Center> テキストの配置と共にレンダリングする方法を示しています。  
  
 ![スクリーンショット: 中央の TextAlign プロパティ値](~/add/media/flowdoc-textalign-center.png "スクリーンショット: 中央の TextAlign プロパティ値")  
  
 次の例は、<xref:System.Windows.Documents.Block.TextAlignment%2A> プロパティをプログラムで設定する方法を示しています。  
  
 [!code-csharp[BlockSnippets#_Block_TextAlignment](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_textalignment)]
 [!code-vb[BlockSnippets#_Block_TextAlignment](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_textalignment)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TextAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TextAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.Block.TextAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TextAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.Block.TextAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Documents.Block.TextAlignment" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
