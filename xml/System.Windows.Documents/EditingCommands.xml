<Type Name="EditingCommands" FullName="System.Windows.Documents.EditingCommands">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3952c6422d11625c3e926c21b1f329167434d4b1" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83948583" /></Metadata><TypeSignature Language="C#" Value="public static class EditingCommands" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EditingCommands extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.EditingCommands" />
  <TypeSignature Language="VB.NET" Value="Public Class EditingCommands" />
  <TypeSignature Language="C++ CLI" Value="public ref class EditingCommands abstract sealed" />
  <TypeSignature Language="F#" Value="type EditingCommands = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="5c457-101">一連の標準的な編集関連コマンドを提供します。</span><span class="sxs-lookup"><span data-stu-id="5c457-101">Provides a standard set of editing related commands.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-102">次の表に、編集コマンドと、関連付けられている既定のキージェスチャ (<xref:System.Windows.Input.Key> および <xref:System.Windows.Input.ModifierKeys> 列挙型のキー名を含む) を示します。</span><span class="sxs-lookup"><span data-stu-id="5c457-102">The following table shows the editing commands and the associated default key gestures (with key names from the <xref:System.Windows.Input.Key> and <xref:System.Windows.Input.ModifierKeys> enumerations).</span></span>  
  
|<span data-ttu-id="5c457-103">編集コマンド</span><span class="sxs-lookup"><span data-stu-id="5c457-103">Editing command</span></span>|<span data-ttu-id="5c457-104">既定のキージェスチャ</span><span class="sxs-lookup"><span data-stu-id="5c457-104">Default key gesture</span></span>|  
|---------------------|-------------------------|  
|<xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>|`Ctrl`+`E`|  
|<xref:System.Windows.Documents.EditingCommands.AlignJustify%2A>|`Ctrl`+`J`|  
|<xref:System.Windows.Documents.EditingCommands.AlignLeft%2A>|`Ctrl`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.AlignRight%2A>|`Ctrl`+`R`|  
|<xref:System.Windows.Documents.EditingCommands.Backspace%2A>|`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A>|<span data-ttu-id="5c457-105">既定のキージェスチャはありません</span><span class="sxs-lookup"><span data-stu-id="5c457-105">no default key gesture</span></span>|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A>|`Ctrl`+`OemOpenBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>|`Ctrl`+`Shift`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.Delete%2A>|`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A>|`Ctrl`+`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A>|`Ctrl`+`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A>|`Shift`+`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A>|`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A>|<span data-ttu-id="5c457-106">既定のキージェスチャはありません</span><span class="sxs-lookup"><span data-stu-id="5c457-106">no default key gesture</span></span>|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A>|`Ctrl`+`OemCloseBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>|`Ctrl`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A>|`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A>|`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A>|`Ctrl`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>|`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A>|`Ctrl`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A>|`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A>|`Ctrl`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>|`Ctrl`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>|`Ctrl`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>|`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A>|`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A>|`Up`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A>|`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A>|`Ctrl`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A>|`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A>|`Shift`+`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A>|`Ctrl`+`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>|`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>|`Ctrl`+`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A>|`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>|`Ctrl`+`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A>|`Ctrl`+`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A>|`Ctrl`+`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A>|`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A>|`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A>|`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A>|`Shift`+`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A>|`Ctrl`+`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.TabBackward%2A>|`Shift`+`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.TabForward%2A>|`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBold%2A>|`Ctrl`+`B`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A>|`Ctrl`+`Shift`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A>|`Insert`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A>|`Ctrl`+`I`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A>|`Ctrl`+`Shift`+`N`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A>|`Ctrl`+`OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A>|`Ctrl`+`Shift+OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A>|`Ctrl`+`U`|  
  
 <span data-ttu-id="5c457-107">カーソル移動コマンドと選択範囲の展開コマンドは、既定のキージェスチャの共通セットを共有します。一般的な違いは、選択コマンドをキャレット移動コマンドと区別するために <xref:System.Windows.Input.ModifierKeys.Shift> キーを追加することです。</span><span class="sxs-lookup"><span data-stu-id="5c457-107">Caret movement commands and selection expanding commands share a common set of default key gestures, the general difference being the addition of the <xref:System.Windows.Input.ModifierKeys.Shift> key to differentiate selection commands from caret movement commands.</span></span>  <span data-ttu-id="5c457-108">たとえば、<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> コマンドは <xref:System.Windows.Input.Key.Left>の既定のキージェスチャを持ち、対応する <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> コマンドには <xref:System.Windows.Input.ModifierKeys.Shift>+<xref:System.Windows.Input.Key.Left>の既定のキージェスチャがあります。</span><span class="sxs-lookup"><span data-stu-id="5c457-108">For example, the <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.Key.Left>, and the corresponding <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.ModifierKeys.Shift>+<xref:System.Windows.Input.Key.Left>.</span></span>  
  
 <span data-ttu-id="5c457-109">一般に、<xref:System.Windows.Documents.EditingCommands> クラスによって提供されるコマンド定義では、コマンドパラメーター (<xref:System.Windows.Input.ICommand.Execute%2A> メソッドによって予期される `parameter` パラメーター) は使用されません。</span><span class="sxs-lookup"><span data-stu-id="5c457-109">In general, the command definitions provided by the <xref:System.Windows.Documents.EditingCommands> class do not make use of command parameters (the `parameter` parameter expected by the <xref:System.Windows.Input.ICommand.Execute%2A> method).</span></span>  
  
 <span data-ttu-id="5c457-110">コマンドとコマンドの詳細については、「[入力の概要](/dotnet/framework/wpf/advanced/input-overview)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-110">For more information on commands and commanding, see [Input Overview](/dotnet/framework/wpf/advanced/input-overview).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c457-111">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-111">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-112">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-112">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-113"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-113">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-114"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-114">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-115">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-115">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-116">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-116">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-117">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-117">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-118">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-118">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.MediaCommands" />
    <altmember cref="T:System.Windows.Input.ApplicationCommands" />
    <altmember cref="T:System.Windows.Input.ComponentCommands" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
    <altmember cref="T:System.Windows.Input.NavigationCommands" />
  </Docs>
  <Members>
    <Member MemberName="AlignCenter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignCenter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignCenter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignCenter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignCenter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignCenter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-119">現在の段落または段落の選択範囲を中央揃えで配置するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-119">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> command, which requests that the current paragraph or a selection of paragraphs be centered.</span></span></summary>
        <value><span data-ttu-id="5c457-120">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-120">The requested command.</span></span>  <span data-ttu-id="5c457-121">このコマンドの既定のキージェスチャは <see langword="E" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-121">The default key gesture for this command is <see langword="Ctrl" />+<see langword="E" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-122">このコマンドは、<xref:System.Windows.Documents.Paragraph> レベルで動作します。</span><span class="sxs-lookup"><span data-stu-id="5c457-122">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="5c457-123">段落内のコンテンツを部分的に選択したときにこのコマンドが呼び出された場合 (キャレットが段落内にある場合は空の選択を含む)、要求された効果は段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-123">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="5c457-124">複数の段落にわたる選択に対してこのコマンドを呼び出すと、選択範囲に含まれる各段落の内容全体に効果が適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-124">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="5c457-125">次の図は、中央のコンテンツの例を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-125">The following figure shows an example of centered content.</span></span>  
  
 <span data-ttu-id="5c457-126">![スクリーンショット: 中央の TextAlign プロパティ値](~/add/media/flowdoc-textalign-center.png "スクリーンショット: 中央の TextAlign プロパティ値")</span><span class="sxs-lookup"><span data-stu-id="5c457-126">![Screenshot: TextAlign property value of Center](~/add/media/flowdoc-textalign-center.png "Screenshot: TextAlign property value of Center")</span></span>  
  
 <span data-ttu-id="5c457-127">このコマンドは <xref:System.Windows.Controls.RichTextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-127">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignCenter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-128">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-128">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignCenter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-129">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-129">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-130">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-130">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-131"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-131">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-132"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-132">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-133">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-133">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-134">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-134">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-135">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-135">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-136">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-136">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignJustify">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignJustify { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignJustify" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignJustify As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignJustify { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignJustify : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-137">現在の段落または段落の選択範囲を両端揃えで配置するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-137">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> command, which requests that the current paragraph or a selection of paragraphs be justified.</span></span></summary>
        <value><span data-ttu-id="5c457-138">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-138">The requested command.</span></span>  <span data-ttu-id="5c457-139">このコマンドの既定のキージェスチャは <see langword="J" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-139">The default key gesture for this command is <see langword="Ctrl" />+<see langword="J" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-140">このコマンドは、<xref:System.Windows.Documents.Paragraph> レベルで動作します。</span><span class="sxs-lookup"><span data-stu-id="5c457-140">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="5c457-141">段落内のコンテンツを部分的に選択したときにこのコマンドが呼び出された場合 (キャレットが段落内にある場合は空の選択を含む)、要求された効果は段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-141">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="5c457-142">複数の段落にまたがる選択範囲でこのコマンドが呼び出された場合、その効果は選択範囲内のすべての段落に適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-142">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to all the paragraphs in the selection.</span></span>  
  
 <span data-ttu-id="5c457-143">コンテンツが正当化されると、各コンテンツ行の左右の間隔が調整され、両端の幅が等しいか、またはほぼ同じになります。</span><span class="sxs-lookup"><span data-stu-id="5c457-143">When content is justified, the horizontal spacing within each line of content is adjusted so that the justified lines are of equal or near-equal width.</span></span>  <span data-ttu-id="5c457-144">コンテンツは、通常、コンテンツの両側に滑らかなエッジを作成するために配置されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-144">Content is typically justified to create smooth edges on the sides of the content.</span></span>  
  
 <span data-ttu-id="5c457-145">多くの場合、このコマンドが呼び出されると、段落の最後の行が unjustified のままになる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-145">Because it is often shorter than the rest, the last line in a paragraph may remain unjustified after this command is invoked.</span></span>  
  
 <span data-ttu-id="5c457-146">次の図は、unjustified (左揃え) コンテンツを示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-146">The following figure shows unjustified (left-aligned) content.</span></span>  
  
 <span data-ttu-id="5c457-147">![スクリーンショット: コンテンツは unjustified](~/add/media/content-unjustified.png "スクリーンショット: 内容が揃っていません")</span><span class="sxs-lookup"><span data-stu-id="5c457-147">![Screenshot: Content is unjustified](~/add/media/content-unjustified.png "Screenshot: Content is unjustified")</span></span>  
  
 <span data-ttu-id="5c457-148">次の図は、均等になった後の同じコンテンツを示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-148">The following figure shows the same content after it has been justified.</span></span>  
  
 <span data-ttu-id="5c457-149">![コンテンツの両端揃えのテキストのスクリーンショット](~/add/media/content-justified.png "内容を再配置したテキストのスクリーンショット")</span><span class="sxs-lookup"><span data-stu-id="5c457-149">![Screenshot of content justified text](~/add/media/content-justified.png "Screenshot of content justified text")</span></span>  
  
 <span data-ttu-id="5c457-150">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-150">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-151">このコマンドは <xref:System.Windows.Controls.RichTextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-151">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignJustify"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-152">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-152">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignJustify"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-153">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-153">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-154">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-154">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-155"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-155">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-156"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-156">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-157">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-157">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-158">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-158">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-159">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-159">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-160">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-160">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignLeft">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignLeft As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignLeft { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignLeft : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-161">コンテンツの選択範囲を左揃えで配置するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-161">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> command, which requests that a selection of content be aligned left.</span></span></summary>
        <value><span data-ttu-id="5c457-162">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-162">The requested command.</span></span>  <span data-ttu-id="5c457-163">このコマンドの既定のキージェスチャは <see langword="L" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-163">The default key gesture for this command is <see langword="Ctrl" />+<see langword="L" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-164">このコマンドは、<xref:System.Windows.Documents.Paragraph> レベルで動作します。</span><span class="sxs-lookup"><span data-stu-id="5c457-164">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="5c457-165">段落内のコンテンツを部分的に選択したときにこのコマンドが呼び出された場合 (キャレットが段落内にある場合は空の選択を含む)、要求された効果は段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-165">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="5c457-166">複数の段落にわたる選択に対してこのコマンドを呼び出すと、選択範囲に含まれる各段落の内容全体に効果が適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-166">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="5c457-167">次の図は、左揃えのコンテンツの例を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-167">The following figure shows an example of left-aligned content.</span></span>  
  
 <span data-ttu-id="5c457-168">![スクリーンショット: Left の TextAlign プロパティ値](~/add/media/flowdoc-textalign-left.png "スクリーンショット: TextAlign プロパティ値が Left の場合")</span><span class="sxs-lookup"><span data-stu-id="5c457-168">![Screenshot: TextAlign property value of Left](~/add/media/flowdoc-textalign-left.png "Screenshot: TextAlign property value of Left")</span></span>  
  
 <span data-ttu-id="5c457-169">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-169">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-170">このコマンドは <xref:System.Windows.Controls.RichTextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-170">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignLeft"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-171">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-171">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignLeft"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-172">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-172">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-173">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-173">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-174"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-174">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-175"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-175">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-176">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-176">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-177">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-177">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-178">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-178">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-179">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-179">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignRight">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignRight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignRight As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignRight { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignRight : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-180">コンテンツの選択範囲を右揃えで配置するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-180">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> command, which requests that a selection of content be aligned right.</span></span></summary>
        <value><span data-ttu-id="5c457-181">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-181">The requested command.</span></span>  <span data-ttu-id="5c457-182">このコマンドの既定のキージェスチャは <see langword="R" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-182">The default key gesture for this command is <see langword="Ctrl" />+<see langword="R" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-183">このコマンドは、<xref:System.Windows.Documents.Paragraph> レベルで動作します。</span><span class="sxs-lookup"><span data-stu-id="5c457-183">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="5c457-184">段落内のコンテンツを部分的に選択したときにこのコマンドが呼び出された場合 (キャレットが段落内にある場合は空の選択を含む)、要求された効果は段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-184">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="5c457-185">複数の段落にわたる選択に対してこのコマンドを呼び出すと、選択範囲に含まれる各段落の内容全体に効果が適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-185">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="5c457-186">次の図は、右上に並べられたコンテンツの例を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-186">The following figure shows an example of right-aligned content.</span></span>  
  
 <span data-ttu-id="5c457-187">![スクリーンショット: 右詰めの値](~/add/media/flowdoc-textalign-right.png "スクリーンショット: 右の TextAlign 値")</span><span class="sxs-lookup"><span data-stu-id="5c457-187">![Screenshot: TextAlign value of Right](~/add/media/flowdoc-textalign-right.png "Screenshot: TextAlign value of Right")</span></span>  
  
 <span data-ttu-id="5c457-188">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-188">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-189">このコマンドは <xref:System.Windows.Controls.RichTextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-189">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignRight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-190">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-190">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignRight"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-191">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-191">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-192">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-192">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-193"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-193">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-194"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-194">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-195">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-195">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-196">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-196">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-197">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-197">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-198">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-198">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="Backspace">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Backspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Backspace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Backspace" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Backspace As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Backspace { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Backspace : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.Backspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-199">BackSpace を現在の位置または現在の選択範囲に対して入力するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-199">Represents the <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> command, which requests that a backspace be entered at the current position or over the current selection.</span></span></summary>
        <value><span data-ttu-id="5c457-200">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-200">The requested command.</span></span>  <span data-ttu-id="5c457-201">このコマンドの既定のキー ジェスチャは、<see langword="Backspace" /> です。</span><span class="sxs-lookup"><span data-stu-id="5c457-201">The default key gesture for this command is <see langword="Backspace" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-202">空の選択で呼び出された場合、このコマンドはカレットの直前にある文字または段落の区切り記号を削除します。</span><span class="sxs-lookup"><span data-stu-id="5c457-202">When invoked on an empty selection, this command deletes the character or paragraph separator just before the caret.</span></span> <span data-ttu-id="5c457-203">空でない選択で呼び出されると、このコマンドによって選択が削除されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-203">When invoked on a non-empty selection, this command deletes the selection.</span></span>  
  
 <span data-ttu-id="5c457-204">このコマンドを実行すると、同じ場所に直ちに挿入されたコンテンツのすべての書式設定が削除されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-204">This command retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.</span></span>  <span data-ttu-id="5c457-205"><xref:System.Windows.Documents.EditingCommands.Delete%2A> コマンドとは対照的です。これは以前の書式設定を保持しません。</span><span class="sxs-lookup"><span data-stu-id="5c457-205">Contrast with the <xref:System.Windows.Documents.EditingCommands.Delete%2A> command, which does not retain previous formatting.</span></span>  
  
 <span data-ttu-id="5c457-206">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-206">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-207">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-207">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_Backspace"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-208">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-208">XAML Attribute Usage</span></span>  
  
```  
<object property="Backspace"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-209">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-209">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-210">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-210">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-211"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-211">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-212"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-212">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-213">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-213">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-214">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-214">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-215">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-215">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-216">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-216">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CorrectSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand CorrectSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand CorrectSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CorrectSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ CorrectSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CorrectSpellingError : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-217">現在の位置にあるスペル ミスの単語を修正するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-217">Represents the <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> command, which requests that any misspelled word at the current position be corrected.</span></span></summary>
        <value><span data-ttu-id="5c457-218">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-218">The requested command.</span></span>  <span data-ttu-id="5c457-219">このコマンドには、既定のキー ジェスチャはありません。</span><span class="sxs-lookup"><span data-stu-id="5c457-219">This command has no default key gesture.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-220">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-220">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_CorrectSpellingError"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-221">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-221">XAML Attribute Usage</span></span>  
  
```  
<object property="CorrectSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseFontSize : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-222">現在の選択範囲のフォント サイズを 1 ポイント縮小するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-222">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> command, which requests that the font size for the current selection be decreased by 1 point.</span></span></summary>
        <value><span data-ttu-id="5c457-223">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-223">The requested command.</span></span>  <span data-ttu-id="5c457-224">このコマンドの既定のキージェスチャは <see langword="OemOpenBrackets" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-224">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemOpenBrackets" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-225">カーソルが単語内にある空の選択に対してこのコマンドが呼び出された場合、その選択は自動的に展開され、単語全体にコマンドが適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-225">If this command is invoked on an empty selection where the caret is within a word, the selection is automatically expanded to apply the command to the entire word.</span></span>  
  
 <span data-ttu-id="5c457-226">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-226">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-227">このコマンドは <xref:System.Windows.Controls.RichTextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-227">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_DecreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-228">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-228">XAML Attribute Usage</span></span>  
  
```  
<object property="DecreaseFontSize"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-229">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-229">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-230">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-230">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-231"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-231">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-232"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-232">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-233">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-233">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-234">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-234">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-235">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-235">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-236">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-236">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseIndentation : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-237">現在の段落のインデントを 1 タブ位置分減らすよう要求する <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-237">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> command, which requests that indentation for the current paragraph be decreased by one tab stop.</span></span></summary>
        <value><span data-ttu-id="5c457-238">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-238">The requested command.</span></span>  <span data-ttu-id="5c457-239">このコマンドの既定のキージェスチャは +<see langword="Shift" />+<see langword="T" /><see langword="Ctrl" />ます。</span><span class="sxs-lookup"><span data-stu-id="5c457-239">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="T" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-240">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-240">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-241">このコマンドは <xref:System.Windows.Controls.RichTextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-241">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5c457-242">このコマンドは、テキスト要素の <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> プロパティが `true`に設定されている場合を除き、テキスト要素には影響しません。</span><span class="sxs-lookup"><span data-stu-id="5c457-242">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_DecreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-243">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-243">XAML Attribute Usage</span></span>  
  
```  
<object property="DecreaseIndentation"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-244">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-244">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-245">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-245">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-246"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-246">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-247"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-247">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-248">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-248">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-249">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-249">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-250">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-250">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-251">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-251">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Delete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Delete" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Delete As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Delete { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.Delete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-252">現在の選択範囲を削除するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-252">Represents the <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> command, which requests that the current selection be deleted.</span></span></summary>
        <value><span data-ttu-id="5c457-253">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-253">The requested command.</span></span>  <span data-ttu-id="5c457-254">このコマンドの既定のキー ジェスチャは、<see langword="Delete" /> です。</span><span class="sxs-lookup"><span data-stu-id="5c457-254">The default key gesture for this command is <see langword="Delete" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-255">このコマンドは、削除された選択項目から書式設定を破棄します。</span><span class="sxs-lookup"><span data-stu-id="5c457-255">This command discards any formatting from the deleted selection.</span></span>  <span data-ttu-id="5c457-256"><xref:System.Windows.Documents.EditingCommands.Backspace%2A> コマンドとは対照的に、このコマンドが呼び出された後、同じ場所に直ちに挿入されたコンテンツに対して、削除された選択項目から書式設定を保持します。</span><span class="sxs-lookup"><span data-stu-id="5c457-256">Contrast with the <xref:System.Windows.Documents.EditingCommands.Backspace%2A> command, which retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.</span></span>  
  
 <span data-ttu-id="5c457-257">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-257">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-258">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-258">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_Delete"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-259">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-259">XAML Attribute Usage</span></span>  
  
```  
<object property="Delete"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-260">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-260">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-261">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-261">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-262"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-262">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-263"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-263">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-264">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-264">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-265">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-265">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-266">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-266">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-267">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-267">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteNextWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeleteNextWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeleteNextWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeleteNextWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeleteNextWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteNextWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-268">現在の位置から見て次の単語を削除するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-268">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> command, which requests that the next word (relative to a current position) be deleted.</span></span></summary>
        <value><span data-ttu-id="5c457-269">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-269">The requested command.</span></span>  <span data-ttu-id="5c457-270">このコマンドの既定のキージェスチャは <see langword="Delete" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-270">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Delete" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-271">カーソルが単語内にある場合は、現在の位置と単語の末尾との間の単語の残りの部分が削除されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-271">If the caret is within a word, the remainder of the word between the current position and the end of the word is deleted.</span></span>  
  
 <span data-ttu-id="5c457-272">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-272">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-273">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-273">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_DeleteNextWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-274">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-274">XAML Attribute Usage</span></span>  
  
```  
<object property="DeleteNextWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-275">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-275">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-276">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-276">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-277"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-277">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-278"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-278">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-279">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-279">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-280">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-280">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-281">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-281">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-282">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-282">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="DeletePreviousWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeletePreviousWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeletePreviousWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeletePreviousWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeletePreviousWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeletePreviousWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-283">現在の位置から見て前の単語を削除するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-283">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> command, which requests that the previous word (relative to a current position) be deleted.</span></span></summary>
        <value><span data-ttu-id="5c457-284">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-284">The requested command.</span></span>  <span data-ttu-id="5c457-285">このコマンドの既定のキージェスチャは <see langword="Backspace" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-285">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Backspace" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-286">カーソルが単語内にある場合は、現在位置と単語の先頭との間の単語の残りの部分が削除されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-286">If the caret is within a word, the remainder of the word between the current position and the beginning of the word is deleted.</span></span>  
  
 <span data-ttu-id="5c457-287">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-287">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-288">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-288">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_DeletePreviousWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-289">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-289">XAML Attribute Usage</span></span>  
  
```  
<object property="DeletePreviousWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-290">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-290">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-291">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-291">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-292"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-292">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-293"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-293">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-294">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-294">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-295">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-295">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-296">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-296">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-297">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-297">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="EnterLineBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterLineBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterLineBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterLineBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterLineBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterLineBreak : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-298">改行を現在の位置または現在の選択範囲に対して挿入するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-298">Represents the <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> command, which requests that a line break be inserted at the current position or over the current selection.</span></span></summary>
        <value><span data-ttu-id="5c457-299">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-299">The requested command.</span></span>  <span data-ttu-id="5c457-300">このコマンドの既定のキージェスチャは <see langword="Enter" />+<see langword="Shift" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-300">The default key gesture for this command is <see langword="Shift" />+<see langword="Enter" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-301"><xref:System.Windows.Controls.RichTextBox>などのフローコンテンツをサポートするエディターでは、このコマンドによって、<xref:System.Windows.Documents.LineBreak> 要素が現在の位置に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-301">For editors that support flow content, such as <xref:System.Windows.Controls.RichTextBox>, this command causes a <xref:System.Windows.Documents.LineBreak> element to be inserted at the current position.</span></span>  
  
 <span data-ttu-id="5c457-302">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-302">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-303">このコマンドは <xref:System.Windows.Controls.RichTextBox> と <xref:System.Windows.Controls.TextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-303">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_EnterLineBreak"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-304">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-304">XAML Attribute Usage</span></span>  
  
```  
<object property="EnterLineBreak"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-305">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-305">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-306">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-306">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-307"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-307">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-308"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-308">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-309">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-309">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-310">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-310">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-311">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-311">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-312">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-312">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      </Docs>
    </Member>
    <Member MemberName="EnterParagraphBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterParagraphBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterParagraphBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterParagraphBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterParagraphBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterParagraphBreak : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-313">段落区切りを現在の位置または現在の選択範囲を超えた位置に挿入するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-313">Represents the <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> command, which requests that a paragraph break be inserted at the current position or over the current selection.</span></span></summary>
        <value><span data-ttu-id="5c457-314">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-314">The requested command.</span></span>  <span data-ttu-id="5c457-315">このコマンドの既定のキー ジェスチャは、<see langword="Enter" /> です。</span><span class="sxs-lookup"><span data-stu-id="5c457-315">The default key gesture for this command is <see langword="Enter" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-316">このコマンドは、ユーザーが ENTER キーを押すことに相当します。</span><span class="sxs-lookup"><span data-stu-id="5c457-316">This command is equivalent to the user pressing the ENTER key.</span></span>  
  
 <span data-ttu-id="5c457-317">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-317">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-318">このコマンドは <xref:System.Windows.Controls.RichTextBox> と <xref:System.Windows.Controls.TextBox> でネイティブにサポートされています (<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> プロパティが `true`の場合)。</span><span class="sxs-lookup"><span data-stu-id="5c457-318">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property is `true`).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5c457-319">このコマンドは、テキスト要素の <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> プロパティが `true`に設定されている場合を除き、テキスト要素には影響しません。</span><span class="sxs-lookup"><span data-stu-id="5c457-319">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_EnterParagraphBreak"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-320">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-320">XAML Attribute Usage</span></span>  
  
```  
<object property="EnterParagraphBreak"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-321">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-321">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-322">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-322">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-323"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-323">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-324"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-324">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-325">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-325">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-326">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-326">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-327">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-327">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-328">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-328">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IgnoreSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IgnoreSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IgnoreSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IgnoreSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreSpellingError : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-329">現在の位置または現在の選択範囲内にあるスペル ミスの単語をすべて無視するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-329">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> command, which requests that any instances of misspelled words at the current position or in the current selection be ignored.</span></span></summary>
        <value><span data-ttu-id="5c457-330">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-330">The requested command.</span></span>  <span data-ttu-id="5c457-331">このコマンドには、既定のキー ジェスチャはありません。</span><span class="sxs-lookup"><span data-stu-id="5c457-331">This command has no default key gesture.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-332">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-332">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_IgnoreSpellingError"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-333">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-333">XAML Attribute Usage</span></span>  
  
```  
<object property="IgnoreSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseFontSize : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-334">現在の選択範囲のフォント サイズを 1 ポイント拡大するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-334">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> command, which requests that the font size for the current selection be increased by 1 point.</span></span></summary>
        <value><span data-ttu-id="5c457-335">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-335">The requested command.</span></span>  <span data-ttu-id="5c457-336">このコマンドの既定のキージェスチャは <see langword="OemCloseBrackets" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-336">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemCloseBrackets" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-337">カーソルが単語内にある空の選択に対してこのコマンドを呼び出すと、その選択内容が拡張され、単語全体にコマンドが適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-337">If this command is invoked on an empty selection where the caret is within a word, the selection is expanded to apply the command to the entire word.</span></span>  
  
 <span data-ttu-id="5c457-338">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-338">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-339">このコマンドは <xref:System.Windows.Controls.RichTextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-339">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_IncreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-340">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-340">XAML Attribute Usage</span></span>  
  
```  
<object property="IncreaseFontSize"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-341">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-341">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-342">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-342">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-343"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-343">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-344"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-344">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-345">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-345">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-346">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-346">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-347">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-347">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-348">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-348">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseIndentation : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-349">現在の段落のインデントを 1 タブ位置分増やすよう要求する <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-349">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> command, which requests that indentation for the current paragraph be increased by one tab stop.</span></span></summary>
        <value><span data-ttu-id="5c457-350">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-350">The requested command.</span></span>  <span data-ttu-id="5c457-351">このコマンドの既定のキージェスチャは <see langword="T" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-351">The default key gesture for this command is <see langword="Ctrl" />+<see langword="T" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-352">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-352">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-353">このコマンドは <xref:System.Windows.Controls.RichTextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-353">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5c457-354">このコマンドは、テキスト要素の <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> プロパティが `true`に設定されている場合を除き、テキスト要素には影響しません。</span><span class="sxs-lookup"><span data-stu-id="5c457-354">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_IncreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-355">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-355">XAML Attribute Usage</span></span>  
  
```  
<object property="IncreaseIndentation"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-356">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-356">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-357">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-357">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-358"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-358">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-359"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-359">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-360">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-360">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-361">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-361">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-362">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-362">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-363">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-363">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-364">キャレットを 1 行下に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-364">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> command, which requests that the caret move down by one line.</span></span></summary>
        <value><span data-ttu-id="5c457-365">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-365">The requested command.</span></span>  <span data-ttu-id="5c457-366">このコマンドの既定のキー ジェスチャは、<see langword="Down" /> です。</span><span class="sxs-lookup"><span data-stu-id="5c457-366">The default key gesture for this command is <see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-367">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-367">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-368">このコマンドは <xref:System.Windows.Controls.RichTextBox> と <xref:System.Windows.Controls.TextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-368">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-369">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-369">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-370">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-370">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-371">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-371">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-372"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-372">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-373"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-373">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-374">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-374">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-375">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-375">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-376">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-376">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-377">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-377">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-378">キャレットを 1 ページ下に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-378">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> command, which requests that the caret move down by one page.</span></span></summary>
        <value><span data-ttu-id="5c457-379">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-379">The requested command.</span></span>  <span data-ttu-id="5c457-380">このコマンドの既定のキー ジェスチャは、<see langword="PageDown" /> です。</span><span class="sxs-lookup"><span data-stu-id="5c457-380">The default key gesture for this command is <see langword="PageDown" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-381">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-381">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-382">このコマンドは <xref:System.Windows.Controls.RichTextBox> と <xref:System.Windows.Controls.TextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-382">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-383">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-383">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-384">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-384">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-385">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-385">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-386"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-386">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-387"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-387">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-388">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-388">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-389">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-389">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-390">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-390">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-391">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-391">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-392">キャレットを 1 段落下に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-392">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> command, which requests that the caret move down by one paragraph.</span></span></summary>
        <value><span data-ttu-id="5c457-393">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-393">The requested command.</span></span>  <span data-ttu-id="5c457-394">このコマンドの既定のキージェスチャは <see langword="Down" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-394">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-395">このコマンドは、次の段落の先頭にカレットを配置します。</span><span class="sxs-lookup"><span data-stu-id="5c457-395">This command positions the caret at the beginning of the next paragraph.</span></span>  
  
 <span data-ttu-id="5c457-396">このコマンドは、<xref:System.Windows.Controls.TextBox>で呼び出されたときに <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> のように動作します。</span><span class="sxs-lookup"><span data-stu-id="5c457-396">This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 <span data-ttu-id="5c457-397">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-397">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-398">このコマンドは <xref:System.Windows.Controls.RichTextBox> と <xref:System.Windows.Controls.TextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-398">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-399">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-399">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-400">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-400">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-401">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-401">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-402"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-402">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-403"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-403">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-404">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-404">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-405">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-405">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-406">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-406">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-407">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-407">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveLeftByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-408">キャレットを 1 文字左に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-408">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> command, which requests that the caret move one character left.</span></span></summary>
        <value><span data-ttu-id="5c457-409">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-409">The requested command.</span></span>  <span data-ttu-id="5c457-410">このコマンドの既定のキー ジェスチャは、<see langword="Left" /> です。</span><span class="sxs-lookup"><span data-stu-id="5c457-410">The default key gesture for this command is <see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-411">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-411">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-412">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-412">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-413">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-413">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveLeftByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-414">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-414">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-415">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-415">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-416"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-416">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-417"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-417">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-418">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-418">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-419">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-419">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-420">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-420">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-421">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-421">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveLeftByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-422">キャレットを 1 語左に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-422">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> command, which requests that the caret move one word left.</span></span></summary>
        <value><span data-ttu-id="5c457-423">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-423">The requested command.</span></span>  <span data-ttu-id="5c457-424">このコマンドの既定のキージェスチャは <see langword="Left" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-424">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-425">カレットが単語内にある場合、このコマンドはカレットをその単語の先頭に移動します。</span><span class="sxs-lookup"><span data-stu-id="5c457-425">If the caret is within a word, this command moves the caret to the beginning of that word.</span></span>  <span data-ttu-id="5c457-426">それ以外の場合、このコマンドはカレットを前の単語の先頭に移動します。</span><span class="sxs-lookup"><span data-stu-id="5c457-426">Otherwise, this command moves the caret to the beginning of the previous word.</span></span>  
  
 <span data-ttu-id="5c457-427">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-427">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-428">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-428">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-429">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-429">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveLeftByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-430">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-430">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-431">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-431">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-432"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-432">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-433"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-433">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-434">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-434">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-435">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-435">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-436">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-436">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-437">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-437">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveRightByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-438">キャレットを 1 文字右に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-438">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> command, which requests that the caret move one character right.</span></span></summary>
        <value><span data-ttu-id="5c457-439">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-439">The requested command.</span></span>  <span data-ttu-id="5c457-440">このコマンドの既定のキー ジェスチャは、<see langword="Right" /> です。</span><span class="sxs-lookup"><span data-stu-id="5c457-440">The default key gesture for this command is <see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-441">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-441">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-442">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-442">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-443">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-443">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveRightByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-444">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-444">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-445">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-445">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-446"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-446">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-447"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-447">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-448">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-448">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-449">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-449">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-450">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-450">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-451">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-451">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveRightByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-452">キャレットを 1 語右に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-452">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> command, which requests that the caret move right by one word.</span></span></summary>
        <value><span data-ttu-id="5c457-453">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-453">The requested command.</span></span>  <span data-ttu-id="5c457-454">このコマンドの既定のキージェスチャは <see langword="Right" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-454">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-455">カレットが単語内にある場合、このコマンドはカレットをその単語の末尾に移動します。</span><span class="sxs-lookup"><span data-stu-id="5c457-455">If the caret is within a word, this command moves the caret to the end of that word.</span></span>  <span data-ttu-id="5c457-456">それ以外の場合、このコマンドはカレットを次の単語の先頭に移動します。</span><span class="sxs-lookup"><span data-stu-id="5c457-456">Otherwise, this command moves the caret to the beginning of the next word.</span></span>  
  
 <span data-ttu-id="5c457-457">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-457">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-458">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-458">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveRightByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-459">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-459">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveRightByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-460">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-460">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-461">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-461">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-462"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-462">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-463"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-463">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-464">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-464">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-465">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-465">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-466">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-466">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-467">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-467">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToDocumentEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-468">キャレットをコンテンツの末尾に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-468">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> command, which requests that the caret move to the very end of content.</span></span></summary>
        <value><span data-ttu-id="5c457-469">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-469">The requested command.</span></span>  <span data-ttu-id="5c457-470">このコマンドの既定のキージェスチャは <see langword="End" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-470">The default key gesture for this command is <see langword="Ctrl" />+<see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-471">*テキストコンテナー*は、手動でコンテンツの最終的な境界線を形成する要素です。</span><span class="sxs-lookup"><span data-stu-id="5c457-471">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="5c457-472"><xref:System.Windows.Controls.TextBlock> と <xref:System.Windows.Documents.FlowDocument> は、テキストコンテナーの例です。</span><span class="sxs-lookup"><span data-stu-id="5c457-472"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="5c457-473">テキストコンテナー内にまとめて含まれるコンテンツは、*ドキュメント*と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="5c457-473">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="5c457-474">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-474">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-475">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-475">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-476">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-476">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToDocumentEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-477">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-477">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-478">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-478">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-479"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-479">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-480"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-480">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-481">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-481">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-482">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-482">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-483">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-483">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-484">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-484">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToDocumentStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-485">キャレットをコンテンツの先頭に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-485">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> command, which requests that the caret move to the very beginning of content.</span></span></summary>
        <value><span data-ttu-id="5c457-486">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-486">The requested command.</span></span>  <span data-ttu-id="5c457-487">このコマンドの既定のキージェスチャは <see langword="Home" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-487">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-488">*テキストコンテナー*は、手動でコンテンツの最終的な境界線を形成する要素です。</span><span class="sxs-lookup"><span data-stu-id="5c457-488">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="5c457-489"><xref:System.Windows.Controls.TextBlock> と <xref:System.Windows.Documents.FlowDocument> は、テキストコンテナーの例です。</span><span class="sxs-lookup"><span data-stu-id="5c457-489"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="5c457-490">テキストコンテナー内にまとめて含まれるコンテンツは、*ドキュメント*と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="5c457-490">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="5c457-491">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-491">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-492">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-492">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-493">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-493">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToDocumentStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-494">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-494">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-495">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-495">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-496"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-496">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-497"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-497">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-498">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-498">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-499">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-499">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-500">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-500">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-501">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-501">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToLineEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-502">キャレットを現在の行の末尾に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-502">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> command, which requests that the caret move to the end of the current line.</span></span></summary>
        <value><span data-ttu-id="5c457-503">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-503">The requested command.</span></span>  <span data-ttu-id="5c457-504">このコマンドの既定のキー ジェスチャは、<see langword="End" /> です。</span><span class="sxs-lookup"><span data-stu-id="5c457-504">The default key gesture for this command is <see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-505">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-505">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-506">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-506">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-507">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-507">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToLineEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-508">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-508">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-509">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-509">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-510"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-510">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-511"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-511">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-512">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-512">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-513">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-513">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-514">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-514">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-515">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-515">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToLineStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-516">キャレットを現在の行の先頭に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-516">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> command, which requests that the caret move to the beginning of the current line.</span></span></summary>
        <value><span data-ttu-id="5c457-517">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-517">The requested command.</span></span>  <span data-ttu-id="5c457-518">このコマンドの既定のキー ジェスチャは、<see langword="Home" /> です。</span><span class="sxs-lookup"><span data-stu-id="5c457-518">The default key gesture for this command is <see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-519">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-519">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-520">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-520">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToLineStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-521">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-521">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToLineStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-522">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-522">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-523">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-523">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-524"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-524">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-525"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-525">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-526">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-526">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-527">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-527">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-528">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-528">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-529">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-529">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-530">キャレットを 1 行上に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-530">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> command, which requests that the caret move up by one line.</span></span></summary>
        <value><span data-ttu-id="5c457-531">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-531">The requested command.</span></span>  <span data-ttu-id="5c457-532">このコマンドの既定のキー ジェスチャは、<see langword="Up" /> です。</span><span class="sxs-lookup"><span data-stu-id="5c457-532">The default key gesture for this command is <see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-533">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-533">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-534">このコマンドは <xref:System.Windows.Controls.RichTextBox> と <xref:System.Windows.Controls.TextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-534">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-535">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-535">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-536">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-536">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-537">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-537">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-538"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-538">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-539"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-539">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-540">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-540">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-541">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-541">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-542">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-542">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-543">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-543">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-544">キャレットを 1 ページ上に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-544">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> command, which requests that the caret move up by one page.</span></span></summary>
        <value><span data-ttu-id="5c457-545">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-545">The requested command.</span></span>  <span data-ttu-id="5c457-546">このコマンドの既定のキー ジェスチャは、<see langword="PageUp" /> です。</span><span class="sxs-lookup"><span data-stu-id="5c457-546">The default key gesture for this command is <see langword="PageUp" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-547">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-547">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-548">このコマンドは <xref:System.Windows.Controls.RichTextBox> と <xref:System.Windows.Controls.TextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-548">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-549">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-549">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-550">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-550">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-551">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-551">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-552"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-552">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-553"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-553">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-554">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-554">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-555">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-555">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-556">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-556">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-557">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-557">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-558">キャレットを 1 段落上に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-558">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> command, which requests that the caret move up by one paragraph.</span></span></summary>
        <value><span data-ttu-id="5c457-559">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-559">The requested command.</span></span>  <span data-ttu-id="5c457-560">このコマンドの既定のキージェスチャは <see langword="Up" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-560">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-561">このコマンドは、次の段落の先頭にカレットを配置します。</span><span class="sxs-lookup"><span data-stu-id="5c457-561">This command positions the caret at the beginning of the next paragraph.</span></span>  
  
 <span data-ttu-id="5c457-562">このコマンドは、<xref:System.Windows.Controls.TextBox>で呼び出されたときに <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> のように動作します。</span><span class="sxs-lookup"><span data-stu-id="5c457-562">This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 <span data-ttu-id="5c457-563">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-563">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-564">このコマンドは <xref:System.Windows.Controls.RichTextBox> と <xref:System.Windows.Controls.TextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-564">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-565">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-565">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-566">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-566">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-567">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-567">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-568"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-568">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-569"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-569">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-570">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-570">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-571">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-571">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-572">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-572">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-573">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-573">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-574">現在の選択範囲を 1 行下に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-574">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> command, which requests that the current selection be expanded down by one line.</span></span></summary>
        <value><span data-ttu-id="5c457-575">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-575">The requested command.</span></span>  <span data-ttu-id="5c457-576">このコマンドの既定のキージェスチャは <see langword="Down" />+<see langword="Shift" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-576">The default key gesture for this command is <see langword="Shift" />+<see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-577">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-577">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-578">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-578">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-579">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-579">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-580">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-580">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-581">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-581">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-582"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-582">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-583"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-583">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-584">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-584">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-585">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-585">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-586">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-586">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-587">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-587">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-588">現在の選択範囲を 1 ページ下に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-588">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> command, which requests that the current selection be expanded down by one page.</span></span></summary>
        <value><span data-ttu-id="5c457-589">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-589">The requested command.</span></span>  <span data-ttu-id="5c457-590">このコマンドの既定のキージェスチャは <see langword="PageDown" />+<see langword="Shift" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-590">The default key gesture for this command is <see langword="Shift" />+<see langword="PageDown" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-591">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-591">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-592">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-592">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-593">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-593">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-594">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-594">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-595">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-595">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-596"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-596">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-597"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-597">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-598">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-598">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-599">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-599">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-600">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-600">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-601">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-601">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-602">現在の選択範囲を 1 段落下に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-602">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> command, which requests that the current selection be expanded down by one paragraph.</span></span></summary>
        <value><span data-ttu-id="5c457-603">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-603">The requested command.</span></span>  <span data-ttu-id="5c457-604">このコマンドの既定のキージェスチャは +<see langword="Shift" />+<see langword="Down" /><see langword="Ctrl" />ます。</span><span class="sxs-lookup"><span data-stu-id="5c457-604">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-605">このコマンドは、選択範囲を次の段落の先頭まで拡大します。</span><span class="sxs-lookup"><span data-stu-id="5c457-605">This command expands the selection to the beginning of the next paragraph.</span></span>  <span data-ttu-id="5c457-606">それ以外の場合、このコマンドは選択範囲を現在の段落の最後まで拡大します。</span><span class="sxs-lookup"><span data-stu-id="5c457-606">Otherwise, this command expands the selection to the end of the current paragraph.</span></span>  <span data-ttu-id="5c457-607">展開された選択範囲には、段落の末尾を示す段落区切りが含まれます。</span><span class="sxs-lookup"><span data-stu-id="5c457-607">The expanded selection includes the paragraph break that marks the end of the paragraph.</span></span>  
  
 <span data-ttu-id="5c457-608">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-608">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-609">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-609">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-610">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-610">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-611">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-611">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-612">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-612">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-613"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-613">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-614"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-614">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-615">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-615">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-616">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-616">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-617">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-617">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-618">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-618">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectLeftByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-619">現在の選択範囲を 1 文字左に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-619">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> command, which requests that the current selection be expanded left by one character.</span></span></summary>
        <value><span data-ttu-id="5c457-620">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-620">The requested command.</span></span>  <span data-ttu-id="5c457-621">このコマンドの既定のキージェスチャは <see langword="Left" />+<see langword="Shift" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-621">The default key gesture for this command is <see langword="Shift" />+<see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-622">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-622">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-623">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-623">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-624">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-624">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectLeftByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-625">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-625">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-626">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-626">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-627"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-627">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-628"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-628">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-629">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-629">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-630">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-630">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-631">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-631">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-632">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-632">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectLeftByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-633">現在の選択範囲を 1 語左に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-633">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> command, which requests that the current selection be expanded left by one word.</span></span></summary>
        <value><span data-ttu-id="5c457-634">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-634">The requested command.</span></span>  <span data-ttu-id="5c457-635">このコマンドの既定のキージェスチャは +<see langword="Shift" />+<see langword="Left" /><see langword="Ctrl" />ます。</span><span class="sxs-lookup"><span data-stu-id="5c457-635">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-636">カーソルが単語内にある場合、このコマンドは選択範囲をその単語の先頭まで拡大します。</span><span class="sxs-lookup"><span data-stu-id="5c457-636">If the caret is within a word, this command expands the selection to the beginning of that word.</span></span>  <span data-ttu-id="5c457-637">それ以外の場合、このコマンドは選択範囲を前の単語の先頭まで拡大します。</span><span class="sxs-lookup"><span data-stu-id="5c457-637">Otherwise, this command expands the selection to the beginning of the previous word.</span></span>  
  
 <span data-ttu-id="5c457-638">展開された選択範囲には、単語区切り記号は含まれません。</span><span class="sxs-lookup"><span data-stu-id="5c457-638">The expanded selection does not include the word delimiter.</span></span>  <span data-ttu-id="5c457-639"><xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>とは対照的に、展開された選択範囲には単語区切り記号が含まれます。</span><span class="sxs-lookup"><span data-stu-id="5c457-639">Contrast with <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>, which does include the word delimiter in the expanded selection.</span></span>  
  
 <span data-ttu-id="5c457-640">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-640">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-641">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-641">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-642">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-642">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectLeftByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-643">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-643">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-644">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-644">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-645"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-645">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-646"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-646">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-647">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-647">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-648">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-648">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-649">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-649">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-650">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-650">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectRightByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-651">現在の選択範囲を 1 文字右に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-651">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> command, which requests that the current selection be expanded right by one character.</span></span></summary>
        <value><span data-ttu-id="5c457-652">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-652">The requested command.</span></span>  <span data-ttu-id="5c457-653">このコマンドの既定のキージェスチャは <see langword="Right" />+<see langword="Shift" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-653">The default key gesture for this command is <see langword="Shift" />+<see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-654">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-654">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-655">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-655">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-656">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-656">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectRightByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-657">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-657">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-658">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-658">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-659"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-659">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-660"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-660">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-661">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-661">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-662">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-662">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-663">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-663">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-664">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-664">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectRightByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-665">現在の選択範囲を 1 語右に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-665">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> command, which requests that the current selection be expanded right by one word.</span></span></summary>
        <value><span data-ttu-id="5c457-666">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-666">The requested command.</span></span>  <span data-ttu-id="5c457-667">このコマンドの既定のキージェスチャは +<see langword="Shift" />+<see langword="Right" /><see langword="Ctrl" />ます。</span><span class="sxs-lookup"><span data-stu-id="5c457-667">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-668">カーソルが単語内にある場合、このコマンドは選択範囲をその単語の末尾まで拡張します。</span><span class="sxs-lookup"><span data-stu-id="5c457-668">If the caret is within a word, this command expands the selection to the end of that word.</span></span>  <span data-ttu-id="5c457-669">それ以外の場合、このコマンドは選択範囲を次の単語の最後まで拡大します。</span><span class="sxs-lookup"><span data-stu-id="5c457-669">Otherwise, this command expands the selection to the end of the next word.</span></span>  
  
 <span data-ttu-id="5c457-670">展開された選択範囲には、区切り記号が含まれます。</span><span class="sxs-lookup"><span data-stu-id="5c457-670">The expanded selection includes the word delimiter.</span></span>  <span data-ttu-id="5c457-671">展開された選択範囲に単語区切り記号が含まれていない <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> と比較します。</span><span class="sxs-lookup"><span data-stu-id="5c457-671">Contrast with <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> which does not include the word delimiter in the expanded selection.</span></span>  
  
 <span data-ttu-id="5c457-672">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-672">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-673">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-673">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectRightByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-674">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-674">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectRightByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-675">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-675">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-676">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-676">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-677"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-677">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-678"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-678">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-679">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-679">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-680">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-680">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-681">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-681">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-682">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-682">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToDocumentEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-683">現在の選択範囲をコンテンツの末尾まで拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-683">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> command, which requests that the current selection be expanded to the very end of content.</span></span></summary>
        <value><span data-ttu-id="5c457-684">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-684">The requested command.</span></span>  <span data-ttu-id="5c457-685">このコマンドの既定のキージェスチャは +<see langword="Shift" />+<see langword="End" /><see langword="Ctrl" />ます。</span><span class="sxs-lookup"><span data-stu-id="5c457-685">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-686">*テキストコンテナー*は、手動でコンテンツの最終的な境界線を形成する要素です。</span><span class="sxs-lookup"><span data-stu-id="5c457-686">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="5c457-687"><xref:System.Windows.Controls.TextBlock> と <xref:System.Windows.Documents.FlowDocument> は、テキストコンテナーの例です。</span><span class="sxs-lookup"><span data-stu-id="5c457-687"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="5c457-688">テキストコンテナー内にまとめて含まれるコンテンツは、*ドキュメント*と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="5c457-688">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="5c457-689">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-689">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-690">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-690">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-691">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-691">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToDocumentEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-692">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-692">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-693">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-693">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-694"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-694">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-695"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-695">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-696">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-696">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-697">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-697">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-698">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-698">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-699">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-699">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToDocumentStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-700">現在の選択範囲をコンテンツの先頭まで拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-700">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> command, which requests that the current selection be expanded to the very beginning of content.</span></span></summary>
        <value><span data-ttu-id="5c457-701">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-701">The requested command.</span></span>  <span data-ttu-id="5c457-702">このコマンドの既定のキージェスチャは +<see langword="Shift" />+<see langword="Home" /><see langword="Ctrl" />ます。</span><span class="sxs-lookup"><span data-stu-id="5c457-702">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-703">*テキストコンテナー*は、手動でコンテンツの最終的な境界線を形成する要素です。</span><span class="sxs-lookup"><span data-stu-id="5c457-703">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="5c457-704"><xref:System.Windows.Controls.TextBlock> と <xref:System.Windows.Documents.FlowDocument> は、テキストコンテナーの例です。</span><span class="sxs-lookup"><span data-stu-id="5c457-704"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="5c457-705">テキストコンテナー内にまとめて含まれるコンテンツは、*ドキュメント*と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="5c457-705">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="5c457-706">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-706">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-707">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-707">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-708">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-708">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToDocumentStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-709">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-709">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-710">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-710">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-711"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-711">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-712"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-712">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-713">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-713">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-714">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-714">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-715">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-715">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-716">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-716">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToLineEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-717">現在の選択範囲を現在の行の末尾まで拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-717">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> command, which requests that the current selection be expanded to the end of the current line.</span></span></summary>
        <value><span data-ttu-id="5c457-718">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-718">The requested command.</span></span>  <span data-ttu-id="5c457-719">このコマンドの既定のキージェスチャは <see langword="End" />+<see langword="Shift" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-719">The default key gesture for this command is <see langword="Shift" />+<see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-720">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-720">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-721">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-721">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-722">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-722">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToLineEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-723">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-723">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-724">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-724">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-725"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-725">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-726"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-726">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-727">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-727">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-728">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-728">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-729">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-729">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-730">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-730">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToLineStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-731">現在の選択範囲を現在の行の先頭まで拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-731">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> command, which requests that the current selection be expanded to the beginning of the current line.</span></span></summary>
        <value><span data-ttu-id="5c457-732">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-732">The requested command.</span></span>  <span data-ttu-id="5c457-733">このコマンドの既定のキージェスチャは <see langword="Home" />+<see langword="Shift" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-733">The default key gesture for this command is <see langword="Shift" />+<see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-734">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-734">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-735">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-735">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToLineStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-736">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-736">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToLineStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-737">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-737">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-738">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-738">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-739"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-739">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-740"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-740">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-741">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-741">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-742">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-742">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-743">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-743">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-744">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-744">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-745">現在の選択範囲を 1 行上に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-745">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> command, which requests that the current selection be expanded up by one line.</span></span></summary>
        <value><span data-ttu-id="5c457-746">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-746">The requested command.</span></span>  <span data-ttu-id="5c457-747">このコマンドの既定のキージェスチャは <see langword="Up" />+<see langword="Shift" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-747">The default key gesture for this command is <see langword="Shift" />+<see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-748">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-748">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-749">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-749">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-750">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-750">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-751">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-751">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-752">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-752">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-753"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-753">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-754"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-754">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-755">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-755">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-756">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-756">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-757">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-757">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-758">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-758">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-759">現在の選択範囲を 1 ページ上に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-759">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> command, which requests that the current selection be expanded  up by one page.</span></span></summary>
        <value><span data-ttu-id="5c457-760">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-760">The requested command.</span></span>  <span data-ttu-id="5c457-761">このコマンドの既定のキージェスチャは <see langword="PageUp" />+<see langword="Shift" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-761">The default key gesture for this command is <see langword="Shift" />+<see langword="PageUp" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-762">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-762">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-763">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-763">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-764">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-764">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-765">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-765">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-766">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-766">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-767"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-767">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-768"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-768">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-769">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-769">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-770">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-770">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-771">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-771">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-772">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-772">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-773">現在の選択範囲を 1 段落上に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-773">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> command, which requests that the current selection be expanded up by one paragraph.</span></span></summary>
        <value><span data-ttu-id="5c457-774">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-774">The requested command.</span></span>  <span data-ttu-id="5c457-775">このコマンドの既定のキージェスチャは +<see langword="Shift" />+<see langword="Up" /><see langword="Ctrl" />ます。</span><span class="sxs-lookup"><span data-stu-id="5c457-775">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-776">カーソルが段落の先頭にある場合、このコマンドは選択範囲を前の段落の先頭まで拡大します。</span><span class="sxs-lookup"><span data-stu-id="5c457-776">If the caret is at the beginning of a paragraph, this command expands the selection to the beginning of the previous paragraph.</span></span>  <span data-ttu-id="5c457-777">それ以外の場合、このコマンドは選択範囲を現在の段落の先頭まで拡大します。</span><span class="sxs-lookup"><span data-stu-id="5c457-777">Otherwise, this command expands the selection to the beginning of the current paragraph.</span></span>  
  
 <span data-ttu-id="5c457-778">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-778">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-779">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-779">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-780">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-780">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-781">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-781">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-782">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-782">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-783"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-783">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-784"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-784">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-785">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-785">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-786">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-786">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-787">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-787">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-788">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-788">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="TabBackward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabBackward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabBackward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabBackward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabBackward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TabBackward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-789"><see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-789">Represents the <see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> command.</span></span></summary>
        <value><span data-ttu-id="5c457-790">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-790">The requested command.</span></span>  <span data-ttu-id="5c457-791">このコマンドの既定のキージェスチャは <see langword="Tab" />+<see langword="Shift" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-791">The default key gesture for this command is <see langword="Shift" />+<see langword="Tab" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-792">このコマンドの動作は、現在選択されている内容によって異なります。</span><span class="sxs-lookup"><span data-stu-id="5c457-792">The behavior for this command depends on the current selection.</span></span> <span data-ttu-id="5c457-793">選択範囲が空でない場合、このコマンドは <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>に相当します。</span><span class="sxs-lookup"><span data-stu-id="5c457-793">If the selection is non-empty, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>.</span></span> <span data-ttu-id="5c457-794">カーソルが (<xref:System.Windows.Documents.TableCell> 要素によって表される) テーブルセルにある場合、このコマンドはカレットを前のセルに移動します。</span><span class="sxs-lookup"><span data-stu-id="5c457-794">If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the previous cell.</span></span> <span data-ttu-id="5c457-795">それ以外の場合は、現在位置にタブ文字が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-795">Otherwise, a tab character is inserted in current position.</span></span>  
  
 <span data-ttu-id="5c457-796">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-796">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-797">このコマンドは <xref:System.Windows.Controls.RichTextBox> と <xref:System.Windows.Controls.TextBox> でネイティブにサポートされています (<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> プロパティが `true`の場合)。</span><span class="sxs-lookup"><span data-stu-id="5c457-797">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).</span></span>  
  
<a name="xamlAttributeUsage_TabBackward"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-798">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-798">XAML Attribute Usage</span></span>  
  
```  
<object property="TabBackward"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-799">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-799">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-800">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-800">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-801"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-801">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-802"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-802">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-803">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-803">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-804">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-804">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-805">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-805">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-806">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-806">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabForward" />
      </Docs>
    </Member>
    <Member MemberName="TabForward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabForward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabForward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabForward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabForward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabForward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TabForward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.TabForward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-807"><see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-807">Represents the <see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> command.</span></span></summary>
        <value><span data-ttu-id="5c457-808">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-808">The requested command.</span></span>  <span data-ttu-id="5c457-809">このコマンドの既定のキー ジェスチャは、<see langword="Tab" /> です。</span><span class="sxs-lookup"><span data-stu-id="5c457-809">The default key gesture for this command is <see langword="Tab" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-810">このコマンドの動作は、現在選択されている内容によって異なります。</span><span class="sxs-lookup"><span data-stu-id="5c457-810">The behavior for this command depends on the current selection.</span></span> <span data-ttu-id="5c457-811">選択範囲が空でない場合、または選択範囲が空で、現在のキャレット位置が段落の先頭にある場合、このコマンドは <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>に相当します。</span><span class="sxs-lookup"><span data-stu-id="5c457-811">If the selection is non-empty, or if the selection is empty and the current caret position is at the beginning of a  paragraph, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>.</span></span> <span data-ttu-id="5c457-812">カーソルが (<xref:System.Windows.Documents.TableCell> 要素によって表される) テーブルセルにある場合、このコマンドはカレットを次のセルに移動します。</span><span class="sxs-lookup"><span data-stu-id="5c457-812">If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the next cell.</span></span> <span data-ttu-id="5c457-813">カーソルがテーブルの最後のセルにある場合、このコマンドを実行すると新しい行がテーブルに追加され、カレットが新しい行の最初のセルに配置されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-813">If the caret is in the last cell of a table, this command causes a new row to be appended to the table, with the caret positioned in the first cell of the new row.</span></span>  <span data-ttu-id="5c457-814">それ以外の場合は、現在位置にタブ文字が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-814">Otherwise, a tab character is inserted in current position.</span></span>  
  
 <span data-ttu-id="5c457-815">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-815">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-816">このコマンドは <xref:System.Windows.Controls.RichTextBox> と <xref:System.Windows.Controls.TextBox> でネイティブにサポートされています (<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> プロパティが `true`の場合)。</span><span class="sxs-lookup"><span data-stu-id="5c457-816">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).</span></span>  
  
<a name="xamlAttributeUsage_TabForward"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-817">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-817">XAML Attribute Usage</span></span>  
  
```  
<object property="TabForward"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-818">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-818">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-819">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-819">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-820"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-820">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-821"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-821">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-822">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-822">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-823">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-823">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-824">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-824">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-825">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-825">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabBackward" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBold">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBold" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBold As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBold { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleBold : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-826">現在の選択範囲に対して <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> の書式設定を切り替えるよう要求する <see cref="T:System.Windows.Documents.Bold" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-826">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> command, which requests that <see cref="T:System.Windows.Documents.Bold" /> formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="5c457-827">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-827">The requested command.</span></span>  <span data-ttu-id="5c457-828">このコマンドの既定のキージェスチャは <see langword="B" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-828">The default key gesture for this command is <see langword="Ctrl" />+<see langword="B" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-829">現在の選択範囲の <xref:System.Windows.FontWeight> が <xref:System.Windows.FontWeights.Thin%2A> から <xref:System.Windows.FontWeights.SemiBold%2A>までの範囲内にある場合、<xref:System.Windows.FontWeights.Bold%2A> が現在の選択項目に適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-829">If the <xref:System.Windows.FontWeight> for the current selection is in the range from <xref:System.Windows.FontWeights.Thin%2A> to <xref:System.Windows.FontWeights.SemiBold%2A>, <xref:System.Windows.FontWeights.Bold%2A> is applied to the current selection.</span></span>  <span data-ttu-id="5c457-830">それ以外の場合、<xref:System.Windows.FontWeights.Normal%2A> が適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-830">Otherwise, <xref:System.Windows.FontWeights.Normal%2A> is applied.</span></span>  <span data-ttu-id="5c457-831"><xref:System.Windows.FontWeight> 値の比較一覧については、「<xref:System.Windows.FontWeights>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-831">For a comparative list of <xref:System.Windows.FontWeight> values, see <xref:System.Windows.FontWeights>.</span></span>  
  
 <span data-ttu-id="5c457-832">選択範囲が空でカレットが単語内にある場合は、単語全体を含むように選択範囲が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-832">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="5c457-833">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-833">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-834">このコマンドは <xref:System.Windows.Controls.RichTextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-834">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleBold"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-835">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-835">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleBold"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-836">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-836">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-837">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-837">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-838"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-838">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-839"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-839">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-840">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-840">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-841">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-841">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-842">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-842">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-843">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-843">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBullets">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBullets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBullets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBullets As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBullets { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleBullets : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-844">現在の選択範囲に対して順序の付いていないリスト (箇条書きリスト) の書式設定を切り替えるよう要求する <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-844">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> command, which requests that unordered list (also referred to as bulleted list) formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="5c457-845">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-845">The requested command.</span></span>  <span data-ttu-id="5c457-846">このコマンドの既定のキージェスチャは +<see langword="Shift" />+<see langword="L" /><see langword="Ctrl" />ます。</span><span class="sxs-lookup"><span data-stu-id="5c457-846">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="L" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-847">このコマンドは、<xref:System.Windows.Documents.Paragraph> レベルで動作します。</span><span class="sxs-lookup"><span data-stu-id="5c457-847">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="5c457-848">段落内のコンテンツを部分的に選択したときにこのコマンドが呼び出された場合 (キャレットが段落内にある場合は空の選択を含む)、要求された効果は段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-848">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="5c457-849">複数の段落にわたる選択に対してこのコマンドを呼び出すと、選択範囲に含まれる各段落の内容全体に効果が適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-849">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="5c457-850">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-850">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-851">このコマンドは <xref:System.Windows.Controls.RichTextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-851">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleBullets"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-852">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-852">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleBullets"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-853">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-853">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-854">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-854">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-855"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-855">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-856"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-856">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-857">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-857">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-858">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-858">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-859">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-859">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-860">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-860">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      </Docs>
    </Member>
    <Member MemberName="ToggleInsert">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleInsert { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleInsert" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleInsert As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleInsert { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleInsert : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-861">挿入と上書きの入力モードを切り替える <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-861">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> command, which toggles the typing mode between Insert and Overtype.</span></span></summary>
        <value><span data-ttu-id="5c457-862">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-862">The requested command.</span></span>  <span data-ttu-id="5c457-863">このコマンドの既定のキー ジェスチャは、<see langword="Insert" /> です。</span><span class="sxs-lookup"><span data-stu-id="5c457-863">The default key gesture for this command is <see langword="Insert" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-864">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-864">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-865">このコマンドは、<xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>、および <xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-865">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleInsert"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-866">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-866">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleInsert"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-867">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-867">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-868">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-868">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-869"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-869">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-870"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-870">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-871">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-871">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-872">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-872">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-873">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-873">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-874">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-874">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToggleItalic">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleItalic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleItalic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleItalic As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleItalic { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleItalic : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-875">現在の選択範囲に対して <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> の書式設定を切り替えるよう要求する <see cref="T:System.Windows.Documents.Italic" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-875">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> command, which requests that <see cref="T:System.Windows.Documents.Italic" /> formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="5c457-876">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-876">The requested command.</span></span>  <span data-ttu-id="5c457-877">このコマンドの既定のキージェスチャは <see langword="I" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-877">The default key gesture for this command is <see langword="Ctrl" />+<see langword="I" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-878">現在の選択範囲の <xref:System.Windows.FontStyle> が <xref:System.Windows.FontStyles.Normal%2A>場合は、現在の選択項目に <xref:System.Windows.FontStyles.Italic%2A> が適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-878">If the <xref:System.Windows.FontStyle> for the current selection is <xref:System.Windows.FontStyles.Normal%2A>, <xref:System.Windows.FontStyles.Italic%2A> is applied to the current selection.</span></span>  <span data-ttu-id="5c457-879">それ以外の場合、<xref:System.Windows.FontStyles.Normal%2A> が適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-879">Otherwise, <xref:System.Windows.FontStyles.Normal%2A> is applied.</span></span>  
  
 <span data-ttu-id="5c457-880">選択範囲が空でカレットが単語内にある場合は、単語全体を含むように選択範囲が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-880">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="5c457-881">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-881">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-882">このコマンドは <xref:System.Windows.Controls.RichTextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-882">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleItalic"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-883">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-883">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleItalic"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-884">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-884">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-885">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-885">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-886"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-886">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-887"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-887">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-888">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-888">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-889">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-889">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-890">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-890">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-891">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-891">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleNumbering">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleNumbering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleNumbering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleNumbering As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleNumbering { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleNumbering : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-892">現在の選択範囲に対して順序付きリスト (番号付きリスト) の書式設定を切り替えるよう要求する <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-892">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> command, which requests that ordered list (also referred to as numbered list) formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="5c457-893">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-893">The requested command.</span></span>  <span data-ttu-id="5c457-894">このコマンドの既定のキージェスチャは +<see langword="Shift" />+<see langword="N" /><see langword="Ctrl" />ます。</span><span class="sxs-lookup"><span data-stu-id="5c457-894">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="N" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-895">このコマンドは、<xref:System.Windows.Documents.Paragraph> レベルで動作します。</span><span class="sxs-lookup"><span data-stu-id="5c457-895">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="5c457-896">段落内のコンテンツを部分的に選択したときにこのコマンドが呼び出された場合 (キャレットが段落内にある場合は空の選択を含む)、要求された効果は段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-896">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="5c457-897">複数の段落にわたる選択に対してこのコマンドを呼び出すと、選択範囲に含まれる各段落の内容全体に効果が適用されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-897">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="5c457-898">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-898">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-899">このコマンドは <xref:System.Windows.Controls.RichTextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-899">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleNumbering"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-900">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-900">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleNumbering"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-901">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-901">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-902">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-902">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-903"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-903">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-904"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-904">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-905">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-905">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-906">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-906">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-907">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-907">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-908">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-908">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSubscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSubscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSubscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSubscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSubscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleSubscript : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-909">現在の選択範囲に対して下付き文字の書式設定を切り替えるよう要求する <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-909">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> command, which requests that subscript formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="5c457-910">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-910">The requested command.</span></span>  <span data-ttu-id="5c457-911">このコマンドの既定のキージェスチャは <see langword="OemPlus" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-911">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemPlus" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-912">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-912">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_ToggleSubscript"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-913">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-913">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleSubscript"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-914">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-914">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-915">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-915">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-916"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-916">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-917"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-917">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-918">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-918">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-919">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-919">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-920">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-920">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-921">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-921">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSuperscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSuperscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSuperscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSuperscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSuperscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleSuperscript : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-922">現在の選択範囲に対して上付き文字の書式設定を切り替えるよう要求する <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-922">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> command, which requests that superscript formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="5c457-923">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-923">The requested command.</span></span>  <span data-ttu-id="5c457-924">このコマンドの既定のキージェスチャは +<see langword="Shift" />+<see langword="OemPlus" /><see langword="Ctrl" />ます。</span><span class="sxs-lookup"><span data-stu-id="5c457-924">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="OemPlus" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-925">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-925">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_ToggleSuperscript"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-926">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-926">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleSuperscript"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-927">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-927">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-928">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-928">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-929"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-929">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-930"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-930">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-931">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-931">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-932">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-932">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-933">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-933">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-934">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-934">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleUnderline">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleUnderline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleUnderline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleUnderline As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleUnderline { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleUnderline : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c457-935">現在の選択範囲に対して <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> の書式設定を切り替えるよう要求する <see cref="T:System.Windows.Documents.Underline" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="5c457-935">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> command, which requests that <see cref="T:System.Windows.Documents.Underline" /> formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="5c457-936">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="5c457-936">The requested command.</span></span>  <span data-ttu-id="5c457-937">このコマンドの既定のキージェスチャは <see langword="U" />+<see langword="Ctrl" />です。</span><span class="sxs-lookup"><span data-stu-id="5c457-937">The default key gesture for this command is <see langword="Ctrl" />+<see langword="U" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c457-938">選択範囲が空でカレットが単語内にある場合は、単語全体を含むように選択範囲が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-938">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="5c457-939">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="5c457-939">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="5c457-940">このコマンドは <xref:System.Windows.Controls.RichTextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="5c457-940">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleUnderline"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5c457-941">XAML 属性の使用</span><span class="sxs-lookup"><span data-stu-id="5c457-941">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleUnderline"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="5c457-942">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c457-942">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="5c457-943">この例では、<xref:System.Windows.Controls.RichTextBox> はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="5c457-943">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="5c457-944"><xref:System.Windows.Controls.RichTextBox> は、(<xref:System.Windows.FrameworkElement>から継承された) <xref:System.Windows.IInputElement> インターフェイスを実装し、多くの編集コマンドのネイティブサポートが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="5c457-944">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="5c457-945"><xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="5c457-945">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="5c457-946">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは編集コマンドに `null` 必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-946">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="5c457-947">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c457-947">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="5c457-948">このオブジェクトは、<xref:System.Windows.IInputElement> インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c457-948">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="5c457-949">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5c457-949">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
  </Members>
</Type>
