<Type Name="ExecutionProperties" FullName="System.Activities.ExecutionProperties">
  <Metadata><Meta Name="ms.openlocfilehash" Value="41b864037b84f8eb8e966fe371fc72e7b6b3da42" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78724354" /></Metadata><TypeSignature Language="C#" Value="public sealed class ExecutionProperties : System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExecutionProperties extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Activities.ExecutionProperties" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExecutionProperties&#xA;Implements IEnumerable(Of KeyValuePair(Of String, Object))" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExecutionProperties sealed : System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt;" />
  <TypeSignature Language="F#" Value="type ExecutionProperties = class&#xA;    interface seq&lt;KeyValuePair&lt;string, obj&gt;&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="86668-101">特定のスコープでのプロパティのコレクションを表します。</span><span class="sxs-lookup"><span data-stu-id="86668-101">Represents the collection of properties at a particular scope.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86668-102">CLR は、スレッド ローカル ストレージ (TLS) を介して各スレッドの実行コンテキストを維持します。</span><span class="sxs-lookup"><span data-stu-id="86668-102">Through thread local storage (TLS), the CLR maintains an execution context for each thread.</span></span> <span data-ttu-id="86668-103">この実行コンテキストは、スレッド ID、アンビエント トランザクション、現在のアクセス許可セットなど、既知のスレッド プロパティだけでなく、名前付きスロットのようなユーザー定義のスレッド プロパティを制御します。</span><span class="sxs-lookup"><span data-stu-id="86668-103">This execution context governs well-known thread properties such as the thread identity, the ambient transaction, and the current permission set as well as user-defined thread properties like named slots.</span></span>  
  
 <span data-ttu-id="86668-104">CLR を直接対象にするプログラムとは異なり、ワークフロー プログラムは、スレッド非依存環境で実行されるツリーに階層的にスコープ設定されます。</span><span class="sxs-lookup"><span data-stu-id="86668-104">Unlike programs directly targeting the CLR, workflow programs are hierarchically-scoped trees that execute in a thread-agnostic environment.</span></span> <span data-ttu-id="86668-105">つまり、特定の作業項目のスコープに含まれるコンテキストを判断するために、標準の TLS 機構を直接使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="86668-105">This implies that the standard TLS mechanisms cannot directly be used to determine what context is in scope for a given work item.</span></span> <span data-ttu-id="86668-106">たとえば、2 つの並行する実行の分岐で異なる ID を使用していても、スケジューラーは同じ CLR スレッド上でそれらの実行をインターリーブすることがあります。</span><span class="sxs-lookup"><span data-stu-id="86668-106">For example, two parallel branches of execution might use different identities yet the scheduler might interleave their execution on the same CLR thread.</span></span>  
  
 <span data-ttu-id="86668-107">実行プロパティでは、サブツリーのスコープに含まれるプロパティをアクティビティで宣言できるだけでなく、CLR オブジェクトと適切に相互作用するように TLS の設定および設定解除を行うフックを実現できます。</span><span class="sxs-lookup"><span data-stu-id="86668-107">Execution properties allow an activity to declare which properties are in scope for its sub-tree as well as provide hooks for setting up and tearing down TLS to properly interoperate with CLR objects.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86668-108">新しいプロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="86668-108">Registers a new property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name, object property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name, object property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.Add(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (name As String, property As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ name, System::Object ^ property);" />
      <MemberSignature Language="F#" Value="member this.Add : string * obj -&gt; unit" Usage="executionProperties.Add (name, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="property" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86668-109">プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="86668-109">The name of the property.</span></span></param>
        <param name="property"><span data-ttu-id="86668-110">プロパティを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="86668-110">The object that represents the property.</span></span></param>
        <summary><span data-ttu-id="86668-111">指定された名前を使用して新しいプロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="86668-111">Registers a new property using the specified name.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name, object property, bool onlyVisibleToPublicChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name, object property, bool onlyVisibleToPublicChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.Add(System.String,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (name As String, property As Object, onlyVisibleToPublicChildren As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ name, System::Object ^ property, bool onlyVisibleToPublicChildren);" />
      <MemberSignature Language="F#" Value="member this.Add : string * obj * bool -&gt; unit" Usage="executionProperties.Add (name, property, onlyVisibleToPublicChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="property" Type="System.Object" />
        <Parameter Name="onlyVisibleToPublicChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86668-112">プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="86668-112">The name of the property.</span></span></param>
        <param name="property"><span data-ttu-id="86668-113">プロパティを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="86668-113">The object that represents the property.</span></span></param>
        <param name="onlyVisibleToPublicChildren"><span data-ttu-id="86668-114">このプロパティが所有アクティビティの子から見えるかどうかを指定する値。</span><span class="sxs-lookup"><span data-stu-id="86668-114">A value that determines whether this property is visible to the children of the owning activity.</span></span></param>
        <summary><span data-ttu-id="86668-115">指定された名前および子可視性を使用して、新しいプロパティを登録します。</span><span class="sxs-lookup"><span data-stu-id="86668-115">Registers a property using the specified name and child visibility.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public object Find (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Find(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.Find(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Find(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.Find : string -&gt; obj" Usage="executionProperties.Find name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86668-116">プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="86668-116">The name of the property.</span></span></param>
        <summary><span data-ttu-id="86668-117">所定の名前の最も近いプロパティを返します。</span><span class="sxs-lookup"><span data-stu-id="86668-117">Returns the nearest property of the given name.</span></span></summary>
        <returns><span data-ttu-id="86668-118">所定の名前の最も近いプロパティ。</span><span class="sxs-lookup"><span data-stu-id="86668-118">The nearest property of the given name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86668-119"><xref:System.Activities.ExecutionProperties.Find%2A> は、階層的なスコープ指定を使用して最も近い見えるプロパティを見つけます。</span><span class="sxs-lookup"><span data-stu-id="86668-119"><xref:System.Activities.ExecutionProperties.Find%2A> finds the nearest visible property using hierarchical scoping.</span></span> <span data-ttu-id="86668-120">2 つのプロパティの名前が同じ場合、親スコープで最も近いプロパティが返されます。</span><span class="sxs-lookup"><span data-stu-id="86668-120">If two properties have the same name, the closest property at the parent scope is returned.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt;" Usage="executionProperties.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86668-121">プロパティのコレクションを反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="86668-121">Returns an enumerator that iterates through the collection of properties.</span></span></summary>
        <returns><span data-ttu-id="86668-122">プロパティのコレクションを反復処理する列挙子。</span><span class="sxs-lookup"><span data-stu-id="86668-122">An enumerator that iterates through the collection of properties.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Activities.ExecutionProperties.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Activities.ExecutionProperties.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86668-123">現在のスコープで登録されているプロパティがあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="86668-123">Gets a value that indicates whether there are properties registered at the current scope.</span></span></summary>
        <value><span data-ttu-id="86668-124">登録されているプロパティがある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="86668-124"><see langword="true" /> if there are properties registered; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; bool" Usage="executionProperties.Remove name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86668-125">登録を解除するプロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="86668-125">The name of the property to unregister.</span></span></param>
        <summary><span data-ttu-id="86668-126">指定された名前を持つプロパティの登録を解除します。</span><span class="sxs-lookup"><span data-stu-id="86668-126">Unregisters the property with the specified name.</span></span></summary>
        <returns><span data-ttu-id="86668-127">プロパティが登録解除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="86668-127"><see langword="true" /> if the property was unregistered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86668-128">アクティビティが完了すると、プロパティは自動的に登録を解除されます。</span><span class="sxs-lookup"><span data-stu-id="86668-128">Properties are automatically unregistered when the activity completes.</span></span> <span data-ttu-id="86668-129">このメソッドを使用して、アクティビティが完了する前にプロパティの登録を解除することもできます。</span><span class="sxs-lookup"><span data-stu-id="86668-129">This method can be used to unregister a property before the activity completes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="executionProperties.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86668-130">プロパティのコレクションを反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="86668-130">Returns an enumerator that iterates through the collection of properties.</span></span></summary>
        <returns><span data-ttu-id="86668-131">プロパティのコレクションを反復処理する列挙子。</span><span class="sxs-lookup"><span data-stu-id="86668-131">An enumerator that iterates through the collection of properties.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
