<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0e406bfbdbc753a95ca5d601c7932e83f53ceedd" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83965576" /></Metadata><TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ワークフローをメソッド呼び出しであるかのように呼び出す手段を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker> には、複数のワークフローを同期的に呼び出すためのインスタンス メソッドと静的メソッドの両方、および複数のワークフローを非同期的に呼び出すためのインスタンス メソッドが含まれています。  
  
 <xref:System.Activities.WorkflowInvoker> では、インスタンス コントロール (ブックマークの保持、アンロード、再開など) は許可されません。 インスタンス コントロールが必要な場合には、代わりに <xref:System.Activities.WorkflowApplication> を使用します。  
  
 インスタンス コントロールなしで複数のワークフローを同期的に実行するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> メソッドを呼び出します。 インスタンス コントロールなしで複数のワークフローを非同期的に実行するには、<xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> メソッドと <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> メソッドのペア、または <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> メソッドを使用します。  
  
   
  
## Examples  
 次の例は、1 つの <xref:System.Activities.Statements.WriteLine> アクティビティで構成される <xref:System.Activities.WorkflowInvoker> を使用してワークフローを同期的に呼び出します。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow"><see cref="T:System.Activities.WorkflowInvoker" /> クラスのこのインスタンスによって呼び出されるワークフローのワークフロー定義。</param>
        <summary><see cref="T:System.Activities.WorkflowInvoker" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker> には、複数のワークフローを同期的に呼び出すためのインスタンス メソッドと静的メソッドの両方、および複数のワークフローを非同期的に呼び出すためのインスタンス メソッドが含まれています。  
  
   
  
## Examples  
 次の例は、1 つの <xref:System.Activities.Statements.WriteLine> アクティビティで構成されるワークフローを呼び出します。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.IAsyncResult" /> 非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細については、「[非同期プログラミングの概要](/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">ワークフローが完了した時点で呼び出されるメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定された <see cref="T:System.AsyncCallback" /> およびユーザー指定状態を使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <returns>非同期呼び出し操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ワークフローが完了したら通知を受け、ワークフローの出力パラメーターを取得できるようにするには、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> メソッドから `callback` を呼び出します。 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> は、呼び出されたときにワークフローが完了していなかった場合、ワークフローが完了するまでブロックします。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。 詳細については、「[非同期プログラミングの概要](/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm)」を参照してください。  
  
   
  
## Examples  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。 `LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 これらは <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> を呼び出すことによって取得されます。 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="callback">ワークフローが完了した時点で呼び出されるメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" />、<see cref="T:System.AsyncCallback" />、およびユーザー指定状態を使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <returns>非同期呼び出し操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ワークフローが完了したら通知を受け、ワークフローの出力パラメーターを取得できるようにするには、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> メソッドから `callback` を呼び出します。 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> は、呼び出されたときにワークフローが完了していなかった場合、ワークフローが完了するまでブロックします。  ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。 詳細については、「[非同期プログラミングの概要](/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm)」を参照してください。  
  
   
  
## Examples  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。 `LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 これらは <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> を呼び出すことによって取得されます。 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <param name="callback">ワークフローが完了した時点で呼び出されるメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定されたタイムアウト時間、<see cref="T:System.AsyncCallback" />、およびユーザー指定状態を使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <returns>非同期呼び出し操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ワークフローが完了したら通知を受け、ワークフローの出力パラメーターを取得できるようにするには、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> メソッドから `callback` を呼び出します。 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> は、呼び出されたときにワークフローが完了していなかった場合、ワークフローが完了するまでブロックします。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されます。そして、<xref:System.TimeoutException> メソッドが呼び出されると、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。 詳細については、「[非同期プログラミングの概要](/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm)」を参照してください。  
  
   
  
## Examples  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。 `LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 これらは <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> を呼び出すことによって取得されます。 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <param name="callback">ワークフローが完了した時点で呼び出されるメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" />、タイムアウト時間、<see cref="T:System.AsyncCallback" />、およびユーザー指定状態を使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <returns>非同期呼び出し操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ワークフローが完了したら通知を受け、ワークフローの出力パラメーターを取得できるようにするには、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> メソッドから `callback` を呼び出します。 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> は、呼び出されたときにワークフローが完了していなかった場合、ワークフローが完了するまでブロックします。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されます。そして、<xref:System.TimeoutException> が呼び出されると、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。 詳細については、「[非同期プログラミングの概要](/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm)」を参照してください。  
  
   
  
## Examples  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。 `LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 これらは <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> を呼び出すことによって取得されます。 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">ワークフローを取り消すためのトークン。</param>
        <summary>指定された <paramref name="userState" /> によって呼び出されたワークフローを取り消そうとします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 取り消すことができるのは、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> パラメーターを受け取る、`userState` オーバーロードのいずれかによって呼び出されるワークフローだけです。  
  
 キャンセルが成功した場合、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーに渡された <xref:System.Activities.InvokeCompletedEventArgs> の <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> プロパティは `true`に設定されます。それ以外の場合は、`false`に設定されます。  
  
   
  
## Examples  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。 `LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが呼び出されると、ホストはワークフローを取り消そうとします。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">ワークフローを開始した <see cref="T:System.IAsyncResult" /> 操作を参照する <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />。</param>
        <summary><see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> オーバーロードのいずれかを使用して呼び出されたワークフローの結果を返します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ワークフローが完了したら通知を受け、ワークフローの出力パラメーターを取得できるようにするには、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> によって指定される`callback` メソッドから <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> を呼び出します。 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> は、呼び出されたときにワークフローが完了していなかった場合、ワークフローが完了するまでブロックします。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して非同期的に呼び出されるワークフローの結果を返します。 詳細については、「[非同期プログラミングの概要](/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm)」を参照してください。  
  
   
  
## Examples  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。 `LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 これらは <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> を呼び出すことによって取得されます。 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.ObjectModel.Collection`1" /> インスタンスによって呼び出されるワークフローが使用できる拡張機能の <see cref="T:System.Activities.WorkflowInvoker" /> を取得します。</summary>
        <value><see cref="T:System.Collections.ObjectModel.Collection`1" /> インスタンスによって呼び出されるワークフローが使用できる拡張機能の <see cref="T:System.Activities.WorkflowInvoker" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、<xref:System.Activities.WorkflowInvoker> インスタンスに拡張機能を追加して、呼び出されるワークフローで使用できるようにするためにワークフローのホスト作成者によって使用されます。  
  
   
  
## Examples  
 次の例は、カスタム <xref:System.Activities.Tracking.TrackingParticipant> を <xref:System.Activities.WorkflowInvoker> インスタンスの <xref:System.Activities.WorkflowInvoker.Extensions%2A> コレクションに登録します。 このコード例は、[カスタム追跡](/dotnet/framework/windows-workflow-foundation/samples/custom-tracking)サンプルの一部です。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ワークフローを同期的に呼び出して、引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリを返します。これらの値は、ワークフローの出力を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> コンストラクターに渡されたワークフロー定義を使用して、ワークフローを同期的に呼び出します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
   
  
## Examples  
 次の例は、1 つの `DiceRoll` アクティビティで構成されるワークフローを呼び出します。 `DiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 `Invoke` への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。 ワークフローは、`WorkflowInvoker` コンストラクターに渡されたワークフロー定義を使用して2回呼び出されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 ワークフローのルート アクティビティに出力引数がない、またはホストで出力引数が必要でない場合は、無視されます。 次の例は、出力引数を持たない 1 つの <xref:System.Activities.Statements.WriteLine> アクティビティで構成されるワークフローを呼び出します。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">呼び出すワークフローのワークフロー定義。</param>
        <summary>指定されたワークフロー定義を使用してワークフローを同期的に呼び出します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
   
  
## Examples  
 次の例は、1 つの `DiceRoll` アクティビティで構成されるワークフローを呼び出します。 `DiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 `Invoke` への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 ワークフローのルート アクティビティに出力引数がない、またはホストで出力引数が必要でない場合は、無視されます。 次の例は、出力引数を持たない 1 つの <xref:System.Activities.Statements.WriteLine> アクティビティで構成されるワークフローを呼び出します。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <summary><see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> コンストラクターに同期的に渡されるアクティビティを入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用して呼び出します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
   
  
## Examples  
 次の例は、2 つの入力引数と 2 つの出力引数を持つ 1 つの `Divide` アクティビティで構成されるワークフローを呼び出します。 ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。 `Invoke` の呼び出しから制御が戻るときに、同様に引数名でキー指定された各出力引数が、`outputs` 辞書で返されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 ワークフローが `CodeActivity<TResult>` や `Activity<TResult>`などの <xref:System.Activities.ActivityWithResult>から派生し、明確に定義された <xref:System.Activities.Activity%601.Result%2A> 出力引数に加えて出力引数がある場合は、追加の引数を取得するために、このような `Invoke`の非ジェネリックオーバーロードを使用する必要があります。 これを行うには、`WorkflowInvoker` コンストラクターに渡されるワークフロー定義を <xref:System.Activities.Activity>型にする必要があります。 この例では、`Divide` アクティビティは `CodeActivity<int>`から派生しますが、1つの戻り値ではなく引数のディクショナリを返す `Invoke`のこのオーバーロードが使用されるように、<xref:System.Activities.Activity> として宣言されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <summary>指定されたタイムアウト時間を使用して、ワークフローを同期的に呼び出します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
   
  
## Examples  
 次の例は、2 つの <xref:System.Activities.Statements.WriteLine> アクティビティと <xref:System.Activities.Statements.Delay> を 1 分として設定した 1 つの <xref:System.Activities.Statements.Delay.Duration%2A> アクティビティを持つワークフローを呼び出します。 このワークフローは、1 回目は 2 分のタイムアウト時間、2 回目は 30 秒のタイムアウト時間で 2 回呼び出されます。 最初のワークフローは正常に完了しますが、2 回目は正常に完了せず、<xref:System.TimeoutException> がスローされて次のメッセージが表示されます。  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 出力引数で `Invoke` を使用する例については、タイムアウト間隔を指定せずに、このオーバーロードと同じパラメーターを持つ <xref:System.Activities.WorkflowInvoker.Invoke%2A> のオーバーロードを参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">呼び出すワークフローのワークフロー定義。</param>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <summary>指定されたワークフロー定義、および入力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用して、1 つのワークフローを同期的に呼び出します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
   
  
## Examples  
 次の例は、2 つの入力引数と 2 つの出力引数を持つ 1 つの `Divide` アクティビティで構成されるワークフローを呼び出します。 ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。 `Invoke` の呼び出しから制御が戻るときに、同様に引数名でキー指定された各出力引数が、`outputs` 辞書で返されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 ワークフローが `CodeActivity<TResult>` や `Activity<TResult>`などの <xref:System.Activities.ActivityWithResult>から派生し、明確に定義された <xref:System.Activities.Activity%601.Result%2A> 出力引数に加えて出力引数がある場合は、追加の引数を取得するために、このような `Invoke`の非ジェネリックオーバーロードを使用する必要があります。 これを行うには、`Invoke` に渡されるワークフロー定義は <xref:System.Activities.Activity> 型である必要があります。 この例では、`Divide` アクティビティは `CodeActivity<int>`から派生しますが、1つの戻り値ではなく引数のディクショナリを返す `Invoke`のこのオーバーロードが使用されるように、<xref:System.Activities.Activity> として宣言されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">呼び出すワークフローのワークフロー定義。</param>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <summary>指定されたワークフロー定義およびタイムアウト時間を使用して、1 つのワークフローを同期的に呼び出します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
   
  
## Examples  
 次の例は、2 つの <xref:System.Activities.Statements.WriteLine> アクティビティと <xref:System.Activities.Statements.Delay> を 1 分として設定した 1 つの <xref:System.Activities.Statements.Delay.Duration%2A> アクティビティを持つワークフローを呼び出します。 このワークフローは、1 回目は 2 分のタイムアウト時間、2 回目は 30 秒のタイムアウト時間で 2 回呼び出されます。 最初のワークフローは正常に完了しますが、2 回目は正常に完了せず、<xref:System.TimeoutException> がスローされます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 出力引数で `Invoke` を使用する例については、タイムアウト間隔を指定せずに、このオーバーロードと同じパラメーターを持つ <xref:System.Activities.WorkflowInvoker.Invoke%2A> のオーバーロードを参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <summary><see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> コンストラクターに同期的に渡されるアクティビティを入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" /> および指定されたタイムアウト時間を使用して呼び出します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
   
  
## Examples  
 次の例は、2 つの <xref:System.Activities.Statements.WriteLine> アクティビティと <xref:System.Activities.Statements.Delay> を 1 分として設定した 1 つの <xref:System.Activities.Statements.Delay.Duration%2A> アクティビティを持つワークフローを呼び出します。 このワークフローは、1 回目は 2 分のタイムアウト時間、2 回目は 30 秒のタイムアウト時間で 2 回呼び出されます。 最初のワークフローは正常に完了しますが、2 回目は正常に完了せず、<xref:System.TimeoutException> がスローされて次のメッセージが表示されます。  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 入力引数と出力引数を使用して `Invoke` を使用する例については、このオーバーロードと同じパラメーターを持つ <xref:System.Activities.WorkflowInvoker.Invoke%2A> のオーバーロード (タイムアウト間隔なし) を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">呼び出すワークフローのワークフロー定義。</param>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <summary>指定されたワークフロー定義、入力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" />、およびタイムアウト時間を使用して、1 つのワークフローを同期的に呼び出します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
   
  
## Examples  
 次の例は、2 つの <xref:System.Activities.Statements.WriteLine> アクティビティと <xref:System.Activities.Statements.Delay> を 1 分として設定した 1 つの <xref:System.Activities.Statements.Delay.Duration%2A> アクティビティを持つワークフローを呼び出します。 このワークフローは、1 回目は 2 分のタイムアウト時間、2 回目は 30 秒のタイムアウト時間で 2 回呼び出されます。 最初のワークフローは正常に完了しますが、2 回目は正常に完了せず、<xref:System.TimeoutException> がスローされます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 入力引数と出力引数を使用して `Invoke` を使用する例については、このオーバーロードと同じパラメーターを持つ <xref:System.Activities.WorkflowInvoker.Invoke%2A> のオーバーロード (タイムアウト間隔なし) を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">ワークフローの型。</typeparam>
        <param name="workflow">呼び出すワークフローのワークフロー定義。 ワークフロー定義は、<see cref="T:System.Activities.ActivityWithResult" /> から派生する必要があります。</param>
        <summary><see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> コンストラクターに渡されたワークフロー定義を使用して、ワークフローを同期的に呼び出します。</summary>
        <returns>型 TResult の値およびアクティビティの実行結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
   
  
## Examples  
 次の例では、2つの入力引数を持ち、適切に定義された <xref:System.Activities.Activity%601.Result%2A> 出力引数を1つ持つ `CodeActivity<int>` から派生する、1つの `Add` アクティビティから成るワークフローを呼び出します。 ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。 `Invoke` の呼び出しがを返すと、<xref:System.Activities.Activity%601.Result%2A> 出力引数の値が返されます。 このコード例は、 [「WorkflowInvoker 元クラス](/dotnet/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class)のサンプルの使用」に基づいています。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">ワークフローの型。</typeparam>
        <param name="workflow">呼び出すワークフローのワークフロー定義。</param>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <summary>指定されたワークフロー定義、および入力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用して、1 つのワークフローを同期的に呼び出します。</summary>
        <returns>型 TResult の値およびアクティビティの実行結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
   
  
## Examples  
 次の例では、2つの入力引数を持ち、適切に定義された <xref:System.Activities.Activity%601.Result%2A> 出力引数を1つ持つ `CodeActivity<int>` から派生する、1つの `Add` アクティビティから成るワークフローを呼び出します。 ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。 `Invoke` の呼び出しがを返すと、<xref:System.Activities.Activity%601.Result%2A> 出力引数の値が返されます。 このコード例は、 [「WorkflowInvoker 元クラス](/dotnet/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class)のサンプルの使用」に基づいています。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">ワークフローの型。</typeparam>
        <param name="workflow">呼び出すワークフローのワークフロー定義。</param>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <summary>指定されたワークフロー定義、入力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" />、およびタイムアウト時間を使用して、1 つのワークフローを同期的に呼び出します。</summary>
        <returns>型 TResult の値およびアクティビティの実行結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
   
  
## Examples  
 次の例では、2つの入力引数を持ち、適切に定義された <xref:System.Activities.Activity%601.Result%2A> 出力引数を1つ持つ `CodeActivity<int>` から派生する、1つの `Add` アクティビティから成るワークフローを呼び出します。 ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。 `Invoke` の呼び出しがを返すと、<xref:System.Activities.Activity%601.Result%2A> 出力引数の値が返されます。 このコード例は、 [「WorkflowInvoker 元クラス](/dotnet/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class)のサンプルの使用」に基づいています。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * IDictionary * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">ワークフローの型。</typeparam>
        <param name="workflow">呼び出すワークフローのワークフロー定義。</param>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="additionalOutputs">ワークフローの追加出力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <summary>指定されたワークフロー定義、入力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" />、追加の出力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" />、およびタイムアウト時間を使用して、1 つのワークフローを同期的に呼び出します。</summary>
        <returns>型 TResult の値およびアクティビティの実行結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
   
  
## Examples  
 次の例では、2つの入力引数を持ち、適切に定義された <xref:System.Activities.Activity%601.Result%2A> 出力引数を1つ持つ `CodeActivity<int>` から派生する、1つの `Add` アクティビティから成るワークフローを呼び出します。 ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。 `Invoke` の呼び出しがを返すと、<xref:System.Activities.Activity%601.Result%2A> 出力引数の値が返されます。 このコード例は、 [「WorkflowInvoker 元クラス](/dotnet/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class)のサンプルの使用」に基づいています。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。 詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。 詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。  
  
   
  
## Examples  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。 `LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <summary>入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。 詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。  
  
   
  
## Examples  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。 `LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">この特定の非同期呼び出し操作を他の現在の非同期呼び出し操作と区別するために使用されるユーザー指定のオブジェクト。</param>
        <summary>指定された一意の識別子を使用してワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `userState` パラメーターは、現在のアクティビティに関して現在実行中の <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作すべてにおいて一意である必要があります。 `userState` パラメーターが一意でない場合、<xref:System.ArgumentException> がスローされます。 `userState` は、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> におけるワークフローを識別するために使用されます。さらに、<xref:System.Activities.WorkflowInvoker.CancelAsync%2A> を使用してワークフローを取り消すためにも使用されます。  
  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。 詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。  
  
   
  
## Examples  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。 `LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <summary>指定タイムアウト時間を使用して、ワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。 詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。  
  
   
  
## Examples  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。 `LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="userState">この特定の非同期呼び出し操作を他の現在の非同期呼び出し操作と区別するために使用されるユーザー指定のオブジェクト。</param>
        <summary>入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" /> および一意の識別子を使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `userState` パラメーターは、現在のアクティビティに関して現在実行中の <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作すべてにおいて一意である必要があります。 `userState` が一意でない場合には、<xref:System.ArgumentException> がスローされます。 `userState` は、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> におけるワークフローを識別するために使用されます。さらに、<xref:System.Activities.WorkflowInvoker.CancelAsync%2A> を使用してワークフローを取り消すためにも使用されます。  
  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。 詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。  
  
   
  
## Examples  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。 `LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <summary>入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" />、および指定されたタイムアウト時間を使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。 詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。  
  
   
  
## Examples  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。 `LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <param name="userState">この特定の非同期呼び出し操作を他の現在の非同期呼び出し操作と区別するために使用されるユーザー指定のオブジェクト。</param>
        <summary>指定タイムアウト時間および一意の識別子を使用して、ワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `userState` パラメーターは、現在のアクティビティに関して現在実行中の <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作すべてにおいて一意である必要があります。 `userState` が一意でない場合には、<xref:System.ArgumentException> がスローされます。 `userState` は、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> におけるワークフローを識別するために使用されます。さらに、<xref:System.Activities.WorkflowInvoker.CancelAsync%2A> を使用してワークフローを取り消すためにも使用されます。  
  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。 詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。  
  
   
  
## Examples  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。 `LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <param name="userState">この特定の非同期呼び出し操作を他の現在の非同期呼び出し操作と区別するために使用されるユーザー指定のオブジェクト。</param>
        <summary>入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" />、指定されたタイムアウト時間、および一意の識別子を使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `userState` パラメーターは、現在のアクティビティに関して現在実行中の <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作すべてにおいて一意である必要があります。 `userState` が一意でない場合には、<xref:System.ArgumentException> がスローされます。 `userState` は、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> におけるワークフローを識別するために使用されます。さらに、<xref:System.Activities.WorkflowInvoker.CancelAsync%2A> を使用してワークフローを取り消すためにも使用されます。  
  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。 詳細については、「[イベント ベースの非同期パターンの概要](https://go.microsoft.com/fwlink/?LinkId=141765)」を参照してください。  
  
   
  
## Examples  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。 `LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> オーバーロードのいずれかによって呼び出されるワークフローが完了するか取り消されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これを処理して、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> オーバーロードの 1 つを使用して呼び出したワークフローが正常に完了したかどうかを判断し、完了したワークフローの出力引数を取得します。  
  
   
  
## Examples  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。 `LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
