<Type Name="DragEventArgs" FullName="System.Windows.Forms.DragEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="362efc2e49ef25fa1abd34d6e38fa23b4d880bd7" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75179357" /></Metadata><TypeSignature Language="C#" Value="public class DragEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DragEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DragEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DragEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DragEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type DragEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="E:System.Windows.Forms.Control.DragDrop" /> イベント、<see cref="E:System.Windows.Forms.Control.DragEnter" /> イベント、または <see cref="E:System.Windows.Forms.Control.DragOver" /> イベントのデータを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Control.DragDrop> イベントは、ユーザーがドラッグアンドドロップ操作を完了したときに発生します。この操作を行うには、コントロール上でオブジェクトをドラッグし、マウスボタンを離してコントロールにドロップします。 <xref:System.Windows.Forms.Control.DragEnter> イベントは、マウスでオブジェクトをドラッグしているときに、ユーザーがマウスポインターをコントロール上に移動したときに発生します。 <xref:System.Windows.Forms.Control.DragOver> イベントは、マウスでオブジェクトをドラッグしているときに、ユーザーがマウスポインターをコントロールの上に移動したときに発生します。  
  
 <xref:System.Windows.Forms.DragEventArgs> オブジェクトは、このイベントに関連付けられているすべてのデータを指定します。SHIFT、CTRL、ALT の各キーの現在の状態です。マウスポインターの位置。ドラッグイベントのソースとターゲットで許可されているドラッグアンドドロップ効果。  
  
 イベントモデルの詳細については、「[イベントの処理と発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次の例は、2つの <xref:System.Windows.Forms.ListBox> コントロール間のドラッグアンドドロップ操作を示しています。 この例では、ドラッグ操作の開始時に <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを呼び出します。 マウスが <xref:System.Windows.Forms.Control.MouseDown> イベント中にマウスの位置から <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> を超えて移動した場合、ドラッグ操作が開始されます。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドは、`MouseDown` イベント中にドラッグする項目のインデックスを決定するために使用されます。  
  
 この例では、ドラッグアンドドロップ操作にカスタムカーソルを使用する方法も示しています。 この例では、`3dwarro.cur` と `3dwno.cur`の2つのカーソルファイルがアプリケーションディレクトリに存在することを前提としています。これは、それぞれ、カスタムドラッグアンドドロップアンドドロップカーソルです。 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっている場合は、カスタムカーソルが使用されます。 カスタムカーソルは <xref:System.Windows.Forms.Control.GiveFeedback> イベントハンドラーで設定されます。  
  
 キーボードの状態は、右 `ListBox`の <xref:System.Windows.Forms.Control.DragOver> イベントハンドラーで評価され、SHIFT、CTRL、ALT、CTRL + ALT の各キーの状態に基づいてドラッグ操作がどのように行われるかを決定します。 ドロップが発生する `ListBox` 内の場所は、`DragOver` イベント中にも決定されます。 削除するデータが `String`でない場合は、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> が <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>に設定されます。 最後に、ドロップの状態が `DropLocationLabel`<xref:System.Windows.Forms.Label>に表示されます。  
  
 右側の `ListBox` にドロップするデータは、<xref:System.Windows.Forms.Control.DragDrop> イベントハンドラーで決定され、`ListBox`内の適切な場所に `String` 値が追加されます。 ドラッグ操作がフォームの境界の外に移動した場合、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントハンドラーでドラッグアンドドロップ操作が取り消されます。  
  
 このコード抜粋では、<xref:System.Windows.Forms.DragEventArgs> クラスの使用方法を示します。 完全なコード例については、<xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを参照してください。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 次の例は、ドラッグアンドドロップ操作のソースとターゲットの間で <xref:System.Windows.Forms.DragEventArgs> がどのように渡されるかを示しています。 この例では、<xref:System.Windows.Forms.ListBox> コントロールがデータのソースであり、<xref:System.Windows.Forms.RichTextBox> コントロールがターゲットです。 この例では、<xref:System.Windows.Forms.ListBox> コントロールに有効なファイル名の一覧が設定されていることを前提としています。 ユーザーが表示されているファイル名のいずれかを <xref:System.Windows.Forms.ListBox> コントロールから <xref:System.Windows.Forms.RichTextBox> コントロールにドラッグすると、ファイル名で参照されているファイルが開きます。  
  
 操作は、<xref:System.Windows.Forms.ListBox> コントロールの MouseDown イベントで開始されます。 <xref:System.Windows.Forms.RichTextBox.DragEnter> イベントハンドラーでは、<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> メソッドを使用して、データが <xref:System.Windows.Forms.RichTextBox> コントロールで表示できる形式であることを確認し、<xref:System.Windows.Forms.DragDropEffects> プロパティを設定して、ソース管理からターゲットコントロールにデータをコピーするように指定します。 最後に、<xref:System.Windows.Forms.RichTextBox> コントロールの System.windows.dragdrop.drop> イベントハンドラーは、<xref:System.Windows.Forms.IDataObject.GetData%2A> メソッドを使用して、開くファイル名を取得します。  
  
 [!code-cpp[RichTextDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextDragDrop/CS/form1.cs#1)]
 [!code-vb[RichTextDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextDragDrop/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DragDropEffects" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragOver" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DragEventArgs (System.Windows.Forms.IDataObject data, int keyState, int x, int y, System.Windows.Forms.DragDropEffects allowedEffect, System.Windows.Forms.DragDropEffects effect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.IDataObject data, int32 keyState, int32 x, int32 y, valuetype System.Windows.Forms.DragDropEffects allowedEffect, valuetype System.Windows.Forms.DragDropEffects effect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (data As IDataObject, keyState As Integer, x As Integer, y As Integer, allowedEffect As DragDropEffects, effect As DragDropEffects)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DragEventArgs(System::Windows::Forms::IDataObject ^ data, int keyState, int x, int y, System::Windows::Forms::DragDropEffects allowedEffect, System::Windows::Forms::DragDropEffects effect);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.DragEventArgs : System.Windows.Forms.IDataObject * int * int * int * System.Windows.Forms.DragDropEffects * System.Windows.Forms.DragDropEffects -&gt; System.Windows.Forms.DragEventArgs" Usage="new System.Windows.Forms.DragEventArgs (data, keyState, x, y, allowedEffect, effect)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="System.Windows.Forms.IDataObject" />
        <Parameter Name="keyState" Type="System.Int32" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="allowedEffect" Type="System.Windows.Forms.DragDropEffects" />
        <Parameter Name="effect" Type="System.Windows.Forms.DragDropEffects" />
      </Parameters>
      <Docs>
        <param name="data">このイベントと関連付けられたデータ。</param>
        <param name="keyState">Shift、Ctrl、Alt の各キーの現在の状態。</param>
        <param name="x">マウス カーソルの x 座標 (ピクセル単位)。</param>
        <param name="y">マウス カーソルの y 座標 (ピクセル単位)。</param>
        <param name="allowedEffect"><see cref="T:System.Windows.Forms.DragDropEffects" /> 値の 1 つ。</param>
        <param name="effect"><see cref="T:System.Windows.Forms.DragDropEffects" /> 値の 1 つ。</param>
        <summary>
          <see cref="T:System.Windows.Forms.DragEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="AllowedEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects AllowedEffect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects AllowedEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.AllowedEffect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowedEffect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects AllowedEffect { System::Windows::Forms::DragDropEffects get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowedEffect : System.Windows.Forms.DragDropEffects" Usage="System.Windows.Forms.DragEventArgs.AllowedEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドラッグ イベントの元の場所 (またはソース) で実行できるドラッグ アンド ドロップ操作を取得します。</summary>
        <value><see cref="T:System.Windows.Forms.DragDropEffects" /> 値の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントロールが <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=nameWithType> メソッドを呼び出すことによってドラッグアンドドロップ操作を開始すると、操作の許容される効果が指定されます。 たとえば、ソースからファイルをドラッグするときに、ファイルが読み取り専用の場合 (または、CD などの読み取り専用ストレージメディアから)、ソースは、ファイルをターゲットにコピーすることはできますが、転送はできないことを示します。  
  
 ドラッグしたデータに対して操作を実行する前に、このプロパティを調べて、操作が許可されていることを確認する必要があります。  
  
   
  
## Examples  
 次の例は、2つの <xref:System.Windows.Forms.ListBox> コントロール間のドラッグアンドドロップ操作を示しています。 この例では、ドラッグ操作の開始時に <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを呼び出します。 マウスが <xref:System.Windows.Forms.Control.MouseDown> イベント中にマウスの位置から <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> を超えて移動した場合、ドラッグ操作が開始されます。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドは、`MouseDown` イベント中にドラッグする項目のインデックスを決定するために使用されます。  
  
 この例では、ドラッグアンドドロップ操作にカスタムカーソルを使用する方法も示しています。 この例では、`3dwarro.cur` と `3dwno.cur`の2つのカーソルファイルがアプリケーションディレクトリに存在することを前提としています。これは、それぞれ、カスタムドラッグアンドドロップアンドドロップカーソルです。 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっている場合は、カスタムカーソルが使用されます。 カスタムカーソルは <xref:System.Windows.Forms.Control.GiveFeedback> イベントハンドラーで設定されます。  
  
 キーボードの状態は、右 `ListBox`の <xref:System.Windows.Forms.Control.DragOver> イベントハンドラーで評価され、SHIFT、CTRL、ALT、CTRL + ALT の各キーの状態に基づいてドラッグ操作がどのように行われるかを決定します。 ドロップが発生する `ListBox` 内の場所は、`DragOver` イベント中にも決定されます。 削除するデータが `String`でない場合は、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> が <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>に設定されます。 最後に、ドロップの状態が `DropLocationLabel`<xref:System.Windows.Forms.Label>に表示されます。  
  
 右側の `ListBox` にドロップするデータは、<xref:System.Windows.Forms.Control.DragDrop> イベントハンドラーで決定され、`ListBox`内の適切な場所に `String` 値が追加されます。 ドラッグ操作がフォームの境界の外に移動した場合、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントハンドラーでドラッグアンドドロップ操作が取り消されます。  
  
 このコード抜粋では、<xref:System.Windows.Forms.DragEventArgs> クラスの使用方法を示します。 完全なコード例については、<xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを参照してください。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IDataObject Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IDataObject Data" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As IDataObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IDataObject ^ Data { System::Windows::Forms::IDataObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : System.Windows.Forms.IDataObject" Usage="System.Windows.Forms.DragEventArgs.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IDataObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このイベントに関連付けられているデータを含む <see cref="T:System.Windows.Forms.IDataObject" /> を取得します。</summary>
        <value>このイベントと関連付けられたデータ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントハンドラーの本体では、<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> メソッドを使用して、データがドラッグされているコントロールの形式要件と一致するかどうかを判断できます。 また、形式の要件を満たすようにデータを変換するかどうかを指定することもできます。 ドラッグしたデータが書式要件を満たしている場合は、<xref:System.Windows.Forms.IDataObject.GetData%2A> メソッドを使用してデータを取得します。  
  
   
  
## Examples  
 次の例は、2つの <xref:System.Windows.Forms.ListBox> コントロール間のドラッグアンドドロップ操作を示しています。 この例では、ドラッグ操作の開始時に <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを呼び出します。 マウスが <xref:System.Windows.Forms.Control.MouseDown> イベント中にマウスの位置から <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> を超えて移動した場合、ドラッグ操作が開始されます。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドは、`MouseDown` イベント中にドラッグする項目のインデックスを決定するために使用されます。  
  
 この例では、ドラッグアンドドロップ操作にカスタムカーソルを使用する方法も示しています。 この例では、`3dwarro.cur` と `3dwno.cur`の2つのカーソルファイルがアプリケーションディレクトリに存在することを前提としています。これは、それぞれ、カスタムドラッグアンドドロップアンドドロップカーソルです。 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっている場合は、カスタムカーソルが使用されます。 カスタムカーソルは <xref:System.Windows.Forms.Control.GiveFeedback> イベントハンドラーで設定されます。  
  
 キーボードの状態は、右 `ListBox`の <xref:System.Windows.Forms.Control.DragOver> イベントハンドラーで評価され、SHIFT、CTRL、ALT、CTRL + ALT の各キーの状態に基づいてドラッグ操作がどのように行われるかを決定します。 ドロップが発生する `ListBox` 内の場所は、`DragOver` イベント中にも決定されます。 削除するデータが `String`でない場合は、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> が <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>に設定されます。 最後に、ドロップの状態が `DropLocationLabel`<xref:System.Windows.Forms.Label>に表示されます。  
  
 右側の `ListBox` にドロップするデータは、<xref:System.Windows.Forms.Control.DragDrop> イベントハンドラーで決定され、`ListBox`内の適切な場所に `String` 値が追加されます。 ドラッグ操作がフォームの境界の外に移動した場合、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントハンドラーでドラッグアンドドロップ操作が取り消されます。  
  
 このコード抜粋では、<xref:System.Windows.Forms.DragEventArgs> クラスの使用方法を示します。 完全なコード例については、<xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを参照してください。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects Effect { System::Windows::Forms::DragDropEffects get(); void set(System::Windows::Forms::DragDropEffects value); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Forms.DragDropEffects with get, set" Usage="System.Windows.Forms.DragEventArgs.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドラッグ アンド ドロップ操作のターゲットのドロップ効果を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.DragDropEffects" /> 値の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、適用される効果によって、ドラッグアンドドロップ操作の対象となるマウスカーソルが決まります。 これは、実行される操作についてユーザーにフィードバックを提供する場合に便利です。 たとえば、ソースからファイルをドラッグしたときに CTRL キーを押した場合は、<xref:System.Windows.Forms.DragDropEffects.Copy?displayProperty=nameWithType> を指定して、ターゲットがコピー操作を実行しようとしていることを示します。  
  
 ドラッグ操作にカスタムカーソルを使用する方法については、「<xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 次の例は、2つの <xref:System.Windows.Forms.ListBox> コントロール間のドラッグアンドドロップ操作を示しています。 この例では、ドラッグ操作の開始時に <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを呼び出します。 マウスが <xref:System.Windows.Forms.Control.MouseDown> イベント中にマウスの位置から <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> を超えて移動した場合、ドラッグ操作が開始されます。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドは、`MouseDown` イベント中にドラッグする項目のインデックスを決定するために使用されます。  
  
 この例では、ドラッグアンドドロップ操作にカスタムカーソルを使用する方法も示しています。 この例では、`3dwarro.cur` と `3dwno.cur`の2つのカーソルファイルがアプリケーションディレクトリに存在することを前提としています。これは、それぞれ、カスタムドラッグアンドドロップアンドドロップカーソルです。 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっている場合は、カスタムカーソルが使用されます。 カスタムカーソルは <xref:System.Windows.Forms.Control.GiveFeedback> イベントハンドラーで設定されます。  
  
 キーボードの状態は、右 `ListBox`の <xref:System.Windows.Forms.Control.DragOver> イベントハンドラーで評価され、SHIFT、CTRL、ALT、CTRL + ALT の各キーの状態に基づいてドラッグ操作がどのように行われるかを決定します。 ドロップが発生する `ListBox` 内の場所は、`DragOver` イベント中にも決定されます。 削除するデータが `String`でない場合は、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> が <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>に設定されます。 最後に、ドロップの状態が `DropLocationLabel`<xref:System.Windows.Forms.Label>に表示されます。  
  
 右側の `ListBox` にドロップするデータは、<xref:System.Windows.Forms.Control.DragDrop> イベントハンドラーで決定され、`ListBox`内の適切な場所に `String` 値が追加されます。 ドラッグ操作がフォームの境界の外に移動した場合、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントハンドラーでドラッグアンドドロップ操作が取り消されます。  
  
 このコード抜粋では、<xref:System.Windows.Forms.DragEventArgs> クラスの使用方法を示します。 完全なコード例については、<xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを参照してください。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="KeyState">
      <MemberSignature Language="C#" Value="public int KeyState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.KeyState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyState As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyState { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyState : int" Usage="System.Windows.Forms.DragEventArgs.KeyState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ボタンの状態と同様に、Shift、Ctrl、Alt の各キーの現在の状態を取得します。</summary>
        <value>Shift、Ctrl、Alt の各キー、およびマウス ボタンの現在の状態。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ドラッグアンドドロップ操作の効果を、特定のキーの状態に依存させることができます。 たとえば、ドラッグアンドドロップ操作中に CTRL キーまたは SHIFT キーが押されたかどうかに応じて、データをコピーまたは移動することができます。  
  
 <xref:System.Windows.Forms.DragEventArgs.KeyState%2A> プロパティで設定されているビットは、操作中に押されたキーまたはマウスボタンを識別します。 たとえば、マウスの左ボタンが押されている場合は、<xref:System.Windows.Forms.DragEventArgs.KeyState%2A> プロパティの最初のビットが設定されます。 ビットごとの AND 演算子を使用すると、特定のキー状態を調べることができます。  
  
 次の表に、指定したイベントで使用される値を示します。  
  
|値|Key|  
|-----------|---------|  
|1 (ビット 0)|マウスの左ボタン|  
|2 (ビット 1)|マウスの右ボタン|  
|4 (ビット 2)|Shift キー|  
|8 (ビット 3)|CTRL キー|  
|16 (ビット 4)|マウスの中央ボタン|  
|32 (ビット 5)|Alt キー。|  
  
   
  
## Examples  
 次の例は、2つの <xref:System.Windows.Forms.ListBox> コントロール間のドラッグアンドドロップ操作を示しています。 この例では、ドラッグ操作の開始時に <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを呼び出します。 マウスが <xref:System.Windows.Forms.Control.MouseDown> イベント中にマウスの位置から <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> を超えて移動した場合、ドラッグ操作が開始されます。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドは、`MouseDown` イベント中にドラッグする項目のインデックスを決定するために使用されます。  
  
 この例では、ドラッグアンドドロップ操作にカスタムカーソルを使用する方法も示しています。 この例では、`3dwarro.cur` と `3dwno.cur`の2つのカーソルファイルがアプリケーションディレクトリに存在することを前提としています。これは、それぞれ、カスタムドラッグアンドドロップアンドドロップカーソルです。 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっている場合は、カスタムカーソルが使用されます。 カスタムカーソルは <xref:System.Windows.Forms.Control.GiveFeedback> イベントハンドラーで設定されます。  
  
 キーボードの状態は、右 `ListBox`の <xref:System.Windows.Forms.Control.DragOver> イベントハンドラーで評価され、SHIFT、CTRL、ALT、CTRL + ALT の各キーの状態に基づいてドラッグ操作がどのように行われるかを決定します。 ドロップが発生する `ListBox` 内の場所は、`DragOver` イベント中にも決定されます。 削除するデータが `String`でない場合は、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> が <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>に設定されます。 最後に、ドロップの状態が `DropLocationLabel`<xref:System.Windows.Forms.Label>に表示されます。  
  
 右側の `ListBox` にドロップするデータは、<xref:System.Windows.Forms.Control.DragDrop> イベントハンドラーで決定され、`ListBox`内の適切な場所に `String` 値が追加されます。 ドラッグ操作がフォームの境界の外に移動した場合、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントハンドラーでドラッグアンドドロップ操作が取り消されます。  
  
 このコード抜粋では、<xref:System.Windows.Forms.DragEventArgs> クラスの使用方法を示します。 完全なコード例については、<xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを参照してください。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public int X { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.X" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property X As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int X { int get(); };" />
      <MemberSignature Language="F#" Value="member this.X : int" Usage="System.Windows.Forms.DragEventArgs.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターの x 座標 (画面座標) を取得します。</summary>
        <value>マウス ポインターの x 座標 (ピクセル単位)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、2つの <xref:System.Windows.Forms.ListBox> コントロール間のドラッグアンドドロップ操作を示しています。 この例では、ドラッグ操作の開始時に <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを呼び出します。 マウスが <xref:System.Windows.Forms.Control.MouseDown> イベント中にマウスの位置から <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> を超えて移動した場合、ドラッグ操作が開始されます。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドは、`MouseDown` イベント中にドラッグする項目のインデックスを決定するために使用されます。  
  
 この例では、ドラッグアンドドロップ操作にカスタムカーソルを使用する方法も示しています。 この例では、`3dwarro.cur` と `3dwno.cur`の2つのカーソルファイルがアプリケーションディレクトリに存在することを前提としています。これは、それぞれ、カスタムドラッグアンドドロップアンドドロップカーソルです。 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっている場合は、カスタムカーソルが使用されます。 カスタムカーソルは <xref:System.Windows.Forms.Control.GiveFeedback> イベントハンドラーで設定されます。  
  
 キーボードの状態は、右 `ListBox`の <xref:System.Windows.Forms.Control.DragOver> イベントハンドラーで評価され、SHIFT、CTRL、ALT、CTRL + ALT の各キーの状態に基づいてドラッグ操作がどのように行われるかを決定します。 ドロップが発生する `ListBox` 内の場所は、`DragOver` イベント中にも決定されます。 削除するデータが `String`でない場合は、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> が <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>に設定されます。 最後に、ドロップの状態が `DropLocationLabel`<xref:System.Windows.Forms.Label>に表示されます。  
  
 右側の `ListBox` にドロップするデータは、<xref:System.Windows.Forms.Control.DragDrop> イベントハンドラーで決定され、`ListBox`内の適切な場所に `String` 値が追加されます。 ドラッグ操作がフォームの境界の外に移動した場合、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントハンドラーでドラッグアンドドロップ操作が取り消されます。  
  
 このコード抜粋では、<xref:System.Windows.Forms.DragEventArgs> クラスの使用方法を示します。 完全なコード例については、<xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを参照してください。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public int Y { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Y" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Y As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Y { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Y : int" Usage="System.Windows.Forms.DragEventArgs.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターの y 座標 (画面座標) を取得します。</summary>
        <value>マウス ポインターの y 座標 (ピクセル単位)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、2つの <xref:System.Windows.Forms.ListBox> コントロール間のドラッグアンドドロップ操作を示しています。 この例では、ドラッグ操作の開始時に <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを呼び出します。 マウスが <xref:System.Windows.Forms.Control.MouseDown> イベント中にマウスの位置から <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> を超えて移動した場合、ドラッグ操作が開始されます。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドは、`MouseDown` イベント中にドラッグする項目のインデックスを決定するために使用されます。  
  
 この例では、ドラッグアンドドロップ操作にカスタムカーソルを使用する方法も示しています。 この例では、`3dwarro.cur` と `3dwno.cur`の2つのカーソルファイルがアプリケーションディレクトリに存在することを前提としています。これは、それぞれ、カスタムドラッグアンドドロップアンドドロップカーソルです。 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっている場合は、カスタムカーソルが使用されます。 カスタムカーソルは <xref:System.Windows.Forms.Control.GiveFeedback> イベントハンドラーで設定されます。  
  
 キーボードの状態は、右 `ListBox`の <xref:System.Windows.Forms.Control.DragOver> イベントハンドラーで評価され、SHIFT、CTRL、ALT、CTRL + ALT の各キーの状態に基づいてドラッグ操作がどのように行われるかを決定します。 ドロップが発生する `ListBox` 内の場所は、`DragOver` イベント中にも決定されます。 削除するデータが `String`でない場合は、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> が <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>に設定されます。 最後に、ドロップの状態が `DropLocationLabel`<xref:System.Windows.Forms.Label>に表示されます。  
  
 右側の `ListBox` にドロップするデータは、<xref:System.Windows.Forms.Control.DragDrop> イベントハンドラーで決定され、`ListBox`内の適切な場所に `String` 値が追加されます。 ドラッグ操作がフォームの境界の外に移動した場合、<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントハンドラーでドラッグアンドドロップ操作が取り消されます。  
  
 このコード抜粋では、<xref:System.Windows.Forms.DragEventArgs> クラスの使用方法を示します。 完全なコード例については、<xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを参照してください。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.X" />
      </Docs>
    </Member>
  </Members>
</Type>
