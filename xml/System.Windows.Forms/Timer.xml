<Type Name="Timer" FullName="System.Windows.Forms.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4b0871a811ebd73707b30110d444efc26cba68e9" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75177719" /></Metadata><TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Tick")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ユーザー定義の間隔でイベントを発生させるタイマーを実装します。 このタイマーは、Windows フォーム アプリケーションで使用できるように最適化されていて、ウィンドウで使用する必要があります。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Timer> は、ユーザー定義の間隔でイベントを発生させるために使用されます。 この Windows タイマーは、UI スレッドが処理を実行するために使用されるシングルスレッド環境向けに設計されています。 ユーザーコードには UI メッセージポンプが使用可能であり、常に同じスレッドから操作されるか、または呼び出しを別のスレッドにマーシャリングする必要があります。  
  
 このタイマーを使用する場合は、<xref:System.Windows.Forms.Timer.Tick> イベントを使用してポーリング操作を実行するか、指定した期間のスプラッシュスクリーンを表示します。 <xref:System.Windows.Forms.Timer.Enabled%2A> プロパティが `true` に設定されていて、<xref:System.Windows.Forms.Timer.Interval%2A> プロパティが0より大きい場合、<xref:System.Windows.Forms.Timer.Tick> イベントは、<xref:System.Windows.Forms.Timer.Interval%2A> プロパティの設定に基づいて間隔で発生します。  
  
 このクラスには、間隔を設定し、タイマーを開始および停止するメソッドが用意されています。  
  
> [!NOTE]
>  Windows フォーム Timer コンポーネントはシングルスレッドであり、55ミリ秒の精度に制限されています。 精度の高いマルチスレッドタイマーが必要な場合は、<xref:System.Timers> 名前空間の <xref:System.Timers.Timer> クラスを使用します。  
  
   
  
## Examples  
 次の例では、単純な間隔タイマーを実装します。これにより、5秒ごとにアラームが設定されます。 アラームが発生すると、<xref:System.Windows.Forms.MessageBox> にはアラームが開始された回数が表示され、タイマーの実行を継続するかどうかをユーザーに確認するメッセージが表示されます。  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.Timer" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Forms.Timer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新しいタイマーが作成されると無効になります。つまり、<xref:System.Windows.Forms.Timer.Enabled%2A> は `false`に設定されます。 タイマーを有効にするには、<xref:System.Windows.Forms.Timer.Start%2A> メソッドを呼び出すか、<xref:System.Windows.Forms.Timer.Enabled%2A> を `true`に設定します。  
  
 タイマーが無効になっていて、タイマーがスコープ外になった場合、ガベージコレクションが発生するとタイマーは破棄されます。 タイマーが有効になっている場合、スコープ外であっても、ガベージコレクションの対象にはなりません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::ComponentModel::IContainer ^ container);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Timer : System.ComponentModel.IContainer -&gt; System.Windows.Forms.Timer" Usage="new System.Windows.Forms.Timer container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">タイマーのコンテナーを表す <see cref="T:System.ComponentModel.IContainer" />。</param>
        <summary><see cref="T:System.Windows.Forms.Timer" /> クラスの新しいインスタンスと、指定したコンテナーを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Timer> コンストラクターを使用すると、<xref:System.Windows.Forms.Timer> を任意の <xref:System.ComponentModel.Container> オブジェクトに関連付けることができます。 このような <xref:System.Windows.Forms.Timer> を関連付けることにより、<xref:System.Windows.Forms.Timer> の有効期間を <xref:System.ComponentModel.Container>に手動で制御できます。 これは、アプリケーションで多数のコンポーネントを使用し、それらすべてを同時に破棄する場合に便利です。 たとえば、<xref:System.Windows.Forms.ToolTip>、<xref:System.Windows.Forms.ImageList>、および <xref:System.Windows.Forms.Timer> を <xref:System.ComponentModel.Container>に関連付けると、<xref:System.ComponentModel.Container.Dispose%2A> で <xref:System.ComponentModel.Container> を呼び出すと、これらすべてのコンポーネントも強制的に破棄されます。  
  
 新しいタイマーが作成されると無効になります。つまり、<xref:System.Windows.Forms.Timer.Enabled%2A> は `false`に設定されます。 タイマーを有効にするには、<xref:System.Windows.Forms.Timer.Start%2A> メソッドを呼び出すか、<xref:System.Windows.Forms.Timer.Enabled%2A> を `true`に設定します。  
  
 このインスタンスは、コンテナーがガベージコレクションをリリースするまで存在します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。 アンマネージ リソースのみを解放する場合は <see langword="false" />。</param>
        <summary>タイマーによって使用されていたリソース (メモリを除く) を破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 タイマーの使用が終了したら <xref:System.Windows.Forms.Timer.Dispose%2A> を呼び出します。 <xref:System.Windows.Forms.Timer.Dispose%2A> メソッドは、タイマーを使用できない状態のままにします。 <xref:System.Windows.Forms.Timer.Dispose%2A>を呼び出した後は、使用していたメモリがガベージコレクションによって回収されるように、タイマーへのすべての参照を解放する必要があります。  
  
> [!NOTE]
>  タイマーへの最後の参照を解放する前に、常に <xref:System.Windows.Forms.Timer.Dispose%2A> を呼び出してください。 それ以外の場合、タイマーが使用しているリソースは、ガベージコレクションがタイマーオブジェクトのデストラクターを呼び出すまで解放されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイマーが実行されているかどうかを取得または設定します。</summary>
        <value>タイマーが現在有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値が `true`場合、タイマーはガベージコレクションの対象になりません。  
  
 <xref:System.Windows.Forms.Timer.Start%2A> メソッドの呼び出しは、<xref:System.Windows.Forms.Timer.Enabled%2A> を `true`に設定することと同じです。 同様に、<xref:System.Windows.Forms.Timer.Stop%2A> メソッドを呼び出すことは、`false`に <xref:System.Windows.Forms.Timer.Enabled%2A> を設定することと同じです。  
  
   
  
## Examples  
 次の例では、単純な間隔タイマーを実装します。これにより、5秒ごとにアラームが設定されます。 アラームが発生すると、<xref:System.Windows.Forms.MessageBox> にはアラームが開始された回数が表示され、タイマーを継続して実行するかどうかをユーザーに確認するメッセージが表示されます。  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public int Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Interval { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : int with get, set" Usage="System.Windows.Forms.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Windows.Forms.Timer.Tick" /> イベントが発生してから次の <see cref="E:System.Windows.Forms.Timer.Tick" /> イベントが発生するまでの時間 (ミリ秒単位) を取得または設定します。</summary>
        <value><see cref="T:System.Int32" /> イベントが発生してから次の <see cref="E:System.Windows.Forms.Timer.Tick" /> イベントが発生するまでの時間 (ミリ秒単位) を指定する <see cref="E:System.Windows.Forms.Timer.Tick" />。 値は 1 未満には設定できません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 間隔の秒数を取得するには、この数値を1000で除算します。  
  
   
  
## Examples  
 次のコード例では、単純な間隔タイマーを実装します。これにより、5秒ごとにアラームが設定されます。 アラームが発生すると、<xref:System.Windows.Forms.MessageBox> にはアラームが開始された回数が表示され、タイマーを継続して実行するかどうかをユーザーに確認するメッセージが表示されます。  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTick">
      <MemberSignature Language="C#" Value="protected virtual void OnTick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTick : EventArgs -&gt; unit&#xA;override this.OnTick : EventArgs -&gt; unit" Usage="timer.OnTick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。 これは常に <see cref="F:System.EventArgs.Empty" /> です。</param>
        <summary><see cref="E:System.Windows.Forms.Timer.Tick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、タイマーティックごとに呼び出されます。 <xref:System.Windows.Forms.Timer.Tick>によって追加されたメソッドを呼び出します。 <xref:System.Windows.Forms.Timer>から継承する場合は、このメソッドをオーバーライドできます。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> をオーバーライドする場合は、基本クラスの <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> メソッドを呼び出すようにしてください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>タイマーを起動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 また、<xref:System.Windows.Forms.Timer.Enabled%2A> プロパティを `true`に設定して、タイマーを開始することもできます。  
  
   
  
## Examples  
 次のコード例では、単純な間隔タイマーを実装します。これにより、5秒ごとにアラームが設定されます。 アラームが発生すると、<xref:System.Windows.Forms.MessageBox> にはアラームが開始された回数が表示され、タイマーを継続して実行するかどうかをユーザーに確認するメッセージが表示されます。  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>タイマーを停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 また、<xref:System.Windows.Forms.Timer.Enabled%2A> プロパティを `false`に設定して、タイマーを停止することもできます。 <xref:System.Windows.Forms.Timer> オブジェクトは、同じアプリケーションセッション内で複数回有効または無効にすることができます。  
  
 <xref:System.Windows.Forms.Timer.Stop%2A> を呼び出して <xref:System.Windows.Forms.Timer> を無効にした後に <xref:System.Windows.Forms.Timer.Start%2A> を呼び出すと、<xref:System.Windows.Forms.Timer> が中断された間隔で再起動します。 <xref:System.Windows.Forms.Timer> が5000ミリ秒間隔で設定されていて、<xref:System.Windows.Forms.Timer.Stop%2A> を約3000ミリ秒間呼び出した場合、<xref:System.Windows.Forms.Timer.Start%2A> を呼び出すと、<xref:System.Windows.Forms.Timer> は5000ミリ秒待機してから <xref:System.Windows.Forms.Timer.Tick> イベントが発生します。  
  
> [!NOTE]
>  Windows フォームアプリケーション内の任意の <xref:System.Windows.Forms.Timer> で Stop を呼び出すと、すべての <xref:System.Windows.Forms.Timer> コンポーネントがメインアプリケーションスレッドで動作するため、アプリケーション内の他の <xref:System.Windows.Forms.Timer> コンポーネントからのメッセージが直ちに処理される可能性があります。 2つの <xref:System.Windows.Forms.Timer> コンポーネントがあり、1つは700ミリ秒に設定され、もう1つは500ミリ秒に設定されており、最初の <xref:System.Windows.Forms.Timer>で <xref:System.Windows.Forms.Timer.Stop%2A> を呼び出すと、アプリケーションは最初に2番目のコンポーネントのイベントコールバックを受け取る場合があります。 これが問題を証明する場合は、代わりに <xref:System.Threading> 名前空間で <xref:System.Threading.Timer> クラスを使用することを検討してください。  
  
   
  
## Examples  
 次のコード例では、単純な間隔タイマーを実装します。これにより、5秒ごとにアラームが設定されます。 アラームが発生すると、<xref:System.Windows.Forms.MessageBox> にはアラームが開始された回数が表示され、タイマーを継続して実行するかどうかをユーザーに確認するメッセージが表示されます。  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Timer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>なんらかの種類のユーザー状態を表す任意の文字列を取得または設定します。</summary>
        <value>なんらかの種類のユーザー状態を表す任意の文字列。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Timer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定したタイマーの間隔が経過し、タイマーが有効である場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Timer.Tick> イベント内から <xref:System.Diagnostics.Debug> クラスの <xref:System.Diagnostics.Debug.Assert%2A> メソッドを呼び出すと、予期したとおりに動作しないことがあります。アサーションダイアログボックスを表示すると、Windows によって <xref:System.Windows.Forms.Timer.Tick> イベントが繰り返し発生する可能性があります。 このイベント内のアサーションをテストしないことをお勧めします。代わりに、<xref:System.Diagnostics.Debug.Write%2A>、<xref:System.Diagnostics.Debug.WriteIf%2A>、<xref:System.Diagnostics.Debug.WriteLine%2A>、または <xref:System.Diagnostics.Debug.WriteLineIf%2A> メソッドを使用してください。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、単純な間隔タイマーを実装します。これにより、5秒ごとにアラームが設定されます。 アラームが発生すると、<xref:System.Windows.Forms.MessageBox> にはアラームが開始された回数が表示され、タイマーを継続して実行するかどうかをユーザーに確認するメッセージが表示されます。  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timer.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Forms.Timer" /> を表す文字列を返します。</summary>
        <returns>現在の <see cref="T:System.Windows.Forms.Timer" /> を表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Timer.ToString%2A> メソッドは、<xref:System.Windows.Forms.Timer.Interval%2A> プロパティの値を含む文字列を返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
