<Type Name="FileDialog" FullName="System.Windows.Forms.FileDialog">
  <Metadata><Meta Name="ms.openlocfilehash" Value="86c27be83f88157a31a44c00493a33da5b4da2aa" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77245631" /></Metadata><TypeSignature Language="C#" Value="public abstract class FileDialog : System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit FileDialog extends System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.FileDialog" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class FileDialog&#xA;Inherits CommonDialog" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileDialog abstract : System::Windows::Forms::CommonDialog" />
  <TypeSignature Language="F#" Value="type FileDialog = class&#xA;    inherit CommonDialog" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.CommonDialog</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("FileOk")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("FileName")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ユーザーがファイルを選択するダイアログ ボックスを表示します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog> は、<xref:System.Windows.Forms.OpenFileDialog> クラスと <xref:System.Windows.Forms.SaveFileDialog> クラスの一般的な動作を含む抽象クラスです。 直接使用するためのものではありませんが、これら2つのクラスに共通の動作が含まれています。 <xref:System.Windows.Forms.FileDialog>のインスタンスを作成することはできません。 クラスは public として宣言されていますが、内部抽象メソッドが含まれているため、このクラスから継承することはできません。 ファイルを選択または保存するためのダイアログボックスを作成するには、<xref:System.Windows.Forms.OpenFileDialog> または <xref:System.Windows.Forms.SaveFileDialog>を使用します。  
  
 <xref:System.Windows.Forms.FileDialog> はモーダルダイアログボックスです。したがって、表示されると、ユーザーがファイルを選択するまで、アプリケーションの残りの部分はブロックされます。 ダイアログボックスがモーダルで表示されている場合、ダイアログボックスのオブジェクト以外の入力 (キーボードまたはマウスクリック) は発生しません。 プログラムは、呼び出し元のプログラムへの入力が発生する前に、ダイアログボックスを非表示にするか (通常は一部のユーザー操作に応答して) 閉じる必要があります。  
  
> [!CAUTION]
>  <xref:System.Windows.Forms.OpenFileDialog> や <xref:System.Windows.Forms.SaveFileDialog>などの <xref:System.Windows.Forms.FileDialog>から派生したクラスを使用する場合は、絶対パスを含む文字列リテラルを使用しないようにしてください。 代わりに、次の表で説明する1つ以上の方法を使用して、パスを動的に取得します。  
  
 ユーザーがファイルではなくフォルダーを選択できるようにするには、<xref:System.Windows.Forms.FolderBrowserDialog>を使用します。  
  
 アプリケーションの種類、アプリケーションに関連付けられたデータの保存方法、およびファイルシステムへのアクセスの理由に応じて、ディレクトリパスを作成するためのさまざまな方法が考えられます。 次の表は、パスを動的に作成する方法を示しています。  
  
|パスまたはプログラムのカテゴリ|使用するクラスとメンバー|  
|------------------------------|------------------------------|  
|Program Files、マイドキュメント、Desktop などの標準の Windows パス|<xref:System.Environment?displayProperty=nameWithType> クラスは、<xref:System.Environment.SystemDirectory%2A>などの静的メソッドを使用して、または <xref:System.Environment.SpecialFolder> 列挙値のいずれかを使用して <xref:System.Environment.GetFolderPath%2A> メソッドを使用して、これらの最も完全なソースです。|  
|現在のアプリケーションに関連するパス|<xref:System.Windows.Forms.Application> クラスには、<xref:System.Windows.Forms.Application.StartupPath%2A>、<xref:System.Windows.Forms.Application.ExecutablePath%2A>、<xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>、<xref:System.Windows.Forms.Application.CommonAppDataPath%2A>などの特定のパスを取得するための静的メンバーがあります。<br /><br /> <xref:System.IO.Path?displayProperty=nameWithType> の <xref:System.IO.Path.GetTempPath%2A> メソッドは、一時フォルダーのパスを返します。<br /><br /> <xref:System.IO.Directory?displayProperty=nameWithType> クラスの <xref:System.IO.Directory.GetCurrentDirectory%2A> メソッドは、アプリケーションの現在実行中のディレクトリを返します。<br /><br /> <xref:System.IO.DriveInfo> クラスの <xref:System.IO.DriveInfo.RootDirectory%2A> プロパティは、指定されたドライブのルートディレクトリを表します。|  
|アプリケーション設定として格納されるパス|<xref:System.Configuration.ApplicationSettingsBase>から派生したラッパークラスの対応するアプリケーション設定プロパティにアクセスします。 詳細については、「 [Windows フォームのアプリケーション設定](~/docs/framework/winforms/advanced/application-settings-for-windows-forms.md)」を参照してください。|  
|レジストリストレージ|一部のアプリケーションでは、ディレクトリ情報がレジストリに格納されます。 <xref:System.Windows.Forms.Application> クラスには、<xref:Microsoft.Win32.RegistryKey> 値に解決される <xref:System.Windows.Forms.Application.CommonAppDataPath%2A> と <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A> のプロパティがあります。|  
|ClickOnce アプリケーション|ClickOnce アプリケーションの場合は、ClickOnce データディレクトリへのポインターを返す <xref:System.Windows.Forms.Application.UserAppDataPath%2A>などの <xref:System.Windows.Forms.Application> クラスメンバーを使用します。 詳細については、[ローカルへのアクセスとリモート データには、ClickOnce アプリケーション](/visualstudio/deployment/accessing-local-and-remote-data-in-clickonce-applications) を参照してください。|  
|国際対応アプリケーション|国際対応アプリケーションの場合は、<xref:System.Resources.ResourceReader?displayProperty=nameWithType> クラスを使用して、アプリケーションの文字列リソースから相対パス部分を取得します。 グローバリゼーションとローカリゼーションの詳細については、「[グローバリゼーションとローカリゼーション](~/docs/standard/globalization-localization/index.md)」を参照してください。|  
  
 説明されている方法の1つ以上を使用して完全なパスを構築できることに注意してください。 たとえば、<xref:System.Environment.GetFolderPath%2A> メソッドを使用してマイドキュメント フォルダーへのパスを取得した後、アプリケーション設定を使用して、相対サブディレクトリ部分を追加することができます。  
  
 <xref:System.IO.Path?displayProperty=nameWithType> クラスには、絶対パス文字列と相対パス文字列の操作を支援する静的メンバーが含まれています。一方、<xref:System.IO.File?displayProperty=nameWithType> クラスと <xref:System.IO.Directory?displayProperty=nameWithType> クラスには、ファイルとディレクトリを実際に操作する静的メンバーがあります。  
  
> [!IMPORTANT]
>  アプリケーションのユーザーが <xref:System.Windows.Forms.FileDialog>のフォルダーを変更した場合、アプリケーションの現在の作業ディレクトリは、<xref:System.Windows.Forms.FileDialog>で指定された場所に設定されます。 これを回避するには、<xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A> プロパティを `true`に設定します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.FileDialog> の <xref:System.Windows.Forms.OpenFileDialog> 実装を使用し、プロパティの作成、設定、およびダイアログボックスの表示について説明します。 この例では、<xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> メソッドを使用してダイアログボックスを表示し、<xref:System.Windows.Forms.DialogResult>を返します。 この例では、フォームに <xref:System.Windows.Forms.Button> が配置され、<xref:System.IO> 名前空間が追加されている必要があります。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.CommonDialog" />
    <altmember cref="T:System.Windows.Forms.OpenFileDialog" />
    <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
    <altmember cref="T:System.Windows.Forms.FolderBrowserDialog" />
    <altmember cref="T:System.IO.Path" />
    <altmember cref="T:System.IO.File" />
    <altmember cref="T:System.IO.Directory" />
    <altmember cref="T:System.Environment" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:Microsoft.Win32.Registry" />
    <altmember cref="T:System.Resources.ResourceReader" />
  </Docs>
  <Members>
    <Member MemberName="AddExtension">
      <MemberSignature Language="C#" Value="public bool AddExtension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AddExtension" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.AddExtension" />
      <MemberSignature Language="VB.NET" Value="Public Property AddExtension As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AddExtension { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AddExtension : bool with get, set" Usage="System.Windows.Forms.FileDialog.AddExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが拡張子を指定しない場合、ダイアログ ボックスがファイル名に自動的に拡張子を付けるかどうかを示す値を取得または設定します。</summary>
        <value>ユーザーが拡張子を指定しない場合、ダイアログ ボックスがファイル名に拡張子を付ける場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ファイル名に追加される拡張子は、現在選択されているファイルフィルターと <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> プロパティの値によって異なります。  
  
 <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> プロパティが `true`の場合、ダイアログボックスには、既存のファイルに一致する現在のファイルフィルターの最初の拡張機能が追加されます。 現在のファイルフィルターに一致するファイルがない場合、ダイアログボックスには、<xref:System.Windows.Forms.FileDialog.DefaultExt%2A> プロパティで指定された拡張機能が追加されます。  
  
 <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> プロパティが `false`場合、ダイアログボックスでは、現在のファイルフィルターから有効な最初のファイル名拡張子が追加されます。 現在のファイルフィルターに有効なファイル名拡張子が含まれていない場合は、[<xref:System.Windows.Forms.FileDialog.DefaultExt%2A>] プロパティで指定した拡張子がダイアログボックスに追加されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
        <altmember cref="P:System.Windows.Forms.FileDialog.FilterIndex" />
      </Docs>
    </Member>
    <Member MemberName="AutoUpgradeEnabled">
      <MemberSignature Language="C#" Value="public bool AutoUpgradeEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoUpgradeEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.AutoUpgradeEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoUpgradeEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoUpgradeEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoUpgradeEnabled : bool with get, set" Usage="System.Windows.Forms.FileDialog.AutoUpgradeEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Forms.FileDialog" /> インスタンスを [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)] で実行する場合に、外観と動作を自動的にアップグレードするかどうかを示す値を取得または設定します。</summary>
        <value>この <see langword="true" /> インスタンスを <see cref="T:System.Windows.Forms.FileDialog" /> で実行する場合に、外観と動作を自動的にアップグレードする場合は [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]。それ以外の場合は <see langword="false" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティが `false`場合、<xref:System.Windows.Forms.FileDialog> クラスは [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]で [!INCLUDE[winxp](~/includes/winxp-md.md)]スタイルの外観と動作を持ちます。  
  
 [!INCLUDE[winxp](~/includes/winxp-md.md)]では、このプロパティは何の効果もありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckFileExists">
      <MemberSignature Language="C#" Value="public virtual bool CheckFileExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckFileExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CheckFileExists" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CheckFileExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CheckFileExists { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckFileExists : bool with get, set" Usage="System.Windows.Forms.FileDialog.CheckFileExists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>存在しないファイルの名前をユーザーが指定した場合に、ダイアログ ボックスが警告を表示するかどうかを示す値を取得または設定します。</summary>
        <value>存在しないファイル名をユーザーが指定したときに、ダイアログ ボックスが警告を表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定値は、継承 <xref:System.Windows.Forms.OpenFileDialog> の場合は `true`、継承 <xref:System.Windows.Forms.SaveFileDialog>の場合は `false` です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckPathExists" />
      </Docs>
    </Member>
    <Member MemberName="CheckPathExists">
      <MemberSignature Language="C#" Value="public bool CheckPathExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckPathExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CheckPathExists" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckPathExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckPathExists { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckPathExists : bool with get, set" Usage="System.Windows.Forms.FileDialog.CheckPathExists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>存在しないパスをユーザーが指定したときに、ダイアログ ボックスに警告を表示するかどうかを示す値を取得または設定します。</summary>
        <value>存在しないパスをユーザーが指定したときに、ダイアログ ボックスに警告が表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
      </Docs>
    </Member>
    <Member MemberName="CustomPlaces">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CustomPlaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomPlaces As FileDialogCustomPlacesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FileDialogCustomPlacesCollection ^ CustomPlaces { System::Windows::Forms::FileDialogCustomPlacesCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomPlaces : System.Windows.Forms.FileDialogCustomPlacesCollection" Usage="System.Windows.Forms.FileDialog.CustomPlaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FileDialogCustomPlacesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Forms.FileDialog" /> インスタンスに対するカスタム プレイスのコレクションを取得します。</summary>
        <value>この <see cref="T:System.Windows.Forms.FileDialog" /> インスタンスに対するカスタム プレイスのコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[winxp](~/includes/winxp-md.md)]では、このプロパティは何の効果もありません。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Windows.Forms.FileDialog.CustomPlaces%2A> コレクションの使用方法を示しています。 この例を実行するには、次のコードを Windows フォームに貼り付け、フォームのコンストラクターまたは <xref:System.Windows.Forms.Form.Load> イベント処理メソッドから `InitializeDialogAndButton` を呼び出します。  
  
 [!code-csharp[System.Windows.Forms.FileDialogCommonPlaces#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialogCommonPlaces/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialogCommonPlaces#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialogCommonPlaces/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultExt">
      <MemberSignature Language="C#" Value="public string DefaultExt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultExt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.DefaultExt" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultExt As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultExt { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultExt : string with get, set" Usage="System.Windows.Forms.FileDialog.DefaultExt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>既定のファイル名の拡張子を取得または設定します。</summary>
        <value>既定のファイル名の拡張子です。 返される文字列にはピリオドが含まれません。 既定値は空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションのユーザーが拡張子のないファイル名を指定すると、<xref:System.Windows.Forms.FileDialog> によってファイル名に拡張子が追加されます。 使用される拡張機能は、<xref:System.Windows.Forms.FileDialog.Filter%2A> プロパティと <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> プロパティによって決まります。 <xref:System.Windows.Forms.FileDialog> でフィルターが選択されていて、フィルターによって拡張機能が指定されている場合は、その拡張機能が使用されます。 選択したフィルターが拡張機能の代わりにワイルドカードを使用している場合は、<xref:System.Windows.Forms.FileDialog.DefaultExt%2A> プロパティで指定された拡張機能が使用されます。  
  
   
  
## Examples  
 次のコード例では、ストリームで <xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=nameWithType> および <xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=nameWithType> メソッドを使用する方法を示します。 また、<xref:System.Windows.Forms.FileDialog.FileName%2A>、<xref:System.Windows.Forms.FileDialog.DefaultExt%2A>、<xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>、および <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType> のメンバーの使用方法も示します。  
  
 これは、プロジェクトにコピーするときに実行する準備が整った完全な例です。  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DereferenceLinks">
      <MemberSignature Language="C#" Value="public bool DereferenceLinks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DereferenceLinks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.DereferenceLinks" />
      <MemberSignature Language="VB.NET" Value="Public Property DereferenceLinks As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DereferenceLinks { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DereferenceLinks : bool with get, set" Usage="System.Windows.Forms.FileDialog.DereferenceLinks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ダイアログ ボックスが、ショートカットで参照されたファイルの場所を返すかどうか、またはショートカットの場所 (.lnk) を返すかどうかを指定する値を取得または設定します。</summary>
        <value>ダイアログ ボックスがショートカットで参照されたファイルの場所を返す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventFileOk">
      <MemberSignature Language="C#" Value="protected static readonly object EventFileOk;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly object EventFileOk" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.FileDialog.EventFileOk" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly EventFileOk As Object " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly System::Object ^ EventFileOk;" />
      <MemberSignature Language="F#" Value=" staticval mutable EventFileOk : obj" Usage="System.Windows.Forms.FileDialog.EventFileOk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Windows.Forms.FileDialog.FileOk" /> イベントを所有しています。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FileName" />
      <MemberSignature Language="VB.NET" Value="Public Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string with get, set" Usage="System.Windows.Forms.FileDialog.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイル ダイアログ ボックスで選択されたファイル名を含む文字列を取得または設定します。</summary>
        <value>ファイル ダイアログ ボックスで選択されたファイルの名前。 既定値は空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ファイル名には、ファイルパスと拡張子の両方が含まれます。 ファイルが選択されていない場合、このメソッドは空の文字列 ("") を返します。  
  
 <xref:System.Windows.Forms.SaveFileDialog> クラスから使用する場合、このプロパティは保存されているファイルを表します。<xref:System.Windows.Forms.OpenFileDialog> クラスから使用する場合は、開いているファイルを表します。  
  
 このプロパティには、選択したファイルの名前のみを指定できます。 複数選択のダイアログボックスで選択したすべてのファイルの名前を含む配列を取得する場合は、<xref:System.Windows.Forms.FileDialog.FileNames%2A>を使用します。  
  
   
  
## Examples  
 次のコード例では、ストリームで <xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=nameWithType> および <xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=nameWithType> メソッドを使用する方法を示します。 また、<xref:System.Windows.Forms.FileDialog.FileName%2A>、<xref:System.Windows.Forms.FileDialog.DefaultExt%2A>、<xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>、および <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType> のメンバーの使用方法も示します。  
  
 これは、プロジェクトにコピーするときに実行する準備が整った完全な例です。  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileNames" />
        <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
        <altmember cref="T:System.Windows.Forms.OpenFileDialog" />
      </Docs>
    </Member>
    <Member MemberName="FileNames">
      <MemberSignature Language="C#" Value="public string[] FileNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] FileNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FileNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ FileNames { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileNames : string[]" Usage="System.Windows.Forms.FileDialog.FileNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ダイアログ ボックスで選択されたすべてのファイルの名前を取得します。</summary>
        <value>ダイアログ ボックスで選択されたすべてのファイルの名前を含む <see cref="T:System.String" /> 型の配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 各ファイル名には、ファイルパスと拡張子の両方が含まれます。 ファイルが選択されていない場合、このメソッドは空の配列を返します。  
  
   
  
## Examples  
 次のコード例では、ユーザーが複数のイメージを選択して、フォーム上の <xref:System.Windows.Forms.PictureBox> コントロールに表示できます。 <xref:System.Windows.Forms.OpenFileDialog>の初期化、<xref:System.Windows.Forms.FileDialog.Title%2A> と <xref:System.Windows.Forms.FileDialog.Filter%2A> プロパティの設定、<xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A> プロパティを true に設定してユーザーが複数のファイルを選択できるようにする方法を示します。 このコード例では、フォームに `openFileDialog1`という名前の <xref:System.Windows.Forms.OpenFileDialog> コントロール、`SelectFileButton`という名前の <xref:System.Windows.Forms.Button>、および <xref:System.Windows.Forms.FlowLayoutPanel> という名前の `flowLayoutPanel1`が既に存在することを前提としています。  
  
 [!code-csharp[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileName" />
      </Docs>
    </Member>
    <Member MemberName="FileOk">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler FileOk;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler FileOk" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.FileDialog.FileOk" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FileOk As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ FileOk;" />
      <MemberSignature Language="F#" Value="member this.FileOk : System.ComponentModel.CancelEventHandler " Usage="member this.FileOk : System.ComponentModel.CancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイル ダイアログ ボックスの **[開く]** ボタンまたは **[保存]** ボタンをユーザーがクリックすると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントの処理の詳細については、「[イベントの処理と発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.FileDialog.FileNames%2A> プロパティを使用して、<xref:System.Windows.Forms.FileDialog.FileOk> イベントを処理し、<xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> メソッドを使用する方法を示します。 この例を実行すると、ユーザーは <xref:System.Windows.Forms.OpenFileDialog> オブジェクトからグラフィックスファイルを選択できます。 選択したファイルがフォームに表示されます。 <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> メソッドは、開かれた各グラフィックスファイルに対してフォームを強制的に再描画します。 この例を実行するには、`PictureBox1`という名前の <xref:System.Windows.Forms.PictureBox>、`OpenFileDialog1`という名前の <xref:System.Windows.Forms.OpenFileDialog>、および <xref:System.Windows.Forms.Button> という名前の `fileButton`を含むフォームに次のコードを貼り付けます。 フォームのコンストラクターまたは `Load` メソッドから `InitializePictureBox` および `InitializeOpenFileDialog` メソッドを呼び出します。 この例が実行されている場合は、ボタンをクリックしてダイアログボックスを表示します。  
  
 [!code-cpp[System.Windows.Forms.FileDialog#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#1)]
 [!code-csharp[System.Windows.Forms.FileDialog#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialog#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public string Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Filter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Filter : string with get, set" Usage="System.Windows.Forms.FileDialog.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ダイアログ ボックスの [保存先ファイルの種類] または [ファイルの種類] ボックスに表示される選択肢を決定する、現在のファイル名のフィルター文字列を取得または設定します。</summary>
        <value>ダイアログ ボックスで使用できるファイル フィルター処理オプション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 フィルター処理の各オプションについて、フィルター文字列には、フィルターの説明と、その後&#124;に縦棒 () とフィルターパターンが含まれています。 異なるフィルター オプションの文字列は、縦棒で区切ります。  
  
 フィルター文字列の例を次に示します。  
  
 `Text files (*.txt)|*.txt|All files (*.*)|*.*`  
  
 複数のフィルターパターンをフィルターに追加するには、ファイルの種類をセミコロンで区切ります。たとえば、次のようにします。  
  
 `Image Files(*.BMP;*.JPG;*.GIF)|*.BMP;*.JPG;*.GIF|All files (*.*)|*.*`  
  
 <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> プロパティを使用して、ユーザーに対して最初に表示されるフィルター処理オプションを設定します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.FileDialog> の <xref:System.Windows.Forms.OpenFileDialog> 実装を使用し、プロパティの作成、設定、およびダイアログボックスの表示について説明します。 この例では、<xref:System.Windows.Forms.FileDialog.Filter%2A> プロパティと <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> プロパティを使用して、ユーザーのフィルターの一覧を提供します。 この例では、フォームに <xref:System.Windows.Forms.Button> が配置され、<xref:System.IO> 名前空間が追加されている必要があります。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Filter" /> の形式が無効です。</exception>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.FileDialog.FilterIndex" />
      </Docs>
    </Member>
    <Member MemberName="FilterIndex">
      <MemberSignature Language="C#" Value="public int FilterIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FilterIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FilterIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FilterIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.FilterIndex : int with get, set" Usage="System.Windows.Forms.FileDialog.FilterIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイル ダイアログ ボックスで現在選択されているフィルターのインデックスを取得または設定します。</summary>
        <value>ファイル ダイアログ ボックスで現在選択されているフィルターのインデックスを含む値。 既定値は 1 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> プロパティを使用して、ユーザーに対して最初に表示されるフィルター処理オプションを設定します。 また、選択したフィルターに応じて特別なファイル操作を実行するためのファイルダイアログを表示した後に、<xref:System.Windows.Forms.FileDialog.FilterIndex%2A> の値を使用することもできます。  
  
> [!NOTE]
>  最初のフィルターエントリのインデックス値は1です。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.FileDialog> の <xref:System.Windows.Forms.OpenFileDialog> 実装を使用し、プロパティの作成、設定、およびダイアログボックスの表示について説明します。 この例では、<xref:System.Windows.Forms.FileDialog.Filter%2A> プロパティと <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> プロパティを使用して、ユーザーのフィルターの一覧を提供します。 この例では、フォームに <xref:System.Windows.Forms.Button> が配置され、<xref:System.IO> 名前空間が追加されている必要があります。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="HookProc">
      <MemberSignature Language="C#" Value="protected override IntPtr HookProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int HookProc(native int hWnd, int32 msg, native int wparam, native int lparam) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HookProc (hWnd As IntPtr, msg As Integer, wparam As IntPtr, lparam As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="F#" Value="override this.HookProc : nativeint * int * nativeint * nativeint -&gt; nativeint" Usage="fileDialog.HookProc (hWnd, msg, wparam, lparam)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wparam" Type="System.IntPtr" />
        <Parameter Name="lparam" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWnd">ダイアログ ボックス ウィンドウを識別するハンドル。</param>
        <param name="msg">ダイアログ ボックスが受け取ったメッセージ。</param>
        <param name="wparam">メッセージについての追加情報。</param>
        <param name="lparam">メッセージについての追加情報。</param>
        <summary>ファイル ダイアログ ボックスに特定の機能を追加するためにオーバーライドされる、コモン ダイアログ ボックスのフック プロシージャを定義します。</summary>
        <returns>既定のダイアログ ボックス プロシージャがメッセージを処理する場合は 0 を返します。既定のダイアログ ボックス プロシージャがメッセージを無視する場合は 0 以外の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 フックプロシージャを使用すると、機能をデバッグまたは拡張するために、ルーチンまたはアプリケーションに他のルーチンを接続したり挿入したりすることができます。  
  
 既定では、フックプロシージャによって、WM_INITDIALOG メッセージに応答してダイアログボックスが画面上に中央揃えで表示されます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> をオーバーライドする場合は、必ず基底クラスの <see cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="InitialDirectory">
      <MemberSignature Language="C#" Value="public string InitialDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InitialDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.InitialDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InitialDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InitialDirectory : string with get, set" Usage="System.Windows.Forms.FileDialog.InitialDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイル ダイアログ ボックスに表示される起動ディレクトリを取得または設定します。</summary>
        <value>ファイル ダイアログ ボックスに表示される起動ディレクトリ。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A> プロパティは、通常、次のソースのいずれかを使用して設定されます。  
  
-   以前にプログラムで使用されていたパス。最後のディレクトリまたはファイルの操作から保持されている可能性があります。  
  
-   アプリケーション設定、<xref:Microsoft.Win32.Registry>、アプリケーションの文字列リソースなど、永続的なソースから読み取られたパス。  
  
-   Windows の標準のシステムパスとユーザーパス (Program Files、マイドキュメント、MyMusic など) (<xref:System.Environment.GetFolderPath%2A> メソッドを使用して取得可能)  
  
-   スタートアップディレクトリなど、現在のアプリケーションに関連するパス。これは、<xref:System.Windows.Forms.Application> オブジェクトのプロパティを使用して取得できます。  
  
 動的パスの作成の詳細については、「<xref:System.Windows.Forms.FileDialog> クラスの概要」を参照してください。  
  
 [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]では、<xref:System.Windows.Forms.FileDialog.InitialDirectory%2A> がディレクトリパスだけではなく完全なファイル名に設定されている場合、最初のディレクトリは、アプリケーションパス、またはユーザーが最後にファイルを選択したディレクトリのいずれかに既定で設定されます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.FileDialog> の <xref:System.Windows.Forms.OpenFileDialog> 実装を使用し、プロパティの作成、設定、およびダイアログボックスの表示について説明します。 この例では、<xref:System.Windows.Forms.FileDialog.InitialDirectory%2A> プロパティを使用して、ダイアログボックスがユーザーに表示されるときの初期ディレクトリを設定します。 この例では、フォームに <xref:System.Windows.Forms.Button> が配置され、<xref:System.IO> 名前空間が追加されている必要があります。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.RestoreDirectory" />
        <altmember cref="T:Microsoft.Win32.Registry" />
        <altmember cref="T:System.Windows.Forms.Application" />
        <altmember cref="T:System.Environment" />
        <altmember cref="T:System.IO.Path" />
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="protected virtual IntPtr Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Instance" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Instance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Instance As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr Instance { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Instance : nativeint" Usage="System.Windows.Forms.FileDialog.Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションの Win32 インスタンス ハンドルを取得します。</summary>
        <value>アプリケーションの Win32 インスタンス ハンドル。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFileOk">
      <MemberSignature Language="C#" Value="protected void OnFileOk (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnFileOk(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnFileOk (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnFileOk(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnFileOk : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="fileDialog.OnFileOk e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを含んでいる <see cref="T:System.ComponentModel.CancelEventArgs" /> です。</param>
        <summary><see cref="E:System.Windows.Forms.FileDialog.FileOk" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.FileDialog.FileOk" />
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="protected int Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Options" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Options" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Options As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int Options { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : int" Usage="System.Windows.Forms.FileDialog.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.FileDialog" /> を初期化するための値を取得します。</summary>
        <value><see cref="T:System.Windows.Forms.FileDialog" /> を初期化する内部値のビットごとの組み合わせ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog.Options%2A> プロパティは、Win32 を使用してファイルダイアログボックスを初期化するために使用されるフラグに対応します。 <xref:System.Windows.Forms.FileDialog> クラスのプロパティを使用して、オプションを取得および設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberSignature Language="F#" Value="override this.Reset : unit -&gt; unit" Usage="fileDialog.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてのプロパティを既定値にリセットします。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.FileDialog.Reset" /> をオーバーライドする場合は、必ず基底クラスの <see cref="M:System.Windows.Forms.CommonDialog.Reset" /> メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="RestoreDirectory">
      <MemberSignature Language="C#" Value="public bool RestoreDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RestoreDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.RestoreDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property RestoreDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RestoreDirectory { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RestoreDirectory : bool with get, set" Usage="System.Windows.Forms.FileDialog.RestoreDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ダイアログ ボックスを閉じる前に、ディレクトリを以前選択されていたディレクトリに復元するかどうかを示す値を取得または設定します。</summary>
        <value>ファイルの検索中にユーザーがディレクトリを変更したときに、ダイアログ ボックスが現在のディレクトリを以前選択されていたディレクトリに復元する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.FileDialog> の <xref:System.Windows.Forms.OpenFileDialog> 実装を使用し、プロパティの作成、設定、およびダイアログボックスの表示について説明します。 この例では、[<xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A>] プロパティを使用して、ダイアログボックスを閉じたときに、以前に選択したディレクトリが復元されるようにします。 この例では、フォームに <xref:System.Windows.Forms.Button> が配置され、<xref:System.IO> 名前空間が追加されている必要があります。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.InitialDirectory" />
      </Docs>
    </Member>
    <Member MemberName="RunDialog">
      <MemberSignature Language="C#" Value="protected override bool RunDialog (IntPtr hWndOwner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool RunDialog(native int hWndOwner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.RunDialog(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RunDialog (hWndOwner As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool RunDialog(IntPtr hWndOwner);" />
      <MemberSignature Language="F#" Value="override this.RunDialog : nativeint -&gt; bool" Usage="fileDialog.RunDialog hWndOwner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWndOwner" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWndOwner">コモン ダイアログ ボックスのオーナー ウィンドウのウィンドウ ハンドルを表す値。</param>
        <summary>コモン ダイアログ ボックスを指定します。</summary>
        <returns>ファイルを開くことができた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Windows.Forms.CommonDialog.RunDialog%2A>の実装を提供し、ファイルダイアログのユーザーが <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A>を呼び出すと呼び出されます。  
  
 派生クラスで <xref:System.Windows.Forms.OpenFileDialog> および <xref:System.Windows.Forms.SaveFileDialog> 無効なファイル名 <xref:System.Exception> 発生させることができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowHelp">
      <MemberSignature Language="C#" Value="public bool ShowHelp { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHelp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ShowHelp" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowHelp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowHelp { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowHelp : bool with get, set" Usage="System.Windows.Forms.FileDialog.ShowHelp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイル ダイアログ ボックスに **[ヘルプ]** ボタンを表示するかどうかを示す値を取得または設定します。</summary>
        <value>ダイアログ ボックスにヘルプ ボタンを表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Control.HelpRequested> イベントは、ユーザーが **[ヘルプ]** ボタンをクリックしたときに発生します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportMultiDottedExtensions">
      <MemberSignature Language="C#" Value="public bool SupportMultiDottedExtensions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportMultiDottedExtensions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Property SupportMultiDottedExtensions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportMultiDottedExtensions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SupportMultiDottedExtensions : bool with get, set" Usage="System.Windows.Forms.FileDialog.SupportMultiDottedExtensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>複数のファイル名拡張子を持つファイルの表示および保存をダイアログ ボックスがサポートするかどうかを示す値を取得または設定します。</summary>
        <value>ダイアログ ボックスが複数のファイル名拡張子をサポートする場合は <see langword="true" />、サポートしない場合は <see langword="false" />。 既定では、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合によっては、複数のファイル名拡張子を使用するファイルを開いて保存する必要があります。 たとえば、[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] 配置テクノロジによって使用されるアプリケーションマニフェストファイルは、複合ファイル名拡張子 ".exe. manifest" で終了します。 このプロパティを `true` に設定すると、<xref:System.Windows.Forms.FileDialog.Filter%2A> プロパティを複数のドットで区切った拡張機能に設定できます。  
  
 <xref:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions%2A> が `false`で、複数の点線の拡張を <xref:System.Windows.Forms.FileDialog.Filter%2A>に割り当てた場合、<xref:System.Windows.Forms.SaveFileDialog> などの派生コントロールは、文字列の最後の拡張機能のみを使用します。 たとえば、".manifest" の代わりに ".manifest" が使用されます。  
  
   
  
## Examples  
 次のコード例では、拡張子が ".txt" のファイルを保存します。 このコード例では、アプリケーションが `saveFileDialog1` という名前の <xref:System.Windows.Forms.SaveFileDialog> と `button1`という名前の <xref:System.Windows.Forms.Button> をホストする必要があります。  
  
 [!code-csharp[SupportMultiDottedExtensions#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SupportMultiDottedExtensions/CS/Form1.cs#1)]
 [!code-vb[SupportMultiDottedExtensions#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SupportMultiDottedExtensions/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Forms.FileDialog.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイル ダイアログ ボックスのタイトルを取得または設定します。</summary>
        <value>ファイル ダイアログ ボックスのタイトル。 既定値は空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この文字列は、ダイアログボックスのタイトルバーに配置されます。 タイトルが空の文字列の場合は、既定のタイトル ([名前を付けて保存] または [開く]) が使用されます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.OpenFileDialog>の初期化、<xref:System.Windows.Forms.FileDialog.Title%2A> と <xref:System.Windows.Forms.FileDialog.Filter%2A> プロパティの設定、<xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A?displayProperty=nameWithType> プロパティを true に設定してユーザーが複数のファイルを選択できるようにする方法を示します。 この例を実行するには、`OpenFileDialog1` という名前の <xref:System.Windows.Forms.OpenFileDialog> と `fileButton`という名前の <xref:System.Windows.Forms.Button> を含むフォームに次のコードを貼り付けます。 フォームのコンストラクターまたは `Load` メソッドで `InitializeOpenFileDialog` メソッドを呼び出します。 また、この例では、`Button` コントロールの `Click` イベントが、この例で定義されているイベントハンドラーに接続されている必要があります。  
  
 [!code-cpp[System.Windows.Forms.FileDialog#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#6)]
 [!code-csharp[System.Windows.Forms.FileDialog#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#6)]
 [!code-vb[System.Windows.Forms.FileDialog#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="fileDialog.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このオブジェクトの文字列形式を示します。</summary>
        <returns>このオブジェクトの文字列形式。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateNames">
      <MemberSignature Language="C#" Value="public bool ValidateNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ValidateNames" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateNames As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateNames { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateNames : bool with get, set" Usage="System.Windows.Forms.FileDialog.ValidateNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ダイアログ ボックスが有効な Win32 ファイル名だけを受け入れるかどうかを示す値を取得または設定します。</summary>
        <value>ダイアログ ボックスが有効な Win32 ファイル名だけを受け入れる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーが **[OK]** をクリックしたときに、編集コントロールにスペースが含まれていても、そのファイル名が有効であるかどうかに関係なく、このダイアログボックスにはファイル名が返されます。 既定の拡張子はテキストに追加されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
