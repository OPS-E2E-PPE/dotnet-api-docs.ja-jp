<Type Name="Application" FullName="System.Windows.Forms.Application">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d05183266c226ce945162b2d58edf5efba2a8b87" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83953231" /></Metadata><TypeSignature Language="C#" Value="public sealed class Application" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Application extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Application" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Application" />
  <TypeSignature Language="C++ CLI" Value="public ref class Application sealed" />
  <TypeSignature Language="F#" Value="type Application = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9df58-101">Windows メッセージを処理するために、アプリケーションを開始および停止するメソッドや、アプリケーションの情報を取得するためのプロパティなど、アプリケーションを管理するための <see langword="static" /> メソッドおよびプロパティを提供します。</span><span class="sxs-lookup"><span data-stu-id="9df58-101">Provides <see langword="static" /> methods and properties to manage an application, such as methods to start and stop an application, to process Windows messages, and properties to get information about an application.</span></span> <span data-ttu-id="9df58-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="9df58-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-103"><xref:System.Windows.Forms.Application> クラスには、次のように、アプリケーションとスレッドを開始および停止したり、Windows メッセージを処理したりするためのメソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="9df58-103">The <xref:System.Windows.Forms.Application> class has methods to start and stop applications and threads, and to process Windows messages, as follows:</span></span>  
  
-   <span data-ttu-id="9df58-104"><xref:System.Windows.Forms.Application.Run%2A> は、現在のスレッドでアプリケーションメッセージループを開始し、必要に応じてフォームを表示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-104"><xref:System.Windows.Forms.Application.Run%2A> starts an application message loop on the current thread and, optionally, makes a form visible.</span></span>  
  
-   <span data-ttu-id="9df58-105"><xref:System.Windows.Forms.Application.Exit%2A> または <xref:System.Windows.Forms.Application.ExitThread%2A> によってメッセージループが停止します。</span><span class="sxs-lookup"><span data-stu-id="9df58-105"><xref:System.Windows.Forms.Application.Exit%2A> or <xref:System.Windows.Forms.Application.ExitThread%2A> stops a message loop.</span></span>  
  
-   <span data-ttu-id="9df58-106"><xref:System.Windows.Forms.Application.DoEvents%2A> は、プログラムがループ内にある間にメッセージを処理します。</span><span class="sxs-lookup"><span data-stu-id="9df58-106"><xref:System.Windows.Forms.Application.DoEvents%2A> processes messages while your program is in a loop.</span></span>  
  
-   <span data-ttu-id="9df58-107"><xref:System.Windows.Forms.Application.AddMessageFilter%2A> は、Windows メッセージを監視するために、アプリケーションメッセージポンプにメッセージフィルターを追加します。</span><span class="sxs-lookup"><span data-stu-id="9df58-107"><xref:System.Windows.Forms.Application.AddMessageFilter%2A> adds a message filter to the application message pump to monitor Windows messages.</span></span>  
  
-   <span data-ttu-id="9df58-108"><xref:System.Windows.Forms.IMessageFilter> を使用すると、イベントの発生を停止したり、イベントハンドラーを呼び出す前に特別な操作を実行したりできます。</span><span class="sxs-lookup"><span data-stu-id="9df58-108"><xref:System.Windows.Forms.IMessageFilter> lets you stop an event from being raised or perform special operations before invoking an event handler.</span></span>  
  
 <span data-ttu-id="9df58-109">このクラスには、現在のスレッドのカルチャ情報を取得または設定するためのプロパティと <xref:System.Windows.Forms.Application.CurrentInputLanguage%2A> <xref:System.Windows.Forms.Application.CurrentCulture%2A> があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-109">This class has <xref:System.Windows.Forms.Application.CurrentCulture%2A> and <xref:System.Windows.Forms.Application.CurrentInputLanguage%2A> properties to get or set culture information for the current thread.</span></span>  
  
 <span data-ttu-id="9df58-110">このクラスのインスタンスを作成することはできません。</span><span class="sxs-lookup"><span data-stu-id="9df58-110">You cannot create an instance of this class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-111">次のコード例では、フォームのリストボックス内の数値を一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-111">The following code example lists numbers in a list box on a form.</span></span> <span data-ttu-id="9df58-112">[`button1`] をクリックするたびに、アプリケーションによってリストに別の番号が追加されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-112">Each time you click `button1`, the application adds another number to the list.</span></span>  
  
 <span data-ttu-id="9df58-113">`Main` メソッドは、<xref:System.Windows.Forms.Application.Run%2A> を呼び出して、フォーム、`listBox1`、および `button1`を作成するアプリケーションを起動します。</span><span class="sxs-lookup"><span data-stu-id="9df58-113">The `Main` method calls <xref:System.Windows.Forms.Application.Run%2A> to start the application, which creates the form, `listBox1` and `button1`.</span></span> <span data-ttu-id="9df58-114">ユーザーが [`button1`] をクリックすると、`button1_Click` メソッドに <xref:System.Windows.Forms.MessageBox>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-114">When the user clicks `button1`, the `button1_Click` method displays a <xref:System.Windows.Forms.MessageBox>.</span></span> <span data-ttu-id="9df58-115">ユーザーが <xref:System.Windows.Forms.MessageBox>の [`No`] をクリックすると、`button1_Click` メソッドによってリストに数値が追加されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-115">If the user clicks `No` on the <xref:System.Windows.Forms.MessageBox>, the `button1_Click` method adds a number to the list.</span></span> <span data-ttu-id="9df58-116">ユーザーが [`Yes`] をクリックすると、アプリケーションは <xref:System.Windows.Forms.Application.Exit%2A> を呼び出してキュー内の残りのすべてのメッセージを処理し、終了します。</span><span class="sxs-lookup"><span data-stu-id="9df58-116">If the user clicks `Yes`, the application calls <xref:System.Windows.Forms.Application.Exit%2A> to process all remaining messages in the queue and then to quit.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9df58-117">部分信頼では、<xref:System.Windows.Forms.Application.Exit%2A> の呼び出しが失敗します。</span><span class="sxs-lookup"><span data-stu-id="9df58-117">The call to <xref:System.Windows.Forms.Application.Exit%2A> will fail in partial trust.</span></span>  
  
 [!code-cpp[Classic Application Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application Example/CS/source.cs#1)]
 [!code-vb[Classic Application Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddMessageFilter">
      <MemberSignature Language="C#" Value="public static void AddMessageFilter (System.Windows.Forms.IMessageFilter value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMessageFilter(class System.Windows.Forms.IMessageFilter value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMessageFilter (value As IMessageFilter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMessageFilter(System::Windows::Forms::IMessageFilter ^ value);" />
      <MemberSignature Language="F#" Value="static member AddMessageFilter : System.Windows.Forms.IMessageFilter -&gt; unit" Usage="System.Windows.Forms.Application.AddMessageFilter value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.IMessageFilter" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="9df58-118">インストールする <see cref="T:System.Windows.Forms.IMessageFilter" /> インターフェイスの実装。</span><span class="sxs-lookup"><span data-stu-id="9df58-118">The implementation of the <see cref="T:System.Windows.Forms.IMessageFilter" /> interface you want to install.</span></span></param>
        <summary><span data-ttu-id="9df58-119">メッセージ フィルターを追加して、ルーティング先にルーティングされる Windows メッセージを監視します。</span><span class="sxs-lookup"><span data-stu-id="9df58-119">Adds a message filter to monitor Windows messages as they are routed to their destinations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-120">メッセージフィルターを使用して、特定のイベントが発生しないようにするか、イベントをイベントハンドラーに渡す前にイベントに対して特別な操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="9df58-120">Use a message filter to prevent specific events from being raised or to perform special operations for an event before it is passed to an event handler.</span></span> <span data-ttu-id="9df58-121">メッセージフィルターは、特定のスレッドに対して一意です。</span><span class="sxs-lookup"><span data-stu-id="9df58-121">Message filters are unique to a specific thread.</span></span>  
  
 <span data-ttu-id="9df58-122">メッセージがディスパッチされないようにするには、このメソッドに渡す `value` パラメーターインスタンスが、メッセージを処理するコードで <xref:System.Windows.Forms.IMessageFilter.PreFilterMessage%2A> メソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-122">To prevent a message from being dispatched, the `value` parameter instance that you pass to this method must override the <xref:System.Windows.Forms.IMessageFilter.PreFilterMessage%2A> method with the code to handle the message.</span></span> <span data-ttu-id="9df58-123">メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="9df58-123">The method must return `false`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9df58-124">アプリケーションのメッセージポンプにメッセージフィルターを追加すると、パフォーマンスが低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-124">Adding message filters to the message pump for an application can degrade performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-125">次のコード例では、`TestMessageFilter`という名前のメッセージフィルターを作成します。</span><span class="sxs-lookup"><span data-stu-id="9df58-125">The following code example creates a message filter called `TestMessageFilter`.</span></span> <span data-ttu-id="9df58-126">このフィルターは、マウスの左ボタンに関連するすべてのメッセージをブロックします。</span><span class="sxs-lookup"><span data-stu-id="9df58-126">This filter blocks all messages relating to the left mouse button.</span></span> <span data-ttu-id="9df58-127">メッセージフィルターを使用するには、<xref:System.Windows.Forms.IMessageFilter> インターフェイスの実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-127">Before you can use a message filter, you must provide an implementation for the <xref:System.Windows.Forms.IMessageFilter> interface.</span></span>  
  
 [!code-cpp[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/CS/source.cs#1)]
 [!code-vb[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowQuit">
      <MemberSignature Language="C#" Value="public static bool AllowQuit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AllowQuit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.AllowQuit" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AllowQuit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool AllowQuit { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowQuit : bool" Usage="System.Windows.Forms.Application.AllowQuit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-128">呼び出し元がこのアプリケーションを終了できるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-128">Gets a value indicating whether the caller can quit this application.</span></span></summary>
        <value><span data-ttu-id="9df58-129">呼び出し元がこのアプリケーションを終了できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-129"><see langword="true" /> if the caller can quit this application; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-130">このプロパティは、Web ブラウザー内でホストされている <xref:System.Windows.Forms.Control> から呼び出された場合に `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="9df58-130">This property returns `false` if it is called from a <xref:System.Windows.Forms.Control> being hosted within a Web browser.</span></span> <span data-ttu-id="9df58-131">このため、<xref:System.Windows.Forms.Control> は <xref:System.Windows.Forms.Application>を終了できません。</span><span class="sxs-lookup"><span data-stu-id="9df58-131">Thus, the <xref:System.Windows.Forms.Control> cannot quit the <xref:System.Windows.Forms.Application>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationExit">
      <MemberSignature Language="C#" Value="public static event EventHandler ApplicationExit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ApplicationExit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.ApplicationExit" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event ApplicationExit As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ ApplicationExit;" />
      <MemberSignature Language="F#" Value="member this.ApplicationExit : EventHandler " Usage="member this.ApplicationExit : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-132">アプリケーションをシャットダウンしようとすると発生します。</span><span class="sxs-lookup"><span data-stu-id="9df58-132">Occurs when the application is about to shut down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-133">イベントハンドラーを `ApplicationExit` イベントにアタッチして、アプリケーションの実行を停止する前に、未処理の必須タスクを実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-133">You must attach the event handlers to the `ApplicationExit` event to perform unhandled, required tasks before the application stops running.</span></span> <span data-ttu-id="9df58-134">このアプリケーションによって開かれたファイルを閉じることができます。また、ガベージコレクションによって再利用されなかったオブジェクトを破棄することもできます。</span><span class="sxs-lookup"><span data-stu-id="9df58-134">You can close files opened by this application, or dispose of objects that garbage collection did not reclaim.</span></span>  
  
 <span data-ttu-id="9df58-135">これは静的イベントであるため、`ApplicationExit` イベントハンドラー自体でこのイベントにアタッチされているすべてのイベントハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-135">Because this is a static event, you must detach any event handlers attached to this event in the `ApplicationExit` event handler itself.</span></span> <span data-ttu-id="9df58-136">これらのハンドラーをデタッチしないと、イベントにアタッチされたままになり、メモリが引き続き使用されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-136">If you do not detach these handlers, they will remain attached to the event and continue to consume memory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-137">次のコード例では、2つのフォームを表示し、両方のフォームが閉じられたときにアプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="9df58-137">The following code example displays two forms and exits the application when both forms are closed.</span></span> <span data-ttu-id="9df58-138">アプリケーションの開始時と終了時には、各フォームの位置が記憶されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-138">When the application starts and exits, the position of each form is remembered.</span></span> <span data-ttu-id="9df58-139">この例では、`ApplicationExit` イベントを使用して、フォームの位置をファイルに保存するタイミングと、`FileStream` を閉じる必要があるタイミングを確認します。</span><span class="sxs-lookup"><span data-stu-id="9df58-139">This example demonstrates using the `ApplicationExit` event to know when the form positions should be persisted to the file, and when the `FileStream` should be closed.</span></span>  
  
 <span data-ttu-id="9df58-140">クラス `MyApplicationContext` は <xref:System.Windows.Forms.ApplicationContext> から継承され、各フォームが閉じられた日時を追跡し、両方ともの場合、現在のスレッドを終了します。</span><span class="sxs-lookup"><span data-stu-id="9df58-140">The class `MyApplicationContext` inherits from <xref:System.Windows.Forms.ApplicationContext> and keeps track of when each form is closed, and exits the current thread when they both are.</span></span> <span data-ttu-id="9df58-141">クラスは、各フォームが閉じられたときの位置を記憶します。</span><span class="sxs-lookup"><span data-stu-id="9df58-141">The class remembers the position of each form when it is closed.</span></span> <span data-ttu-id="9df58-142">`ApplicationExit` イベントが発生すると、クラスはユーザーの各の位置をファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="9df58-142">When the `ApplicationExit` event occurs, the class writes the positions of each for the user to the file.</span></span> <span data-ttu-id="9df58-143">フォーム位置データは、<xref:System.Windows.Forms.Application.UserAppDataPath%2A>によって決定された場所に作成される `appdata.txt` という名前のファイルに格納されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-143">The form position data is stored in a file titled `appdata.txt` that is created in the location determined by <xref:System.Windows.Forms.Application.UserAppDataPath%2A>.</span></span> <span data-ttu-id="9df58-144">`Main` メソッドは、`Application.Run(context)` を呼び出して、<xref:System.Windows.Forms.ApplicationContext>を指定してアプリケーションを起動します。</span><span class="sxs-lookup"><span data-stu-id="9df58-144">The `Main` method calls `Application.Run(context)` to start the application given the <xref:System.Windows.Forms.ApplicationContext>.</span></span>  
  
 <span data-ttu-id="9df58-145">このコードは、<xref:System.Windows.Forms.ApplicationContext> クラスの概要に示されている例の抜粋です。</span><span class="sxs-lookup"><span data-stu-id="9df58-145">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.ApplicationContext> class overview.</span></span> <span data-ttu-id="9df58-146">コードリスト全体については、「<xref:System.Windows.Forms.ApplicationContext>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-146">See <xref:System.Windows.Forms.ApplicationContext> for the whole code listing.</span></span>  
  
 [!code-cpp[Application#5](~/samples/snippets/cpp/VS_Snippets_Winforms/Application/CPP/source.cpp#5)]
 [!code-csharp[Application#5](~/samples/snippets/csharp/VS_Snippets_Winforms/Application/CS/source.cs#5)]
 [!code-vb[Application#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Application/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
      </Docs>
    </Member>
    <Member MemberName="CommonAppDataPath">
      <MemberSignature Language="C#" Value="public static string CommonAppDataPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CommonAppDataPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.CommonAppDataPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CommonAppDataPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CommonAppDataPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommonAppDataPath : string" Usage="System.Windows.Forms.Application.CommonAppDataPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-147">すべてのユーザーが共有するアプリケーション データのパスを取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-147">Gets the path for the application data that is shared among all users.</span></span></summary>
        <value><span data-ttu-id="9df58-148">すべてのユーザーが共有するアプリケーション データのパス。</span><span class="sxs-lookup"><span data-stu-id="9df58-148">The path for the application data that is shared among all users.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-149">パスが存在しない場合は、次の形式で作成されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-149">If a path does not exist, one is created in the following format:</span></span>  
  
 <span data-ttu-id="9df58-150">*ベースパス*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span><span class="sxs-lookup"><span data-stu-id="9df58-150">*Base Path*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span></span>  
  
 <span data-ttu-id="9df58-151"><xref:System.Windows.Forms.Application.ProductVersion%2A>最初にメインの実行可能ファイルを含むアセンブリに `AssemblyInformationalVersion` 属性が含まれているかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="9df58-151"><xref:System.Windows.Forms.Application.ProductVersion%2A> first looks to see if the assembly containing the main executable has the `AssemblyInformationalVersion` attribute on it.</span></span> <span data-ttu-id="9df58-152">この属性が存在する場合は、<xref:System.Windows.Forms.Application.ProductVersion%2A>と<xref:System.Windows.Forms.Application.CommonAppDataPath%2A>の両方で <xref:System.Windows.Forms.Application.ProductVersion%2A>が使用されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-152">If this attribute exists, it is used for both <xref:System.Windows.Forms.Application.ProductVersion%2A> and <xref:System.Windows.Forms.Application.CommonAppDataPath%2A>.</span></span> <span data-ttu-id="9df58-153">この属性が存在しない場合、両方のプロパティで、実行可能ファイルのバージョンが代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-153">If this attribute does not exist, both properties use the version of the executable file instead.</span></span>  
  
 <span data-ttu-id="9df58-154">パスは、Windows フォーム アプリケーションの配置に、[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]を使用しているかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="9df58-154">The path will be different depending on whether the Windows Forms application is deployed using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span></span> [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] <span data-ttu-id="9df58-155">アプリケーションは、C:\Documents and Settings\\*username* ディレクトリでユーザーごとのアプリケーション キャッシュに格納されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-155">applications are stored in a per-user application cache in the C:\Documents and Settings\\*username* directory.</span></span> <span data-ttu-id="9df58-156">詳細については、[ローカルへのアクセスとリモート データには、ClickOnce アプリケーション](/visualstudio/deployment/accessing-local-and-remote-data-in-clickonce-applications) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-156">For more information, see [Accessing Local and Remote Data in ClickOnce Applications](/visualstudio/deployment/accessing-local-and-remote-data-in-clickonce-applications).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.CommonAppDataRegistry" />
      </Docs>
    </Member>
    <Member MemberName="CommonAppDataRegistry">
      <MemberSignature Language="C#" Value="public static Microsoft.Win32.RegistryKey CommonAppDataRegistry { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.Win32.RegistryKey CommonAppDataRegistry" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.CommonAppDataRegistry" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CommonAppDataRegistry As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::Win32::RegistryKey ^ CommonAppDataRegistry { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommonAppDataRegistry : Microsoft.Win32.RegistryKey" Usage="System.Windows.Forms.Application.CommonAppDataRegistry" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-157">すべてのユーザーが共有するアプリケーション データのレジストリ キーを取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-157">Gets the registry key for the application data that is shared among all users.</span></span></summary>
        <value><span data-ttu-id="9df58-158">すべてのユーザーが共有するアプリケーション データのレジストリ キーを表す <see cref="T:Microsoft.Win32.RegistryKey" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-158">A <see cref="T:Microsoft.Win32.RegistryKey" /> representing the registry key of the application data that is shared among all users.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-159">キーが存在しない場合は、次の形式で作成されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-159">If the key does not exist, it is created in the following format:</span></span>  
  
 <span data-ttu-id="9df58-160">LocalMachine\Software\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span><span class="sxs-lookup"><span data-stu-id="9df58-160">LocalMachine\Software\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span></span>   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompanyName">
      <MemberSignature Language="C#" Value="public static string CompanyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CompanyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.CompanyName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CompanyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CompanyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompanyName : string" Usage="System.Windows.Forms.Application.CompanyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-161">アプリケーションに関連付けられている会社名を取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-161">Gets the company name associated with the application.</span></span></summary>
        <value><span data-ttu-id="9df58-162">会社名。</span><span class="sxs-lookup"><span data-stu-id="9df58-162">The company name.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9df58-163">次のコード例では、このプロパティを取得し、テキストボックスにその値を表示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-163">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="9df58-164">この例では、`textBox1` がフォームに配置されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-164">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.CompanyName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.CompanyName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.CompanyName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.CompanyName Example/CS/source.cs#1)]
 [!code-vb[Classic Application.CompanyName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.CompanyName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.ProductName" />
        <altmember cref="P:System.Windows.Forms.Application.ProductVersion" />
        <altmember cref="T:System.Reflection.AssemblyCompanyAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Windows.Forms.Application.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-165">現在のスレッドのカルチャ情報を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-165">Gets or sets the culture information for the current thread.</span></span></summary>
        <value><span data-ttu-id="9df58-166">現在のスレッドのカルチャ情報を表す <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-166">A <see cref="T:System.Globalization.CultureInfo" /> representing the culture information for the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9df58-167">次のコード例では、このプロパティを取得し、テキストボックスにその値を表示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-167">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="9df58-168">この例では、`textBox1` がフォームに配置されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-168">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.CurrentCulture Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.CurrentCulture Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.CurrentCulture Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.CurrentCulture Example/CS/source.cs#1)]
 [!code-vb[Classic Application.CurrentCulture Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.CurrentCulture Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.InputLanguage" />
      </Docs>
    </Member>
    <Member MemberName="CurrentInputLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguage CurrentInputLanguage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.InputLanguage CurrentInputLanguage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.CurrentInputLanguage" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentInputLanguage As InputLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::InputLanguage ^ CurrentInputLanguage { System::Windows::Forms::InputLanguage ^ get(); void set(System::Windows::Forms::InputLanguage ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentInputLanguage : System.Windows.Forms.InputLanguage with get, set" Usage="System.Windows.Forms.Application.CurrentInputLanguage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-169">現在のスレッドの現在の入力言語を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-169">Gets or sets the current input language for the current thread.</span></span></summary>
        <value><span data-ttu-id="9df58-170">現在のスレッドの現在の入力言語を表す <see cref="T:System.Windows.Forms.InputLanguage" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-170">An <see cref="T:System.Windows.Forms.InputLanguage" /> representing the current input language for the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9df58-171">次のコード例では、このプロパティを取得し、テキストボックスにその値を表示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-171">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="9df58-172">この例では、`textBox1` がフォームに配置されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-172">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.CurrentInputLanguage Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.CurrentInputLanguage Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.CurrentInputLanguage Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.CurrentInputLanguage Example/CS/source.cs#1)]
 [!code-vb[Classic Application.CurrentInputLanguage Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.CurrentInputLanguage Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Windows.Forms.InputLanguage" />
      </Docs>
    </Member>
    <Member MemberName="DoEvents">
      <MemberSignature Language="C#" Value="public static void DoEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DoEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.DoEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DoEvents ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DoEvents();" />
      <MemberSignature Language="F#" Value="static member DoEvents : unit -&gt; unit" Usage="System.Windows.Forms.Application.DoEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9df58-173">メッセージ キューに現在ある Windows メッセージをすべて処理します。</span><span class="sxs-lookup"><span data-stu-id="9df58-173">Processes all Windows messages currently in the message queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-174">Windows フォームを実行すると、新しいフォームが作成され、イベントが処理されるまで待機します。</span><span class="sxs-lookup"><span data-stu-id="9df58-174">When you run a Windows Form, it creates the new form, which then waits for events to handle.</span></span> <span data-ttu-id="9df58-175">フォームがイベントを処理するたびに、そのイベントに関連付けられているすべてのコードが処理されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-175">Each time the form handles an event, it processes all the code associated with that event.</span></span> <span data-ttu-id="9df58-176">他のすべてのイベントは、キューで待機します。</span><span class="sxs-lookup"><span data-stu-id="9df58-176">All other events wait in the queue.</span></span> <span data-ttu-id="9df58-177">コードによってイベントが処理されても、アプリケーションは応答しません。</span><span class="sxs-lookup"><span data-stu-id="9df58-177">While your code handles the event, your application does not respond.</span></span> <span data-ttu-id="9df58-178">たとえば、別のウィンドウが上にドラッグされている場合、ウィンドウは再描画されません。</span><span class="sxs-lookup"><span data-stu-id="9df58-178">For example, the window does not repaint if another window is dragged on top.</span></span>  
  
 <span data-ttu-id="9df58-179">コードで <xref:System.Windows.Forms.Application.DoEvents%2A> を呼び出すと、アプリケーションは他のイベントを処理できます。</span><span class="sxs-lookup"><span data-stu-id="9df58-179">If you call <xref:System.Windows.Forms.Application.DoEvents%2A> in your code, your application can handle the other events.</span></span> <span data-ttu-id="9df58-180">たとえば、<xref:System.Windows.Forms.ListBox> にデータを追加して <xref:System.Windows.Forms.Application.DoEvents%2A> をコードに追加するフォームがある場合、別のウィンドウをドラッグするとフォームが再描画されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-180">For example, if you have a form that adds data to a <xref:System.Windows.Forms.ListBox> and add <xref:System.Windows.Forms.Application.DoEvents%2A> to your code, your form repaints when another window is dragged over it.</span></span> <span data-ttu-id="9df58-181">コードから <xref:System.Windows.Forms.Application.DoEvents%2A> を削除すると、ボタンのクリックイベントハンドラーの実行が完了するまでフォームは再描画されません。</span><span class="sxs-lookup"><span data-stu-id="9df58-181">If you remove <xref:System.Windows.Forms.Application.DoEvents%2A> from your code, your form will not repaint until the click event handler of the button is finished executing.</span></span> <span data-ttu-id="9df58-182">メッセージングの詳細については、「 [Windows フォームでのユーザー入力](/dotnet/framework/winforms/user-input-in-windows-forms)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-182">For more information on messaging, see [User Input in Windows Forms](/dotnet/framework/winforms/user-input-in-windows-forms).</span></span>  
  
 <span data-ttu-id="9df58-183">Visual Basic 6.0 とは異なり、<xref:System.Windows.Forms.Application.DoEvents%2A> メソッドは <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> メソッドを呼び出しません。</span><span class="sxs-lookup"><span data-stu-id="9df58-183">Unlike Visual Basic 6.0, the <xref:System.Windows.Forms.Application.DoEvents%2A> method does not call the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="9df58-184">通常、このメソッドをループで使用してメッセージを処理します。</span><span class="sxs-lookup"><span data-stu-id="9df58-184">Typically, you use this method in a loop to process messages.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9df58-185">このメソッドを呼び出すと、待機中のすべてのウィンドウメッセージが処理されている間、現在のスレッドが中断されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-185">Calling this method causes the current thread to be suspended while all waiting window messages are processed.</span></span> <span data-ttu-id="9df58-186">メッセージによってイベントがトリガーされる場合は、アプリケーションコードの他の領域が実行される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-186">If a message causes an event to be triggered, then other areas of your application code may execute.</span></span> <span data-ttu-id="9df58-187">これにより、アプリケーションで予期しない動作が発生し、デバッグが困難になる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-187">This can cause your application to exhibit unexpected behaviors that are difficult to debug.</span></span> <span data-ttu-id="9df58-188">長い時間がかかる操作や計算を実行する場合は、新しいスレッドでこれらの操作を実行することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="9df58-188">If you perform operations or computations that take a long time, it is often preferable to perform those operations on a new thread.</span></span> <span data-ttu-id="9df58-189">非同期プログラミングの詳細については、「[非同期プログラミングモデル (APM)](/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-189">For more information about asynchronous programming, see [Asynchronous Programming Model (APM)](/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-190">次のコード例は、<xref:System.Windows.Forms.Application.DoEvents%2A> メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9df58-190">The following code example demonstrates using the <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span> <span data-ttu-id="9df58-191">この例を実行すると、ユーザーは <xref:System.Windows.Forms.OpenFileDialog>からグラフィックスファイルを選択できます。</span><span class="sxs-lookup"><span data-stu-id="9df58-191">When the example runs, a user can select graphics files from an <xref:System.Windows.Forms.OpenFileDialog>.</span></span> <span data-ttu-id="9df58-192">選択したファイルがフォームに表示されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-192">The selected files are displayed in the form.</span></span> <span data-ttu-id="9df58-193"><xref:System.Windows.Forms.Application.DoEvents%2A> メソッドは、開かれた各グラフィックスファイルに対してフォームを強制的に再描画します。</span><span class="sxs-lookup"><span data-stu-id="9df58-193">The <xref:System.Windows.Forms.Application.DoEvents%2A> method forces a repaint of the form for each graphics file opened.</span></span> <span data-ttu-id="9df58-194">この例を実行するには、`PictureBox1`という名前の <xref:System.Windows.Forms.PictureBox>、`OpenFileDialog1`という名前の <xref:System.Windows.Forms.OpenFileDialog>、および `fileButton`という名前のボタンを含むフォームに次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="9df58-194">To run this example, paste the following code in a form containing a <xref:System.Windows.Forms.PictureBox> named `PictureBox1`, an <xref:System.Windows.Forms.OpenFileDialog> named `OpenFileDialog1`, and a button named `fileButton`.</span></span> <span data-ttu-id="9df58-195">フォームのコンストラクターまたは `Load` メソッドから `InitializePictureBox` および `InitializeOpenFileDialog` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9df58-195">Call the `InitializePictureBox` and `InitializeOpenFileDialog` methods from the form's constructor or `Load` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9df58-196">Visual Studio では、ドラッグ操作を使用してフォームに <xref:System.Windows.Forms.OpenFileDialog> を追加する場合、<xref:System.Windows.Forms.OpenFileDialog>の新しいインスタンスを作成する行を削除することによって、次の `InitializeOpenFileDialog` メソッドを変更する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-196">In Visual Studio, if you add an <xref:System.Windows.Forms.OpenFileDialog> to your form by using a drag operation, you will have to modify the following `InitializeOpenFileDialog` method by removing the line that creates a new instance of <xref:System.Windows.Forms.OpenFileDialog>.</span></span>  
  
 <span data-ttu-id="9df58-197">また、この例では、<xref:System.Windows.Forms.Button> コントロールの <xref:System.Windows.Forms.Control.Click?displayProperty=nameWithType> イベントと <xref:System.Windows.Forms.OpenFileDialog> の <xref:System.Windows.Forms.FileDialog.FileOk> イベントが、この例で定義されているイベントハンドラーに接続されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-197">The example also requires that the <xref:System.Windows.Forms.Control.Click?displayProperty=nameWithType> event of the <xref:System.Windows.Forms.Button> control and the <xref:System.Windows.Forms.FileDialog.FileOk> event of the <xref:System.Windows.Forms.OpenFileDialog> are connected to the event handlers defined in the example.</span></span> <span data-ttu-id="9df58-198">この例が実行されている場合は、ボタンをクリックしてダイアログボックスを表示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-198">When the example is running, display the dialog box by clicking the button.</span></span>  
  
 [!code-cpp[System.Windows.Forms.FileDialog#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#1)]
 [!code-csharp[System.Windows.Forms.FileDialog#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialog#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
        <altmember cref="M:System.Windows.Forms.Application.Run" />
      </Docs>
    </Member>
    <Member MemberName="EnableVisualStyles">
      <MemberSignature Language="C#" Value="public static void EnableVisualStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableVisualStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.EnableVisualStyles" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableVisualStyles ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableVisualStyles();" />
      <MemberSignature Language="F#" Value="static member EnableVisualStyles : unit -&gt; unit" Usage="System.Windows.Forms.Application.EnableVisualStyles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9df58-199">アプリケーションで visual スタイルを有効にします。</span><span class="sxs-lookup"><span data-stu-id="9df58-199">Enables visual styles for the application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-200">このメソッドは、アプリケーションの視覚スタイルを有効にします。</span><span class="sxs-lookup"><span data-stu-id="9df58-200">This method enables visual styles for the application.</span></span> <span data-ttu-id="9df58-201">視覚スタイルとは、オペレーティングシステムのテーマを形成する色、フォント、およびその他のビジュアル要素です。</span><span class="sxs-lookup"><span data-stu-id="9df58-201">Visual styles are the colors, fonts, and other visual elements that form an operating system theme.</span></span> <span data-ttu-id="9df58-202">コントロールとオペレーティングシステムでサポートされている場合は、visual スタイルを使用してコントロールが描画されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-202">Controls will draw with visual styles if the control and the operating system support it.</span></span> <span data-ttu-id="9df58-203">効果を与えるには、アプリケーションでコントロールを作成する前に <xref:System.Windows.Forms.Application.EnableVisualStyles> を呼び出す必要があります。通常、<xref:System.Windows.Forms.Application.EnableVisualStyles> は `Main` 関数の最初の行です。</span><span class="sxs-lookup"><span data-stu-id="9df58-203">To have an effect, <xref:System.Windows.Forms.Application.EnableVisualStyles> must be called before creating any controls in the application; typically, <xref:System.Windows.Forms.Application.EnableVisualStyles> is the first line in the `Main` function.</span></span> <span data-ttu-id="9df58-204"><xref:System.Windows.Forms.Application.EnableVisualStyles>を呼び出すときに、visual スタイルを有効にするために個別のマニフェストは必要ありません。</span><span class="sxs-lookup"><span data-stu-id="9df58-204">A separate manifest is not required to enable visual styles when calling <xref:System.Windows.Forms.Application.EnableVisualStyles>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9df58-205">.NET Framework 2.0 より前では、コントロールを visual スタイルで描画するために、<xref:System.Windows.Forms.ButtonBase>から派生するコントロールなど、一部のコントロールの `FlatStyle` プロパティを <xref:System.Windows.Forms.FlatStyle.System?displayProperty=nameWithType> に設定する必要がありました。</span><span class="sxs-lookup"><span data-stu-id="9df58-205">Prior to the .NET Framework 2.0, the `FlatStyle` property of some controls, such as controls that derive from <xref:System.Windows.Forms.ButtonBase>, had to be set to <xref:System.Windows.Forms.FlatStyle.System?displayProperty=nameWithType> in order for the controls to be drawn with visual styles.</span></span> <span data-ttu-id="9df58-206">.NET Framework 2.0 で記述されたアプリケーションでは、これは不要になりました。</span><span class="sxs-lookup"><span data-stu-id="9df58-206">In applications written with the .NET Framework 2.0, this is no longer necessary.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9df58-207">このメソッドは、Internet Explorer でホストされているコントロールには影響しません。</span><span class="sxs-lookup"><span data-stu-id="9df58-207">This method will have no effect for controls hosted in Internet Explorer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-208">次のコード例は、`Main` 関数で <xref:System.Windows.Forms.Application.EnableVisualStyles%2A> を呼び出して、アプリケーションの visual スタイルを有効にする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9df58-208">The following code example demonstrates calling <xref:System.Windows.Forms.Application.EnableVisualStyles%2A> in the `Main` function to enable visual styles for the application.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Application.EnableVisualStyles#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Application.EnableVisualStyles/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Application.EnableVisualStyles#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Application.EnableVisualStyles/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Application.EnableVisualStyles#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Application.EnableVisualStyles/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.RenderWithVisualStyles" />
        <altmember cref="P:System.Windows.Forms.Application.VisualStyleState" />
        <altmember cref="T:System.Windows.Forms.FlatStyle" />
      </Docs>
    </Member>
    <Member MemberName="EnterThreadModal">
      <MemberSignature Language="C#" Value="public static event EventHandler EnterThreadModal;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EnterThreadModal" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.EnterThreadModal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event EnterThreadModal As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ EnterThreadModal;" />
      <MemberSignature Language="F#" Value="member this.EnterThreadModal : EventHandler " Usage="member this.EnterThreadModal : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-209">アプリケーションがモーダル状態に入ろうとすると発生します。</span><span class="sxs-lookup"><span data-stu-id="9df58-209">Occurs when the application is about to enter a modal state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="9df58-210">これは静的イベントなので、アプリケーションが破棄されるときにイベントハンドラーをデタッチする必要があります。これを行わないと、メモリリークが発生します。</span><span class="sxs-lookup"><span data-stu-id="9df58-210">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-211">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-211">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="9df58-212">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Application.EnterThreadModal> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="9df58-212">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Application.EnterThreadModal> event.</span></span> <span data-ttu-id="9df58-213">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="9df58-213">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="9df58-214">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-214">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="9df58-215">コード例を実行するには、コードを Windows フォームに貼り付け、イベントハンドラーが <xref:System.Windows.Forms.Application.EnterThreadModal> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="9df58-215">To run the example code, paste it into a Windows Forms and ensure that the event handler is associated with the <xref:System.Windows.Forms.Application.EnterThreadModal> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#3)]
 [!code-vb[System.Windows.Forms.EventExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecutablePath">
      <MemberSignature Language="C#" Value="public static string ExecutablePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ExecutablePath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.ExecutablePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ExecutablePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ExecutablePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecutablePath : string" Usage="System.Windows.Forms.Application.ExecutablePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-216">アプリケーションを開始した実行可能ファイルのパスを、ファイル名を含めて取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-216">Gets the path for the executable file that started the application, including the executable name.</span></span></summary>
        <value><span data-ttu-id="9df58-217">アプリケーションを開始した実行可能ファイルのパスおよびファイル名。</span><span class="sxs-lookup"><span data-stu-id="9df58-217">The path and executable name for the executable file that started the application.</span></span>  
  
<span data-ttu-id="9df58-218">このパスは、Windows フォーム アプリケーションが [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] を使用して配置されているかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="9df58-218">This path will be different depending on whether the Windows Forms application is deployed using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span></span> [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] <span data-ttu-id="9df58-219">アプリケーションは、C:\Documents and Settings\\*username* ディレクトリでユーザーごとのアプリケーション キャッシュに格納されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-219">applications are stored in a per-user application cache in the C:\Documents and Settings\\*username* directory.</span></span> <span data-ttu-id="9df58-220">詳細については、[ローカルへのアクセスとリモート データには、ClickOnce アプリケーション](/visualstudio/deployment/accessing-local-and-remote-data-in-clickonce-applications) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-220">For more information, see [Accessing Local and Remote Data in ClickOnce Applications](/visualstudio/deployment/accessing-local-and-remote-data-in-clickonce-applications).</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Exit">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9df58-221">終了する必要があるすべてのメッセージ ポンプを通知し、メッセージが処理されると、すべてのアプリケーション ウィンドウを閉じます。</span><span class="sxs-lookup"><span data-stu-id="9df58-221">Informs all message pumps that they must terminate, and then closes all application windows after the messages have been processed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Exit" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit();" />
      <MemberSignature Language="F#" Value="static member Exit : unit -&gt; unit" Usage="System.Windows.Forms.Application.Exit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9df58-222">終了する必要があるすべてのメッセージ ポンプを通知し、メッセージが処理されると、すべてのアプリケーション ウィンドウを閉じます。</span><span class="sxs-lookup"><span data-stu-id="9df58-222">Informs all message pumps that they must terminate, and then closes all application windows after the messages have been processed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-223"><xref:System.Windows.Forms.Application.Exit%2A> メソッドは、すべてのスレッドで実行中のすべてのメッセージループを停止し、アプリケーションのすべてのウィンドウを閉じます。</span><span class="sxs-lookup"><span data-stu-id="9df58-223">The <xref:System.Windows.Forms.Application.Exit%2A> method stops all running message loops on all threads and closes all windows of the application.</span></span> <span data-ttu-id="9df58-224">このメソッドは、必ずしもアプリケーションを強制的に終了するわけではありません。</span><span class="sxs-lookup"><span data-stu-id="9df58-224">This method does not necessarily force the application to exit.</span></span> <span data-ttu-id="9df58-225"><xref:System.Windows.Forms.Application.Exit%2A> メソッドは通常、メッセージループ内から呼び出され、<xref:System.Windows.Forms.Application.Run%2A> を強制的に返すようにします。</span><span class="sxs-lookup"><span data-stu-id="9df58-225">The <xref:System.Windows.Forms.Application.Exit%2A> method is typically called from within a message loop, and forces <xref:System.Windows.Forms.Application.Run%2A> to return.</span></span> <span data-ttu-id="9df58-226">現在のスレッドに対してのみメッセージループを終了するには、<xref:System.Windows.Forms.Application.ExitThread%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9df58-226">To exit a message loop for the current thread only, call <xref:System.Windows.Forms.Application.ExitThread%2A>.</span></span>  
  
 <span data-ttu-id="9df58-227"><xref:System.Windows.Forms.Application.Exit%2A> は、次のイベントを発生させ、関連付けられた条件付きアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="9df58-227"><xref:System.Windows.Forms.Application.Exit%2A> raises the following events and performs the associated conditional actions:</span></span>  
  
-   <span data-ttu-id="9df58-228"><xref:System.Windows.Forms.Application.OpenForms%2A> プロパティによって表されるすべてのフォームに対して、<xref:System.Windows.Forms.Form.FormClosing> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="9df58-228">A <xref:System.Windows.Forms.Form.FormClosing> event is raised for every form represented by the <xref:System.Windows.Forms.Application.OpenForms%2A> property.</span></span> <span data-ttu-id="9df58-229">このイベントは、<xref:System.Windows.Forms.FormClosingEventArgs> パラメーターの <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> プロパティを `true`に設定することによって取り消すことができます。</span><span class="sxs-lookup"><span data-stu-id="9df58-229">This event can be canceled by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of their <xref:System.Windows.Forms.FormClosingEventArgs> parameter to `true`.</span></span>  
  
-   <span data-ttu-id="9df58-230">1つ以上のハンドラーがイベントをキャンセルした場合、<xref:System.Windows.Forms.Application.Exit%2A> は、それ以上のアクションを実行せずに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="9df58-230">If one of more of the handlers cancels the event, then <xref:System.Windows.Forms.Application.Exit%2A> returns without further action.</span></span> <span data-ttu-id="9df58-231">それ以外の場合は、開いているすべてのフォームに対して <xref:System.Windows.Forms.Form.FormClosed> イベントが発生し、実行中のすべてのメッセージループとフォームが閉じられます。</span><span class="sxs-lookup"><span data-stu-id="9df58-231">Otherwise, a <xref:System.Windows.Forms.Form.FormClosed> event is raised for every open form, then all running message loops and forms are closed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9df58-232"><xref:System.Windows.Forms.Application.Exit%2A> メソッドは、[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]のために廃止された <xref:System.Windows.Forms.Form.Closed> イベントと <xref:System.Windows.Forms.Form.Closing> イベントを発生させません。</span><span class="sxs-lookup"><span data-stu-id="9df58-232">The <xref:System.Windows.Forms.Application.Exit%2A> method does not raise the <xref:System.Windows.Forms.Form.Closed> and <xref:System.Windows.Forms.Form.Closing> events, which are obsolete as of [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-233">次のコード例では、フォームのリストボックス内の数値を一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-233">The following code example lists numbers in a list box on a form.</span></span> <span data-ttu-id="9df58-234">[`button1`] をクリックするたびに、アプリケーションによってリストに別の番号が追加されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-234">Each time you click `button1`, the application adds another number to the list.</span></span>  
  
 <span data-ttu-id="9df58-235">`Main` メソッドは、<xref:System.Windows.Forms.Application.Run%2A> を呼び出して、フォーム、`listBox1`、および `button1`を作成するアプリケーションを起動します。</span><span class="sxs-lookup"><span data-stu-id="9df58-235">The `Main` method calls <xref:System.Windows.Forms.Application.Run%2A> to start the application, which creates the form, `listBox1`, and `button1`.</span></span> <span data-ttu-id="9df58-236">ユーザーが [`button1`] をクリックすると、`button1_Click` メソッドによってリストボックスに 1 ~ 3 の数字が追加され、<xref:System.Windows.Forms.MessageBox>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-236">When the user clicks `button1`, the `button1_Click` method adds numbers one to three to the list box, and displays a <xref:System.Windows.Forms.MessageBox>.</span></span> <span data-ttu-id="9df58-237">ユーザーが <xref:System.Windows.Forms.MessageBox>で **[いいえ]** をクリックすると、`button1_Click` メソッドによってリストに別の番号が追加されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-237">If the user clicks **No** on the <xref:System.Windows.Forms.MessageBox>, the `button1_Click` method adds another number to the list.</span></span> <span data-ttu-id="9df58-238">ユーザーが **[はい]** をクリックすると、アプリケーションは <xref:System.Windows.Forms.Application.Exit%2A>を呼び出して、キュー内の残りのすべてのメッセージを処理し、終了します。</span><span class="sxs-lookup"><span data-stu-id="9df58-238">If the user clicks **Yes**, the application calls <xref:System.Windows.Forms.Application.Exit%2A>, to process all remaining messages in the queue and then to quit.</span></span>  
  
 <span data-ttu-id="9df58-239">この例では、`listBox1` と `button1` がインスタンス化され、フォームに配置されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-239">The example requires that `listBox1` and `button1` have been instantiated and placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.Exit Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.Exit Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.Exit Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.Exit Example/CS/source.cs#1)]
 [!code-vb[Classic Application.Exit Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.Exit Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
        <altmember cref="M:System.Windows.Forms.Application.Run" />
        <altmember cref="P:System.Windows.Forms.Application.OpenForms" />
        <altmember cref="E:System.Windows.Forms.Form.Closed" />
        <altmember cref="E:System.Windows.Forms.Form.Closing" />
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Exit(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="static member Exit : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="System.Windows.Forms.Application.Exit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9df58-240">アプリケーション内の <see cref="T:System.Windows.Forms.Form" /> が終了をキャンセルしたかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="9df58-240">Returns whether any <see cref="T:System.Windows.Forms.Form" /> within the application cancelled the exit.</span></span></param>
        <summary><span data-ttu-id="9df58-241">終了する必要があるすべてのメッセージ ポンプを通知し、メッセージが処理されると、すべてのアプリケーション ウィンドウを閉じます。</span><span class="sxs-lookup"><span data-stu-id="9df58-241">Informs all message pumps that they must terminate, and then closes all application windows after the messages have been processed.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
      </Docs>
    </Member>
    <Member MemberName="ExitThread">
      <MemberSignature Language="C#" Value="public static void ExitThread ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitThread() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.ExitThread" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitThread ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitThread();" />
      <MemberSignature Language="F#" Value="static member ExitThread : unit -&gt; unit" Usage="System.Windows.Forms.Application.ExitThread " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9df58-242">現在のスレッドのメッセージ ループを終了し、スレッドのウィンドウをすべて閉じます。</span><span class="sxs-lookup"><span data-stu-id="9df58-242">Exits the message loop on the current thread and closes all windows on the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-243">現在のスレッドのメッセージループを終了するには、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="9df58-243">Use this method to exit the message loop of the current thread.</span></span> <span data-ttu-id="9df58-244">このメソッドにより、現在のスレッドの <xref:System.Windows.Forms.Application.Run%2A> の呼び出しが返されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-244">This method causes the call to <xref:System.Windows.Forms.Application.Run%2A> for the current thread to return.</span></span> <span data-ttu-id="9df58-245">アプリケーション全体を終了するには、<xref:System.Windows.Forms.Application.Exit%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9df58-245">To exit the entire application, call <xref:System.Windows.Forms.Application.Exit%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
      </Docs>
    </Member>
    <Member MemberName="FilterMessage">
      <MemberSignature Language="C#" Value="public static bool FilterMessage (ref System.Windows.Forms.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool FilterMessage(valuetype System.Windows.Forms.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.FilterMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FilterMessage (ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool FilterMessage(System::Windows::Forms::Message % message);" />
      <MemberSignature Language="F#" Value="static member FilterMessage : Message -&gt; bool" Usage="System.Windows.Forms.Application.FilterMessage message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Windows.Forms.Message" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="9df58-246">フィルター処理の対象となる Windows イベント メッセージ。</span><span class="sxs-lookup"><span data-stu-id="9df58-246">The Windows event message to filter.</span></span></param>
        <summary><span data-ttu-id="9df58-247">ウィンドウ メッセージに対してフィルターを実行し、変更したメッセージのコピーを返します。</span><span class="sxs-lookup"><span data-stu-id="9df58-247">Runs any filters against a window message, and returns a copy of the modified message.</span></span></summary>
        <returns><span data-ttu-id="9df58-248">フィルターが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-248"><see langword="true" /> if the filters were processed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HighDpiMode">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.HighDpiMode HighDpiMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.HighDpiMode HighDpiMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.HighDpiMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property HighDpiMode As HighDpiMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::HighDpiMode HighDpiMode { System::Windows::Forms::HighDpiMode get(); };" />
      <MemberSignature Language="F#" Value="member this.HighDpiMode : System.Windows.Forms.HighDpiMode" Usage="System.Windows.Forms.Application.HighDpiMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HighDpiMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-249">アプリケーションの現在の高 DPI モードを取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-249">Gets the current high DPI mode for the application.</span></span></summary>
        <value><span data-ttu-id="9df58-250">高 DPI モードを示す列挙値の1つ。</span><span class="sxs-lookup"><span data-stu-id="9df58-250">One of the enumeration values that indicates the high DPI mode.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Idle">
      <MemberSignature Language="C#" Value="public static event EventHandler Idle;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Idle" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.Idle" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event Idle As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ Idle;" />
      <MemberSignature Language="F#" Value="member this.Idle : EventHandler " Usage="member this.Idle : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-251">アプリケーションが処理を完了し、アイドル状態に入ろうとすると発生します。</span><span class="sxs-lookup"><span data-stu-id="9df58-251">Occurs when the application finishes processing and is about to enter the idle state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-252">スレッドがアイドル状態になる前に実行する必要のあるタスクがある場合は、このイベントにアタッチします。</span><span class="sxs-lookup"><span data-stu-id="9df58-252">If you have tasks that you must perform before the thread becomes idle, attach them to this event.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9df58-253">これは静的イベントなので、アプリケーションが破棄されるときにイベントハンドラーをデタッチする必要があります。これを行わないと、メモリリークが発生します。</span><span class="sxs-lookup"><span data-stu-id="9df58-253">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-254">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-254">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="9df58-255">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Application.Idle> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="9df58-255">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Application.Idle> event.</span></span> <span data-ttu-id="9df58-256">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="9df58-256">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="9df58-257">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-257">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="9df58-258">コード例を実行するには、それを Windows フォームに貼り付け、イベントハンドラーが <xref:System.Windows.Forms.Application.Idle> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="9df58-258">To run the example code, paste it into a Windows Form and make sure that the event handler is associated with the <xref:System.Windows.Forms.Application.Idle> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#2)]
 [!code-vb[System.Windows.Forms.EventExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeaveThreadModal">
      <MemberSignature Language="C#" Value="public static event EventHandler LeaveThreadModal;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LeaveThreadModal" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.LeaveThreadModal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event LeaveThreadModal As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ LeaveThreadModal;" />
      <MemberSignature Language="F#" Value="member this.LeaveThreadModal : EventHandler " Usage="member this.LeaveThreadModal : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-259">アプリケーションがモーダル状態を終了するときに発生します。</span><span class="sxs-lookup"><span data-stu-id="9df58-259">Occurs when the application is about to leave a modal state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="9df58-260">これは静的イベントなので、アプリケーションが破棄されるときにイベントハンドラーをデタッチする必要があります。これを行わないと、メモリリークが発生します。</span><span class="sxs-lookup"><span data-stu-id="9df58-260">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-261">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-261">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="9df58-262">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Application.LeaveThreadModal> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="9df58-262">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Application.LeaveThreadModal> event.</span></span> <span data-ttu-id="9df58-263">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="9df58-263">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="9df58-264">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-264">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="9df58-265">コード例を実行するには、コードを Windows フォームに貼り付け、イベントハンドラーが <xref:System.Windows.Forms.Application.LeaveThreadModal> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="9df58-265">To run the example code, paste it into a Windows Forms and ensure that the event handler is associated with the <xref:System.Windows.Forms.Application.LeaveThreadModal> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#4)]
 [!code-vb[System.Windows.Forms.EventExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalUserAppDataPath">
      <MemberSignature Language="C#" Value="public static string LocalUserAppDataPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string LocalUserAppDataPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.LocalUserAppDataPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LocalUserAppDataPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ LocalUserAppDataPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalUserAppDataPath : string" Usage="System.Windows.Forms.Application.LocalUserAppDataPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-266">ローカルで非ローミング ユーザーのアプリケーション データのパスを取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-266">Gets the path for the application data of a local, non-roaming user.</span></span></summary>
        <value><span data-ttu-id="9df58-267">ローカルで非ローミング ユーザーのアプリケーション データのパス。</span><span class="sxs-lookup"><span data-stu-id="9df58-267">The path for the application data of a local, non-roaming user.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-268">ローカルユーザーとは、ユーザーがログオンしたシステムにユーザープロファイルが格納されているユーザーのことです。</span><span class="sxs-lookup"><span data-stu-id="9df58-268">A local user is one whose user profile is stored on the system on which the user logged on.</span></span> <span data-ttu-id="9df58-269">パスが存在しない場合は、次の形式で作成されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-269">If a path does not exist, one is created in the following format:</span></span>  
  
 <span data-ttu-id="9df58-270">*ベースパス*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span><span class="sxs-lookup"><span data-stu-id="9df58-270">*Base Path*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span></span>   
  
 <span data-ttu-id="9df58-271">一般的な基本パスは C:\documents and と Settings\\*username*\Local Settings\Application Data です。</span><span class="sxs-lookup"><span data-stu-id="9df58-271">A typical base path is C:\Documents and Settings\\*username*\Local Settings\Application Data.</span></span> <span data-ttu-id="9df58-272">ただし、Windows フォームアプリケーションが [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]を使用して展開されている場合、このパスは異なります。</span><span class="sxs-lookup"><span data-stu-id="9df58-272">This path will be different, however, if the Windows Forms application is deployed by using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span></span> [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] <span data-ttu-id="9df58-273">は、他のすべてのアプリケーションから分離された独自のアプリケーションデータディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="9df58-273">creates its own application data directory that is isolated from all other applications.</span></span> <span data-ttu-id="9df58-274">詳細については、[ローカルへのアクセスとリモート データには、ClickOnce アプリケーション](/visualstudio/deployment/accessing-local-and-remote-data-in-clickonce-applications) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-274">For more information, see [Accessing Local and Remote Data in ClickOnce Applications](/visualstudio/deployment/accessing-local-and-remote-data-in-clickonce-applications).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-275">次のコード例では、2つのフォームを表示し、両方のフォームが閉じられたときにアプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="9df58-275">The following code example displays two forms and exits the application when both forms are closed.</span></span> <span data-ttu-id="9df58-276">アプリケーションの開始時と終了時には、各フォームの位置が記憶されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-276">When the application starts and exits, the position of each form is remembered.</span></span> <span data-ttu-id="9df58-277">この例では、<xref:System.Windows.Forms.Application.UserAppDataPath%2A> プロパティを使用してユーザーのアプリケーションデータを格納する方法を示していますが、<xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A> を代わりに使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="9df58-277">Although this example demonstrates using the <xref:System.Windows.Forms.Application.UserAppDataPath%2A> property to store application data for the user, the <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A> can be used instead.</span></span>  
  
 <span data-ttu-id="9df58-278">`MyApplicationContext` クラスは <xref:System.Windows.Forms.ApplicationContext> から継承され、各フォームが閉じられたときに追跡を続け、両方がであるときに現在のスレッドを終了します。</span><span class="sxs-lookup"><span data-stu-id="9df58-278">The `MyApplicationContext` class inherits from <xref:System.Windows.Forms.ApplicationContext> and keeps track when each form is closed, and exits the current thread when they both are.</span></span> <span data-ttu-id="9df58-279">クラスは、ユーザーの各フォームの位置を格納します。</span><span class="sxs-lookup"><span data-stu-id="9df58-279">The class stores the positions of each form for the user.</span></span> <span data-ttu-id="9df58-280">フォーム位置データは、<xref:System.Windows.Forms.Application.UserAppDataPath%2A>によって決定された場所に作成される `Appdata.txt` という名前のファイルに格納されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-280">The form position data is stored in a file titled `Appdata.txt` that is created in the location determined by <xref:System.Windows.Forms.Application.UserAppDataPath%2A>.</span></span> <span data-ttu-id="9df58-281">`Main` メソッドは、`Application.Run(context)` を呼び出して、<xref:System.Windows.Forms.ApplicationContext>を指定してアプリケーションを起動します。</span><span class="sxs-lookup"><span data-stu-id="9df58-281">The `Main` method calls `Application.Run(context)` to start the application given the <xref:System.Windows.Forms.ApplicationContext>.</span></span>  
  
 <span data-ttu-id="9df58-282">このコードは、<xref:System.Windows.Forms.ApplicationContext> クラスの概要に示されている例の抜粋です。</span><span class="sxs-lookup"><span data-stu-id="9df58-282">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.ApplicationContext> class overview.</span></span> <span data-ttu-id="9df58-283">簡潔にするために、一部のコードは表示されません。</span><span class="sxs-lookup"><span data-stu-id="9df58-283">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="9df58-284">コードリスト全体については、「<xref:System.Windows.Forms.ApplicationContext>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-284">See <xref:System.Windows.Forms.ApplicationContext> for the whole code listing.</span></span>  
  
 [!code-cpp[Application#5](~/samples/snippets/cpp/VS_Snippets_Winforms/Application/CPP/source.cpp#5)]
 [!code-csharp[Application#5](~/samples/snippets/csharp/VS_Snippets_Winforms/Application/CS/source.cs#5)]
 [!code-vb[Application#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Application/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MessageLoop">
      <MemberSignature Language="C#" Value="public static bool MessageLoop { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool MessageLoop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.MessageLoop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MessageLoop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool MessageLoop { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.MessageLoop : bool" Usage="System.Windows.Forms.Application.MessageLoop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-285">このスレッドにメッセージ ループが存在するかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-285">Gets a value indicating whether a message loop exists on this thread.</span></span></summary>
        <value><span data-ttu-id="9df58-286">メッセージ ループが存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-286"><see langword="true" /> if a message loop exists; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-287">管理されていないアプリケーションなど、他の環境で Windows フォームをホストする場合、このプロパティは常に `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="9df58-287">When hosting Windows Forms in other environments, such as unmanaged applications, this property will always return `false`.</span></span> <span data-ttu-id="9df58-288"><xref:System.Windows.Forms.Application.RegisterMessageLoop%2A> を使用して、ホスト環境にアクティブなメッセージループが残っているかどうか Windows フォームを指示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-288">Use <xref:System.Windows.Forms.Application.RegisterMessageLoop%2A> to instruct Windows Forms if the hosting environment still has an active message loop.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OleRequired">
      <MemberSignature Language="C#" Value="public static System.Threading.ApartmentState OleRequired ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.ApartmentState OleRequired() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.OleRequired" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OleRequired () As ApartmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::ApartmentState OleRequired();" />
      <MemberSignature Language="F#" Value="static member OleRequired : unit -&gt; System.Threading.ApartmentState" Usage="System.Windows.Forms.Application.OleRequired " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ApartmentState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9df58-289">現在のスレッドで OLE を初期化します。</span><span class="sxs-lookup"><span data-stu-id="9df58-289">Initializes OLE on the current thread.</span></span></summary>
        <returns><span data-ttu-id="9df58-290"><see cref="T:System.Threading.ApartmentState" /> 値のいずれか 1 つです。</span><span class="sxs-lookup"><span data-stu-id="9df58-290">One of the <see cref="T:System.Threading.ApartmentState" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-291">OLE を必要とする `Microsoft.Win32` メソッドを呼び出す前に、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9df58-291">Call this method before calling any `Microsoft.Win32` method that requires OLE.</span></span> <span data-ttu-id="9df58-292"><xref:System.Windows.Forms.Application.OleRequired%2A> は、最初に、OLE が現在のスレッドで初期化されているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9df58-292"><xref:System.Windows.Forms.Application.OleRequired%2A> first checks to see if OLE has been initialized on the current thread.</span></span> <span data-ttu-id="9df58-293">そうでない場合は、OLE のスレッドを初期化します。</span><span class="sxs-lookup"><span data-stu-id="9df58-293">If not, it initializes the thread for OLE.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9df58-294">スレッドが OLE メソッドを直接呼び出す場合を除き、このメソッドを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9df58-294">Unless a thread calls OLE methods directly, you do not need to call this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="public static void OnThreadException (Exception t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void OnThreadException(class System.Exception t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub OnThreadException (t As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void OnThreadException(Exception ^ t);" />
      <MemberSignature Language="F#" Value="static member OnThreadException : Exception -&gt; unit" Usage="System.Windows.Forms.Application.OnThreadException t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="t"><span data-ttu-id="9df58-295">スローされた例外を表す <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-295">An <see cref="T:System.Exception" /> that represents the exception that was thrown.</span></span></param>
        <summary><span data-ttu-id="9df58-296"><see cref="E:System.Windows.Forms.Application.ThreadException" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="9df58-296">Raises the <see cref="E:System.Windows.Forms.Application.ThreadException" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-297"><xref:System.Windows.Forms.Application.OnThreadException%2A> を呼び出して、アプリケーションの処理を停止する例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="9df58-297">Call <xref:System.Windows.Forms.Application.OnThreadException%2A> to raise an exception that will halt processing of the application.</span></span>  
  
 <span data-ttu-id="9df58-298"><xref:System.Windows.Forms.Application> クラスには、<xref:System.Windows.Forms.Application.ThreadException> イベントがあります。</span><span class="sxs-lookup"><span data-stu-id="9df58-298">The <xref:System.Windows.Forms.Application> class has a <xref:System.Windows.Forms.Application.ThreadException> event.</span></span> <span data-ttu-id="9df58-299">このイベントにイベントハンドラーをアタッチして、未処理の例外に必要なカスタム処理を行うことができます。</span><span class="sxs-lookup"><span data-stu-id="9df58-299">You can attach an event handler to this event to do whatever custom processing you need for unhandled exceptions.</span></span> <span data-ttu-id="9df58-300">イベントハンドラーをアタッチしない場合、<xref:System.Windows.Forms.Application.OnThreadException%2A> は既定の動作を実行します。これには、エラーが発生したことをユーザーに通知するダイアログボックスが表示されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-300">If you do not attach an event handler, <xref:System.Windows.Forms.Application.OnThreadException%2A> will execute the default behavior, which involves displaying a dialog box to inform the user that there has been an error.</span></span>  
  
 <span data-ttu-id="9df58-301"><xref:System.Windows.Forms.Application.OnThreadException%2A> は、Windows フォームが所有するスレッドで発生する未処理の例外に対して、既定の例外動作を実装します。</span><span class="sxs-lookup"><span data-stu-id="9df58-301"><xref:System.Windows.Forms.Application.OnThreadException%2A> only implements default exception behavior for unhandled exceptions that occur on threads owned by Windows Forms.</span></span> <span data-ttu-id="9df58-302">他のスレッドでのハンドルされない例外は、<xref:System.AppDomain.UnhandledException> イベントによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-302">Unhandled exceptions on other threads are handled by the <xref:System.AppDomain.UnhandledException> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenForms">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.FormCollection OpenForms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.FormCollection OpenForms" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.OpenForms" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OpenForms As FormCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::FormCollection ^ OpenForms { System::Windows::Forms::FormCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OpenForms : System.Windows.Forms.FormCollection" Usage="System.Windows.Forms.Application.OpenForms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FormCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-303">アプリケーションが所有している、開かれたフォームのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-303">Gets a collection of open forms owned by the application.</span></span></summary>
        <value><span data-ttu-id="9df58-304">アプリケーションによって所有されている、現在開いているすべてのフォームが格納された <see cref="T:System.Windows.Forms.FormCollection" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-304">A <see cref="T:System.Windows.Forms.FormCollection" /> containing all the currently open forms owned by this application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-305"><xref:System.Windows.Forms.Application.OpenForms%2A> プロパティは、アプリケーションが所有するフォームの読み取り専用コレクションを表します。</span><span class="sxs-lookup"><span data-stu-id="9df58-305">The <xref:System.Windows.Forms.Application.OpenForms%2A> property represents a read-only collection of forms owned by the application.</span></span> <span data-ttu-id="9df58-306">このコレクションは、インデックス位置または <xref:System.Windows.Forms.Form>の <xref:System.Windows.Forms.Control.Name%2A> で検索できます。</span><span class="sxs-lookup"><span data-stu-id="9df58-306">This collection can be searched by index position or by the <xref:System.Windows.Forms.Control.Name%2A> of the <xref:System.Windows.Forms.Form>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
        <altmember cref="T:System.Windows.Forms.FormCollection" />
      </Docs>
    </Member>
    <Member MemberName="ProductName">
      <MemberSignature Language="C#" Value="public static string ProductName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ProductName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.ProductName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ProductName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ProductName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProductName : string" Usage="System.Windows.Forms.Application.ProductName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-307">このアプリケーションに関連付けられている製品名を取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-307">Gets the product name associated with this application.</span></span></summary>
        <value><span data-ttu-id="9df58-308">製品名。</span><span class="sxs-lookup"><span data-stu-id="9df58-308">The product name.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-309">`ProductName` は、現在のアプリケーションのメインフォームを含むアセンブリのメタデータから取得されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-309">`ProductName` is taken from the metadata of the assembly containing the main form of the current application.</span></span> <span data-ttu-id="9df58-310">これは、アセンブリマニフェスト内の <xref:System.Reflection.AssemblyProductAttribute> を設定することによって設定できます。</span><span class="sxs-lookup"><span data-stu-id="9df58-310">You can set it by setting <xref:System.Reflection.AssemblyProductAttribute> inside of your assembly manifest.</span></span> <span data-ttu-id="9df58-311">詳細については、「[アセンブリ マニフェスト](/dotnet/standard/assembly/manifest)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-311">For more information, see [Assembly Manifest](/dotnet/standard/assembly/manifest).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-312">次のコード例では、このプロパティを取得し、テキストボックスにその値を表示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-312">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="9df58-313">この例では、`textBox1` がフォームに配置されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-313">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.ProductName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ProductName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ProductName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ProductName Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ProductName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ProductName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.ProductVersion" />
        <altmember cref="P:System.Windows.Forms.Application.CompanyName" />
        <altmember cref="T:System.Reflection.AssemblyProductAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ProductVersion">
      <MemberSignature Language="C#" Value="public static string ProductVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ProductVersion" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.ProductVersion" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ProductVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ProductVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProductVersion : string" Usage="System.Windows.Forms.Application.ProductVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-314">このアプリケーションに関連付けられている製品のバージョンを取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-314">Gets the product version associated with this application.</span></span></summary>
        <value><span data-ttu-id="9df58-315">製品のバージョン。</span><span class="sxs-lookup"><span data-stu-id="9df58-315">The product version.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-316">通常、バージョン番号は*メジャー番号*として表示されます。*マイナー番号*。*ビルド番号*。*プライベートパート番号*。</span><span class="sxs-lookup"><span data-stu-id="9df58-316">Typically, a version number displays as *major number*.*minor number*.*build number*.*private part number*.</span></span> <span data-ttu-id="9df58-317">アセンブリのバージョンをアセンブリマニフェスト内で設定することによって、明示的に設定できます。</span><span class="sxs-lookup"><span data-stu-id="9df58-317">You can set it explicitly by setting the assembly version within your assembly manifest.</span></span> <span data-ttu-id="9df58-318">詳細については、「[アセンブリ マニフェスト](/dotnet/standard/assembly/manifest)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-318">For more information, see [Assembly Manifest](/dotnet/standard/assembly/manifest).</span></span>  
  
 <span data-ttu-id="9df58-319"><xref:System.Windows.Forms.Application.ProductVersion%2A>最初にメインの実行可能ファイルを含むアセンブリに `AssemblyInformationalVersion` 属性が含まれているかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="9df58-319"><xref:System.Windows.Forms.Application.ProductVersion%2A> first looks to see if the assembly containing the main executable has the `AssemblyInformationalVersion` attribute on it.</span></span> <span data-ttu-id="9df58-320">この属性が存在する場合は、<xref:System.Windows.Forms.Application.ProductVersion%2A>と<xref:System.Windows.Forms.Application.CommonAppDataPath%2A>の両方で <xref:System.Windows.Forms.Application.ProductVersion%2A>が使用されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-320">If this attribute exists, it is used for both <xref:System.Windows.Forms.Application.ProductVersion%2A> and <xref:System.Windows.Forms.Application.CommonAppDataPath%2A>.</span></span> <span data-ttu-id="9df58-321">この属性が存在しない場合、両方のプロパティで、実行可能ファイルのバージョンが代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-321">If this attribute does not exist, both properties use the version of the executable file instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-322">次のコード例では、このプロパティを取得し、テキストボックスにその値を表示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-322">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="9df58-323">この例では、`textBox1` がフォームに配置されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-323">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.ProductVersion Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ProductVersion Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ProductVersion Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ProductVersion Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ProductVersion Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ProductVersion Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.ProductName" />
        <altmember cref="P:System.Windows.Forms.Application.CompanyName" />
        <altmember cref="T:System.Reflection.AssemblyVersionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RaiseIdle">
      <MemberSignature Language="C#" Value="public static void RaiseIdle (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RaiseIdle(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.RaiseIdle(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RaiseIdle (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RaiseIdle(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="static member RaiseIdle : EventArgs -&gt; unit" Usage="System.Windows.Forms.Application.RaiseIdle e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9df58-324"><see cref="T:System.EventArgs" /> イベントに渡す <see cref="E:System.Windows.Forms.Application.Idle" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9df58-324">The <see cref="T:System.EventArgs" /> objects to pass to the <see cref="E:System.Windows.Forms.Application.Idle" /> event.</span></span></param>
        <summary><span data-ttu-id="9df58-325">ホストされているシナリオで <see cref="E:System.Windows.Forms.Application.Idle" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="9df58-325">Raises the <see cref="E:System.Windows.Forms.Application.Idle" /> event in hosted scenarios.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-326">このメソッドは、アンマネージアプリケーションなどの別の環境で Windows フォームをホストするときに使用されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-326">This method is used when hosting Windows Forms in another environment, such as an unmanaged application.</span></span> <span data-ttu-id="9df58-327">ホストアプリケーションがアイドル状態になると、<xref:System.Windows.Forms.Application.RaiseIdle%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-327">You should call <xref:System.Windows.Forms.Application.RaiseIdle%2A> when the hosting application enters an idle state.</span></span> <span data-ttu-id="9df58-328">これにより、ユーザーがアプリケーションと対話していないときに、一部の Windows フォームコントロールとコンポーネントが重要なバックグラウンド作業を実行できるようになります。</span><span class="sxs-lookup"><span data-stu-id="9df58-328">This enables some Windows Forms controls and components to do important background work while the user is not interacting with the application.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Application.Idle" />
      </Docs>
    </Member>
    <Member MemberName="RegisterMessageLoop">
      <MemberSignature Language="C#" Value="public static void RegisterMessageLoop (System.Windows.Forms.Application.MessageLoopCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterMessageLoop(class System.Windows.Forms.Application/MessageLoopCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.RegisterMessageLoop(System.Windows.Forms.Application.MessageLoopCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterMessageLoop (callback As Application.MessageLoopCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterMessageLoop(System::Windows::Forms::Application::MessageLoopCallback ^ callback);" />
      <MemberSignature Language="F#" Value="static member RegisterMessageLoop : System.Windows.Forms.Application.MessageLoopCallback -&gt; unit" Usage="System.Windows.Forms.Application.RegisterMessageLoop callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Windows.Forms.Application+MessageLoopCallback" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="9df58-329">ホスト環境が依然としてメッセージを送信しているかどうかを Windows フォームでチェックする必要がある場合に呼び出すメソッド。</span><span class="sxs-lookup"><span data-stu-id="9df58-329">The method to call when Windows Forms needs to check if the hosting environment is still sending messages.</span></span></param>
        <summary><span data-ttu-id="9df58-330">メッセージ ループがホストされている環境で実行されているかどうかをチェックするためのコールバックを登録します。</span><span class="sxs-lookup"><span data-stu-id="9df58-330">Registers a callback for checking whether the message loop is running in hosted environments.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-331">このメソッドは、アンマネージアプリケーションなどの別の環境で Windows フォームをホストするときに使用されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-331">This method is used when hosting Windows Forms in another environment, such as an unmanaged application.</span></span> <span data-ttu-id="9df58-332">ホスト環境では、Windows フォームがメッセージを処理していない場合、<xref:System.Windows.Forms.Application.MessageLoop%2A> プロパティは常に false を返します。</span><span class="sxs-lookup"><span data-stu-id="9df58-332">In hosted environments, the <xref:System.Windows.Forms.Application.MessageLoop%2A> property will always return false if Windows Forms is not processing messages.</span></span> <span data-ttu-id="9df58-333">このコールバックを使用して、ホスト環境がまだメッセージを処理しているかどうかを Windows フォームに伝えます。</span><span class="sxs-lookup"><span data-stu-id="9df58-333">Use this callback to tell Windows Forms if the hosting environment is still processing messages.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Application.MessageLoopCallback" />
      </Docs>
    </Member>
    <Member MemberName="RemoveMessageFilter">
      <MemberSignature Language="C#" Value="public static void RemoveMessageFilter (System.Windows.Forms.IMessageFilter value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMessageFilter(class System.Windows.Forms.IMessageFilter value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.RemoveMessageFilter(System.Windows.Forms.IMessageFilter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMessageFilter (value As IMessageFilter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMessageFilter(System::Windows::Forms::IMessageFilter ^ value);" />
      <MemberSignature Language="F#" Value="static member RemoveMessageFilter : System.Windows.Forms.IMessageFilter -&gt; unit" Usage="System.Windows.Forms.Application.RemoveMessageFilter value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.IMessageFilter" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="9df58-334">アプリケーションから削除する <see cref="T:System.Windows.Forms.IMessageFilter" /> の実装。</span><span class="sxs-lookup"><span data-stu-id="9df58-334">The implementation of the <see cref="T:System.Windows.Forms.IMessageFilter" /> to remove from the application.</span></span></param>
        <summary><span data-ttu-id="9df58-335">アプリケーションのメッセージ ポンプからメッセージ フィルターを削除します。</span><span class="sxs-lookup"><span data-stu-id="9df58-335">Removes a message filter from the message pump of the application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-336">Windows メッセージをディスパッチする前にキャプチャする必要がなくなった場合は、メッセージフィルターを削除できます。</span><span class="sxs-lookup"><span data-stu-id="9df58-336">You can remove a message filter when you no longer want to capture Windows messages before they are dispatched.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-337">メッセージフィルターを使用するには、<xref:System.Windows.Forms.IMessageFilter> インターフェイスの実装を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-337">Before you can use a message filter, you must provide an implementation for the <xref:System.Windows.Forms.IMessageFilter> interface.</span></span> <span data-ttu-id="9df58-338">次のクラスは、`TestMessageFilter`という名前のメッセージフィルターを作成します。</span><span class="sxs-lookup"><span data-stu-id="9df58-338">The following class creates a message filter called `TestMessageFilter`.</span></span> <span data-ttu-id="9df58-339">このフィルターは、マウスの左ボタンに関連するすべてのメッセージをブロックします。</span><span class="sxs-lookup"><span data-stu-id="9df58-339">This filter blocks all messages relating to the left mouse button.</span></span>  
  
 [!code-cpp[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/CS/source.cs#1)]
 [!code-vb[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderWithVisualStyles">
      <MemberSignature Language="C#" Value="public static bool RenderWithVisualStyles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool RenderWithVisualStyles" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.RenderWithVisualStyles" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RenderWithVisualStyles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool RenderWithVisualStyles { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RenderWithVisualStyles : bool" Usage="System.Windows.Forms.Application.RenderWithVisualStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-340">現在のアプリケーションが visual スタイルを使用してコントロールを描画しているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-340">Gets a value specifying whether the current application is drawing controls with visual styles.</span></span></summary>
        <value><span data-ttu-id="9df58-341">アプリケーション ウィンドウのクライアント領域のコントロールで visual スタイルが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-341"><see langword="true" /> if visual styles are enabled for controls in the client area of application windows; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-342">カスタムコントロールを描画する場合は、このプロパティを使用して、コントロールの外観がアプリケーション内の他のコントロールと一致するように、visual スタイルを使用するかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-342">If you are drawing a custom control, use this property to decide whether to draw the control with or without visual styles, so that its appearance is consistent with other controls in the application.</span></span>  
  
 <span data-ttu-id="9df58-343">次の表は、<xref:System.Windows.Forms.Application.RenderWithVisualStyles%2A> が `true`を返すために必要な4つの条件を示しています。</span><span class="sxs-lookup"><span data-stu-id="9df58-343">The following table shows the four conditions that must exist for <xref:System.Windows.Forms.Application.RenderWithVisualStyles%2A> to return `true`.</span></span>  
  
|<span data-ttu-id="9df58-344">条件</span><span class="sxs-lookup"><span data-stu-id="9df58-344">Condition</span></span>|<span data-ttu-id="9df58-345">説明</span><span class="sxs-lookup"><span data-stu-id="9df58-345">Description</span></span>|  
|---------------|-----------------|  
|<span data-ttu-id="9df58-346">オペレーティングシステムは、視覚スタイルをサポートしています</span><span class="sxs-lookup"><span data-stu-id="9df58-346">The operating system supports visual styles</span></span>|<span data-ttu-id="9df58-347">この条件を個別に確認するには、 <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation.IsSupportedByOS%2A> クラスの <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="9df58-347">To verify this condition separately, use the <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation.IsSupportedByOS%2A> property of the <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation> class.</span></span>|  
|<span data-ttu-id="9df58-348">ユーザーがオペレーティングシステムで視覚スタイルを有効にしている</span><span class="sxs-lookup"><span data-stu-id="9df58-348">The user has enabled visual styles in the operating system</span></span>|<span data-ttu-id="9df58-349">この条件を個別に確認するには、 <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation.IsEnabledByUser%2A> クラスの <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="9df58-349">To verify this condition separately, use the <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation.IsEnabledByUser%2A> property of the <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation> class.</span></span>|  
|<span data-ttu-id="9df58-350">アプリケーションで Visual スタイルが有効になっている</span><span class="sxs-lookup"><span data-stu-id="9df58-350">Visual styles are enabled in the application</span></span>|<span data-ttu-id="9df58-351">アプリケーションで視覚スタイルを有効にするには、 <xref:System.Windows.Forms.Application.EnableVisualStyles> メソッドを呼び出すか、ComCtl32.dll バージョン 6 以降をコントロールの描画に使用することを指定するアプリケーション マニフェストを使用します。</span><span class="sxs-lookup"><span data-stu-id="9df58-351">Visual styles can be enabled in an application by calling the <xref:System.Windows.Forms.Application.EnableVisualStyles> method or by using an application manifest that specifies that ComCtl32.dll version 6 or later will be used to draw controls.</span></span>|  
|<span data-ttu-id="9df58-352">アプリケーションウィンドウのクライアント領域を描画するために Visual スタイルが使用されています</span><span class="sxs-lookup"><span data-stu-id="9df58-352">Visual styles are being used to draw the client area of application windows</span></span>|<span data-ttu-id="9df58-353">この条件を個別に確認するには、 <xref:System.Windows.Forms.Application.VisualStyleState%2A> クラスの <xref:System.Windows.Forms.Application> プロパティを使用し、その値が <xref:System.Windows.Forms.VisualStyles.VisualStyleState.ClientAreaEnabled?displayProperty=nameWithType> または <xref:System.Windows.Forms.VisualStyles.VisualStyleState.ClientAndNonClientAreasEnabled?displayProperty=nameWithType>になっていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="9df58-353">To verify this condition separately, use the <xref:System.Windows.Forms.Application.VisualStyleState%2A> property of the <xref:System.Windows.Forms.Application> class and verify that it has the value <xref:System.Windows.Forms.VisualStyles.VisualStyleState.ClientAreaEnabled?displayProperty=nameWithType> or <xref:System.Windows.Forms.VisualStyles.VisualStyleState.ClientAndNonClientAreasEnabled?displayProperty=nameWithType>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public static void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Restart();" />
      <MemberSignature Language="F#" Value="static member Restart : unit -&gt; unit" Usage="System.Windows.Forms.Application.Restart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9df58-354">アプリケーションをシャットダウンし、直後に新しいインスタンスを開始します。</span><span class="sxs-lookup"><span data-stu-id="9df58-354">Shuts down the application and starts a new instance immediately.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-355">`Restart` を呼び出す最も一般的な理由は、`Update` または `UpdateAsync` メソッドを使用して [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] ダウンロードしたアプリケーションの新しいバージョンを起動することです。</span><span class="sxs-lookup"><span data-stu-id="9df58-355">The most common reason for calling `Restart` is to start a new version of the application that you have downloaded through [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] using the `Update` or `UpdateAsync` method.</span></span>  
  
 <span data-ttu-id="9df58-356">アプリケーションは、最初に実行されたコンテキストで再起動されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-356">Applications are restarted in the context in which they were initially run.</span></span> <span data-ttu-id="9df58-357">アプリケーションのメインの実行可能ファイルを直接指す URL を使用してアプリケーションが起動された場合は、同じ URL を使用して再起動されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-357">If your application was started using a URL pointing directly to the application's main executable file, it will be restarted using the same URL.</span></span> <span data-ttu-id="9df58-358">アプリケーションが [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] アプリケーションである場合は、[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]を使用してアプリケーションが再起動されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-358">If your application is a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application, it will be restarted using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span></span>  
  
 <span data-ttu-id="9df58-359">アプリケーションが最初に実行されたときにコマンドラインオプションを指定した場合、<xref:System.Windows.Forms.Application.Restart%2A> は同じオプションを使用してアプリケーションを再び起動します。</span><span class="sxs-lookup"><span data-stu-id="9df58-359">If your application was originally supplied command-line options when it first executed, <xref:System.Windows.Forms.Application.Restart%2A> will launch the application again with the same options.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9df58-360">Windows フォーム アプリケーションのコードではありません。</span><span class="sxs-lookup"><span data-stu-id="9df58-360">Your code is not a Windows Forms application.</span></span> <span data-ttu-id="9df58-361">このコンテキストではこのメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="9df58-361">You cannot call this method in this context.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9df58-362">現在のスレッドで標準のアプリケーション メッセージ ループの実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="9df58-362">Begins running a standard application message loop on the current thread.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Forms.Application.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9df58-363">現在のスレッドで標準のアプリケーション メッセージ ループの実行を、フォームなしで開始します。</span><span class="sxs-lookup"><span data-stu-id="9df58-363">Begins running a standard application message loop on the current thread, without a form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-364">Win32 ベースまたは Windows フォームアプリケーションでは、メッセージループは、マウスのクリックやキーボードのストロークなどのユーザーイベントを処理するコード内のルーチンです。</span><span class="sxs-lookup"><span data-stu-id="9df58-364">In a Win32-based or Windows Forms application, a message loop is a routine in code that processes user events, such as mouse clicks and keyboard strokes.</span></span> <span data-ttu-id="9df58-365">Windows ベースのすべてのアプリケーションを実行するには、メインメッセージループと呼ばれるアクティブなメッセージループが必要です。</span><span class="sxs-lookup"><span data-stu-id="9df58-365">Every running Windows-based application requires an active message loop, called the main message loop.</span></span> <span data-ttu-id="9df58-366">メインメッセージループが終了すると、アプリケーションは終了します。</span><span class="sxs-lookup"><span data-stu-id="9df58-366">When the main message loop is closed, the application exits.</span></span> <span data-ttu-id="9df58-367">Windows フォームでは、このループは、<xref:System.Windows.Forms.Application.Exit%2A> メソッドが呼び出されたとき、またはメインメッセージループを実行しているスレッドで <xref:System.Windows.Forms.Application.ExitThread%2A> メソッドが呼び出されたときに閉じられます。</span><span class="sxs-lookup"><span data-stu-id="9df58-367">In Windows Forms, this loop is closed when the <xref:System.Windows.Forms.Application.Exit%2A> method is called, or when the <xref:System.Windows.Forms.Application.ExitThread%2A> method is called on the thread that is running the main message loop.</span></span>  
  
 <span data-ttu-id="9df58-368">ほとんどの Windows フォーム開発者は、このバージョンのメソッドを使用する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9df58-368">Most Windows Forms developers will not need to use this version of the method.</span></span> <span data-ttu-id="9df58-369">メインフォームが閉じられたときにアプリケーションが終了するように、<xref:System.Windows.Forms.Application.Run%28System.Windows.Forms.Form%29> オーバーロードを使用して、メインフォームでアプリケーションを起動する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-369">You should use the <xref:System.Windows.Forms.Application.Run%28System.Windows.Forms.Form%29> overload to start an application with a main form, so that the application terminates when the main form is closed.</span></span> <span data-ttu-id="9df58-370">それ以外の場合は、<xref:System.Windows.Forms.Application.Run%28System.Windows.Forms.ApplicationContext%29> のオーバーロードを使用します。これにより、アプリケーションの有効期間の制御を強化するために <xref:System.Windows.Forms.ApplicationContext> オブジェクトを指定できます。</span><span class="sxs-lookup"><span data-stu-id="9df58-370">For all other situations, use the <xref:System.Windows.Forms.Application.Run%28System.Windows.Forms.ApplicationContext%29> overload, which supports supplying an <xref:System.Windows.Forms.ApplicationContext> object for better control over the lifetime of the application.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9df58-371">メイン メッセージ ループが既にこのスレッドで実行中です。</span><span class="sxs-lookup"><span data-stu-id="9df58-371">A main message loop is already running on this thread.</span></span></exception>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.Windows.Forms.ApplicationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.Windows.Forms.ApplicationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Run(System.Windows.Forms.ApplicationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (context As ApplicationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::Windows::Forms::ApplicationContext ^ context);" />
      <MemberSignature Language="F#" Value="static member Run : System.Windows.Forms.ApplicationContext -&gt; unit" Usage="System.Windows.Forms.Application.Run context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Forms.ApplicationContext" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="9df58-372">アプリケーションが実行される <see cref="T:System.Windows.Forms.ApplicationContext" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-372">An <see cref="T:System.Windows.Forms.ApplicationContext" /> in which the application is run.</span></span></param>
        <summary><span data-ttu-id="9df58-373"><see cref="T:System.Windows.Forms.ApplicationContext" /> を使用して、現在のスレッドで標準のアプリケーション メッセージ ループの実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="9df58-373">Begins running a standard application message loop on the current thread, with an <see cref="T:System.Windows.Forms.ApplicationContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-374">メッセージループは、<xref:System.Windows.Forms.Application.Exit%2A> または <xref:System.Windows.Forms.Application.ExitThread%2A> が呼び出されるか、コンテキストオブジェクトで <xref:System.Windows.Forms.Application.ThreadExit> イベントが発生するまで実行されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-374">The message loop runs until <xref:System.Windows.Forms.Application.Exit%2A> or <xref:System.Windows.Forms.Application.ExitThread%2A> is called or the <xref:System.Windows.Forms.Application.ThreadExit> event is raised on the context object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-375">この例では、2つのフォームを表示し、両方のフォームが閉じられたときにアプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="9df58-375">The example displays two forms and exits the application when both forms are closed.</span></span> <span data-ttu-id="9df58-376">アプリケーションの開始時と終了時には、各フォームの位置が記憶されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-376">When the application starts and exits, the position of each form is remembered.</span></span> <span data-ttu-id="9df58-377">この例では、<xref:System.Windows.Forms.ApplicationContext>を `Application.Run(context)` メソッドと共に使用して、アプリケーションの起動時に複数のフォームを表示する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-377">This example demonstrates how to use an <xref:System.Windows.Forms.ApplicationContext>, along with the `Application.Run(context)` method, to display multiple forms when the application starts.</span></span>  
  
 <span data-ttu-id="9df58-378">クラス `MyApplicationContext` は <xref:System.Windows.Forms.ApplicationContext> から継承され、各フォームが閉じられたことを追跡し、両方がである場合は現在のスレッドを終了します。</span><span class="sxs-lookup"><span data-stu-id="9df58-378">The class `MyApplicationContext` inherits from <xref:System.Windows.Forms.ApplicationContext> and keeps track when each form is closed, and exits the current thread when they both are.</span></span> <span data-ttu-id="9df58-379">クラスは、ユーザーの各フォームの位置を格納します。</span><span class="sxs-lookup"><span data-stu-id="9df58-379">The class stores the positions of each form for the user.</span></span> <span data-ttu-id="9df58-380">フォーム位置データは、<xref:System.Windows.Forms.Application.UserAppDataPath%2A>によって決定された場所に作成される `Appdata.txt` という名前のファイルに格納されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-380">The form position data is stored in a file titled `Appdata.txt` that is created in the location determined by <xref:System.Windows.Forms.Application.UserAppDataPath%2A>.</span></span> <span data-ttu-id="9df58-381">`Main` メソッドは、`Application.Run(context)` を呼び出して、<xref:System.Windows.Forms.ApplicationContext>を指定してアプリケーションを起動します。</span><span class="sxs-lookup"><span data-stu-id="9df58-381">The `Main` method calls `Application.Run(context)` to start the application given the <xref:System.Windows.Forms.ApplicationContext>.</span></span>  
  
 <span data-ttu-id="9df58-382">簡潔にするために、`AppForm1` フォームと `AppForm2` フォームのコードは示されていません。</span><span class="sxs-lookup"><span data-stu-id="9df58-382">The code for the `AppForm1` and `AppForm2` forms is not shown for the purpose of brevity.</span></span> <span data-ttu-id="9df58-383">コードリスト全体については、<xref:System.Windows.Forms.ApplicationContext> クラスの概要を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-383">See the <xref:System.Windows.Forms.ApplicationContext> class overview for the whole code listing.</span></span>  
  
 [!code-cpp[Application#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Application/CPP/source.cpp#2)]
 [!code-csharp[Application#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Application/CS/source.cs#2)]
 [!code-vb[Application#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Application/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9df58-384">メイン メッセージ ループが既にこのスレッドで実行中です。</span><span class="sxs-lookup"><span data-stu-id="9df58-384">A main message loop is already running on this thread.</span></span></exception>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.Windows.Forms.Form mainForm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.Windows.Forms.Form mainForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Run(System.Windows.Forms.Form)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (mainForm As Form)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::Windows::Forms::Form ^ mainForm);" />
      <MemberSignature Language="F#" Value="static member Run : System.Windows.Forms.Form -&gt; unit" Usage="System.Windows.Forms.Application.Run mainForm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mainForm" Type="System.Windows.Forms.Form" />
      </Parameters>
      <Docs>
        <param name="mainForm"><span data-ttu-id="9df58-385">表示するフォームを表す <see cref="T:System.Windows.Forms.Form" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-385">A <see cref="T:System.Windows.Forms.Form" /> that represents the form to make visible.</span></span></param>
        <summary><span data-ttu-id="9df58-386">現在のスレッドで標準のアプリケーション メッセージ ループの実行を開始し、指定したフォームを表示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-386">Begins running a standard application message loop on the current thread, and makes the specified form visible.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-387">通常、アプリケーションの main 関数は、このメソッドを呼び出し、アプリケーションのメインウィンドウに渡します。</span><span class="sxs-lookup"><span data-stu-id="9df58-387">Typically, the main function of an application calls this method and passes to it the main window of the application.</span></span>  
  
 <span data-ttu-id="9df58-388">このメソッドは、<xref:System.Windows.Forms.Form.Closed> イベントの `mainForm` パラメーターにイベントハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="9df58-388">This method adds an event handler to the `mainForm` parameter for the <xref:System.Windows.Forms.Form.Closed> event.</span></span> <span data-ttu-id="9df58-389">イベントハンドラーは、アプリケーションをクリーンアップするために <xref:System.Windows.Forms.Application.ExitThread%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9df58-389">The event handler calls <xref:System.Windows.Forms.Application.ExitThread%2A> to clean up the application.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9df58-390"><xref:System.Windows.Forms.Form> クラスの <xref:System.Windows.Forms.Control.Dispose%2A> メソッドは、このメソッドが返される前に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-390">The <xref:System.Windows.Forms.Control.Dispose%2A> method of the <xref:System.Windows.Forms.Form> class will be called prior to the return of this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-391">次のコード例では、フォームのリストボックス内の数値を一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-391">The following code example lists numbers in a list box on a form.</span></span> <span data-ttu-id="9df58-392">[`button1`] をクリックするたびに、アプリケーションによってリストに別の番号が追加されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-392">Each time you click `button1`, the application adds another number to the list.</span></span>  
  
 <span data-ttu-id="9df58-393">`Main` メソッドは、<xref:System.Windows.Forms.Application.Run%2A> を呼び出して、フォーム、`listBox1`、および `button1`を作成するアプリケーションを起動します。</span><span class="sxs-lookup"><span data-stu-id="9df58-393">The `Main` method calls <xref:System.Windows.Forms.Application.Run%2A> to start the application, which creates the form, `listBox1`, and `button1`.</span></span> <span data-ttu-id="9df58-394">ユーザーが [`button1`] をクリックすると、`button1_Click` メソッドによってリストボックスに 1 ~ 3 の数字が追加され、<xref:System.Windows.Forms.MessageBox>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-394">When the user clicks `button1`, the `button1_Click` method adds numbers one to three to the list box, and displays a <xref:System.Windows.Forms.MessageBox>.</span></span> <span data-ttu-id="9df58-395">ユーザーが <xref:System.Windows.Forms.MessageBox>で **[いいえ]** をクリックすると、`button1_Click` メソッドによってリストに別の番号が追加されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-395">If the user clicks **No** on the <xref:System.Windows.Forms.MessageBox>, the `button1_Click` method adds another number to the list.</span></span> <span data-ttu-id="9df58-396">ユーザーが **[はい]** をクリックすると、アプリケーションは <xref:System.Windows.Forms.Application.Exit%2A> を呼び出してキュー内の残りのすべてのメッセージを処理し、終了します。</span><span class="sxs-lookup"><span data-stu-id="9df58-396">If the user clicks **Yes**, the application calls <xref:System.Windows.Forms.Application.Exit%2A> to process all remaining messages in the queue and then to quit.</span></span>  
  
 <span data-ttu-id="9df58-397">この例では、`listBox1` と `button1` が作成され、フォームに配置されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-397">The example requires that `listBox1` and `button1` have been created and placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.Exit Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.Exit Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.Exit Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.Exit Example/CS/source.cs#1)]
 [!code-vb[Classic Application.Exit Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.Exit Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9df58-398">メイン メッセージ ループが既に現在のスレッドで実行中です。</span><span class="sxs-lookup"><span data-stu-id="9df58-398">A main message loop is already running on the current thread.</span></span></exception>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="SafeTopLevelCaptionFormat">
      <MemberSignature Language="C#" Value="public static string SafeTopLevelCaptionFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string SafeTopLevelCaptionFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.SafeTopLevelCaptionFormat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SafeTopLevelCaptionFormat As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ SafeTopLevelCaptionFormat { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SafeTopLevelCaptionFormat : string with get, set" Usage="System.Windows.Forms.Application.SafeTopLevelCaptionFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-399">警告見出しと共に表示された場合にトップレベル ウィンドウのキャプションに適用する書式指定文字列を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-399">Gets or sets the format string to apply to top-level window captions when they are displayed with a warning banner.</span></span></summary>
        <value><span data-ttu-id="9df58-400">トップレベル ウィンドウのキャプションに適用する書式指定文字列。</span><span class="sxs-lookup"><span data-stu-id="9df58-400">The format string to apply to top-level window captions.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCompatibleTextRenderingDefault">
      <MemberSignature Language="C#" Value="public static void SetCompatibleTextRenderingDefault (bool defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCompatibleTextRenderingDefault(bool defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCompatibleTextRenderingDefault (defaultValue As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCompatibleTextRenderingDefault(bool defaultValue);" />
      <MemberSignature Language="F#" Value="static member SetCompatibleTextRenderingDefault : bool -&gt; unit" Usage="System.Windows.Forms.Application.SetCompatibleTextRenderingDefault defaultValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Boolean" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="9df58-401">新しいコントロールに適用する既定値。</span><span class="sxs-lookup"><span data-stu-id="9df58-401">The default value to use for new controls.</span></span> <span data-ttu-id="9df58-402"><see langword="true" /> の場合、<c>UseCompatibleTextRendering</c> をサポートする新しいコントロールは、テキスト レンダリングに [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] ベースの <see cref="T:System.Drawing.Graphics" /> クラスを使用します。<see langword="false" /> の場合、新しいコントロールは [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] ベースの <see cref="T:System.Windows.Forms.TextRenderer" /> クラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="9df58-402">If <see langword="true" />, new controls that support <c>UseCompatibleTextRendering</c> use the [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] based <see cref="T:System.Drawing.Graphics" /> class for text rendering; if <see langword="false" />, new controls use the [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] based <see cref="T:System.Windows.Forms.TextRenderer" /> class.</span></span></param>
        <summary><span data-ttu-id="9df58-403">特定のコントロールで定義された <c>UseCompatibleTextRendering</c> プロパティにアプリケーション全体で有効な既定値を設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-403">Sets the application-wide default for the <c>UseCompatibleTextRendering</c> property defined on certain controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-404">特定の Windows フォームコントロールでは、[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] グラフィックスライブラリに基づく <xref:System.Windows.Forms.TextRenderer> クラス、または [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] グラフィックスライブラリに基づく <xref:System.Drawing.Graphics> クラスを使用して、テキストを表示できます。</span><span class="sxs-lookup"><span data-stu-id="9df58-404">Certain Windows Forms controls can render their text using either the <xref:System.Windows.Forms.TextRenderer> class, which is based on the [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] graphics library, or the <xref:System.Drawing.Graphics> class, which is based on the [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] graphics library.</span></span> <span data-ttu-id="9df58-405">この変更は、[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]のパフォーマンスとローカリゼーションの問題のために [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] に加えられました。</span><span class="sxs-lookup"><span data-stu-id="9df58-405">This change was made in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] because of performance and localization issues with [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)].</span></span> <span data-ttu-id="9df58-406"><xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A> を使用して、それをサポートするコントロールの `UseCompatibleTextRendering` プロパティの既定値を設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-406">Use <xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A> to set the default value of the `UseCompatibleTextRendering` property for controls that support it.</span></span>  
  
 <span data-ttu-id="9df58-407">`UseCompatibleTextRendering` プロパティは、<xref:System.Windows.Forms.TextRenderer> クラスを使用してテキストを表示する Windows フォームコントロールと、[!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)] クラスを使用してカスタムテキストレンダリングを実行する [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)] および <xref:System.Drawing.Graphics> アプリケーションの間で、視覚的な互換性を提供するためのものです。</span><span class="sxs-lookup"><span data-stu-id="9df58-407">The `UseCompatibleTextRendering` property is intended to provide visual compatibility between Windows Forms controls that render text using the <xref:System.Windows.Forms.TextRenderer> class and [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)] and [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)] applications that perform custom text rendering using the <xref:System.Drawing.Graphics> class.</span></span> <span data-ttu-id="9df58-408">ほとんどの場合、アプリケーションが [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)] または [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]からアップグレードされていない場合は、`UseCompatibleTextRendering` を既定値の `false`に設定したままにしておくことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="9df58-408">In most cases, if your application is not being upgraded from [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)] or [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)], it is recommended that you leave `UseCompatibleTextRendering` set to the default value of `false`.</span></span>  
  
 <span data-ttu-id="9df58-409">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] ベースの <xref:System.Windows.Forms.TextRenderer> クラスは [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] で導入され、パフォーマンスの向上、テキストの見栄え向上、および国際対応フォントのサポートの向上を実現しました。</span><span class="sxs-lookup"><span data-stu-id="9df58-409">The [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] based <xref:System.Windows.Forms.TextRenderer> class was introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] to improve performance, make text look better, and improve support for international fonts.</span></span> <span data-ttu-id="9df58-410">以前のバージョンの [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]では、[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] ベースの <xref:System.Drawing.Graphics> クラスを使用してすべてのテキスト表示を実行していました。</span><span class="sxs-lookup"><span data-stu-id="9df58-410">In earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], the [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] based <xref:System.Drawing.Graphics> class was used to perform all text rendering.</span></span> [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <span data-ttu-id="9df58-411">は、文字間隔と単語の折り返しを [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]とは異なる方法で計算します。</span><span class="sxs-lookup"><span data-stu-id="9df58-411">calculates character spacing and word wrapping differently from [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)].</span></span> <span data-ttu-id="9df58-412"><xref:System.Drawing.Graphics> クラスを使用してテキストを表示する Windows フォームアプリケーションでは、<xref:System.Windows.Forms.TextRenderer> を使用するコントロールのテキストが、アプリケーション内の他のテキストとは異なるように表示される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-412">In a Windows Forms application that uses the <xref:System.Drawing.Graphics> class to render text, this could cause the text for controls that use <xref:System.Windows.Forms.TextRenderer> to appear different from the other text in the application.</span></span> <span data-ttu-id="9df58-413">この非互換性を解決するには、`UseCompatibleTextRendering` プロパティを `true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-413">To resolve this incompatibility, you can set the `UseCompatibleTextRendering` property to `true`.</span></span> <span data-ttu-id="9df58-414">アプリケーションでサポートされているすべてのコントロールの `UseCompatibleTextRendering` を `true` に設定するには、`true`のパラメーターを指定して <xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9df58-414">To set `UseCompatibleTextRendering` to `true` for all supported controls in the application, call the <xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A> method with a parameter of `true`.</span></span>  
  
 <span data-ttu-id="9df58-415">Windows フォームコードが Internet Explorer などの別のアプリケーションでホストされている場合は、このメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="9df58-415">You should never call this method if your Windows Forms code is hosted in another application, such as Internet Explorer.</span></span> <span data-ttu-id="9df58-416">スタンドアロンの Windows フォームアプリケーションでのみ、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9df58-416">Only call this method in stand-alone Windows Forms applications.</span></span>  
  
   
  
## Examples  
  
> [!IMPORTANT]
>  <span data-ttu-id="9df58-417">[!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)] 以降の `UseCompatibleTextRendering` の既定値を設定するには、「<xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-417">To set the default value for `UseCompatibleTextRendering` in [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)] or later, see <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="9df58-418">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] 以降では、<xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A> の呼び出しが Program.cs ファイルに自動的に生成されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-418">In [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] or later, a call to <xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A> is automatically generated in the Program.cs file.</span></span> <span data-ttu-id="9df58-419">テキスト表示の既定値を変更するには、生成されたコードを変更します。</span><span class="sxs-lookup"><span data-stu-id="9df58-419">To change the text rendering default, modify the generated code.</span></span>  
  
```csharp  
static class Program  
{  
    /// <summary>  
    /// The main entry point for the application.  
    /// </summary>  
    [STAThread]  
    static void Main()  
    {  
        Application.EnableVisualStyles();  
        Application.SetCompatibleTextRenderingDefault(false);  
        Application.Run(new Form1());  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9df58-420">このメソッドは、Windows フォーム アプリケーションによって最初のウィンドウが作成される前にしか呼び出すことができません。</span><span class="sxs-lookup"><span data-stu-id="9df58-420">You can only call this method before the first window is created by your Windows Forms application.</span></span></exception>
        <altmember cref="P:System.Windows.Forms.ButtonBase.UseCompatibleTextRendering" />
        <altmember cref="P:System.Windows.Forms.CheckedListBox.UseCompatibleTextRendering" />
        <altmember cref="P:System.Windows.Forms.GroupBox.UseCompatibleTextRendering" />
        <altmember cref="P:System.Windows.Forms.Label.UseCompatibleTextRendering" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.UseCompatibleTextRendering" />
        <altmember cref="P:System.Windows.Forms.PropertyGrid.UseCompatibleTextRendering" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
        <altmember cref="M:System.Drawing.Text.PrivateFontCollection.AddMemoryFont(System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SetHighDpiMode">
      <MemberSignature Language="C#" Value="public static bool SetHighDpiMode (System.Windows.Forms.HighDpiMode highDpiMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetHighDpiMode(valuetype System.Windows.Forms.HighDpiMode highDpiMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.SetHighDpiMode(System.Windows.Forms.HighDpiMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetHighDpiMode (highDpiMode As HighDpiMode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetHighDpiMode(System::Windows::Forms::HighDpiMode highDpiMode);" />
      <MemberSignature Language="F#" Value="static member SetHighDpiMode : System.Windows.Forms.HighDpiMode -&gt; bool" Usage="System.Windows.Forms.Application.SetHighDpiMode highDpiMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highDpiMode" Type="System.Windows.Forms.HighDpiMode" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="highDpiMode"><span data-ttu-id="9df58-421">設定する高 DPI モードを指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9df58-421">One of the enumeration values that specifies the high DPI mode to set.</span></span></param>
        <summary><span data-ttu-id="9df58-422">プロセスの高 DPI モードを設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-422">Sets the high DPI mode of the process.</span></span></summary>
        <returns><span data-ttu-id="9df58-423">高 DPI モードが設定されている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-423"><see langword="true" /> if the high DPI mode was set; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="9df58-424">アプリケーションにアプリケーションマニフェストファイルが存在し、そのファイルで DPI モードが設定されている場合、このメソッドは、アプリケーションマニフェストによって既に設定されているモードを設定または変更できません。</span><span class="sxs-lookup"><span data-stu-id="9df58-424">If an application carries an application manifest file and the DPI mode was set in that file, this method will fail to set or change the mode that was already set by the application manifest.</span></span> <span data-ttu-id="9df58-425">高 DPI モードは、プロセスごとに1回設定されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-425">The high DPI mode is set once per process.</span></span> <span data-ttu-id="9df58-426">アプリケーションマニフェストファイルを使用した DPI モードの設定の詳細については、「[プロセスに対する既定の dpi 認識の設定](https://docs.microsoft.com/previous-versions/windows/desktop/legacy/mt846517(v%3Dvs.85))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-426">For more information about setting the DPI mode via the application manifest file, see [Setting the default DPI awareness for a process](https://docs.microsoft.com/previous-versions/windows/desktop/legacy/mt846517(v%3Dvs.85)).</span></span>

  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSuspendState">
      <MemberSignature Language="C#" Value="public static bool SetSuspendState (System.Windows.Forms.PowerState state, bool force, bool disableWakeEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetSuspendState(valuetype System.Windows.Forms.PowerState state, bool force, bool disableWakeEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.SetSuspendState(System.Windows.Forms.PowerState,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetSuspendState (state As PowerState, force As Boolean, disableWakeEvent As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetSuspendState(System::Windows::Forms::PowerState state, bool force, bool disableWakeEvent);" />
      <MemberSignature Language="F#" Value="static member SetSuspendState : System.Windows.Forms.PowerState * bool * bool -&gt; bool" Usage="System.Windows.Forms.Application.SetSuspendState (state, force, disableWakeEvent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Windows.Forms.PowerState" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="force" Type="System.Boolean" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="disableWakeEvent" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="9df58-427">移行後の電源の動作モードを示す <see cref="T:System.Windows.Forms.PowerState" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-427">A <see cref="T:System.Windows.Forms.PowerState" /> indicating the power activity mode to which to transition.</span></span></param>
        <param name="force"><span data-ttu-id="9df58-428">すぐに、強制的に中断モードにする場合は <see langword="true" />。Windows からすべてのアプリケーションに中断の要求が送られるようにする場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-428"><see langword="true" /> to force the suspended mode immediately; <see langword="false" /> to cause Windows to send a suspend request to every application.</span></span></param>
        <param name="disableWakeEvent"><span data-ttu-id="9df58-429">システムの電源ステータスの復元が wake イベントでアクティブにならないようにするには <see langword="true" />。システムの電源ステータスの復元が wake イベントでアクティブになるようにするには <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-429"><see langword="true" /> to disable restoring the system's power status to active on a wake event, <see langword="false" /> to enable restoring the system's power status to active on a wake event.</span></span></param>
        <summary><span data-ttu-id="9df58-430">システムを中断または休止状態にするか、システムが中断または休止状態になるよう要求します。</span><span class="sxs-lookup"><span data-stu-id="9df58-430">Suspends or hibernates the system, or requests that the system be suspended or hibernated.</span></span></summary>
        <returns><span data-ttu-id="9df58-431">システムが中断中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-431"><see langword="true" /> if the system is being suspended, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-432">アプリケーションが20秒以内に中断要求に応答しない場合、Windows は応答しない状態であると判断し、アプリケーションをスリープ状態または終了時に配置できます。</span><span class="sxs-lookup"><span data-stu-id="9df58-432">If an application does not respond to a suspend request within 20 seconds, Windows determines that it is in a non-responsive state, and that the application can either be put to sleep or terminated.</span></span> <span data-ttu-id="9df58-433">ただし、アプリケーションが中断要求に応答すると、リソースをクリーンアップし、アクティブなプロセスをシャットダウンするために必要な時間がかかることがあります。</span><span class="sxs-lookup"><span data-stu-id="9df58-433">Once an application responds to a suspend request, however, it can take whatever time it needs to clean up resources and shut down active processes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.PowerState" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetUnhandledExceptionMode">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9df58-434">未処理の例外への対応方法をアプリケーションに指示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-434">Instructs the application how to respond to unhandled exceptions.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9df58-435">次のコード例では、Windows フォームのスレッドで発生する例外と、他のスレッドで発生する例外のイベントハンドラーを設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-435">The following code example sets event handlers for exceptions that occur on Windows Forms threads and exceptions that occur on other threads.</span></span> <span data-ttu-id="9df58-436">アプリケーションのユーザー構成ファイルの設定に関係なく、すべての例外がアプリケーションによって処理されるように <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> を設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-436">It sets <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> so that all exceptions are handled by the application, regardless of the settings in the application's user configuration file.</span></span> <span data-ttu-id="9df58-437">UI スレッドの例外を処理するために <xref:System.Windows.Forms.Application.ThreadException> イベントを使用し、UI 以外のスレッドの例外を処理するための <xref:System.AppDomain.UnhandledException> イベントを使用します。</span><span class="sxs-lookup"><span data-stu-id="9df58-437">It uses the <xref:System.Windows.Forms.Application.ThreadException> event to handle UI thread exceptions, and the <xref:System.AppDomain.UnhandledException> event to handle non-UI thread exceptions.</span></span> <span data-ttu-id="9df58-438"><xref:System.AppDomain.UnhandledException> によってアプリケーションが終了するのを防ぐことができないため、この例では、終了する前にアプリケーションイベントログにエラーを記録するだけです。</span><span class="sxs-lookup"><span data-stu-id="9df58-438">Since <xref:System.AppDomain.UnhandledException> cannot prevent an application from terminating, the example simply logs the error in the application event log before termination.</span></span>  
  
 <span data-ttu-id="9df58-439">この例では、<xref:System.Windows.Forms.Form> クラスに2つの <xref:System.Windows.Forms.Button> コントロール `button1` と `button2`が定義されていることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="9df58-439">This example assumes that you have defined two <xref:System.Windows.Forms.Button> controls, `button1` and `button2`, on your <xref:System.Windows.Forms.Form> class.</span></span>  
  
 [!code-cpp[Classic Application.ThreadException Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ThreadException Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ThreadException Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ThreadException Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetUnhandledExceptionMode">
      <MemberSignature Language="C#" Value="public static void SetUnhandledExceptionMode (System.Windows.Forms.UnhandledExceptionMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetUnhandledExceptionMode(valuetype System.Windows.Forms.UnhandledExceptionMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetUnhandledExceptionMode (mode As UnhandledExceptionMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetUnhandledExceptionMode(System::Windows::Forms::UnhandledExceptionMode mode);" />
      <MemberSignature Language="F#" Value="static member SetUnhandledExceptionMode : System.Windows.Forms.UnhandledExceptionMode -&gt; unit" Usage="System.Windows.Forms.Application.SetUnhandledExceptionMode mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Windows.Forms.UnhandledExceptionMode" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="9df58-440">キャッチされない例外がスローされた場合に必要なアプリケーションの動作方法を説明する <see cref="T:System.Windows.Forms.UnhandledExceptionMode" /> 値。</span><span class="sxs-lookup"><span data-stu-id="9df58-440">An <see cref="T:System.Windows.Forms.UnhandledExceptionMode" /> value describing how the application should behave if an exception is thrown without being caught.</span></span></param>
        <summary><span data-ttu-id="9df58-441">未処理の例外への対応方法をアプリケーションに指示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-441">Instructs the application how to respond to unhandled exceptions.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-442">多くの場合、Windows フォームによってスローされたすべての例外をキャッチすることはできません。</span><span class="sxs-lookup"><span data-stu-id="9df58-442">It is often not feasible to catch all of the exceptions thrown by Windows Forms.</span></span> <span data-ttu-id="9df58-443">このメソッドを使用して、Windows フォームコンポーネントによってスローされた未処理の例外をすべてキャッチし、操作を続行するかどうか、またはユーザーに公開して実行を中止するかどうかをアプリケーションに指示できます。</span><span class="sxs-lookup"><span data-stu-id="9df58-443">Using this method, you can instruct your application whether it should catch all unhandled exceptions thrown by Windows Forms components and continue operating, or whether it should expose them to the user and halt execution.</span></span>  
  
 <span data-ttu-id="9df58-444"><xref:System.Windows.Forms.Application.Run%2A> メソッドを使用してアプリケーションのメインフォームをインスタンス化する前に、<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9df58-444">Call <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> before you instantiate the main form of your application using the <xref:System.Windows.Forms.Application.Run%2A> method.</span></span>  
  
 <span data-ttu-id="9df58-445">Windows フォームによって作成および所有されていないスレッドで発生した例外をキャッチするには、<xref:System.AppDomain.UnhandledException> イベントハンドラーを使用します。</span><span class="sxs-lookup"><span data-stu-id="9df58-445">To catch exceptions that occur in threads not created and owned by Windows Forms, use the <xref:System.AppDomain.UnhandledException> event handler.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-446">次のコード例では、Windows フォームのスレッドで発生する例外と、他のスレッドで発生する例外のイベントハンドラーを設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-446">The following code example sets event handlers for exceptions that occur on Windows Forms threads and exceptions that occur on other threads.</span></span> <span data-ttu-id="9df58-447">アプリケーションのユーザー構成ファイルの設定に関係なく、すべての例外がアプリケーションによって処理されるように <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> を設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-447">It sets <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> so that all exceptions are handled by the application, regardless of the settings in the application's user configuration file.</span></span> <span data-ttu-id="9df58-448">UI スレッドの例外を処理するために <xref:System.Windows.Forms.Application.ThreadException> イベントを使用し、UI 以外のスレッドの例外を処理するための <xref:System.AppDomain.UnhandledException> イベントを使用します。</span><span class="sxs-lookup"><span data-stu-id="9df58-448">It uses the <xref:System.Windows.Forms.Application.ThreadException> event to handle UI thread exceptions, and the <xref:System.AppDomain.UnhandledException> event to handle non-UI thread exceptions.</span></span> <span data-ttu-id="9df58-449"><xref:System.AppDomain.UnhandledException> によってアプリケーションが終了するのを防ぐことができないため、この例では、終了する前にアプリケーションイベントログにエラーを記録するだけです。</span><span class="sxs-lookup"><span data-stu-id="9df58-449">Since <xref:System.AppDomain.UnhandledException> cannot prevent an application from terminating, the example simply logs the error in the application event log before termination.</span></span>  
  
 <span data-ttu-id="9df58-450">この例では、<xref:System.Windows.Forms.Form> クラスに2つの <xref:System.Windows.Forms.Button> コントロール `button1` と `button2`が定義されていることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="9df58-450">This example assumes that you have defined two <xref:System.Windows.Forms.Button> controls, `button1` and `button2`, on your <xref:System.Windows.Forms.Form> class.</span></span>  
  
 [!code-cpp[Classic Application.ThreadException Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ThreadException Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ThreadException Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ThreadException Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9df58-451">アプリケーションが最初のウィンドウを作成した後に、例外モードを設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="9df58-451">You cannot set the exception mode after the application has created its first window.</span></span></exception>
        <altmember cref="T:System.Windows.Forms.UnhandledExceptionMode" />
      </Docs>
    </Member>
    <Member MemberName="SetUnhandledExceptionMode">
      <MemberSignature Language="C#" Value="public static void SetUnhandledExceptionMode (System.Windows.Forms.UnhandledExceptionMode mode, bool threadScope);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetUnhandledExceptionMode(valuetype System.Windows.Forms.UnhandledExceptionMode mode, bool threadScope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetUnhandledExceptionMode (mode As UnhandledExceptionMode, threadScope As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetUnhandledExceptionMode(System::Windows::Forms::UnhandledExceptionMode mode, bool threadScope);" />
      <MemberSignature Language="F#" Value="static member SetUnhandledExceptionMode : System.Windows.Forms.UnhandledExceptionMode * bool -&gt; unit" Usage="System.Windows.Forms.Application.SetUnhandledExceptionMode (mode, threadScope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Windows.Forms.UnhandledExceptionMode" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="threadScope" Type="System.Boolean" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="9df58-452">キャッチされない例外がスローされた場合に必要なアプリケーションの動作方法を説明する <see cref="T:System.Windows.Forms.UnhandledExceptionMode" /> 値。</span><span class="sxs-lookup"><span data-stu-id="9df58-452">An <see cref="T:System.Windows.Forms.UnhandledExceptionMode" /> value describing how the application should behave if an exception is thrown without being caught.</span></span></param>
        <param name="threadScope"><span data-ttu-id="9df58-453">スレッド例外モードを設定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-453"><see langword="true" /> to set the thread exception mode; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="9df58-454">未処理の例外に応答する方法をアプリケーションに指示し、オプションでスレッド固有の動作を適用します。</span><span class="sxs-lookup"><span data-stu-id="9df58-454">Instructs the application how to respond to unhandled exceptions, optionally applying thread-specific behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-455">多くの場合、Windows フォームによってスローされたすべての例外をキャッチすることはできません。</span><span class="sxs-lookup"><span data-stu-id="9df58-455">It is often not feasible to catch all of the exceptions thrown by Windows Forms.</span></span> <span data-ttu-id="9df58-456">このメソッドを使用して、Windows フォームコンポーネントによってスローされた未処理の例外をすべてキャッチし、操作を続行するかどうか、またはユーザーに公開して実行を中止するかどうかをアプリケーションに指示できます。</span><span class="sxs-lookup"><span data-stu-id="9df58-456">Using this method, you can instruct your application whether it should catch all unhandled exceptions thrown by Windows Forms components and continue operating, or whether it should expose them to the user and halt execution.</span></span>  
  
 <span data-ttu-id="9df58-457"><xref:System.Windows.Forms.Application.Run%2A> メソッドを使用してアプリケーションのメインフォームをインスタンス化する前に、<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9df58-457">Call <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> before you instantiate the main form of your application using the <xref:System.Windows.Forms.Application.Run%2A> method.</span></span>  
  
 <span data-ttu-id="9df58-458">`threadScope` が `true`場合、スレッド例外モードが設定されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-458">When `threadScope` is `true`, the thread exception mode is set.</span></span> <span data-ttu-id="9df58-459">`mode` が <xref:System.Windows.Forms.UnhandledExceptionMode.Automatic>に設定されていない場合、スレッド例外モードはアプリケーション例外モードをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="9df58-459">The thread exception mode overrides the application exception mode if `mode` is not set to <xref:System.Windows.Forms.UnhandledExceptionMode.Automatic>.</span></span>  
  
 <span data-ttu-id="9df58-460">`threadScope` が `false`場合、アプリケーションの例外モードが設定されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-460">When `threadScope` is `false`, the application exception mode is set.</span></span> <span data-ttu-id="9df58-461">アプリケーション例外モードは、<xref:System.Windows.Forms.UnhandledExceptionMode.Automatic> モードのすべてのスレッドで使用されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-461">The application exception mode is used for all threads that have the <xref:System.Windows.Forms.UnhandledExceptionMode.Automatic> mode.</span></span> <span data-ttu-id="9df58-462">アプリケーション例外モードを設定しても、現在のスレッドの設定には影響しません。</span><span class="sxs-lookup"><span data-stu-id="9df58-462">Setting the application exception mode does not affect the setting of the current thread.</span></span>  
  
 <span data-ttu-id="9df58-463">Windows フォームによって作成および所有されていないスレッドで発生した例外をキャッチするには、<xref:System.AppDomain.UnhandledException> イベントハンドラーを使用します。</span><span class="sxs-lookup"><span data-stu-id="9df58-463">To catch exceptions that occur in threads not created and owned by Windows Forms, use the <xref:System.AppDomain.UnhandledException> event handler.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-464">次のコード例では、Windows フォームのスレッドで発生する例外と、他のスレッドで発生する例外のイベントハンドラーを設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-464">The following code example sets event handlers for exceptions that occur on Windows Forms threads and exceptions that occur on other threads.</span></span> <span data-ttu-id="9df58-465">アプリケーションのユーザー構成ファイルの設定に関係なく、すべての例外がアプリケーションによって処理されるように <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> を設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-465">It sets <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> so that all exceptions are handled by the application, regardless of the settings in the application's user configuration file.</span></span> <span data-ttu-id="9df58-466">UI スレッドの例外を処理するために <xref:System.Windows.Forms.Application.ThreadException> イベントを使用し、UI 以外のスレッドの例外を処理するための <xref:System.AppDomain.UnhandledException> イベントを使用します。</span><span class="sxs-lookup"><span data-stu-id="9df58-466">It uses the <xref:System.Windows.Forms.Application.ThreadException> event to handle UI thread exceptions, and the <xref:System.AppDomain.UnhandledException> event to handle non-UI thread exceptions.</span></span> <span data-ttu-id="9df58-467"><xref:System.AppDomain.UnhandledException> によってアプリケーションが終了するのを防ぐことができないため、この例では、終了する前にアプリケーションイベントログにエラーを記録するだけです。</span><span class="sxs-lookup"><span data-stu-id="9df58-467">Since <xref:System.AppDomain.UnhandledException> cannot prevent an application from terminating, the example simply logs the error in the application event log before termination.</span></span>  
  
 <span data-ttu-id="9df58-468">この例では、<xref:System.Windows.Forms.Form> クラスに2つの <xref:System.Windows.Forms.Button> コントロール `button1` と `button2`が定義されていることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="9df58-468">This example assumes that you have defined two <xref:System.Windows.Forms.Button> controls, `button1` and `button2`, on your <xref:System.Windows.Forms.Form> class.</span></span>  
  
 [!code-cpp[Classic Application.ThreadException Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ThreadException Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ThreadException Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ThreadException Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9df58-469">アプリケーションが最初のウィンドウを作成した後に、例外モードを設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="9df58-469">You cannot set the exception mode after the application has created its first window.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="StartupPath">
      <MemberSignature Language="C#" Value="public static string StartupPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string StartupPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.StartupPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property StartupPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ StartupPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StartupPath : string" Usage="System.Windows.Forms.Application.StartupPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-470">アプリケーションを開始した実行可能ファイルの、ファイル名を含まないパスを取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-470">Gets the path for the executable file that started the application, not including the executable name.</span></span></summary>
        <value><span data-ttu-id="9df58-471">アプリケーションを開始した実行可能ファイルのパス。</span><span class="sxs-lookup"><span data-stu-id="9df58-471">The path for the executable file that started the application.</span></span>  
  
<span data-ttu-id="9df58-472">このパスは、Windows フォーム アプリケーションが [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] を使用して配置されているかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="9df58-472">This path will be different depending on whether the Windows Forms application is deployed using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span></span> [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] <span data-ttu-id="9df58-473">アプリケーションは、C:\Documents and Settings\\*username* ディレクトリでユーザーごとのアプリケーション キャッシュに格納されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-473">applications are stored in a per-user application cache in the C:\Documents and Settings\\*username* directory.</span></span> <span data-ttu-id="9df58-474">詳細については、[ローカルへのアクセスとリモート データには、ClickOnce アプリケーション](/visualstudio/deployment/accessing-local-and-remote-data-in-clickonce-applications) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-474">For more information, see [Accessing Local and Remote Data in ClickOnce Applications](/visualstudio/deployment/accessing-local-and-remote-data-in-clickonce-applications).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9df58-475">次のコード例では、このプロパティを取得し、テキストボックスにその値を表示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-475">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="9df58-476">この例では、`textBox1` がフォームに配置されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-476">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.StartupPath Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.StartupPath Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.StartupPath Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.StartupPath Example/CS/source.cs#1)]
 [!code-vb[Classic Application.StartupPath Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.StartupPath Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThreadException">
      <MemberSignature Language="C#" Value="public static event System.Threading.ThreadExceptionEventHandler ThreadException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Threading.ThreadExceptionEventHandler ThreadException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.ThreadException" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event ThreadException As ThreadExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event System::Threading::ThreadExceptionEventHandler ^ ThreadException;" />
      <MemberSignature Language="F#" Value="member this.ThreadException : System.Threading.ThreadExceptionEventHandler " Usage="member this.ThreadException : System.Threading.ThreadExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-477">トラップされないスレッドの例外がスローされると、発生します。</span><span class="sxs-lookup"><span data-stu-id="9df58-477">Occurs when an untrapped thread exception is thrown.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-478">このイベントを使用すると、Windows フォームアプリケーションは、Windows フォームスレッドで発生する未処理の例外を処理できます。</span><span class="sxs-lookup"><span data-stu-id="9df58-478">This event allows your Windows Forms application to handle otherwise unhandled exceptions that occur in Windows Forms threads.</span></span> <span data-ttu-id="9df58-479">イベントハンドラーを <xref:System.Windows.Forms.Application.ThreadException> イベントにアタッチして、これらの例外を処理します。これにより、アプリケーションは不明な状態のままになります。</span><span class="sxs-lookup"><span data-stu-id="9df58-479">Attach your event handler to the <xref:System.Windows.Forms.Application.ThreadException> event to deal with these exceptions, which will leave your application in an unknown state.</span></span> <span data-ttu-id="9df58-480">可能であれば、構造化例外処理ブロックで例外を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-480">Where possible, exceptions should be handled by a structured exception handling block.</span></span>  
  
 <span data-ttu-id="9df58-481"><xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>を設定することによって、未処理の Windows フォームスレッド例外にこのコールバックを使用するかどうかを変更できます。</span><span class="sxs-lookup"><span data-stu-id="9df58-481">You can change whether this callback is used for unhandled Windows Forms thread exceptions by setting <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>.</span></span> <span data-ttu-id="9df58-482">Windows フォームによって作成および所有されていないスレッドで発生した例外をキャッチするには、<xref:System.AppDomain.UnhandledException> イベントハンドラーを使用します。</span><span class="sxs-lookup"><span data-stu-id="9df58-482">To catch exceptions that occur in threads not created and owned by Windows Forms, use the <xref:System.AppDomain.UnhandledException> event handler.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9df58-483">このイベントのアクティブ化が欠落していないことを保証するには、<xref:System.Windows.Application.Run%2A?displayProperty=nameWithType>を呼び出す前にハンドラーをアタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-483">To guarantee that no activations of this event are missed, you must attach a handler before you call <xref:System.Windows.Application.Run%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9df58-484">このイベントにアタッチできるハンドラーは1つだけです。</span><span class="sxs-lookup"><span data-stu-id="9df58-484">Only one handler can be attached to this event.</span></span> <span data-ttu-id="9df58-485">複数のハンドラーを追加した場合、未処理の例外に対して、最後に追加されたハンドラーのみが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-485">If multiple handlers are added, only the most recently added handler will be called on an unhandled exception.</span></span>
  
> [!CAUTION]
>  <span data-ttu-id="9df58-486">これは静的イベントなので、アプリケーションが破棄されるときにイベントハンドラーをデタッチする必要があります。これを行わないと、メモリリークが発生します。</span><span class="sxs-lookup"><span data-stu-id="9df58-486">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-487">次のコード例では、Windows フォームのスレッドで発生する例外と、他のスレッドで発生する例外のイベントハンドラーを設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-487">The following code example sets event handlers for exceptions that occur on Windows Forms threads and exceptions that occur on other threads.</span></span> <span data-ttu-id="9df58-488">アプリケーションのユーザー構成ファイルの設定に関係なく、すべての例外がアプリケーションによって処理されるように <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> を設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-488">It sets <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> so that all exceptions are handled by the application, regardless of the settings in the application's user configuration file.</span></span> <span data-ttu-id="9df58-489">UI スレッドの例外を処理するために <xref:System.Windows.Forms.Application.ThreadException> イベントを使用し、UI 以外のスレッドの例外を処理するための <xref:System.AppDomain.UnhandledException> イベントを使用します。</span><span class="sxs-lookup"><span data-stu-id="9df58-489">It uses the <xref:System.Windows.Forms.Application.ThreadException> event to handle UI thread exceptions, and the <xref:System.AppDomain.UnhandledException> event to handle non-UI thread exceptions.</span></span> <span data-ttu-id="9df58-490"><xref:System.AppDomain.UnhandledException> によってアプリケーションが終了するのを防ぐことができないため、この例では、終了する前にアプリケーションイベントログにエラーを記録するだけです。</span><span class="sxs-lookup"><span data-stu-id="9df58-490">Since <xref:System.AppDomain.UnhandledException> cannot prevent an application from terminating, the example simply logs the error in the application event log before termination.</span></span>  
  
 <span data-ttu-id="9df58-491">この例では、<xref:System.Windows.Forms.Form> クラスに2つの <xref:System.Windows.Forms.Button> コントロール `button1` と `button2`が定義されていることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="9df58-491">This example assumes that you have defined two <xref:System.Windows.Forms.Button> controls, `button1` and `button2`, on your <xref:System.Windows.Forms.Form> class.</span></span>  
  
 [!code-cpp[Classic Application.ThreadException Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ThreadException Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ThreadException Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ThreadException Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThreadExit">
      <MemberSignature Language="C#" Value="public static event EventHandler ThreadExit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ThreadExit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.ThreadExit" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event ThreadExit As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ ThreadExit;" />
      <MemberSignature Language="F#" Value="member this.ThreadExit : EventHandler " Usage="member this.ThreadExit : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-492">スレッドをシャットダウンしようとすると発生します。</span><span class="sxs-lookup"><span data-stu-id="9df58-492">Occurs when a thread is about to shut down.</span></span> <span data-ttu-id="9df58-493">アプリケーションのメイン スレッドをシャットダウンしようとするとこのイベントが発生し、続いて <see cref="E:System.Windows.Forms.Application.ApplicationExit" /> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="9df58-493">When the main thread for an application is about to be shut down, this event is raised first, followed by an <see cref="E:System.Windows.Forms.Application.ApplicationExit" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-494">イベントハンドラーを <xref:System.Windows.Forms.Application.ThreadExit> イベントにアタッチして、スレッドの実行を停止する前に未処理の必須タスクを実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-494">You must attach the event handlers to the <xref:System.Windows.Forms.Application.ThreadExit> event to perform any unhandled, required tasks before the thread stops running.</span></span> <span data-ttu-id="9df58-495">このスレッドによって開かれたファイルを閉じるか、ガベージコレクターによって再利用されなかったオブジェクトを破棄します。</span><span class="sxs-lookup"><span data-stu-id="9df58-495">Close files opened by this thread, or dispose of objects that the garbage collector did not reclaim.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9df58-496">これは静的イベントなので、アプリケーションが破棄されるときにイベントハンドラーをデタッチする必要があります。これを行わないと、メモリリークが発生します。</span><span class="sxs-lookup"><span data-stu-id="9df58-496">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-497">このメンバーの使用例を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-497">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="9df58-498">この例では、イベントハンドラーは、<xref:System.Windows.Forms.Application.ThreadExit> イベントの発生を報告します。</span><span class="sxs-lookup"><span data-stu-id="9df58-498">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Application.ThreadExit> event.</span></span> <span data-ttu-id="9df58-499">このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="9df58-499">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="9df58-500">複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-500">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="9df58-501">コード例を実行するには、コードを Windows フォームに貼り付け、イベントハンドラーが <xref:System.Windows.Forms.Application.ThreadExit> イベントに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="9df58-501">To run the example code, paste it into a Windows Forms and ensure that the event handler is associated with the <xref:System.Windows.Forms.Application.ThreadExit> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#6)]
 [!code-vb[System.Windows.Forms.EventExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterMessageLoop">
      <MemberSignature Language="C#" Value="public static void UnregisterMessageLoop ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterMessageLoop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.UnregisterMessageLoop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterMessageLoop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterMessageLoop();" />
      <MemberSignature Language="F#" Value="static member UnregisterMessageLoop : unit -&gt; unit" Usage="System.Windows.Forms.Application.UnregisterMessageLoop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9df58-502"><see cref="M:System.Windows.Forms.Application.RegisterMessageLoop(System.Windows.Forms.Application.MessageLoopCallback)" /> によって行われたメッセージ ループ コールバックを登録解除します。</span><span class="sxs-lookup"><span data-stu-id="9df58-502">Unregisters the message loop callback made with <see cref="M:System.Windows.Forms.Application.RegisterMessageLoop(System.Windows.Forms.Application.MessageLoopCallback)" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserAppDataPath">
      <MemberSignature Language="C#" Value="public static string UserAppDataPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string UserAppDataPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.UserAppDataPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UserAppDataPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ UserAppDataPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserAppDataPath : string" Usage="System.Windows.Forms.Application.UserAppDataPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-503">ユーザーのアプリケーション データのパスを取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-503">Gets the path for the application data of a user.</span></span></summary>
        <value><span data-ttu-id="9df58-504">ユーザーのアプリケーション データのパス。</span><span class="sxs-lookup"><span data-stu-id="9df58-504">The path for the application data of a user.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-505">パスが存在しない場合は、次の形式で作成されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-505">If a path does not exist, one is created in the following format:</span></span>  
  
 <span data-ttu-id="9df58-506">*ベースパス*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span><span class="sxs-lookup"><span data-stu-id="9df58-506">*Base Path*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span></span>  
  
 <span data-ttu-id="9df58-507">このパスに格納されるデータは、ローミングが有効になっているユーザープロファイルの一部です。</span><span class="sxs-lookup"><span data-stu-id="9df58-507">Data stored in this path is part of user profile that is enabled for roaming.</span></span> <span data-ttu-id="9df58-508">ローミングユーザーは、ネットワーク内の複数のコンピューターで動作します。</span><span class="sxs-lookup"><span data-stu-id="9df58-508">A roaming user works on more than one computer in a network.</span></span> <span data-ttu-id="9df58-509">ローミングユーザーのユーザープロファイルはネットワーク上のサーバーに保存され、ユーザーがログオンするとシステムに読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="9df58-509">The user profile for a roaming user is kept on a server on the network and is loaded onto a system when the user logs on.</span></span> <span data-ttu-id="9df58-510">ユーザープロファイルがローミング対象と見なされるようにするには、オペレーティングシステムがローミングプロファイルをサポートしている必要があり、有効になっている必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-510">For a user profile to be considered for roaming, the operating system must support roaming profiles and it must be enabled.</span></span>  
  
 <span data-ttu-id="9df58-511">一般的な基本パスは C:\documents and と Settings\\*username*\Application Data です。</span><span class="sxs-lookup"><span data-stu-id="9df58-511">A typical base path is C:\Documents and Settings\\*username*\Application Data.</span></span> <span data-ttu-id="9df58-512">ただし、Windows フォームアプリケーションが [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]を使用して展開されている場合、このパスは異なります。</span><span class="sxs-lookup"><span data-stu-id="9df58-512">This path will be different, however, if the Windows Forms application is deployed by using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span></span> [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] <span data-ttu-id="9df58-513">は、他のすべてのアプリケーションから分離された独自のアプリケーションデータディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="9df58-513">creates its own application data directory that is isolated from all other applications.</span></span> <span data-ttu-id="9df58-514">詳細については、[ローカルへのアクセスとリモート データには、ClickOnce アプリケーション](/visualstudio/deployment/accessing-local-and-remote-data-in-clickonce-applications) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-514">For more information, see [Accessing Local and Remote Data in ClickOnce Applications](/visualstudio/deployment/accessing-local-and-remote-data-in-clickonce-applications).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-515">次のコード例では、2つのフォームを表示し、両方のフォームが閉じられたときにアプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="9df58-515">The following code example displays two forms and exits the application when both forms are closed.</span></span> <span data-ttu-id="9df58-516">アプリケーションの開始時と終了時には、各フォームの位置が記憶されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-516">When the application starts and exits, the position of each form is remembered.</span></span> <span data-ttu-id="9df58-517">この例では、<xref:System.Windows.Forms.Application.UserAppDataPath%2A> プロパティを使用して、ユーザーのアプリケーションデータを格納する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="9df58-517">This example demonstrates using the <xref:System.Windows.Forms.Application.UserAppDataPath%2A> property to store application data for the user.</span></span>  
  
 <span data-ttu-id="9df58-518">クラス `MyApplicationContext` は <xref:System.Windows.Forms.ApplicationContext> から継承され、各フォームが閉じられたことを追跡し、両方がである場合は現在のスレッドを終了します。</span><span class="sxs-lookup"><span data-stu-id="9df58-518">The class `MyApplicationContext` inherits from <xref:System.Windows.Forms.ApplicationContext> and keeps track when each form is closed, and exits the current thread when they both are.</span></span> <span data-ttu-id="9df58-519">クラスは、ユーザーの各フォームの位置を格納します。</span><span class="sxs-lookup"><span data-stu-id="9df58-519">The class stores the positions of each form for the user.</span></span> <span data-ttu-id="9df58-520">フォーム位置データは、<xref:System.Windows.Forms.Application.UserAppDataPath%2A>によって決定された場所に作成される `Appdata.txt` という名前のファイルに格納されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-520">The form position data is stored in a file titled `Appdata.txt` that is created in the location determined by <xref:System.Windows.Forms.Application.UserAppDataPath%2A>.</span></span> <span data-ttu-id="9df58-521">`Main` メソッドは、`Application.Run(context)` を呼び出して、<xref:System.Windows.Forms.ApplicationContext>を指定してアプリケーションを起動します。</span><span class="sxs-lookup"><span data-stu-id="9df58-521">The `Main` method calls `Application.Run(context)` to start the application given the <xref:System.Windows.Forms.ApplicationContext>.</span></span>  
  
 <span data-ttu-id="9df58-522">このコードは、<xref:System.Windows.Forms.ApplicationContext> クラスの概要に示されている例の抜粋です。</span><span class="sxs-lookup"><span data-stu-id="9df58-522">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.ApplicationContext> class overview.</span></span> <span data-ttu-id="9df58-523">簡潔にするために、一部のコードは表示されません。</span><span class="sxs-lookup"><span data-stu-id="9df58-523">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="9df58-524">コードリスト全体については、「<xref:System.Windows.Forms.ApplicationContext>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9df58-524">See <xref:System.Windows.Forms.ApplicationContext> for the whole code listing.</span></span>  
  
 [!code-cpp[Application#5](~/samples/snippets/cpp/VS_Snippets_Winforms/Application/CPP/source.cpp#5)]
 [!code-csharp[Application#5](~/samples/snippets/csharp/VS_Snippets_Winforms/Application/CS/source.cs#5)]
 [!code-vb[Application#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Application/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.UserAppDataRegistry" />
      </Docs>
    </Member>
    <Member MemberName="UserAppDataRegistry">
      <MemberSignature Language="C#" Value="public static Microsoft.Win32.RegistryKey UserAppDataRegistry { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.Win32.RegistryKey UserAppDataRegistry" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.UserAppDataRegistry" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UserAppDataRegistry As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::Win32::RegistryKey ^ UserAppDataRegistry { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserAppDataRegistry : Microsoft.Win32.RegistryKey" Usage="System.Windows.Forms.Application.UserAppDataRegistry" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-525">ユーザーのアプリケーション データのレジストリ キーを取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-525">Gets the registry key for the application data of a user.</span></span></summary>
        <value><span data-ttu-id="9df58-526">ユーザー固有のアプリケーション データのレジストリ キーを表す <see cref="T:Microsoft.Win32.RegistryKey" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-526">A <see cref="T:Microsoft.Win32.RegistryKey" /> representing the registry key for the application data specific to the user.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-527">キーが存在しない場合は、次の形式で作成されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-527">If the key does not exist, it is created in the following format:</span></span>  
  
 <span data-ttu-id="9df58-528">CurrentUser\Software\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span><span class="sxs-lookup"><span data-stu-id="9df58-528">CurrentUser\Software\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span></span>   
  
 <span data-ttu-id="9df58-529">このキーに格納されているデータは、ローミングが有効になっているユーザープロファイルの一部です。</span><span class="sxs-lookup"><span data-stu-id="9df58-529">Data stored in this key is part of user profile that is enabled for roaming.</span></span> <span data-ttu-id="9df58-530">ローミングユーザーは、ネットワーク内の複数のコンピューターで動作します。</span><span class="sxs-lookup"><span data-stu-id="9df58-530">A roaming user works on more than one computer in a network.</span></span> <span data-ttu-id="9df58-531">ローミングユーザーのユーザープロファイルはネットワーク上のサーバーに保存され、ユーザーがログオンするとシステムに読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="9df58-531">The user profile for a roaming user is kept on a server on the network and is loaded onto a system when the user logs on.</span></span> <span data-ttu-id="9df58-532">ユーザープロファイルがローミング対象と見なされるようにするには、オペレーティングシステムがローミングプロファイルをサポートしている必要があり、有効になっている必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-532">For a user profile to be considered for roaming, the operating system must support roaming profiles and it must be enabled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.SystemInformation" />
      </Docs>
    </Member>
    <Member MemberName="UseVisualStyles">
      <MemberSignature Language="C#" Value="public static bool UseVisualStyles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseVisualStyles" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.UseVisualStyles" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UseVisualStyles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool UseVisualStyles { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseVisualStyles : bool" Usage="System.Windows.Forms.Application.UseVisualStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-533">視覚スタイルがアプリケーションに対して有効になっているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-533">Gets a value that indicates whether visual styles are enabled for the application.</span></span></summary>
        <value><span data-ttu-id="9df58-534">visual スタイルが有効になっている場合に <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="9df58-534"><see langword="true" /> if visual styles are enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="9df58-535"><xref:System.Windows.Forms.Application.EnableVisualStyles>を呼び出すことによって、視覚スタイルを有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="9df58-535">The visual styles can be enabled by calling <xref:System.Windows.Forms.Application.EnableVisualStyles>.</span></span>

<span data-ttu-id="9df58-536">OS でサポートされていない場合、またはテーマが OS レベルで無効になっている場合、visual スタイルは有効になりません。</span><span class="sxs-lookup"><span data-stu-id="9df58-536">The visual styles will not be enabled if the OS does not support them, or theming is disabled at the OS level.</span></span>

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseWaitCursor">
      <MemberSignature Language="C#" Value="public static bool UseWaitCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseWaitCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.UseWaitCursor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property UseWaitCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool UseWaitCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseWaitCursor : bool with get, set" Usage="System.Windows.Forms.Application.UseWaitCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-537">アプリケーションの開いているフォームすべてに待機カーソルを使用するかどうかについて、取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-537">Gets or sets whether the wait cursor is used for all open forms of the application.</span></span></summary>
        <value><span data-ttu-id="9df58-538">すべての開いているフォームで待機カーソルが使用される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9df58-538"><see langword="true" /> is the wait cursor is used for all open forms; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-539">このプロパティを `true`に設定すると、アプリケーションで開いているすべてのフォームの <xref:System.Windows.Forms.Control.UseWaitCursor%2A> プロパティが `true`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="9df58-539">When this property is set to `true`, the <xref:System.Windows.Forms.Control.UseWaitCursor%2A> property of all open forms in the application will be set to `true`.</span></span> <span data-ttu-id="9df58-540">この呼び出しは、このプロパティがすべてのフォームに設定されるまでは戻りません。</span><span class="sxs-lookup"><span data-stu-id="9df58-540">This call will not return until this property has been set on all forms.</span></span> <span data-ttu-id="9df58-541">このプロパティは、実行時間の長い操作があり、その操作がまだ処理中であることをすべてのアプリケーションフォームで示す場合に使用します。</span><span class="sxs-lookup"><span data-stu-id="9df58-541">Use this property when you have a long-running operation, and want to indicate in all application forms that the operation is still processing.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStyleState">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.VisualStyles.VisualStyleState VisualStyleState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.VisualStyles.VisualStyleState VisualStyleState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.VisualStyleState" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property VisualStyleState As VisualStyleState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::VisualStyles::VisualStyleState VisualStyleState { System::Windows::Forms::VisualStyles::VisualStyleState get(); void set(System::Windows::Forms::VisualStyles::VisualStyleState value); };" />
      <MemberSignature Language="F#" Value="member this.VisualStyleState : System.Windows.Forms.VisualStyles.VisualStyleState with get, set" Usage="System.Windows.Forms.Application.VisualStyleState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.VisualStyles.VisualStyleState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9df58-542">アプリケーション ウィンドウに visual スタイルをどのように適用するかを指定する値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9df58-542">Gets a value that specifies how visual styles are applied to application windows.</span></span></summary>
        <value><span data-ttu-id="9df58-543"><see cref="T:System.Windows.Forms.VisualStyles.VisualStyleState" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="9df58-543">A bitwise combination of the <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleState" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9df58-544">この <xref:System.Windows.Forms.Application.VisualStyleState%2A> プロパティは、アプリケーションウィンドウのクライアント領域または非クライアント領域で visual スタイルを有効にするかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-544">This <xref:System.Windows.Forms.Application.VisualStyleState%2A> property determines whether visual styles are enabled in client areas or nonclient areas of application windows.</span></span> <span data-ttu-id="9df58-545">通常、このプロパティは、メインフォームのコンストラクターまたは <xref:System.Windows.Forms.Form.Load> イベントハンドラー内で設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9df58-545">Generally, this property should be set within the main form's constructor or <xref:System.Windows.Forms.Form.Load> event handler.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9df58-546">次のコード例では、<xref:System.Windows.Forms.Application.VisualStyleState%2A> プロパティを、<xref:System.Windows.Forms.Button> コントロールの <xref:System.Windows.Forms.Control.Click> イベントハンドラー内のいずれかの <xref:System.Windows.Forms.VisualStyles.VisualStyleState?displayProperty=nameWithType> 値に設定します。</span><span class="sxs-lookup"><span data-stu-id="9df58-546">The following code example sets the <xref:System.Windows.Forms.Application.VisualStyleState%2A> property to one of the <xref:System.Windows.Forms.VisualStyles.VisualStyleState?displayProperty=nameWithType> values within the <xref:System.Windows.Forms.Control.Click> event handler for a <xref:System.Windows.Forms.Button> control.</span></span> <span data-ttu-id="9df58-547">このコード例は、<xref:System.Windows.Forms.VisualStyles.VisualStyleState?displayProperty=nameWithType> 列挙型に対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="9df58-547">This code example is part of a larger example provided for the <xref:System.Windows.Forms.VisualStyles.VisualStyleState?displayProperty=nameWithType> enumeration.</span></span>  
  
 [!code-cpp[System.Windows.Forms.VisualStyles.VisualStyleState#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.VisualStyles.VisualStyleState/cpp/visualstylestate.cpp#10)]
 [!code-csharp[System.Windows.Forms.VisualStyles.VisualStyleState#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.VisualStyles.VisualStyleState/CS/visualstylestate.cs#10)]
 [!code-vb[System.Windows.Forms.VisualStyles.VisualStyleState#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.VisualStyles.VisualStyleState/VB/visualstylestate.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
