<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata><Meta Name="ms.openlocfilehash" Value="020b4dee59e9a40bcb5a37db92db4d94f0f42d01" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83503535" /></Metadata><TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject" FrameworkAlternate="netframework-1.1" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="c060f-101">ウィンドウ ハンドルとウィンドウ プロシージャの下位のカプセル化を提供します。</span><span class="sxs-lookup"><span data-stu-id="c060f-101">Provides a low-level encapsulation of a window handle and a window procedure.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c060f-102">このクラスは、ウィンドウクラスの作成と登録を自動的に管理します。</span><span class="sxs-lookup"><span data-stu-id="c060f-102">This class automatically manages window class creation and registration.</span></span>  
  
 <span data-ttu-id="c060f-103">ウィンドウは、ウィンドウハンドルに関連付けられている場合、ガベージコレクションの対象にはなりません。</span><span class="sxs-lookup"><span data-stu-id="c060f-103">A window is not eligible for garbage collection when it is associated with a window handle.</span></span> <span data-ttu-id="c060f-104">適切なガベージコレクションを確実に行うには、<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> を使用して手動で破棄するか、<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>を使用して解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c060f-104">To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c060f-105"><xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> メソッドは、WM_NCDESTROY メッセージが処理されるときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c060f-105">The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed.</span></span> <span data-ttu-id="c060f-106">つまり、手動で <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>を呼び出す必要がない場合には、この方法を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="c060f-106">This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so.</span></span>  
  
 <span data-ttu-id="c060f-107"><xref:System.Windows.Forms.NativeWindow> クラスには、ハンドルを管理するための次のプロパティとメソッドが用意されています: <xref:System.Windows.Forms.NativeWindow.Handle%2A>、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>、<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>、および <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>。</span><span class="sxs-lookup"><span data-stu-id="c060f-107">The <xref:System.Windows.Forms.NativeWindow> class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c060f-108">次のコード例は、ウィンドウプロシージャでのオペレーティングシステムのメッセージの受信と、特定のオペレーティングシステムウィンドウのクラス名を持つウィンドウの作成を示しています。</span><span class="sxs-lookup"><span data-stu-id="c060f-108">The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="c060f-109">この例では、これを実現する <xref:System.Windows.Forms.NativeWindow> から継承する2つのクラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="c060f-109">The example creates two classes that inherit from <xref:System.Windows.Forms.NativeWindow> that accomplish this.</span></span>  
  
 <span data-ttu-id="c060f-110">`MyNativeWindowListener` クラスは、コンストラクターに渡されるフォームのウィンドウプロシージャにフックし、<xref:System.Windows.Forms.NativeWindow.WndProc%2A> メソッドをオーバーライドして `WM_ACTIVATEAPP` ウィンドウメッセージをインターセプトします。</span><span class="sxs-lookup"><span data-stu-id="c060f-110">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="c060f-111">クラスは、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> と <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> メソッドを使用して <xref:System.Windows.Forms.NativeWindow> が使用するウィンドウハンドルを識別する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="c060f-111">The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="c060f-112">ハンドルは、<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> イベントと <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> イベントに基づいて割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="c060f-112">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="c060f-113">`WM_ACTIVATEAPP` ウィンドウメッセージを受信すると、クラスは `form1.ApplicationActivated` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c060f-113">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="c060f-114">`MyNativeWindow` クラスは、<xref:System.Windows.Forms.CreateParams.ClassName%2A> が `BUTTON`に設定された新しいウィンドウを作成します。</span><span class="sxs-lookup"><span data-stu-id="c060f-114">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="c060f-115">クラスは、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> メソッドを使用し、<xref:System.Windows.Forms.NativeWindow.WndProc%2A> メソッドをオーバーライドして、受信されたウィンドウメッセージをインターセプトする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="c060f-115">The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span>  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c060f-116"><see cref="T:System.Windows.Forms.NativeWindow" /> クラスのインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="c060f-116">Initializes an instance of the <see cref="T:System.Windows.Forms.NativeWindow" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c060f-117">これは、コンパイラによって提供される既定の <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> コンストラクターです。</span><span class="sxs-lookup"><span data-stu-id="c060f-117">This is the default <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor provided by the compiler.</span></span> <span data-ttu-id="c060f-118"><xref:System.Windows.Forms.NativeWindow> クラスには、アプリケーションドメイン全体のメッセージハンドラーとハッシュテーブルを初期化する静的コンストラクターもあります。</span><span class="sxs-lookup"><span data-stu-id="c060f-118">The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="c060f-119">ウィンドウに割り当てるハンドル。</span><span class="sxs-lookup"><span data-stu-id="c060f-119">The handle to assign to this window.</span></span></param>
        <summary><span data-ttu-id="c060f-120">ウィンドウにハンドルを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="c060f-120">Assigns a handle to this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c060f-121">`handle` パラメーターに送信されたウィンドウメッセージをインターセプト <xref:System.Windows.Forms.NativeWindow.WndProc%2A>。</span><span class="sxs-lookup"><span data-stu-id="c060f-121"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter.</span></span> <span data-ttu-id="c060f-122">ハンドルのウィンドウプロシージャを既定のウィンドウプロシージャにリセットするには、<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="c060f-122">Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure.</span></span>  
  
 <span data-ttu-id="c060f-123"><xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> メソッドは、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> メソッドを呼び出して、<xref:System.Windows.Forms.NativeWindow.Handle%2A> プロパティの値が変更されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="c060f-123">The <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c060f-124">割り当てるハンドルを別のアプリケーションプロセス内に配置することはできません。</span><span class="sxs-lookup"><span data-stu-id="c060f-124">The handle to assign cannot be in a different application process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c060f-125">次のコード例は、ウィンドウプロシージャでオペレーティングシステムウィンドウメッセージを傍受する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c060f-125">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="c060f-126">この例では、<xref:System.Windows.Forms.NativeWindow> を継承するクラスを作成してこれを実現します。</span><span class="sxs-lookup"><span data-stu-id="c060f-126">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="c060f-127">`MyNativeWindowListener` クラスは、コンストラクターに渡されるフォームのウィンドウプロシージャにフックし、<xref:System.Windows.Forms.NativeWindow.WndProc%2A> メソッドをオーバーライドして `WM_ACTIVATEAPP` ウィンドウメッセージをインターセプトします。</span><span class="sxs-lookup"><span data-stu-id="c060f-127">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="c060f-128">クラスは、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> および <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> メソッドを使用して、<xref:System.Windows.Forms.NativeWindow> が使用するウィンドウハンドルを識別する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="c060f-128">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="c060f-129">ハンドルは、<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> イベントと <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> イベントに基づいて割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="c060f-129">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="c060f-130">`WM_ACTIVATEAPP` ウィンドウメッセージを受信すると、クラスは `form1.ApplicationActivated` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c060f-130">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="c060f-131">このコードは、<xref:System.Windows.Forms.NativeWindow> クラスの概要に示されている例の抜粋です。</span><span class="sxs-lookup"><span data-stu-id="c060f-131">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="c060f-132">簡潔にするために、一部のコードは表示されません。</span><span class="sxs-lookup"><span data-stu-id="c060f-132">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="c060f-133">コードリスト全体については、「<xref:System.Windows.Forms.NativeWindow>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c060f-133">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><span data-ttu-id="c060f-134">ウィンドウには既にハンドルが割り当てられています。</span><span class="sxs-lookup"><span data-stu-id="c060f-134">This window already has a handle.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="c060f-135">関連付けられたネイティブ ウィンドウのウィンドウ プロシージャを取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="c060f-135">The windows procedure for the associated native window could not be retrieved.</span></span></exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp"><span data-ttu-id="c060f-136">ウィンドウの作成パラメーターを指定する <see cref="T:System.Windows.Forms.CreateParams" />。</span><span class="sxs-lookup"><span data-stu-id="c060f-136">A <see cref="T:System.Windows.Forms.CreateParams" /> that specifies the creation parameters for this window.</span></span></param>
        <summary><span data-ttu-id="c060f-137">作成パラメーターを指定してウィンドウとそのハンドルを作成します。</span><span class="sxs-lookup"><span data-stu-id="c060f-137">Creates a window and its handle with the specified creation parameters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c060f-138">`cp` パラメーターは、ウィンドウとそのハンドルを作成するためにネイティブの Win32 `CreateWindowEx` メソッドに渡される値を指定します。</span><span class="sxs-lookup"><span data-stu-id="c060f-138">The `cp` parameter specifies the values that are passed to the native Win32 `CreateWindowEx` method to create a window and its handle.</span></span>  
  
 <span data-ttu-id="c060f-139"><xref:System.Windows.Forms.CreateParams.ClassName%2A> フィールドが `null`されていない場合、新しく作成されたウィンドウハンドルは、指定されたクラスを継承します。</span><span class="sxs-lookup"><span data-stu-id="c060f-139">When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class.</span></span> <span data-ttu-id="c060f-140">たとえば、<xref:System.Windows.Forms.CreateParams.ClassName%2A> が `BUTTON`に設定されている場合、新しく作成されたウィンドウは Win32 `BUTTON` ウィンドウクラスに基づきます。</span><span class="sxs-lookup"><span data-stu-id="c060f-140">For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class.</span></span> <span data-ttu-id="c060f-141"><xref:System.Windows.Forms.CreateParams.ClassName%2A> オブジェクトの <xref:System.Windows.Forms.CreateParams.Param%2A> プロパティは、構造体として宣言されたクラスのインスタンスを `null` または参照する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c060f-141">The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure.</span></span>  
  
 <span data-ttu-id="c060f-142">このコードは、<xref:System.Windows.Forms.NativeWindow> クラスの概要に示されている例の抜粋です。</span><span class="sxs-lookup"><span data-stu-id="c060f-142">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="c060f-143">簡潔にするために、一部のコードは表示されません。</span><span class="sxs-lookup"><span data-stu-id="c060f-143">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="c060f-144">コードリスト全体については、「<xref:System.Windows.Forms.NativeWindow>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c060f-144">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c060f-145">指定されたクラス名は、オペレーティングシステムに登録されています。</span><span class="sxs-lookup"><span data-stu-id="c060f-145">The class name provided is registered with the operating system.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c060f-146">次のコード例は、特定のオペレーティングシステムウィンドウのクラス名を使用してウィンドウを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c060f-146">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="c060f-147">この例では、<xref:System.Windows.Forms.NativeWindow> を継承するクラスを作成してこれを実現します。</span><span class="sxs-lookup"><span data-stu-id="c060f-147">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="c060f-148">`MyNativeWindow` クラスは、<xref:System.Windows.Forms.CreateParams.ClassName%2A> が `BUTTON`に設定された新しいウィンドウを作成します。</span><span class="sxs-lookup"><span data-stu-id="c060f-148">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="c060f-149">これにより、Win32 ボタンウィンドウが作成されます。</span><span class="sxs-lookup"><span data-stu-id="c060f-149">This creates a Win32 button window.</span></span> <span data-ttu-id="c060f-150">ボタンの位置とサイズは、追加のウィンドウスタイルを指定することによって設定されます。</span><span class="sxs-lookup"><span data-stu-id="c060f-150">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="c060f-151">クラスは、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> メソッドを使用し、<xref:System.Windows.Forms.NativeWindow.WndProc%2A> メソッドをオーバーライドして、受信したウィンドウメッセージをインターセプトする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="c060f-151">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="c060f-152">この例では WM_ACTIVATEAPP メッセージを検索しますが、実際のプログラムでは、作成された型に固有のウィンドウメッセージを置き換えることができます。</span><span class="sxs-lookup"><span data-stu-id="c060f-152">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c060f-153">コントロールの種類によっては、ウィンドウではなくウィンドウの親にウィンドウメッセージが送信されます。</span><span class="sxs-lookup"><span data-stu-id="c060f-153">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="c060f-154">詳細については、Windows プラットフォーム SDK を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c060f-154">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="c060f-155">ネイティブ ウィンドウを作成しようとしたときに、オペレーティング システムでリソース不足が発生しました。</span><span class="sxs-lookup"><span data-stu-id="c060f-155">The operating system ran out of resources when trying to create the native window.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="c060f-156">ネイティブ Windows API で指定されたウィンドウを作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="c060f-156">The native Windows API could not create the specified window.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c060f-157">現在のネイティブ ウィンドウのハンドルが既に割り当てられています。つまり、<see cref="P:System.Windows.Forms.NativeWindow.Handle" /> プロパティが <see cref="F:System.IntPtr.Zero" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="c060f-157">The handle of the current native window is already assigned; in explanation, the <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> property is not equal to <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc : Message -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="c060f-158">現在処理中のメッセージ。</span><span class="sxs-lookup"><span data-stu-id="c060f-158">The message that is currently being processed.</span></span></param>
        <summary><span data-ttu-id="c060f-159">ウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c060f-159">Invokes the default window procedure associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c060f-160">通常、<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> メソッドを呼び出すのは、ウィンドウメッセージを受信し、既定のウィンドウプロシージャでメッセージを処理する場合のみです。</span><span class="sxs-lookup"><span data-stu-id="c060f-160">Typically, you only call the <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> method when you are intercepting window messages and would like the default window procedure to handle the message.</span></span> <span data-ttu-id="c060f-161">ウィンドウにウィンドウメッセージを送信するために <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> を呼び出すことはできません。代わりに Win32 `SendMessage` 関数を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="c060f-161"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> should not be called to send a window message to the window; call the Win32 `SendMessage` function instead.</span></span>  
  
 <span data-ttu-id="c060f-162"><xref:System.Windows.Forms.NativeWindow.Handle%2A> プロパティが0の場合に <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> を呼び出すと、エラーになります。</span><span class="sxs-lookup"><span data-stu-id="c060f-162">It is an error to call <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="c060f-163">派生クラスでこのメソッドをオーバーライドして、特定のネイティブウィンドウまたは .NET Windows フォーム <see cref="T:System.Windows.Forms.Control" />に対する一般化されたカスタムメッセージ処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="c060f-163">Override this method in a derived class to implement generalized custom message handling for a specific native window or .NET Windows Forms <see cref="T:System.Windows.Forms.Control" />.</span></span> <span data-ttu-id="c060f-164">カスタム処理は、このメソッドの基本クラスの実装を呼び出す前、後、またはその代わりに実行できます。これにより、標準のメッセージ処理が実行されます。</span><span class="sxs-lookup"><span data-stu-id="c060f-164">Custom processing can be performed before, after, or instead of a call to the base class implementation of this method, which performs standard message processing.</span></span>  
  
<span data-ttu-id="c060f-165">これに対して、アプリケーションに対してカスタマイズされたメッセージ処理を追加するには、<see cref="T:System.Windows.Forms.Application" /> クラスの <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c060f-165">In contrast, adding customized message handling for an application can be accomplished through the <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> method of the <see cref="T:System.Windows.Forms.Application" /> class.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c060f-166">ウィンドウとそのハンドルを破棄します。</span><span class="sxs-lookup"><span data-stu-id="c060f-166">Destroys the window and its handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c060f-167">このメソッドは、<xref:System.Windows.Forms.NativeWindow.Handle%2A>に関連付けられているウィンドウを破棄し、<xref:System.Windows.Forms.NativeWindow.Handle%2A> プロパティを0に設定し、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> メソッドを呼び出して変更を反映します。</span><span class="sxs-lookup"><span data-stu-id="c060f-167">This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change.</span></span> <span data-ttu-id="c060f-168">通常は、ネイティブウィンドウで終了した場合にのみ <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c060f-168">Typically, you only call <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> when you are done with the native window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c060f-169"><xref:System.Windows.Forms.NativeWindow> クラスは、関連付けられているウィンドウを自動的に破棄し、WM_DESTROY メッセージに応答してそのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="c060f-169">The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c060f-170">ウィンドウに関連付けられているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="c060f-170">Releases the resources associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c060f-171"><xref:System.Windows.Forms.NativeWindow.Finalize%2A> メソッドは、現在の <xref:System.Windows.Forms.NativeWindow> インスタンスに関連付けられている Win32 派生クラスを削除し、ハンドルを解放して、関連付けられているウィンドウに WM_CLOSE メッセージをポストします。</span><span class="sxs-lookup"><span data-stu-id="c060f-171">The <xref:System.Windows.Forms.NativeWindow.Finalize%2A> method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="c060f-172">ウィンドウのハンドル。</span><span class="sxs-lookup"><span data-stu-id="c060f-172">A handle to a window.</span></span></param>
        <summary><span data-ttu-id="c060f-173">指定したハンドルに関連付けられているウィンドウを取得します。</span><span class="sxs-lookup"><span data-stu-id="c060f-173">Retrieves the window associated with the specified handle.</span></span></summary>
        <returns><span data-ttu-id="c060f-174">指定したハンドルに関連付けられている <see cref="T:System.Windows.Forms.NativeWindow" />。</span><span class="sxs-lookup"><span data-stu-id="c060f-174">The <see cref="T:System.Windows.Forms.NativeWindow" /> associated with the specified handle.</span></span> <span data-ttu-id="c060f-175">ハンドルに関連付けられているウィンドウがない場合は、このメソッドは <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="c060f-175">This method returns <see langword="null" /> when the handle does not have an associated window.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c060f-176">別のメソッドからハンドルを受け取った場合は、このメソッドを使用して、ハンドルに関連付けられているウィンドウを取得します。</span><span class="sxs-lookup"><span data-stu-id="c060f-176">If you receive a handle from another method, use this method to retrieve the window associated with the handle.</span></span> <span data-ttu-id="c060f-177">ハンドルは、現在のプロセスの別の <xref:System.Windows.Forms.NativeWindow> によって既に所有されている必要があります。それ以外の場合は `null` が返されます。</span><span class="sxs-lookup"><span data-stu-id="c060f-177">The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c060f-178">ウィンドウのハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="c060f-178">Gets the handle for this window.</span></span></summary>
        <value><span data-ttu-id="c060f-179">正常に実行された場合は、関連する Win32 ネイティブ ウィンドウへのハンドルを表す <see cref="T:System.IntPtr" />。ウィンドウに関連付けられているハンドルがない場合は 0。</span><span class="sxs-lookup"><span data-stu-id="c060f-179">If successful, an <see cref="T:System.IntPtr" /> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c060f-180">ウィンドウまたはコントロールのハンドルを必要とする Windows API メソッドを呼び出すときに、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c060f-180">Use this method when calling Windows API methods that require a handle for a window or control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c060f-181">次のコード例は、特定のオペレーティングシステムウィンドウのクラス名を使用してウィンドウを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c060f-181">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="c060f-182">この例では、<xref:System.Windows.Forms.NativeWindow> を継承するクラスを作成してこれを実現します。</span><span class="sxs-lookup"><span data-stu-id="c060f-182">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="c060f-183">この例では、<xref:System.Windows.Forms.NativeWindow.Handle%2A> が変更されたときに通知を受けるように <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> メソッドをオーバーライドする方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="c060f-183">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="c060f-184">`MyNativeWindow` クラスは、<xref:System.Windows.Forms.CreateParams.ClassName%2A> を [] に設定して新しいウィンドウを作成します。</span><span class="sxs-lookup"><span data-stu-id="c060f-184">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON.</span></span> <span data-ttu-id="c060f-185">これにより、Win32 ボタンウィンドウが作成されます。</span><span class="sxs-lookup"><span data-stu-id="c060f-185">This creates a Win32 button window.</span></span> <span data-ttu-id="c060f-186">ボタンの位置とサイズは、追加のウィンドウスタイルを指定することによって設定されます。</span><span class="sxs-lookup"><span data-stu-id="c060f-186">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="c060f-187">クラスは、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> メソッドを使用し、<xref:System.Windows.Forms.NativeWindow.WndProc%2A> メソッドをオーバーライドして、受信したウィンドウメッセージをインターセプトする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="c060f-187">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="c060f-188">この例では WM_ACTIVATEAPP メッセージを検索しますが、実際のプログラムでは、作成された型に固有のウィンドウメッセージを置き換えることができます。</span><span class="sxs-lookup"><span data-stu-id="c060f-188">Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c060f-189">コントロールの種類によっては、ウィンドウではなくウィンドウの親にウィンドウメッセージが送信されます。</span><span class="sxs-lookup"><span data-stu-id="c060f-189">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="c060f-190">詳細については、Windows プラットフォーム SDK を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c060f-190">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c060f-191">ウィンドウのハンドルが変更されたときに呼び出される通知メソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="c060f-191">Specifies a notification method that is called when the handle for a window is changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c060f-192">このメソッドは、<xref:System.Windows.Forms.NativeWindow.Handle%2A> プロパティの値が変更されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c060f-192">This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c060f-193">次のコード例は、特定のオペレーティングシステムウィンドウのクラス名を使用してウィンドウを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c060f-193">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="c060f-194">この例では、<xref:System.Windows.Forms.NativeWindow> を継承するクラスを作成してこれを実現します。</span><span class="sxs-lookup"><span data-stu-id="c060f-194">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="c060f-195">この例では、<xref:System.Windows.Forms.NativeWindow.Handle%2A> が変更されたときに通知を受けるように <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> メソッドをオーバーライドする方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="c060f-195">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="c060f-196">`MyNativeWindow` クラスは、<xref:System.Windows.Forms.CreateParams.ClassName%2A> が `BUTTON`に設定された新しいウィンドウを作成します。</span><span class="sxs-lookup"><span data-stu-id="c060f-196">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="c060f-197">これにより、Win32 ボタンウィンドウが作成されます。</span><span class="sxs-lookup"><span data-stu-id="c060f-197">This creates a Win32 button window.</span></span> <span data-ttu-id="c060f-198">ボタンの位置とサイズは、追加のウィンドウスタイルを指定することによって設定されます。</span><span class="sxs-lookup"><span data-stu-id="c060f-198">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="c060f-199">クラスは、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> メソッドを使用し、<xref:System.Windows.Forms.NativeWindow.WndProc%2A> メソッドをオーバーライドして、受信したウィンドウメッセージをインターセプトする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="c060f-199">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="c060f-200">この例では WM_ACTIVATEAPP メッセージを検索しますが、実際のプログラムでは、作成された型に固有のウィンドウメッセージを置き換えることができます。</span><span class="sxs-lookup"><span data-stu-id="c060f-200">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
 <span data-ttu-id="c060f-201">このコードは、<xref:System.Windows.Forms.NativeWindow> クラスの概要に示されている例の抜粋です。</span><span class="sxs-lookup"><span data-stu-id="c060f-201">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="c060f-202">簡潔にするために、一部のコードは表示されません。</span><span class="sxs-lookup"><span data-stu-id="c060f-202">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="c060f-203">コードリスト全体については、「<xref:System.Windows.Forms.NativeWindow>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c060f-203">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c060f-204">コントロールの種類によっては、ウィンドウではなくウィンドウの親にウィンドウメッセージが送信されます。</span><span class="sxs-lookup"><span data-stu-id="c060f-204">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="c060f-205">詳細については、Windows プラットフォーム SDK を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c060f-205">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="c060f-206">ウィンドウハンドルに加えられた変更を追跡するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="c060f-206">Override this method to track changes that are made to the window handle.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="c060f-207">未処理のスレッド例外を指定する <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="c060f-207">An <see cref="T:System.Exception" /> that specifies the unhandled thread exception.</span></span></param>
        <summary><span data-ttu-id="c060f-208">派生クラスでオーバーライドされた場合、未処理のスレッド例外を管理します。</span><span class="sxs-lookup"><span data-stu-id="c060f-208">When overridden in a derived class, manages an unhandled thread exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c060f-209">通常、<xref:System.Windows.Forms.Application.OnThreadException%2A> はスレッド例外を処理します。</span><span class="sxs-lookup"><span data-stu-id="c060f-209">Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c060f-210">ウィンドウに関連付けられているハンドルを解放します。</span><span class="sxs-lookup"><span data-stu-id="c060f-210">Releases the handle associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c060f-211">このメソッドは、ウィンドウハンドルを破棄しません。</span><span class="sxs-lookup"><span data-stu-id="c060f-211">This method does not destroy the window handle.</span></span> <span data-ttu-id="c060f-212">代わりに、ハンドルのウィンドウプロシージャを既定のウィンドウプロシージャに設定します。</span><span class="sxs-lookup"><span data-stu-id="c060f-212">Instead, it sets the handle's window procedure to the default window procedure.</span></span> <span data-ttu-id="c060f-213"><xref:System.Windows.Forms.NativeWindow.Handle%2A> プロパティを0に設定し、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> を呼び出して変更を反映します。</span><span class="sxs-lookup"><span data-stu-id="c060f-213">It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.</span></span>  
  
 <span data-ttu-id="c060f-214">ウィンドウは、Windows がハンドルを破棄したことを示すネイティブの Win32 WM_NCDESTROY メッセージを受信すると、このメソッドを自動的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c060f-214">A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c060f-215">次のコード例は、ウィンドウプロシージャでオペレーティングシステムウィンドウメッセージを傍受する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c060f-215">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="c060f-216">この例では、<xref:System.Windows.Forms.NativeWindow> を継承するクラスを作成してこれを実現します。</span><span class="sxs-lookup"><span data-stu-id="c060f-216">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="c060f-217">`MyNativeWindowListener` クラスは、コンストラクターに渡されるフォームのウィンドウプロシージャにフックし、<xref:System.Windows.Forms.NativeWindow.WndProc%2A> メソッドをオーバーライドして `WM_ACTIVATEAPP` ウィンドウメッセージをインターセプトします。</span><span class="sxs-lookup"><span data-stu-id="c060f-217">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="c060f-218">クラスは、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> および <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> メソッドを使用して <xref:System.Windows.Forms.NativeWindow> が使用するウィンドウハンドルを識別する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="c060f-218">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="c060f-219">ハンドルは、<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> イベントと <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> イベントに基づいて割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="c060f-219">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="c060f-220">`WM_ACTIVATEAPP` ウィンドウメッセージを受信すると、クラスは `form1.ApplicationActivated` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c060f-220">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="c060f-221">このコードは、<xref:System.Windows.Forms.NativeWindow> クラスの概要に示されている例の抜粋です。</span><span class="sxs-lookup"><span data-stu-id="c060f-221">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="c060f-222">簡潔にするために、一部のコードは表示されません。</span><span class="sxs-lookup"><span data-stu-id="c060f-222">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="c060f-223">コードリスト全体については、「<xref:System.Windows.Forms.NativeWindow>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c060f-223">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc : Message -&gt; unit&#xA;override this.WndProc : Message -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="c060f-224">現在の Windows メッセージに関連付けられている <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="c060f-224">A <see cref="T:System.Windows.Forms.Message" /> that is associated with the current Windows message.</span></span></param>
        <summary><span data-ttu-id="c060f-225">ウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c060f-225">Invokes the default window procedure associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c060f-226">このメソッドは、ウィンドウのハンドルにウィンドウメッセージが送信されるときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c060f-226">This method is called when a window message is sent to the handle of the window.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c060f-227">次のコード例は、ウィンドウプロシージャでオペレーティングシステムウィンドウメッセージを傍受する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c060f-227">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="c060f-228">この例では、<xref:System.Windows.Forms.NativeWindow> を継承するクラスを作成してこれを実現します。</span><span class="sxs-lookup"><span data-stu-id="c060f-228">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="c060f-229">`MyNativeWindowListener` クラスは、コンストラクターに渡されるフォームのウィンドウプロシージャにフックし、<xref:System.Windows.Forms.NativeWindow.WndProc%2A> メソッドをオーバーライドして `WM_ACTIVATEAPP` ウィンドウメッセージをインターセプトします。</span><span class="sxs-lookup"><span data-stu-id="c060f-229">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="c060f-230">クラスは、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> および <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> メソッドを使用して <xref:System.Windows.Forms.NativeWindow> が使用するウィンドウハンドルを識別する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="c060f-230">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="c060f-231">ハンドルは、<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> イベントと <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> イベントに基づいて割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="c060f-231">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="c060f-232">`WM_ACTIVATEAPP` ウィンドウメッセージを受信すると、クラスは `form1.ApplicationActivated` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c060f-232">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="c060f-233">このコードは、<xref:System.Windows.Forms.NativeWindow> クラスの概要に示されている例の抜粋です。</span><span class="sxs-lookup"><span data-stu-id="c060f-233">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="c060f-234">簡潔にするために、一部のコードは表示されません。</span><span class="sxs-lookup"><span data-stu-id="c060f-234">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="c060f-235">コードリスト全体については、「<xref:System.Windows.Forms.NativeWindow>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c060f-235">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="c060f-236">特定のメッセージ処理を実装するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="c060f-236">Override this method to implement specific message processing.</span></span> <span data-ttu-id="c060f-237"><c>Base を呼び出します。</c>処理されないメッセージの WndProc。</span><span class="sxs-lookup"><span data-stu-id="c060f-237">Call <c>base.WndProc</c> for unhandled messages.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>
