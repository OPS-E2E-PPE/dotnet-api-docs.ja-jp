<Type Name="ContextMenu" FullName="System.Windows.Forms.ContextMenu">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d9928c568d4f1646bd7329ad13d7d1a18d9ff559" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77245748" /></Metadata><TypeSignature Language="C#" Value="public class ContextMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContextMenu extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ContextMenu" />
  <TypeSignature Language="VB.NET" Value="Public Class ContextMenu&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContextMenu : System::Windows::Forms::Menu" />
  <TypeSignature Language="F#" Value="type ContextMenu = class&#xA;    inherit Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Popup")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ショートカット メニューを表します。 <see cref="T:System.Windows.Forms.ContextMenuStrip" /> コントロールは、以前のバージョンの <see cref="T:System.Windows.Forms.ContextMenu" /> コントロールに代わると共に追加の機能を提供します。ただし、<see cref="T:System.Windows.Forms.ContextMenu" /> コントロールは、下位互換性を保つ目的および将来使用する目的で保持されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ContextMenu> クラスは、ユーザーがコントロールまたはフォームの領域上でマウスの右ボタンをクリックしたときに表示できるショートカットメニューを表します。 ショートカットメニューは、通常、ユーザーがアプリケーションのコンテキストを指定した場合に役立つ、フォームの <xref:System.Windows.Forms.MainMenu> から異なるメニュー項目を結合するために使用されます。 たとえば、<xref:System.Windows.Forms.TextBox> コントロールに割り当てられたショートカットメニューを使用して、テキストのフォントの変更、コントロール内のテキストの検索、テキストのコピーと貼り付けを行うためのクリップボード機能などのメニュー項目を提供できます。 <xref:System.Windows.Forms.MainMenu> 内に配置されていないショートカットメニューに新しい <xref:System.Windows.Forms.MenuItem> オブジェクトを表示して、<xref:System.Windows.Forms.MainMenu> を表示するのに適していない状況固有のコマンドを提供することもできます。  
  
 通常、ユーザーがコントロールまたはフォーム自体でマウスの右ボタンをクリックすると、ショートカットメニューが表示されます。 表示されるコントロールと <xref:System.Windows.Forms.Form> には、ショートカットメニューを表示するコントロールに <xref:System.Windows.Forms.ContextMenu> クラスをバインドする <xref:System.Windows.Forms.Control.ContextMenu%2A> プロパティがあります。 複数のコントロールで <xref:System.Windows.Forms.ContextMenu>を使用できます。 <xref:System.Windows.Forms.ContextMenu.SourceControl%2A> プロパティを使用すると、コントロールに固有のタスクを実行したり、コントロールに表示されるショートカットメニューを変更したりするために、どのコントロールが最後にショートカットメニューを表示したかを判断できます。  
  
 メニューがユーザーに表示される前に、チェックマークを設定したり、項目を無効にしたり、その他のメニュータスクを実行したりするために、ショートカットメニューがいつ表示されるかを確認したい場合があります。 <xref:System.Windows.Forms.ContextMenu.Popup> イベントを処理して、ショートカットメニューが表示されていることを確認できます。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ContextMenu>で使用するために <xref:System.Windows.Forms.MainMenu> に表示されている <xref:System.Windows.Forms.MenuItem> オブジェクトを再利用するには、<xref:System.Windows.Forms.MenuItem> クラスの <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> メソッドを使用して、メニューのコピーを作成する必要があります。 また、<xref:System.Windows.Forms.MenuItem> クラスの <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> メソッドを使用して、メニュー項目とサブメニュー項目を1つの <xref:System.Windows.Forms.MenuItem> オブジェクトにマージすることもできます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.ContextMenu>の <xref:System.Windows.Forms.ContextMenu.Popup> イベントのイベントハンドラーを作成します。 イベントハンドラーのコードでは、<xref:System.Windows.Forms.PictureBox> `pictureBox1` 名前付きの2つのコントロール <xref:System.Windows.Forms.TextBox> と `textBox1` という名前のコントロールのどちらがショートカットメニューを表示するかを決定します。 <xref:System.Windows.Forms.ContextMenu> がそのショートカットメニューを表示する原因となったコントロールに応じて、コントロールは適切な <xref:System.Windows.Forms.MenuItem> オブジェクトを <xref:System.Windows.Forms.ContextMenu>に追加します。 この例では、`contextMenu1`という名前の <xref:System.Windows.Forms.ContextMenu> クラスのインスタンスがフォーム内で定義されている必要があります。 また、この例では、<xref:System.Windows.Forms.TextBox> と <xref:System.Windows.Forms.PictureBox> をフォームに追加し、これらのコントロールの <xref:System.Windows.Forms.Control.ContextMenu%2A> プロパティを `contextMenu1`に設定する必要があります。  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Menu" />
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="T:System.Windows.Forms.MainMenu" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ContextMenu" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContextMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContextMenu();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>メニュー項目を指定せずに、<see cref="T:System.Windows.Forms.ContextMenu" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このバージョンのコンストラクターを使用した後、<xref:System.Windows.Forms.Menu.MenuItemCollection> クラスの <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> メソッドを使用して、メニュー項目を <xref:System.Windows.Forms.ContextMenu> に追加できます。 <xref:System.Windows.Forms.Menu.MenuItemCollection> には、<xref:System.Windows.Forms.Menu.MenuItems%2A> プロパティを使用してアクセスできます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Menu.MenuItemCollection" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContextMenu (System.Windows.Forms.MenuItem[] menuItems);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] menuItems) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (menuItems As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContextMenu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ menuItems);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ContextMenu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.ContextMenu" Usage="new System.Windows.Forms.ContextMenu menuItems" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="menuItems" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="menuItems">ショートカット メニューに追加するメニュー項目を表す <see cref="T:System.Windows.Forms.MenuItem" /> オブジェクトの配列。</param>
        <summary>一連の <see cref="T:System.Windows.Forms.ContextMenu" /> オブジェクトを指定して、<see cref="T:System.Windows.Forms.MenuItem" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このバージョンのコンストラクターを使用して、作成時にメニュー項目を指定した <xref:System.Windows.Forms.ContextMenu> を作成できます。 このバージョンのコンストラクターを使用した後、<xref:System.Windows.Forms.Menu.MenuItemCollection> クラスの <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> メソッドを使用して、<xref:System.Windows.Forms.ContextMenu> に追加のメニュー項目を追加できます。 <xref:System.Windows.Forms.Menu.MenuItemCollection> には、<xref:System.Windows.Forms.Menu.MenuItems%2A> プロパティを使用してアクセスできます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Windows.Forms.ContextMenu.Show%2A> メソッドを使用して、ショートカットメニューを構築する方法を示しています。 この例を実行するには、Button1 という名前のボタンを含むフォームに次のコードを貼り付けます。 すべてのイベントがイベント処理メソッドに関連付けられていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ContextMenu.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Collapse As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Collapse;" />
      <MemberSignature Language="F#" Value="member this.Collapse : EventHandler " Usage="member this.Collapse : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ショートカット メニューが折りたたまれたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーは、<xref:System.Windows.Forms.ContextMenu.Collapse> イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。  
  
 コード例を実行するには、`ContextMenu1`という <xref:System.Windows.Forms.ContextMenu> 型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが <xref:System.Windows.Forms.ContextMenu.Collapse> イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#170](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#170)]
 [!code-vb[System.Windows.Forms.EventExamples#170](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.OnCollapse(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCollapse (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCollapse(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCollapse : EventArgs -&gt; unit&#xA;override this.OnCollapse : EventArgs -&gt; unit" Usage="contextMenu.OnCollapse e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ContextMenu.Collapse" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPopup">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.OnPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPopup(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPopup : EventArgs -&gt; unit&#xA;override this.OnPopup : EventArgs -&gt; unit" Usage="contextMenu.OnPopup e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ContextMenu.Popup" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Popup">
      <MemberSignature Language="C#" Value="public event EventHandler Popup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Popup" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ContextMenu.Popup" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Popup As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Popup;" />
      <MemberSignature Language="F#" Value="member this.Popup : EventHandler " Usage="member this.Popup : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ショートカット メニューが表示される前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントを使用して、<xref:System.Windows.Forms.MenuItem> オブジェクトを表示する前に初期化できます。 たとえば、3つの <xref:System.Windows.Forms.TextBox> コントロールに <xref:System.Windows.Forms.ContextMenu> を使用し、ショートカットメニューを表示している <xref:System.Windows.Forms.TextBox> に応じて <xref:System.Windows.Forms.ContextMenu> 内の特定のメニュー項目を無効にする場合は、このイベントのイベントハンドラーを作成できます。 <xref:System.Windows.Forms.ContextMenu.SourceControl%2A> プロパティを使用して、どの <xref:System.Windows.Forms.TextBox> が <xref:System.Windows.Forms.ContextMenu> を表示し、適切な <xref:System.Windows.Forms.MenuItem> オブジェクトを無効にするかを指定できます。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.ContextMenu>の <xref:System.Windows.Forms.ContextMenu.Popup> イベントのイベントハンドラーを作成します。 イベントハンドラーのコードでは、<xref:System.Windows.Forms.PictureBox> `pictureBox1` 名前付きの2つのコントロール <xref:System.Windows.Forms.TextBox> と `textBox1` という名前のコントロールのどちらがショートカットメニューを表示するかを決定します。 <xref:System.Windows.Forms.ContextMenu> がそのショートカットメニューを表示する原因となったコントロールに応じて、コントロールは適切な <xref:System.Windows.Forms.MenuItem> オブジェクトを <xref:System.Windows.Forms.ContextMenu>に追加します。 この例では、`contextMenu1`という名前の <xref:System.Windows.Forms.ContextMenu> クラスのインスタンスがフォーム内で定義されている必要があります。 また、この例では、<xref:System.Windows.Forms.TextBox> と <xref:System.Windows.Forms.PictureBox> をフォームに追加し、これらのコントロールの <xref:System.Windows.Forms.Control.ContextMenu%2A> プロパティを `contextMenu1`に設定する必要があります。  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData, System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData, class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys,System.Windows.Forms.Control)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData, System::Windows::Forms::Control ^ control);" />
      <MemberSignature Language="F#" Value="override this.ProcessCmdKey : Message * System.Windows.Forms.Keys * System.Windows.Forms.Control -&gt; bool" Usage="contextMenu.ProcessCmdKey (msg, keyData, control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="control" Type="System.Windows.Forms.Control" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="msg">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</param>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値の 1 つ。</param>
        <param name="control">コマンド キーの適用先のコントロール。</param>
        <summary>コマンド キーを処理します。</summary>
        <returns>文字がコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、コマンドキーを処理するために、メッセージの前処理中に呼び出されます。 コマンドキーは、通常の入力キーより常に優先されるキーです。 コマンドキーの例としては、アクセラレータやメニューのショートカットがあります。 メソッドは、コマンドキーを処理したことを示すために `true` を返すか、キーがコマンドキーでないことを示すために `false` する必要があります。 このメソッドは、コントロールが Windows フォームアプリケーションまたは ActiveX コントロールとしてホストされている場合にのみ呼び出されます。  
  
 <xref:System.Windows.Forms.ContextMenu.ProcessCmdKey%2A> メソッドは、まずコントロールに <xref:System.Windows.Forms.ContextMenu>があるかどうかを判断し、その場合は <xref:System.Windows.Forms.ContextMenu> がコマンドキーを処理できるようにします。 コマンドキーがメニューショートカットではなく、コントロールに親がある場合、キーは親の <xref:System.Windows.Forms.ContextMenu.ProcessCmdKey%2A> メソッドに渡されます。 実質的な効果として、コマンドキーは制御階層に "バブル" されます。 キーデータは、ユーザーが押したキーに加えて、キーと同時に押された修飾子キーがあるかどうかも示します。 修飾キーには、SHIFT、CTRL、ALT の各キーが含まれます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスの <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> メソッドをオーバーライドする場合、コントロールは <see langword="true" /> を返して、キーが処理されたことを示す必要があります。 コントロールによって処理されないキーの場合は、基本クラスの <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> メソッドを呼び出した結果が返されます。 コントロールは、このメソッドをオーバーライドする必要はほとんどありません。</para></block>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContextMenu.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.ContextMenu.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがテキストを右から左に表示するかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.RightToLeft" /> 値のいずれか 1 つです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用すると、右から左に記述された言語をメニューでサポートできます。 このプロパティが `RightToLeft.Yes`に設定されている場合は、既定の左から右へのメソッドの代わりに、メニュー項目のテキストが右から左に表示されます。  
  
> [!NOTE]
>  右から左への配置を有効にして Windows フォームコントロールに影響を与える方法の詳細については、<xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティを参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">プロパティに割り当てられた値が <see cref="T:System.Windows.Forms.RightToLeft" /> 列挙体の有効なメンバーではありません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Show">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した位置にショートカット メニューを表示します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (System.Windows.Forms.Control control, System.Drawing.Point pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class System.Windows.Forms.Control control, valuetype System.Drawing.Point pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show(System::Windows::Forms::Control ^ control, System::Drawing::Point pos);" />
      <MemberSignature Language="F#" Value="member this.Show : System.Windows.Forms.Control * System.Drawing.Point -&gt; unit" Usage="contextMenu.Show (control, pos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="pos" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="control">ショートカット メニューが関連付けられたコントロールを指定する <see cref="T:System.Windows.Forms.Control" />。</param>
        <param name="pos">メニューを表示する座標を指定する <see cref="T:System.Drawing.Point" />。 座標は、<paramref name="control" /> パラメーターで指定したコントロールのクライアント座標に対して相対的に指定されます。</param>
        <summary>指定した位置にショートカット メニューを表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、<xref:System.Windows.Forms.ContextMenu> は、<xref:System.Windows.Forms.ContextMenu> がバインドされているコントロールまたはフォームの領域でマウスの右ボタンをクリックすると表示されます。 このメソッドを使用すると、特定の場所でショートカットメニューを手動で表示し、特定のコントロールにバインドすることができます。 このメソッドは、メニューが閉じられるまでは戻りません。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Windows.Forms.ContextMenu.Show%2A> メソッドを使用して、ショートカットメニューを構築する方法を示しています。 この例を実行するには、Button1 という名前のボタンを含むフォームに次のコードを貼り付けます。 すべてのイベントがイベント処理メソッドに関連付けられていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">コントロールのハンドルが存在しないか、コントロールが表示されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (System.Windows.Forms.Control control, System.Drawing.Point pos, System.Windows.Forms.LeftRightAlignment alignment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class System.Windows.Forms.Control control, valuetype System.Drawing.Point pos, valuetype System.Windows.Forms.LeftRightAlignment alignment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.LeftRightAlignment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show(System::Windows::Forms::Control ^ control, System::Drawing::Point pos, System::Windows::Forms::LeftRightAlignment alignment);" />
      <MemberSignature Language="F#" Value="member this.Show : System.Windows.Forms.Control * System.Drawing.Point * System.Windows.Forms.LeftRightAlignment -&gt; unit" Usage="contextMenu.Show (control, pos, alignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="pos" Type="System.Drawing.Point" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="alignment" Type="System.Windows.Forms.LeftRightAlignment" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="control">ショートカット メニューが関連付けられたコントロールを指定する <see cref="T:System.Windows.Forms.Control" />。</param>
        <param name="pos">メニューを表示する座標を指定する <see cref="T:System.Drawing.Point" />。 座標は、<paramref name="control" /> パラメーターで指定したコントロールのクライアント座標に対して相対的に指定されます。</param>
        <param name="alignment">コントロールの配置を <see cref="T:System.Windows.Forms.LeftRightAlignment" /> パラメーターを基準に相対的に指定する <paramref name="pos" />。</param>
        <summary>位置および配置を指定してショートカット メニューを表示します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control SourceControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control SourceControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContextMenu.SourceControl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ SourceControl { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SourceControl : System.Windows.Forms.Control" Usage="System.Windows.Forms.ContextMenu.SourceControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ショートカット メニューを表示しているコントロールを取得します。</summary>
        <value>ショートカット メニューを表示しているコントロールを表す <see cref="T:System.Windows.Forms.Control" />。 ショートカット メニューを表示しているコントロールがない場合、このプロパティは <see langword="null" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用すると、<xref:System.Windows.Forms.ContextMenu>で定義されているショートカットメニューを現在どのコントロールに表示するかを指定できます。 ショートカットメニューが現在表示されていない場合は、このプロパティを使用して、最後にショートカットメニューに表示されたコントロールを確認できます。 このプロパティを <xref:System.Windows.Forms.ContextMenu.Popup> イベントで使用して、コントロールに適切なメニュー項目が表示されるようにすることができます。 このプロパティを使用して、ショートカットメニューに表示されるメニューコマンドに関連付けられたタスクを実行するメソッドに、コントロールへの参照を渡すこともできます。 <xref:System.Windows.Forms.Form> クラスは <xref:System.Windows.Forms.Control>から継承するため、<xref:System.Windows.Forms.ContextMenu> がフォームに関連付けられている場合は、このプロパティを使用することもできます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.ContextMenu>の <xref:System.Windows.Forms.ContextMenu.Popup> イベントのイベントハンドラーを作成します。 イベントハンドラーのコードでは、<xref:System.Windows.Forms.PictureBox> `pictureBox1` 名前付きの2つのコントロール <xref:System.Windows.Forms.TextBox> と `textBox1` という名前のコントロールのどちらがショートカットメニューを表示するかを決定します。 <xref:System.Windows.Forms.ContextMenu> がそのショートカットメニューを表示する原因となったコントロールに応じて、コントロールは適切な <xref:System.Windows.Forms.MenuItem> オブジェクトを <xref:System.Windows.Forms.ContextMenu>に追加します。 この例では、`contextMenu1`という名前の <xref:System.Windows.Forms.ContextMenu> クラスのインスタンスがフォーム内で定義されている必要があります。 また、この例では、<xref:System.Windows.Forms.TextBox> と <xref:System.Windows.Forms.PictureBox> をフォームに追加し、これらのコントロールの <xref:System.Windows.Forms.Control.ContextMenu%2A> プロパティを `contextMenu1`に設定する必要があります。  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
