<Type Name="RichTextBox" FullName="System.Windows.Forms.RichTextBox">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7553b30e10d6fedda1bd467d861d4bd09ff822f0" /><Meta Name="ms.sourcegitcommit" Value="7bf087b9509f080e7a73672bb84fa0bec74bf944" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="01/14/2020" /><Meta Name="ms.locfileid" Value="75939173" /></Metadata><TypeSignature Language="C#" Value="public class RichTextBox : System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RichTextBox extends System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.RichTextBox" />
  <TypeSignature Language="VB.NET" Value="Public Class RichTextBox&#xA;Inherits TextBoxBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RichTextBox : System::Windows::Forms::TextBoxBase" />
  <TypeSignature Language="F#" Value="type RichTextBox = class&#xA;    inherit TextBoxBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.TextBoxBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.RichTextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.RichTextBoxDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Windows リッチ テキスト ボックス コントロールを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.RichTextBox> コントロールを使用すると、ユーザーはテキストを入力して編集できます。 コントロールには、標準の <xref:System.Windows.Forms.TextBox> コントロールよりも高度な書式設定機能も用意されています。 テキストはコントロールに直接割り当てることも、リッチテキスト形式 (RTF) またはプレーンテキストファイルから読み込むこともできます。 コントロール内のテキストには、文字や段落の書式を割り当てることができます。  
  
 <xref:System.Windows.Forms.RichTextBox> コントロールには、コントロール内のテキストの任意の部分に書式を適用するために使用できるいくつかのプロパティが用意されています。 テキストの書式を変更するには、まずテキストを選択する必要があります。 選択したテキストには、文字および段落書式を割り当てることができます。 選択したテキストセクションに対して設定が行われると、設定の変更が行われるか、またはコントロールのドキュメントの別のセクションが選択されるまで、選択範囲の後に入力されたすべてのテキストも同じ設定で書式設定されます。 <xref:System.Windows.Forms.RichTextBox.SelectionFont%2A> プロパティを使用すると、テキストを太字または斜体にすることができます。 このプロパティを使用して、テキストのサイズとタイプフェイスを変更することもできます。 <xref:System.Windows.Forms.RichTextBox.SelectionColor%2A> プロパティを使用すると、テキストの色を変更できます。 箇条書きリストを作成するには、<xref:System.Windows.Forms.RichTextBox.SelectionBullet%2A> プロパティを使用します。 <xref:System.Windows.Forms.RichTextBox.SelectionIndent%2A>、<xref:System.Windows.Forms.RichTextBox.SelectionRightIndent%2A>、および <xref:System.Windows.Forms.RichTextBox.SelectionHangingIndent%2A> の各プロパティを設定して段落の書式を調整することもできます。  
  
 <xref:System.Windows.Forms.RichTextBox> コントロールには、ファイルを開いたり保存したりするための機能を提供するメソッドが用意されています。 <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドを使用すると、既存の RTF または ASCII テキストファイルをコントロールに読み込むことができます。 既に開いているデータストリームからデータを読み込むこともできます。 <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> を使用すると、ファイルを RTF または ASCII テキストに保存できます。 <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドと同様に、<xref:System.Windows.Forms.RichTextBox.SaveFile%2A> メソッドを使用して、開いているデータストリームに保存することもできます。 <xref:System.Windows.Forms.RichTextBox> コントロールには、テキストの文字列を検索するための機能も用意されています。 <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドは、テキストの両方の文字列と、コントロールのテキスト内の特定の文字を検索するためにオーバーロードされます。  
  
 メモリに格納されているデータに対して <xref:System.Windows.Forms.RichTextBox> コントロールを初期化することもできます。 たとえば、テキストの書式設定方法を決定する RTF コードを含め、<xref:System.Windows.Forms.RichTextBox.Rtf%2A> プロパティを、表示するテキストを含む文字列に初期化できます。  
  
 コントロール内のテキストにリンク (Web サイトへのリンクなど) が含まれている場合は、<xref:System.Windows.Forms.RichTextBox.DetectUrls%2A> プロパティを使用して、コントロールのテキストに適切にリンクを表示できます。 その後、<xref:System.Windows.Forms.RichTextBox.LinkClicked> イベントを処理して、リンクに関連付けられているタスクを実行できます。 <xref:System.Windows.Forms.RichTextBox.SelectionProtected%2A> プロパティを使用すると、コントロール内のテキストをユーザーが操作できないように保護できます。 コントロールで保護されたテキストを使用すると、<xref:System.Windows.Forms.RichTextBox.Protected> イベントを処理して、ユーザーが保護されたテキストを変更しようとしたことを確認し、テキストが保護されていることをユーザーに警告するか、保護されたテキストを操作するための標準的な方法をユーザーに提供することができます。  
  
 <xref:System.Windows.Forms.TextBox> コントロールを既に使用しているアプリケーションは、<xref:System.Windows.Forms.RichTextBox> コントロールを使用するように簡単に調整できます。 ただし、<xref:System.Windows.Forms.RichTextBox> コントロールには、<xref:System.Windows.Forms.TextBox> コントロールと同じ64K 文字の容量制限がありません。 <xref:System.Windows.Forms.RichTextBox> は、通常、Microsoft Word などのワードプロセッシングアプリケーションに似たテキスト操作と表示機能を提供するために使用されます。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.TextBoxBase.Undo%2A?displayProperty=nameWithType> メソッドは、<xref:System.Windows.Forms.Control.KeyPress> または <xref:System.Windows.Forms.Control.TextChanged> イベントでは機能しません。  
  
   
  
## Examples  
 次のコード例では、RTF ファイルをコントロールに読み込み、"Text" という単語の最初のインスタンスを検索する <xref:System.Windows.Forms.RichTextBox> コントロールを作成します。 次に、選択したテキストのフォントスタイル、フォントサイズ、およびフォントの色を変更し、元のファイルに変更を保存します。 このコード例は、<xref:System.Windows.Forms.Form>にコントロールを追加することで終了します。 この例では、コード例で作成したメソッドを <xref:System.Windows.Forms.Form> クラスに追加し、フォームのコンストラクターから呼び出す必要があります。 また、この例では、C ドライブのルートに RTF ファイルを作成し、"Text" という単語を含むようにする必要もあります。  
  
 [!code-cpp[Classic RichTextBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.TextBoxBase" />
    <altmember cref="T:System.Windows.Forms.TextBox" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RichTextBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RichTextBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、コントロールの <xref:System.Windows.Forms.TextBoxBase.Multiline%2A> プロパティは `true`に設定されます。  
  
   
  
## Examples  
 次のコード例では、RTF ファイルをコントロールに読み込み、"Text" という単語の最初のインスタンスを検索する <xref:System.Windows.Forms.RichTextBox> コントロールを作成します。 次に、選択したテキストのフォントスタイル、フォントサイズ、およびフォントの色を変更し、元のファイルに変更を保存します。 このコード例は、<xref:System.Windows.Forms.Form>にコントロールを追加することで終了します。 この例では、コード例で作成したメソッドを <xref:System.Windows.Forms.Form> クラスに追加し、フォームのコンストラクターから呼び出す必要があります。 また、この例では、C ドライブのルートに RTF ファイルを作成し、"Text" という単語を含むようにする必要もあります。  
  
 [!code-cpp[Classic RichTextBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public override bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.Forms.RichTextBox.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールでドラッグ アンド ドロップ操作を実行できるかどうかを示す値を取得または設定します。</summary>
        <value>コントロールでドラッグ アンド ドロップを実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、<xref:System.Windows.Forms.RichTextBox> コントロールにドロップする項目を含む <xref:System.Windows.Forms.ListBox> コントロールを使用してドラッグアンドドロップ操作を実行する方法を示しています。 フォームのコンストラクターは、<xref:System.Windows.Forms.RichTextBox.AllowDrop%2A> プロパティを `true` に設定して、<xref:System.Windows.Forms.RichTextBox>でドラッグアンドドロップ操作を実行できるようにします。 この例では、<xref:System.Windows.Forms.ListBox> の <xref:System.Windows.Forms.Control.MouseDown> イベントを使用して、<xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドを呼び出すことによってドラッグ操作を開始します。 この例では、<xref:System.Windows.Forms.Control.DragEnter> イベントを使用して、<xref:System.Windows.Forms.RichTextBox> にドラッグされている項目が有効なデータ型であるかどうかを判断します。 <xref:System.Windows.Forms.Control.DragDrop> イベントは、<xref:System.Windows.Forms.RichTextBox>内の現在のカーソル位置にある <xref:System.Windows.Forms.RichTextBox> コントロールに、ドラッグされた項目の実際の削除を実行します。 この例では、<xref:System.Windows.Forms.Control.DragDrop> イベントと <xref:System.Windows.Forms.Control.DragEnter> イベントが、この例で定義されているイベントハンドラーに接続されている必要があります。  
  
 [!code-cpp[RichTextBox.AllowDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSize">
      <MemberSignature Language="C#" Value="public override bool AutoSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.AutoSize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property AutoSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AutoSize { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSize : bool with get, set" Usage="System.Windows.Forms.RichTextBox.AutoSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このプロパティは使用されません。</summary>
        <value>有効である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoWordSelection">
      <MemberSignature Language="C#" Value="public bool AutoWordSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoWordSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.AutoWordSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoWordSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoWordSelection { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoWordSelection : bool with get, set" Usage="System.Windows.Forms.RichTextBox.AutoWordSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>単語の自動選択を有効にするかどうかを示す値を取得または設定します。</summary>
        <value>単語の自動選択が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティが `true`に設定されている場合は、コントロール内のテキストの任意の部分を選択すると、単語全体が選択されます。  
  
   
  
## Examples  
 次のコード例は、テキストを拡大し、word がダブルクリックされたときにコントロールのテキスト内の単語を自動的に選択し、コントロールのクライアント領域の右側に余白を設定する <xref:System.Windows.Forms.RichTextBox> を作成する方法を示しています。 <xref:System.Windows.Forms.RichTextBox> コントロールの幅が小さい場合、このコードを使用すると、テキストの各文字がそれぞれの行に表示される <xref:System.Windows.Forms.RichTextBox> が作成されます。 この垂直方向の表示位置では、単語の任意の部分をクリックすると、テキストが垂直方向に表示されるという事実に関係なく、単語のすべての文字が選択されます。 この例では、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールを含むフォームが必要です。  
  
 [!code-cpp[RichTextBox.ZoomFactor#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.ZoomFactor#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CS/form1.cs#1)]
 [!code-vb[RichTextBox.ZoomFactor#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.ZoomFactor/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.BackgroundImage" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Image ^ BackgroundImage { System::Drawing::Image ^ get(); void set(System::Drawing::Image ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImage : System.Drawing.Image with get, set" Usage="System.Windows.Forms.RichTextBox.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このプロパティは使用されません。</summary>
        <value>コントロールに表示される背景イメージ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.BackgroundImageChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageChanged : EventHandler " Usage="member this.BackgroundImageChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Forms.RichTextBox.BackgroundImage" /> プロパティの値が変化したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayout : System.Windows.Forms.ImageLayout with get, set" Usage="System.Windows.Forms.RichTextBox.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このプロパティは使用されません。</summary>
        <value>コントロールに表示される背景イメージのレイアウト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayoutChanged : EventHandler " Usage="member this.BackgroundImageLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Forms.RichTextBox.BackgroundImageLayout" /> プロパティの値が変化したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このイベントは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BulletIndent">
      <MemberSignature Language="C#" Value="public int BulletIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulletIndent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.BulletIndent" />
      <MemberSignature Language="VB.NET" Value="Public Property BulletIndent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulletIndent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BulletIndent : int with get, set" Usage="System.Windows.Forms.RichTextBox.BulletIndent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>箇条書きスタイルをテキストに適用する場合に、<see cref="T:System.Windows.Forms.RichTextBox" /> コントロール内で使用するインデント幅を取得または設定します。</summary>
        <value>行頭文字の後にインデント幅として挿入するピクセルの数。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 テキストの段落に箇条書きスタイルを適用するには、<xref:System.Windows.Forms.RichTextBox.SelectionBullet%2A> プロパティを `true` に設定してから、<xref:System.Windows.Forms.RichTextBox.BulletIndent%2A> プロパティを、テキストをインデントするピクセル数に設定します。 段落には、行頭文字の後に指定されたインデント幅が適用された箇条書きスタイルが適用されます。 このプロパティは、コントロールのテキスト内の現在の段落と、箇条書き項目の一覧で現在選択されている箇条書きにのみ影響します。 箇条書き項目のリスト全体に異なるインデントレベルを適用するには、<xref:System.Windows.Forms.RichTextBox.BulletIndent%2A> プロパティを設定する前に、箇条書き項目のすべてのテキストを選択する必要があります。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.RichTextBox.SelectionBullet%2A> プロパティを <xref:System.Windows.Forms.RichTextBox.BulletIndent%2A>、<xref:System.Windows.Forms.RichTextBox.SelectionFont%2A>、<xref:System.Windows.Forms.RichTextBox.SelectedText%2A>、および <xref:System.Windows.Forms.RichTextBox.SelectionColor%2A> の各プロパティと共に使用して、<xref:System.Windows.Forms.RichTextBox> コントロールに箇条書きリストを作成する方法を示します。 この例では、`richTextBox1` という名前の <xref:System.Windows.Forms.RichTextBox> コントロールがフォーム上に作成されている必要があります。  
  
 [!code-cpp[RichTextBox.BulletIndent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.BulletIndent/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.BulletIndent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.BulletIndent/CS/form1.cs#1)]
 [!code-vb[RichTextBox.BulletIndent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.BulletIndent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定したインデントが 0 未満でした。</exception>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionBullet" />
      </Docs>
    </Member>
    <Member MemberName="CanPaste">
      <MemberSignature Language="C#" Value="public bool CanPaste (System.Windows.Forms.DataFormats.Format clipFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanPaste(class System.Windows.Forms.DataFormats/Format clipFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.CanPaste(System.Windows.Forms.DataFormats.Format)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanPaste (clipFormat As DataFormats.Format) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanPaste(System::Windows::Forms::DataFormats::Format ^ clipFormat);" />
      <MemberSignature Language="F#" Value="member this.CanPaste : System.Windows.Forms.DataFormats.Format -&gt; bool" Usage="richTextBox.CanPaste clipFormat" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clipFormat" Type="System.Windows.Forms.DataFormats+Format" />
      </Parameters>
      <Docs>
        <param name="clipFormat"><see cref="T:System.Windows.Forms.DataFormats.Format" /> 値のいずれか 1 つ。</param>
        <summary>クリップボードの情報を指定したデータ形式で貼り付けできるかどうかを確認します。</summary>
        <returns>クリップボードのデータを指定したデータ形式で貼り付けできる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用すると、ユーザーが情報を <xref:System.Windows.Forms.RichTextBox> コントロールに貼り付ける前に、クリップボードの現在の内容が指定されたクリップボードデータ形式であるかどうかを判断できます。 たとえば、貼り付けコマンド <xref:System.Windows.Forms.MenuItem> の <xref:System.Windows.Forms.MenuItem.Popup> イベントのイベントハンドラーを作成し、このメソッドを使用して、クリップボードのデータの種類に基づいて貼り付け <xref:System.Windows.Forms.MenuItem> を有効にするかどうかを決定できます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Windows.Forms.RichTextBox.Paste%2A> メソッドを使用して、<xref:System.Windows.Forms.RichTextBox> コントロールにビットマップを貼り付ける方法を示しています。 ファイルからビットマップを開いた後、この例では、<xref:System.Windows.Forms.Clipboard.SetDataObject%2A> メソッドを使用して、ビットマップを Windows クリップボードにコピーします。 最後に、<xref:System.Drawing.Bitmap> オブジェクトの書式を取得し、<xref:System.Windows.Forms.RichTextBox.CanPaste%2A> メソッドを使用して書式を <xref:System.Windows.Forms.RichTextBox> コントロールに貼り付けることができることを確認してから、<xref:System.Windows.Forms.RichTextBox.Paste%2A> メソッドを使用してデータを貼り付けます。  
  
 [!code-cpp[RichText_Paste#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichText_Paste/CPP/form1.cpp#1)]
 [!code-csharp[RichText_Paste#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichText_Paste/CS/form1.cs#1)]
 [!code-vb[RichText_Paste#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichText_Paste/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.RichTextBox.Paste(System.Windows.Forms.DataFormats.Format)" />
        <altmember cref="T:System.Windows.Forms.DataFormats.Format" />
      </Docs>
    </Member>
    <Member MemberName="CanRedo">
      <MemberSignature Language="C#" Value="public bool CanRedo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRedo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.CanRedo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanRedo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanRedo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRedo : bool" Usage="System.Windows.Forms.RichTextBox.CanRedo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> 内で実行されたアクションのうち再適用できるアクションがあるかどうかを示す値を取得します。</summary>
        <value>元に戻された操作のうち、コントロールの内容に再適用できる操作がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用すると、<xref:System.Windows.Forms.RichTextBox> で元に戻された最後の操作を <xref:System.Windows.Forms.RichTextBox.Redo%2A> メソッドを使用して再適用できるかどうかを判断できます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.RichTextBox.CanRedo%2A> プロパティと <xref:System.Windows.Forms.RichTextBox.RedoActionName%2A> プロパティ、および <xref:System.Windows.Forms.RichTextBox.Redo%2A> メソッドを使用して、テキストの削除以外の任意のアクションに対してやり直し操作を制限する方法を示します。 この例では、<xref:System.Windows.Forms.RichTextBox> コントロールを含むフォームがあり、この例のコードが呼び出される前に、<xref:System.Windows.Forms.RichTextBox> 内の操作が実行され、元に戻されていることが必要です。  
  
 [!code-cpp[RichTextBox.RedoAction#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.RedoAction/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.RedoAction#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.RedoAction/CS/form1.cs#1)]
 [!code-vb[RichTextBox.RedoAction#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.RedoAction/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.RichTextBox.Redo" />
      </Docs>
    </Member>
    <Member MemberName="ContentsResized">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ContentsResizedEventHandler ContentsResized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ContentsResizedEventHandler ContentsResized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.ContentsResized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContentsResized As ContentsResizedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ContentsResizedEventHandler ^ ContentsResized;" />
      <MemberSignature Language="F#" Value="member this.ContentsResized : System.Windows.Forms.ContentsResizedEventHandler " Usage="member this.ContentsResized : System.Windows.Forms.ContentsResizedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContentsResizedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの内容のサイズが変更されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーは、<xref:System.Windows.Forms.RichTextBox.ContentsResized> イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。  
  
 コード例を実行するには、`RichTextBox1`という <xref:System.Windows.Forms.RichTextBox> 型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが <xref:System.Windows.Forms.RichTextBox.ContentsResized> イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#537](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#537)]
 [!code-vb[System.Windows.Forms.EventExamples#537](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#537)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ContentsResizedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.RichTextBox.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール ハンドルが作成されるときに必要な作成パラメーターを取得します。</summary>
        <value>コントロールを識別するハンドルを作成するときに必要な作成パラメーターを格納している <see cref="T:System.Windows.Forms.CreateParams" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRichEditOleCallback">
      <MemberSignature Language="C#" Value="protected virtual object CreateRichEditOleCallback ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object CreateRichEditOleCallback() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.CreateRichEditOleCallback" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateRichEditOleCallback () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ CreateRichEditOleCallback();" />
      <MemberSignature Language="F#" Value="abstract member CreateRichEditOleCallback : unit -&gt; obj&#xA;override this.CreateRichEditOleCallback : unit -&gt; obj" Usage="richTextBox.CreateRichEditOleCallback " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>RichEdit コールバック操作を処理するための、<see langword="IRichEditOleCallback" /> と互換性のあるオブジェクトを作成します。</summary>
        <returns><see langword="IRichEditOleCallback" /> インターフェイスを実装するオブジェクト。</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">直前の呼び出し元がアンマネージコードを呼び出す場合は。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides"><para>派生クラスでこのメソッドをオーバーライドして、基になるリッチエディット機能にアクセスできるようにすることができます。 このメソッドをオーバーライドすると、すべてのドラッグアンドドロップイベントが発生しません。 そのため、ドラッグアンドドロップ操作に対して独自のサポートを提供する必要があります。 <see langword="IRichEditOleCallback" /> インターフェイスの詳細については、https://msdn.microsoft.comのプラットフォーム SDK ドキュメントを参照してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSize : System.Drawing.Size" Usage="System.Windows.Forms.RichTextBox.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの既定のサイズを取得します。</summary>
        <value><see cref="T:System.Drawing.Size" /> 値。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.DefaultSize" />
      </Docs>
    </Member>
    <Member MemberName="DetectUrls">
      <MemberSignature Language="C#" Value="public bool DetectUrls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DetectUrls" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.DetectUrls" />
      <MemberSignature Language="VB.NET" Value="Public Property DetectUrls As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DetectUrls { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DetectUrls : bool with get, set" Usage="System.Windows.Forms.RichTextBox.DetectUrls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> コントロールに URL (Uniform Resource Locator) が入力される場合に、その URL の書式を自動的に設定するかどうかを示す値を取得または設定します。</summary>
        <value><see langword="true" /> コントロールに入力された URL を自動的にリンクとして書式設定する場合は <see cref="T:System.Windows.Forms.RichTextBox" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティが `true`に設定されている場合、URL として <xref:System.Windows.Forms.RichTextBox> によって決定されるコントロールに入力されたテキストは、リンクとして自動的に書式設定されます。 <xref:System.Windows.Forms.RichTextBox.LinkClicked> イベントのイベントハンドラーを作成して、コントロールでクリックされたすべてのリンクを処理することができます。 <xref:System.Windows.Forms.RichTextBox.LinkClicked> イベントのイベントハンドラーに提供される <xref:System.Windows.Forms.LinkClickedEventArgs> には、リンクを処理するためにコントロール内でクリックされたリンクを判別できるデータが用意されています。  
  
   
  
## Examples  
 次のコード例には、<xref:System.Windows.Forms.RichTextBox.LinkClicked> イベントのイベントハンドラーが含まれています。 イベントハンドラーは、<xref:System.Windows.Forms.RichTextBox> コントロールのドキュメント内のリンククリックを処理し、(<xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> メソッドを使用して) 既定のブラウザーのインスタンスを起動して、クリックされたリンクのページを表示します。 この例では、イベントハンドラーが <xref:System.Windows.Forms.RichTextBox>の <xref:System.Windows.Forms.RichTextBox.LinkClicked> イベントに接続されている必要があります。  
  
 [!code-cpp[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.RichTextBox.LinkClicked" />
        <altmember cref="T:System.Windows.Forms.LinkClickedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event EventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.DoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoubleClick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DoubleClick;" />
      <MemberSignature Language="F#" Value="member this.DoubleClick : EventHandler " Usage="member this.DoubleClick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが <see cref="T:System.Windows.Forms.RichTextBox" /> コントロールをダブルクリックすると発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.DragDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragDrop;" />
      <MemberSignature Language="F#" Value="member this.DragDrop : System.Windows.Forms.DragEventHandler " Usage="member this.DragDrop : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがドラッグ アンド ドロップを完了したときに発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.Forms.DragEventHandler " Usage="member this.DragEnter : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オブジェクトがコントロールの境界内にドラッグされると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーは、<xref:System.Windows.Forms.RichTextBox.DragEnter> イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。  
  
 コード例を実行するには、`RichTextBox1`という <xref:System.Windows.Forms.RichTextBox> 型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが <xref:System.Windows.Forms.RichTextBox.DragEnter> イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#539](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#539)]
 [!code-vb[System.Windows.Forms.EventExamples#539](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#539)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event EventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : EventHandler " Usage="member this.DragLeave : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オブジェクトがコントロールの境界外にドラッグされたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このイベントは使用されません。 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.Forms.DragEventHandler " Usage="member this.DragOver : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オブジェクトがコントロールの境界を越えてドラッグされると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このイベントは使用されません。 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawToBitmap">
      <MemberSignature Language="C#" Value="public void DrawToBitmap (System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawToBitmap(class System.Drawing.Bitmap bitmap, valuetype System.Drawing.Rectangle targetBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawToBitmap(System::Drawing::Bitmap ^ bitmap, System::Drawing::Rectangle targetBounds);" />
      <MemberSignature Language="F#" Value="override this.DrawToBitmap : System.Drawing.Bitmap * System.Drawing.Rectangle -&gt; unit" Usage="richTextBox.DrawToBitmap (bitmap, targetBounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="System.Drawing.Bitmap" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="targetBounds" Type="System.Drawing.Rectangle" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="bitmap"><see cref="T:System.Drawing.Bitmap" /></param>
        <param name="targetBounds"><see cref="T:System.Drawing.Rectangle" /></param>
        <summary>このクラスでは、このメソッドは無効です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このメソッドは無効です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableAutoDragDrop">
      <MemberSignature Language="C#" Value="public bool EnableAutoDragDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableAutoDragDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.EnableAutoDragDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableAutoDragDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableAutoDragDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableAutoDragDrop : bool with get, set" Usage="System.Windows.Forms.RichTextBox.EnableAutoDragDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テキスト、画像、およびその他のデータのドラッグ アンド ドロップ操作を有効にする値を取得または設定します。</summary>
        <value>ドラッグ アンド ドロップ操作を有効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Find">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> の内容の中でテキストを検索します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (char[] characterSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(char[] characterSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (characterSet As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(cli::array &lt;char&gt; ^ characterSet);" />
      <MemberSignature Language="F#" Value="member this.Find : char[] -&gt; int" Usage="richTextBox.Find characterSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterSet" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="characterSet">検索対象の文字の配列。</param>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> コントロールのテキスト内で、文字リストに含まれる文字のうち、最初に見つかる文字を検索します。</summary>
        <returns>検索対象の文字が見つかったコントロール内の位置。検索対象の文字が見つからない場合、または <paramref name="char" /> パラメーターで空の検索文字が指定された場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このバージョンの <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドは、`characterSet` パラメーターで指定された文字のリストから文字の最初のインスタンスを検索し、文字の位置を返します。 たとえば、' Q ' という文字を含む文字の配列を渡します。 コントロールに "the Quick Brown Fox" というテキストが含まれている場合、<xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドは4の値を返します。 大文字と小文字は、検索時に異なる値と見なされます。  
  
 プロパティが負の値を返す場合、検索対象の文字がコントロールの内容内に見つかりませんでした。 このメソッドを使用して、コントロール内の文字のグループを検索できます。 このバージョンの <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドでは、コントロールに含まれるドキュメント全体が文字を検索する必要があります。 メソッドの `characterSet` パラメーターに指定された文字リストの文字が見つかった場合、このメソッドによって返される値は、コントロール内の文字の位置の0から始まるインデックスです。 文字の位置を決定するときに、メソッドによってスペースが文字と見なされます。  
  
   
  
## Examples  
 次のコード例では、`text` パラメーターでメソッドに渡される文字の <xref:System.Windows.Forms.RichTextBox> の内容を検索します。 `text` 配列の内容が <xref:System.Windows.Forms.RichTextBox>で見つかった場合、メソッドは、見つかった値のインデックスを返します。それ以外の場合は、-1 を返します。 この例では、このメソッドを、`richTextBox1` という名前の <xref:System.Windows.Forms.RichTextBox> コントロールと、この例で定義されている `button1`イベントハンドラーに接続されている `Click` という名前の <xref:System.Windows.Forms.Button> コントロールを含む <xref:System.Windows.Forms.Form> のクラスに配置する必要があります。  
  
 [!code-cpp[RichTextBox.FindChar1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.FindChar1/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.FindChar1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.FindChar1/CS/form1.cs#1)]
 [!code-vb[RichTextBox.FindChar1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.FindChar1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (str As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(System::String ^ str);" />
      <MemberSignature Language="F#" Value="member this.Find : string -&gt; int" Usage="richTextBox.Find str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">コントロール内で検索するテキスト。</param>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> コントロール内のテキストで文字列を検索します。</summary>
        <returns>検索文字列が見つかったコントロール内の位置。検索文字列が見つからない場合、または <paramref name="str" /> パラメーターで空の検索文字列が指定された場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドは、`str` パラメーターで指定されたテキストを検索し、コントロール内の最初の文字の位置を返します。 プロパティが負の値を返す場合、検索対象のテキスト文字列がコントロールの内容内に見つかりませんでした。 このメソッドを使用すると、コントロールのユーザーに提供できる検索機能を作成できます。 また、このメソッドを使用して、特定の形式で置き換えるテキストを検索することもできます。 たとえば、ユーザーがコントロールに日付を入力した場合、<xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドを使用して、ドキュメント内のすべての日付を検索し、それらを適切な形式に置き換えてから、コントロールの <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> メソッドを使用することができます。  
  
> [!NOTE]
>  パラメーターとして `string` を受け入れる <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドは、<xref:System.Windows.Forms.RichTextBox>内の複数行のテキストに含まれるテキストを見つけることができません。 このような検索を実行すると、負の 1 (-1) の値が返されます。  
  
   
  
## Examples  
 次のコード例では、メソッドの text パラメーターに渡された検索文字列の最初のインスタンスについて、<xref:System.Windows.Forms.RichTextBox> の内容全体を検索します。 検索文字列が <xref:System.Windows.Forms.RichTextBox>に見つかった場合、メソッドは `true` の値を返し、検索テキストを強調表示します。それ以外の場合は `false`を返します。 この例では、このメソッドが `richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> を含む <xref:System.Windows.Forms.Form> のクラスに配置されている必要があります。  
  
 [!code-cpp[Classic RichTextBox.Find Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.Find Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.Find Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.Find Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.Find Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.Find Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (char[] characterSet, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(char[] characterSet, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (characterSet As Char(), start As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(cli::array &lt;char&gt; ^ characterSet, int start);" />
      <MemberSignature Language="F#" Value="member this.Find : char[] * int -&gt; int" Usage="richTextBox.Find (characterSet, start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterSet" Type="System.Char[]" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="characterSet">検索対象の文字の配列。</param>
        <param name="start">コントロールのテキスト内で検索を開始する位置。</param>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> コントロールのテキスト内で、検索開始位置を指定して、文字リストに含まれる文字のうち最初に見つかる文字を検索します。</summary>
        <returns>コントロール内の検索文字が見つかった位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このバージョンの <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドは、`characterSet` パラメーターで指定された文字のリストから文字の最初のインスタンスを検索し、文字の位置を返します。 たとえば、' Q ' という文字を含む文字の配列を渡します。 コントロールに "the Quick Brown Fox" というテキストが含まれている場合、<xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドは4の値を返します。 大文字と小文字は、検索時に異なる値と見なされます。  
  
 プロパティが負の値を返す場合、検索対象の文字がコントロールの内容内に見つかりませんでした。 このメソッドを使用して、コントロール内の文字のグループを検索できます。 メソッドの `characterSet` パラメーターに指定された文字リストの文字が見つかった場合、このメソッドによって返される値は、コントロール内の文字の位置の0から始まるインデックスです。 文字の位置を決定するときに、メソッドによってスペースが文字と見なされます。  
  
 このバージョンの <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドを使用すると、`start` パラメーターの値を指定することによって、コントロールのテキスト内で指定された開始位置から文字セットを検索できます。 値が0の場合は、コントロールのドキュメントの先頭から検索を開始する必要があることを示します。 このバージョンの <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドを使用すると、検索対象として指定された文字が含まれていないこと、または検索で重要ではないことがわかっているテキストを避けるために、検索を絞り込むことができます。  
  
   
  
## Examples  
 次のコード例では、`text` パラメーターでメソッドに渡される文字の <xref:System.Windows.Forms.RichTextBox> の内容を検索します。 検索は、`FindMyText` メソッドの `start` パラメーターで指定された <xref:System.Windows.Forms.RichTextBox> 内の位置から開始します。 テキスト配列の内容が <xref:System.Windows.Forms.RichTextBox>で見つかった場合、メソッドは、見つかった値のインデックスを返します。それ以外の場合は、-1 を返します。 この例では、このメソッドを、`richTextBox1` という名前の <xref:System.Windows.Forms.RichTextBox> コントロールと、この例で定義されている `button1` イベントハンドラーに接続されている <xref:System.Windows.Forms.Control.Click> という名前の <xref:System.Windows.Forms.Button> コントロールを含む <xref:System.Windows.Forms.Form> のクラスに配置する必要があります。  
  
 [!code-cpp[RichTextBox.FindChar2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.FindChar2/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.FindChar2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.FindChar2/CS/form1.cs#1)]
 [!code-vb[RichTextBox.FindChar2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.FindChar2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (string str, System.Windows.Forms.RichTextBoxFinds options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(string str, valuetype System.Windows.Forms.RichTextBoxFinds options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.String,System.Windows.Forms.RichTextBoxFinds)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (str As String, options As RichTextBoxFinds) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(System::String ^ str, System::Windows::Forms::RichTextBoxFinds options);" />
      <MemberSignature Language="F#" Value="member this.Find : string * System.Windows.Forms.RichTextBoxFinds -&gt; int" Usage="richTextBox.Find (str, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="options" Type="System.Windows.Forms.RichTextBoxFinds" />
      </Parameters>
      <Docs>
        <param name="str">コントロール内で検索するテキスト。</param>
        <param name="options"><see cref="T:System.Windows.Forms.RichTextBoxFinds" /> 値のビットごとの組み合わせ。</param>
        <summary>特定の検索オプションを適用して、<see cref="T:System.Windows.Forms.RichTextBox" /> コントロール内のテキストで文字列を検索します。</summary>
        <returns>コントロール内の検索文字列が見つかった位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドは、`str` パラメーターで指定されたテキストを検索し、コントロール内の最初の文字の位置を返します。 プロパティが負の値を返す場合、検索対象のテキスト文字列がコントロールの内容内に見つかりませんでした。 このメソッドを使用すると、コントロールのユーザーに提供できる検索機能を作成できます。 また、このメソッドを使用して、特定の形式で置き換えるテキストを検索することもできます。 たとえば、ユーザーがコントロールに日付を入力した場合、<xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドを使用して、ドキュメント内のすべての日付を検索し、それらを適切な形式に置き換えてから、コントロールの <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> メソッドを使用することができます。  
  
 このバージョンの <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドでは、検索を拡大または縮小できるオプションを指定できます。 検索語の大文字と小文字の区別を一致させるオプションや、部分的な単語ではなく単語全体を検索するオプションを指定できます。 `options` パラメーターで `RichTextBoxFinds.Reverse` 列挙を指定することにより、既定の上から下への検索方法ではなく、ドキュメントの末尾から一番上までのテキストを検索できます。  
  
> [!NOTE]
>  パラメーターとして `string` を受け入れる <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドは、<xref:System.Windows.Forms.RichTextBox>内の複数行のテキストに含まれるテキストを見つけることができません。 このような検索を実行すると、負の 1 (-1) の値が返されます。  
  
   
  
## Examples  
 次のコード例では、メソッドの text パラメーターに渡された検索文字列の最初のインスタンスについて、<xref:System.Windows.Forms.RichTextBox> の内容全体を検索します。 検索文字列が <xref:System.Windows.Forms.RichTextBox>に見つかった場合、メソッドは値 `true` を返し、テキストを強調表示します。それ以外の場合は `false`を返します。 この例では、指定した検索文字列の大文字と小文字を区別するために、検索のオプションも指定します。 この例では、このメソッドが `richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> を含む <xref:System.Windows.Forms.Form> のクラスに配置されている必要があります。  
  
 [!code-cpp[Classic RichTextBox.Find1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.Find1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.Find1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.Find1 Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.Find1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.Find1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (char[] characterSet, int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(char[] characterSet, int32 start, int32 end) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (characterSet As Char(), start As Integer, end As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(cli::array &lt;char&gt; ^ characterSet, int start, int end);" />
      <MemberSignature Language="F#" Value="member this.Find : char[] * int * int -&gt; int" Usage="richTextBox.Find (characterSet, start, end)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterSet" Type="System.Char[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="characterSet">検索対象の文字の配列。</param>
        <param name="start">コントロールのテキスト内で検索を開始する位置。</param>
        <param name="end">コントロールのテキスト内で検索を終了する位置。</param>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> コントロールのテキスト範囲内で、文字リストに含まれる文字のうち、最初に見つかる文字を検索します。</summary>
        <returns>コントロール内の検索文字が見つかった位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このバージョンの <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドは、`characterSet` パラメーターで指定された文字のリストから文字の最初のインスタンスを検索し、文字の位置を返します。 たとえば、' Q ' という文字を含む文字の配列を渡します。 コントロールに "the Quick Brown Fox" というテキストが含まれている場合、<xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドは4の値を返します。 大文字と小文字は、検索時に異なる値と見なされます。  
  
 プロパティが負の値を返す場合、検索対象の文字がコントロールの内容内に見つかりませんでした。 このメソッドを使用して、コントロール内の文字のグループを検索できます。 メソッドの `characterSet` パラメーターに指定された文字リストの文字が見つかった場合、このメソッドによって返される値は、コントロール内の文字の位置を示す0から始まるインデックスです。 文字の位置を決定するときに、メソッドによってスペースが文字と見なされます。  
  
 このバージョンの <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドを使用すると、`start` と `end` パラメーターの値を指定することによって、コントロール内のテキスト範囲から文字セットを検索できます。 `start` パラメーターの値が0の場合は、コントロールのドキュメントの先頭から検索を開始する必要があることを示します。 `end` パラメーターの値が-1 の場合は、コントロール内のテキストの末尾で検索を終了する必要があることを示します。 このバージョンの <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドを使用して、アプリケーションのニーズにとって重要ではないドキュメントの領域を検索しないように、コントロール内の特定範囲のテキストに検索を絞り込むことができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="characterSet" /> が null です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="start" /> が 0 未満か、コントロール内のテキストの長さを超える値です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (string str, int start, System.Windows.Forms.RichTextBoxFinds options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(string str, int32 start, valuetype System.Windows.Forms.RichTextBoxFinds options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.String,System.Int32,System.Windows.Forms.RichTextBoxFinds)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (str As String, start As Integer, options As RichTextBoxFinds) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(System::String ^ str, int start, System::Windows::Forms::RichTextBoxFinds options);" />
      <MemberSignature Language="F#" Value="member this.Find : string * int * System.Windows.Forms.RichTextBoxFinds -&gt; int" Usage="richTextBox.Find (str, start, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="options" Type="System.Windows.Forms.RichTextBoxFinds" />
      </Parameters>
      <Docs>
        <param name="str">コントロール内で検索するテキスト。</param>
        <param name="start">コントロールのテキスト内で検索を開始する位置。</param>
        <param name="options"><see cref="T:System.Windows.Forms.RichTextBoxFinds" /> 値のビットごとの組み合わせ。</param>
        <summary>特定の検索オプションを適用し、<see cref="T:System.Windows.Forms.RichTextBox" /> コントロール内のテキストで、特定の位置にある文字列を検索します。</summary>
        <returns>コントロール内の検索文字列が見つかった位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドは、`str` パラメーターで指定されたテキストを検索し、コントロール内の検索文字列の最初の文字の位置を返します。 プロパティが負の値を返す場合、検索対象のテキスト文字列がコントロールの内容内に見つかりませんでした。 このメソッドを使用すると、コントロールのユーザーに提供できる検索機能を作成できます。 また、このメソッドを使用して、特定の形式で置き換えるテキストを検索することもできます。 たとえば、ユーザーがコントロールに日付を入力した場合、<xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドを使用して、ドキュメント内のすべての日付を検索し、それらを適切な形式に置き換えてから、コントロールの <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> メソッドを使用することができます。  
  
 このバージョンの <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドでは、検索を拡大または縮小できるオプションを指定できます。 検索語の大文字と小文字の区別を一致させるオプションや、部分的な単語ではなく単語全体を検索するオプションを指定できます。 `options` パラメーターで `RichTextBoxFinds.Reverse` 列挙を指定することにより、既定の上から下への検索方法ではなく、ドキュメントの末尾から一番上までのテキストを検索できます。 このバージョンの <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドを使用すると、コントロールのテキスト内で特定の開始位置を選択して、テキストの検索を絞り込むこともできます。 この機能を使用すると、既に検索されている可能性があるテキストや、検索する特定のテキストが存在しないことがわかっているテキストを避けることができます。 `options` パラメーターで `RichTextBoxFinds.Reverse` 値が指定されている場合、このバージョンの <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドを使用すると、ドキュメントの末尾から検索が開始されるため、`start` パラメーターの値によって、逆順検索が終了する位置が示されます。  
  
> [!NOTE]
>  パラメーターとして `string` を受け入れる <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドは、<xref:System.Windows.Forms.RichTextBox>内の複数行のテキストに含まれるテキストを見つけることができません。 このような検索を実行すると、負の 1 (-1) の値が返されます。  
  
   
  
## Examples  
 次のコード例では、メソッドの text パラメーターに渡された検索文字列の最初のインスタンスについて、<xref:System.Windows.Forms.RichTextBox> の内容全体を検索します。 検索の開始位置は、メソッドの start パラメーターによって指定されます。 検索文字列が <xref:System.Windows.Forms.RichTextBox>に見つかった場合、メソッドは、見つかったテキストの最初の文字のインデックス位置を返し、見つかったテキストを強調表示します。それ以外の場合は、値-1 を返します。 この例では、指定した検索文字列の大文字と小文字を区別するために、検索のオプションも指定します。 この例では、このメソッドが `richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> を含む <xref:System.Windows.Forms.Form> のクラスに配置されている必要があります。 この例を使用すると、"Find Next" という種類の操作を実行できます。 検索テキストのインスタンスが見つかったら、`start` パラメーターの値を変更して、現在の一致の位置を超えて位置を検索することで、テキストのその他のインスタンスを検索できます。  
  
 [!code-cpp[Classic RichTextBox.Find2 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.Find2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.Find2 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.Find2 Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.Find2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.Find2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (string str, int start, int end, System.Windows.Forms.RichTextBoxFinds options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(string str, int32 start, int32 end, valuetype System.Windows.Forms.RichTextBoxFinds options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Find(System.String,System.Int32,System.Int32,System.Windows.Forms.RichTextBoxFinds)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (str As String, start As Integer, end As Integer, options As RichTextBoxFinds) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Find(System::String ^ str, int start, int end, System::Windows::Forms::RichTextBoxFinds options);" />
      <MemberSignature Language="F#" Value="member this.Find : string * int * int * System.Windows.Forms.RichTextBoxFinds -&gt; int" Usage="richTextBox.Find (str, start, end, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
        <Parameter Name="options" Type="System.Windows.Forms.RichTextBoxFinds" />
      </Parameters>
      <Docs>
        <param name="str">コントロール内で検索するテキスト。</param>
        <param name="start">コントロールのテキスト内で検索を開始する位置。</param>
        <param name="end">コントロールのテキスト内で検索を終了する位置。 この値は -1 または <paramref name="start" /> パラメーターの値以上であることが必要です。</param>
        <param name="options"><see cref="T:System.Windows.Forms.RichTextBoxFinds" /> 値のビットごとの組み合わせ。</param>
        <summary>特定の検索オプションを適用し、<see cref="T:System.Windows.Forms.RichTextBox" /> コントロール内の指定したテキスト範囲内で文字列を検索します。</summary>
        <returns>コントロール内の検索文字列が見つかった位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドは、`str` パラメーターで指定されたテキストを検索し、コントロール内の検索文字列の最初の文字の位置を返します。 プロパティが負の値を返す場合、検索対象のテキスト文字列がコントロールの内容内に見つかりませんでした。 このメソッドを使用すると、コントロールのユーザーに提供できる検索機能を作成できます。 また、このメソッドを使用して、特定の形式で置き換えるテキストを検索することもできます。 たとえば、ユーザーがコントロールに日付を入力した場合、<xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドを使用して、ドキュメント内のすべての日付を検索し、それらを適切な形式に置き換えてから、コントロールの <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> メソッドを使用することができます。  
  
 このバージョンの <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドでは、検索を拡大または縮小できるオプションを指定できます。 検索語の大文字と小文字の区別を一致させるオプションや、部分的な単語ではなく単語全体を検索するオプションを指定できます。 `options` パラメーターで `RichTextBoxFinds.Reverse` 列挙を指定することにより、既定の上から下への検索方法ではなく、ドキュメントの末尾から一番上までのテキストを検索できます。 また、このバージョンの <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドを使用すると、コントロールのテキスト内で特定の開始位置と終了位置を選択することで、テキストの検索を絞り込むことができます。 この機能を使用すると、検索範囲をコントロールのテキストの特定のセクションに限定することができます。 値が負の 1 (-1) の `end` パラメーターに割り当てられている場合、メソッドは、通常の検索のために、<xref:System.Windows.Forms.RichTextBox> 内のテキストの末尾まで検索します。 逆引き検索の場合、`end` パラメーターに割り当てられた負の 1 (-1) の値は、テキストがテキストの末尾 (下部) から `start` パラメーターで定義された位置まで検索されることを示します。 `start` パラメーターと `end` パラメーターを同じ値に指定すると、コントロール全体が通常の検索のために検索されます。 逆検索では、コントロール全体が検索されますが、検索はドキュメントの一番下から開始され、ドキュメントの先頭に向かって検索されます。  
  
> [!NOTE]
>  パラメーターとして `string` を受け入れる <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドは、<xref:System.Windows.Forms.RichTextBox>内の複数行のテキストに含まれるテキストを見つけることができません。 このような検索を実行すると、負の 1 (-1) の値が返されます。  
  
   
  
## Examples  
 次のコード例では、メソッドの `searchText` パラメーターに渡された検索文字列の最初のインスタンスについて、<xref:System.Windows.Forms.RichTextBox> 内のテキストのセクションを検索します。 コントロール内のテキストを検索する範囲は、メソッドの `searchStart` パラメーターと `searchEnd` パラメーターによって指定されます。 検索文字列が <xref:System.Windows.Forms.RichTextBox>に見つかった場合、メソッドは、見つかったテキストの最初の文字のインデックス位置を返し、見つかったテキストを強調表示します。それ以外の場合は、値-1 を返します。 また、この例では、<xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドの `options` パラメーターを使用して、検索文字列の大文字と小文字の区別を検索するように指定しています。 この例では、このメソッドが `richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールを含む <xref:System.Windows.Forms.Form> のクラスに配置されている必要があります。 検索文字列の最初のインスタンスが見つかったら、次の例を使用して、テキスト内の他のインスタンスを検索できます。  
  
 [!code-cpp[RichTextBox.FindStringStartEnd#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.FindStringStartEnd/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.FindStringStartEnd#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.FindStringStartEnd/CS/form1.cs#1)]
 [!code-vb[RichTextBox.FindStringStartEnd#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.FindStringStartEnd/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="str" /> パラメーターは <see langword="null" /> でした。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="start" /> パラメーターが 0 未満でした。

または 
<paramref name="end" /> パラメーターの値が <paramref name="start" /> パラメーターの値未満でした。</exception>
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public override System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.Font" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Font : System.Drawing.Font with get, set" Usage="System.Windows.Forms.RichTextBox.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールによって表示されるテキストのフォントを取得または設定します。</summary>
        <value>コントロールによって表示されるテキストに適用される <see cref="T:System.Drawing.Font" />。 既定値は <see cref="P:System.Windows.Forms.Control.DefaultFont" /> プロパティの値です。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.Font" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.RichTextBox.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの前景色を取得または設定します。</summary>
        <value>コントロールの前景色を表す <see cref="T:System.Drawing.Color" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.ForeColor" />
      </Docs>
    </Member>
    <Member MemberName="GetCharFromPosition">
      <MemberSignature Language="C#" Value="public char GetCharFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance char GetCharFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.GetCharFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCharFromPosition (pt As Point) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; char GetCharFromPosition(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="member this.GetCharFromPosition : System.Drawing.Point -&gt; char" Usage="richTextBox.GetCharFromPosition pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="pt">検索する位置。</param>
        <summary>指定位置に最も近い文字を取得します。</summary>
        <returns>指定した位置にある文字。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharIndexFromPosition">
      <MemberSignature Language="C#" Value="public override int GetCharIndexFromPosition (System.Drawing.Point pt);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharIndexFromPosition(valuetype System.Drawing.Point pt) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharIndexFromPosition (pt As Point) As Integer" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharIndexFromPosition(System::Drawing::Point pt);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="override this.GetCharIndexFromPosition : System.Drawing.Point -&gt; int" Usage="richTextBox.GetCharIndexFromPosition pt" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public int GetCharIndexFromPosition (System.Drawing.Point pt);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetCharIndexFromPosition(valuetype System.Drawing.Point pt) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCharIndexFromPosition (pt As Point) As Integer" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetCharIndexFromPosition(System::Drawing::Point pt);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="member this.GetCharIndexFromPosition : System.Drawing.Point -&gt; int" Usage="richTextBox.GetCharIndexFromPosition pt" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">検索する位置。</param>
        <summary>指定位置に最も近い文字のインデックスを取得します。</summary>
        <returns>指定した位置の 0 から始まる文字インデックス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`pt` パラメーターで指定された位置に最も近い文字インデックスを返します。 文字インデックスは、スペースを含め、コントロール内のテキストの0から始まるインデックスです。 このメソッドを使用すると、マウスの座標をこのメソッドに渡すことによって、ユーザーがマウスでポイントしているテキスト内の位置を確認できます。 これは、ユーザーがコントロールのテキスト内の単語の上にマウスポインターを置いたときにタスクを実行する場合に便利です。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Windows.Forms.RichTextBox.GetCharIndexFromPosition%2A> メソッドを <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドと共に使用して <xref:System.Windows.Forms.RichTextBox> コントロール内で特定の文字列を検索し、見つかった文字列が <xref:System.Windows.Forms.RichTextBox> コントロール内にある文字インデックスを表示する方法を示しています。 この例では、コントロールのコンテンツ内で "茶色" という語を検索し、検索文字列が見つかった文字インデックス位置を返します。 この例では、テキストを含む `richTextBox1` という名前の <xref:System.Windows.Forms.RichTextBox> コントロールを含むフォームが必要です。 また、この例のコードは、<xref:System.Windows.Forms.RichTextBox>の <xref:System.Windows.Forms.Control.MouseDown> イベントに接続されている必要があります。  
  
 [!code-cpp[RichTextBox.GetCharIndexFromPosition#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.GetCharIndexFromPosition/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.GetCharIndexFromPosition#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.GetCharIndexFromPosition/CS/form1.cs#1)]
 [!code-vb[RichTextBox.GetCharIndexFromPosition#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.GetCharIndexFromPosition/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetLineFromCharIndex(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetLineFromCharIndex">
      <MemberSignature Language="C#" Value="public override int GetLineFromCharIndex (int index);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetLineFromCharIndex(int32 index) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.GetLineFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLineFromCharIndex (index As Integer) As Integer" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetLineFromCharIndex(int index);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="override this.GetLineFromCharIndex : int -&gt; int" Usage="richTextBox.GetLineFromCharIndex index" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public int GetLineFromCharIndex (int index);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetLineFromCharIndex(int32 index) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLineFromCharIndex (index As Integer) As Integer" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetLineFromCharIndex(int index);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="member this.GetLineFromCharIndex : int -&gt; int" Usage="richTextBox.GetLineFromCharIndex index" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">検索する文字インデックスの位置。</param>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> コントロールのテキスト内の指定した文字位置から行番号を取得します。</summary>
        <returns>文字インデックスを含む行の 0 から始まる行番号。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用すると、メソッドの `index` パラメーターで指定された文字インデックスに基づいて行番号を特定できます。 コントロールのテキストの最初の行は、値0を返します。 <xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> メソッドは、インデックス付き文字がコントロール内に配置されている物理的な行番号を返します。 たとえば、コントロール内のテキストの最初の論理行の部分が次の行に折り返される場合、<xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> メソッドは、指定した文字インデックス位置にある文字が2番目の物理行にラップされている場合、1を返します。 <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> が `false`に設定されている場合、行の一部は次の行に折り返されず、メソッドは指定された文字インデックスに対して0を返します。 このメソッドを使用すると、特定の文字インデックスが含まれている行を特定できます。 たとえば、テキストを検索するために <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドを呼び出した後、検索結果が見つかる場所の文字インデックスを取得できます。 <xref:System.Windows.Forms.RichTextBox.Find%2A> メソッドによって返された文字インデックスを使用して、このメソッドを呼び出して、単語が見つかった行を特定できます。  
  
 場合によっては、`index` パラメーターが無効な値の場合、<xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> は例外をスローしません。 例 :  
  
-   `index` パラメーターが <xref:System.Int32.MinValue> または-1 の場合、<xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> は0を返します。  
  
-   `index` パラメーターがテキスト長または <xref:System.Int32.MaxValue>の場合、<xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> はテキストの最後の行の番号を返します。これは、<xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> プロパティの値によっては必ずしも `Lines.Length-1`と同じではありません。  
  
 このような場合は、<xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A>を呼び出す前に入力を検証します。  
  
> [!NOTE]
>  `index` パラメーターで指定された文字インデックスが、コントロール内に含まれる使用可能な行数を超えている場合は、最後の行番号が返されます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Windows.Forms.RichTextBox.GetLineFromCharIndex%2A> メソッドの使用方法を示しています。 この例を実行するには、`RichTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロール、`Button1` という名前のボタン、および `TextBox1` と `TextBox2`という名前の2つのテキストボックスを含むフォームに次のコードを貼り付けます。 この例が実行されている場合は `TextBox2` に検索文字列を入力し、ボタンをクリックして検索結果を取得します。  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxGetLine#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxGetLine/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxGetLine#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxGetLine/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxGetLine#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxGetLine/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionFromCharIndex">
      <MemberSignature Language="C#" Value="public override System.Drawing.Point GetPositionFromCharIndex (int index);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Drawing.Point GetPositionFromCharIndex(int32 index) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.GetPositionFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPositionFromCharIndex (index As Integer) As Point" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Drawing::Point GetPositionFromCharIndex(int index);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="override this.GetPositionFromCharIndex : int -&gt; System.Drawing.Point" Usage="richTextBox.GetPositionFromCharIndex index" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public System.Drawing.Point GetPositionFromCharIndex (int index);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point GetPositionFromCharIndex(int32 index) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPositionFromCharIndex (index As Integer) As Point" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Point GetPositionFromCharIndex(int index);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="member this.GetPositionFromCharIndex : int -&gt; System.Drawing.Point" Usage="richTextBox.GetPositionFromCharIndex index" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">位置の取得対象とする文字のインデックス。</param>
        <summary>指定の文字インデックスにおけるコントロール内の位置を取得します。</summary>
        <returns>指定した文字の位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用すると、特定の文字インデックスが配置されているコントロール内の場所を確認できます。 このメソッドは、コントロール内の単語のショートカットメニュー項目やヘルプ情報を表示するなどのタスクに使用できます。 たとえば、ユーザーがコントロール内の単語を右クリックしたときにユーザーにオプションのメニューを表示する場合は、このメソッドを使用して、<xref:System.Windows.Forms.ContextMenu> コントロールを適切に表示するための単語の位置を決定できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
        <altmember cref="M:System.Windows.Forms.RichTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.Forms.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.Forms.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドラッグ操作中に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このイベントは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HScroll">
      <MemberSignature Language="C#" Value="public event EventHandler HScroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HScroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.HScroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HScroll As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ HScroll;" />
      <MemberSignature Language="F#" Value="member this.HScroll : EventHandler " Usage="member this.HScroll : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがコントロールの水平スクロール バーをクリックすると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーは、<xref:System.Windows.Forms.RichTextBox.HScroll> イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。  
  
 コード例を実行するには、`RichTextBox1`という <xref:System.Windows.Forms.RichTextBox> 型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが <xref:System.Windows.Forms.RichTextBox.HScroll> イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#540](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#540)]
 [!code-vb[System.Windows.Forms.EventExamples#540](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#540)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImeChange">
      <MemberSignature Language="C#" Value="public event EventHandler ImeChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ImeChange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.ImeChange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ImeChange As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ImeChange;" />
      <MemberSignature Language="F#" Value="member this.ImeChange : EventHandler " Usage="member this.ImeChange : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが Windows オペレーティング システムのアジア バージョンで入力方法を切り替えると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーは、<xref:System.Windows.Forms.RichTextBox.ImeChange> イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。  
  
 コード例を実行するには、`RichTextBox1`という <xref:System.Windows.Forms.RichTextBox> 型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが <xref:System.Windows.Forms.RichTextBox.ImeChange> イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#542](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#542)]
 [!code-vb[System.Windows.Forms.EventExamples#542](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#542)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageOption">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.RichTextBoxLanguageOptions LanguageOption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RichTextBoxLanguageOptions LanguageOption" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.LanguageOption" />
      <MemberSignature Language="VB.NET" Value="Public Property LanguageOption As RichTextBoxLanguageOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::RichTextBoxLanguageOptions LanguageOption { System::Windows::Forms::RichTextBoxLanguageOptions get(); void set(System::Windows::Forms::RichTextBoxLanguageOptions value); };" />
      <MemberSignature Language="F#" Value="member this.LanguageOption : System.Windows.Forms.RichTextBoxLanguageOptions with get, set" Usage="System.Windows.Forms.RichTextBox.LanguageOption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RichTextBoxLanguageOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>IME (Input Method Editor) およびアジア言語のサポートに関する <see cref="T:System.Windows.Forms.RichTextBox" /> の設定を示す値を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.RichTextBoxLanguageOptions" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Windows.Forms.RichTextBoxLanguageOptions.AutoFontSizeAdjust" /> です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkClicked">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LinkClickedEventHandler LinkClicked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LinkClickedEventHandler LinkClicked" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.LinkClicked" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LinkClicked As LinkClickedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LinkClickedEventHandler ^ LinkClicked;" />
      <MemberSignature Language="F#" Value="member this.LinkClicked : System.Windows.Forms.LinkClickedEventHandler " Usage="member this.LinkClicked : System.Windows.Forms.LinkClickedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LinkClickedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがコントロールのテキスト内のリンクをクリックすると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントのイベントハンドラーを作成して、コントロール内でクリックされたリンクを処理することができます。 イベントハンドラーに提供された情報を使用して、ドキュメント内でどのリンクがクリックされたかを確認できます。  
  
> [!IMPORTANT]
>  既定では、リンクはテキストとして表示され、クリックすることはできません。 クリック可能にするには、<xref:System.Windows.Forms.RichTextBox.DetectUrls%2A> プロパティを `true`に設定します。  
  
 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
   
  
## Examples  
 次のコード例には、<xref:System.Windows.Forms.RichTextBox.LinkClicked> イベントのイベントハンドラーが含まれています。 イベントハンドラーは、<xref:System.Windows.Forms.RichTextBox> コントロールのドキュメント内のリンククリックを処理し、(<xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> メソッドを使用して) 既定のブラウザーのインスタンスを起動して、クリックされたリンクのページを表示します。 この例では、イベントハンドラーが <xref:System.Windows.Forms.RichTextBox>の <xref:System.Windows.Forms.RichTextBox.LinkClicked> イベントに接続されている必要があります。  
  
 [!code-cpp[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.LinkClicked Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.LinkClicked Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.DetectUrls" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadFile">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ファイルの内容を <see cref="T:System.Windows.Forms.RichTextBox" /> コントロールに読み込みます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadFile">
      <MemberSignature Language="C#" Value="public void LoadFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.LoadFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.LoadFile : string -&gt; unit" Usage="richTextBox.LoadFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">コントロールに読み込むファイルの名前と位置。</param>
        <summary>リッチ テキスト形式 (RTF: Rich Text Format) ファイルまたは標準の ASCII テキスト ファイルを <see cref="T:System.Windows.Forms.RichTextBox" /> コントロールに読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドを使用してファイルを読み込む場合、読み込まれるファイルの内容によって、<xref:System.Windows.Forms.RichTextBox> コントロールの内容全体が置き換えられます。 これにより、<xref:System.Windows.Forms.TextBoxBase.Text%2A> および <xref:System.Windows.Forms.RichTextBox.Rtf%2A> プロパティの値が変更されます。 このメソッドを使用すると、以前に作成したテキストまたは RTF ドキュメントを操作のためにコントロールに読み込むことができます。 ファイルを保存する場合は、<xref:System.Windows.Forms.RichTextBox.SaveFile%2A> メソッドを使用できます。  
  
> [!NOTE]
>  このバージョンの <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドでは、読み込まれるファイルが RTF ドキュメントでない場合、例外が発生します。 ASCII テキストファイルなどの別の種類のファイルを読み込むには、このメソッドの他のバージョンを使用します。このメソッドは、パラメーターとして <xref:System.Windows.Forms.RichTextBoxStreamType> 列挙体の値を受け取ります。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドは、<xref:System.Windows.Forms.RichTextBox>に対してハンドルが作成されるまでファイルを開きません。 <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドを呼び出す前に、コントロールのハンドルが作成されていることを確認します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.RichTextBox> コントロールに RTF ファイルを開きます。 この例では、<xref:System.Windows.Forms.OpenFileDialog> クラスを使用して、ユーザーにファイルを要求するダイアログを表示します。 次に、そのファイルが RTF ドキュメントファイルであると仮定して、そのファイルを読み込みます。 ファイルがでない場合、コード例では例外がスローされます。 この例では、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールを持つ <xref:System.Windows.Forms.Form> クラスにコードが配置されている必要があります。  
  
 [!code-cpp[Classic RichTextBox.LoadFile Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.LoadFile Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.LoadFile Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.LoadFile Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.LoadFile Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.LoadFile Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">コントロールへのファイルの読み込み中に発生したエラー。</exception>
        <exception cref="T:System.ArgumentException">読み込み中のファイルは RTF ドキュメントではありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルを開くために使用します。 関連付けられた列挙型: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />の <see langword="Read" /> 値。</permission>
        <altmember cref="M:System.Windows.Forms.RichTextBox.SaveFile(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LoadFile">
      <MemberSignature Language="C#" Value="public void LoadFile (System.IO.Stream data, System.Windows.Forms.RichTextBoxStreamType fileType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadFile(class System.IO.Stream data, valuetype System.Windows.Forms.RichTextBoxStreamType fileType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.LoadFile(System.IO.Stream,System.Windows.Forms.RichTextBoxStreamType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadFile (data As Stream, fileType As RichTextBoxStreamType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadFile(System::IO::Stream ^ data, System::Windows::Forms::RichTextBoxStreamType fileType);" />
      <MemberSignature Language="F#" Value="member this.LoadFile : System.IO.Stream * System.Windows.Forms.RichTextBoxStreamType -&gt; unit" Usage="richTextBox.LoadFile (data, fileType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" />
        <Parameter Name="fileType" Type="System.Windows.Forms.RichTextBoxStreamType" />
      </Parameters>
      <Docs>
        <param name="data"><see cref="T:System.Windows.Forms.RichTextBox" /> コントロールに読み込むデータのストリーム。</param>
        <param name="fileType"><see cref="T:System.Windows.Forms.RichTextBoxStreamType" /> 値のいずれか 1 つ。</param>
        <summary>既存のデータ ストリームの内容を <see cref="T:System.Windows.Forms.RichTextBox" /> コントロールに読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このバージョンの <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドを使用すると、既存のデータストリームのデータを使用して <xref:System.Windows.Forms.RichTextBox> を読み込むことができます。 コントロールに読み込まれるデータは、<xref:System.Windows.Forms.RichTextBox> コントロールの内容全体を置き換えます。 これにより、<xref:System.Windows.Forms.TextBoxBase.Text%2A> および <xref:System.Windows.Forms.RichTextBox.Rtf%2A> プロパティの値が変更されます。 このメソッドを使用して、以前にデータストリームで開かれていたファイルを操作のためにコントロールに読み込むことができます。 コントロールの内容をストリームに再び保存する場合は、パラメーターとして <xref:System.IO.Stream> オブジェクトを受け取る <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> メソッドを使用できます。  
  
 このバージョンの <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドでは、コントロールに読み込むデータの型を指定することもできます。 この機能を使用すると、リッチテキスト形式 (RTF) ドキュメント以外のデータを含むデータストリームをコントロールに使用できます。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドは、<xref:System.Windows.Forms.RichTextBox>に対してハンドルが作成されるまでファイルを開きません。 <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドを呼び出す前に、コントロールのハンドルが作成されていることを確認します。  
  
   
  
## Examples  
 次のコード例では、ストリームで <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> および <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドを使用する方法を示します。 また、<xref:System.Windows.Forms.FileDialog.FileName%2A?displayProperty=nameWithType>、<xref:System.Windows.Forms.FileDialog.DefaultExt%2A?displayProperty=nameWithType>、<xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>、および <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType> のメンバーの使用方法も示します。  
  
 これは、プロジェクトにコピーするときに実行する準備が整った完全な例です。  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">コントロールへのファイルの読み込み中に発生したエラー。</exception>
        <exception cref="T:System.ArgumentException">読み込み中のファイルは RTF ドキュメントではありません。</exception>
        <altmember cref="M:System.Windows.Forms.RichTextBox.SaveFile(System.String)" />
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Windows.Forms.RichTextBoxStreamType" />
      </Docs>
    </Member>
    <Member MemberName="LoadFile">
      <MemberSignature Language="C#" Value="public void LoadFile (string path, System.Windows.Forms.RichTextBoxStreamType fileType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadFile(string path, valuetype System.Windows.Forms.RichTextBoxStreamType fileType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.LoadFile(System.String,System.Windows.Forms.RichTextBoxStreamType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadFile (path As String, fileType As RichTextBoxStreamType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadFile(System::String ^ path, System::Windows::Forms::RichTextBoxStreamType fileType);" />
      <MemberSignature Language="F#" Value="member this.LoadFile : string * System.Windows.Forms.RichTextBoxStreamType -&gt; unit" Usage="richTextBox.LoadFile (path, fileType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="fileType" Type="System.Windows.Forms.RichTextBoxStreamType" />
      </Parameters>
      <Docs>
        <param name="path">コントロールに読み込むファイルの名前と位置。</param>
        <param name="fileType"><see cref="T:System.Windows.Forms.RichTextBoxStreamType" /> 値のいずれか 1 つ。</param>
        <summary>特定の種類のファイルを <see cref="T:System.Windows.Forms.RichTextBox" /> コントロールに読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドを使用してファイルを読み込む場合、読み込まれるファイルの内容によって、<xref:System.Windows.Forms.RichTextBox> コントロールの内容全体が置き換えられます。 これにより、<xref:System.Windows.Forms.TextBoxBase.Text%2A> および <xref:System.Windows.Forms.RichTextBox.Rtf%2A> プロパティの値が変更されます。 このメソッドを使用すると、以前に作成したテキストまたはリッチテキスト形式 (RTF) ドキュメントを操作のためにコントロールに読み込むことができます。 ファイルを保存する場合は、<xref:System.Windows.Forms.RichTextBox.SaveFile%2A> メソッドを使用できます。  
  
 このバージョンの <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドを使用して、読み込むファイルの種類を指定できます。 この機能を使用すると、RTF ドキュメント以外のファイルをコントロールに読み込むことができます。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドは、<xref:System.Windows.Forms.RichTextBox>に対してハンドルが作成されるまでファイルを開きません。 <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドを呼び出す前に、コントロールのハンドルが作成されていることを確認します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.RichTextBox> コントロールにテキストファイルを開きます。 この例では、<xref:System.Windows.Forms.OpenFileDialog> クラスを使用して、ユーザーにファイルを要求するダイアログを表示します。 次に、コードはそのファイルを <xref:System.Windows.Forms.RichTextBox> コントロールに読み込みます。 この例では、このバージョンの <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドを使用して、標準のリッチテキスト形式ではなく、ファイルを ASCII テキストファイルとして開くように指定しています。 この例では、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールを持つ <xref:System.Windows.Forms.Form> クラスにコードが配置されている必要があります。  
  
 [!code-cpp[Classic RichTextBox.LoadFile1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.LoadFile1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.LoadFile1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.LoadFile1 Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.LoadFile1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.LoadFile1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">コントロールへのファイルの読み込み中に発生したエラー。</exception>
        <exception cref="T:System.ArgumentException">読み込み中のファイルは RTF ドキュメントではありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルを開くために使用します。 関連付けられた列挙型: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />の <see langword="Read" /> 値。</permission>
        <altmember cref="M:System.Windows.Forms.RichTextBox.SaveFile(System.String)" />
        <altmember cref="T:System.Windows.Forms.RichTextBoxStreamType" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public override int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxLength : int with get, set" Usage="System.Windows.Forms.RichTextBox.MaxLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(2147483647)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがリッチ テキスト ボックス コントロールに入力または貼り付けできる最大文字数を取得または設定します。</summary>
        <value>コントロールに入力できる文字数。 既定値は、<see cref="F:System.Int32.MaxValue" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティが0に設定されている場合、コントロールに入力できるテキストの最大長は 64 KB です。 このプロパティは、通常、1行のリッチテキスト形式 (RTF) テキストを表示するために <xref:System.Windows.Forms.RichTextBox> を使用する場合に使用します。 このプロパティを使用すると、郵便番号や電話番号などの値に対してコントロールに入力されるテキストの長さを制限したり、データベースにデータを入力するときに入力するテキストの長さを制限したりすることができます。 コントロールに入力されたテキストを、データベース内の対応するフィールドの最大長に制限できます。  
  
> [!NOTE]
>  コードでは、<xref:System.Windows.Forms.TextBoxBase.Text%2A> プロパティの値を、<xref:System.Windows.Forms.TextBoxBase.MaxLength%2A> プロパティによって指定された値よりも長い長さの値に設定できます。 このプロパティは、実行時にコントロールに入力されたテキストにのみ影響します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.RichTextBox.MaxLength%2A> プロパティを使用して、<xref:System.Windows.Forms.RichTextBox> コントロールに割り当てられているテキストが、<xref:System.Windows.Forms.RichTextBox.MaxLength%2A> プロパティに割り当てられている値より大きいかどうかを判断する方法を示します。 テキストが大きくない場合、この例では、<xref:System.Windows.Forms.RichTextBox.SelectedText%2A> プロパティを使用して、コントロールにテキストを割り当てています。 この例では、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールがフォームに追加されており、この例のメソッドが、コントロールに貼り付けるパラメーターに指定されたテキストを使用して呼び出されることを必要としています。 また、この例では、テキスト入力を <xref:System.Windows.Forms.RichTextBox>に制限するために、<xref:System.Windows.Forms.TextBoxBase.MaxLength%2A> プロパティが値に設定されている必要があります。  
  
 [!code-cpp[RichTextBox.MaxLength#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.MaxLength/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.MaxLength#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.MaxLength/CS/form1.cs#1)]
 [!code-vb[RichTextBox.MaxLength#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.MaxLength/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">プロパティに代入された値が 0 未満です。</exception>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.MaxLength" />
      </Docs>
    </Member>
    <Member MemberName="Multiline">
      <MemberSignature Language="C#" Value="public override bool Multiline { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.Multiline" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Multiline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Multiline { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Multiline : bool with get, set" Usage="System.Windows.Forms.RichTextBox.Multiline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このコントロールが複数行 <see cref="T:System.Windows.Forms.RichTextBox" /> コントロールかどうかを示す値を取得または設定します。</summary>
        <value>コントロールが複数行 <see langword="true" /> コントロールである場合は <see cref="T:System.Windows.Forms.RichTextBox" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnBackColorChanged : EventArgs -&gt; unit" Usage="richTextBox.OnBackColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.Control.BackColorChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentsResized">
      <MemberSignature Language="C#" Value="protected virtual void OnContentsResized (System.Windows.Forms.ContentsResizedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentsResized(class System.Windows.Forms.ContentsResizedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnContentsResized(System.Windows.Forms.ContentsResizedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentsResized (e As ContentsResizedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentsResized(System::Windows::Forms::ContentsResizedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContentsResized : System.Windows.Forms.ContentsResizedEventArgs -&gt; unit&#xA;override this.OnContentsResized : System.Windows.Forms.ContentsResizedEventArgs -&gt; unit" Usage="richTextBox.OnContentsResized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ContentsResizedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.ContentsResizedEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.RichTextBox.ContentsResized" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。  
  
 <xref:System.Windows.Forms.RichTextBox.OnContentsResized%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.RichTextBox.OnContentsResized(System.Windows.Forms.ContentsResizedEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.RichTextBox.OnContentsResized(System.Windows.Forms.ContentsResizedEventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.ContentsResized" />
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuChanged">
      <MemberSignature Language="C#" Value="protected override void OnContextMenuChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnContextMenuChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnContextMenuChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnContextMenuChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnContextMenuChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnContextMenuChanged : EventArgs -&gt; unit" Usage="richTextBox.OnContextMenuChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.Control.ContextMenuChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="richTextBox.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.Control.HandleCreated" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleDestroyed : EventArgs -&gt; unit" Usage="richTextBox.OnHandleDestroyed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHScroll">
      <MemberSignature Language="C#" Value="protected virtual void OnHScroll (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHScroll(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnHScroll(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHScroll (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHScroll(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnHScroll : EventArgs -&gt; unit&#xA;override this.OnHScroll : EventArgs -&gt; unit" Usage="richTextBox.OnHScroll e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.RichTextBox.HScroll" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。  
  
 <xref:System.Windows.Forms.RichTextBox.OnHScroll%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.RichTextBox.OnHScroll(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.RichTextBox.OnHScroll(System.EventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.HScroll" />
      </Docs>
    </Member>
    <Member MemberName="OnImeChange">
      <MemberSignature Language="C#" Value="protected virtual void OnImeChange (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnImeChange(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnImeChange(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnImeChange (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnImeChange(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnImeChange : EventArgs -&gt; unit&#xA;override this.OnImeChange : EventArgs -&gt; unit" Usage="richTextBox.OnImeChange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.RichTextBox.ImeChange" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。  
  
 <xref:System.Windows.Forms.RichTextBox.OnImeChange%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.RichTextBox.OnImeChange(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.RichTextBox.OnImeChange(System.EventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.ImeChange" />
      </Docs>
    </Member>
    <Member MemberName="OnLinkClicked">
      <MemberSignature Language="C#" Value="protected virtual void OnLinkClicked (System.Windows.Forms.LinkClickedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLinkClicked(class System.Windows.Forms.LinkClickedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnLinkClicked(System.Windows.Forms.LinkClickedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLinkClicked (e As LinkClickedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLinkClicked(System::Windows::Forms::LinkClickedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLinkClicked : System.Windows.Forms.LinkClickedEventArgs -&gt; unit&#xA;override this.OnLinkClicked : System.Windows.Forms.LinkClickedEventArgs -&gt; unit" Usage="richTextBox.OnLinkClicked e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LinkClickedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.LinkClickedEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.RichTextBox.LinkClicked" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。  
  
 <xref:System.Windows.Forms.RichTextBox.OnLinkClicked%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.RichTextBox.OnLinkClicked(System.Windows.Forms.LinkClickedEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.RichTextBox.OnLinkClicked(System.Windows.Forms.LinkClickedEventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.LinkClicked" />
      </Docs>
    </Member>
    <Member MemberName="OnProtected">
      <MemberSignature Language="C#" Value="protected virtual void OnProtected (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnProtected(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnProtected(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnProtected (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnProtected(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnProtected : EventArgs -&gt; unit&#xA;override this.OnProtected : EventArgs -&gt; unit" Usage="richTextBox.OnProtected e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.RichTextBox.Protected" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。  
  
 <xref:System.Windows.Forms.RichTextBox.OnProtected%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.RichTextBox.OnProtected(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.RichTextBox.OnProtected(System.EventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.Protected" />
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected override void OnRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnRightToLeftChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnRightToLeftChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnRightToLeftChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnRightToLeftChanged : EventArgs -&gt; unit" Usage="richTextBox.OnRightToLeftChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnSelectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectionChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectionChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnSelectionChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectionChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectionChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelectionChanged : EventArgs -&gt; unit&#xA;override this.OnSelectionChanged : EventArgs -&gt; unit" Usage="richTextBox.OnSelectionChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.RichTextBox.SelectionChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。  
  
 <xref:System.Windows.Forms.RichTextBox.OnSelectionChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.RichTextBox.OnSelectionChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.RichTextBox.OnSelectionChanged(System.EventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.SelectionChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected override void OnSystemColorsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSystemColorsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnSystemColorsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSystemColorsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSystemColorsChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnSystemColorsChanged : EventArgs -&gt; unit" Usage="richTextBox.OnSystemColorsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納しているオブジェクト。</param>
        <summary><see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected override void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnTextChanged : EventArgs -&gt; unit" Usage="richTextBox.OnTextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納するオブジェクト。</param>
        <summary><see cref="E:System.Windows.Forms.Control.TextChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVScroll">
      <MemberSignature Language="C#" Value="protected virtual void OnVScroll (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVScroll(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.OnVScroll(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnVScroll (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnVScroll(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnVScroll : EventArgs -&gt; unit&#xA;override this.OnVScroll : EventArgs -&gt; unit" Usage="richTextBox.OnVScroll e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.RichTextBox.VScroll" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、[処理とイベントの発生](~/docs/standard/events/index.md) を参照してください。  
  
 <xref:System.Windows.Forms.RichTextBox.OnVScroll%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.RichTextBox.OnVScroll(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基底クラスの <see cref="M:System.Windows.Forms.RichTextBox.OnVScroll(System.EventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Windows.Forms.RichTextBox.VScroll" />
      </Docs>
    </Member>
    <Member MemberName="Paste">
      <MemberSignature Language="C#" Value="public void Paste (System.Windows.Forms.DataFormats.Format clipFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Paste(class System.Windows.Forms.DataFormats/Format clipFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Paste(System.Windows.Forms.DataFormats.Format)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Paste (clipFormat As DataFormats.Format)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Paste(System::Windows::Forms::DataFormats::Format ^ clipFormat);" />
      <MemberSignature Language="F#" Value="override this.Paste : System.Windows.Forms.DataFormats.Format -&gt; unit" Usage="richTextBox.Paste clipFormat" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clipFormat" Type="System.Windows.Forms.DataFormats+Format" />
      </Parameters>
      <Docs>
        <param name="clipFormat">クリップボードから取得されるデータのクリップボード形式。</param>
        <summary>クリップボードの内容を指定したクリップボード形式で貼り付けます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、クリップボードのデータをコントロールに貼り付けることができます。 このバージョンの <xref:System.Windows.Forms.RichTextBox.Paste%2A> メソッドは、指定されたクリップボード形式でテキストのみを貼り付けることができるため、<xref:System.Windows.Forms.TextBoxBase.Paste%2A?displayProperty=nameWithType> メソッドとは異なります。 <xref:System.Windows.Forms.RichTextBox.CanPaste%2A> メソッドを使用して、クリップボード内のデータが指定されたクリップボード形式であるかどうかを判断できます。 その後、このバージョンの <xref:System.Windows.Forms.RichTextBox.Paste%2A> メソッドを呼び出して、貼り付け操作が適切なデータ形式で行われるようにすることができます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Windows.Forms.RichTextBox.Paste%2A> メソッドを使用して、<xref:System.Windows.Forms.RichTextBox> コントロールにビットマップを貼り付ける方法を示しています。 ファイルからビットマップを開いた後、この例では、<xref:System.Windows.Forms.Clipboard.SetDataObject%2A> メソッドを使用して、ビットマップを Windows クリップボードにコピーします。 最後に、この例では、<xref:System.Drawing.Bitmap> オブジェクトの書式を取得し、その書式を <xref:System.Windows.Forms.RichTextBox> コントロールに貼り付けることができることを確認し、<xref:System.Windows.Forms.RichTextBox.Paste%2A> メソッドを使用してデータを貼り付けます。  
  
 [!code-cpp[RichText_Paste#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichText_Paste/CPP/form1.cpp#1)]
 [!code-csharp[RichText_Paste#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichText_Paste/CS/form1.cs#1)]
 [!code-vb[RichText_Paste#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichText_Paste/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">クリップボードから読み取りを行う場合。 関連付けられた列挙型: <see cref="T:System.Security.Permissions.UIPermissionClipboard" />の <see langword="AllClipboard" /> 値。</permission>
        <altmember cref="M:System.Windows.Forms.RichTextBox.CanPaste(System.Windows.Forms.DataFormats.Format)" />
        <altmember cref="M:System.Windows.Forms.TextBoxBase.Paste" />
        <altmember cref="T:System.Windows.Forms.DataFormats.Format" />
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessCmdKey (ref System.Windows.Forms.Message m, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; m, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessCmdKey (ByRef m As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessCmdKey(System::Windows::Forms::Message % m, System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.ProcessCmdKey : Message * System.Windows.Forms.Keys -&gt; bool" Usage="richTextBox.ProcessCmdKey (m, keyData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="m">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</param>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値の 1 つ。</param>
        <summary>コマンド キーを処理します。</summary>
        <returns>文字がコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="Protected">
      <MemberSignature Language="C#" Value="public event EventHandler Protected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Protected" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.Protected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Protected As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Protected;" />
      <MemberSignature Language="F#" Value="member this.Protected : EventHandler " Usage="member this.Protected : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール内の保護されたテキストをユーザーが変更しようとすると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションでこのイベントのイベントハンドラーを作成して、コントロールで保護済みとしてマークされているテキストをユーザーが変更しようとしたときを判断できます。 イベントハンドラーを使用すると、ユーザーが変更しようとしているテキストが保護されていることをユーザーに通知したり、ユーザーがテキストに適切な変更を加えることができるダイアログボックスを表示したりすることができます。 たとえば、保護された領域が日付である場合は、ユーザーがコントロールのテキストに適用できる日付を選択できるダイアログボックスを表示できます。  
  
 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーは、<xref:System.Windows.Forms.RichTextBox.Protected> イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。  
  
 コード例を実行するには、`RichTextBox1`という <xref:System.Windows.Forms.RichTextBox> 型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが <xref:System.Windows.Forms.RichTextBox.Protected> イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#543](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#543)]
 [!code-vb[System.Windows.Forms.EventExamples#543](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#543)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.Forms.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.Forms.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このイベントは使用されません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このイベントは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Redo">
      <MemberSignature Language="C#" Value="public void Redo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Redo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.Redo" />
      <MemberSignature Language="VB.NET" Value="Public Sub Redo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Redo();" />
      <MemberSignature Language="F#" Value="member this.Redo : unit -&gt; unit" Usage="richTextBox.Redo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールで最後に元に戻された操作を再適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 その後、<xref:System.Windows.Forms.RichTextBox.Redo%2A> メソッドを使用して、最後の元に戻す操作をコントロールに再適用できます。 <xref:System.Windows.Forms.RichTextBox.CanRedo%2A> メソッドを使用すると、ユーザーが最後に元に戻した操作をコントロールに再適用できるかどうかを判断できます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.RichTextBox.CanRedo%2A> プロパティと <xref:System.Windows.Forms.RichTextBox.RedoActionName%2A> プロパティ、および <xref:System.Windows.Forms.RichTextBox.Redo%2A> メソッドを使用して、テキストの削除以外の任意のアクションに対してやり直し操作を制限する方法を示します。 この例では、<xref:System.Windows.Forms.RichTextBox> コントロールを含むフォームがあり、この例のコードが呼び出される前に、<xref:System.Windows.Forms.RichTextBox> 内の操作が実行され、元に戻されていることが必要です。  
  
 [!code-cpp[RichTextBox.RedoAction#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.RedoAction/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.RedoAction#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.RedoAction/CS/form1.cs#1)]
 [!code-vb[RichTextBox.RedoAction#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.RedoAction/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.CanRedo" />
      </Docs>
    </Member>
    <Member MemberName="RedoActionName">
      <MemberSignature Language="C#" Value="public string RedoActionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RedoActionName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.RedoActionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RedoActionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RedoActionName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RedoActionName : string" Usage="System.Windows.Forms.RichTextBox.RedoActionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Windows.Forms.RichTextBox.Redo" /> メソッドが呼び出された場合に、コントロールに再適用できるアクションの名前を取得します。</summary>
        <value><see cref="M:System.Windows.Forms.RichTextBox.Redo" /> メソッドが呼び出された場合に実行されるアクションの名前を表す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティが空の文字列 ("") を返す場合、コントロールに再適用できる操作はありません。 このメソッドを使用して、<xref:System.Windows.Forms.RichTextBox> コントロールで最後に元に戻された操作を判断し、<xref:System.Windows.Forms.RichTextBox.Redo%2A> メソッドの呼び出しが行われたときにコントロールに再適用することができます。 <xref:System.Windows.Forms.RichTextBox.CanRedo%2A> プロパティを使用して、コントロールに再適用する操作があるかどうかを確認できます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.RichTextBox.CanRedo%2A> プロパティと <xref:System.Windows.Forms.RichTextBox.RedoActionName%2A> プロパティ、および <xref:System.Windows.Forms.RichTextBox.Redo%2A> メソッドを使用して、テキストの削除以外の任意のアクションに対してやり直し操作を制限する方法を示します。 この例では、<xref:System.Windows.Forms.RichTextBox> コントロールを含むフォームがあり、この例のコードが呼び出される前に、<xref:System.Windows.Forms.RichTextBox> 内の操作が実行され、元に戻されていることが必要です。  
  
 [!code-cpp[RichTextBox.RedoAction#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.RedoAction/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.RedoAction#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.RedoAction/CS/form1.cs#1)]
 [!code-vb[RichTextBox.RedoAction#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.RedoAction/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.CanRedo" />
        <altmember cref="M:System.Windows.Forms.RichTextBox.Redo" />
      </Docs>
    </Member>
    <Member MemberName="RichTextShortcutsEnabled">
      <MemberSignature Language="C#" Value="public bool RichTextShortcutsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RichTextShortcutsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.RichTextShortcutsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property RichTextShortcutsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RichTextShortcutsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RichTextShortcutsEnabled : bool with get, set" Usage="System.Windows.Forms.RichTextBox.RichTextShortcutsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このプロパティは使用されません。</summary>
        <value>ショートカット キーが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightMargin">
      <MemberSignature Language="C#" Value="public int RightMargin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RightMargin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.RightMargin" />
      <MemberSignature Language="VB.NET" Value="Public Property RightMargin As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RightMargin { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.RightMargin : int with get, set" Usage="System.Windows.Forms.RichTextBox.RightMargin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> コントロール内の単一行のテキストのサイズを取得または設定します。</summary>
        <value>コントロール内の単一行のテキストのサイズ (ピクセル単位)。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 0より大きい値がコントロールに入力されると、コントロールの左側から指定されたピクセル数に、非表示の余白が配置されます。 入力したテキストがこの余白を超えると、コントロールのテキストの次の行に配置されます。 このプロパティは、コントロールに現在入力されているすべてのテキストと、プロパティの設定後にコントロールに入力された追加のテキストに影響します。 このプロパティを使用して、<xref:System.Windows.Forms.RichTextBox> コントロールに入力されたすべてのテキストの最大線幅を指定できます。  
  
   
  
## Examples  
 次のコード例は、テキストを拡大し、word がダブルクリックされたときにコントロールのテキスト内の単語を自動的に選択し、コントロールのクライアント領域の右側に余白を設定する <xref:System.Windows.Forms.RichTextBox> を作成する方法を示しています。 <xref:System.Windows.Forms.RichTextBox> コントロールの幅が小さい場合、このコードを使用すると、テキストの各文字がそれぞれの行に表示される <xref:System.Windows.Forms.RichTextBox> が作成されます。 この垂直方向の表示位置では、単語の任意の部分をクリックすると、テキストが垂直方向に表示されるという事実に関係なく、単語のすべての文字が選択されます。 この例では、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールを含むフォームが必要です。  
  
 [!code-cpp[RichTextBox.ZoomFactor#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.ZoomFactor#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CS/form1.cs#1)]
 [!code-vb[RichTextBox.ZoomFactor#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.ZoomFactor/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定した値が 0 未満でした。</exception>
      </Docs>
    </Member>
    <Member MemberName="Rtf">
      <MemberSignature Language="C#" Value="public string Rtf { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Rtf" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.Rtf" />
      <MemberSignature Language="VB.NET" Value="Public Property Rtf As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Rtf { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Rtf : string with get, set" Usage="System.Windows.Forms.RichTextBox.Rtf" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>すべてのリッチ テキスト形式 (RTF: Rich Text Format) コードを含む、<see cref="T:System.Windows.Forms.RichTextBox" /> コントロールのテキストを取得または設定します。</summary>
        <value>コントロール内の RTF 形式のテキスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用して、RTF 形式のテキストをコントロールに配置したり、コントロールのテキストで指定されている RTF 形式を使用してコントロールのテキストを抽出したりすることができます。 このプロパティは、通常、Microsoft Word や Windows ワードパッドなどの別の RTF ソースからコントロールに RTF テキストを割り当てるときに使用されます。  
  
 実行時に <xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティを変更した場合、書式設定のない未加工テキストのみが保持されます。  
  
 RTF コードについては、MSDN ライブラリ (https://msdn.microsoft.com/library) の「リッチテキスト形式 (RTF) 仕様 (バージョン 1.6)」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Text" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SaveFile">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> の内容をファイルに保存します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SaveFile">
      <MemberSignature Language="C#" Value="public void SaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.SaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SaveFile : string -&gt; unit" Usage="richTextBox.SaveFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">保存するファイルの名前と場所。</param>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> の内容をリッチ テキスト形式 (RTF: Rich Text Format) ファイルに保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> メソッドを使用すると、コントロールの内容全体を、Microsoft Word や Windows ワードパッドなどの他のプログラムで使用できる RTF ファイルに保存できます。 `path` パラメーターに渡されたファイル名が指定されたディレクトリに既に存在する場合、ファイルは予告なしに上書きされます。 <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドを使用して、ファイルの内容を <xref:System.Windows.Forms.RichTextBox>に読み込むことができます。  
  
> [!NOTE]
>  ASCII テキストなどの別の種類のファイル形式にコントロールの内容を保存するには、このメソッドの他のバージョンを使用します。このメソッドは、パラメーターとして <xref:System.Windows.Forms.RichTextBoxStreamType> 列挙型の値を受け取ります。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.RichTextBox> コントロールの内容を RTF ファイルに保存します。 この例では、<xref:System.Windows.Forms.SaveFileDialog> クラスを使用して、ユーザーから要求するダイアログ、保存するファイルのパスとファイル名を表示します。 このコードでは、コンテンツがリッチテキスト形式であると仮定してファイルを保存します。 ファイルが既に存在する場合は、自動的に上書きされます。 この例では、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールを持つ <xref:System.Windows.Forms.Form> クラスにコードが配置されている必要があります。  
  
 [!code-cpp[Classic RichTextBox.SaveFile Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.SaveFile Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.SaveFile Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.SaveFile Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.SaveFile Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.SaveFile Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">コントロールの内容をファイルに保存しているときにエラーが発生しました。</exception>
        <altmember cref="M:System.Windows.Forms.RichTextBox.LoadFile(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SaveFile">
      <MemberSignature Language="C#" Value="public void SaveFile (System.IO.Stream data, System.Windows.Forms.RichTextBoxStreamType fileType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveFile(class System.IO.Stream data, valuetype System.Windows.Forms.RichTextBoxStreamType fileType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.SaveFile(System.IO.Stream,System.Windows.Forms.RichTextBoxStreamType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveFile (data As Stream, fileType As RichTextBoxStreamType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveFile(System::IO::Stream ^ data, System::Windows::Forms::RichTextBoxStreamType fileType);" />
      <MemberSignature Language="F#" Value="member this.SaveFile : System.IO.Stream * System.Windows.Forms.RichTextBoxStreamType -&gt; unit" Usage="richTextBox.SaveFile (data, fileType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" />
        <Parameter Name="fileType" Type="System.Windows.Forms.RichTextBoxStreamType" />
      </Parameters>
      <Docs>
        <param name="data">保存先のファイルを格納しているデータ ストリーム。</param>
        <param name="fileType"><see cref="T:System.Windows.Forms.RichTextBoxStreamType" /> 値のいずれか 1 つ。</param>
        <summary>開いているデータ ストリームに <see cref="T:System.Windows.Forms.RichTextBox" /> コントロールの内容を保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このバージョンの <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> メソッドを使用すると、コントロールの内容全体を、既に開いているデータストリームに保存できます。 データストリームは、ファイルに情報を保存できます。 <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドを使用して、ファイルの内容を <xref:System.Windows.Forms.RichTextBox>に読み込むことができます。  
  
 このバージョンの <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> メソッドでは、<xref:System.IO.Stream> オブジェクトに送信される情報のデータ形式を指定することもできます。  
  
   
  
## Examples  
 次のコード例では、ストリームで <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> および <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドを使用する方法を示します。 また、<xref:System.Windows.Forms.FileDialog.FileName%2A?displayProperty=nameWithType>、<xref:System.Windows.Forms.FileDialog.DefaultExt%2A?displayProperty=nameWithType>、<xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>、および <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType> のメンバーの使用方法も示します。  
  
 これは、プロジェクトにコピーするときに実行する準備が整った完全な例です。  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="fileType" /> パラメーターに、無効なファイルの種類が指定されています。</exception>
        <exception cref="T:System.IO.IOException">コントロールの内容をファイルに保存しているときにエラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルを作成または変更します。 関連付けられた列挙型: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />の <see langword="Write" /> 値。</permission>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="M:System.Windows.Forms.RichTextBox.LoadFile(System.String)" />
        <altmember cref="T:System.Windows.Forms.RichTextBoxStreamType" />
      </Docs>
    </Member>
    <Member MemberName="SaveFile">
      <MemberSignature Language="C#" Value="public void SaveFile (string path, System.Windows.Forms.RichTextBoxStreamType fileType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveFile(string path, valuetype System.Windows.Forms.RichTextBoxStreamType fileType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.SaveFile(System.String,System.Windows.Forms.RichTextBoxStreamType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveFile (path As String, fileType As RichTextBoxStreamType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveFile(System::String ^ path, System::Windows::Forms::RichTextBoxStreamType fileType);" />
      <MemberSignature Language="F#" Value="member this.SaveFile : string * System.Windows.Forms.RichTextBoxStreamType -&gt; unit" Usage="richTextBox.SaveFile (path, fileType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="fileType" Type="System.Windows.Forms.RichTextBoxStreamType" />
      </Parameters>
      <Docs>
        <param name="path">保存するファイルの名前と場所。</param>
        <param name="fileType"><see cref="T:System.Windows.Forms.RichTextBoxStreamType" /> 値のいずれか 1 つ。</param>
        <summary>指定した種類のファイルに <see cref="T:System.Windows.Forms.RichTextBox" /> の内容を保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> メソッドを使用すると、コントロールの内容全体を、Microsoft Word や Windows ワードパッドなどの他のプログラムで使用できる RTF ファイルに保存できます。 `path` パラメーターに渡されたファイル名が指定されたディレクトリに既に存在する場合、ファイルは予告なしに上書きされます。 <xref:System.Windows.Forms.RichTextBox.LoadFile%2A> メソッドを使用して、ファイルの内容を <xref:System.Windows.Forms.RichTextBox>に読み込むことができます。  
  
 このバージョンの <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> メソッドを使用すると、コントロールの内容を保存するファイルの種類を指定できます。 この機能を使用すると、ファイルがコントロールの内容に基づいて適切な形式で保存されるようにすることができます。 たとえば、ドキュメントにフォントスタイルや色の違いがない場合は、`fileType` パラメーターを `RichTextBoxStreamType.PlainText`に設定することによって、ファイルを ASCII テキストファイルとして保存できます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.RichTextBox> の内容を ASCII テキストファイルに保存します。 この例では、<xref:System.Windows.Forms.SaveFileDialog> クラスを使用して、ユーザーからのパスとファイル名を要求するダイアログを表示します。 次に、コードはそのファイルにコントロールの内容を保存します。 この例では、このバージョンの <xref:System.Windows.Forms.RichTextBox.SaveFile%2A> メソッドを使用して、標準のリッチテキスト形式ではなく、ファイルを ASCII テキストファイルとして保存するように指定しています。 この例では、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールを持つ <xref:System.Windows.Forms.Form> クラスにコードが配置されている必要があります。  
  
 [!code-cpp[Classic RichTextBox.SaveFile1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.SaveFile1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.SaveFile1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.SaveFile1 Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.SaveFile1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.SaveFile1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="fileType" /> パラメーターに、無効なファイルの種類が指定されています。</exception>
        <exception cref="T:System.IO.IOException">コントロールの内容をファイルに保存しているときにエラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルを作成または変更します。 関連付けられた列挙型: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />の <see langword="Write" /> 値。</permission>
        <altmember cref="M:System.Windows.Forms.RichTextBox.LoadFile(System.String)" />
        <altmember cref="T:System.Windows.Forms.RichTextBoxStreamType" />
      </Docs>
    </Member>
    <Member MemberName="ScrollBars">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.RichTextBoxScrollBars ScrollBars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RichTextBoxScrollBars ScrollBars" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.ScrollBars" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollBars As RichTextBoxScrollBars" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::RichTextBoxScrollBars ScrollBars { System::Windows::Forms::RichTextBoxScrollBars get(); void set(System::Windows::Forms::RichTextBoxScrollBars value); };" />
      <MemberSignature Language="F#" Value="member this.ScrollBars : System.Windows.Forms.RichTextBoxScrollBars with get, set" Usage="System.Windows.Forms.RichTextBox.ScrollBars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RichTextBoxScrollBars</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> コントロールに表示するスクロール バーの種類を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.RichTextBoxScrollBars" /> 値のいずれか 1 つ。 既定値は、<see langword="RichTextBoxScrollBars.Both" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用すると、水平方向および垂直方向のスクロールバーを <xref:System.Windows.Forms.RichTextBox> コントロールのユーザーに提供して、コントロールの物理的な寸法の外側にあるコントロール内のテキストをスクロールできるようにすることができます。 このプロパティを使用して、コントロールのスクロールバーを削除して、コントロールの内容のスクロールを制限することもできます。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.RichTextBox.ScrollBars%2A> プロパティの値に関係なく、<xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> が `true`場合、水平スクロールバーは表示されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定した値が <see cref="T:System.Windows.Forms.RichTextBoxScrollBars" /> 列挙体に定義されていません。</exception>
        <altmember cref="T:System.Windows.Forms.RichTextBoxScrollBars" />
      </Docs>
    </Member>
    <Member MemberName="SelectedRtf">
      <MemberSignature Language="C#" Value="public string SelectedRtf { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedRtf" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectedRtf" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedRtf As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectedRtf { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedRtf : string with get, set" Usage="System.Windows.Forms.RichTextBox.SelectedRtf" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールで現在選択されているリッチ テキスト形式 (RTF: Rich Text Format) のテキストを取得または設定します。</summary>
        <value>コントロール内で選択されている RTF 形式のテキスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用すると、RTF 書式設定コードを含めて、コントロール内で選択されているテキストを取得できます。 このプロパティを使用して、コントロールからテキストをコピーし、書式設定を使用して、Microsoft Word や Windows ワードパッドなどの RTF 形式のテキストを受け入れる他のアプリケーションにテキストを貼り付けることができます。 RTF 形式のコードを使用せずに選択したテキストを取得するには、<xref:System.Windows.Forms.TextBoxBase.SelectedText%2A> プロパティを使用します。  
  
 現在テキストが選択されていない場合は、このプロパティで指定したテキストが挿入ポイントに挿入されます。 テキストが選択されている場合、このプロパティに割り当てられたテキストは、選択したテキストに置き換えられます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.Rtf" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.SelectedText" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Text" />
      </Docs>
    </Member>
    <Member MemberName="SelectedText">
      <MemberSignature Language="C#" Value="public override string SelectedText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectedText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SelectedText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedText : string with get, set" Usage="System.Windows.Forms.RichTextBox.SelectedText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> 内で選択されているテキストを取得または設定します。</summary>
        <value>コントロールで選択されているテキストを表す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.RichTextBox.SelectionBullet%2A> プロパティを <xref:System.Windows.Forms.RichTextBox.SelectionFont%2A>、<xref:System.Windows.Forms.RichTextBox.SelectedText%2A>、および <xref:System.Windows.Forms.RichTextBox.SelectionColor%2A> プロパティと共に使用して、<xref:System.Windows.Forms.RichTextBox> コントロールに箇条書きリストを作成する方法を示します。 この例では、`richTextBox1` という名前の <xref:System.Windows.Forms.RichTextBox> コントロールがフォーム上に作成されている必要があります。  
  
 [!code-cpp[RichTextBox.SelectionBullet#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionBullet/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionBullet#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionBullet/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionBullet#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionBullet/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HorizontalAlignment SelectionAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.HorizontalAlignment SelectionAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionAlignment As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HorizontalAlignment SelectionAlignment { System::Windows::Forms::HorizontalAlignment get(); void set(System::Windows::Forms::HorizontalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionAlignment : System.Windows.Forms.HorizontalAlignment with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在選択されている内容またはカーソル位置に適用される配置を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.HorizontalAlignment" /> 値のいずれか 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントロールで段落が選択されていない場合、このプロパティを設定すると、挿入ポイントが表示されている段落と、alignment プロパティが設定されている段落の後に作成された段落に配置設定が適用されます。 たとえば、<xref:System.Windows.Forms.RichTextBox> コントロールに2つの段落があり、2番目の段落内に挿入ポイントがある場合などです。 <xref:System.Windows.Forms.RichTextBox.SelectionAlignment%2A> プロパティを `HorizontalAlignment.Center`に設定すると、カーソル位置にある段落がコントロール内で中央に配置されます。 2番目の段落の後に3番目の段落が作成された場合は、コントロールの中央に配置されます。  
  
 プロパティが設定されているときにコントロール内で選択した場合は、選択したすべての段落がこのプロパティの設定に基づいて調整されます。 このプロパティを使用すると、<xref:System.Windows.Forms.RichTextBox>で作成されるドキュメント内の段落を揃えることができます。 たとえば、文書内のすべての段落を中央揃えにする場合は、コントロール内のすべての段落を選択し、<xref:System.Windows.Forms.RichTextBox.SelectionAlignment%2A> プロパティを `HorizontalAlignment.Center`に設定します。  
  
> [!NOTE]
>  テキスト選択に複数の段落が配置されている場合、<xref:System.Windows.Forms.RichTextBox.SelectionAlignment%2A> は `SelectionAlignment.Left` を返します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.RichTextBox>内のテキストを配置する方法を示します。 この例では、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールがフォームに追加されている必要があります。  
  
 [!code-cpp[RichTextBox.SelectionAlignment#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionAlignment/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionAlignment#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionAlignment/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionAlignment#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionAlignment/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定した値が <see cref="T:System.Windows.Forms.HorizontalAlignment" /> クラスに定義されている値ではありません。</exception>
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
      </Docs>
    </Member>
    <Member MemberName="SelectionBackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color SelectionBackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color SelectionBackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionBackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color SelectionBackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionBackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionBackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> コントロール内でテキストが選択されている場合に、テキストの色を取得または設定します。</summary>
        <value>テキストが選択されている場合は、そのテキストの色を表す <see cref="T:System.Drawing.Color" />。 既定値は <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> プロパティの値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.RichTextBox>内の選択したテキストの色を取得または設定するには、<xref:System.Windows.Forms.RichTextBox.SelectionBackColor%2A> を使用します。 現在テキストが選択されていない場合、<xref:System.Windows.Forms.RichTextBox.SelectionBackColor%2A> プロパティはカレットの現在位置に適用されます。 この位置から入力された文字には、指定された <xref:System.Windows.Forms.RichTextBox.SelectionBackColor%2A>が含まれます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionBullet">
      <MemberSignature Language="C#" Value="public bool SelectionBullet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SelectionBullet" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionBullet" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionBullet As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SelectionBullet { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionBullet : bool with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionBullet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在選択されている内容またはカーソル位置に箇条書きスタイルを適用するかどうかを示す値を取得または設定します。</summary>
        <value>現在選択されている内容またはカーソル位置に箇条書きスタイルが適用されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 テキストが選択されていない場合は、現在の挿入ポイントとユーザーが挿入ポイントの後に入力したすべての段落に箇条書きスタイルが適用されます。 箇条書きスタイルは、挿入ポイントが移動するまで、またはユーザーが空の箇条書き項目で Enter キーを押すと、コントロールのテキストに適用されます。  
  
 このプロパティが設定されている場合にコントロール内でテキストが選択されると、選択したテキスト内のすべての段落が箇条書きの箇条書き項目に変換されます。 このプロパティを使用して、<xref:System.Windows.Forms.RichTextBox> コントロールで作成するドキュメント内に箇条書きのリストを作成できます。  
  
 <xref:System.Windows.Forms.RichTextBox.BulletIndent%2A> プロパティを使用すると、行頭文字と箇条書き項目のテキストの間に適用するインデント幅を指定できます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.RichTextBox.SelectionBullet%2A> プロパティを <xref:System.Windows.Forms.RichTextBox.SelectionFont%2A>、<xref:System.Windows.Forms.RichTextBox.SelectedText%2A>、および <xref:System.Windows.Forms.RichTextBox.SelectionColor%2A> プロパティと共に使用して、<xref:System.Windows.Forms.RichTextBox> コントロールに箇条書きリストを作成する方法を示します。 この例では、`richTextBox1` という名前の <xref:System.Windows.Forms.RichTextBox> コントロールがフォーム上に作成されている必要があります。  
  
 [!code-cpp[RichTextBox.SelectionBullet#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionBullet/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionBullet#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionBullet/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionBullet#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionBullet/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.BulletIndent" />
      </Docs>
    </Member>
    <Member MemberName="SelectionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.SelectionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectionChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectionChanged;" />
      <MemberSignature Language="F#" Value="member this.SelectionChanged : EventHandler " Usage="member this.SelectionChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール内で選択されているテキストが変更されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントのイベントハンドラーを作成して、ユーザーがコントロール内のテキスト選択を変更した日時を確認できます。 このイベントのイベントハンドラーを使用すると、ユーザーがアプリケーション内でタスクを完了するまでテキストを選択したままにすることができます。  
  
 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーは、<xref:System.Windows.Forms.RichTextBox.SelectionChanged> イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。  
  
 コード例を実行するには、`RichTextBox1`という <xref:System.Windows.Forms.RichTextBox> 型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが <xref:System.Windows.Forms.RichTextBox.SelectionChanged> イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#544](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#544)]
 [!code-vb[System.Windows.Forms.EventExamples#544](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#544)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionCharOffset">
      <MemberSignature Language="C#" Value="public int SelectionCharOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectionCharOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionCharOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionCharOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectionCharOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionCharOffset : int with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionCharOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのテキストが、ベースラインより上に上付き文字として表示されるのか、ベースラインより下に下付き文字として表示されるのかを示す値を取得または設定します。</summary>
        <value>文字オフセットを指定する数値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの値は、-2000 ~ 2000 の範囲で指定する必要があります。  
  
 このプロパティがゼロに設定されている場合、テキストはベースラインに表示されます。 正の数値の場合は、ベースラインの上にあるテキスト選択を上げるために使用するピクセル数を数値で指定します。 負の数の場合、この数値は、テキスト選択の添字となるピクセル数を指定します。 このプロパティを使用して、テキストを上付き文字または下付き文字として指定できます。  
  
 テキストが選択されていない場合、現在の挿入ポイントとユーザーが挿入ポイントの後に入力するすべてのテキストにオフセットが適用されます。 文字オフセットは、プロパティが別の値に変更されるか、挿入ポイントがコントロール内の別のセクションに移動するまで適用されます。  
  
 コントロール内でテキストが選択されている場合、選択したテキストとテキストの選択後に入力したテキストには、このプロパティの値が適用されます。 このプロパティを使用して、このようなアプリケーションの上付き文字と下付き文字を数式として作成できます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Windows.Forms.RichTextBox.SelectionCharOffset%2A> プロパティを使用して、<xref:System.Windows.Forms.RichTextBox> 内に上付き文字と下付き文字を指定する方法を示しています。 この例では、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールがフォームに追加されている必要があります。  
  
 [!code-cpp[RichTextBox.SelectionCharOffset#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionCharOffset/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionCharOffset#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionCharOffset/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionCharOffset#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionCharOffset/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定した値が -2000 未満であるか、2000 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectionColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color SelectionColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color SelectionColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionColor" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color SelectionColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在選択されているテキストまたはカーソル位置のテキストの色を取得または設定します。</summary>
        <value>現在選択されているテキストまたはカーソル位置以降に入力されるテキストに適用される色を表す <see cref="T:System.Drawing.Color" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のテキスト選択に複数の色が指定されている場合、このプロパティは `Color.Empty`を返します。 現在テキストが選択されていない場合は、このプロパティで指定したテキストの色が、現在の挿入ポイントと、挿入ポイントの後にコントロールに入力されたすべてのテキストに適用されます。 テキストの色の設定は、プロパティが別の色に変更されるか、挿入ポイントがコントロール内の別のセクションに移動するまで適用されます。  
  
 コントロール内でテキストが選択されている場合、選択したテキストとテキストの選択後に入力したテキストには、このプロパティの値が適用されます。 このプロパティを使用して、<xref:System.Windows.Forms.RichTextBox>内のテキストの色を変更できます。  
  
 コントロールでテキストを太字にするには、<xref:System.Windows.Forms.RichTextBox.SelectionFont%2A> プロパティを使用して、太字のフォントスタイルが指定された新しいフォントを割り当てます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.RichTextBox> コントロールの現在の挿入ポイントの後に入力された現在のテキストまたはテキストの色を指定するために、ユーザーに <xref:System.Windows.Forms.ColorDialog> を表示します。 この例では、例で定義されているメソッドが、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールを含む <xref:System.Windows.Forms.Form> クラスに追加されている必要があります。  
  
 [!code-cpp[Classic RichTextBox.SelectionColor Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.SelectionColor Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.SelectionColor Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.SelectionColor Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.SelectionColor Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.SelectionColor Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionFont" />
        <altmember cref="M:System.Windows.Forms.TextBoxBase.Select(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SelectionFont">
      <MemberSignature Language="C#" Value="public System.Drawing.Font SelectionFont { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font SelectionFont" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionFont" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionFont As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Font ^ SelectionFont { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionFont : System.Drawing.Font with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在選択されているテキストまたはカーソル位置のフォントを取得または設定します。</summary>
        <value>現在選択されているテキストまたはカーソル位置以降に入力されるテキストに適用されるフォントを表す <see cref="T:System.Drawing.Font" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のテキスト選択に複数のフォントが指定されている場合、このプロパティは `null`ます。 現在テキストが選択されていない場合は、このプロパティで指定したフォントが現在の挿入ポイントと、挿入ポイントの後にコントロールに入力されたすべてのテキストに適用されます。 フォントの設定は、プロパティが別のフォントに変更されるか、挿入ポイントがコントロール内の別のセクションに移動するまで適用されます。  
  
 コントロール内でテキストが選択されている場合、選択したテキストとテキストの選択後に入力したテキストには、このプロパティの値が適用されます。 このプロパティを使用して、<xref:System.Windows.Forms.RichTextBox>内のテキストのフォントスタイルを変更できます。 コントロール内のテキストを太字、斜体、下線付きにすることができます。 テキストのサイズとテキストに適用されるフォントを変更することもできます。  
  
 コントロール内のテキストの色を変更するには、<xref:System.Windows.Forms.RichTextBox.SelectionColor%2A> プロパティを使用します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.RichTextBox> コントロール内の挿入ポイントの後に入力されたテキスト選択またはテキストの現在のフォント太字スタイル設定を変更します。 この例では、コードが <xref:System.Windows.Forms.Form>内のメソッド内に含まれている必要があります。 また、この例では、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox>が <xref:System.Windows.Forms.Form>に追加されている必要もあります。  
  
 [!code-cpp[Classic RichTextBox.SelectionFont Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic RichTextBox.SelectionFont Example/CPP/source.cpp#1)]
 [!code-csharp[Classic RichTextBox.SelectionFont Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic RichTextBox.SelectionFont Example/CS/source.cs#1)]
 [!code-vb[Classic RichTextBox.SelectionFont Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic RichTextBox.SelectionFont Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionColor" />
        <altmember cref="M:System.Windows.Forms.TextBoxBase.Select(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SelectionHangingIndent">
      <MemberSignature Language="C#" Value="public int SelectionHangingIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectionHangingIndent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionHangingIndent" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionHangingIndent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectionHangingIndent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionHangingIndent : int with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionHangingIndent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>選択されている段落の最初のテキスト行の左端から、同じ段落の後続行の左端までの距離を取得または設定します。</summary>
        <value>現在選択されているテキストまたはカーソル位置に適用される、ぶら下げインデントの幅 (ピクセル単位)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在テキストが選択されていない場合は、挿入ポイントが表示されている段落と、挿入ポイントの後にコントロールに入力されたすべてのテキストに、ぶら下げインデントが適用されます。 ぶら下げインデントの設定は、プロパティが別の値に変更されるか、挿入ポイントがコントロール内の別の段落に移動されるまで適用されます。  
  
 コントロール内でテキストが選択されている場合、選択したテキストとテキストの選択後に入力したテキストには、このプロパティの値が適用されます。 このプロパティを使用して、段落にぶら下げインデントを適用できます。  
  
 段落選択の最初の行のインデントを設定するには、<xref:System.Windows.Forms.RichTextBox.SelectionIndent%2A> プロパティを使用します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Windows.Forms.RichTextBox.SelectionHangingIndent%2A> プロパティを使用して、<xref:System.Windows.Forms.RichTextBox> 内でぶら下げインデントを指定する方法を示しています。 この例では、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールがフォームに追加されている必要があります。  
  
 [!code-cpp[RichTextBox.SelectionHangingIndent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionHangingIndent/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionHangingIndent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionHangingIndent/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionHangingIndent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionHangingIndent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionIndent" />
      </Docs>
    </Member>
    <Member MemberName="SelectionIndent">
      <MemberSignature Language="C#" Value="public int SelectionIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectionIndent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionIndent" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionIndent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectionIndent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionIndent : int with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionIndent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>選択が開始される行のインデントの長さ (ピクセル単位) を取得または設定します。</summary>
        <value>現在選択されているテキストの左、またはカーソル位置の左に適用されているインデントの現在の幅 (ピクセル単位)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在テキストが選択されていない場合は、挿入ポイントが表示されている段落と、挿入ポイントの後にコントロールに入力されたすべてのテキストにインデント設定が適用されます。 インデントの設定は、プロパティが別の値に変更されるか、または挿入ポイントがコントロール内の別の段落に移動されるまで適用されます。  
  
 コントロール内でテキストが選択されている場合、選択したテキストとテキストの選択後に入力したテキストには、このプロパティの値が適用されます。 このプロパティを使用して、<xref:System.Windows.Forms.RichTextBox>のドキュメントに含まれている段落をインデントすることができます。 このプロパティを <xref:System.Windows.Forms.RichTextBox.SelectionRightIndent%2A> と組み合わせて使用すると、段落に表示される段落を作成できます。  
  
 コントロールの段落にぶら下げインデントを作成するには、<xref:System.Windows.Forms.RichTextBox.SelectionHangingIndent%2A> プロパティを使用します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Windows.Forms.RichTextBox.SelectionIndent%2A> プロパティを使用して、<xref:System.Windows.Forms.RichTextBox> 内でインデントされたテキストを指定する方法を示しています。 この例では、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールがフォームに追加されている必要があります。  
  
 [!code-cpp[RichTextBox.SelectionIndent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionIndent/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionIndent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionIndent/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionIndent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionIndent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionRightIndent" />
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectionHangingIndent" />
      </Docs>
    </Member>
    <Member MemberName="SelectionLength">
      <MemberSignature Language="C#" Value="public override int SelectionLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectionLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectionLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int SelectionLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionLength : int with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール内で選択されている文字の数を取得または設定します。</summary>
        <value>テキスト ボックス内で選択されている文字の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用すると、選択したテキストに対して操作を実行する前に、テキストボックスコントロールで現在選択されている文字があるかどうかを確認できます。 このプロパティを使用して、`for` ループで1つの文字のタスクを実行するときに選択される文字の合計数 (スペースを含む) を決定することもできます。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Windows.Forms.RichTextBox.SelectionLength%2A> プロパティを使用して、<xref:System.Windows.Forms.RichTextBox>内でテキストが選択されているかどうかを判断する方法を示しています。 この例では、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールがフォームに追加されている必要があります。 また、この例では、`richTextBox1` にコントロールで選択されているテキストが含まれている必要があります。  
  
 [!code-cpp[RichTextBox.SelectionLength#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionLength/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionLength#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionLength/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionLength#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionLength/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.SelectionStart" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.SelectedText" />
      </Docs>
    </Member>
    <Member MemberName="SelectionProtected">
      <MemberSignature Language="C#" Value="public bool SelectionProtected { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SelectionProtected" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionProtected" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionProtected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SelectionProtected { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionProtected : bool with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionProtected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在選択されているテキストが保護されているかどうかを示す値を取得または設定します。</summary>
        <value>現在の選択内容に対して変更を行うことができない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在テキストが選択されていない場合は、挿入ポイントが表示されている段落と、挿入ポイントの後にコントロールに入力されたすべてのテキストに保護設定が適用されます。 保護の設定は、プロパティが別の値に変更されるか、挿入ポイントがコントロール内の別の段落に移動されるまで適用されます。  
  
 コントロール内でテキストが選択されている場合、選択したテキストとテキストの選択後に入力したテキストには、このプロパティの値が適用されます。 このプロパティを使用すると、ユーザーがコントロール内のテキストのセクションを変更できないようにすることができます。  
  
 このプロパティが `true`に設定されている場合、ユーザーが現在のテキスト選択を変更しようとすると、<xref:System.Windows.Forms.RichTextBox.Protected> イベントが発生します。  
  
> [!NOTE]
>  このプロパティは、コントロール内の選択範囲全体に保護されたコンテンツが含まれている場合にのみ `true` を返します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Windows.Forms.RichTextBox.SelectionProtected%2A> プロパティを使用して、<xref:System.Windows.Forms.RichTextBox> 内で保護されたテキストを指定する方法を示しています。 この例では、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールがフォームに追加されており、<xref:System.Windows.Forms.RichTextBox> コントロールに、"RichTextBox" という単語を含むテキストが追加されている必要があります。  
  
 [!code-cpp[RichTextBox.SelectionProtected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionProtected/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionProtected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionProtected/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionProtected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionProtected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.RichTextBox.Protected" />
      </Docs>
    </Member>
    <Member MemberName="SelectionRightIndent">
      <MemberSignature Language="C#" Value="public int SelectionRightIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectionRightIndent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionRightIndent" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionRightIndent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectionRightIndent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionRightIndent : int with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionRightIndent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> コントロールの右端から、選択されているテキストの右端または現在のカーソル位置に追加されたテキストの右端までの距離 (ピクセル単位)。</summary>
        <value>現在選択されている内容の右、またはカーソル位置の右に挿入されるインデント幅 (ピクセル単位)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在テキストが選択されていない場合は、挿入ポイントが表示されている段落と、挿入ポイントの後にコントロールに入力されたすべてのテキストにインデント設定が適用されます。 インデントの設定は、プロパティが別の値に変更されるか、または挿入ポイントがコントロール内の別の段落に移動されるまで適用されます。  
  
 コントロール内でテキストが選択されている場合、選択したテキストとテキストの選択後に入力したテキストには、このプロパティの値が適用されます。 このプロパティを使用して、<xref:System.Windows.Forms.RichTextBox>のドキュメントに含まれている段落をインデントすることができます。 このプロパティを <xref:System.Windows.Forms.RichTextBox.SelectionIndent%2A> と組み合わせて使用すると、段落に表示される段落を作成できます。  
  
 コントロールの段落にぶら下げインデントを作成するには、<xref:System.Windows.Forms.RichTextBox.SelectionHangingIndent%2A> プロパティを使用します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Windows.Forms.RichTextBox.SelectionRightIndent%2A> プロパティを使用して <xref:System.Windows.Forms.RichTextBox> に右余白を作成する方法を示しています。 この例では、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールを含むフォームがあり、そのコード例がフォームのクラス内のイベントから呼び出されている必要があります。  
  
 [!code-cpp[RichTextBox.SelectionRightIndent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.SelectionRightIndent/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.SelectionRightIndent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.SelectionRightIndent/CS/form1.cs#1)]
 [!code-vb[RichTextBox.SelectionRightIndent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.SelectionRightIndent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionTabs">
      <MemberSignature Language="C#" Value="public int[] SelectionTabs { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] SelectionTabs" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionTabs" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionTabs As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ SelectionTabs { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionTabs : int[] with get, set" Usage="System.Windows.Forms.RichTextBox.SelectionTabs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> コントロール内のタブ ストップの絶対位置を取得または設定します。</summary>
        <value>各メンバーにピクセル単位でタブ オフセットが指定されている配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用すると、<xref:System.Windows.Forms.RichTextBox> コントロール内の現在のテキスト選択範囲内の各タブの間隔を格納する配列を取得できます。 このプロパティを使用して、テキスト選択範囲内の各タブのサイズを調整できます。 たとえば、ドキュメント内のタブスペースを調整する場合は、ドキュメント全体を選択し、[<xref:System.Windows.Forms.RichTextBox.SelectionTabs%2A>] プロパティを使用してタブスペースの一覧を取得できます。 次に、それらを新しい値に調整し、このプロパティに再割り当てできます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">配列に最大値である 32 個を上回る要素が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectionType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.RichTextBoxSelectionTypes SelectionType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RichTextBoxSelectionTypes SelectionType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.SelectionType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectionType As RichTextBoxSelectionTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::RichTextBoxSelectionTypes SelectionType { System::Windows::Forms::RichTextBoxSelectionTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectionType : System.Windows.Forms.RichTextBoxSelectionTypes" Usage="System.Windows.Forms.RichTextBox.SelectionType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RichTextBoxSelectionTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール内で選択されているデータの型を取得します。</summary>
        <value><see cref="T:System.Windows.Forms.RichTextBoxSelectionTypes" /> 値のビットごとの組み合わせ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用すると、現在選択されているコントロール内でタスクを実行するときに、選択内容を適切に処理するために、コントロールで現在選択されているデータの型を確認できます。 プロパティは、現在選択されているオブジェクトのさまざまな型を表す <xref:System.Windows.Forms.RichTextBoxSelectionTypes> 列挙型の値の任意の組み合わせを表すことができます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.RichTextBox.SelectedRtf" />
      </Docs>
    </Member>
    <Member MemberName="ShowSelectionMargin">
      <MemberSignature Language="C#" Value="public bool ShowSelectionMargin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowSelectionMargin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.ShowSelectionMargin" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowSelectionMargin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowSelectionMargin { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowSelectionMargin : bool with get, set" Usage="System.Windows.Forms.RichTextBox.ShowSelectionMargin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> 内に選択余白を表示するかどうかを示す値を取得または設定します。</summary>
        <value>コントロールで選択余白が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用して、ユーザーが <xref:System.Windows.Forms.RichTextBox>内のテキスト行を簡単に選択できるようにすることができます。 選択余白が <xref:System.Windows.Forms.RichTextBox>の左側に追加されます。 この余白により、ユーザーはコントロールの左側からテキストを簡単に選択できるようになります。 ユーザーは選択範囲内をクリックして1行のテキストを選択するか、ダブルクリックすると、ダブルクリックした行が含まれている段落全体を選択できます。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.RichTextBox.ShowSelectionMargin%2A> プロパティが `true`に設定されている場合、<xref:System.Windows.Forms.RichTextBox.ScrollBars%2A> プロパティを `RichTextBoxScrollBars.Horizontal`、`RichTextBoxScrollBars.Vertical`、または `RichTextBoxScrollBars.Both` に設定すると、スクロールバーが表示されません。 <xref:System.Windows.Forms.RichTextBox.ShowSelectionMargin%2A> プロパティが `true`に設定されているときにスクロールバーを表示するには、<xref:System.Windows.Forms.RichTextBox.ScrollBars%2A> プロパティを `RichTextBoxScrollBars.ForcedHorizontal`、`RichTextBoxScrollBars.ForcedVertical`、または `RichTextBoxScrollBars.ForcedBoth`に設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.RichTextBox.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リッチ テキスト ボックスの現在のテキストを取得または設定します。</summary>
        <value>コントロールに表示されるテキストです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.RichTextBox>に複数行のテキストを表示するには、<xref:System.Windows.Forms.TextBoxBase.Multiline%2A> プロパティを `true`に設定します。 複数行テキストボックスのテキストを読み取りまたは設定するには、<xref:System.Windows.Forms.TextBoxBase.Lines%2A> プロパティを使用します。 <xref:System.Windows.Forms.RichTextBox.Text%2A> プロパティは、<xref:System.Windows.Forms.RichTextBox>のコンテンツに適用される書式設定に関する情報を返しません。 リッチテキスト書式 (RTF) コードを取得するには、<xref:System.Windows.Forms.RichTextBox.Rtf%2A> プロパティを使用します。 <xref:System.Windows.Forms.RichTextBox> コントロールに入力できるテキストの量は、使用可能なシステムメモリによってのみ制限されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Lines" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public override int TextLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TextLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TextLength : int" Usage="System.Windows.Forms.RichTextBox.TextLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのテキストの長さを取得します。</summary>
        <value>コントロールのテキストに格納されている文字数。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.TextLength" />
      </Docs>
    </Member>
    <Member MemberName="UndoActionName">
      <MemberSignature Language="C#" Value="public string UndoActionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UndoActionName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.UndoActionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UndoActionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UndoActionName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UndoActionName : string" Usage="System.Windows.Forms.RichTextBox.UndoActionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Windows.Forms.TextBoxBase.Undo" /> メソッドが呼び出されたときに、コントロール内で元に戻すことができるアクションの名前を取得します。</summary>
        <value>元に戻すことができるアクションのテキスト名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用すると、元に戻すことができるコントロール内で実行された最後のアクションを特定できます。 このプロパティを使用すると、コントロールのユーザーが元に戻すことができる操作を制限できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.Undo" />
      </Docs>
    </Member>
    <Member MemberName="VScroll">
      <MemberSignature Language="C#" Value="public event EventHandler VScroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler VScroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.RichTextBox.VScroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VScroll As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ VScroll;" />
      <MemberSignature Language="F#" Value="member this.VScroll : EventHandler " Usage="member this.VScroll : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがコントロールの垂直スクロール バーをクリックすると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを処理する方法の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーは、<xref:System.Windows.Forms.RichTextBox.VScroll> イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポートするには、<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> を <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> に置き換えるか、複数行 <xref:System.Windows.Forms.TextBox>にメッセージを追加することを検討してください。  
  
 コード例を実行するには、`RichTextBox1`という <xref:System.Windows.Forms.RichTextBox> 型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが <xref:System.Windows.Forms.RichTextBox.VScroll> イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#545](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#545)]
 [!code-vb[System.Windows.Forms.EventExamples#545](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#545)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.RichTextBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc : Message -&gt; unit" Usage="richTextBox.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Windows メッセージ オブジェクト。</param>
        <summary>Windows メッセージを処理します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomFactor">
      <MemberSignature Language="C#" Value="public float ZoomFactor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ZoomFactor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.RichTextBox.ZoomFactor" />
      <MemberSignature Language="VB.NET" Value="Public Property ZoomFactor As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float ZoomFactor { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.ZoomFactor : single with get, set" Usage="System.Windows.Forms.RichTextBox.ZoomFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.RichTextBox" /> の現在のズーム レベルを取得または設定します。</summary>
        <value>コントロールの内容をズームする倍率。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの値は、1/64 (0.015625) から64.0 までの範囲で指定できます。 値1.0 は、コントロールにズームが適用されていないことを示します。 ドキュメントに TrueType フォントが含まれている場合、ズーム機能は最適に動作します。 コントロールのドキュメント内で TrueType 以外のフォントが使用されている場合、<xref:System.Windows.Forms.RichTextBox.ZoomFactor%2A> プロパティは最も近い整数値を使用します。 このプロパティを使用すると、<xref:System.Windows.Forms.RichTextBox> コントロールのユーザーは、表示するには小さすぎるドキュメントのセクションにズームしたり、表示を縮小して、画面に表示するドキュメントの数を増やすことができます。  
  
   
  
## Examples  
 次のコード例は、テキストを拡大し、word がダブルクリックされたときにコントロールのテキスト内の単語を自動的に選択し、コントロールのクライアント領域の右側に余白を設定する <xref:System.Windows.Forms.RichTextBox> を作成する方法を示しています。 <xref:System.Windows.Forms.RichTextBox> コントロールの幅が小さい場合、このコードを使用すると、テキストの各文字がそれぞれの行に表示される <xref:System.Windows.Forms.RichTextBox> が作成されます。 この垂直方向の表示位置では、単語の任意の部分をクリックすると、テキストが垂直方向に表示されるという事実に関係なく、単語のすべての文字が選択されます。 この例では、`richTextBox1`という名前の <xref:System.Windows.Forms.RichTextBox> コントロールを含むフォームが必要です。  
  
 [!code-cpp[RichTextBox.ZoomFactor#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.ZoomFactor#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.ZoomFactor/CS/form1.cs#1)]
 [!code-vb[RichTextBox.ZoomFactor#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.ZoomFactor/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定したズームの倍率が許容範囲外でした。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
