<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0a7f37ba73e81e82913dc12b6065540033aa024e" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75179084" /></Metadata><TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>形式に依存しないデータ転送機構を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IDataObject` インターフェイスは、<xref:System.Windows.Forms.Clipboard> クラスおよびドラッグアンドドロップ操作で使用されます。  
  
 クラスで実装された場合、<xref:System.Windows.Forms.IDataObject> メソッドを使用すると、ユーザーはクラスのインスタンス内の複数の形式でデータを格納できます。 データを複数の形式で格納することにより、対象アプリケーションでは、保存されているデータを取得できます。 <xref:System.Windows.Forms.IDataObject>のインスタンスにデータを格納するには、<xref:System.Windows.Forms.IDataObject.SetData%2A> メソッドを呼び出し、`format` パラメーターでデータ形式を指定します。 格納されているデータを取得時に別の形式に変換しない場合は、`autoConvert` パラメーターを `false` に設定します。 複数の形式でデータを格納するために、<xref:System.Windows.Forms.IDataObject> の1つのインスタンスで複数回 <xref:System.Windows.Forms.IDataObject.SetData%2A> を呼び出します。  
  
 <xref:System.Windows.Forms.IDataObject> から格納されたデータを取得するには、<xref:System.Windows.Forms.IDataObject.GetData%2A> メソッドを呼び出し、`format` パラメーターでデータ形式を指定します。 `autoConvert` パラメーターを `false` に設定すると、指定した形式で格納されたデータのみが取得されます。 格納されているデータを指定した形式に変換するには、`autoConvert` を `true`に設定するか、`autoConvert`を使用しないようにします。  
  
 <xref:System.Windows.Forms.IDataObject>に格納されているデータの形式を確認するには、次の <xref:System.Windows.Forms.IDataObject> 方法を使用します。  
  
-   <xref:System.Windows.Forms.IDataObject.GetFormats%2A> メソッドを呼び出して、データが使用可能なすべての形式の配列を取得します。 データが格納されている形式だけを取得するには、`autoConvert` パラメーターを `false` に設定します。 データが使用可能なすべての形式を取得するには、`autoConvert` を `true`に設定するか、またはこのパラメーターを使用しないようにします。  
  
-   <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> メソッドを呼び出して、格納されているデータが特定の形式で使用できるかどうかを確認します。 格納されているデータを指定した形式に変換しない場合は、`autoConvert` パラメーターを `false`に設定します。  
  
 このインターフェイスの実装については、<xref:System.Windows.Forms.DataObject> クラスを参照してください。 定義済みの <xref:System.Windows.Forms.Clipboard> データ形式については、<xref:System.Windows.Forms.DataFormats> クラスを参照してください。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したデータ形式に関連付けられているデータを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">取得するデータの形式。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <summary>指定したデータ形式に関連付けられているデータを取得します。</summary>
        <returns>指定した形式に関連付けられているデータ、または <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定された形式でデータを見つけることができない場合、データの形式への変換を試みます。 データを指定した形式に変換できない場合、このメソッドは `null`を返します。  
  
 データがに関連付けられているかどうか、または形式に変換できるかどうかを判断するには、<xref:System.Windows.Forms.IDataObject.GetData%2A>を呼び出す前に <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> を呼び出します。 このインスタンスに格納されているデータの有効な形式の一覧については、<xref:System.Windows.Forms.IDataObject.GetFormats%2A> を呼び出してください。  
  
> [!NOTE]
>  変換が許可されているかどうか、および要求された形式が格納されている形式と互換性があるかどうかを指定するようにデータを格納している場合は、別の形式に変換できます。 たとえば、Unicode として格納されているデータをテキストに変換できます。  
  
 このメソッドの実装については、「<xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 この例では、`GetData` メソッドの使用方法を示すために `IDataObject,` を実装する <xref:System.Windows.Forms.DataObject> クラスを使用します。 メソッドは、`Text` 形式に関連付けられている `myDataObject`に格納されているデータを取得するために使用されます。 この例では、`Form1` という名前の <xref:System.Windows.Forms.Form> と `textBox1`という名前の <xref:System.Windows.Forms.TextBox> が既に作成されていることを前提としています。  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : Type -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">取得するデータの形式を表す <see cref="T:System.Type" />。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <summary>指定したクラス型形式に関連付けられているデータを取得します。</summary>
        <returns>指定した形式に関連付けられているデータ、または <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定された形式でデータを見つけることができない場合、データの形式への変換を試みます。 データを指定した形式に変換できない場合、このメソッドは `null`を返します。  
  
 データがに関連付けられているかどうか、または形式に変換できるかどうかを判断するには、<xref:System.Windows.Forms.IDataObject.GetData%2A>を呼び出す前に <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> を呼び出します。 このインスタンスに格納されているデータの有効な形式の一覧については、<xref:System.Windows.Forms.IDataObject.GetFormats%2A> を呼び出してください。  
  
> [!NOTE]
>  変換が許可されているかどうか、および要求された形式が格納されている形式と互換性があるかどうかを指定するようにデータを格納している場合は、別の形式に変換できます。 たとえば、Unicode として格納されているデータをテキストに変換できます。  
  
 このメソッドの実装については、「<xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 この例では、`IDataObject`を実装する <xref:System.Windows.Forms.DataObject> クラスを使用して、`GetData` メソッドの使用方法を示します。 メソッドは、特定の種類の `myType`に関連付けられている `myObject`に格納されているデータを取得するために使用されます。 取得したデータの型がメッセージボックスに表示されます。 この例では、`Form1`という名前の <xref:System.Windows.Forms.Form> が既に作成されていることを前提としています。  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string * bool -&gt; obj" Usage="iDataObject.GetData (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">取得するデータの形式。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <param name="autoConvert">指定した形式にデータを変換する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定したデータ形式に関連付けられているデータを取得します。データを指定形式に変換できるかどうかを確認するためにブール値を使用します。</summary>
        <returns>指定した形式に関連付けられているデータ、または <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `autoConvert` パラメーターが `true` で、このメソッドが指定された形式でデータを見つけることができない場合は、データを形式に変換しようとします。 データを指定した形式に変換できない場合、またはデータが `autoConvert` パラメーターを `false`に設定して格納されている場合、このメソッドは `null`を返します。  
  
 `autoConvert` パラメーターが `false`の場合、このメソッドは指定された形式でデータを返すか、またはこの形式のデータが見つからない場合は `null` します。  
  
 データがに関連付けられているかどうか、または形式に変換できるかどうかを判断するには、<xref:System.Windows.Forms.IDataObject.GetData%2A>を呼び出す前に <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> を呼び出します。 このインスタンスに格納されているデータの有効な形式の一覧については、<xref:System.Windows.Forms.IDataObject.GetFormats%2A> を呼び出してください。  
  
> [!NOTE]
>  変換が許可されているかどうか、および要求された形式が格納されている形式と互換性があるかどうかを指定するようにデータを格納している場合は、別の形式に変換できます。 たとえば、Unicode として格納されているデータをテキストに変換できます。  
  
 このメソッドの実装については、「<xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 この例では、`IDataObject`を実装する <xref:System.Windows.Forms.DataObject> クラスを使用して、`GetData` メソッドの使用方法を示します。 この例では、`autoConvert` パラメーターを使用して、データ形式を変換するかどうかを指定する `DataObject`に格納されているデータを取得します。 まず、テキストデータを使用して `myDataObject` が作成されます。 次に、この例では、データを取得するために2回試行します。 最初の評価では、書式を文字列として指定し、`autoConvert` パラメーターを `false`に設定します。 この評価は失敗し、結果は "Message #1" という名前のメッセージボックスに表示されます。 2番目の試用版では、この例では、`autoConvert` パラメーターを `true`に設定して同じデータを取得します。 この評価は成功し、結果は "Message #2" という名前のメッセージボックスに表示されます。 この例では、`Form1`という名前の <xref:System.Windows.Forms.Form> が作成されていることを前提としています。  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>インスタンスに格納されているデータが、指定した形式に関連付けられているかどうかを確認します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">確認対象の形式。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <summary>インスタンスに格納されているデータが、指定した形式と関連付けられているかどうかや、その形式に変換できるかどうかを確認します。</summary>
        <returns>インスタンスに格納されているデータが、指定されている形式に関連付けられている場合や、その形式に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.IDataObject.GetData%2A>を呼び出す前に、この <xref:System.Windows.Forms.DataObject> に書式が存在するかどうかを判断するには、このメソッドを呼び出します。 このインスタンスで使用可能な形式の <xref:System.Windows.Forms.IDataObject.GetFormats%2A> を呼び出します。  
  
> [!NOTE]
>  変換が許可されているかどうか、および要求された形式が格納されている形式と互換性があるかどうかを指定するようにデータを格納している場合は、別の形式に変換できます。 たとえば、Unicode として格納されているデータをテキストに変換できます。  
  
 このメソッドの実装については、「<xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 この例では、`IDataObject`を実装する <xref:System.Windows.Forms.DataObject> クラスを使用して、`GetDataPresent` メソッドの使用方法を示します。 まず、文字列と `Text` 形式を使用してデータオブジェクトを作成します。 次に、データが `Text` 形式であることを確認し、結果をメッセージボックスに表示します。 この例では、`Form1`という名前の <xref:System.Windows.Forms.Form> が作成されていることを前提としています。  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : Type -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">確認対象となる形式を表す <see cref="T:System.Type" />。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <summary>インスタンスに格納されているデータが、指定した形式と関連付けられているかどうかや、その形式に変換できるかどうかを確認します。</summary>
        <returns>インスタンスに格納されているデータが、指定されている形式に関連付けられている場合や、その形式に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.IDataObject.GetData%2A>を呼び出す前に、この <xref:System.Windows.Forms.DataObject> に書式が存在するかどうかを判断するには、このメソッドを呼び出します。 このインスタンスで使用可能な形式の <xref:System.Windows.Forms.IDataObject.GetFormats%2A> を呼び出します。  
  
> [!NOTE]
>  変換が許可されているかどうか、および要求された形式が格納されている形式と互換性があるかどうかを指定するようにデータを格納している場合は、別の形式に変換できます。 たとえば、Unicode として格納されているデータをテキストに変換できます。  
  
 このメソッドの実装については、「<xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 この例では、`IDataObject`を実装する <xref:System.Windows.Forms.DataObject> クラスを使用して、`GetDataPresent` メソッドの使用方法を示します。 まず、コンポーネント (`myComponent`) を作成し、データオブジェクト (`myDataObject`) に格納します。 次に、指定したデータが `myDataObject`に格納されているかどうかを確認します。 テストで `true`が評価されると、結果がメッセージボックスに表示され、データ型がテキストボックスに表示されます。 この例では、`Form1` という名前の <xref:System.Windows.Forms.Form> と `textBox1`という名前の <xref:System.Windows.Forms.TextBox> が既に作成されていることを前提としています。  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string * bool -&gt; bool" Usage="iDataObject.GetDataPresent (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">確認対象の形式。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <param name="autoConvert">インスタンスに格納されているデータを指定した形式に変換できるかどうかを確認する場合は <see langword="true" />。データが指定した形式かどうかを確認する場合は <see langword="false" />。</param>
        <summary>インスタンスに格納されているデータが、指定した形式に関連付けられているかどうかを確認します。データを指定形式に変換できるかどうかを確認するためにブール値を使用します。</summary>
        <returns>データが指定した形式である場合や、その形式に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.IDataObject.GetData%2A>を呼び出す前に、この <xref:System.Windows.Forms.DataObject> に書式が存在するかどうかを判断するには、このメソッドを呼び出します。 このインスタンスで使用可能な形式の <xref:System.Windows.Forms.IDataObject.GetFormats%2A> を呼び出します。  
  
 このメソッドは、次の場合に `true` を返します。  
  
-   `autoConvert` パラメーターが `true`、データが適切な形式に変換できる形式になっています。  
  
-   `autoConvert` パラメーターが `false`、データが適切な形式になっています。  
  
 このメソッドは、次の場合に `false` を返します。  
  
-   `autoConvert` パラメーターが `true` であり、このメソッドは指定された形式でデータを見つけることができません。また、データを指定された形式に変換できません。また、データは `false`に設定された `autoConvert` で格納されています。  
  
-   `autoConvert` パラメーターが `false`、このインスタンスに指定された形式でデータが存在しません。  
  
> [!NOTE]
>  変換が許可されているかどうか、および要求された形式が格納されている形式と互換性があるかどうかを指定するようにデータを格納している場合は、別の形式に変換できます。 たとえば、Unicode として格納されているデータをテキストに変換できます。  
  
 このメソッドの実装については、「<xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 この例では、`IDataObject`を実装する <xref:System.Windows.Forms.DataObject> クラスを使用して、`GetDataPresent` メソッドの使用方法を示します。 まず、文字列と `Text` 形式を使用して、データオブジェクト (`myDataObject`) を作成します。 次に、オブジェクトに対して、`Text` 形式に関連付けられているデータを照会し、`autoConvert` パラメーターを `false`に設定します。 この評価は失敗し、結果は "Message #1" という名前のメッセージボックスに表示されます。 2番目の試用版では、`autoConvert` パラメーターを `true`に設定します。 この評価は成功し、結果は "Message #2" という名前のメッセージボックスに表示されます。 この例では、`Form1`という名前の <xref:System.Windows.Forms.Form> が作成されていることを前提としています。  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスに格納されたデータに関連付けられているすべての形式、または変換できるすべての形式のリストを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; string[]" Usage="iDataObject.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスに格納されたデータに関連付けられているすべての形式、または変換できるすべての形式のリストを返します。</summary>
        <returns>オブジェクトに格納されているデータがサポートする形式すべてのリストを表す名前の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.IDataObject.GetData%2A> メソッドを呼び出す前に、このメソッドを呼び出して、サポートされているデータ形式を取得します。 定義済みの形式については、<xref:System.Windows.Forms.DataFormats> クラスを参照してください。  
  
> [!NOTE]
>  変換が許可されているかどうか、および要求された形式が格納されている形式と互換性があるかどうかを指定するようにデータを格納している場合は、別の形式に変換できます。 たとえば、Unicode として格納されているデータをテキストに変換できます。  
  
 このメソッドの実装については、「<xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 この例では、`IDataObject`を実装する <xref:System.Windows.Forms.DataObject> クラスを使用して、`GetFormats` メソッドの使用方法を示します。 まず、文字列と `Text` 形式を使用して、データオブジェクト (`myDataObject`) を作成します。 次に、データオブジェクト内のすべてのデータ形式とデータ変換形式を取得し、結果の一覧をメッセージボックスに表示します。 この例では、`Form1`という名前の <xref:System.Windows.Forms.Form> が作成されていることを前提としています。  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : bool -&gt; string[]" Usage="iDataObject.GetFormats autoConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert">インスタンスに格納されたデータが関連付けられている形式、またはそのデータを変換できる形式をすべて取得する場合は <see langword="true" />。ネイティブ データ形式だけを取得する場合は <see langword="false" />。</param>
        <summary>インスタンスに格納されているデータが関連付けられている形式、またはそのデータを変換できる形式のリストを取得します。データを変換できる形式をすべて取得するのか、ネイティブ データ形式だけを取得するのかを確認するためにブール値を使用します。</summary>
        <returns>オブジェクトに格納されているデータがサポートする形式すべてのリストを表す名前の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.IDataObject.GetData%2A> メソッドを呼び出す前に、このメソッドを呼び出して、サポートされているデータ形式を取得します。 定義済みの形式については、<xref:System.Windows.Forms.DataFormats> クラスを参照してください。  
  
> [!NOTE]
>  変換が許可されているかどうか、および要求された形式が格納されている形式と互換性があるかどうかを指定するようにデータを格納している場合は、別の形式に変換できます。 たとえば、Unicode として格納されているデータをテキストに変換できます。  
  
 このメソッドの実装については、「<xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 この例では、`IDataObject`を実装する <xref:System.Windows.Forms.DataObject> クラスを使用して、`GetFormats` メソッドの使用方法を示します。 まず、文字列と `UnicodeText` 形式を使用して、データオブジェクト (`myDataObject`) を作成します。 次に、データに関連付けられている形式を取得するために2つのクエリを作成します。 最初のクエリでは、`autoConvert` パラメーターを `false` に設定します。この場合、データのネイティブ形式のみが返されます。 2番目のクエリでは、`autoConvert` パラメーターを `true`に設定します。これにより、データの変換先となる形式など、形式の一覧が取得されます。 各ケースでは、結果の一覧がメッセージボックスに表示されます。 この例では、`Form1`という名前の <xref:System.Windows.Forms.Form> が作成されていることを前提としています。  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したデータおよびそのデータに関連付けられている形式をインスタンスに格納します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : obj -&gt; unit" Usage="iDataObject.SetData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">格納するデータ。</param>
        <summary>指定したデータを、そのデータのクラスに基づく形式で、このインスタンスに格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 形式は、データクラスから派生します。  
  
 このメソッドを使用して格納されたデータは、取得時に互換性のある形式に変換できます。  
  
 このメソッドの実装については、「<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 この例では、`IDataObject`を実装する <xref:System.Windows.Forms.DataObject> クラスを使用して、`SetData` メソッドの使用方法を示します。 まず、コンポーネント (`myComponent`) を作成し、データオブジェクト (`myDataObject`) に格納します。 次に、指定したデータがデータオブジェクトに格納されているかどうかを確認し、その結果をメッセージボックスに表示します。 この例では、`Form1`という名前の <xref:System.Windows.Forms.Form> が作成されていることを前提としています。  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">データに関連付けられている形式。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <param name="data">格納するデータ。</param>
        <summary>指定したデータおよびそのデータに関連付けられている形式をインスタンスに格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 対象アプリケーションの形式がわからない場合は、この方法を使用してデータを複数の形式で格納できます。  
  
 このメソッドを使用して格納されたデータは、取得時に互換性のある形式に変換できます。  
  
 このメソッドの実装については、「<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 この例では、`IDataObject`を実装する <xref:System.Windows.Forms.DataObject> クラスを使用して、`SetData` メソッドの使用方法を示します。 まず、データオブジェクト (`myDataObject`) を作成し、`UnicodeText` 形式を指定して、オブジェクトに文字列を格納します。 次に、データが `Text` 形式に変換されるように、オブジェクトに格納されている `Text` 形式を指定して、そのデータを取得します。 結果はメッセージボックスに表示されます。 この例では、`Form1`という名前の <xref:System.Windows.Forms.Form> が作成されていることを前提としています。  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : Type * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">データに関連付けられている形式を表す <see cref="T:System.Type" />。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <param name="data">格納するデータ。</param>
        <summary>指定されているデータおよびそのデータに関連付けられているクラス型をインスタンスに格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 対象アプリケーションの形式がわからない場合は、この方法を使用してデータを複数の形式で格納できます。  
  
 このメソッドを使用して格納されたデータは、取得時に互換性のある形式に変換できます。  
  
 このメソッドの実装については、「<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 この例では、`IDataObject`を実装する <xref:System.Windows.Forms.DataObject> クラスを使用して、`SetData` メソッドの使用方法を示します。 まず、コンポーネント (`myComponent`) を作成し、データオブジェクト (`myDataObject`) に格納します。 `myType` を使用してデータ形式を指定します。 次に、指定した型のデータがオブジェクトに格納されているかどうかをチェックし、結果をメッセージボックスに表示します。 この例では、`Form1`という名前の <xref:System.Windows.Forms.Form> が作成されていることを前提としています。  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * bool * obj -&gt; unit" Usage="iDataObject.SetData (format, autoConvert, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">データに関連付けられている形式。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <param name="autoConvert">データを別の形式に変換できるようにする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="data">格納するデータ。</param>
        <summary>指定されているデータおよびそのデータに関連付けられている形式をインスタンスに格納します。データを別の形式に変換できるかどうかを確認するためにブール値を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 対象アプリケーションの形式がわからない場合は、この方法を使用してデータを複数の形式で格納できます。  
  
 このメソッドの実装については、「<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 この例では、`IDataObject`を実装する <xref:System.Windows.Forms.DataObject> クラスを使用して、`SetData` メソッドの使用方法を示します。 まず、データオブジェクト (`myDataObject`) を作成し、`autoConvert` パラメーターを `false`に設定して、`UnicodeText` 文字列を格納します。 次に、オブジェクトに格納されているデータに関連付けられた形式を取得し、その結果をメッセージボックスに表示します。 データに関連付けられている形式は、`UnicodeText` 形式のみです。 この例では、`Form1`という名前の <xref:System.Windows.Forms.Form> が作成されていることを前提としています。  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>
